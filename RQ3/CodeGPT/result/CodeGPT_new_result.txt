assertEquals ( "property not set correctly" , 0.25 , bean . getDoubleProperty ( ) , 0.01 )
Assert . assertEquals ( WrappedBitSetBitmap . SIZE , wrappedBitSetBitmapBitSet . size ( ) )
assertEquals ( contentType , connection . getContentType ( ) )
assertFalse ( p1 . equals ( null ) )
assertThat ( result . isValid ( ) , is ( true ) )
assertThat ( minMax . iterativeSearchForBestMove ( board , 1 ) , anyOf ( containsString ( "2 2" ) , containsString ( "0 3" ) , containsString ( "4 0" ) , containsString ( "4 1" ) , containsString ( "4 2" ) , containsString ( "3 0" ) , containsString ( "3 2" ) ) )
assertEquals ( 1 , connPerRoute . getMaxPerRoute ( route ) )
Assert . assertEquals ( ( new Mean ( ) ) . evaluate ( scores ) , stats . getMean ( ) , 0 )
assertThat ( sortedPlugins , is ( argumentPlugins ) )
XmlAssert . assertEquals ( EXPECTED_XML_RESPONSE , xmlResponse )
assertEquals ( "" , result )
Assert . assertEquals ( vector , new Vector ( 5 , 10 , 15 ) )
assertEquals ( "Triangle area is not correct" , 2 , a , epsilon )
assertLog ( Log . DEBUG , "test debug argument argument2 argument3" )
assertPaths ( asList ( component . group ( ) , component . name ( ) , component . version ( ) ) , paths , true )
assertEquals ( "INSERT INTO CustomNamePropertyEntity(name) VALUES(?)" , Utils . singleLine ( sql ) )
assertThat ( isValid , is ( false ) )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( ctrl . getCell ( "A1" ) . getText ( ) , "" )
assertFalse ( "isLoaded should return false if all required elements are displayed and " + "RequireAll annotation is used." , testView . isLoaded ( ) )
assertEquals ( "POINT(0 0)" , Evaluator . evaluate ( ex ) )
Assert . assertFalse ( this . manager . connect ( this . person1 , this . family1 ) )
assertClients ( registryAdapterService , REGISTRY_PROXY_NULL_VALUE , REGISTRY_PROXY_NULL_VALUE )
assertThat ( actualBrowser , is ( equalTo ( expectedBrowserCapabilityKey ) ) )
assertEquals ( Arrays . asList ( aa , ab , ac ) , kittens )
assertEquals ( "should contain links" , 0 , db . getAllLinks ( ) . size ( ) )
assertTrue ( ! result )
assertEquals ( "text/html" , requestImpl . get ( "X-Requested-With" ) )
assertEquals ( 4 , result )
assertEquals ( List . of ( new Text ( "line1" ) , new Text ( "line2" ) ) , output )
assertEquals ( "Date parsing is wrong" , expectedDate , mapper . readBitemporalDate ( columns , "vt_to" ) . toDate ( ) )
assertThat ( target . getFlowId ( ) , is ( "FlowId" ) )
assertEquals ( 0x51 , options . port )
Assert . assertNull ( cGroupsBlkioResourceHandlerImpl . reacquireContainer ( containerIdMock ) )
Assert . assertEquals ( 1 , heigth , 0.01 )
assertEquals ( "1.0" , lineages . get ( 0 ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadCaller ( ) ) . isErrorEnabled ( ) )
assertTrue ( groupsManager . isGroupMember ( sess , group3 , member ) )
Assert . assertEquals ( "0" , result )
assertEquals ( set ( FlagsWithZero . V0 , FlagsWithZero . V1 , FlagsWithZero . V4 , FlagsWithZero . V8 ) , set ( positionValues ) )
assertTrue ( brutalAds . get karma ( ) > 50 )
assertEquals ( true , m . matches ( ) )
assertThat ( updateSuccessful , equalTo ( false ) )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
assertTrue ( Arrays . equals ( data , decompressed ) )
assertEquals ( result , "String" )
paths . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( 1 , indexOfLastScoreCalc )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . getIdentifier ( this . vocabularyInstance . getIdentifier ( ) ) )
assertEquals ( expected , real )
assertTrue ( "Following application items are missing: " + Arrays . toString ( missing . toArray ( ) ) , missing . isEmpty ( ) )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( "Broager" , result . get ( 0 ) )
assertEquals ( "The resource you are attempting to access cannot be found" , error . getString ( "reason" ) )
assertEquals ( "probability" , 0.01313 , probability , 0.00001 )
assertEquals ( foo , application . getNamespaces ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><test/>" , stringifiedTestObject )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff38_" ) )
assertEquals ( expected , actual )
assertEquals ( "_cat/shards/testIndex" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertNull ( user )
assertEquals ( 404 , response . getStatus ( ) )
assertTrue ( getTaint ( bc . imei ) != 0 )
assertEquals ( expResult , result )
assertEquals ( System . getProperty ( "user.name" ) , changeLogParameters . getValue ( "user.name" , null ) )
assertEquals ( expected , result )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( element . minimized ( ) ) , is ( PlainDate . of ( 2000 , 12 , 2 ) ) )
assertThat ( job . getDuedate ( ) , is ( addSeconds ( removalTime , START_DELAY ) ) )
assertEquals ( "A cast was found when none expected" , 0 , java5 . parse ( code ) . findDescendantsOfType ( ASTCastExpression . class ) . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( NodeUtilities . NodeFromJSON ( "foo" ) , compoundWrite . apply ( EmptyNode . Empty ( ) ) )
assertEquals ( 0 , serverStatus . getTotalTime ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"answer\\":{\\"headers\\":{\\"P-Header\\":\\"value goes here\\",\\"Remote-Party-ID\\":\\"\\\\\\"John Doe\\\\\\"<sip:jdoe@foo.com>;party=calling;id-type=subscriber;privacy=full;screen=yes\\"}}},{\\"say\\":[{\\"value\\":\\"Hello, you were the first to answer.\\",\\"name\\":\\"say\\"}]}]}" )
assertEquals ( expected , actual )
Assert . assertEquals ( uri1 , uri2 )
AssertUtils . getAndAssert200 ( "http://localhost:2001/login/logout" )
assertEquals ( ">a >b >c <c <b >d <d <a " , rec . buffer . toString ( ) )
assertEquals ( "x/y{@c}(@g = '987')" , SelectorStepBuilder . toString ( steps ) )
assertEquals ( 1 , target . getFilters ( ) . size ( ) )
Assert . assertTrue ( true )
assertEquals ( "�尖�尖�尖�尖�尖��\\n" + "��      ��\\n" + "��      ��\\n" + "��      ��\\n" + "��      ��\\n" + "�尖�尖�尖�尖�尖�尖��\\n" , printer . print ( ) )
assertEquals ( 1 , ret )
assertEquals ( "Translation failed" , AuthorizationException . class , pelopsException . getClass ( ) )
assertEquals ( expected , crs )
assertEquals ( expected , result )
Assert . assertEquals ( expectedResponse , proxy . sayHello ( message ) )
assertEquals ( val . getPeriods ( ) , 3654 )
UnitTestUtils . assertEquals ( new double [ ] { 1 , 2 , 3 } , b . toArray ( ) , 1.0e-12 )
assertEquals ( "the NBSP must survive" , "test " , property . getValue ( ) )
assertEquals ( BigInteger . ZERO , wallet . getBalance ( ) )
assertIdentical ( "/simple_parts.owl" , unmerged )
assertResultSet ( res )
assertTrue ( genotypeData1 . equals ( genotypeData2 ) )
assertEquals ( rootDir , rootDir )
Assert . assertEquals ( "foo" , userDataMap . get ( "title" ) )
assertEquals ( "1" , request . getHeaders ( ) . getFirst ( "If-Match" ) )
response . then ( ) . log ( ) . ifValidationFails ( ) . assertThat ( )
assertEquals ( expected , actualQuery )
Assert . assertNotNull ( zoo )
assertEquals ( 5 , interfaces . size ( ) )
context . assertIsSatisfied ( )
assertEquals ( matcher . matches ( token ) , true )
Assert . assertNotNull ( state )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( expected , aesResult . get ( 0 ) )
assertNotNull ( fixture )
assertThat ( getProcessingError ( ) , containsString ( "externalRestHttpsPort" ) )
assertEquals ( future , underTest . collect ( futures ) )
assertEquals ( expected , settings . getProperties ( ) )
PSLTest . assertRule ( dataStore , input [ i ] , expected [ i ] )
UnitTestUtils . assertChiSquareAccept ( new String [ ] { "0" , "1" , "2" } , expected , observed , 0.01 )
assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.SimpleFileIODatastoreRuntime" ) )
assertTrue ( sut . isEmpty ( ) )
assertEquals ( expected , actual )
assertFalse ( waitingPacketsQueue . isEmpty ( ) )
assertEquals ( "same bound, no event fired" , 0 , report . getEventCount ( ) )
assertNotNull ( AuthorizedConnectApp . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( truststorePath2 , System . getProperty ( "javax.net.ssl.trustStorePath" ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFLoteEnvioRetornoRecebimentoInfo ( ) . toString ( ) )
assertEquals ( unionWithStruct . size ( ) , unionWithStruct . size ( ) )
assertEquals ( "The records number is correct " + clusterName . getName ( ) , 2 , resultIterator . size ( ) )
assertFalse ( "Text node not rendered: \\"" + output + "\\"" , output . contains ( "<text>alert(" ) )
assertEquals ( 2 , ranges . size ( ) )
assertEquals ( i1 , i2 )
assertSelect ( tq , binding ( vars , "\\"foo\\"" , "\\"bar\\"" ) , binding ( vars , "\\"foo\\"" , "\\"bar\\"" ) )
assertEquals ( ( int ) 0x4 , leis . readUnsignedInt ( ) )
assertTrue ( true )
assertEquals ( "192.168.0.0/8" , configuration . getNetworkMask ( ) )
assertTrue ( uvp . getFirstData ( ) == 25.2 )
assertEquals ( "Failed to generate enum switch block" , SWITCH_BLOCK_ENUM , s )
assertEquals ( "{codes:'100-200',exceptions:'Foo*',debugOnly:true,level:'WARNING',req:'LONG',res:'LONG'}" , r . toString ( ) )
assertEquals ( BPResultType . PASS , result . getResultType ( ) )
assertEquals ( - 0.123 , empty . getLatitudeError ( ) , 0.001 )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertTrue ( equals )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Valid cid without dash test failed." , CID_VALID , AdWordsSessionUtil . getClientCustomerId ( session ) )
assertEquals ( "e1" , query . getOrderBy ( ) . getExpressions ( ) . get ( 0 ) . getExpression ( ) )
result . assertIsSatisfied ( 1000 )
Assert . assertEquals ( 1 , ret )
assertTrue ( ( preValidationFailedEx . getMessage ( ) != null ) && ( preValidationFailedEx . getCause ( ) != null ) )
assertEquals ( m1 , m2 )
assertNotNull ( afeTipoDescuento . getId ( ) )
assertEquals ( ResponseStatus . OK , response . getStatus ( ) )
Assert . assertEquals ( 1 , userService . getUsers ( "" , roles , true ) . size ( ) )
Assert . assertEquals ( "Values must be equal" , 0 , emitter . getTotalNumOfMessages ( ) )
assertTrue ( futureDigest . digest ( ) . keyDigest ( ) . isEmpty ( ) )
assertTrue ( evaluator . shouldProxyHost ( "" ) )
assertThat ( path . isNormalized ( ) , is ( false ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( childProject1 . getCustomWorkspace ( ) , parentWorkspace )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertNotNull ( result )
assertMultilinesEquals ( "Number of values:       6     5      4\\n" + "Minimum value:
assertEquals ( "tpc/bi-hourly/year=2014/month=februari/day=01/hour=2" , path )
assertThat ( actualExceptionCode , is ( "defaultExceptionCode001" ) )
assertInternalWktEqualsRegex ( "(?m)\\\\Q" + "InternalWkt[\\n" + "  Param_MT[��Affine parametric transformation��,\\n" + "    Parameter[��A0��, 0.017453292519943295, Id[��EPSG��, 8623]],\\n" + "    Parameter[��B1��, 0.017453292519943295, Id[��EPSG��, 8640]]],\\n" + "   Param_MT[��Molodensky inverse interpolation (radians domain)��,\\n" + "    Parameter[��src_semi_major��, 6378249.2],\\n" + "    Parameter[��src_semi_minor��, 6356515.0],\\n" + "    Parameter[��Semi-major axis length difference��, -112.2, Id[��EPSG��, 8654]],\\n" + "    Parameter[��Flattening difference��, -5.4738838833299144E-5, Id[��EPSG��, 8655]],\\n" + "    ParameterFile[��Geocentric translation file��, Id[��E.*\\\\W\\\\Q" + FranceGeocentricInterpolationTest . TEST_FILE + "��, Id[��EPSG��, 8727]],\\n" + "   Parameter[��Dim��, 2]],\\n" + "   Param_MT[��Affine parametric transformation��,\\n" + "    Parameter[��A0��, 57.29577951308232, Id[��EPSG��, 8623]],\\n" + "    Parameter[��B1��, 57.29577951308232, Id[��EPSG��, 8640]]]]\\\\E" )
assertEquals ( result , new TomlWriter ( ) . write ( new PrettyPrint ( ) . include ( new NestedSection ( "font-size: 1" , "font-size: 2" , "font-size: 3" , "font-size: 4" , "font-size: 5" , "font-size: 6" , "font-size: 7" , "font-size: 8" , "font-size: 9" , "font-size: 10" , "font-size: 11" , "font-size: 12" , "font-size: 13" , "font-size: 14" , "font-size: 15" , "font-size: 16" , "font-size: 17" , "font-size: 18" , "font-size: 19" , "font-size: 20" , "font-size: 21" , "font-size: 22" , "font-size: 23" , "font-size: 24" , "font-size: 25" , "font-size: 26" , "font-size: 27" , "font-size: 28" , "font-size: 29" , "font-size: 30" , "font-size: 31" , "font-size: 32" , "font-size: 33" , "font-size: 34" , "font-size: 35" , "font-size: 38" , "font-size: 39" , "font-size: 40" , "font-size: 41" , "font-size: 42" , "font-size: 43" , "font-size: 44" , "font-size: 45" , "font-size: 46" , "font-size: 47" , "font-size: 48" , "font-size: 49" , "font-size: 50" , "font-size: 51" , "font-size: 52" , "font-size: 53" , "font-size: 54" , "font-size: 55" , "font-size: 56" , "font-size: 57" , "font-size: 58" , "font-size: 59" , "font-size: 60" , "font-size: 70" , "font-size: 70" , "font-size
assertAnnotatedIgnored ( tables . at ( 0 , 2 , 0 ) )
assertEquals ( "http://www.opengis.net/ogc/gene/test/A/G1/G2/G3" , n )
Assert . fail ( "Should have failed" )
assertEquals ( mvjs . size ( ) , 1 )
assertNotNull ( properties )
assertFalse ( it . hasNext ( ) )
assertEquals ( Sets . newHashSet ( BuiltInAnalysisTypes . DEFAULT , BuiltInAnalysisTypes . PHYLOGENOMICS ) , workflowTypes )
assertEquals ( new Integer ( 1 ) , loop . iterator ( ) )
assertNotNull ( sealInputStream )
assertEquals ( in . toString ( ) , out . toString ( ) )
assertTrue ( b )
assertNotNull ( result )
assertFalse ( prozessor . isHostEnabled ( ) )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertEquals ( "success" , result )
assertThat ( out . toString ( ) , is ( String . format ( "Wrong move of Rook%s" , sep ) ) )
assertEquals ( "A" , victim . readName ( ) )
assertEquals ( "" , result )
assertThat ( eventListener . wasCalled , IsEqual . equalTo ( false ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expectedCustomer , account . getNameAndEmail ( ) )
Assert . assertEquals ( 0 , encryCredentialManager . encrypt ( null ) . length ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( 0 , analyser . getNumberOfPickupsAtBeginning ( route ) , 0.01 )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "testUsingCollectionHamcrestMatchers.json" , result )
assertEquals ( "foo" , instance )
assertThat ( stringWriter . toString ( ) , containsString ( "theHtml" ) )
assertEquals ( "finally" , getValue ( ) )
assertTrue ( file . exists ( ) )
assertTrue ( m . find ( ) )
Assert . assertFalse ( result )
assertEquals ( "CSS link tag should be bypassed" , VisitStatus . BYPASS , getVisitStatus ( cssLink ) )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/books/bar" ) , newUri )
assertThat ( tested . getTaskManager ( ) , is ( notNullValue ( ) ) )
assertEquals ( "bar" , cp . get ( ) )
assertEquals ( "{\\"a\\":0}" , n )
assertEquals ( name , opt . get ( ) )
Assert . assertEquals ( "password" , result . trim ( ) )
assertEquals ( "T>Debug messages do not interpret emphasis" , testLog . getMessage ( ) )
Assert . assertEquals ( "No lead 'Mr. Itai Agmon' was found" , "Lead 'Mr. Itai Agmon' was found" )
assertTrue ( validator . isValid ( new Object ( ) , null ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertThat ( insert . getRoutingDocument ( ) , is ( doc ) )
assertEquals ( "x -> (x* 2)" , CodeModelTestsHelper . toString ( aLambda ) )
assertEquals ( "indexvaluesasc:myIndex" , t . toString ( ) )
assertEquals ( "SELECT field * 2 + 1 FROM Class" , q . toString ( ) )
assertSame ( fieldVar , result )
assertArrayEquals ( new long [ ] { 2 , 2 , 1 , 11 , 111 , 2 , 22 , 222 , - 1 , - 1 , - 1 , - 1 , 3 , 33 , 333 , ReplicaState . RBW . getValue ( ) , 4 , 44 , 444 , ReplicaState . RWR . getValue ( ) } , blocks . getBlockListAsLongs ( ) )
assertTrue ( wrapper . isRunInTx ( ) )
assertEquals ( expected , ievent . getEventObj ( ) . getPayload ( ) )
assertTrue ( constraint . fulfilled ( iContext ) )
assertEquals ( HttpStatusCode . NO_CONTENT_204 , response . getStatus ( ) )
assertColumnHeaderOrder ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 )
sensei . assertWriteXml ( prop )
assertEquals ( "Unexpected queries executed -" , expected , update . getQueries ( ) )
assertEquals ( null , result )
assertEquals ( 42 , impl . getPercentile ( 50 , now + 1 ) )
assertTrue ( logService . isNotified ( list ) )
assertTrue ( "Jdbc realm should be created" , ops . exists ( TEST_JDBC_REALM_ADDRESS ) )
assertEquals ( expected , stats )
assertEquals ( expectedStatus , intercepted )
assertEquals ( NON_EXISITING_CLASSPATH_RESOURCE , classPathResource . toString ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( "IRight.m()" , new A ( ) . m ( ) )
assertTrue ( httpResponseExceptionThrown )
assertEquals ( Arrays . asList ( new ImmutablePair < String , String > ( "bar" , null ) , new ImmutablePair < String , String > ( "foo" , "foo" ) , new ImmutablePair < String , String > ( "foo" , null ) , new ImmutablePair < String , String > ( "quux" , null ) ) , outputs )
assertEquals ( "The object is to heavy" , message )
assertEqualsAndHash ( one , two )
assertThat ( isPositive , accepts ( TestMatcher . Instance , theMismatch ) )
assertEquals ( "[0, 1, 2]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertTrue ( "Should throw NoSuchColumnFamilyException" , caughtNSCFE )
assertObjectEquals ( "{'in':'header',name:'Accept-Charset',type:'string'}" , pi )
assertEquals ( deserialized , obj )
Assert . assertTrue ( patientproxyobject . equals ( patient ) )
assertExpectedInitResult ( harness . intialize ( workspaceRoot ) )
assertArrayEquals ( new String [ ] { "-vws" , "unix/viewTag.vws" } , instance . getCommandArguments ( true , "viewTag" ) )
assertions . isInstanceOfAny ( null , null )
Assert . assertTrue ( "TestDeployment failed" , cond1 == cond2 )
assertEquals ( 2 , Iterators . size ( iter ) )
Assert . assertEquals ( "Wrong exception message" , "Wrong exception" , gClients [ i ] . error . getMessage ( ) )
assertNotNull ( result )
assertThat ( new DOMSource ( expected ) , isEquivalentTo ( new DOMSource ( xrdsDocument ) ) )
assertEquals ( 1.0 , result , 0.1 )
assertEquals ( Arrays . asList ( "115200000" , "0" , "115200000" , "asdf" ) , getOutputStrings ( ) )
assertEquals ( "user1" , response )
assertEquals ( new SchemaAndValue ( schema , struct ) , avroData . toConnectData ( avroSchema , avroRecord ) )
assertEquals ( customer , responseImpl . getContent ( ) )
assertNotNull ( tg )
assertFalse ( "Should have failed to create a MapReduce command without a output ono-inline." , built )
assertNotEquals ( Movie . UNKNOWN , result )
assertTrue ( sink . getTableNames ( ) . contains ( "newService" ) )
assertNull ( testUser . getPrivateChatLogger ( ) )
assertEquals ( "34 abc\\n" , found )
given ( ) . get ( url ) . then ( ) . assertThat ( )
assertEquals ( "---25~~~twenty-five+++" , emitter . toString ( "---" , "~~~" , "+++" ) )
Assert . assertEquals ( "sub" , s )
assertEqualsIgnoreLineEnding ( date , "{\\n" + "  \\"id\\" : 42,\\n" + "  \\"name\\" : \\"Arthur Dent\\"\\n" + "}" )
Assert . assertEquals ( 0 , drugs . size ( ) )
assertPersonJson ( event )
assertFalse ( filter . shouldInclude ( source , "some.property" ) )
assertThat ( query , is ( notNullValue ( ) ) )
assertThat ( ByteUtil . toByte ( i ) , is ( ( byte ) 1 ) )
Assert . assertFalse ( data . isToTest ( "foo.BarTest" , 3 ) )
assertNull ( "string value must be null" , s )
assertEquals ( "<a><b><c/></b></a>" , result . toString ( ) )
assertNull ( statement . id ( ) )
assertThat ( "No IllegalStateException not thrown or unexpected Exception thrown when PushBuilder.push() without setting a path." , npeThrown . get ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertThat ( future . get ( ) , equalTo ( "all is well, nothing to see here" ) )
assertThat ( service . getInstanceId ( ) , is ( connectorId . toString ( ) ) )
Assert . assertNotNull ( funcionario )
assertEquals ( "TTGGGGCCTCTAAACGGG-TCTT" + System . lineSeparator ( ) + "TTGGGGC-TCTAA-CGGG-TCTT" + System . lineSeparator ( ) + "TTGGGGC-TCTAA-CGGG-TCTT" + System . lineSeparator ( ) , msa . toString ( ) )
assertEquals ( 0 , objs . size ( ) )
assertEquals ( 1000 , cnt . getCount ( ) )
assertNotNull ( injectionNode )
assertMatchersEqual ( expectedMatcher . build ( ) , actualMatcher )
assertTrue ( "permission was not granted." , readAnalysisSubmissionPermission . isAllowed ( auth , 1L ) )
assertFalse ( routeSpecification . isSatisfiedBy ( itinerary ) )
assertEquals ( first , second )
Assert . assertNotNull ( cu )
assertEquals ( crisisCode , result . get ( 0 ) . getCode ( ) )
assertThat ( args , contains ( "images" ) )
assertTypeParameterIs ( ReflectionUtilTest . class )
assertEquals ( p1 , p2 )
Assert . assertTrue ( "The received message is the same as the sent one" , messageLatch . getCount ( ) == 0 )
assertEquals ( "1.22.333" , certificate . getExtension ( ) )
assertThat ( name + " has no description" , description , is ( notNullValue ( ) ) )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( 1 , latch . getCount ( ) )
assertThat ( getCompiledResult ( ) , is ( true ) )
assertThat ( u . toString ( ) , containsString ( nick . toString ( ) ) )
assertEquals ( false , result )
assertEquals ( ch , buf . getChar ( 0 ) )
assertEqualsIgnoreLineEnding ( xmlString , "<?xml version='1.1' encoding='UTF-8'?><integer>0</integer>" )
assertTrue ( status )
YamlJsonAssert . assertEquals ( expected , actual , DocumentType . JSON )
assertThat ( ConnectionStrategy . backwardsCompatible ( usePrivateDnsName , connectUsingPublicIp , associatePublicIp ) , equalTo ( ConnectionStrategy . PUBLIC_IP ) )
assertFalse ( ( Boolean ) result )
assertEquals ( "hello" , new String ( serverHandler . data ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
Assert . assertTrue ( accept )
assertEquals ( node . getId ( ) , "parentId" )
Assert . assertTrue ( response . getCommandOutput ( ) . contains ( "WmiObject" ) )
assertEquals ( expected , actual )
Assert . assertNotNull ( lfs )
assertEquals ( "\\"schemaName\\".\\"tableName\\"" , database . escapeTableName ( "catalogName" , "schemaName" , "tableName" ) )
assertThat ( actual , is ( expected ) )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( SimpleBigDecimalScore . of ( new BigDecimal ( "1.2" ) ) , scoreDirector . calculateScore ( ) )
assertEquals ( 10 , classUnderTest . getContentsNbrRowsToShow ( ) )
Assert . assertArrayEquals ( expectedTlv , decodedTlv )
assertTrue ( sink . invalidConfiguration )
assertTrue ( "Expected the test to generate a grid" , checkGrid ( "Social_Profiles_Controls_Search_Grid" , true ) )
assertEquals ( XAdESForm . BES , f )
assertEquals ( expected , actual )
assertEquals ( 0 , res )
assertEquals ( expResult , result )
assertTrue ( "User's password updated successfully" , success )
assertThat ( responseContent , containsString ( "Missing identity" ) )
assertContainsRegex ( WHERE + OPEN_CURLY + ":S" + SPACE + ":P" + SPACE + var ( "o" ) + OPT_SPACE + CLOSE_CURLY , query )
Assert . assertEquals ( "SELECT UUID();" , text )
assertNotNull ( result )
assertEquals ( Resource . class , constructorDescriptor . getParameterTypes ( ) [ 0 ] )
assertWhoAmI ( USERNAME_CLIENT )
assertNotNull ( result )
checker . assertEquals ( "[" + i + "]" , exp , act )
assertExpectedInetSocketAddress ( endpoint , socketAddress )
assertTrue ( BitsInt . test ( v , true , 0 ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<prolog xmlns=\\"http://www.w3.org/2005/Atom\\">" + "  <result xmlns=\\"http://www.w3.org/2005/Atom\\">" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n" + "    <xref>http://www.w3.org/2005/Atom</xref>\\n"
assertExec ( "Gives the same value" , Numbers . class , "stringToLong__ILjava_lang_String_2" , res , "123" )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getActivities ( ) . get ( 1 ) , route ) , 0.01 )
assertThat ( IntervalParser . of ( DateIntervalFactory . INSTANCE , formatter , BracketPolicy . SHOW_ALWAYS ) . parse ( "[20140227/20140514]" ) , is ( interval ) )
assertThat ( logger1 , not ( sameInstance ( logger2 ) ) )
assertEquals ( exp , accum )
assertThat ( "Checking 3 frame translation" , protein . toString ( ) , is ( expected ) )
assertThat ( value , equalTo ( "set_VALUE_get" ) )
assertEquals ( 0 , version . hashCode ( ) )
Assert . assertNotNull ( result . getSimpleString ( ) )
Assert . assertEquals ( o , tm )
assertTodo ( expected , actual )
assertArrayEquals ( new byte [ ] { ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x
assertTrue ( amqpsProperties . get ( "amqpsProperties" ) instanceof HashMap )
assertTrue ( entity . equals ( loadedEntity ) )
Assert . assertEquals ( getFullClassName ( fqdnName ) , udf . getClassName ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertCounterCount ( "Jace, Memory Adept" , CounterType . TIME , 1 )
assertEquals ( expected , document )
assertThat ( result , is ( false ) )
assertTrue ( true )
assertEquals ( "outputs" , outputs , sameDiffOuter . getOutputs ( ) )
assertTrue ( identifier . equals ( group . getIdentifier ( ) ) )
assertThat ( mentions , hasItem ( mentionedEntity ( 1 , 1 + mention . length ( ) , EntityType . CLASS , iri ) ) )
assertThat ( sourceUri , is ( "https://bitbucket.org/grubix/git/src" ) )
assertEquals ( m ( "_" , "T" , "method" , 10L , "tstart" , 1L , "tstop" , 11L , "calls" , 3L , "begin" , m ( "_" , "B" , "clock" , 11 ) , "children" , l ( m ( "_" , "T" , "method" , 12L , "tstart" , 3L , "tstop" , 10L , "calls" , 2L , "children" , l ( m ( "_" , "T" , "method" , 14L , "tstart" , 4L , "tstop" , 9L , "calls" , 1L , "error" , errorToMap ( e ) ) ) ) , decodeTrace ( o . getChunks ( ) ) )
assertThat ( resources , contains ( orgId , parentOrgId , parentParentOrgId ) )
Assert . assertEquals ( TRANSLATED_MENU_CATEGORY_DESC , translation )
assertMockEndpointsSatisfied ( )
assertEquals ( "Vertical"? , escaped , orig )
assertNull ( presenter . getValue ( ) )
assertEquals ( 21 , target . getHeight ( ) )
assertEquals ( "hello world" , request )
assertNotNull ( reader )
Assert . assertEquals ( "Microsoft.Devices" , matcher . group ( 1 ) )
Assert . assertEquals ( "Phase is in the message" , Phase . IN , exchange . getPhase ( ) )
assertNotNull ( pcrManifest )
assertTrue ( page . asXml ( ) . contains ( "This is a test" ) )
assertThat ( extractMonitorables ( timerAdapter ) . get ( STDDEV ) . get ( ) , Matchers . < Object > is ( newStdDev ) )
Assert . assertThat ( jsonString , IsEqual . equalTo ( "\\r\\nfoo\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expected , actualQuery )
assertEquals ( "Expected 1 results!" , 1 , n )
assertEquals ( "[a,1,2,b]" , out . toString ( ) )
Assert . fail ( "Didn't get expected HPackException!" )
assertTrue ( factory instanceof ClasspathConfigFactory )
Assert . assertTrue ( Files . size ( tmfile . toPath ( ) ) > 0 )
assertEquals ( expectValue , actualValue )
assertNotNull ( PropertyUtils . getProperty ( result , "auditInfo" ) )
Assert . assertEquals ( dataHoraEvento , infoEventoCancelamento . getDataHoraEvento ( ) )
assertSame ( expected , actual )
Assert . fail ( "Caught unexpected ResourceHandlerException!" )
assertEquals ( "ubuntu" , platform . getName ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoPISQuantidade ( ) . toString ( ) )
assertEquals ( expected , x )
Assert . assertTrue ( jaegerConfig . isEnabled ( ) )
arraysWithCustomComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
assertThat ( transferSuccessful , is ( false ) )
Assert . assertTrue ( "Incorrect file types returned" , CollectionUtils . isEqualCollection ( types1 , widget . getFileTypes ( ) ) )
Assert . assertEquals ( "(nt_change_insertion (nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 124)))) ins (nt_string AT))" , nt_change_insertion . toStringTree ( parser ) )
assertThat ( anyTS . isValid ( MICRO_OF_SECOND , 999 ) , is ( true ) )
assertEquals ( "Mismatched message at line #" + i , message , line )
assertTrue ( Pattern . matches ( "(?s).*<html>\\\\s*<head>\\\\s*<title>\\\\s*component01.jsp\\\\s*</title>\\\\s*</head>\\\\s*<body>\\\\s*<input\\\\s*id=\\"username\\"\\\\s*type=\\"text\\"\\\\s*name=\\"username\\"\\\\s*maxlength=\\"32\\"\\\\s*onkeypress=\\"attrValue\\"\\\\s*size=\\"20\\"/>\\\\s*</body>\\\\s*</html>.*" , page . asXml ( ) ) )
Assert . assertEquals ( fallbackOutput , got )
assertEquals ( expResult , result )
assertThat ( result , is ( 0 ) )
Assert . assertEquals ( objectType , generated )
assertTrue ( ! result )
assertEquals ( "Base value is not properly parsed" , "00000.0000" , parsed )
assertThat ( buffer . isReadOnly ( ) , is ( true ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertTrue ( instance . hasNext ( ) )
Assert . assertEquals ( "PONG" , result )
editor . assertHoverContains ( "debug" , "java.lang.String" )
Assert . assertEquals ( true , errors . hasFieldErrors ( "name" ) )
Assert . assertEquals ( 2 , p . get ( "j3" ) . size ( ) )
assertEquals ( 2 , filteredTodos . size ( ) )
Assert . assertEquals ( this . doc . getDocument ( ) , this . mocker . getComponentUnderTest ( ) . edit ( this . user , this . doc ) )
assertTrue ( Arrays . equals ( etalon , array ) )
assertEquals ( numberOfCriterionsOfTypeResource , numberOfCriterionsOfTypeResourceAndWorker )
assertEquals ( s , Integer . toString ( cd . getRow ( ) ) )
assertNull ( statement . getReference ( ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "admin" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertThat ( windows . minus ( empty ) , is ( windows ) )
assertEquals ( m1 . element0 ( ) , m2 . element0 ( ) )
assertEquals ( "0.000012000s from now (ticker=FAKE_TICKER)" , d . toString ( ) )
assertThat ( rm . matches ( mockInnerMatcher ) , is ( true ) )
assertThat ( date , is ( PlainDate . of ( 2012 , 10 , 21 ) ) )
assertTrue ( IsEqualInternally . areEqualInternally ( expectedResult , sut . extract ( content , 0 ) ) )
assertEquals ( 0 , versionEntities . size ( ) )
assertEquals ( 1 , value . size ( ) )
assertNotNull ( solver )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertEquals ( pos . getIndex ( ) , 0 )
assertEqualLines ( "invalid renaming in Enumbered" , getFileContents ( getOutputTestFileName ( "Enumbered" ) ) , cu . getSource ( ) )
Assert . assertNotNull ( "Topic map with base address returned as null" , base )
assertEquals ( - 300 , scorer . scorePosition ( board , context ) )
Assert . assertNotNull ( file . toString ( ) )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 800 )
assertEquals ( "Unsatisfied qualifier: 'unmatched'" , e . getMessage ( ) )
Assert . assertNull ( "There can't be active transaction here" , tm . getTransaction ( ) )
Assert . assertEquals ( versao . toString ( ) , eventoCancelamento . getVersao ( ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
context . assertEquals ( 3 , count . get ( ) )
assertEquals ( 0.500 , value . get ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/buildTypes/id:bt296/builds" , buildTypeUrl )
assertNull ( loadedStore )
assertThat ( result , is ( getAllFunctionsResponse ) )
assertEquals ( "BAZ" , this . fooStateFSM . getCurrentState ( fooState ) . getName ( ) )
assertTrue ( charsetPattern . matches ( "A" ) )
Assert . assertNull ( files )
assertEquals ( "00000000" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( map , map2 )
assertEquals ( "((dependencyBuilder.input(\\"A\\").build() || dependencyBuilder.input(\\"B\\").build() && dependencyBuilder.input(\\"C\\").build()))" , inputLogicParser . parse ( root ) )
assertEquals ( np . getCurrentDate ( ) , np . getCurrentDate ( ) )
assertEquals ( systemPropertyValue , System . getProperty ( "key1" ) )
assertEquals ( embedCode , detail . get ( "embed_code" ) )
Assert . assertFalse ( this . manager . remove ( this . person1 ) )
Assert . assertTrue ( getSubject ( ) . hasPermission ( "123" ) )
Assert . assertEquals ( "Hub should be able to fulfill request" , HttpServletResponse . SC_CREATED , response . getStatusCode ( ) )
Assert . assertEquals ( expected , read )
assertAlias ( sql , columnParam , "nor" , param )
assertTrue ( errOutput . contains ( "COLD" ) )
assertEquals ( Integer . valueOf ( 2 ) , Integer . valueOf ( list . size ( ) ) )
assertions . isNotEmpty ( )
assertOrder ( order , DATA_LENGTH , comparator )
assertTrue ( result . length == 15 )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( 1.5 , ed . getRealEigenvalue ( 0 ) , 1.0e-15 )
assertEquals ( Location . LOCATION_LHS_FROM_ACCUMULATE_RESULT_IN_ACCUMULATE_RESULT , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( mockParamList , paramList )
assertEquals ( expectedLocalizedXLIFF , localizedAsset )
assertEquals ( Arrays . asList ( parser1 , parser2 ) , parsers )
assertTrue ( result )
assertThat ( analyzer , is ( org . apache . lucene . analysis . de . GermanAnalyzer . class ) )
assertThat ( target . getBody ( String . class ) , is ( notNullValue ( ) ) )
Assert . assertEquals ( "Hello World" , endpoint . getRequest ( ) )
objects . assertIsEqualToIgnoringGivenFields ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( b1 , b2 )
assertEquals ( "Expected no result" , 0 , result . size ( ) )
assertEquals ( expectedName , name )
Assert . fail ( "ID should be invalid" )
assertTrue ( m . nextChar ( ) > - 1 )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( 2 , layerCnt )
Assert . assertEquals ( "1002" , sprintService . getTeam ( ) . getId ( ) )
assertEquals ( 900 , res )
assertEquals ( rows - 1 , sorter . convertRowIndexToModel ( rows - 1 ) )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . has ( T . label , "friendXXX" ) . has ( T . label , "friendXXX" ) . count ( ) . next ( ) , 0 )
assertThat ( result , is ( newTable ( ) ) )
assertTrue ( client . getRoles ( ) . size ( ) > 0 )
assertTrue ( TClass . areEqual ( row , bindings . getRow ( 1 ) ) )
Assert . assertEquals ( "Message to string is wrong" , "Message to string is wrong" , msg . toString ( ) )
context . assertTrue ( result . isEmpty ( ) )
assertTrue ( medias . size ( ) == 1 )
assertEquals ( exepcted_individual , returned_individual )
Assert . assertFalse ( "Requests with different order of URI path options must not equal!" , coapRequest1 . equals ( coapRequest2 ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "vtTo" ) )
assertThat ( Math . abs ( clock . currentTime ( ) . until ( SystemClock . INSTANCE . currentTime ( ) , TimeUnit . MILLISECONDS ) ) < 1 , is ( true ) )
assertEquals ( "" , result )
assertThat ( actual , is ( equalTo ( next ) ) )
Assert . assertNotNull ( json )
Assert . assertEquals ( configNew , configOld )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( sqsMessage , recvMessage )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertEquals ( "2007-05-02T15:12:52.421+02:00" , r )
assertions . isSorted ( )
assertNotNull ( entity .lifecycle ( ) )
Assert . assertEquals ( 1 , bean1 . getId ( ) )
Assert . assertEquals ( getElement ( "OBR.15" , "CM_SPS.3" ) , result )
assertEquals ( "Hello world!" , bean . getMessages ( ) . get ( 0 ) . getText ( ) )
assertEquals ( tenUnits , result . size ( ) )
assertFalse ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertKernel ( kernel , CIRCLE3 , e )
Assert . assertEquals ( "3 months from now" , t . format ( new Date ( 2629743830L * 3L ) ) )
assertEquals ( "Hello {firstName} Doe" , ResponseBodyInterpolator . interpolate ( "Hello {lastName} {firstName} {lastName}" , req ) )
Assert . assertTrue ( stringToEncrypt . equals ( new String ( decrypted , "UTF-8" ) ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expResult , EntityFormatter . writeEntityCollection ( entity ) )
assertEquals ( "Accept-Checksum" , callRequestFrame . getContent ( ) . get ( 0 ) )
Assert . assertNotNull ( "null execResult" , execResult )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertEquals ( DataStatus . ACTIVE , empty . getStatus ( Side . STARBOARD ) )
assertThat ( databaseMapping . getPrimaryDatabase ( ) , is ( "some_unknown_prefix_db" ) )
Assert . assertEquals ( 0 , countryList . size ( ) )
assertNull ( channel . basicGet ( q , false ) )
assertTrue ( screenshotFile . exists ( ) )
Assert . assertEquals ( test , expected )
Assert . assertNotNull ( rb )
assertEquals ( fieldsBuilder . build ( ) . toString ( ) , result . build ( ) . toString ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( actDate . getTime ( ) , expDate . getTime ( ) )
assertEquals ( 0 , customAnnotations . size ( ) )
assertThat ( result , equalTo ( expected ) )
assertNotNull ( result )
assertEquals ( "http://example.com?hoge=fuga&piyo=1&foo=foo" , got . toString ( ) )
TestUtils . assertEquals ( "Spearman's correlation matrix" , createRealMatrix ( rData , 5 , 5 ) , correlationMatrix , 10E-15 )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
assertEquals ( result , "Hello" )
Assert . assertNull ( t . thread ( messages ) )
Assert . assertEquals ( 5L , result . get ( "value" ) )
Assert . assertEquals ( "Excel" , csvFormat . getDelimiter ( ) )
assertNull ( APMSpan . findPrimaryReference ( Arrays . asList ( ref1 , ref2 , ref3 , ref4 ) ) )
assertEquals ( uri , builder . build ( ) )
Assert . assertNotNull ( controllerResponse )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( date ) , mapper . readBitemporalDate ( columns , "ttFrom" ) )
assertEquals ( valueIn , valueOut )
assertEquals ( "opendaylight-iid" , terminationPointIId . getInstanceIdentifier ( ) )
assertThat ( arguments . getReadTimeoutMillis ( ) , equalTo ( 0 ) )
assertThat ( result , containsString ( "<link" ) )
assertEquals ( 1L , post . getImage ( ) . longValue ( ) )
Assert . assertEquals ( points . length * val , s , 0d )
assertNotNull ( u )
assertEquals ( 15 , reasoned . getAxiomCount ( ) )
assertEquals ( "Registration failed. Reason: TestReason" , translated )
Assert . assertEquals ( expectedText , lastAlert . getText ( ) )
assertEquals ( ifStr , "if (!(org.uberfire.security.client.authz.AuthorizationManagerHelper.authorize(\\"myfeature\\"))) {\\n" + "  return;\\n" + "}" )
assertEquals ( "Unexpected response body" , message1 , combinedDeferredResult . get ( 1 , TimeUnit . SECONDS ) . get ( ) . getBody ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "EntitySetSample" , resultQuery )
assertThat ( q , is ( TermQuery . class ) )
assertSame ( value , bound . valueFor ( 1 , 'a' ) )
assertNull ( millis )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 8 , warnings . size ( ) )
assertEquals ( "a" , builder . getValue ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertThat ( actual , is ( funcationMapper ) )
Assert . assertEquals ( Type . Managed , adapter . type ( ) )
assertEquals ( "/" , path . toString ( ) )
assertEquals ( Integer . valueOf ( 2 ) , Integer . valueOf ( list . size ( ) ) )
assertTrue ( req_034_Util . isPeerInterestedOnRemoteTopic ( component . getTopic ( ) ) )
assertFalse ( metaChild . isAssignableFrom ( metaGrandparent ) )
assertNotNull ( "ns-object must not be null" , nsObject )
Assert . assertEquals ( value , _context . getProperty ( key ) . getValue ( ) )
assertEquals ( action . getOldValue ( ) , CompressionMethod . NULL )
assertNotNull ( patientRole )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( expectedList , sut . fetchPage ( 6 , wrappedList ) )
assertFalse ( map . isEmpty ( ) )
Assert . assertTrue ( cc >= 2 )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( report )
Assert . assertTrue ( fc1 != null )
Assert . assertTrue ( isEqual ( distance , 0.6 ) )
assertEquals ( CellComparatorHelper . getSanitizedStaticValue ( cell ) , "needle" )
assertEquals ( environment . bootstrapCarrierDirectPort ( ) , loader . port ( ) )
assertEquals ( "Value {" , result )
assertSame ( input , output )
Assert . assertEquals ( tag . type ( ) , TagType . FLOAT )
assertNull ( result )
assertTrue ( victim . isEnabled ( ) )
Assert . assertEquals ( desiredOutput , output )
assertNull ( teamExternalGroups )
assertNotNull ( "addon must load lf-specific icon" , UIManager . getIcon ( ColumnControlButton . COLUMN_CONTROL_BUTTON_ICON_KEY ) )
assertEquals ( EX_43_EXPECTED , hexadecimalHash )
assertArrayEquals ( excepted , actual )
assertEquals ( collectorManager1 , collectorManager2 )
assertTrue ( remoteWebDriver . getTitle ( ) . equals ( "Wiki, the free encyclopedia" ) )
Assert . assertEquals ( 2 , a . getCbo ( ) )
assertEquals ( bolt . visibility , result )
assertEquals ( testAlgorithm , tlsCertificateAuthorityServiceCommandLine . getKeyAlgorithm ( ) )
assertContextOk ( ctx , "O1:doc:doc" , "Hello from Context!" , "Source" )
assertTrue ( new File ( "target/export7" ) . exists ( ) )
assertResultSet ( res )
assertArrayEquals ( data , dataDis )
Assert . assertNull ( RequestObjectHelper . getReturnKeys ( jsonWithNonArrayReturnKeyValue ) )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response statusText is: <html />" ) ) )
Assert . assertEquals ( "test2" , testScopePath . getParentScopePath ( ) . getName ( ) )
assertEquals ( 1 , c1 . compareTo ( c2 , messageTo ( "/foo" ) ) )
assertEquals ( new Long ( 1234 ) , longVal )
assertThat ( info . getClusterService ( CLUSTER ) , sameInstance ( currentService ) )
Assert . assertNotNull ( new Bean80ABindMap ( ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( expectedQuery , actualQuery )
Assert . fail ( "Exception should be thrown" )
Assert . assertNotNull ( entity )
assertTrue ( aclDao . hasEntry ( principal , secureObject ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "x" , x )
assertThat ( TestI18n . testMessage2 . text ( "Test" , "Message Test Message" ) , is ( "Message Test Message" ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 4 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" + " oxm_class: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225" + ".OpenflowBasicClass oxm_field: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow" + ".oxm.rev150225.InPort experimenterID: null" , key1 . toString ( ) )
assertThat ( unhandledException . getMessage ( ) , allOf ( containsString ( "MutabilityDetector unexpectedly unable to determine its own class" ) , containsString ( "Class being analysed: %s" ) , containsString ( "Class being analysed: %s" ) , containsString ( "Classes analysed soFar: %s" ) ) )
assertEquals ( new BlockStoreLocation ( tier . getTierAlias ( ) , mDir . getDirIndex ( ) , mDir . getDirMedium ( ) ) , mDir . getDirView ( ) )
assertSame ( "Wrong bundle" , b , ir . getBundle ( ) )
assertFalse ( survey . isAnswerSelected ( 1 ) )
assertTrue ( ! cs . isAfterLast ( ) )
Assert . assertEquals ( field . getValue ( ) , 15 )
assertEquals ( parseCalendar ( "20131104-00:00:00" , TimeZone . getTimeZone ( "US/Eastern" ) ) , dh . getCalendarAfter ( testingClock . getCurrentCalendar ( ) ) )
assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( "1234/1234567" ) )
assertArrayEquals ( new byte [ ] { - 122 , - 13 , - 23 , - 33 , - 37 , - 9 , 107 , - 124 , 48 , 124 , - 24 , 116 , - 126 , 8 , 16 , - 12 , 44 , 114 , 66 , - 96 , - 128 , 82 , - 65 , - 71 , 110 , - 74 , - 41 , 15 , 68 , 51 , - 11 , 24 } , new Algorithm2B ( ) . computeHash ( concatenate ( userBytes , userValidationSalt ) , userBytes ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertThat ( indentCharacters , is ( equalTo ( "\\n" ) ) )
assertTrue ( engine . exists ( testIndex ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 ) )
assertEquals ( 23 , articles . size ( ) )
assertEquals ( expResult , result )
assertFalse ( ex . isPrime ( 225 ) )
runner . assertNotValid ( )
assertTrue ( vrpBuilder . getLocationMap ( ) . containsKey ( "start" ) )
assertEquals ( 0 , walEdit . size ( ) )
assertEquals ( "db_0__init.cql" , cqlMigrationResolver . extractScriptName ( new ClassPathResource ( "db/migration/db_0__init.cql" , Thread . currentThread ( ) . getContextClassLoader ( ) ) ) )
assertTrue ( convertor . isPresent ( ) )
assertTrue ( CheckDetector . isPlayerJustMovedInCheck ( bitBoard ) )
assertTrue ( operation . exists ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n\\tvar self = this;\\n\\tif (a)\\n\\t\\tRoyaleTest_A.superClass(this, 'foo');\\n}" )
assertThat ( m . matches ( ) , hasItems ( Tuple . of ( 1 , 2 ) , Tuple . of ( 3 , 4 ) ) )
assertEquals ( validSubfieldCodes , validSubfieldCodes )
assertEquals ( result , "Monday, December 3, 2007 - 10:15:30 AM UTC" )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertNull ( foundClazz )
assertNull ( tr . findCertInfo ( createCert ( true , "BISCUITS" ) ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( f2 , sameInstance ( f1 ) )
assertEquals ( "clone=true" , getLastRequestQuery ( ) )
assertEquals ( 1 , request . getOauthParameters ( ) . size ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( boundary , BatchParserCommon . getBoundary ( contentType , 0 ) )
assertEquals ( "name" , process . getAssignedTo ( ) )
assertFalse ( cv . supports ( Date . class ) )
assertNameAndQualifiedName ( tree , "fn" , "mod.fn" )
Assert . assertEquals ( 20 , countries . size ( ) )
assertEquals ( 123L , book . getId ( ) )
Assert . assertEquals ( HomepageImpl . class , homepage . getClass ( ) )
assertEquals ( "abcdf 47,ab%bcde 47,ab%bc" , target . toString ( ) )
assertEquals ( "YYY" , html )
assertThat ( historicJobLogExceptionStacktrace , notNullValue ( ) )
assertEquals ( i , db . getLastValue ( "TestMetric" , Integer . class ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertThat ( publicJobLink , containsString ( "eu-central-1" ) )
Assert . assertArrayEquals ( expected , left . toByteArray ( ) )
assertEquals ( expResult , result )
Assert . assertThat ( allCategories , Matchers . contains ( "categoryA" , "categoryD" , "categoryB" , "categoryC" , "categoryE" ) )
assertEquals ( swagger , swaggerRegistry . get ( swaggerPath ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertEquals ( expected , handshakeMsg . toString ( ) )
assertEquals ( exampleValue , resourceEditProperty . getExampleValue ( ) )
assertTrue ( children . contains ( MetaZkConfig . getMetaServerSlotsPath ( ) ) )
assertTrue ( reference instanceof SoftReference )
assertThat ( visibleText , is ( "foo" ) )
assertTrue ( "" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) )
assertEquals ( "Hello < There <&>" , doc . select ( "div" ) . first ( ) . text ( ) )
assertEquals ( "Trimmed result should not include ending mutate if isFirst and !isLast" , testPair . get ( 1 ) , postProcessed )
assertThat ( response . getPersonInformationStructure ( ) . getRegularCPRPerson ( ) . getSimpleCPRPerson ( ) . getPersonNameStructure ( ) . getPersonGivenName ( ) , is ( person . getFornavn ( ) ) )
assertTrue ( schemaRegistry . getHostnameVerifier ( ) . verify ( "" , null ) )
assertFalse ( isServiceReady )
this . tester . assertContains ( "<p class=\\"empty\\">blah</p>" )
assertEquals ( Arrays . asList ( getDummyPlayer ( ) , getDummyPlayer ( ) ) , model . getAllPlayers ( ) )
assertEquals ( LogSeverity . FINE . toString ( ) , severity . toString ( ) )
Assert . assertNull ( newConceptSource . getCreator ( ) )
assertOut ( "var /** @type {number} */ a = 0xabc" )
Assert . hasText ( null , "has text" )
assertions . contains ( expected )
assertNotSame ( vendor . getFormatFor ( customFormatID , Locale . GERMANY , DateFormat . LONG ) , vendor . getFormatFor ( customFormatID , Locale . GERMANY , DateFormat . LONG ) )
assertNotNull ( client )
assertEquals ( "a,b,c,d,e" , Joiner . on ( ',' ) . join ( foundOrder ) )
Assert . assertTrue ( select . execute ( ) . size ( ) == Constant . THREE )
Assert . assertTrue ( newPointAvailable )
assertEquals ( "/" , result . toString ( ) )
assertEquals ( 4 , container . indexOfId ( id ) )
assertEquals ( prot . getName ( ) , s )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( "Should return instance ofFeasible localhost" , LocalPlatform . class , address . getClass ( ) )
Assert . assertEquals ( xmlEsperado , lacre . toString ( ) )
assertEquals ( 100.0 , s . getDeliveryServiceTime ( ) , 0.01 )
assertEquals ( 2 , categories . length )
Assert . assertNotNull ( "Web ResourcesFolder is null" , facet . getWebResourcesFolder ( ) )
assertEquals ( expectedIndex , artistIndex )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( expectedSqlForMathOperations3 ( ) , result )
assertEquals ( PERSON_COUNT , actual )
assertEquals ( "\\"a.j.\\"^^xsd:string" , name )
assertThat ( matrix , IsEqual . equalTo ( expectedMatrix ) )
assertEquals ( "852a_Location_location_ndn" , indexEntries . keySet ( ) . toArray ( ) [ 0 ] )
assertEquals ( 0.0 , accessEgressCalc . getCosts ( iContex ) , 0.01 )
assertThat ( capturedEvents , hasItem ( mdcFormat ( "testMDCInvokeOrdered" , "foobar" ) ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertTrue ( authorizationManager . authorize ( perspective1 , user1 ) )
assertThat ( html , is ( "<select id=\\"w1\\" name=\\"w1\\"><option value=\\"value1\\">label1</option><option value=\\"value2\\" selected=\\"true\\">label2</option><option value=\\"value3\\">label3</option></select>" ) )
assertEquals ( fromObj , fromStr )
assertThat ( deserialize ( output . toByteArray ( ) ) , is ( data ) )
assertEquals ( methodVariableBindings . size ( ) , 1 )
assertEquals ( NAME_NODE , action . getNameNode ( ) )
assertNull ( wrapper . getArtist ( ) )
Assert . assertTrue ( newSql . equals ( "SELECT t.name, sum(t.price) FROM cpcplan" + suffix + " t GROUP BY t.name, t.id" ) )
assertArrayEquals ( expectedBytes , actualBytes )
Assert . assertEquals ( "MNOPRSTUVWXYZ" , text )
assertTrue ( converter . canConvert ( Index . class ) )
assertNotNull ( deltaClient . get ( dsRef ) )
assertThat ( axioms , hasItem ( axiom ) )
assertThat ( "No tags should have been returned." , actualTag , is ( equalTo ( expectedParseResult ) ) )
assertEquals ( "test-config-external-address" , config . getExternalAddress ( ) )
Assert . assertEquals ( "Invalid csv line" , "1,DEVICE0,METRIC0,0,20150203235809-0500,UNDEFINED,1,13.31" , line )
assertTrue ( hasspecialchar )
assertEquals ( "urn:oid:0.1.2.3" , parsed . getEntry ( ) . get ( 0 ) . getResource ( ) . getIdElement ( ) . getValue ( ) )
assertThat ( itr . hasNext ( ) , is ( false ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( 5 , css . getSeverity ( ) )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertThat ( xml , containsString ( "<recipients>" + USER0 . getEmail ( ) + "</recipients>" ) )
assertEquals ( Money . of ( 3 , "CHF" ) , BasisPoint . of ( BigDecimal . valueOf ( 0.036d ) , "CHF" ) . apply ( m ) )
assertEquals ( "Wrong conversion handler" , ConversionHandler . DEFAULT , config . getConversionHandler ( ) )
assertThatEmbedderIs ( notAnnotated . buildEmbedder ( ) )
assertThat ( matcher . matches ( literal ) , is ( false ) )
assertThat ( url . toUri ( ) , is ( equalTo ( "http://localhost:3000/products?q=Doni&pw=1" ) ) )
Assert . assertEquals ( buff . toString ( ) , result . getContext ( ) )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertEquals ( 1 , count )
Assert . assertEquals ( "NavigationPropertyDefault" , name )
assertEquals ( expected , output . trim ( ) )
assertEquals ( expected , found )
assertSame ( toTest , toTest . setParamsSerializer ( Serializer . class ) )
assertThat ( "Expected " + expectedAgents + " to be the same as " + internalEnv . getAgents ( ) , expectedAgents , containsInAnyOrder ( "org.eclipse.che.ws-agent" , "com.codenvy.rsync_in_machine" ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( expected , actual )
assertTrue ( "Expected null result" , result == null )
assertFalse ( checker . isDetected ( ) )
assertTrue ( "TreeGrid should have same size" , tree . getTableWrapper ( ) . getSize ( ) . getWidth ( ) == tree . getRow ( 0 ) . getSize ( ) . getWidth ( ) )
assertEquals ( j , Integer . valueOf ( i ) )
assertEquals ( expectedJson , actual )
assertEquals ( "Expected 250 results!" , 250 , rows . size ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertNotNull ( "no topic found with a topic name after reload" , topic )
assertEquals ( null , overwriteFunction . getId ( ) )
assertTrue ( sysRoot . lookup ( "system" ) . contains ( "testEntry" ) )
assertTrue ( wasCalled . get ( ) )
assertEquals ( expectedResult , cut . getAliadaEventTypesFrom ( anEventTypeThatIsInCache ) )
assertEquals ( fixed , test )
assertThat ( findFeature ( featureList , "GetLocalListVersion" ) , is ( instanceOf ( GetLocalListVersionFeature . class ) ) )
assertTrue ( news . checkVisibilityFor ( loggedUser ( author ) ) )
assertEquals ( assertion , getTest )
Assert . assertNull ( r . getRequest ( ) . getSession ( ) . getAttribute ( SEC_CONTEXT_ATTR ) )
Assert . assertArrayEquals ( new String [ ] { "bow=it" , "bow=is" , "bow=12.345" , "bow=long" } , generator . extractFeatures ( new String [ ] { "it" , "is" , "12.345" , "feet" , "long" } , Collections . emptyMap ( ) ) . toArray ( ) )
assertEquals ( "SOAPAction" , hmd . getName ( ) )
assertThat ( context . hasConfiguredExceptionHandling ( ) , is ( false ) )
assertTrue ( errorsContainer . equals ( errors ) )
assertTrue ( stack2 . isEmpty ( ) )
assertEquals ( "" , result )
assertSame ( id , result )
assertEquals ( "my_silly_filename.pem" , result )
assertTrue ( em instanceof WebApplicationExceptionMapper )
assertThat ( environmentVariables . getProperty ( "webdriver.driver" ) , is ( "safari" ) )
assertThat ( reason , assumingFields ( "myMutableMap" ) . areNotModifiedAndDoNotEscape ( ) )
assertThat ( d . with ( Duration . approximateHours ( 24 ) ) , is ( Duration . ofNegative ( ) . years ( 1 ) . months ( 1 ) . days ( 3 ) . build ( ) ) )
assertEquals ( 2.0d , e . evaluate ( ) , 0.0 )
assertEquals ( "caseTask" , activityType )
assertEquals ( "Cell should be selected" , 0 , grid . getRowCount ( ) )
assertEquals ( expectedCredential , credential )
assertThat ( "VAL4 == val4" , obj , equalTo ( true ) )
assertEquals ( getLabel ( ) , 0.0 , eye . minus ( m3 ) . getEuklideanValue ( ) , TOLERANCE )
Assert . assertEquals ( 2 , s . x )
assertEquals ( 7 , obs . getObsId ( ) )
assertEquals ( expected , built )
Truth . assertThat ( gson . toJson ( treeMessage ) )
assertEquals ( rp , point )
assertFalse ( pair . isPresent ( ) )
assertTrue ( doc . getErrors ( ) . isEmpty ( ) )
assertTrue ( seen . add ( UUIDGenerator . nextHex ( UUIDGenerator . TYPE4 ) ) )
assertEquals ( 1L , result . getTime ( ) )
assertEquals ( 5 , interpreter . i )
Assert . assertEquals ( expectedOutput , output )
assertThat ( excludeSkippedAndIgnored ( outcomes ) . size ( ) , is ( 4 ) )
assertEquals ( expected , future . getValue ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 6 , warnings . size ( ) )
assertEquals ( request . getCriteriasByTable ( ) . size ( ) , 1 )
assertThat ( request . getEncodedParameter ( "foo" ) , equalTo ( "bar!" ) )
Assert . assertEquals ( testRecords . get ( 0 ) . getSchema ( ) , aSchema )
assertEquals ( domainIds , ids )
assertTrue ( fs . deleteOnExit ( path ) )
arrays . assertEndsWith ( description , new short [ 1 ] , new short [ 0 ] )
Assert . assertEquals ( "curl -X POST -L \\"X-Access-Token: __API_EXPLORER_AUTH_KEY__\\" 'https://eatstreet.com/publicapi/v1/restaurant/358/menu'" , curl )
assertArrayEquals ( TEST_CONTENT , out . toByteArray ( ) )
assertTrue ( sqlString . contains ( "sqlname.name" ) )
assertFalse ( monitor . contains ( patch2 ) )
assertThat ( result . endsWith ( expectedString ) , is ( true ) )
assertNotNull ( slf4jInfoWriter )
Assert . assertEquals ( new HashSet < > ( Arrays . asList ( new DataTypeDefinition ( "TABLE1" , "NAME" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE1" , "FIRST_NAME" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE1" , "PROFESSION" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE2" , "PROFESSION" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE2" , "RECOGNITION" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE2" , "COMMENTS" , "TEXT" ) ) ) , new HashSet < > ( notNullDefinitions ) )
assertArrayEquals ( a , dbr . query ( "SELECT INTA FROM CA_TEST WHERE INTA = $1" , List . of ( new Object [ ] { a } ) ) . at ( 0 ) . getArray ( "shorta" , Short [ ] . class ) )
assertTrue ( r1 instanceof PublicCloneable )
assertRequest ( "DELETE" , "Call/%s/Record/" , callId )
assertLoadBalanced ( two . loadBalanced )
assertThat ( intersection ( other , expected ) , is ( true ) )
Assert . assertEquals ( expected , actual )
assertTrue ( ex . isPrime ( 83 ) )
assertTrue ( result . get ( ) )
Assert . assertNotNull ( product )
Assert . assertEquals ( "GET" , s )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertTrue ( Arrays . equals ( pktSerialized , actual ) )
assertThat ( webConfig . isGWTServiceServletDefined ( ) , is ( true ) )
assertEquals ( md . getPacketType ( ) , PacketType . XTraceMetadata )
assertEquals ( 2 , entities . size ( ) )
assertTrue ( entityVersion . toString ( ) . contains ( entity ) )
assertTrue ( thisMetaPage . hasProperty ( RDF . type , API . Endpoint ) )
assertTrue ( batteryInfos . size ( ) == 0 )
assertOutputSameTextFile ( gen , "DefineConstructor_PM.java.txt" )
assertEquals ( "12345-678" , formatedValue )
assertEquals ( true , typeUsage . isInterface ( new InFileSymbolResolver ( JdkTypeResolver . getInstance ( ) ) ) )
Assert . assertFalse ( "No configs were found" , configs . isEmpty ( ) )
assertNotNull ( claims )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
Assert . assertEquals ( "sensor/sensor_create" , view )
Assert . assertNotNull ( result )
assertEquals ( Double . valueOf ( "12.3" ) , converter . getAsObject ( facesContext , new UIPanel ( ) , "12.3" ) )
assertThat ( ts . with ( PlainTime . COMPONENT . roundedToFullHour ( ) ) , is ( PlainTimestamp . of ( 2015 , 1 , 1 , 0 , 0 ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , cmpFilename , destinationFolder , testString ) )
assertTrue ( items . size ( ) > 0 )
assertEquals ( "12" , this . policy . deleteTime . get ( ) )
assertTrue ( 0.5 == distance )
assertInstanceOf ( "Expected y = -f(-x)" , ConcatenatedTransformDirect1D . class , transform )
Assert . assertTrue ( future . get ( ) )
assertEquals ( "Normalized string should be equal" , "Normalized string should be equal" , prismNormalizer . normalize ( "Normalized string" ) )
assertThat ( javaTypeFinder . isTypeOf ( primitiveSubType , primitiveType ) , is ( false ) )
assertEquals ( expect , DateUtils . addTime ( start , Calendar . MONTH , 1 ) )
assertTrue ( response . contains ( "\\"friend\\" : 2" ) )
assertEquals ( Sets . newHashSet ( graph . vertices ( ) ) , vertices )
assertEquals ( 2 , reservationAllocations . size ( ) )
assertThat ( this . pathVariables , is ( equalTo ( Arrays . asList ( "one" , "two" , "three" ) ) ) )
assertEquals ( "Hello, Microbule!" , config . getString ( "hello" ) )
Truth . assertThat ( counter . count ( batch ) )
assertEquals ( expectedTriggerTime , actualValue )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertKernel ( kernel , ANNULUS , e )
assertTrue ( "Next feed is not empty" , c . isEmpty ( ) )
assertParseTree ( rootNode ( "@123" , node ( "id" , "123" , "@123" , node ( "?" , null , "@" ) , stringNode ( "tel" , "123" ) ) ) , tree )
assertEquals ( expected , actual )
assertEquals ( 0 , cookies . size ( ) )
assertEquals ( asList ( "PERSON" , "PERSON" , "PERSON" , "PERSON" , "PERSON" ) , select ( jcas , Token . class ) )
assertInclude ( samplingProfiler , "test.net" )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( result , "2007-12-03T10:15:30Z" )
assertOut ( "break" )
assertThat ( result , is ( jsonNull ( ) ) )
assertThat ( name . getSegments ( ) , contains ( "hello" , "world" ) )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertTrue ( rpbh instanceof RewriteParameterizedBatchHandler )
Assert . assertEquals ( AbstractRemoveBean . RETURN_STRING , result )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
Assert . assertEquals ( 7 , ( ( VersionMessageWrapper ) list . get ( 0 ) ) . getMessageBuffer ( ) . readableBytes ( ) )
assertFalse ( ValidationUtils . hasValidationFailures ( vrs ) )
Assert . assertFalse ( "Mock is configured to return a valid date, return should be equally valid." , isValid )
assertThat ( a , equalTo ( 23 ) )
Assert . assertEquals ( "comp should have the focus" , comp , uic . getFocussed ( ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1_WITH_REALM_AND_SUFFIX , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1_WITH_REALM_AND_SUFFIX , CORRECT_PASSWORD , SC_OK ) )
assertTrue ( logger . isWarnEnabled ( ) )
Assert . assertTrue ( t . hasOriginalTemplate ( ) )
assertEquals ( exp , res )
assertEquals ( 0 , changeSets . size ( ) )
Assert . fail ( "NullPointerException expected" )
assertEquals ( FileUtils . readFileToString ( new File ( "./src/test/resources/examples/spoon.json" ) ) . trim ( ) , builder . build ( ) . getTree ( ) )
assertEquals ( "defaultValue" , tag . getDefaultValue ( ) )
assertThat ( graphManager . getGraph ( ) . traversal ( ) . V ( ) . has ( "tim_id" , createEntity . getId ( ) . toString ( ) ) . next ( ) , is ( Optional . of ( createEntity ) ) )
assertThat ( selected . entrySet ( ) , is ( empty ( ) ) )
assertTrue ( response . contains ( "I" ) )
assertEquals ( this . q1Y1900 , next )
assertEquals ( header , ContentSummary . getHeader ( true ) )
assertEquals ( 8 , countFiles ( iter ) )
Assert . assertNotNull ( identity )
Assert . assertEquals ( savedTask . getId ( ) , 2L )
assertThat ( result , Matchers . equalTo ( "test1=blah1&test2=blah2&test3=blah3&test4=blah4" ) )
assertEquals ( "Thank you kindly!" , email . getVisibleText ( ) )
assertEquals ( l1 , s . detect ( l2 ) . val )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( EntityNameCharType . BOUNDARY , type )
assertThat ( database . get ( "a" ) , is ( "a" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
shorts . assertNotLessThan ( description , actual , expected )
assertNotNull ( interceptor )
Assert . assertEquals ( "--xxxxxxxxxxxxxxxxxxxxxxxx\\r\\n" + "Content-Disposition: multipart/form-data; name=\\"test\\"; filename=\\"hello world\\r\\n" + "Content-Type: text/plain; charset=ISO-8859-1\\r\\n" + "\\r\\n" + "hello world\\r\\n" + "--xxxxxxxxxxxxxxxxxxxxxxxx--\\r\\n" , out . toString ( StandardCharsets . US_ASCII . name ( ) ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "say:hello" , hello )
assertThat ( reader , is ( instanceOf ( JiraProjectsReader . class ) ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( "someBean.someProperty" , expr . toString ( ) )
assertEquals ( "{\\"@context\\":" + "{\\"@vocab\\":\\"http://schema.org/\\"," + "\\"gr\\":\\"http://purl.org/goodrelations/v1#\\"," + "\\"businessFunction\\":{\\"@type\\":\\"@vocab\\"}," + "\\"RENT\\":\\"gr:LeaseOut\\"," + "\\"availableDeliveryMethod\\":\\"DOWNLOAD\\"," + "\\"eligibleDuration\\":{\\"@type\\":\\"QuantitativeValue\\",\\"value\\":\\"30\\",\\"unitCode\\":\\"DAY\\"}}" , w . toString ( ) )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertEquals ( GOLD_RESULT_ARRAY , root . getTree ( ) )
Assert . assertTrue ( methods . contains ( HttpMethod . POST ) )
Assert . assertTrue ( this . component . setCollaborators ( this . entity , collaborators ) )
Assert . assertTrue ( true )
assertSame ( GBP_2_34 , test )
assertEquals ( DecodeQualification . INTENDED , plugIn . getDecodeQualification ( path ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( grandchild . getChildren ( model . getRoot ( ) ) , equalTo ( Arrays . asList ( grandchild ) ) )
assertEquals ( GRADOOP_ID_VAL_8 , p . getGradoopId ( ) )
assertThat ( response . getStatus ( ) , equalTo ( 500 ) )
assertEquals ( dt . intValue ( ) , 5 )
assertThat ( target . getGoals ( ) , contains ( "first" , "second" , "third" ) )
assertNotNull ( result )
Assert . assertEquals ( expectedExceptionMessage , thrownExceptionMessage )
assertEquals ( agentJson , clone . toJSON ( ) )
assertEquals ( totalUniqueNodes , loader . getK ( k ) . size ( ) )
assertTrue ( newYearsEve . isBefore ( newYearsDay ) )
assertEquals ( "Hello World" , driver . findElement ( By . id ( "marry" ) ) . getText ( ) )
assertThat ( params . isMonochrome ( ) , equalTo ( true ) )
assertEquals ( pdfboxValues , acrobatValues )
assertThat ( CryptoUtils . HEX . encode ( Sha256Hash . of ( signedTransaction . toByteArray ( ) ) . getBytes ( ) ) , equalTo ( EXPECTED_BYTE_REPRESENTATION ) )
assertThat ( intOrString1 , equalTo ( intOrString2 ) )
assertNotNull ( actual )
assertEquals ( expectedBalance , customer . getBalance ( ) , 0.001f )
assertEquals ( "bar" , rs . getString ( 1 ) )
assertArrayEquals ( new long [ ] { 0 , 0 , 0 , 0 , 0 } , blocks . getBlockListAsLongs ( ) )
assertEquals ( 0 , actual . size ( ) )
assertThat ( result , equalTo ( v ) )
assertEquals ( Status . OK , status )
assertThat ( result , is ( outbound ) )
assertEquals ( "1" , events . get ( 0 ) . getMessage ( ) )
assertEquals ( expected , query . getQueryString ( ) )
assertEquals ( false , result )
assertEquals ( 400 , res )
assertTrue ( BCrypt . checkpw ( plain , expected ) )
assertNotNull ( "users should not be null" , users )
assertTrue ( rulesThatHadErrors . remove ( "Incoherent restrictions 8" ) )
assertEquals ( expResult , result )
assertFalse ( target . isClosed ( ) )
assertEquals ( "a<V>\\n" , found )
assertSame ( object , index . get ( object ) )
assertEquals ( "Validation message text not correct" , "App Error found for {0}" , messageText )
assertThat ( uri , equalTo ( "/path2/path3" ) )
assertThat ( mapOutput . size ( ) , is ( 0 ) )
assertTrue ( "hello.wav it=world.wav" . equals ( result ) )
assertNull ( ic . getItem ( "obj1" ) )
assertEquals ( set , set1 )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertEquals ( expected , actual )
assertEquals ( "test" , echo . echo ( "test" ) )
testRunner . assertAllFlowFilesTransferred ( EncodeContent . REL_FAILURE , 1 )
assertEquals ( "Expected to find a dependency on the Foo/Foo/Foo/Foo" , depends . getDependencies ( ) . get ( "com.picocontainer.testmodel" ) . getName ( ) )
assertEquals ( "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n
assertEquals ( expectedQuery , actualQuery )
assertEquals ( Arrays . asList ( "no" , "yes" , "value1" , "value2" , "yes" , "value3" ) , payload . getStatementsAsJson ( ) )
assertThat ( javaDocComment , containsString ( "(Required)" ) )
Assert . assertEquals ( "User name doesn't match" , USER_NAME_WITH_DELIMITER , info . getUser ( ) )
assertEquals ( 10 , filter . getSize ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) <= 'literal'" ) )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
Assert . assertEquals ( 400 , response . getStatus ( ) )
Assert . assertEquals ( SIMPLE_RETURN_CODE . FAIL , check . getErrorType ( ) )
Assert . fail ( "Expected ConfigurationException" )
assertEquals ( "{\\"val\\":\\"unmarshalledJSON\\"}" , resp . getResponseBody ( ) . trim ( ) )
assertEquals ( "Slice of 5 and 2" , new String ( a ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertHealthCheck ( client . execute ( get ) )
Assert . assertFalse ( res . isEmpty ( ) )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"modelregistry/api/componenticon\\"/> cq:Page" , Model . class , 123L , "modelName" )
assertThat ( result . getAccessTime ( ) , is ( equalTo ( 42L ) ) )
assertEquals ( "Hello abc" , ResponseBodyInterpolator . interpolate ( "Hello abc" , req ) )
Assert . assertTrue ( maxError < 0.0005 )
assertEquals ( "x.y = \\"y\\"" , pp . toString ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
Assert . assertTrue ( counts . containsKey ( Jsprit . Strategy . RADIAL_BEST . toString ( ) ) )
assertEquals ( "Shouldn't change the variable" , var , result )
assertMockEndpointsSatisfied ( )
assertFalse ( connectFuture . isConnected ( ) )
assertTrue ( "Expected arrival to be greater than or equal to time of one day ago" , l >= 0 && l <= 1 )
assertEquals ( expResult , result )
Assert . assertNotNull ( list )
assertNotNull ( newSet )
JSONAssert . assertEquals ( "Message" , new JSONArray ( Arrays . asList ( 1 , 2 , 3 ) ) , actual , false )
Assert . assertEquals ( b , a . insertColumn ( column ) )
assertEquals ( "[start:a:nsa, end:a]" , handler . history . toString ( ) )
assertTrue ( aclDao . hasEntry ( principal , secureObject ) )
Assert . assertNotNull ( mediaResult )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertFalse ( policy . isResponseCacheable ( "GET" , response ) )
assertNotNull ( simple )
assertEquals ( "foobar" , cfg . someValue ( ) )
assertEquals ( d1 , d2 )
assertEquals ( "SELECT e1, x FROM e1" , state . getSelect ( ) . get ( 0 ) . getExpression ( ) . getTypeName ( ) )
assertEqualsIgnoreMetadata ( targetCS , actualCS )
assertThat ( underTest . getDispatched ( ) . toString ( ) , containsString ( String . format ( "[%s, %s, %s]" , REPOSITORY_1 , REPOSITORY_2 , REPOSITORY_3 ) ) )
assertEquals ( 1 , cases . size ( ) )
assertTrue ( "Ldap realm should be created" , ops . exists ( TEST_LDAP_REALM_ADDRESS ) )
assertEquals ( msgs , count )
assertEquals ( "http://advertised.listener:2000/foo/bar" , url )
assertEquals ( "ReverseEngineering: \\n" + "  Catalog: null\\n" + "   Schema: null\\n" + "      IncludeTable: table1\\n" + "        IncludeColumn: includeColumn\\n" + "       IncludeTable: table2\\n" + "         IncludeColumn: includeColumn\\n" + "   Use primitives" , engineering . toString ( ) )
assertNotNull ( result )
assertEquals ( Type . INT8 , d . type ( ) )
assertFalse ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_3_BYTE_CHAR ) )
assertModifyACLset ( )
Assert . assertNull ( created )
assertEquals ( "An Infer Value should return false on valueIsInterpolated()." , false , victim . valueIsInterpolated ( ) )
Assert . assertTrue ( jobCounts . get ( 2 ) . jobCount == 1 )
assertEquals ( expectedContinuationToken , actualContinuationToken )
assertEquals ( "foo" , proxy . interfaceMethod ( ) )
assertSample ( sample , x , y , band )
assertThat ( updatedPerson . getRpslObject ( ) , is ( person ) )
Assert . assertEquals ( "John" , employees . get ( 0 ) . getFirstName ( ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "UpdatePurchaseOrder by admin response render to HAL+JSON" , actualResponse , "/fixtures/hal/cart/expected-admin-update-PurchaseOrder.json" )
assertNotNull ( token )
assertThat ( response . hasExpired ( ) , is ( false ) )
assertEquals ( 0 , hits . totalHits )
assertEquals ( expectedQuery , actualQuery )
Assert . assertNotNull ( out . getD1 ( ) )
assertEquals ( "clearCache timeout" , latch . getCount ( ) , 0 )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Start>" + "before" + "<Child>content</Child>" + "after" + "</Start>" , builder . build ( ) . toXml ( ) )
assertTrue ( "Invalidate called" , myValid . validate ( ) )
Assert . assertEquals ( cap - i , dbq . remainingCapacity ( ) )
Assert . assertEquals ( "3 months ago" , t . format ( new Date ( 0 ) ) )
Assert . assertNull ( user )
assertThat ( getClass ( ) . getResource ( "/test/test.txt" ) , is ( nullValue ( ) ) )
GAssert . assertEquals ( articles , result )
assertTrue ( p . startsWith ( "test" ) )
Assert . assertTrue ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "Bubble Chart Title" ,bubbleChart . getTitle ( ) )
assertTrue ( "i=" + i + " d=" + d , ! nnList . isEmpty ( ) )
assertThat ( orderElement . getAdvancePercentage ( ) , sameValueAs ( division . divide ( 20 , 100 ) ) )
assertNotEquals ( Movie . UNKNOWN , result )
mockery . assertIsSatisfied ( )
assertTrue ( content . replaceAll ( "\\\\s+" , " " ) . contains ( "bullet point 1 bullet point 2 bullet point 3" ) )
assertEquals ( s , ps )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertEquals ( p1 . distance ( p2 . mbr ( ) ) , distance , 0.000001 )
assertEquals ( allExisting , allMatchingQueryParamsFilter )
assertNull ( query )
mock . assertIsSatisfied ( )
assertTrue ( response . getErrors ( ) . isEmpty ( ) )
Assert . fail ( validator . getErrors ( ) . toString ( ) )
assertSnake ( "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" )
assertEquals ( 1 , constraints . size ( ) )
Assert . assertTrue ( body . contains ( "Bananabot/1.0" ) )
assertEquals ( "Taint is not equal to MultiTainter.hashCode()!" , taint . hashCode ( ) , taint . hashCode ( ) )
assertEquals ( "bar2" , response . getMetadata ( ) . getFirst ( "foo" ) )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): hello:" , "    KEY(2): world:" , "      RAW(4): message" , "       RAW(-1): " )
Assert . assertEquals ( sendCountBefore + 1 , AlertSender . getSendCount ( ) )
assertThat ( resultCommand , is ( expectedCommand ) )
assertEquals ( "b" , grid . getCell ( 0 , 0 ) . getText ( ) )
assertEquals ( 25. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertEquals ( 2 , IterableUtils . count ( IncludeNoRelationships . getInstance ( ) . getAll ( database ) ) )
assertWktEquals ( Convention . WKT2 , "EngineeringCRS[��A spherical CRS��,\\n" + "  EngineeringDatum[��Centre��],\\n" + "  CS[spherical, 3],\\n" + "    Axis[��Spherical latitude (U)��, north, Unit[��degree��, 0.017453292519943295]],\\n" + "     Axis[��Geocentric radius (r)��, up, Unit[��metre��, 1]]]" , crs )
assertTrue ( "The validation failed" , failed )
Assert . assertEquals ( 2 , response . getEntityData ( ) . size ( ) )
assertEquals ( "Test Page" , page . asString ( ) )
assertEquals ( NamedBean . class , namedBean . getClass ( ) )
Assert . assertFalse ( "Invalid for " + dunnable , source . isEligible ( dunningContext , dunnable ) )
assertThat ( addressResolver . get ( ) , is ( instanceOf ( ListAddressResolver . class ) ) )
Assert . assertEquals ( 1 , counter . gotCalled ( ) )
assertThat ( splits , is ( correctSplits ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertThat ( noOfSolutions , is ( 863 ) )
assertEquals ( 4 , testResult . size ( ) )
assertions . doesNotContain ( value , index )
Assert . assertTrue ( testedStore . existProperty ( "logX" ) )
assertThat ( controller , is ( equalTo ( method ) ) )
assertEquals ( expecting , result )
assertEquals ( entity , one )
assertTrue ( peterRank <= 3 )
assertEquals ( 1 , daysToWorkday )
assertThat ( client . getMapping ( GET_MAPPING , INDEX , TYPE ) , is ( equalTo ( getMapping ) ) )
assertTrue ( "Should match entry URI with a context root - regex is: " + targetRegex . pattern ( ) , targetRegex . matcher ( addContextRoot ( ENTRY ) ) . matches ( ) )
Assert . assertTrue ( fr2 . element0 ( ) . isFailure ( ) )
Assert . assertFalse ( importer . isSame ( null ) )
assertEquals ( t , zda . getTime ( ) )
Assert . assertEquals ( change , updatedChange )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertNull ( "Wrong data" , builtByFactory . getData ( ) )
assertNotNull ( bundleUnderTest . getBundle ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( "(c (34 a))\\n" , found )
assertEquals ( "Method #toString is wrong" , "BlobMapper{field=field, indexed=false, sorted=true, validated=true, column=field}" , mapper . toString ( ) )
assertEquals ( msg , text . getJson ( ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0" , applicationWadl . length ( ) > 0 )
assertEquals ( 4 , ptos . bytesWritten )
assertTrue ( lastSeenTokens . get ( ) . isEmpty ( ) )
assertTrue ( ! result )
assertThat ( convertedIteratorToList , hasItems ( "Luke" , "Yoda" , "YUKA" ) )
assertThat ( found , is ( true ) )
assertEquals ( 4 , count . get ( ) )
assertEquals ( Lists . newArrayList ( "3" , "5" ) , getStringsFromElements ( elements ) )
assertThat ( defaultSettings , is ( not ( nullValue ( ) ) ) )
assertEquals ( "a" , options . get ( "a" ) )
assertEquals ( db . get ( "bar" ) , "b" )
assertEcssEquals ( "@import url(\\"#{resource['META-INF/page.xcss']}\\");" , convertFragment ( xcss ) )
assertEquals ( "Should get expected result" , result , filter . toString ( ) )
assertEquals ( expResult , result )
assertThat ( spiLoader , hasItem ( isA ( SimpleFileIOComponentFamilyDefinition . class ) ) )
assertTrue ( isSorted )
assertFalse ( validator . isValid ( resource , MetadataSection . PARTIES_SECTION ) )
assertEquals ( "P 1" , ref . getPDBHeader ( ) . getCrystallographicInfo ( ) . getSpaceGroup ( ) . getShortSymbol ( ) )
assertEquals ( "The records number is correct " + clusterName . getName ( ) , 1 , resultIterator . size ( ) )
assertEquals ( handler . parseString ( testDate . getTime ( ) ) , test )
assertEquals ( 1L , id . getVersionIdPartAsLong ( ) . longValue ( ) )
assertEquals ( "ABCDEFGHI" , s )
assertEquals ( "CFBundleShortVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_SHORT_VERSION_STRING ) )
assertEquals ( 2 , hitCount )
Assert . assertEquals ( "[[1, bar, 2.0], [1, baz, 2.0], [2, bar, 2.0], [3, bar, 2.0], [3, baz, 2.0]]" , permutations . toString ( ) )
assertThat ( lists . serial ( ) , is ( set ( 1 , 2 , 3 , 4 ) ) )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , actual )
assertNotNull ( processor )
assertNotNull ( t )
assertEquals ( Sets . newHashSet ( "func" , "two_paths.js" ) , values )
assertTrue ( result )
assertEquals ( "Panel" , dsc . getPanel ( ) )
assertThat ( mismatches . discover ( actual , matchers ) , is ( true ) )
assertEquals ( "Chrome" , browserNames . get ( 0 ) . getName ( ) )
assertEquals ( 3 , tdefsRes . getBody ( ) . length )
assertArrayEquals ( expected , actual )
assertNull ( session )
assertEquals ( "Substitution was not correctly applied" , "This is a lunch lunch." , result . get ( ) )
assertEquals ( expResult , result )
assertEquals ( 0 , obv . getValue ( 9999 ) )
assertEquals ( expected , result )
assertEquals ( "WHERE id = 12345" , statement . getQuery ( ) )
assertTrue ( "Feature 'jackson.core.features' is not registered" , jacksonFeatureFinder . isJacksonFeatureRegistered ( "jackson.core.features" ) )
Assert . assertEquals ( list . size ( ) , store . size ( ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) and ( entity_0.code = :code_2 ) )" , select . getQuery ( ) )
assertEquals ( "not a map" , v1 )
assertEquals ( "myproject" , mavenAttributes . getProject ( workspace , "myProject" ) . getName ( ) )
assertInstancesOf ( java . sql . Timestamp . class , rv )
assertEquals ( presenter . isFilterOn ( ) , true )
assertEquals ( "getVersion() doesn't return the same value as the previous setVersion()" , version , domainEntity . getVersion ( ) )
assertEquals ( "Testing inverse sequences" , "ATGC" , s . getSequenceAsString ( ) )
assertEquals ( "file.ttl" , fn2 )
assertRequest ( "POST" , "Verification/Address/" )
assertTrue ( ( ( NgMinProcessor ) victim ) . isSupported ( ) )
assertThatPersonIsNotProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ) . map ( person , sikredeRecord , yderRecord ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "one" , lastElement )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
assertEquals ( uuid , field . getFieldByUuid ( ) . getUuid ( ) )
assertEqualsJFigletSmushing ( asciiArt )
assertResultSet ( res )
assertEquals ( expected , actual )
assertEquals ( "Hello Camel in action" , reply )
assertEquals ( 5 , value . asInt ( ) )
assertEquals ( "GBP -1.22" , test . toString ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( expected , result )
assertThat ( timeline , is ( notNullValue ( ) ) )
Assert . assertNotNull ( drink )
assertEquals ( " bravo charlie delta echo foxtrot golf india%n" , s )
assertArrayEquals ( bytes , p1 . read ( ) )
assertEquals ( "Wrong recovered entry" , entry . getMessage ( ) , "entry-" + i )
assertEquals ( "<b>Hello, world</b>" , rewrite ( gadget , markup , set ( "b" ) , set ( "href" , "target" ) ) )
assertNotNull ( conceptClass . getId ( ) )
assertTrue ( _comp . isEquals ( json , expected ) )
Assert . assertEquals ( 1 , ( int ) retVal )
spliterators . assertHasCharacteristics ( INFO , actual , DISTINCT , SORTED )
Assert . assertEquals ( "Hello World" , lambda . getString ( ) )
assertEquals ( "some/url" , dispatcherType . getValue ( ) )
assertEquals ( "NoViableAltException('!'@[1:1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 |" + " T__41 | LT | LTE | EQ | GT | GTE | BOOLEAN | AND | NOT | ASC | DESC | CONTAINS | WITHIN | OF |" + " UUID | ID | LONG | FLOAT | STRING | WS );])" , error )
assertOut ( "public interface IA extends foo.bar.IB, baz.goo.IC, foo.ID {\\n}" )
assertEquals ( g1 , g2 )
assertEquals ( createdOn , patchSet . getCreatedOn ( ) )
assertArrayEquals ( new long [ ] { 2 , 3 , 1 } , result )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
Assert . assertNull ( bean )
assertTrue ( checker . isAbstract ( ) )
assertFalse ( parsed )
assertEquals ( 0 , dao . delete ( null ) )
assertThat ( strAction , is ( "action" ) )
assertThat ( target . validate ( ) , is ( false ) )
Assert . assertNotNull ( out . getD2 ( ) )
assertEquals ( 4 , exceptions )
assertEquals ( 1 , event . getMetricSint64 ( ) )
assertEquals ( "Expected 5 results!" , 5 , count )
assertEquals ( expected , result )
assertNull ( obj )
assertEquals ( "aValue2" , serializer . serialize ( record ) )
assertEquals ( "Failed to filter query string" , expectedResult , normalizedUrl )
Assert . fail ( "Should not have been allowed to set registry after pool started" )
assertEquals ( expected , actual )
assertNotNull ( result )
assertFalse ( account . isValid ( ) )
assertEquals ( "Wrong parent" , leaf , root . getParent ( ) )
Assert . assertEquals ( userName , "username" )
assertEquals ( wrapUserList , userRoleResource . getUsers ( ) )
assertEquals ( "Index name is not equal to actual value." , "testAddIndexWithDuplicaIndexNames" , iHtd . getNameAsString ( ) )
assertEquals ( 0 , filesList . size ( ) )
assertEquals ( "array_2" , sql )
assertThat ( allEvents . stream ( ) . skip ( index ) . limit ( events . size ( ) ) . collect ( toList ( ) ) , containsInOrder ( events ) )
assertNotNull ( result )
assertEquals ( "mystream.flibble" , sn . getSourceDestinationNode ( ) . getDestinationName ( ) )
assertEquals ( conceptSets , Collections . emptyList ( ) )
assertEquals ( 4 , coreSettings . getConcurrentCoreCount ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertTrue ( ax . toString ( ) , ax instanceof OWLObjectPropertyDomainAxiom )
assertTrue ( "Graph not isomorphic" , isomorphic ( graph , m ) )
assertFalse ( ! testing . hasNext ( ) )
assertEquals ( 1 , unassigned . size ( ) )
assertEquals ( "/topic" , m_callback . getTopic ( ) )
arrays . assertContains ( description , null , array ( "Yoda" ) )
assertionHelper . assertIrodsFileMatchesLocalFileChecksum ( targetFile . getAbsolutePath ( ) , localFile . getAbsolutePath ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsFileSystem .
assertTrue ( serviceFacade . isAnyProcessGroupUnderVersionControl ( groupId ) )
assertEquals ( "samedi, janvier 01" , DateUtils . formatFriendlyDate ( DateUtils . nowUtc ( ) , Locale . GERMANY ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( mockHandler , m . getProperty ( "com.sun.xml.bind.characterEscapeHandler" ) )
assertEquals ( expected , buffer . get ( ) )
Assert . assertEquals ( "Failure for click=" + clickType + ", slot=" + slot + ", cursor=" + testCase [ 2 ] + ", button=" + testCase [ 3 ] , expected , actual )
assertOut ( "b = b + 1" )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "selected+song=hey+jude&bar=foo" , payload . getValue ( ) )
assertAnnotationCompletions ( "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${else.prop3}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop1}<*>)" , "@Value(\\"${spring.prop
assertEquals ( "(SOURCEFIELD == 'sourceValue' AND TARGETFIELD == 'targetValue' AND $1_5 == 'enrichValue')" , transformed )
assertEquals ( "MER_RR__1PRLRA20120408_022952_000026243113_00262_52862_0643.N1" , output )
assertColumnHeaderOrder ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 32 , 33 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 58 , 55 , 55 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56
assertEquals ( response . getErrors ( ) . size ( ) , 1 )
assertThat ( resolver . replace ( "${MISSING}" , false ) , is ( "${MISSING}" ) )
assertEquals ( "void main(String[] args) {}" , actualContent )
assertEquals ( expectedText , transText )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
Assert . assertNotNull ( xstreamMap )
Assert . assertTrue ( exceptionMatches )
assertEquals ( "xaxbx" , ex . getUnlabeledMessage ( ) )
assertSame ( objects , result )
assertFalse ( transactionHelper . isTransactionAvailable ( ) )
assertEquals ( sb . toString ( ) , whereSb . toString ( ) )
assertThat ( ms . size ( ) , is ( 0 ) )
assertEquals ( "DBPointer( 'bar', 'baz', ObjectId('50d615d28544eba9a10004e8') )" , element . getValueAsObject ( ) )
assertTrue ( Ideal . create ( eliminate ( ideal , 0 ) ) . isPrincipal ( ) )
Assert . assertNull ( "school type should be null" , result )
assertEquals ( "http://localhost/things?id=101" , affordance . expand ( 101 ) . getHref ( ) )
Assert . assertEquals ( 1 , timeSliceElementDecls . size ( ) )
assertNotNull ( page )
Assert . assertTrue ( irodsFileForSecondaryUser . canWrite ( ) )
assertTrue ( "User could not subscribe to the list." , response )
assertEquals ( mockResponse , response )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertTrue ( p . contains ( "Pinned file" ) )
Assert . assertTrue ( "Void method not supported" , adapter . supports ( endpoint ) )
assertThat ( generated . length ( ) , is ( equalTo ( length ) ) )
assertThat ( JdbcUtils . getColumnNames ( getConnectionProperties ( ) , "SOMETABLE" ) , containsInAnyOrder ( "PID" , "TEXTCOL" ) )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 3 ) )
Assert . assertEquals ( 1 , ahelper . getFailedRecords ( ) . size ( ) )
assertTrue ( selected )
assertFalse ( "Should not be equal to root node" , NodeUtil . isEqualTo ( rootNode , otherNode ) )
assertEquals ( target . field , check . send ( ) )
Assert . assertEquals ( "d10047" , obj . getStringValue ( ) )
assertEquals ( expectedQuery , actualQuery )
assertNotNull ( userInfo )
assertEquals ( plain , dec )
Assert . assertEquals ( 0 , rto . getRules ( ) . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , type . getCapacityDimensions ( ) . get ( 0 ) )
assertEquals ( Collections . < String , Object > emptyMap ( ) , result )
assertTrue ( ! branch_conditions . isEmpty ( ) )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "Hi commons!" , StrSubstitutor . replace ( "Hi ${name}!" , map ) )
assertNotNull ( modelNode )
assertEquals ( jedisCluster . get ( "foo" ) , "bar" )
assertArrayEquals ( expected , ata )
assertEquals ( ImmutableList . of ( qlString , qlString ) , query . params ( ) )
assertIntValues ( array , 1 , 4 , 5 , 6 , 2 , 3 )
Assert . assertNotNull ( authentication )
assertThat ( result , is ( instanceOf ( AttributeInTheObjectType . class ) ) )
assertEquals ( "123涓���浜烘��卞����" , deserialize . readUTF ( ) )
assertTrue ( entity . isValid ( ) )
assertHighlighting ( 2 , 6 , 8 , STRING )
assertEquals ( adminDocument , transformer . transform ( adminDocument ) )
assertEquals ( expected , actual )
assertTrue ( result . toString ( ) . contains ( "rdf:nodeID" ) )
assertTrue ( subject . isExportDir ( folder . getRoot ( ) ) )
assertTrue ( object . isWeak ( ) )
assertEquals ( 2 , ektorp . getSeatedPeople ( ) . size ( ) )
assertEquals ( sb . toString ( ) , qb . prepareStatementString ( ) )
assertEquals ( 1 , repositoryService . createProcessDefinitionQuery ( ) . count ( ) )
assertEquals ( "34 abc\\n" , found )
Assert . assertEquals ( 1 , knowledgeId )
assertEquals ( 3 , count )
assertEquals ( newValue , postComment . getAttributes ( ) . get ( name ) )
assertEquals ( "2:4:6:8:10" , app . asStringJoin ( a1 ) )
assertEquals ( 0 , i . getFlags ( ) . size ( ) )
assertFalse ( isValidAccount ( account ) )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 2 , 4 ) )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
assertNull ( "Message was not found after being deleted" , checkMessage )
assertPostCodegenRules ( mojo )
Assert . assertEquals ( person . getName ( ) , personView . getName ( ) )
assertThat ( tuple . getCollectionOrEmpty ( "field" ) , equalTo ( value ) )
assertEquals ( expected , actual )
assertNotSame ( "Calendar.equals: " , v2 . getDateTime ( ) , v1 . getDateTime ( ) )
assertEquals ( "PROXY ROUTE TCP://127.0.0.1:6379" , channel . read ( ) )
assertEquals ( 3 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( expected , actual )
Assert . assertEquals ( 0.0 , score , 0.0 )
assertEquals ( null , DocumentUtils . getDocumentUri ( cas ) )
assertEquals ( "IDX1" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "Expected object to be present" , OBJ_ID , ocflRepository . findObject ( OBJ_ID ) . getId ( ) )
assertThat ( formatter . format ( PlainDate . of ( 2017 , 4 , 30 ) ) , is ( "vor 4 dies" ) )
Assert . assertTrue ( "'withtests' should contain tests." , result )
Assert . assertTrue ( FastMath . abs ( error ) < 1.0e-10 )
assertEquals ( "ereref" , Bytes . toString ( res ) )
assertEquals ( target . getTime ( ) , time , 0.001 )
Assert . assertEquals ( requestContent , responseContent )
assertEquals ( 1 , o . importsDeclarations ( ) . count ( ) )
assertEquals ( TestParameters . VP_KUDU_METADATA_INPUT_OPERATOR , allScanTokens . get ( 0 ) . getProjectedColumnNames ( ) . get ( 0 ) . getName ( ) )
assertThat ( result , is ( true ) )
assertEquals ( expected , ColumnRanges . rangeAtNode ( either ) )
assertFalse ( family1 . equals ( family2 ) )
assertAgentString ( optionsByType , "-agentpath:mylib=" , "port=8849" , "stack=1234" )
Assert . assertEquals ( "ssd" , tableName )
Assert . assertEquals ( numObjects , response . getObjects ( ) . size ( ) )
assertEquals ( "Row count should match" , rsMismatches . size ( ) , result )
assertFalse ( updatedTopic . userSubscribed ( user ) , UNSUBSCRIBED )
assertThat ( System . getProperty ( key ) , is ( nullValue ( ) ) )
assertTrue ( strategy . allPricesInitialized )
assertEquals ( 1 , td . getOrder ( ) )
assertTrue ( this . getMimeMailBody ( ) . contains ( "http://coolsite.com:1234/forum/branches/" + branchId ) )
Assert . assertEquals ( 1 , count )
assertEquals ( "12345(sec)" , rtcpReceivedEvent . getRtt ( ) , 0.00001 )
assertEquals ( expected , t )
assertNotNull ( xmlIn )
assertEquals ( zone , actualZone )
assertEquals ( "http://ci.visuwall.awired.net/job/struts/api/xml" , testUrl )
assertThat ( str , equalTo ( "insert into UserInfo(name,age,age,age,age,name,age,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,name,age,age,name,age,age,name,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,age,
assertEquals ( p , fromDenseRecursiveForm ( recForm , p . nVariables , MonomialOrder . DEFAULT ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( output1 . getId ( ) . getIdPart ( ) , output2 . getId ( ) . getIdPart ( ) )
assertTrue ( daemon . start ( "src/test/resources/test_configurations/basic-configuration.xml" ) )
assertTrue ( Integer . valueOf ( lowestTitle . compareTo ( summary . getTitle ( ) . getTitle ( ) . getContent ( ) ) ) < 0 )
assertTreesAreEqual ( tree , roundTripped )
assertThat ( uri , is ( "/path/expectedUrl" ) )
Assert . assertNotNull ( result . getBookList ( ) )
assertEquals ( 1 , tags . size ( ) )
assertEquals ( 3 , packages . size ( ) )
assertThat ( relationEditor . isMatchingRelationName ( relation , name ) , is ( false ) )
Assert . assertEquals ( sshJobSubmission . getJobSubmission ( ) . getJobName ( ) , "que1Desc new" )
assertThrows ( ParserException . class , o :: getAxiom )
assertThat ( log . toString ( ) , is ( AUDIT_LOG_ONLY ) )
assertThat ( thrown , instanceOf ( NullPointerException . class ) )
Assert . assertEquals ( 10 , counter . getCount ( ) )
Assert . assertEquals ( "" , mailbox . getAddress ( ) )
Assert . assertNull ( consumer . getMessage ( ) . getContext ( ) . getProperty ( Exchange . MESSAGE_ID ) )
assertEquals ( expected , e . setVariable ( "x" , x ) . evaluate ( ) , 0.0 )
assertEquals ( edmType , returnedType )
assertEquals ( 1.0 , scale ( alpha ) , 0.0 )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
Assert . assertTrue ( rep . containsKey ( "Test view 1" ) )
assertEquals ( socketAddress , readAddress )
Assert . assertEquals ( config . getSet ( ) . iterator ( ) . next ( ) + "12" , config2 . getSet ( ) . iterator ( ) . next ( ) )
assertFalse ( result )
assertTrue ( valid )
assertThat ( cursor . proceedTo ( 'c' ) , is ( false ) )
assertArrayEquals ( expected , bos . toByteArray ( ) )
assertEquals ( 6. * 3600. , sec , 0.01 )
assertThat ( "null should be replaced" , repos , hasSize ( 0 ) )
assertTrue ( sql , sql . endsWith ( "WHERE t0.ESTIMATED_PRICE BETWEEN #bind($id0 'INTEGER') AND #bind($id1 'INTEGER')" ) )
assertThat ( "port validation shall be successful" , validation . pass ( Report . WITHOUT_WARNING ) )
assertEquals ( vars , variablesTyped )
assertions . doesNotContain ( actual )
assertThat ( initialized , is ( false ) )
Assert . assertEquals ( 2 , analyser . getLoadJustBeforeActivity ( route . getActivities ( ) . get ( 1 ) , route ) . get ( 0 ) )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertNull ( conversationIdHeader )
assertTrue ( received )
assertEquals ( "SampleName" , meta . getInputFields ( ) . get ( 0 ) . getPentahoFieldName ( ) )
assertEquals ( comp , nnf )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getStatus ( ) )
Assert . assertThat ( dump , equalTo ( "ParenthesisNode: user = new TypeExpressionReference(\\"user\\", \\"cat\\")[0]\\")" ) )
assertMappedFieldValueIsCollectionWithEntries ( )
assertEquals ( 1 , distinctAgePersons . size ( ) )
assertEquals ( true , result [ 0 ] )
assertPlanMatches ( access )
assertEquals ( 2 , deltas . size ( ) )
assertEquals ( "Wrong # of child nodes" , 2 , ndInh . getChildNodes ( ) . size ( ) )
assertEquals ( 1 , children . size ( ) )
Assert . assertEquals ( "I cleaned the parents' car" , this . realiser . realise ( sent ) . getRealisation ( ) )
Assert . assertEquals ( expect , actual , EPSILON )
assertEqualDoubleArrays ( pyscle , scale , epsilon )
assertThat ( event . check ( newGitHubBranchDecisionContext ( ) . withLocalBranch ( localBranch ) . withBranchTrigger ( trigger ) . withLocalRepo ( localRepo ) . withListener ( listener ) . build ( ) ) , notNullValue ( ) )
assertThat ( branches , contains ( new Branch ( "not-sub-module-sha1" , true ) ) )
assertLookup ( breaks , values , srcImg , ImageDataType . INT )
assertEquals ( Arrays . asList ( a1 , a2 ) , merge ( a1 , a2 ) )
assertEquals ( NUM_TABLES * NUM_TOKENS , result . size ( ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertEquals ( "what" , payload )
assertEquals ( "aAa" , mat . group ( ) )
assertEquals ( "V1 Track" , wrapper . getTrack ( ) )
assertEquals ( expected , actual , delta )
assertEquals ( biggestWidget ( ) . getY ( ) , gridLienzoScrollBounds . minBoundY ( ) , 0 )
assertEquals ( witnessList , tokenList )
assertTrue ( errors . hasFieldErrors ( "startDatetime" ) )
assertThat ( map . get ( "a" ) , is ( nullValue ( ) ) )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( expected , actual )
assertEquals ( adminUser . getPassword ( ) , "apache" )
assertThat ( elementFacade . isVisible ( ) , is ( false ) )
assertEquals ( "payload" , db . getFieldValue ( 0 , FIELD_NAME ) )
assertValidationConstraint ( validator , obj , "EndBeforeStartOtherDate" , "end" )
assertEquals ( r1 , r2 )
Assert . assertEquals ( String . class , t . getType ( ) )
assertThat ( seqTerminals , containsInAnyOrder ( term1 , term2 ) )
assertNull ( this . mocksControl . getBroker ( topic , partition , offset , maxSize ) )
assertThat ( result . toBase64Encode ( ) , is ( "bnVhIamMg" ) )
assertEquals ( 1 , branch_conditions . size ( ) )
Assert . assertEquals ( targetRepository , replicator . getRepository ( ) )
assertEquals ( "FATAL" , level . toString ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( "[[1, a], [1, b], [1, c], [2, d], [2, e], [3, a], [3, b], [3, c]]" , Arrays . deepToString ( testData ) )
assertEquals ( 1 , count )
assertEquals ( DEFAULT . foreground ( RED ) , style )
assertThat ( ret . isSuccess ( ) , is ( true ) )
Assert . assertEquals ( this . term , result )
assertPermanentCount ( playerA , "Mikaeus, the Lunarch" , 1 )
assertEquals ( "Script" , i . getEngineName ( ) )
assertTrue ( now - timeStamp - timeSpan < 2 )
Assert . assertEquals ( "1234/Dev/" , connectionString )
assertEquals ( "d6f18efa527f1bd22b4a67fc621cfbe7" , hash )
Assert . assertEquals ( expected . toString ( ) , serializer . serialize ( testMessage ) . toString ( ) )
assertEquals ( "cancelledPreApproval" , cancelledPreApproval . getTransactionCode ( ) )
assertEquals ( propertyValue , value )
context . assertIsSatisfied ( )
assertNotNull ( m )
DelegationTestUtil . assertDelegationToSpy ( messageProducer )
assertEquals ( "x" , s . get ( "p" ) )
assertThat ( description . toString ( ) , is ( "sheet(s) \\"Yet Another Sheet\\" was missing" ) )
Assert . assertEquals ( 0 , a . size ( ) )
assertEquals ( reference , toTest )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFProtocolo ( ) . toString ( ) )
Assert . assertEquals ( "Hello gradle!" , gradleMan . echo ( "Hello gradle!" ) )
assertThat ( config , hasEntry ( CubeDockerConfiguration . DOCKER_URI , OperatingSystemFamily . DOCKER_URI ) )
assertFalse ( "No movies reviews!" , result . isEmpty ( ) )
assertNotNull ( fixture )
assertEquals ( "hello" , dereferenced . get ( ) )
assertProjectOut ( compiledFileNames , testDirPath )
assertEquals ( expect , result )
assertNull ( "printXmlBean" , classUnderTest . getPrintXmlBean ( ) )
runner . assertAllFlowFilesTransferred ( ListenRELP . REL_SUCCESS , 1 )
Assert . assertTrue ( result . next ( ) )
assertEquals ( testName , testProfileData . getName ( ) )
assertEquals ( "something.getAnother(x, y).equals(x, y)" , result )
assertEquals ( 0 , attributes . getSize ( ) )
assertTrue ( lock . tryLock ( ) )
assertThat ( subs , contains ( subProperty ) )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( json , rc . getBodyAsJson ( ) )
assertTrue ( "" + mse , mse <= desiredError )
given ( ) . spec ( specs . get ( 0 ) ) . when ( ) . get ( "events/test/foo" ) . then ( ) . statusCode ( 200 ) . assertThat ( )
assertStatusIs ( noTestsRun ( ) )
assertThat ( supplier . authForSwarm ( ) , not ( matchesAccessToken ( accessToken ) ) )
Assert . assertEquals ( "Wrong translation for " + prefix + ": " + actual , expected , actual )
assertEquals ( expected , actualQuery )
assertTrue ( "Expected only SECOND_STATE to be enabled" , SentryStateBank . hasStatesEnabled ( TestState . COMPONENT , new HashSet < SentryState > ( Arrays . asList ( TestState . FIRST_STATE , TestState . SECOND_STATE ) ) ) )
Assert . assertTrue ( result . equals ( "10 minutes" ) )
assertEquals ( value , stat . toLong ( ) )
assertEquals ( 0 , latch . getCount ( ) )
Assert . assertEquals ( effective . getSpacing ( ) . getAfter ( ) . intValue ( ) , 0 )
assertEquals ( "end of file exception" , i . getMessage ( ) )
Assert . assertEquals ( 1 , o )
Assert . assertEquals ( "Invalid HUs retrieved" , Arrays . asList ( hu_bp03loc01_wh01_active , hu_bp02loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc02_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_active , hu_bp03loc01_wh01_
assertNotNull ( scriptStatement )
assertNotNull ( result )
assertTrue ( originalMap . isEmpty ( ) )
TestHelpers . assertDeepEquals ( expected , result )
assertEquals ( 88 , jumpingOnTheCloud . getEnergyBalance ( 88 , 88 , clouds ) )
assertEquals ( 0 , foundMethods . size ( ) )
assertThat ( updatedItem . getQuantity ( ) , is ( existingItem . getQuantity ( ) - 10 ) )
assertFalse ( typeDefinition . isPresent ( ) )
assertThat ( "testPutHarvestSettings 0" , harvestedCollection , nullValue ( ) )
assertFalse ( vrp . getJobs ( ) . containsKey ( "4" ) )
assertEquals ( cls . getNNF ( ) , nnf )
assertThat ( cc . plus ( 1 , ChineseCalendar . Unit . WEEKS ) , is ( ChineseCalendar . of ( EastAsianYear . forGregorian ( 2017 ) , EastAsianMonth . valueOf ( 6 ) , 7 ) ) )
assertTrue ( "ContainsNearbyAlmostDuplicate is false" , Arrays . equals ( as , ( int [ ] ) Whitebox . invokeMethod ( target , "containsNearbyAlmostDuplicate" , as ) ) )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( decisionInstances . size ( ) , is ( 2 ) )
assertEquals ( 0 , counts . size ( ) )
assertTrue ( options . contains ( Fodselsnummer . class ) )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertNotNull ( con )
assertEquals ( Integer . valueOf ( 200007 ) , query . select ( employee . datefield . yearWeek ( ) ) . fetchFirst ( ) )
assertEquals ( 2 , numberOfElephants )
assertSame ( expected , actual )
assertEquals ( DecodeException . class , err . getClass ( ) )
assertEquals ( "BGP Error code 2 and subcode 170 not recognized." , e . getMessage ( ) )
assertTrue ( "Poison queue" , captor . getValue ( ) . isPoison ( ) )
assertThat ( getCompiledResult ( ) , is ( true ) )
assertEquals ( expectedValue , result )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertTrue ( dupLatch . getCount ( ) == 0 )
assertNotNull ( method )
Assert . assertEquals ( "SELECT s1\\nFROM t1\\nWHERE s1 NOT IN (SELECT s1\\n\\tFROM t2);" , text )
assertEquals ( 0 , ret2 . size ( ) )
assertEquals ( expectedRecords , result . getRecords ( ) )
Assert . assertEquals ( map ( Jsr310NullKeySerializer . NULL_KEY , "test" ) , value )
assertEquals ( 200 , resp . getStatus ( ) )
Assert . assertEquals ( emailSubject , testEmail )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( "Should be the same" , NATTraversalTechniqueAttribute . class , actualResult . getClass ( ) )
assertPostFails ( "3" , role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
context . assertIsSatisfied ( )
Assert . assertNull ( data . myMappedProperty )
Helpers . assertJson ( Deencapsulation . invoke ( twinState , "toJsonElement" ) . toString ( ) , json )
Assert . assertEquals ( 42 , font . getHmtx ( ) . getAdvanceWidths ( ) . length )
assertHasMethod ( model , "com.artemis.E group(java.lang.String groupName)" )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , grid . getPrimaryStyleName ( ) )
assertNotNull ( myTestFactory )
editor . assertGotoDefinition ( editor . positionOf ( "default" ) , editor . rangeOf ( "default" , "windoze" ) , editor . rangeOf ( "default" , "windoze" ) )
Assert . assertNotNull ( spy )
assertEquals ( "[1,2,3,4]" , symbols . toString ( ) )
assertEquals ( "333" , model . getUnrelated ( ) )
assertTrue ( true )
assertTrue ( "cos() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( "{\\"messageInfo\\":{\\"from\\":\\"Miguel Arlandy\\",\\"to\\":\\"Cristiano Ronaldo\\",\\"message\\":\\"Hala Madrid
assertEquals ( 0x5678 , hash . getByte ( ) )
Assert . assertTrue ( true )
assertNull ( newChain )
assertThat ( ReflectionTestUtils . getFieldValue ( ConsoleLogger . class , null , "fileWriter" ) , nullValue ( ) )
assertEquals ( "Test message ab c\\\\" , result )
assertTrue ( res . isEmpty ( ) )
assertThat ( context , is ( notNullValue ( ) ) )
Assert . assertEquals ( valueExpected , valueCall , 1E-12 )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( BranchUtils . getHeadCommit ( "source_branch" , repo ) , BranchUtils . getHeadCommit ( "test_branch" , repo ) )
assertOut ( "var /** @type {number} */ b = a.child('child').length()" )
assertEquals ( "Select scripts are not the same" , expectedSelectHash ( ) , hash )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , triple1 ) )
assertEquals ( "10" , victim . readObjectNumber ( ) )
assertEquals ( - 1 , store . read ( 0 , new byte [ 1 ] , 0 , 1 ) )
assertTrue ( spied . call ( ) )
assertEquals ( "/../.." , xmldbURI . resolveContext ( uri ) . toString ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( true , classUnderTest . getShowSessionStartupTimeHint ( ) )
assertTrue ( GenericTypeReflector . equals ( expected , ClassUtils . getCommonSuperType ( Arrays . asList ( t1 , t2 ) ) ) )
assertThat ( api . getResponseReadTimeout ( ) , is ( 0 ) )
assertEquals ( expectedPemCertificate , certificate . getPem ( ) . getEncoded ( ) )
Assert . assertTrue ( allowedCRUDL )
assertThat ( cls , is ( owlThing ( ) ) )
assertTrue ( ( ( PerunBl ) perun ) . getServicesManagerBl ( ) . isServiceBlockedOnFacility ( testService1 , testDestinationId1 ) )
assertEquals ( 0 , exceptions . size ( ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertMapping ( node , 0 , 15 , 0 , 0 , 16 )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertTrue ( version . isBeforeCurrent ( ) )
assertEquals ( expResult , result )
assertEquals ( "2" , result )
assertTrue ( envVars . size ( ) == 0 )
assertEquals ( "Hello ^there" , ResponseBodyInterpolator . interpolate ( "Hello ^there" , req ) )
assertUndeployed ( COMPONENT_NAME )
assertEquals ( 400 , response . getStatus ( ) )
assertNotNull ( Workflow . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "" , result )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER EH ['111111111111111','foo              ','2012-11-01 00:00:00.000'] - ['111111111111111','fop              ','2012-11-30 00:00:00.000']\\n" + "    SERVER FILTER BY FIRST KEY ONLY AND (CREATED_DATE >= DATE '2012-11-01 00:00:00.000' AND CREATED_DATE < DATE '2012-11-30 00:00:00.000')\\n" + "    SERVER TOP 100 ROWS SORTED BY [ORGANIZATION_ID, PARENT_ID, CREATED_DATE DESC, ENTITY_HISTORY_ID]\\n" + "CLIENT MERGE SORT" , QueryUtil . getExplainPlan ( rs ) )
assertEquals ( "www.giantbomb.ru" , doc . getContentField ( "out" ) . toString ( ) )
assertSame ( 1 , searchHistory . getLength ( ) )
assertTrue ( compressedLogFile . exists ( ) )
Assert . assertTrue ( "duplicate association was not removed" , topicmap . getAssociations ( ) . size ( ) == 1 )
checker . assertEquals ( "[" + r + "][" + c + "]" , exp , act )
assertEquals ( body . toString ( ) , "test exception" )
assertEquals ( "Hello World" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertThat ( taskService . createTaskQuery ( ) . taskId ( task . getId ( ) ) . count ( ) , is ( 1L ) )
assertKey ( new StringKey ( "50" ) , index . searchIndex ( new EqualsCondition ( new StringKey ( "50" ) ) , Index . NO_SEARCH_LIMIT ) )
Assert . assertTrue ( "This is a odt file, ODTReport implementation should have been resolved...." , report instanceof ODTReport )
assertThat ( listSorter . asList ( ) , hasItems ( "A" , "B" , "C" ) )
assertPostCodegenRules ( mojo )
assertEquals ( expected , actual )
assertEquals ( "Hello Dummy" , cfg . getString ( "log" ) )
assertEquals ( "3 months from now" , t . format ( new Date ( 2629743830L * 3L ) ) )
assertTrue ( "Cluster should be stopped" , cluster != null )
assertEquals ( 0 , result . getRequiredPlugins ( ) . size ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( null , result )
assertEquals ( expectedContent , bOut . toString ( ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertEquals ( asList ( foo1 , foo2 ) , results )
assertTrue ( parseResults . isEmpty ( ) )
Assert . assertEquals ( columnSubset . length , 0 )
Assert . assertFalse ( isValid , "PollItem with wrong pollItemName is not valid" )
assertNull ( item . getList ( ) )
Assert . fail ( )
assertTrue ( roles . contains ( "RESOURCE_SERVICE_GROUP" ) )
assertTrue ( shouldVote )
assertThat ( listSorter . toListView ( ) , equalTo ( containers ( "D" , "B" ) ) )
assertEquals ( expected , actual )
assertEquals ( AnalysisState . ERROR , analysisSubmission . getAnalysisState ( ) )
assertNotNull ( result )
assertEquals ( expected , result )
assertCredits ( credits )
assertEquals ( "value" , "quoted value" , config . getString ( "section4.var1" ) )
assertThat ( target . validate ( ) , is ( false ) )
assertTrue ( vw == ret )
assertFalse ( checker . isDetected ( ) )
assertThat ( c . toString ( ) , is ( "myString < aaa" ) )
Assert . assertNotNull ( browser . findElement ( By . id ( "form" ) ) )
assertEquals ( expected , actual )
assertThat ( logger . output ( ) , containsInOrder ( "BUILD STEP DURATIONS" , goalStatsLine ( "goal-A1" , 0.1 , 100 ) , goalStatsLine ( "goal-B1" , 2.0 , 86 ) , goalStatsLine ( "goal-B2" , 0.3 , 13 ) , goalStatsLine ( "goal-C1" , 0.01 , 3 ) ) )
assertFalse ( path . isEmpty ( ) )
assertThat ( encryptedPassword , is ( "n3fE9/7XOmgD3BkeJlC+JLyb/Qg=" ) )
assertEquals ( 0 , JedisURIHelper . getDBIndex ( uri ) )
assertEquals ( sent , received )
assertThat ( kvStore . getString ( "field" ) , equalTo ( "value" ) )
assertArrayEquals ( new Integer [ ] { 4 , 15 , 12 , 8 , 18 } , array )
assertEquals ( test , StringUtils . getValue ( test , "test" ) )
assertEquals ( expectedSchema , HaivvreoUtils . determineSchemaOrThrowException ( conf , props ) )
Assert . assertEquals ( "Model should contain default RDF type" , rdfTypes . size ( ) , 1 )
assertEquals ( null , id . getValue ( ) )
Assert . assertTrue ( sut . compare ( pmv1 , pmv2 ) > 0 )
assertEquals ( mockResponse . getStatus ( ) , response . getStatus ( ) )
context . assertIsSatisfied ( )
assertEquals ( "Method #toString is wrong" , "StringMapper{field=field, indexed=false, sorted=true, validated=true, column=field, " + "caseSensitive=true}" , mapper . toString ( ) )
assertEquals ( - 1 , c . getWidth ( ) )
assertEquals ( "Should have found a shared edge" , 1 , g . getEdgeCount ( ) )
assertTrue ( adb == null )
assertEquals ( ImmutableList . of ( "foo" ) , evaluate ( "${iter}" , Iterable . class ) )
assertEquals ( HttpStatus . SC_OK , getStatus ( patchReq ) )
assertArrayEquals ( new String [ ] { "command arg1 arg2 arg3 arg4 arg5" } , command )
assertEquals ( new IndexDesc ( TestCatalog . desc1 . getProto ( ) ) , new IndexDesc ( store . getIndex ( TestCatalog . desc1 . getName ( ) ) ) )
assertTrue ( isValid )
assertTrue ( verify )
assertNull ( classMetadata . getInterfaceName ( ) )
assertNotNull ( file )
assertEquals ( expectedChargeMode , getTestChargingStationFromRepository ( ) . getChargeMode ( ) )
assertTrue ( "Expect that the next pause is less than or equal to the current one" , nextPause <= maxPause )
assertEquals ( 2 , result . size ( ) )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . INTERNAL_SERVER_ERROR ) )
assertThat ( output , containsString ( "Retrieved" ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertTrue ( "elapsed (" + elapsed + " millis) was not short enough" , longEnough )
Assert . assertEquals ( "Default protocol was registered" , protocol , protocol . getProtocol ( ) )
assertNotEquals ( song1 , null )
assertTrue ( messageLatch . await ( 3 , TimeUnit . SECONDS ) )
Assert . assertNull ( caixa )
Assert . assertEquals ( originalString , DhlClientLogEvent . cleanupPdfData ( originalString ) )
assertEquals ( visibility , user . getSNetVisibility ( ) )
Assert . assertEquals ( list . size ( ) , 1 )
assertNull ( subject . matchOperation ( ) )
assertEquals ( 0 , argCaptor . getValue ( ) . getReplyToAddress ( ) . size ( ) )
Assert . assertEquals ( numGen , collector . getValue ( ) )
assertEquals ( TestUtil . HTTPS_TEST_PROXY , result . get ( 0 ) )
assertTrue ( violated )
assertThat ( toString ( people ) , is ( equalTo ( "[Jon Doe]" ) ) )
Assert . assertNull ( result )
assertFalse ( this . tlvsBuilder . augmentation ( Tlvs3 . class ) . getLspDbVersion ( ) . isPresent ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "points" , op . points )
assertFalse ( future . isDone ( ) )
assertEquals ( dt , DateUtils . stringToTimestamp ( t ) )
assertions . isNotEqualTo ( expected )
assertEquals ( "incorrect connected value" , false , connected )
Assert . assertEquals ( namedUserListingResponse . getResponseParser ( ) . parse ( response ) , responseParser . parse ( responseJson ) )
Assert . assertNotNull ( filter )
assertTrue ( typeDefinition . isPresent ( ) )
assertThat ( sub , is ( graph ) )
assertEquals ( 0 , runTool ( "-failover" , "nn1" , "nn2" ) )
assertFormat ( number , 5 )
Assert . assertEquals ( expected , fixture . mapper ( OPTION_USE_ID , true ) . valueToTree ( resource ) )
assertEquals ( 0 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
Assert . assertEquals ( expected , actual )
assertTrue ( stmt instanceof CreateSchemaNode )
assertEquals ( diagnosis , diagnosisDAO . getDiagnosisById ( 1 ) )
assertEquals ( "theoneandonly@schland.de" , em . createNativeQuery ( "select email from address where id=1" ) . getResultList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 1 , ti . getTailLength ( ) )
assertThat ( results , is ( Collections . singletonMap ( ( Object ) "id" , Arrays . asList ( "MD5 sums do not match. File document contains " + "'md5 : 'abcdef12'' and the filemd5 command produced 'md5 : 'abcdef''." , "The output of 'md5 : 'abcdef'' is 'abcdef12''." ) ) ) )
assertThat ( sheet . getRow ( 0 ) . getLastCellNum ( ) , is ( ( short ) 300 ) )
assertEquals ( autoCommitMode , serverEntityContext . getAutocommit ( ) )
assertTrue ( "namespace value in annoataion @XmlElement is not correct: " + str , str . indexOf ( "helloString/Name" ) > - 1 )
assertEquals ( 1 , catalog . getCommands ( ) . size ( ) )
assertEquals ( "/profile=default/subsystem=web:read-resource" , ModelNodeOperationToCliString . convert ( op ) )
assertEquals ( "Foo Bar Resource" , textLiteralResource . getResourceText ( ) )
Assert . assertTrue ( success . get ( ) )
assertEquals ( "test" , mock . oneLongArg ( value ) )
assertEquals ( expResult , result )
assertEquals ( "this.andThen(test.Person::getFirstName)::apply" , CodeModelTestsHelper . toString ( aLambda ) )
assertFalse ( "object method must not be passed to next handler in chain" , dummyHandler . invokeCalled )
assertEquals ( 1 , cs . getDimension ( ) )
assertEquals ( expected , PolynomialFactorDecomposition . parse ( "a^2*b^4*c*e^5" , ring , vars ) )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertEquals ( "My comments" , eval ( "cmd.comment" ) )
assertEquals ( "Debug" , conf . getName ( ) )
assertEquals ( "2012-03-03" , cw . getDisplayName ( ) )
assertThat ( Moment . axis ( ) . element ( m ) , is ( f . parse ( "2015,11-19 15:00:00.000Z" ) ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertEquals ( paramValue , result )
Assert . assertTrue ( isVisible ( "$_formatNumberDialog" ) )
assertThat ( taskService . getOwner ( task . getId ( ) ) , is ( "demo" ) )
assertEquals ( expectedQuery , actualQuery )
assertNull ( tuple . getDoubleOrDefault ( "field" , 2.0 ) )
assertAllCodesOfIterator ( entitySelector . endingIterator ( ) , "e1" , "e2" , "e3" )
assertEquals ( 4.0 , other . mean ( ) , 0.01 )
assertFalse ( gizmoService . isAffectedBy ( testClass ) )
assertEquals ( config . getSoLinger ( ) , acceptedConfig . getSoLinger ( ) )
assertCorrectlyStored ( permission )
assertEquals ( "test" , msg . getText ( ) )
assertEquals ( "Test Comment" , newProps . getComment ( ) . getText ( ) )
assertXpathExists ( "/a:entry/m:properties" , xmlString )
assertTrue ( "service should be not null and not empty" , service != null && ! service . equals ( "" ) )
assertEquals ( 2 , alternativeRoutes . size ( ) )
assertEquals ( "Any String you want" , new String ( storageArray ) )
assertDegenerate ( scan )
assertEquals ( expected , actual )
assertCamundaInputOutputParameter ( task )
assertTrue ( ! result )
assertEquals ( "field.toUpperCase()" , p . toString ( ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertTrue ( tippyTop . getItem ( ) < 3 )
assertNotNull ( connection )
assertFalse ( allUsers . isEmpty ( ) )
Assert . assertEquals ( IOUtil . toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-beta-3.xml" ) . getAbsoluteFile ( ) ) , "UTF-8" ) , IOUtil . toString ( os . toByteArray ( ) , "UTF-8" ) )
Assert . assertEquals ( "callback_value" , o )
assertCard ( expectedCard , "http://magiccards.info/nph/en/134.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( 5 , node1 . clusterCountKeysInSlot ( slot ) . intValue ( ) )
assertNotNull ( Alert . reader ( "ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "{\\"" + escaped + "\\":\\"\\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/" , obj . toString ( ) )
assertTrue ( Expr . CMP_GREATER == x )
assertThat ( encodingHandler . getEncoding ( ) , is ( "ISO-8859-1" ) )
assertTrue ( "Oh no
context . assertIsSatisfied ( )
assertThat ( evaluator . evaluate ( corc ) , is ( TruthValue . NO ) )
Assert . assertEquals ( "Wagner" , msgResponse . getFirstName ( ) )
assertEquals ( "foobar" , exception . getMessage ( ) )
assertEquals ( "three" , multiDimMapsLists_1 . getStringList ( ) )
Assert . assertEquals ( "Value" , value , evaluationTime )
Assert . assertEquals ( "who is eating the pie" , this . realiser . realise ( p ) . getRealisation ( ) )
assertThat ( result , is ( sameInstance ( packet ) ) )
Assert . assertTrue ( icms . isSelecionado ( ) )
assertNull ( victim . getValue ( KEY ) )
Assert . assertNull ( ModuleUtil . getModuleForPath ( path ) )
assertEquals ( "" , result )
Assert . assertEquals ( HttpStatus . SC_NOT_MODIFIED , result . getCode ( ) )
assertEquals ( newy , result , 0.01 )
CustomAsserts . assertEquals ( definition , expected , actual )
assertTrue ( deleted )
assertFalse ( CacheUtils . isExecutableFile ( "/test_file.txt" , cache ) )
assertScoreAndParse ( content , null , 1 )
assertEquals ( workspace . getName ( ) , workspace2 . getName ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "appName should  not be updated" , format ( "%s-%s" , configuredAppName , ENVAR_VALUE_GIT_BRANCH ) , expandedAppName )
assertEquals ( TestClass . class . getName ( ) , service . injectedLogger . getName ( ) )
assertNull ( innerRoom )
assertTrue ( result . size ( ) >= 1 )
assertEquals ( new BigInteger ( 100 ) , fromJson )
Assert . assertEquals ( expected , actual )
assertEquals ( "snowball analyzer serialization is wrong" , expected , actual )
assertEquals ( 10 , result . getInt ( COSName . R ) )
assertNull ( reader . overflowAtoms ( ) )
assertServletWasInvokedWith ( entity )
Assert . assertEquals ( "3 vuosituhannen p盲盲st盲" , t . format ( new Date ( 315569259747L * 3L ) ) )
assertEquals ( "Bazinga{foo}" , instance . toString ( ) )
assertEquals ( 123 , b . getId ( ) )
assertEquals ( 4.0 , distanceP0 . getDistance ( P0 , P1 , P2 , P3 , P4 ) , 0.000001 )
assertNotNull ( ids )
arrays . assertContains ( description , actual , value , null )
assertThat ( actual , is ( commonPropertyType ) )
assertEquals ( 2. , violation , 0.01 )
assertEquals ( set . size ( ) , unequalInstances . size ( ) )
assertTrue ( ms > before )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( "Base value is not properly parsed" , "9998.9999" , parsed )
assertTrue ( completableFuture . isDone ( ) )
assertEqualDoubleArrays ( pydiv , div , epsilon )
assertEquals ( "{\\"f1\\":\\"f1\\",\\"f2\\":\\"f2\\"}" , expression )
assertEquals ( this . state , object )
assertEquals ( "[1, 3, 4, 5, 8, 9, 3, 989]" , res . toString ( ) )
assertThat ( mockContext . getOptimizationLevel ( ) , is ( - 1 ) )
assertEquals ( datetime , actual )
assertThat ( ( String ) FieldAccessUtil . getFieldVal ( listener , "profile" ) , is ( "testProf" ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 3 , results . getValues ( ) . size ( ) )
assertTrue ( gotException )
assertFlowState ( ACCEPTED_SUPPORTS )
assertEquals ( value . toString ( ) , new SizeTypeNode ( testBinaryReaderBuilder . putQWord ( value ) . build ( ) , chunkHeader , parent , 4 ) . getValue ( ) )
Assert . assertFalse ( match )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( medias . size ( ) == max )
assertTrue ( result . size ( ) > 0 )
Assert . assertTrue ( syncSensorsIsRunning )
assertEquals ( "11.1.10" , result )
assertEquals ( "testing" , param . getValue ( ) )
assertEquals ( 1 , col . count ( ) )
assertThat ( codes , containsInAnyOrder ( "43343-4" , "47239-9" ) )
assertArrayEquals ( new MenuEntry [ ] { menu ( "Cancel" , "" , MenuAction . CANCEL ) , menu ( "Examine" , "Kragen" , MenuAction . EXAMINE_NPC ) , menu ( "Walk here" , "" , MenuAction . WALK ) , menu ( "Pay (south)" , "Kragen" , MenuAction . NPC_FOURTH_OPTION ) , menu ( "Pay (north)" , "Kragen" , MenuAction . NPC_THIRD_OPTION ) , menu ( "Talk-to" , "Kragen" , MenuAction . NPC_FIRST_OPTION ) , menu ( "Pay (north)" , "Kragen" , MenuAction . NPC_THIRD_OPTION ) , menu ( "Talk-to" , "Kragen" , MenuAction . NPC_FIRST_OPTION ) } , argumentCaptor . getValue ( ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertThat ( isValid , is ( true ) )
Assert . assertTrue ( _constraint . isAssignmentValid ( _testNode , _testReplica , _clusterContext ) )
assertEquals ( "Integration" , this . metadataStore . get ( "HazelcastMetadataStoreTests-Spring" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertNotNull ( schemaRegistryMultiple )
Assert . fail ( "Should have Assert.failed on the second parameter to 'starts-with' not " + "being bound." )
assertEquals ( unused , h . getUnused ( ) )
assertEquals ( exp , toString ( wa ) )
Assert . assertTrue ( SecurityUtil . isSecurityEnabled ( ) )
Assert . assertFalse ( properties . isEmpty ( ) )
assertThat ( converter . toJavaObject ( new TimestampWritable ( new Timestamp ( 0L ) ) ) , is ( ( Object ) new Timestamp ( 0L ) ) )
assertAuthenticationFailsPlusRequired ( )
assertEquals ( "company" , dbName )
Assert . assertEquals ( "The first dropdown should be present" , component . getFirstDropdown ( ) , "Test" )
assertThat ( comparator . compare ( projectChange1 , projectChange2 ) , is ( - 5l ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "ADD /status/replicas" ) )
assertEquals ( "Camel rocks" , reply )
assertEquals ( "John,Paul,Ringo" , joiner . join ( "test,John,Paul,Ringo" ) )
Assert . assertEquals ( "Update_rows_v1" , actual )
assertEquals ( w . hashCode ( ) , ww . hashCode ( ) )
assertThat ( MoreMapUtils . getHadoopPath ( map , KEY , null ) , is ( nullValue ( ) ) )
assertEquals ( "validating the bean" , obj , new TestBean ( "testVal" ) )
Assert . assertEquals ( testInput . expectedOutput , output . toString ( ) )
assertEquals ( "<div><p>Hello</p></div><div><p>There</p></div>" , TextUtil . stripNewlines ( divs . outerHtml ( ) ) )
assertThat ( subclassOf , equalTo ( false ) )
BeanAssert . assertBeanEquals ( new FlexiBean ( ) , parsed )
assertEquals ( 0 , ranking . getNumberOfSubFronts ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( expected , actual )
assertTrue ( true )
Assert . assertTrue ( appsTableColumnsMeta . indexOf ( "natural" ) != - 1 )
Assert . fail ( )
Assert . assertEquals ( 0 , scores . getScore ( ) )
assertEquals ( LogLevel . ERROR , sub . getLevel ( ) )
assertEquals ( ApiStatus . SUCCESS , response . getMeta ( ) . getStatus ( ) )
assertNotNull ( result )
Assert . assertNotNull ( conf . get ( "logger.dir.walog" ) )
assertThat ( result , is ( expected ) )
Assert . assertEquals ( "áá â\\tã ä " , s )
assertEquals ( V8Value . DOUBLE , doublesArray . getType ( ) )
assertTrue ( "Result should be empty object" , result . length ( ) == 0 )
Assert . assertEquals ( ( Integer ) 1 , sync ( queue1 . poll ( 10 , TimeUnit . SECONDS ) ) )
assertEquals ( "my_topic_ awesome message" , binaryMessage . toString ( Charset . forName ( "UTF-8" ) ) )
Assert . areEqual ( true , countA == 0 && countB == 10 , "验证优先级的写" )
assertThat ( spec , is ( 0 ) )
assertTrue ( p . apply ( tree ) )
Assert . assertEquals ( "DateIndexTableConfigHelper .setup threw the expected exception, but the message was not the expected message." , "No Date Tables Defined" , msg )
assertNotNull ( result )
assertEquals ( descripcion , ordenPago1 . getStatus ( ) )
assertEqualRevisionLists ( revisionsAll , tmrpAll . revisions , "all-incomplete" )
assertFalse ( "Files should not be the same" , duplicateFinder . isSame ( a , b ) )
assertEquals ( d_drug . toString ( ) , pm1 . getNameModel ( ) . getValue ( ) )
assertThat ( tsp . toString ( ) + " => " + Double . toString ( delta ) , delta < 1.0 , is ( true ) )
Assert . fail ( "Expection expected" )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Response>" + "Hey no tags!" + "</Response>" , elem . toXml ( ) )
assertEquals ( 1 , message . getMessageId ( ) )
assertEquals ( requestMessage , requestPayload )
assertEquals ( "a" , Items . chooseWeighted ( singletonList ( first ) , random ) )
assertFalse ( command . valid ( options , optionParser ) )
Assert . assertEquals ( "V6uoqOm7esGRqm20VMz" , entries . get ( 0 ) . getPassword ( ) )
assertEquals ( 2 , notes . size ( ) )
runner . assertAllFlowFilesTransferred ( FetchHDFS . REL_FAILURE , 1 )
Assert . assertNull ( oembedService . executeRequest ( request ) )
assertEquals ( k , f . getClass ( ) )
assertConsoleOutputContains ( "Show this help message." )
assertEquals ( "baz" , actualMetricId . getValue ( ) )
this . assertLoadBlob ( departments , true , false )
assertEquals ( original , result )
assertEquals ( 0 , v )
assertEquals ( exepcted_individual , returned_individual )
assertEquals ( "Analyzer must be keyword" , Mapper . KEYWORD_ANALYZER , mapper . analyzer )
assertFalse ( lfs . util ( ) . exists ( p ) )
assertEquals ( value , user . get ( key ) )
assertEquals ( Lists . newArrayList ( "" , null , "do" , "not" , "cry" , "over" , "spilt" , "beer" ) , filteredWords )
assertThat ( actualBranchNames , containsInAnyOrder ( "master" , "master-git" ) )
Assert . assertTrue ( Arrays . equals ( expected , actual ) )
assertTrue ( result instanceof JMeterCollector )
assertNotNull ( error )
assertEquals ( r1 , r2 )
TestHelpers . assertDeepEquals ( expected , result )
assertEquals ( "calling: fooMethod(2 arguments: second=v2)" , message )
assertTrue ( pdbStream . available ( ) > 0 )
Assert . assertEquals ( expected , MustacheTemplatePrefixExpander . expand ( input ) )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , 1 ) , im ( 2 , 2 ) , im ( 3 , 4 ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( "numhits is wrong" , 15000 , res . getNumhits ( ) . intValue ( ) )
assertEquals ( expectedDouble , Double . valueOf ( string . substring ( offset , offset + length ) ) )
assertThat ( tuple . getListOrDefault ( "field" , value ) , equalTo ( value ) )
assertEquals ( inputId , emptyId )
assertThat ( research , notNullValue ( ) )
Assert . assertEquals ( "bar" , ss . getString ( "foo" ) )
assertTrue ( ipMatcher . match ( "172.16.255.255" ) )
assertTrue ( sut . succeeded ( ) )
assertEquals ( "Paul" , proxy . getAttribute ( "firstName" ) )
Assert . assertEquals ( "NOT FOUND FROM READER" , result . getId ( ) )
Assert . assertEquals ( repetitions , o )
assertEquals ( true , result )
assertEquals ( 0 , attribsSet . size ( ) )
assertTrue ( Pattern . matches ( "(?s).*<object data=\\"object.data\\">" + "<param name=\\"name\\" value=\\"value\\" />" + "</object></p>" , result ) )
Assert . assertTrue ( Math . abs ( now . getTime ( ) - n . getTime ( ) ) < 500 * 1000 )
Assert . assertEquals ( ref , f . taylor ( dx , dy , dz ) , 2.0e-15 )
Assert . assertTrue ( servlet . isDebugMode ( ) )
assertThat ( providerRole , is ( nullValue ( ) ) )
assertJson ( "{'value2': 'foo'}" , serialize ( bean ) )
assertNotNull ( interceptor )
assertEquals ( "student" , treated . getBody ( ) . get ( "schoolYearAttendance" ) )
assertEquals ( metadata . getClass ( ) , memoryCopyResultSet . getMetaData ( ) . getClass ( ) )
assertEquals ( "public static final ObjAttribute<NumericProperty> TEST = PropertyFactory.createNumeric(\\"test\\", Integer.class);" , definition )
assertEquals ( diameter , 1.0 )
assertEquals ( 48 , size )
Assert . assertEquals ( 3.0 , svd . getConditionNumber ( ) , 1.5e-15 )
assertThat ( tableCount , is ( 0 ) )
assertEquals ( "abc\\n" , found )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
Assert . assertEquals ( person3 . getWorkAddress ( ) . getWorkAddress ( ) . getWorkAddress ( ) . getId ( ) , person2 . getWorkAddress ( ) . getWorkAddress ( ) . getId ( ) )
assertThat ( handler , is ( instanceOf ( FederatedHMSHandler . class ) ) )
assertions . endsWith ( sequence )
assertEquals ( expected , result )
assertEquals ( "[]" , a )
assertThatBuildSucceeded ( )
assertEquals ( 1 , fixture . getExitVal ( ) )
assertEquals ( 4 , numberOfFriends )
assertEquals ( 1 , fromBase64 . size ( 0 ) )
assertEquals ( in , out )
Assert . fail ( "Deberia haber saltado un AOFormatFileException" )
assertEquals ( "searchQuery must not be empty" , e . getMessage ( ) )
assertEquals ( "" , result )
assertTrue ( doTest ( dynamicQuery , query ) )
Assert . assertTrue ( ! counts . containsKey ( Jsprit . Strategy . RADIAL_BEST ) )
assertEquals ( expectedColumn1 , actualUniqueColumnCombination . getColumnIdentifiers ( ) [ 0 ] )
assertFalse ( "Expected ComplexSchema boolean validation failure did not succeed" , schema . validate ( booleanEntity ) )
assertions . doesNotContain ( values )
Assert . assertEquals ( icmsSetado , icms . getIcmssn102 ( ) )
assertTrue ( String . format ( "Wrong message:\\n%s" , helper . getOutputAsString ( ) ) , helper . getOutputAsString ( ) . contains ( "xyz" ) )
assertThat ( track , is ( notNullValue ( ) ) )
assertEquals ( "{\\"arrayFilters\\":[{\\"name\\":\\"foo\\",\\"type\\":\\"update\\",\\"values\\":[\\"5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
assertThat ( expression . getExpression ( ) , is ( "This is a string expression." ) )
assertThat ( get , isAllowed ( ) )
assertTrue ( filter . isDetected ( ) )
Assertions . assertTrue ( result )
assertTrue ( calculatorPanel . getTextBox ( ) . textEquals ( "5" ) )
assertNull ( testUrlDecode )
assertThat ( context . getContext ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( Servlet . SUCCESS , res )
assertNotNull ( AssignedAddOnExtension . fetcher ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "XFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( getContents ( root , "nested_inheritance.txt" ) , sw . toString ( ) )
assertMatrixEquals ( "derivativeInCell" , expected , actual , STRICT )
assertTrue ( result )
assertEquals ( new Binary ( uuid , value ) , Binary . from ( value ) )
assertSearchYields ( index , "fooaaa" , "foobbb" )
assertThat ( batchPlanSteps , is ( BatchPlanStepType . GROUP_ADD ) )
assertEquals ( 1 , observation . getCode ( ) . getCoding ( ) . get ( 0 ) . getExtension ( ) . size ( ) )
assertFalse ( condition . accept ( null , null , attribs ) )
assertTrue ( actionItems . size ( ) == 1 )
assertThat ( confirmation . getCurrentTime ( ) , equalTo ( now ) )
assertThat ( JdbcUtils . getColumnNames ( getConnectionProperties ( ) , "SOMETABLE" ) , containsInAnyOrder ( "PID" , "TEXTCOL" , "NEWCOL" ) )
assertEquals ( 3 , dataManager . getCommandHistory ( ) . size ( ) )
assertEquals ( expected , result )
assertEquals ( expected , actual )
Assert . assertNotNull ( metadataDescriptor . createMetadata ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( component , dscTestStub . getDeploymentID ( ) . getServiceID ( ) , dsAcceptanceUtil . getDiscoveryServiceDeployment ( component ) . getDeploymentID ( ) ) )
assertThat ( "Method with null String argument is processed incorrectly" , title , equalTo ( MessageFormat . format ( TITLE_STRING_WITH_ONE_ARG , args ) ) )
Assert . assertEquals ( infoEventoRetorno , retorno . getInfoEventoRetorno ( ) )
assertNumEquals ( numOf ( Math . log ( 90d / 104 ) ) , esCriterion . calculate ( series , tradingRecord ) )
assertEquals ( secret , code )
assertFalse ( result . passedValidation ( ) )
Assert . assertNotNull ( addressResultsDto )
assertActivityRequiresPermission ( packageName , className , permission )
XMLAssert . assertXMLEqual ( loadXML ( ORDER_ACK_XML ) , result . getOwnerDocument ( ) )
assertFalse ( resultMessage ( result , HttpRequestType . POST ) , result . passedValidation ( ) )
assertEquals ( "dois septilh玫es de inteiros" , actual )
Assert . assertEquals ( "[AND,field:selector][posFilter: filter(true, AND, field, fn(xxx,yyy))]" , luceneParser . parse ( "field:selector AND #include(field, fn\\\\(xxx,yyy\\\\))" ) . getContents ( ) )
assertEquals ( expected , pointOfFailure . toString ( ) )
Assert . assertArrayEquals ( expectedResults , results )
assertTrue ( speed > 0 )
assertEquals ( expResult , result )
TestUtil . assertFuzzyContains ( "concept1" , html )
Assert . assertTrue ( shardTbl == null )
assertEquals ( degree , 1 )
Assert . assertArrayEquals ( expected , actual )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �� ��" + "��###��" + "�尖�尖�尖�尖��" )
Assert . assertEquals ( "Failure expected the name to be the same" , "ChatroomMemberDTO" , CMDTO . getDTOName ( ) )
assertEquals ( "test" , result )
assertTrue ( result )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertNotNull ( output . list ( ) )
assertThat ( locomotive . getExitCode ( ) , is ( 0 ) )
assertEquals ( "" , result )
assertEquals ( "The round-encoding should be ISO_8859_1" , s , new String ( buff , 0 , len ) )
assertThat ( Template . parse ( "array has {{ hash.a : 1, hash.b : 2, hash.c : 3, hash.d : 4}" ) . render ( assigns ) , is ( "array has 4 elements" ) )
assertThat ( "validation is successful" , validation . pass ( Report . WITHOUT_WARNING ) )
Assert . assertEquals ( rawMeta , metaBack )
assertEquals ( "pippo" , string )
assertEquals ( deleteMapping1 , deleteMapping1Duplicate )
assertTrue ( certificateImportCalled . get ( ) )
Assert . assertEquals ( "Graph not of the exepected size" , 12 , graph . size ( ) )
assertEquals ( expected , query . export ( ) )
assertTrue ( page . asXml ( ) . contains ( "true" ) )
Assert . assertTrue ( jsonList . size ( ) > 0 )
Assert . assertNotNull ( evt )
assertEquals ( "org.apache.cxf.jaxws11. CaptureServlet" , servlet . getUserAgent ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertFalse ( accessor . declaresHashCode ( ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( childBoss )
assertTrue ( parent . isPrefixOf ( fixture ) )
assertEquals ( false , getLoadLayerDefinitionAction ( ) . isEnabled ( ) )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertEquals ( RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "StatementRankTripleBest.rdf" ) ) , model )
assertThat ( result , is ( "A012345789012345789012345" ) )
assertEquals ( "Hello, 123!" , substituter . substituteString ( "Hello, 1!" ) )
assertThat ( callback . toString ( ) , callback . isSent ( ) , is ( true ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "long" ) )
Assert . assertEquals ( "<div class=\\"htmlform\\"></div>" , session . getHtmlToDisplay ( ) )
Assert . assertTrue ( message , expected . equals ( actually ) )
assertThat ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , res , is ( 0 ) )
Assert . assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , mFileSystemMaster . listStatus ( new AlluxioURI ( "/hello" ) ) . length ( ) )
assertNotNull ( TaskChannel . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( sampleEntities , hasSize ( 2 ) )
assertEquals ( 1 , proxy . getPriority ( ) )
mock . assertIsSatisfied ( )
assertNotNull ( result . getOpenAPI ( ) . getComponents ( ) . get ( "ex1" ) )
assertThat ( a . getValue ( ) , equalTo ( "A1" ) )
assertThat ( resp , stringContainsInOrder ( "<code value=\\"11378-7\\"/>" , "<display value=\\"Systolic blood pressure at First encounter\\"/>" ) )
assertEquals ( ret , "todo" )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( expectedResult , entityParser . parseThing ( json ) )
assertEquals ( 4L , avg . get ( 4L ) , 0 )
assertEquals ( 5 , devices . size ( ) )
assertEquals ( expecting , found )
Assert . assertEquals ( 3 , EntityUtil . getInstanceSequence ( start , frequency , tz , instance ) )
assertEquals ( expected , map )
assertEquals ( str , new String ( baos . toByteArray ( ) ) )
assertEquals ( "Test message ab c\\\\" , result )
Assert . assertTrue ( "When adding a SslTermination you must not have an error" , ! errors . isEmpty ( ) )
assertNull ( t . getFirstClassOrInterfaceTypeImage ( ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( "abc\\n" , found )
assertEquals ( "my.context.property" , PangoolMultipleOutputs . getNamedOutputContext ( job . getConfiguration ( ) , job . getConfiguration ( ) , "foo" ) )
assertEquals ( expected , deserialized )
Assert . assertEquals ( "sendMessageFromOwnerProcessor,sendMessageFromOwnerChatSocketImpl" , slip )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0xc2 , 0x49 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 ,
assertThat ( target . matchExactly ( flow ) , is ( false ) )
Assert . assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
assertEquals ( 4 , len ( letters ) )
assertFalse ( isApplicable )
assertThatTestAppHasBeenSuccessfullyRegistered ( driver )
assertThat ( token . getType ( ) , is ( PCRELexer . WhiteSpace ) )
Assert . assertEquals ( "[3, 2, 6, 4, 7, 1, 5]" , result . toString ( ) )
JSONAssert . assertEquals ( "{a:[[9]]}" , ARRAY_OF_JSONARRAYS , new CustomComparator ( JSONCompareMode . LENIENT , customization ) )
assertTrue ( bos . toString ( ) . contains ( "\\"name\\":\\"Book2\\"" ) )
assertEquals ( this . emptyCom , result . getAttributes ( ) )
assertEquals ( 555 , asynchronousJobPool . getThreadPoolSize ( ) )
assertEquals ( expires , DateUtil . parseAsctime ( expires ) )
assertTrue ( "The two rest data virtualizations should be equal" , empty1 . equals ( empty2 ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertThat ( existingGridSet , hasProperty ( "name" , equalTo ( GWCConfigIntegrationTestData . GRIDSET_EPSG4326 ) ) )
assertEquals ( 0 , p . size ( ) )
assertThat ( placement , is ( nullValue ( ) ) )
assertEquals ( Arrays . asList ( "com.a.A" , "com.b.B" , "com.age" , "12" ) , ValidationGroupHelper . getGroupsOnField ( input ) )
assertNotNull ( valve . getValve ( ) )
assertTrue ( "Failed at " + i , called )
Assert . assertEquals ( 1 , events . size ( ) )
assertNull ( res . getHeader ( "X-woop" ) )
assertThat ( MyDelegate . class , is ( notNullValue ( ) ) )
Assert . assertEquals ( "{\\"alice\\":{\\"edgar\\":[\\"bob\\"],\\"bob\\":[\\"bob\\"]}}" , result . toString ( ) )
assertFalse ( Compare . areIdentical ( imageToTest , referenceImage ) )
Assert . assertNotNull ( trainer . train ( eventStream ) )
assertTrue ( mbr instanceof CustomBooleanReader )
assertNull ( domain )
paths . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertThat ( properties . size ( ) , is ( 0 ) )
assertEquals ( "action" , action )
Assert . assertFalse ( item . matches ( divNode ) )
assertEquals ( expectedCollectionPrefix , sink . collectionPrefix )
Assert . assertEquals ( 0 , Array . inversions ( input , integerComparator ) )
assertEquals ( 7 , this . crossword . getWidth ( ) )
assertEquals ( "Hello World" , jhsCmd . getOutput ( ) )
assertEquals ( storeMock , store )
Assert . assertEquals ( "�注�� 专�注" , t . format ( new Date ( 600 ) ) )
Assert . assertEquals ( expected , actual )
assertTrue ( population . size ( ) >= 98 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( currentUser . getName ( ) , user . getName ( ) . getGivenName ( ) )
assertThat ( cursor . hasNext ( ) , equalTo ( false ) )
assertSeq ( new String [ ] { "<a/>" , "<b/>" , "<c/>" , "<d/>" } , "insert-before(/top/x/*, 3, /top/y/*)" )
assertEquals ( expecteds , actuals )
assertEquals ( workflowInstId , pgeTask . getWorkflowInstanceId ( ) )
assertTrue ( Tools . versionAfterPacemaker ( host ) )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the implicit command link" ) )
Assert . assertEquals ( 10 , rowKeys . size ( ) )
assertFalse ( "valid input but exceeds bounds " + field . getText ( ) , cellEditorStrict . stopCellEditing ( ) )
Assert . assertNotNull ( tested . newRequest ( ) )
assertEquals ( "Hello World!" , result )
assertEquals ( 1 , branch_conditions . size ( ) )
assertTrue ( previewElement . getColorFieldContainsErrors ( ) )
assertTrue ( writeOnlyProp . isWriteOnly ( ) )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( mockList , testList )
Assert . assertTrue ( charset . equals ( CharsetUtil . getCharset ( charsetIndex ) ) )
assertThat ( "image id" , sut . getImageId ( ) , is ( equalTo ( imageId ) ) )
Assert . assertEquals ( 0 , serverTask . getTaskIds ( ) . length )
assertTrue ( errors . isEmpty ( ) )
assertEquals ( PRECONDITION_FAILED . getStatusCode ( ) , getStatus ( request ) )
assertEquals ( "((a + b).toLowerCase() && b + c).toLowerCase()" , str )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE ((DEPTH(nodes) + DEPTH(nodes)) = 3" ) )
assertThat ( cdtos . size ( ) , is ( 2 ) )
Assert . assertTrue ( server . isTerminated ( ) )
assertEquals ( amount , all . size ( ) )
assertNextRequestIsCreateWorkspace ( "something" , CreateConflictBehavior . DO_NOT_CREATE )
assertNotNull ( format . getTokenizer ( ) )
assertEquals ( policy , policy2 )
assertEquals ( expectedFunction , _Function ( "addTwo" , "x" , asList ( _Arg ( _Int ( ) , "y" ) ) , asList ( _Return ( _Add ( _Variable ( "x" ) , _Variable ( "y" ) ) ) ) )
assertExtractedTextHasBeenIndexed ( "select [jcr:path] from [nt:resource] as res where contains(res.*, 'ModeShape supports')" )
Assert . assertTrue ( infEx . isType ( DummyException . class ) )
assertEquals ( "" , result )
assertEquals ( 0 , result . getTotalHits ( ) )
Assert . assertEquals ( 637 , nodeCount )
assertEquals ( expectedSql , actualQuery )
assertEquals ( "some/slashed/ClassName.class" , DotUtils . removeDotClassPrefix ( dotClass ) )
assertNotNull ( deviceFlowRegistry )
Assert . assertEquals ( "did not get the default number of threads" , 3 , jargonProperties . getMaxParallelThreads ( ) )
Assert . assertNotNull ( userBean )
assertEquals ( ImmutableVariantScore . of ( ReadType . DEL , 4 ) , SamRecordScoring . getVariantScore ( shortAlt , DEL ) )
assertEquals ( testData . length - 2 , cfis . available ( ) )
assertEquals ( generateOutput ( "
assertEquals ( "i(3,9)" , s . getPickupLocation ( ) . getId ( ) )
assertTrue ( folder . getProgressState ( ) == ProgressState . FAILED )
assertEquals ( 0 , filter . filter ( aciContext , null , null ) . size ( ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "le,salon,cuisine,cuisine" , this . realiser . realise ( this . realiser ) . getRealisation ( ) )
assertEquals ( "The forty-month period, which is the baseline period, is the intended period, and the intended parties, are the intended parties, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum, and the intended forum,
assertContainsRegex ( WHERE + OPEN_CURLY + var ( "s" ) + SPACE + ":P" + SPACE + ":O" + OPT_SPACE + CLOSE_CURLY , query )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertSame ( cachedDataSetProperty , dataSetProperty )
assertEquals ( "Edit must be called" , true , cache . isSelected ( tRow , tCol ) )
Assert . assertEquals ( expected , pass . concretizeCell ( term ) )
assertNull ( instance . nullableStringList ( ) )
assertEquals ( new Statistics ( 0 , 0 , 1 , 0 ) , spec . stats ( ) )
assertEquals ( URI . create ( expected ) , uri )
assertFalse ( server . getProject ( "url" ) . equals ( project ) )
assertEquals ( inVivo , m . getGlyph ( ) )
assertEquals ( "[[?��??�� ?��? > [RIGHT]]]" , errors . toString ( ) )
Assert . assertEquals ( expectedEventBo , actualEventBo )
AsserterWithLazyInitialisationAlgorithm . ASSERTER . assertImmutable ( klasse )
Assert . assertTrue ( "cancelLocation message (opCode 3, TCAP Begin) should be blocked by Cat2" , ! sigfw . unitTestingFlags_sendSccpMessage )
assertEquals ( "" , result )
assertEquals ( "" + i + " " + codec . lineLength , b [ 1 ] . length , codec . getEncodedLength ( b [ 0 ] ) )
assertEquals ( Type . TSetIpAddress , processor . getType ( ) )
Assert . assertEquals ( "a" , stringAppender . toString ( ) )
assertEquals ( "There should be 0 chart data results" , 0 , chartDataList . size ( ) )
Assert . assertEquals ( "Should retrieve field name" , fieldName , node . getFieldName ( ) )
Assert . assertEquals ( "Kermit" , result )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . BEGIN )
assertEquals ( "Value is not correct" , "2000-1-5" , value . toString ( ) )
Assert . assertEquals ( NON_EMPTY_FINGERPRINT , managedRangerAuthorizer . getFingerprint ( ) )
result . assertIsSatisfied ( )
assertEquals ( "hello not interrupted" , 0 , totalLines )
assertEquals ( "Hello World" , obj )
Assert . assertTrue ( result . getBigIntValue ( ) == 7 )
assertArrayEquals ( testArray , b )
assertThat ( runtimeOptions . getGlue ( ) , contains ( uri ( "classpath:/app/features/user/registration" ) , uri ( "classpath:/app/features/hooks" ) ) )
assertThat ( roundtrippedRecord , equalTo ( record ) )
assertThat ( mockMetrics . getMessageReceivedBytes ( ) , is ( 43121L ) )
assertEquals ( "select entity_0.name from Entity entity_0 group by entity_0.name having sum(entity_0.integerField) > :function_1 and ( entity_0.name = :name_2 or entity_0.name = :name_3 )" , query )
assertEquals ( "<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>" , doc . html ( ) )
assertSame ( offered . get ( ) , request )
assertEquals ( "do some work" , outputVal )
assertScoreAndParse ( content , null , 1 )
assertNotNull ( combinationGenerator )
assertEquals ( expected , error . toString ( ) )
assertThat ( serverHello . getClientCertificateType ( ) , is ( CertificateType . RAW_PUBLIC_KEY ) )
Assert . fail ( "Should have thrown an exception" )
assertNull ( presenter . getValue ( ) )
Assert . assertFalse ( errors . hasFieldErrors ( ) )
assertTrue ( doc . getDescendants ( ) . isEmpty ( ) )
Assert . assertEquals ( c . getMinimum ( Calendar . DAY_OF_MONTH ) , getString ( c ) )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertEquals ( "Should respond with 200" , 200 , responseContext . getStatus ( ) )
assertSet ( queryReturns ( october15Entity , november1Entity ) , whenFilteringBy ( IN , Arrays . asList ( october15 , november1 ) ) )
Assert . assertEquals ( jsonString , "[{\\"name\\":\\"涓���\\",\\"id\\":1,\\"brithDate\\":null,\\"money\\":1.1},{\\"name\\":\\"涓���1\\",\\"id\\":2,\\"brithDate\\":null,\\"money\\":2.1}]" )
Assert . assertEquals ( 10L , recoveryCallback . call ( ) . longValue ( ) )
assertEquals ( expectedKey , bucketKeyWithFileName )
assertEquals ( 1 , stmts . size ( ) )
assertEquals ( " WHERE ((\\"NAME\\" LIKE ? AND (\\"AGE\\" < ? OR \\"AGE\\" > ?)) OR \\"NAME\\" = ?)" , QueryBuilder . getWhereStringForFilters ( filters , sh ) )
assertEquals ( "Wrong result" , "3,4" , evaluator . asString ( expression ) )
assertNotNull ( security )
assertThat ( toUnqualifiedVersionlessIds ( myPatientDao . search ( params ) ) , containsInAnyOrder ( id1 ) )
assertThat ( query . count ( ) , is ( 0L ) )
assertTrue ( 1.28 == deserialize . readDouble ( ) )
assertThat ( str , endsWith ( "\\0" ) )
Assert . assertTrue ( retValue . intValue ( ) == 2 )
assertEquals ( 1 , v8Int32Array . length ( ) )
assertThat ( configuration . getRunInterval ( ) , is ( 20 ) )
assertions . containsOnly ( entries )
assertEquals ( jobBuilderCopy . getInputColumns ( ) . size ( ) , 1 )
Assert . assertSame ( bitmap , ic . getBitmap ( ) )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , 86400 ) , is ( false ) )
assertFalse ( isEqual )
Assert . assertTrue ( "odd, user 7 didn't get user 8's address" , found )
assertFalse ( parser . gotAnyHeader ( ) )
assertPageIsVisible ( root , "child1" )
assertEquals ( ( short ) 89 , x . value )
assertEquals ( "Conversion did not match" , value , to )
assertOut ( "public class A implements IA {\\n}" )
assertEquals ( TargetType . PILLAR , target . getType ( ) )
assertEquals ( PRECONDITION_FAILED , response . getStatusInfo ( ) )
assertNoProblems ( )
Assert . assertEquals ( 4 * 3 , result , 0 )
assertEquals ( set ( "b" , "c" ) , redis . sinter ( "key1" , "key2" , "key3" ) )
assertTrue ( match )
assertEquals ( "CLM" , cf . getSegment ( ) )
assertEquals ( 1 , maxConsequetiveOnes . findMaxConsecutiveOnes ( grid ) )
assertEquals ( "Cardenality of cartesian product is wrong" , 2 , cartesianResult . size ( ) )
assertTrue ( true )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" + "456" ) . getValue ( ) )
assertEquals ( 0xffffffffL , getUnsignedInt ( v1 , 0 ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( 1 , violations . size ( ) )
assertExpectedProtectedPorts ( dai )
assertHasFooFieldAndConstructor ( dst . toClass ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertResultSet ( res )
assertEquals ( "Description" , entity . getDescription ( ) )
assertEquals ( "fast" , value . asIs ( ) )
assertTrue ( "Directory not created" , pdp . createDir ( attr ) )
assertThat ( CalendarPeriod . onWeeks ( ) . parse ( "11/2017 �� 02/2020" , f ) , is ( expected ) )
Assert . assertEquals ( "The <word content='fox'>jumps over</word>" , hl . makeWellFormed ( xmlContent ) )
Assert . assertEquals ( 1 , vertexes . size ( ) )
Assert . assertEquals ( "result" , testBean . getResult ( ) )
Assert . assertEquals ( b1 , b2 )
assertEquals ( myBean , retrievedBean )
assertEquals ( expected , reference . get ( ) )
Assert . assertEquals ( expectedResult , result )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
assertThat ( result . toString ( ) , is ( equalTo ( " HELLO" ) ) )
assertEquals ( "RemoveOccurrences" , 1 , _fastTable . size ( ) )
assertEquals ( "Wrong exception thrown by constructor" , cause , e . getCause ( ) )
assertNotNull ( sslContext )
assertThat ( dest . aaa , is ( nullValue ( ) ) )
assertTrue ( hasLock )
Assert . assertNotNull ( processInstance )
assertTrue ( book . getIsbn ( ) . startsWith ( "132" ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( "CFBundleVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_VERSION ) )
assertTrue ( success )
assertEquals ( comment . getDeletionDate ( ) , commentFromDb . getDeletionDate ( ) )
Assert . assertFalse ( "ticket should not be in use" , inUse )
assertThat ( eventListener . captured ( actor , type ) , instanceOf ( PreDeleteEvent . class ) )
Assert . assertTrue ( "Failed to logout with pcClient" , pcClient . logout ( ) )
assertNull ( "Base value is not properly parsed" , mapper . base ( "test" , null ) )
assertNotNull ( galaxyHistory . libraryDatasetToHistory ( dataset , createdHistory ) )
assertEquals ( expResult , result )
assertBulkInsert ( data , expected )
Assert . assertEquals ( "<input type=\\"checkbox\\" id=\\"w1\\" name=\\"w1\\" value=\\"true\\" toggleDim=\\"hatColors\\"/><label for=\\"w1\\">Has a hat?</label><input type=\\"hidden\\" name=\\"_w1\\"/>" , cw . generateHtml ( context ) )
Assert . assertEquals ( RoleOperation . VIEW , grantDesc . getOperation ( ) )
assertThat ( type . matching ( Other . class ) , equalTo ( converted ( Other . class , Example . class ) ) )
assertEquals ( "addArgument() returns the argument" , "foo" , command . getArguments ( ) . get ( 0 ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertThat ( query . asSingleEntity ( ) , is ( notNullValue ( ) ) )
assertEquals ( "There should be no ledger" , 0 , counter )
assertFeatureValues ( expected , testQuery , testText , getChain ( new OrderedSequentialPairsFeatureExtractor ( 1 ) ) )
assertTrue ( evaluator . evaluatePerm ( indices , null , InetAddress . getByName ( "127.0.0.1" ) , null ) == PermLevel . ALL )
assertEquals ( resolvedClassPaths . size ( ) , 1 )
assertEquals ( gelfSender . getLastMessage ( ) . getAdditonalFields ( ) . get ( "logger" ) , CLASS_NAME )
assertEquals ( "xpto" , parsedObject . getLazyMapPojo ( ) . get ( id ( BasicObject . class , 1l ) ) . getStringValue ( ) )
Assert . assertNotNull ( victim . create ( ) )
assertTrue ( false )
assertTrue ( result )
assertEquals ( response , actualResponse )
this . context . assertIsSatisfied ( )
assertEquals ( "to@domain.com" , emailer . getProperties ( ) . getProperty ( "to" ) )
assertThat ( result , is ( response ) )
assertThat ( internalMap . keySet ( ) , hasSize ( 0 ) )
assertEquals ( "TestPassword" , envVars . get ( "TestUser" ) , envVars . get ( "TestPassword" ) )
assertTrue ( result . isResultOK ( ) )
assertEquals ( transport , svc . getHttpTransport ( ) )
assertThat ( result , is ( false ) )
assertParseFileOk ( fileName )
assertEquals ( it . next ( ) . getName ( ) , "h枚chstBetrag" )
Assert . assertEquals ( contextX , test . context )
assertEquals ( ComparatorStepResult . Status . PASSED , result . getStatus ( ) )
Assert . assertEquals ( "freed bucket" , Sets . newHashSet ( 1L , 2L ) , testMeta . managedState . freedBuckets )
result . assertIsSatisfied ( )
assertEquals ( expected , actual )
assertEquals ( second . getSqlType ( ) , "int" )
assertEquals ( expected , expression . toString ( ) )
Assert . fail ( )
assertTrue ( AutnumUtil . isValidAutnum ( validAutnum ) )
assertEquals ( "should contain bob" , "bob" , users . get ( 0 ) . getText ( ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
Assert . assertEquals ( "barfoo" , form . getItem ( ) . getFoobar ( ) )
Assert . fail ( "expected exception for non describe query." )
assertEquals ( expected , actual )
assertEquals ( 37 , actual )
Assert . assertEquals ( eventCount , event . getTouchCount ( ) )
assertEquals ( true , check . isRequired ( ) )
assertEquals ( "The numeric value " + encodeValue + " should be encoded to '" + expected + "'" , expected , alphaNumericCodec . encode ( encodeValue ++ ) )
Assert . assertEquals ( t1 , t2 )
assertEquals ( "[{\\"value\\":\\"A test summary\\",\\"lang\\":\\"EN\\"},{\\"value\\":\\"A second test summary\\",\\"lang\\":\\"JA\\"}]" , toJson ( summaries ) )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert . assertTrue ( cursor . atEnd ( ) )
assertNotNull ( op )
Assert . assertTrue ( irodsFile . exists ( ) )
assertEquals ( 15 , map . size ( ) )
assertThat ( inds , containsInAnyOrder ( indA , indB ) )
assertEquals ( expected , actual )
assertThat ( initiativeInfo . isVotingStarted ( TODAY ) , is ( false ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
arrays . assertEndsWith ( description , actual , null )
assertTrue ( action )
assertTrue ( latch . getCount ( ) == 0 )
assertThat ( args , contains ( "network" , "list" , "list" , "list" , "list" , "list" ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( path , obs . getFormFieldPath ( ) )
assertEquals ( expected , calls . toString ( ) )
assertThat ( results , samePaths ( new File ( root , "a.txt" ) , new File ( root , "b.txt" ) , new File ( root , "c.txt" ) ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertEquals ( "An ���awesome ���string with a few ���emojis!" , result )
Assert . assertEquals ( "default-value" , ec . getValue ( ) )
assertNotNull ( processInstanceId )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
assertThat ( found , equalTo ( 1 ) )
assertEquals ( PREVIOUS_RESPONSE , argumentCaptor . getValue ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertEquals ( xmlEsperado , referenciada . toString ( ) )
assertEquals ( ids , session . from ( var ) . list ( var . id ) )
assertTrue ( ( ( BooleanType ) eval . get ( 0 ) ) . getValue ( ) )
assertEquals ( vr . getValidity ( ) , Validity . INVALID )
Assert . isTrue ( results . size ( ) == 1 )
assertEquals ( expected , actual )
Assert . assertNotNull ( facet )
assertEquals ( PASSED_PAWN_BOOST + DOUBLED_PAWN_HANDICAP , score )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( BGPError . CEASE , e . getError ( ) )
assertThat ( event . getRecipients ( ) , contains ( recipients . get ( 0 ) ) )
assertNotNull ( ds )
assertNotNull ( result )
assertResponse ( "method withoutParameters was invoked" , response )
assertTrue ( population . size ( ) >= 98 )
assertTrue ( sut . isWhitespace ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertThat ( resolver . replace ( "${m1}, ${m2}, ${m3}!" , true ) , is ( "Hello1, Hello2, Hello3!" ) )
assertFalse ( schema1 . match ( schema2 ) )
Assert . assertThat ( matchingArtifacts . isEmpty ( ) , Matchers . is ( true ) )
Assert . assertNotNull ( rpcServiceMetaInfo )
Assert . assertEquals ( 13 , collector . getValue ( ) . intValue ( ) )
assertThat ( transform , hasItem ( foo ( "Lorem ipsum" ) ) )
assertEquals ( map . size ( ) , n * nThreads )
assertEquals ( expected , actual )
assertTrue ( result )
assertEquals ( d1 , d2 )
assertSame ( null , immediateValue . getValue ( ) )
assertions . isEqualTo ( expected )
assertTrue ( aRes . getPath ( ) . contains ( "test" ) )
Assert . assertFalse ( errors . hasErrors ( ) )
Assert . assertEquals ( jdkHand , acHand )
assertEquals ( false , start )
assertEquals ( content , 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "MyRepositoryName" , RepoAndTableUtil . getOwningRepository ( tableDescriptor ) )
assertThrows ( InjectorException . class , ( ) -> new DefaultGraphQLRequest ( request , "http://example.com" , "dummy" ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertThat ( bc . components ( ) , hasSize ( 1 ) )
assertEquals ( sb . toString ( ) , stmtb . prepareStatementString ( ) )
assertEquals ( 0 , hits . totalHits )
context . assertIsSatisfied ( )
assertEquals ( 5 , handler . getMessageType ( ) )
assertNotNull ( Message . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "IMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Hello World" , resp )
assertEquals ( expected , actual )
assertThat ( result , is ( true ) )
assertSame ( "Wrong constructor arguments" , args , cd . getConstructorArgs ( ) )
assertTrue ( "TreeGrid should be wider than tree" , tree . getTableWrapper ( ) . getSize ( ) . getWidth ( ) < tree . getRow ( 0 ) . getSize ( ) . getWidth ( ) )
assertEquals ( "XAU_USD" , currencyPair )
assertEquals ( 0 , errorReport . getTotalErrors ( ) )
assertThat ( offset . canonical ( ) , is ( "UTC+02:00" ) )
assertTrue ( i1 . contains ( i1 ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 2 , ( ( Number ) o ) . intValue ( ) )
assertEquals ( Long . valueOf ( - 1L ) , myTestInstance . deleteAsync ( doc , update ) . get ( ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( resolver . resolve ( "d" ) , resolver . resolve ( "c" ) )
assertThat ( referencableDaoService . get ( ConfigRefEnum . ACHIEVEMENTS_REFRESH_RATE ) . getValue ( ) , is ( "1" ) )
assertEquals ( money , new Money ( 100_000_000L , "GBP" ) )
assertThat ( connection2 , not ( is ( connection ) ) )
assertEquals ( 400 , cr . getStatus ( ) )
assertTrue ( builder instanceof NettyChannelBuilder )
assertEquals ( "((?:\\\\Qabc\\\\E)*)" , p . toString ( ) )
assertNotNull ( mapping )
assertEquals ( OWLClass . class , clazz )
assertEquals ( mockServerConfig , result )
assertEquals ( p . toString ( ) , perOS ( "org/raml/jaxrs/parser/source/LocalClass.java" ) )
assertEquals ( "Output order: " + outputOrder , exp , out )
assertEquals ( ResultCodeEnum . INVALID_CREDENTIALS , resp . getLdapResult ( ) . getResultCode ( ) )
assertEquals ( "value1" , container1 . stringBuilder . toString ( ) )
assertEquals ( "MEX NOMBRE || ' ' || APELLIDO_PATERNO || ' ' || APELLIDO_MATERNO NOMBRE " , instance . getNombre ( ) )
Assert . assertEquals ( "test" , rdr . readLine ( ) )
assertEquals ( "Wrong number of URI references found" , 0 , result . size ( ) )
assertEquals ( "xx%c3%aaxx" , result )
assertIsSemver ( semver , version , 1 , null , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
assertThat ( driver . findElement ( By . id ( "userIdMDC" ) ) . getText ( ) , is ( "user1" ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( comparison1 == 0 )
assertTrue ( fixture . eof ( ) )
assertNotNull ( doc )
assertEquals ( "Ls.getReplacementCommand" , expected , actual )
Assert . assertTrue ( out . contains ( "viewId=5" ) )
assertFalse ( testResult )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertThat ( cargo . getCommandsRun ( ) , contains ( "cargo test dirmod:: --jobs 1 --verbose --nocapture" ) )
assertEquals ( "��   ��\\n" + "��   ��\\n" + "��   ��\\n" + "�尖�衡�烩�烩��\\n" + "��   ��\\n" + "�尖�衡�� ��\\n" + "�尖�衡�� ��\\n" )
assertTrue ( isThrown )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del)" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( ( byte ) 34 , s . m0_0 ( ) )
assertEquals ( expResult , result )
Assert . fail ( "RuntimeException should be thrown!" )
assertEquals ( "abstrACT should be 'foobarbaz'" , ABSTRACT , ch . read ( ) )
assertThat ( getClientConnectionPoolStats ( sut ) . getLeased ( ) , equalTo ( 0 ) )
assertEquals ( "1" , html )
Assert . assertTrue ( containerResolver . isContainer ( ) )
assertEquals ( authors , test . getAuthors ( ) )
assertTrue ( result )
assertMockEndpointsSatisfied ( )
assertProperty ( "explicitMethod" , false , false , String . class , false , property )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 1f ) )
assertTrue ( partitionManager . getPartitions ( ) . isEmpty ( ) )
assertFalse ( splitBrainProtectionFunction . apply ( members ) )
assertEquals ( expected , actual )
assertEquals ( "Expected response not seen." , "Hi There!" , response )
Assert . assertThat ( count . get ( ) , Is . is ( 3 ) )
assertEquals ( "" , value )
assertEquals ( "redis://127.0.0.1:6379" , config . getAddress ( ) )
assertEquals ( field . isRequired ( ) , required )
assertEquals ( TypeInfoFactory . getMapTypeInfo ( TypeInfoCreator . createString ( ) , TypeInfoCreator . createDouble ( ) ) , orcType )
assertEquals ( context , cache . get ( "foo" ) )
assertEquals (rpm1 ,rpm2 )
Assert . assertEquals ( 100 , value )
assertEquals ( writeData , response . toString ( Charset . defaultCharset ( ) ) )
assertHasModifier ( JMod . PUBLIC , constructor . getModifiers ( ) , "public" )
Assert . assertEquals ( url . toExternalForm ( ) , filterResult )
assertNotNull ( result )
assertTrue ( MVEL . evalToBoolean ( "d.age == val" , m ) )
assertViewName ( mav , "redirect:/topics/1" )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  ok " ) )
assertEquals ( asList ( debug ( mdcValues , marker , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
assertTrue ( getTaint ( bc . imei ) != 0 )
assertEquals ( "coolValue02" , manager . toString ( ) )
Assert . assertEquals ( "unexpected url composed for fetching scheduler info" , EXPECTED_SCHEDULER_INFO_URL , resolvedUrl )
assertThat ( result . statusCode , is ( Response . BAD_REQUEST ) )
assertEquals ( testPlatforms . size ( ) , pValues . size ( ) )
assertThat ( requestXml , equalTo ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\" ?>\\n" + "\\n" + "<wps:Execute service=\\"WPS\\"\\n" + "             version=\\"1.0.0\\"\\n" + "             xmlns:wps=\\"http://www.opengis.net/wps/1.0.0\\"\\n" + "              xmlns:ows=\\"http://www.opengis.net/ows/1.1\\"\\n" + "                xmlns:xlink=\\"http://www.opengis.net/wps/1.0.0 ogc/wps/1.0.0/wpsExecute_request.xsd\\">\\n  <ows:Identifier>L2Plus</ows:Identifier>\\n" + "  <wps:DataInputs>\\n" + "    <ows:Identifier>userName</ows:Identifier>\\n" + "    <ows:Title/>\\n" + "    <ows:DataInputs>\\n" + "     <ows:DataOutputs>\\n" + "      <ows:DataInputs>\\n" + "        <ows:Identifier>userName</ows:Identifier>\\n" + "
Assert . assertNotNull ( url )
Assert . assertTrue ( "Expected zero but it was: " + actualValue , actualValue == 0 )
assertEquals ( "Betty Ford" , u . getName ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertTrue ( threw )
assertTrue ( auths . isEmpty ( ) )
assertEquals ( ( short ) 0x0009 , s . m0_0 ( ) )
assertThat ( errors , not ( hasFieldErrors ( "prefix" ) ) )
assertThat ( TestI18n . testMessage . id ( ) , is ( "Test ID" ) )
assertInjectsCollectionsOfMocks ( exampleTest )
assertThat ( attribute , is ( notNullValue ( ) ) )
assertThat ( sb . toString ( ) , is ( "alp://ppin/" + pin + "/" + value + new String ( proto . getSeparator ( ) ) ) )
assertEquals ( metaStore , manager . getNamedCluster ( "config-1" ) )
assertEquals ( "bla" , r . getPattern ( ) )
assertEquals ( expectedArg , parsedArg )
assertThat ( TaskNode . getRunningTaskNodePath ( nodePath ) , is ( "/state/running/test_job/" + nodePath ) )
assertThat ( directInvoker , instanceOf ( DirectMessageHandlerInvoker . class ) )
rule . assertScenarioEnded ( )
assertThat ( statusCodeOf ( httpResponse ) , is ( HttpServletResponse . SC_UNAUTHORIZED ) )
assertFalse ( result . hasErrors ( ) )
Assert . assertEquals ( toArray ( "json" , "aaa" ) , merged )
assertEquals ( "Data::datatype::Integer" , results . get ( 0 ) )
assertNotNull ( sessionImpl )
Assert . assertNotNull ( setter )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" ) . getValue ( ) )
assertFalse ( messages . contains ( "attribute paths.'/people'(get)[name].maxLength is unexpected" ) )
assertEquals ( localDate , normalizer . convert ( timestamp ) )
NVAssert . assertEquals ( EXPECTED_NV_RESPONSE , nvResponse )
Assert . assertNull ( cardLabelRepository . findLabel ( noRead . getProjectId ( ) , noRead . getLabelDomain ( ) ) )
assertEquals ( "Matched code set" , UTF16_ID , CodeSet . getMatchingCodeSet ( local , remote , false ) . getId ( ) )
assertNull ( result )
assertTrue ( millis == null )
assertTrue ( converter . canConvert ( LikeAction . class ) )
Assert . assertEquals ( 2 , success . get ( ) )
assertEquals ( "Buffer size is correct" , bufferSize , outputBuffer . size ( ) )
assertTrue ( Arrays . equals ( key . getPubKey ( ) , keyOnion ) )
assertEquals ( "Task in subprocess" , task . getName ( ) )
assertTrue ( latch . getCount ( ) == 0 )
assertThat ( target . get ( 66L ) , is ( new GregorianCalendar ( 2013 , Calendar . AUGUST , 16 ) . getTime ( ) ) )
Assert . assertEquals ( answer , 5 )
assertEquals ( "1 secolo fa" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 101 ) ) )
assertEquals ( "TRACE" , trace . toString ( ) )
Assert . assertNotNull ( info )
Assert . assertEquals ( filter . filter ( spanEventBo ) , SpanEventFilter . ACCEPT )
assertMockEndpointsSatisfied ( )
assertArrayEquals ( expected , Proto . build_fixed_int ( 1 ) )
MatcherAssert . assertThat ( PodHelper . getPodDomainUid ( pod ) , equalTo ( "domain1" ) )
Assert . assertEquals ( key , config . getShardedPool ( ) )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
Assert . assertEquals ( 0 , ret )
assertEquals ( filterResult , result )
Assert . assertEquals ( m1 , m0 )
assertEquals ( message . serialize ( ) , jsonFixture ( "fixtures/message-complete.json" ) )
Assert . assertEquals ( 100 , janus . getServer ( ) . getRefreshIntervalInMillis ( ) )
Assert . assertEquals ( "{\\"myString\\":\\"Some text\\",\\"myByteProperty\\":1,\\"myShortProperty\\":2,\\"myIntegerProperty\\":2,\\"myFloatProperty\\":3.0,\\"myLongProperty\\":2,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUIDProperty\\":19,\\"myUUID
assertEquals ( expected , actualQuery )
assertThat ( target . request ( ) , is ( nullValue ( ) ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response5 . getResponseObject ( ) )
assertFalse ( "Button click should not be handled" , isElementPresent ( By . className ( "v-button-out" ) ) )
assertThat ( actualFileInputs , IsIterableContainingInAnyOrder . containsInAnyOrder ( expectedFileInput1 , expectedFileInput2 ) )
assertThat ( attack . getRequestContent ( ) , notNullValue ( ) )
assertNotEquals ( frameData1 , frameData2 )
assertEquals ( "[[Sarah], [Rocky], [Total]]" , results . toString ( ) )
assertThat ( form , is ( notNullValue ( ) ) )
Assert . assertNull ( st )
Assert . assertEquals ( 3 , getInteresadoManager ( ) . getAll ( ) . size ( ) )
assertEquals ( "PONG" , cl . ping ( "PONG" ) )
Assert . assertNull ( "should not be a description" , actual )
assertNotNull ( dispatch )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 0 ) , both ( hasEntry ( "resourceVersion" , Integer . toString ( INITIAL_RESOURCE_VERSION ) ) ) . and ( hasEntry ( "labelSelector" , LabelConstants . CREATEDBYOPERATOR_LABEL ) ) )
assertTrue ( "Custom content model " + customContentModelQName . toString ( ) + " is present" , allContentModels . contains ( customContentModelQName ) )
assertTrue ( "Expected HostPost" , obj instanceof Host )
assertThat ( buf . toString ( ) , is ( equalTo ( "\\t\\tfoo;\\r\\n" ) ) )
assertEquals ( expected , fromJson )
assertNotNull ( resource )
Assert . assertEquals ( sql , expected . replaceAll ( "#ALIAS#" , EntityMetaDataCache . getMetaData ( EntityJoined . class ) . getAlias ( ) ) )
assertEquals ( "ID = userId" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertThat ( result , is ( 2 ) )
assertFalse ( filter . allow ( event , listener ) )
assertEquals ( "custom " , html )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertTrue ( appender . getEvents ( ) . size ( ) == 0 )
assertEquals ( actualJSON , expectedJSON )
assertOut ( "/**\\n * @param {number} bar\\n * @param {string} baz\\n * @param {Array} goo\\n */\\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(bar, baz, goo) {\\n}" )
assertThat ( client . isUsingInflector ( ) , is ( true ) )
assertEquals ( new BigDecimal ( "0.60" ) , max )
assertThat ( page . iframe . getSourcePath ( ) , is ( expectedPath ) )
assertThat ( a , equalTo ( a1 ) )
assertEquals ( ( Integer ) 3 , i )
Assert . assertEquals ( "EXECUTE ERROR:" , sqltrue , sqlnew )
assertEquals ( 1 , holder . getId ( ) )
assertEquals ( "{0=23, 1=23, 2=23, 3=23, 4=23, 5=23, 6=23, 7=23, 8=23, 9=23, 10=23, 11=23, 12=23, 13=23, 14=23, 15=23, 16=23, 17=23, 18=23, 19=23, 20=23, 23=23, 24=23, 25=23, 26=23, 27=23, 28=23, 29=23, 30=23, 31=23, 32=23, 33=23, 34=23, 35=23, 38=23, 39=23, 40=23, 41=23, 42=23, 43=23, 44=23, 45=23, 46=23, 47=23, 48=23, 49=23, 50=23, 51=23, 52=23, 53=23, 54=23, 55=23, 56=23, 57=23, 58=23, 59=23, 70=23, 56=23, 69=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23, 70=23
assertEquals ( "* :123: Arthur Dent\\n" + "    @alias http://example.org/ArthurDent\\n" , toWikiText ( note ) )
assertTrue ( xmas . before ( newYearsDay ) )
Assert . assertEquals ( "http://localhost:8080/services" , url )
assertNotNull ( factory )
assertEquals ( expected , actual )
assertEquals ( "bar" , connection . read ( "foo" + LINE_SEPARATOR + "bar" ) )
assertTrue ( entity . equals ( entity2 ) )
visitor . assertSatisfied ( "checking state contains two branches" , _rootComposite , transition )
assertFalse ( dao . isSecretAnswer ( userJoe , SECRET_ANSWER ) )
assertFalse ( xAttrsEnabled )
assertTrue ( result . isEmpty ( ) )
assertEquals ( "1" , grid . getCell ( 1 , 0 ) . getText ( ) )
assertEquals ( "Unexpected state class" , TreeTableState . class , state . getClass ( ) )
assertThat ( query . hasOption ( QueryFlag . FILTER_TAG_INCLUDE ) , is ( true ) )
Assert . assertTrue ( "claims topics should merge when they have same topic name" , MergeUtils . shouldMerge ( t1 , t2 ) )
assertEquals ( "" , html )
assertEquals ( "dois reais" , actual )
assertSurplus ( ref , 3 )
assertEquals ( "test" , samlAssertion . getIssuerKeyName ( ) )
assertNotNull ( settings )
assertNotNull ( result )
assertThat ( instance1 . hashCode ( ) , not ( equalTo ( instance2 . hashCode ( ) ) ) )
JSONAssert . assertEquals ( expected , flowSnapshotsJson , false )
assertEquals ( cs , dto2 . toString ( ) )
assertEquals ( 10 , rowKeys . size ( ) )
assertEquals ( "Subscription A has not been subscribed to Subscription B" , error )
assertThat ( domain . getReplicaCount ( "default" ) , equalTo ( 2 ) )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
Assert . assertTrue ( actual . equals ( expected ) )
Assert . fail ( )
assertEquals ( expectedType , TalendType . convertFromAvro ( fieldSchema ) )
Assert . assertEquals ( "html" , title )
Assert . assertEquals ( "test" , testScopePath . getRootScope ( ) . getName ( ) )
assertNoViolations ( constraintViolations )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertFalse ( collection . isEmpty ( ) )
assertEquals ( Arrays . asList ( "mnt-by" , "mnt-ref" ) , query . getAttributeTypes ( ) )
assertOut ( "var /** @type {ArgumentError} */ a = new ArgumentError()" )
assertThat ( wrapper . retrieveModelVersion ( ) , is ( "1.0.0" ) )
assertEquals ( - 1 , stream . skip ( 1 ) )
assertOperation ( ( ) -> roleClient . createProject ( orgUnit , name , project ) )
assertThat ( query . getParameters ( ) . size ( ) , is ( 1 ) )
assertNull ( StringCompressionUtil . unpackAndDecompress ( testChars ) )
assertEquals ( 0 , store . getAll ( ) . size ( ) )
assertTrue ( hasReset )
assertEquals ( expected , actual )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( expectedResult , result )
assertTrue ( true )
assertEquals ( "text" , label )
Assert . fail ( "Should have failed" )
assertEquals ( 23583599999L , q . getLastMillisecond ( ) )
assertEquals ( "         \\n" + "         \\n" + "1.        \\n" , textTableFormatter . format ( ) )
assertEquals ( null , handleResponse )
Assert . assertNotNull ( dbRangerService )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 299.0 , 299.0 )
assertTrue ( contains )
Assert . assertEquals ( "test case " + testCase . getKey ( ) + " failed." , testCase . getValue ( ) . intValue ( ) , magnitudeResult )
assertNotNull ( RatePlan . reader ( "WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\\"foo\\"" , affordance . toString ( ) )
assertEquals ( o1 , o2 )
Assert . assertTrue ( ks == ks2 )
Assert . fail ( "Expected GenericConnectorException" )
assertions . isNotGreaterThan ( expected )
assertEquals ( "a b" , result )
assertSame ( expected , result )
assertEquals ( "(x INT)\\n" , found )
assertEquals ( "23" , proxy . getAddress ( ) . getValue ( ) )
Assert . fail ( "Invalid input" )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( dbObject . containsKey ( "_aggregates" ) , is ( true ) )
assertTrue ( latch . await ( 15000 , TimeUnit . SECONDS ) )
assertEquals ( "incorrect size" , SIZE , Struct . size ( new LongPadding ( ) ) )
Assert . assertArrayEquals ( hammingWindow_EXPECTED , hammingWindow_ACTUAL , DELTA )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertThat ( editor . getValue ( ) , is ( ( Object ) Credential . builder ( ) . userName ( "user" ) . setPassword ( "password" . toCharArray ( ) ) . database ( "db" ) . kerberos ( ) . build ( ) ) )
assertFalse ( game . isGameOver ( ) )
assertNotNull ( m )
assertEquals ( "TextBuilder String Is 1.0" , _textBuilder . toString ( ) , "1.0" )
assertEquals ( "Count of customer" , 2 , res )
assertEquals ( r4 , mostRelevantResource )
assertEquals ( expectedLines , seenLines )
assertThat ( result . fullName ( ) , is ( Long . class . getName ( ) ) )
assertEquals ( expected , result )
assertTrue ( this . containsAll ( expectedResult , actualResult ) )
assertEquals ( str , tuple . getValue1 ( ) )
Assert . assertEquals ( createObjectNode ( "name" , "testperson" , "age" , 30 , "birthday" , "01.01.2000" ) , result )
assertEquals ( "{}" , result )
assertTrue ( "nodeExists returned true when there blatantly is not a node there" , store . nodeExists ( "node1" ) )
assertTrue ( violation )
assertEquals ( "env.value" , value )
assertEquals ( "failure: " + translated , ExpressionFactory . exp ( "db:toArtist.artistExhibitArray.toExhibit.closingDate = $d" ) , translated )
assertEquals ( ret . getCompanyOwner ( ) , company )
assertTrue ( shardManager . isLeader ( ) )
assertEquals ( expected , actual )
assertAttribute ( lv )
assertEquals ( "Wrong number of warnings detected." , 2 , warnings . size ( ) )
assertEquals ( exist , true )
assertArrayEquals ( coeffs , actual )
Assert . assertEquals ( 3 , roles . size ( ) )
assertEquals ( Arrays . asList ( ExampleData . buildNetworkMetaAnalysisBinfo ( ) , null ) , pm . getSelectedMetaAnalyses ( ) )
assertEquals ( name , reg . get ( name ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertTrue ( "try is now containing 'hello' string" , error . isPresent ( ) )
assertEquals ( "/anything/ok/vrap" , refererResult . getReferer ( ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
Assert . assertNotNull ( resource )
assertEquals ( myMode , entry . getMode ( ) )
assertResultSet ( res )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff31_" ) )
assertEquals ( "Hello World!" , RecordPath . compile ( "/name[contains(substringAfter(., 'o'), 'h')]" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
assertThat ( mergedPredicate . getSubjectsWithThisPredicateAsList ( ) , Matchers . is ( hasBeenList ( predicate1 . getHasBeenList ( ) ) ) )
assertThat ( spy . getPropertyChangedCount ( ) , is ( 2 ) )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( String . format ( TextHelper . LOCALE_ROOT , "usage: argparse4j install [-h] [--foo FOO]%n" + "%n" + "This is sub-command of argparse4j.%n" + "%n" + "named arguments:%n" + "  -h, --help             show this help message and exit%n" + "  --bar FOO%n" + "%n" + "This is epilog of sub-command.%n" ) , parser . formatHelp ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertFalse ( lockAcquired )
assertions . isEqualTo ( expected )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( "reallocation should have been merged with first allocation" , Lists . newArrayList ( new Allocation ( control , 0 , 8 ) , new Allocation ( withLogin , 8 , 2 ) ) , allocations . getAllocations ( ) )
Assert . assertTrue ( topic instanceof PatternTopic )
assertEquals ( loremIpsum . length ( ) , result . length ( ) )
assertEquals ( "Index created: oss" , response )
runner . assertAllFlowFilesTransferred ( PutBigQuery . REL_SUCCESS , 1 )
assertNull ( originatingNode )
assertThat ( domain . isDomainHomeInImage ( ) , is ( false ) )
assertEquals ( "" , bestMessage )
Assert . assertEquals ( 9 , woffFont . getTables ( ) . size ( ) )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( query , interpretedQuery )
assertEquals ( expected , transformed )
assertTrue ( true )
assertTrue ( latch . await ( 5 , TimeUnit . SECONDS ) )
Assert . assertFalse ( pss . getEligiblePositionalParameters ( ) . hasNext ( ) )
Assert . assertEquals ( "runtime_id" , request . getSql ( ) )
assertNoMoreTokens ( )
assertThat ( "Reversed Complemented sequence not as expected" , s , is ( "GCAT" ) )
assertEquals ( "Comma" , pattern . getType ( ) )
assertEquals ( "Results should be empty!" , 0 , results . getTotalElements ( ) )
assertNotNull ( features )
assertEquals ( 12 , list . size ( ) )
Assert . assertEquals ( 1.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertTrue ( "Invalid Java version" , FileUtil . findPatternInFile ( new File ( resultFilename ) , "Using Java version: Java 1.5" ) )
assertEquals ( 1 , lineCounter )
assertEquals ( 0 , count . get ( ) )
assertEquals ( Arrays . asList ( "after-date" , "n" , "N" , "past" ) , actualOptions )
Assert . assertEquals ( NullValue . class , node . getClass ( ) )
assertEquals ( "one dollar and sixty-five cents" , actual )
assertEquals ( "jim" , retrievedEntity . getProperty ( "name" ) )
assertThat ( DataenumUtils . checkNotNull ( expected ) , is ( expected ) )
assertTrue ( "List size mismatch across lists" , words1 . equals ( words2 ) )
Assert . assertEquals ( "{" + "\\"@context\\":\\"../$metadata#ESAllPrim(32767)/PropertyString\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"First Resource - positive values\\"}" , resultString )
assertFalse ( getTestChargingStationFromRepository ( ) . isReservable ( ) )
assertOrder ( Complete . class , ConfirmCompleted . class , Close . class )
assertEquals ( 37 , tokens . size ( ) )
Assert . assertTrue ( "Generated template does not match expected XML." , XmlHelper . compareXMLStrings ( expectedXML , message ) )
assertEquals ( "foo{bar}" , pattern . getString ( ) )
assertEquals ( body . toString ( ) , "operation _timeout" )
assertEquals ( 1360204148123L , date . getTime ( ) )
assertEquals ( "Different customizations than expected" , customizations , regExCustomArrayValueComparator . customizations )
assertTrue ( psa . getLegend ( ) instanceof ProportionalPoint )
assertEquals ( Long . valueOf ( 0 ) , account . getEntityId ( ) )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( - 1 , sFsShell . run ( "mount" , "/" , ufsPath ) )
assertEquals ( "2015-08-20T20:10:00Z" , formatted )
assertTrue ( sut . writeList ( new short [ ] { 1 , 2 } ) )
assertThat ( response . getBody ( ) , equalTo ( "Hello World" ) )
assertEquals ( expected , actual )
assertEquals ( expected , output )
assertEquals ( "status" , HttpStatus . SC_BAD_REQUEST , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "" , repoURL )
assertTrue ( allStateCapitals . length == 50 )
assertEquals ( "" , result )
assertResultSet ( res )
assertEquals ( expResult , result )
assertEquals ( "(5,Foo)" , pair1 . toString ( ) )
assertThat ( target . parse ( ) , is ( false ) )
GAssert . assertEquals ( ImmutableMultimap . of ( "a" , "5.000" ) , postWithDouble )
assertThat ( offset . canonical ( ) , is ( "UTC+02:00" ) )
assertTrue ( validator . validate ( connectionLimits , PUT ) . passedValidation ( ) )
assertNotNull ( thr )
assertEquals ( "Running time" , code . getBibframeTag ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( 2011 , toml . getLong ( "d" ) )
assertEquals ( expected , actual )
Assert . fail ( "No such class exist" )
assertEquals ( pep , testpep )
assertEquals ( 1 , r . getCandidates ( ) . size ( ) )
assertEquals ( "mypic.png" , user . getProfilePicture ( ) )
assertSame ( "Root is not detected: " + select . getExpression ( ) , resolver . getClassDescriptor ( "Artist" ) , select . getRootDescriptor ( ) )
assertThat ( width , equalTo ( 2f ) )
assertEquals ( readTimeStamp , currentTimeMillis )
assertEquals ( SuppliedNameSuffixKit . getId ( ) , settings . getKitId ( ) )
assertThat ( positionEntityArgumentCaptor . getValue ( ) , equalTo ( positionEntityArgumentCaptor . getValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( authenticate , is ( present ( ) ) )
assertFalse ( testObj . containsWord ( null ) )
assertNull ( result )
Assert . assertTrue ( union . isEmpty ( ) )
assertEquals ( sampledResponseTimeList , responseTimeChartGroup )
Assert . assertThat ( agentDao . list ( zone , null , AgentStatus . OFFLINE ) , Is . is ( nullValue ( ) ) )
Assert . assertTrue ( true )
assertEquals ( "formatBlock() returns a block withLetters and underscores" , "<info>some info</info>
assertEquals ( 1 , marshaller . marshallize ( AdultUnit . class ) . size ( ) )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertNotNull ( user )
Assert . assertEquals ( "Invalid result" , "text" , result )
assertTrue ( filter . getOperators ( ) . isEmpty ( ) )
assertEquals ( "http://myapp.capedwarf.com:80/myapp.capedwarf.com" , env . getBaseApplicationUrl ( ) )
assertTrue ( ! valid )
assertEquals ( "1970-01-01" , cal . get ( Calendar . DAY_OF_MONTH ) )
assertThat ( options . getMaxCopyAttempts ( ) , is ( - 1 ) )
assertNotNull ( DependentHostedNumberOrder . reader ( ) . read ( ) )
assertEquals ( g1 , multiply ( g1 , g2 ) )
assertFalse ( victim . isIncrementalBuild ( ) )
assertActive ( player1 , player2 , player3 , player4 )
assertEquals ( NO_CONTENT_204 , deleteResponse . getStatus ( ) )
Assert . assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( expResult , result )
assertEquals ( 0 , parts )
assertEquals ( 0 , dbHandler . getDataElementCount ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Result doesn't match test string" , TEST_STRING , result )
assertThat ( ioUtils . getNewLineIndex ( post . getBytes ( charset ) , charset ) , Matchers . equalTo ( 19 ) )
Assert . assertTrue ( errors . hasFieldErrors ( "order" ) )
assertThat ( getCollection ( ) . count ( ) , is ( 1L ) )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isWarnEnabled ( ) )
assertEquals ( expected , api . getAPIUrl ( "" ) )
assertEquals ( indA , indB )
assertOut ( "s.toLowerCase() == 'foo'" )
assertEquals ( expResult , result )
assertEquals ( date , cal . getTime ( ) )
assertEquals ( array . getBaseTypeName ( ) , array . getBaseTypeName ( ) )
Helpers . assertJson ( Deencapsulation . invoke ( twinMetadata , "toJsonElement" ) . toString ( ) , expectedJson )
assertEquals ( "Framework Profile" , "myProfile" , config . getFrameworkProfile ( ) )
assertOut ( "a = a.attribute('name')" )
assertEquals ( 0.0 , prod . minus ( aperm ) . getRMS ( ) , TOLERANCE )
assertEquals ( "xyz" , mlParams . get ( TrainingParameters . ALGORITHM_PARAM ) )
assertEquals ( data , stream . toString ( ) )
assertTrue ( result )
assertEquals ( expectedArg , parsedArg )
assertEquals ( expected , compare ( expected , val1 ) )
assertEquals ( AuthenticationType . FORM , sut . getAuthenticationType ( ) )
assertNull ( metricsFactory )
Assert . assertEquals ( "Sender: JD <john.doe@acme.org>" , decode ( field ) )
assertThatPersonIsProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ) . map ( person , CensorProtectedDataForNonAuthorities , CPRProtectionLevel . DoNotCensorCPR ) )
assertEquals ( 0 , purged )
Assert . assertEquals ( "Status code should be the same." , 200 , conn . getResponseCode ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( now , tx . estimateLockTime ( ) )
assertTrue ( "Mixedstyle Errors should be discovered: " + getStdErr ( ) , getStdErr ( ) . indexOf ( "Mixedstyle Errors" ) > - 1 )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( "Params:\\n" + "foo: bar" , response )
assertEquals ( metadata , repository . getModuleMetadata ( "TEST-SLAVE" ) )
assertTrue ( check ( "a" , input , output ) )
assertEquals ( expResult , result )
assertThat ( xml ( stream . toString ( ) ) , hasXPath ( "//soapwms:ExtendedCapabilities/soapwms:SOAP/wms:SoapWmsExtendedCapabilities" , nsBindings ( ) , equalTo ( wmsExtendedCapabilities ) ) )
assertEquals ( " 33 297\\n" , found )
assertEquals ( responseMessage . getBody ( ) , body )
assertEquals ( STREAMING . ZK_EPHEMERAL_NODE_STATUS_INITIALIZED , status )
assertEquals ( ExpressionFactory . exp ( "path in (1, 2, 3)" ) , exp )
assertEquals ( SpringBeansConfig . class , springBeansConfig . getClass ( ) )
assertEquals ( "S.a\\n" , found )
assertEquals ( arr , otherResult . getShape ( ) )
TestUtils . assertPropertyChangeEvent ( report , "flaggedDates" , flagged , monthView . getFlaggedDates ( ) , false )
assertNotNull ( "ID should not be null" , book . getId ( ) )
assertEquals ( expected , actual )
assertTrue ( kieBuilder . getResults ( ) . hasMessages ( Level . ERROR ) )
assertEquals ( false , check . isRequired ( ) )
assertFalse ( i1 . equals ( null ) )
assertEquals ( "Failed applied BufferTransformation WithInvertedPositiveDistances" , desiredGeometry , transformedGeometry )
assertArrayEquals ( customDomains , _cut . getDomains ( ) )
Assert . assertEquals ( offset , kv . getOffset ( ) )
assertEquals ( null , result . getId ( ) )
assertEquals ( "Value \\\\" , result )
assertEquals ( "<p>Hello</p>\\n<p>There</p>" , divs . html ( ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( true ) )
assertEquals ( expResult , result )
Assert . assertTrue ( s1 . length ( ) < 64 )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( up . getShowCqlCompletionHint ( ) , "false" )
assertFalse ( matcher . find ( 0 ) )
assertEquals ( "public static final TargetEntity SET_REL = PropertyFactory.createTarget(\\"to_one_rel\\", TargetEntity.class);" , definition )
assertThat ( DateInterval . parseISO ( "2012-001/P775D" ) , is ( expected ) )
rule . assertScenarioEnded ( )
assertEquals ( 3 , sources . size ( ) )
assertArrayEquals ( expected , target )
assertTrue ( cluster . getClient ( ) instanceof LocalJobRunner )
assertEquals ( "V1 Comment" , wrapper . getComment ( ) )
assertEquals ( expected , successors )
assertThat ( outcomes . get ( 0 ) , havingTag ( TestTag . withName ( "a domain" ) . andType ( "domain" ) ) )
assertEquals ( control , test . readLine ( ) )
assertEquals ( found , maxChildren )
assertThat ( processor . getTables ( ) , is ( Arrays . asList ( TABLE , DATABASE , TABLE , TOK_TABNAME ) ) )
assertThat ( System . getProperty ( SYSTEM_PROPERTY ) , is ( "original-value" ) )
Assert . assertFalse ( this . manager . remove ( this . person1 , this . job1 ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa must be greater than 3 characters." ) )
assertEquals ( buf . toString ( ) , "[\\"a\\",\\"b\\"]" )
assertThat ( writer . toString ( ) , is ( "[{\\"a\\":0,\\"b\\":1,\\"c\\":2}]" ) )
assertFalse ( subject . getDataPoints ( ) . isEmpty ( ) )
assertFalse ( c . isValidForSqlQuery ( ) )
assertTrue ( "Constant permission mapper should be created" , ops . exists ( TEST_CONSTANT_PERMISSION_MAPPER_ADDRESS ) )
assertThat ( tester . count ( Lock . KIND ) , is ( 0 ) )
assertTrue ( xmlResult . contains ( ":string2>cord</ns" ) )
assertThat ( target . checkConnectivity ( ) , is ( true ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "ADD /status/replicas" ) )
assertEquals ( "<
Assert . assertEquals ( 0 , patients . size ( ) )
Assert . fail ( "Expected failure" )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "user1" , resp . getUser ( ) . getName ( ) )
assertEquals ( updateCount , clock . get ( ) )
assertTrue ( seen . add ( UUIDGenerator . nextString ( UUIDGenerator . TYPE4 ) ) )
Assert . assertEquals ( "dnode-" + this . getClass ( ) . getName ( ) + "-1" , dnode1Address )
assertEquals ( "straks" , t . format ( new Date ( 0 ) ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
ActionResultAssert . assertThat ( result )
Assert . assertTrue ( "result had wrong width" , result . getWidth ( ) == 0 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "test" , empty . getMessageType ( ) )
assertEquals ( Collections . singleton ( TestEnum . TWO ) , select . getSelectedItems ( ) )
assertEquals ( 1 , packetIn . getCount ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( array ) , equalTo ( new double [ ] { 5 , 1 , 2 , 3 , 4 , 0 } ) )
assertTrue ( integerOnePresent )
assertThat ( TestI18n . testMessage3 . text ( "Test" , "Message Test" ) , is ( "Message Test" ) )
assertEquals ( expected , destination . toString ( ) )
assertEquals ( ciob , chunked )
Assert . assertNotNull ( "did not find collection" , entry )
Assert . assertEquals ( fastSqrt , computedSqrt , 0.000000001f )
assertTrue ( focusTarget . focused ( ) . get ( ) )
assertEquals ( "Local repository" , new URL ( "file:somewhere/localrepository/" ) , config . getLocalRepository ( ) . getURL ( ) )
Assert . assertEquals ( 0 , solution . getValue ( ) , .0000001 )
assertEquals ( "no-cache" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
assertEquals ( "English" , newSubtitles )
assertEquals ( "patient/@" , path )
assertEquals ( json , gson . toJson ( value ) )
assertEquals ( 1 , result . length )
assertEquals ( ROUTE , route )
assertEquals ( ncTestName , result . get ( "namedCluster" ) )
Assert . assertEquals ( ambiente , eventoRetorno . getAmbiente ( ) )
assertTrue ( hasNoProjects )
assertEquals ( "BLOB" , sb . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertProcessInstanceFinished ( processInstance , ksession )
Assert . assertEquals ( "did not set useParallelTransfer" , false , transferOptions . isUseParallelTransfer ( ) )
assertEquals ( "John" , names . get ( 0 ) )
assertEquals ( AuthStatus . SEND_FAILURE , module . validateRequest ( messageInfo , client , null ) )
Assert . assertEquals ( "true" , result )
Assert . assertNotNull ( rb )
assertEquals ( 15 , routeState . get ( 0 ) )
assertTrue ( "atan() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( expected , a . extractEditor ( ) )
assertNull ( "The default value should be null" , DEFAULT3 . createIfSupported ( "default" ) )
assertE ( "����������" + "��   ��" + "��   ��" + "����  ��" + "����������" )
Assert . assertTrue ( "Type1 font expected" , FontProgramFactory . createType1Font ( afm , pfb ) instanceof Type1Font )
assertEquals ( BuilderFactory . start ( ) . add ( "a" , new ObjectId ( 0x4e9d87aa , 0x5825b60b637815a6L ) ) . build ( ) , doc )
assertFalse ( c1 . getSourceId ( ) . equalsIgnoreCase ( c2 . getSourceId ( ) ) )
Assert . assertEquals ( 2 , countResult ( query ) )
assertFalse ( ref . isPresent ( ) )
assertOnResponseAttachment ( f2 , MAX_SIZE1 , "Client3mbAttachment.txt" )
assertEquals ( ImmutableMap . of ( "HOSP1" , "HOSP2" , "HOSP3" , "HOSP4" , "HOSP5" , "HOSP6" , "HOSP7" , "HOSP8" , "HOSP9" , "HOSP10" , "HOSP11" , "HOSP12" , "HOSP13" , "HOSP14" , "HOSP15" , "HOSP16" , "HOSP17" , "HOSP18" , "HOSP19" , "HOSP20" , "HOSP21" , "HOSP22" , "HOSP23" , "HOSP24" , "HOSP25" , "HOSP26" , "HOSP27" , "HOSP28" , "HOSP29" , "HOSP30" , "HOSP31" , "HOSP32" , "HOSP33" , "HOSP34" , "HOSP35" , "HOSP36" , "HOSP37" , "HOSP38" , "HOSP39" , "HOSP40" , "HOSP40" , "HOSP41" , "HOSP42" , "HOSP43" , "HOSP44" , "HOSP45" , "HOSP46" , "HOSP47" , "HOSP48" , "HOSP49" , "HOSP50" , "HOSP51" , "HOSP52" , "HOSP53" , "HOSP54" , "HOSP55" , "HOSP56" , "HOSP57" , "HOSP59" , "HOSP60" , "HOSP61" , "HOSP62" , "HOSP63" , "HOSP64" , "HOSP65" , "HOSP68" , "HOSP69" , "HOSP70" , "HOSP70" , "HOSP71" , "HOSP73" , "HOSP74" , "HOSP75" , "HOSP76" , "HOSP77" , "HOSP78" , "HOSP79" , "HOSP80" , "HOSP81" , "HOSP82" , "HOSP83" , "HOSP84" , "HOSP85" , "HOSP86
assertEquals ( "property should be gotten" , testViewerId , sut . getViewerId ( ) )
assertTrue ( ! key . prefixOf ( itemKey ) )
assertEquals ( "Desired year is not null" , "01Jan 1991 00:00:00(662688000000)" , lsys . getDesiredYear ( dt ) )
assertTrue ( SetStatementValidator . validate ( setters ) )
assertTrue ( testMap . equals ( readMap ) )
assertNull ( result )
Assert . assertEquals ( 249.84d , result1 . get ( ) , 0.1d )
assertFalse ( loggerContext . isPackagingDataEnabled ( ) )
assertNull ( result )
assertEquals ( "info:fedora/test/object/fcr:metadata" , relativizeSubpath ( rootObjectId , resourceId ) )
assertEquals ( asList ( START , OFFER , OFFER_2 , END ) , events . collect ( ) )
assertThat ( testIsValidAppProperty , is ( expectedIsValidAppProperty ) )
assertEquals ( 10 , count . intValue ( ) )
assertEquals ( rendered , "2015-03-03T19:26:40.000Z" )
assertEquals ( 0 , classManager . getReferenceCount ( ) )
assertTrue ( result )
result . assertErrorFreeLog ( )
assertPermanentCount ( playerA , "Azure Drake" , 1 )
assertEquals ( "Spades" , fd . getType ( ) . getName ( ) )
assertThat ( session . getCriteria ( "foo" ) , is ( notNullValue ( ) ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "publishMessage1" ) )
assertNotNull ( xmlString )
assertThat ( iconCaptor . getValue ( ) , is ( "ghost" ) )
assertEquals ( 25 , cap . get ( 0 ) )
assertTrue ( res . equals ( expected ) )
assertEquals ( testExtension , actual )
Assert . assertEquals ( "Incorrect duration" , duration , res . getDuration ( ) )
Assert . assertTrue ( dsDao . getDSInfo ( remoteDSAddress ) . isUp ( ) )
assertRoundtrip ( input )
assertError ( ( ) -> target . getServices ( ) , ConnectionException . class , expectedMessages . getConnectionError ( ) )
assertEquals ( pp . getValue ( ) , "No handlers for address hello1" )
assertFalse ( skillConstraint . fulfilled ( insertionContext ) )
assertEquals ( "test-res" , baseUrl )
arrays . assertContainsNull ( someInfo ( ) , actual )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "/macro/edit" , result )
assertEquals ( "1" , svc . getState ( ) )
assertEquals ( "x86_64" , process . arch ( ) )
assertThat ( repository . getRules ( ) , hasItems ( context . repository ( "custom" ) , repository . getRules ( ) ) )
assertEquals ( "<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertNotNull ( "Social Groups (JSON STRING)" , groups )
assertExpectedProtectedPorts ( dai )
assertThat ( maps . oxen ( ) , is ( set ( 17 , 4711 ) ) )
assertEquals ( "error message" , ex . getMessage ( ) )
assertThat ( term , is ( "���炽�裤����" ) )
assertArrayEquals ( data , ( float [ ] ) deserialize . readObject ( float [ ] . class ) , 0.0001F )
assertNotNull ( savedCalendar )
assertTrue ( t . verify ( t . getEndorsers ( ) . get ( 0 ) , key . getPublic ( ) ) )
assertKernel ( kernel , ANNULUS , e )
assertEquals ( "test" , echo . echo ( "test" ) )
assertNull ( eventManager . getEvent ( CayenneEvent . class ) )
assertTrue ( a . isNormal ( null ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertEquals ( o1 , o2 )
Assert . assertEquals ( 1 , errors . size ( ) )
assertEquals ( 1 , views . size ( ) )
assertEquals ( expected , actual , delta )
Assert . assertEquals ( expected , resultString )
assertEquals ( "c" , obj2 . getString ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "failed to post rating" , rating , result . getCode ( ) )
Assert . assertEquals ( THIRTEEN_FLOAT , pi . getThirteenFloat ( ) )
assertEquals ( v21Employments1 , v21Employments2 )
assertThat ( stackTrace , containsString ( msg ) )
Assert . fail ( )
assertEquals ( "value" , cacheEntry )
assertEquals ( uri , uribuilder . build ( ) )
result . assertIsSatisfied ( 1000 )
assertNotEquals ( one , differentClass )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertThat ( underTest . isFrozen ( ) , is ( false ) )
Assert . assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar" , "test-deps-c-1.0.0.jar" , file . getName ( ) )
assertArrayEquals ( expected , list . toArray ( ) )
Assert . assertEquals ( 1 , q . getResultList ( ) . size ( ) )
Assert . assertTrue ( 2 + 2 == 4 )
assertEquals ( 10 , classUnderTest . getWidht ( ) , 0 )
assertThat ( result , equalTo ( "US" ) )
assertNotNull ( action )
assertThat ( values , containsInAnyOrder ( "other" , "value" ) )
assertEquals ( 1 , partitions . size ( ) )
assertTrue ( expectedMaxPoolingWithPaddingActivation . compare ( poolingActivation , TOLERANCE ) )
Assert . assertEquals ( "java.lang.Double" , provider . getCanonicalDataTypeName ( Mockito . mock ( Column . class ) ) )
Assert . assertEquals ( "Hello World" , result )
assertPutAndGet ( map )
assertTrue ( Arrays . equals ( readBytes , message1 . getBytes ( ) ) )
Assert . assertTrue ( isEqual ( distance , 1.0 ) )
Assert . assertEquals ( output , outcome )
Assert . assertEquals ( "(124_125invCGA)" , inv . toHGVSString ( ) )
assertEquals ( getFailureMessage ( ) , 0.0025851 , distance , 1e-7 )
Assert . assertEquals ( "first 0:a 1:b 2:c last" , html )
assertEquals ( expected , actual )
assertThat ( backend . isEmpty ( ) , is ( true ) )
assertSame ( v1 , v2 )
Assert . assertTrue ( "Expected unmarshaled patient to be equal" , result . equalsDeep ( createPatient ( ) ) )
assertEquals ( null , DateUtil . parse ( dateString , formatString ) )
Assert . assertEquals ( element . getText ( ) , "Open new window" )
Assert . assertTrue ( Files . isSameFile ( rootPath , path ) )
Assert . assertEquals ( state , retrievedState )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertNotNull ( mpp )
assertEquals ( "a" , TYPE_HANDLER . getResult ( rs , 1 ) )
assertThat ( event . getPlatform ( ) , is ( sameInstance ( mockPlatform ) ) )
assertEquals ( Arrays . asList ( PropertiesMappingConfiguration . DEFAULT_STATIC_RESOURCE_MAPPING_FILE ) , mappingFiles )
assertEquals ( "faces/causeError.xhtml" , xml )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( LabeledUnicastRoute . class ) )
assertObjectEquals ( "[{f:'c'},{f:'a'},{f:'b'},{f:'c'},{f:'d'}]" , p . run ( bs , in , sa ) )
Assert . assertEquals ( 1 , compareResult )
assertEquals ( 25 , diff . getValue ( ) . get ( ) )
Assert . fail ( "Expected ConfigurationException" )
assertEquals ( descriptor , descriptor2 )
assertEquals ( "Count of customer" , 2 , res )
assertThat ( driver . findElements ( By . id ( DataLocationInCustomLayout . BUTTON_ID ) ) . size ( ) , is ( 0 ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertNotNull ( result )
assertEquals ( "87030-020" , String . format ( "%s" , cep ) )
Assert . assertArrayEquals ( expected , actual )
assertNotNull ( modelDTOs )
assertKernel ( kernel , ANNULUS , e )
assertEquals ( "b" , post . getParam ( "a" ) )
assertEquals ( "this is the book" , source . getValue ( "title" ) )
Assert . fail ( "Expected KeyProviderException" )
assertEquals ( tested , myDate . getTime ( ) )
Assert . assertEquals ( "did not reconstitute path correctly" , "/a/path" , actual )
Assert . assertEquals ( 3 , vertices . size ( ) )
assertEquals ( "fileName-" + HASH + ".js" , result )
assertEquals ( "Test" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( 3 , count )
assertEquals ( "host3 has been added to group1" , result )
assertTrue ( dao . selectAll ( ) . size ( ) == 1 )
assertEquals ( Result . FAIL , user . apply ( item ) )
assertGraph ( generatedGraph )
assertThat ( hBaseAdmin . getTable ( "test" ) . getData ( ) , is ( nullValue ( ) ) )
assertTrue ( validator . validate ( EntityNames . ATTENDANCE , attendances ) . size ( ) == attendance1 . size ( ) )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
assertThat ( exists , is ( true ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertNull ( flashMap )
assertEquals ( "jdbc:h2:mem:test" , embeddedDatabaseRule . getConnectionJdbcUrl ( ) )
assertEquals ( "GBP -1.23" , test . toString ( ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( false ) )
assertNull ( entryRelationship )
assertEquals ( 4 , count . asMap ( ) . size ( ) )
assertEquals ( "remote" , sf1 . getOtherField ( ) )
Assert . assertEquals ( 0 , scores . getScore ( ) )
assertEquals ( 0 , query ( ) . from ( employee ) . where ( sq1 . exists ( ) . not ( ) ) . fetchCount ( ) )
assertEquals ( BOOLEAN , v8Object . getType ( "key" ) )
assertEquals ( "����" , I . currency ( "US" ) )
assertTrue ( rsp . toString ( ) , rsp . get ( FAILURE_DESCRIPTION ) . asString ( ) . contains ( ControllerLogger . MGMT_OP_LOGGER . managementResourceNotFound ( CHILD_B_ADDRESS ) . getMessage ( ) ) )
assertTrue ( verifier . isValid ( interceptor , controllerMethod , controllerInstance , constraints ) )
assertNotNull ( eventSourceTopology )
PositionCollectorTestUtil . assertEmpty ( collector )
assertTrue ( synchronization . isSatisfied ( ) )
assertEquals ( models , actual )
assertEquals ( "Done." , messages . getMessage ( MESSAGE_ID . DONE ) )
assertThat ( response . getEntity ( ) , CoreMatchers . < Object > equalTo ( userRoleList ) )
out . assertIsSatisfied ( )
Assert . assertArrayEquals ( Base64 . decodeBase64 ( value ) , ( byte [ ] ) f . func ( value ) )
ctx . assertEquals ( 1 , result . rowCount ( ) )
assertEquals ( objectMapper . readValue ( "test-data2" , Arrays . stream ( new DataPacketDto [ ] { dataPacketDto , dataPacketDto2 } ) ) , objectMapper . readValue ( "test-data2" , Arrays . stream ( new DataPacketDto [ ] { dataPacketDto , dataPacketDto2 } ) ) )
assertTrue ( order . isDiscontinued ( DateUtils . parseDate ( "2014-11-01 11:11:12" , DATE_FORMAT ) ) )
assertEquals ( expected , elements )
assertEquals ( "Serialised data set" , SourceXML . FULL_SAMPLE , dummyXmlOutputStreamProvider . getXmlString ( ) . trim ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( "
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff24_" ) )
assertEquals ( outlineLength , movie . getOutlineLength ( ) )
assertEquals ( true , wizard . canComplete ( ) )
assertEquals ( "middleN" , person . getMiddleName ( ) )
assertFalse ( "our host shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
assertEquals ( EarlyHints . MESSAGE , ri . getDescription ( ) )
assertTrue ( validator . isValidSudoku ( board ) )
assertEquals ( 2 , nodeUnits . size ( ) )
assertEquals ( "Wrong spread" , "obj" , sig . getName ( ) )
assertTrue ( kafkaStore . getKafkaStoreReaderThread ( ) . getConsumerProperty ( org . apache . kafka . clients . consumer . ConsumerConfig . GROUP_ID_CONFIG ) . startsWith ( "schema-registry-" ) )
assertFalse ( handler . test ( null , null , Direction . In , null , null ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertEquals ( "tid" , reference . get ( ) . getAttachment ( Http2Client . RESPONSE_BODY ) )
assertEquals ( "text/css" , css )
assertTrue ( ncPropertiesNotNullOrEmpty )
assertTrue ( problem )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getNodeSelector ( ) , is ( "os_arch" ) )
assertEquals ( 0 , msgOut1 . getTextCount ( ) )
Assert . assertEquals ( pullRequestActivity , parsedPullRequestActivity )
assertEquals ( first , second )
assertTrue ( FutureUtils . result ( writer . write ( record ) ) )
assertTrue ( converter . canConvert ( CommentAction . class ) )
assertEquals ( "Mark is 37" , result . getValue ( ) )
assertTrue ( tchannel . isOpen ( ) )
assertTrue ( exception )
Truth . assertThat ( pool . authority ( ) )
assertNotNull ( ase )
assertTrue ( ps . hasPermissions ( t , PrivilegeConstants . JCR_READ ) )
assertEquals ( newLastname , customer . getLastName ( ) )
assertDelete ( )
Assert . assertEquals ( 1 , operation . operations . size )
assertThat ( mdcValueStr , is ( nullValue ( ) ) )
assertOut ( "var /** @type {RegExp} */ a = /([^\\\\s+(\\\\w+)(?:\\\\s*=\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s*(\\".*?\\\\)?\\\\s
assertTrue ( "exact match on name should run" , exactFilter . shouldRun ( testMethod ) )
this . assertEdgesOkResponseJsonStructure ( 0 , 0 , response )
assertNull ( value )
assertEquals ( of ( Started . INSTANCE ) , listener . getEventLog ( ) )
assertTrue ( "Login succeed for alias not in roles.properties" , success )
assertThat ( inputStream , notNullValue ( ) )
assertThat ( out , containsString ( "<birthDate value=\\"2012-01-02\\"/>" ) )
assertEquals ( "Expected 10 results!" , 10 , n )
assertThat ( pattern , specificPart ( is ( ",\\"type\\":\\"log\\",\\"logger\\":\\"%replace{%logger}{\\"}{\\\\\\\\\\"}\\",\\"thread\\":\\"%replace{%thread}{\\"}{\\\\\\\\\\"}\\",\\"level\\":\\"%p\\",\\"categories\\":%categories,\\"msg\\":%jsonmsg{escape},%ctxp{excluded-field},\\"custom_fields\\":{%cf{custom-field}}%ex{0} " ) ) )
assertNotNull ( channel )
assertLazyFieldIsJavaUtilOptionalWithValue ( this . resourceTargetedByMapping )
assertTrue ( population . size ( ) == 100 )
assertIterationsEqual ( expected , Views . iterable ( shuffled ) )
Assert . assertTrue ( isArchived )
assertEquals ( 1 , i . get ( ) )
Assert . areEqual ( 1 , se . getInt ( 1 ) , "数据验证" )
Assert . assertFalse ( errors . hasErrors ( ) )
assertTrue ( result . contains ( "Red fox sox" ) )
assertEquals ( index1 , index1Duplicate )
JSONAssert . assertEquals ( "Message" , "{id:1234}" , actual , false )
assertFalse ( query ( func . args ( PATH ) ) . isEmpty ( ) )
assertEquals ( 6 , dataMgr . getCommandHistory ( ) . size ( ) )
assertThat ( "isSame must not return true for locations created with different paths and the same properties" , locationA1 . isSame ( locationA2 ) , is ( false ) )
assertThat ( returned , hasSize ( 0 ) )
assertEquals ( "one" , actual )
assertFocusedCell ( 4 , 1 )
assertNotNull ( result )
assertEquals ( input , outArr )
assertNotNull ( Participant . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( baos . toString ( ) , startsWith ( String . format ( "0 Scenarios%n" + "0 Steps%n" ) ) )
assertEquals ( 8 , v )
assertTrue ( normalizedProbability > 0 && normalizedProbability <= 1 )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( "�驻�� 12 �拽�转" , t . format ( new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 12 ) ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
assertEquals ( Arrays . asList ( "1.0.0" , "1.0.1" , "1.0.2" , "1.0.3" , "1.0.4" , "1.0.5" , "1.0.6" , "1.0.7" , "1.0.8" , "1.0.9" , "1.0.10" , "1.0.11" , "1.0.12" , "1.0.13" , "1.0.14" , "1.0.15" , "1.0.16" , "1.0.17" , "1.0.18" , "1.0.19" , "1.0.20" , "1.0.21" , "1.0.22" , "1.0.23" , "1.0.24" , "1.0.25" , "1.0.26" , "1.0.27" , "1.0.28" , "1.0.29" , "1.0.30" , "1.0.31" , "1.0.32" , "1.0.33" , "1.0.34" , "1.0.35" , "1.0.36" , "1.0.37" , "1.0.38" , "1.0.39" , "1.0.40" , "1.0.41" , "1.0.42" , "1.0.43" , "1.0.44" , "1.0.45" , "1.0.46" , "1.0.47" , "1.0.48" , "1.0.49" , "1.0.50" , "1.0.51" , "1.0.52" , "1.0.53" , "1.0.54" , "1.0.55" , "1.0.56" , "1.0.57" , "1.0.58" , "1.0.59" , "1.0.60" , "1.0.63" , "1.0
assertThat ( future . isDone ( ) , is ( false ) )
assertEquals ( "the url should be http://localhost/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students/api/rest/v1/students
assertNotEmptyAndClear ( writer )
assertNotNull ( resolver )
Assert . assertEquals ( actual , "yyyy-MM-dd" )
assertTrue ( impl . mustRevalidate ( entry ) )
assertEquals ( response . get ( 0 ) , testResponse . get ( 0 ) )
assertEquals ( 22 , methods . size ( ) )
assertEquals ( "{\\"statements\\":{\\"statements\\":{\\"id\\":1,\\"n\\":2,\\"n\\":3}}" , json )
assertEquals ( "xsd:float" , prefixedName )
assertEquals ( "1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n
assertEquals ( xmlString , xmlReturn )
assertTrue ( IsoMatcher . isomorphic ( dataset , dataset . asDatasetGraph ( ) ) )
assertEquals ( expectedClass , actualClass )
Assert . assertEquals ( setA . hashCode ( ) , setB . hashCode ( ) )
assertEquals ( count , 1L )
assertEquals ( 1 , expectedLinks . size ( ) )
Assert . assertEquals ( ADParagraphStreamTest . NUM_SENTENCES , count )
assertThat ( result , is ( nullValue ( ) ) )
assertThat ( watchers . of ( question ) , contains ( subscribedWatcher ) )
test . assertOutput ( "word count" , input , "word count" , output )
runner . assertAllFlowFilesTransferred ( SelectHive_1_1QL . REL_FAILURE , 1 )
assertEquals ( match , matcheCounts [ 0 ] - matcheCounts [ 2 ] )
assertTrue ( topLevel == MongoTopLevel . INCONSISTENT )
Assert . assertEquals ( "width=340 height=3d200\\r\\n" , readText ( decoder ) )
Assert . assertTrue ( verifyTest ( crlBuilder ) )
assertTokens ( Tokens . TEXT , Tokens . PLUS , integer ( 10 ) )
assertEquals ( 3600. , Time . parseTimeToSeconds ( time ) , 0.01 )
Assert . assertEquals ( "List is not null" , list , Arrays . asList ( new ByteBuf ( buffer ) ) )
Assert . assertEquals ( 4 , instance . size ( ) )
assertThat ( intervals , is ( expected ) )
Assert . assertTrue ( "Config not found" , getConfigService ( ) . exists ( config . getField2 ( ) ) )
Assert . assertFalse ( result )
assertEquals ( 10 , template . getMetaData ( context . getEntityResolver ( ) ) . getQueryTimeout ( ) )
assertThat ( target2 . getEventSubscriptionString ( ) , is ( "subscriber_id" ) )
assertEquals ( "Select with null where not null" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEqualHQL ( "allen love dandan" , sb . toString ( ) )
assertEquals ( resp . getCode ( ) , 204 )
assertEquals ( "< 1.0" , r1 . toString ( ) )
assertEquals ( "Mondrian" , planetsReflected [ 0 ] . getName ( ) )
Assert . assertEquals ( "ITEM 001Product           00005\\n" , result )
assertEquals ( Nd4j . create ( new double [ ] { 2.0f , 4.0f } ) , array . slice ( 4 ) )
assertEquals ( "Columns size is wrong" , 2 , columns . size ( ) )
assertEquals ( "/_snapshot/kangsungjeon/leeseohoo,kangsungjeon" , getSnapshotRepository . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertTrue ( listChesse . getTotalAmount ( ) == 0 )
assertEquals ( expectedResult , OSValidator . isWindows ( ) )
Assert . assertEquals ( 2.2 , doc2 . getContentField ( "out" ) )
Assert . assertTrue ( classPath . getClass ( ) . getName ( ) . endsWith ( expectedClassPath ) )
assertEquals ( Status . FORBIDDEN , status )
assertTrue ( typedArray . isAvailable ( ) )
assertNull ( result )
assertEquals ( 30 , ( int ) new AcceptsLambda < Integer > ( ) . accept ( x :: addInts ) )
assertNotNull ( result )
Assert . assertEquals ( expect_sql , sql )
assertTrue ( obj . containsKey ( "foo" ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
Assert . assertEquals ( 1 , an . analyze ( new CandidateNode ( new CandidateRule ( "test" , rule ) , nnode ) , results ) . size ( ) )
assertNotNull ( result )
assertTrue ( "message should be authenticated" , verifyMAC ( message , mac ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , allOf ( hasEnvVar ( "RUNNING_ONLY" , null ) , hasEnvVar ( "ONCE_RUNNING" , null ) ) )
assertNotNull ( provider . get ( ) )
Assert . assertTrue ( fs . exists ( target ) )
Assert . assertEquals ( "Rule computation was called " + n + " times" , 1 , n )
assertTrue ( passages . size ( ) == 2 )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( clientWrapper . add ( "test" , 1000 , "value" , transcoder ) )
assertEquals ( v1 , v2 )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getStart ( ) , route ) , 0.01 )
Assert . assertFalse ( encounter . equals ( null ) )
assertNull ( result )
assertNotEquals ( idA , idB )
Assert . assertEquals ( 412 , stringResponse . getStatus ( ) )
assertEquals ( ph , presenter . show ( legend , ph ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertEquals ( 20 , smsd1 . getAllAtomMapping ( ) . size ( ) )
Assert . assertEquals ( 4 , p . i ( 0 , new C2 ( ) ) )
assertEquals ( "travelrecord" , collect . get ( 0 ) . get ( "name" ) )
assertEquals ( "<li data-path=\\"" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/x\\"><a href=\\"/" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/x\\">" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/x/x2\\">" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/x/x2</a></li>" + "<li data-path=\\"" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\"><a href=\\"/" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\">" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y</a>" + "<ul class=\\"nav nav-list\\">" + "<li data-path=\\"" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\"><a href=\\"/" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\">" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y</a>" + "<ul class=\\"nav nav-list\\">" + "<li data-path=\\"" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\"><a href=\\"/" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\">" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y</a>" + "<ul class=\\"nav nav-list\\">" + "<li data-path=\\"" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\"><a href=\\"/" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y\\">" + DocumentrConstants . HOME_PAGE_NAME + "/foo/bar/y</a>" + "<ul class=\\"nav nav-list\\">" + "<li data-path=\\"" + DocumentrConstants . HOME_PAGE_NAME + "/
Assert . assertEquals ( count , chronicle . getNumEvents ( 0 , count * period ) )
Assert . assertNull ( part )
assertNotNull ( Certificate . fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "THXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "GBP12.50 charged" , sub . replace ( "${code}${amount} charged" ) )
assertTrue ( monthBoundsLToR . equals ( monthView . getMonthHeaderBoundsAtLocation ( 20 , 20 ) ) )
Assert . assertEquals ( 1 , updates . getOperations ( ) . size ( ) )
assertEquals ( latch . getCount ( ) , 0 )
assertThat ( actual , is ( "tomcat1.tomcat.mycompany.com" ) )
assertTrue ( attempt . shouldRetry ( ) )
assertEquals ( "John Doe" , RecordPath . compile ( "/name[contains(fullName), 'h')]" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
Assert . assertEquals ( value , tested . listSupportedTaskTypes ( ) )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( "2 >= 3" , expr . getParameterValue ( ) )
Assert . fail ( "Missing required input" )
assertTrue ( ContextDataFactory . createContextData ( ) instanceof FactoryTestStringMap )
assertEquals ( 3 , map . size ( ) )
assertEquals ( expResult , result , 1 )
assertEquals ( asSet ( "nonExistentId" , "xForm:nonExistentId" , "ySubview:nonExistentId" ) , resolvedIds )
assertEquals ( g1 , g2 )
Assert . assertNotNull ( node )
assertFalse ( TeiidURL . isValidServerURL ( SERVER_URL ) )
assertEquals ( false , CollectionUtils . isEmpty ( coll ) )
assertEquals ( 4096 , testInt )
assertEquals ( "uuid" , sut . transform ( "uuid" ) )
assertEquals ( 404 , caller . getResponseCode ( ) )
assertSame ( System . getenv ( "PATH" ) , value . getValue ( ) )
assertNotNull ( Files . getAttributeView ( gfs . getPath ( "/file.txt" ) , BasicFileAttributeView . class ) )
assertEquals ( criterion1 , criterion2 )
assertTrue ( events . size ( ) == 5 )
assertEquals ( image , readIter )
Assert . assertEquals ( "first 0:a 1:b 2:c last" , html )
assertEquals ( instanceId1 , instanceId2 )
assertTrue ( tree1 . getActionCount ( ) == 1 )
assertTrue ( "IllegalArgumentException expected" , ex . getCause ( ) instanceof IllegalArgumentException )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/view-hardcoded-params" ) )
assertEquals ( testQueryValueCanonical , rval )
assertEquals ( new Failure ( 1 ) , fn . apply ( 1 ) )
assertEquals ( PCEPErrors . INVALID_PLSP_ID , this . errorsSession1 . get ( 0 ) )
assertEquals ( expectedSignature , mapResourceType . getSignature ( ) )
Assert . assertTrue ( Arrays . equals ( valResult , Bytes . toBytes ( "val1" ) ) )
assertEquals ( "The normal character '" + expected + "' should be encoded to '" + expected + "'" , expected , normalizer . encode ( input ) )
assertToken ( profile , token , authenticator )
Assert . assertEquals ( getExpectedDelegationTokenCount ( ) , delTokens . size ( ) )
assertEquals ( "" , result )
assertEquals ( "union SURVEY (ID) as (select survey1.ID\\n" + "from SURVEY survey1)\\n\\n" + "from dual" , q . toString ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , allOf ( hasItem ( configMapKeyRefEnvVar ) , hasItem ( secretKeyRefEnvVar ) , hasItem ( fieldRefEnvVar ) ) )
assertEquals ( h , TextUtil . stripNewlines ( out ) )
assertNull ( event )
Assert . assertEquals ( 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
assertTrue ( ancestors . isEmpty ( ) )
assertEquals ( cVector , normalizedCVector )
assertArrayEquals ( new byte [ ] { 1 } , Files . readAllBytes ( symLink2 ) )
assertNotNull ( "pre 1.8 storageInfo should return non null access latency" , retentionPolicy )
assertEquals ( "hello world" , FileUtils . readFileToString ( output . getCanonicalPath ( ) , "UTF-8" ) )
assertEquals ( "{" + newLine ( ) + "    with ($p) { setAge($p.getAge() + 1) };" + newLine ( ) + "}" , printConstraint ( expression ) )
assertEquals ( expectedJson , message . toJson ( ) )
assertSerializable ( new ArtifactDescriptorException ( result ) )
assertEquals ( "FIX40.xml" , dd . getFilename ( ) )
assertEquals ( err , "Directory, 'EasyMock for class java.io.File' is not a valid directory." )
assertEquals ( StatusCode . INVALID_STREAM_NAME , response . getCode ( ) )
this . assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/topologytemplate/" , "servicetemplates/baobab_serviceTemplate.json" )
assertEquals ( insertNum , count )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "25ml" , 25 , "ml" , 35 , "millilitres" , "time" ) )
assertTrue ( entity . getId ( ) > 0 && entity . getCreationDate ( ) == null )
assertEquals ( "Johny" , value )
Assert . fail ( )
assertFalse ( voter . voteMatch ( affiliation , organization ) )
assertNoneEqual ( otherVoFqans )
assertConstraintViolationToOneValidation ( constraintViolations )
assertTrue ( false )
assertEquals ( HttpServletResponse . SC_OK , resp . getStatus ( ) )
assertEquals ( "checker should return 'EnabledStatus' string" , "EnabledStatus" , checker . run ( ) )
assertNull ( dao . read ( association . getHandle ( ) ) )
Assert . assertEquals ( sourceCardinality , subplanCtx . getOutputCardinality ( 0 ) )
observer . assertObservations ( "21" , PhaseId . APPLY_REQUEST_VALUES , PhaseId . INVOKE_APPLICATION , PhaseId . PROCESS_VALIDATIONS , PhaseId . RENDER_RESPONSE , PhaseId . RESTORE_VIEW , PhaseId . UPDATE_MODEL_VALUES , PhaseId . APPLY_REQUEST_VALUES , PhaseId . RENDER_RESPONSE , PhaseId . RESTORE_VIEW , PhaseId . UPDATE_MODEL_VALUES )
Assert . assertTrue ( ( ( LocatorTargetSelector ) client . getConduitSelector ( ) ) . getStrategy ( ) instanceof RandomSelectionStrategy )
assertEquals ( 84 , id3tag . getBPM ( ) )
assertTrue ( theSize . getClassInformation ( ) instanceof SizeClassInformation )
assertTrue ( handled )
assertThat ( p . type , is ( Packet . CLOSE ) )
assertEquals ( "0 days, 00:05:12" , howLongFromNow )
assertTrue ( valid )
Assert . assertNull ( pattern )
assertNull ( new Patterns ( ) . getPattern ( entityId ) )
assertEquals ( "The first state on first page is not correct" , FIRST_STATE_FIRST_PAGE , actual )
assertEquals ( "/genPath" , path )
assertThat ( stepListener . getCurrentTestOutcome ( ) . getTestSteps ( ) . get ( 0 ) . getTitle ( ) , is ( "final title" ) )
CustomAsserts . assertEquals ( definition , expected , actual )
assertEquals ( 100000 , safe . get ( ) )
assertFalse ( result . passedValidation ( ) )
assertEquals ( LocalDate . of ( 2012 , 6 , 23 ) , test )
assertThat ( matcher . matches ( "bar" ) , is ( true ) )
assertEquals ( 0 , records . size ( ) )
assertEquals ( field . getLabel ( ) , "label" )
assertProcessInstanceAborted ( processInstance )
Assert . assertEquals ( message . name ( ) + " (" + language + ")" , translated , message . getFormatsByArgumentIndex ( ) . length , translated . getFormatsByArgumentIndex ( ) . length )
assertThat ( description . toString ( ) , is ( "<3> row(s) on row <1> sheet \\"Sheet1\\"" ) )
assertTrue ( isFocusInsideElement ( radioButtonGroup2 ) )
assertEquals ( taskService . createTaskQuery ( ) . singleResult ( ) . getTaskDefinitionKey ( ) , "afterBpmnError" )
Assert . assertNotNull ( book )
assertEquals ( expecting , result )
assertThat ( value . isPresent ( ) , is ( equalTo ( false ) ) )
assertThat ( result , is ( Collections . singletonList ( "setMyField" ) ) )
assertThat ( testValues , is ( expectedValues ) )
assertThat ( response , containsString ( "mirroring query: AS4294967207" ) )
Assert . assertEquals ( c , results . next ( ) )
assertEquals ( "" , result )
assertEquals ( null , result )
assertThat ( ( String ) Whitebox . invokeMethod ( target , "getConvNetworkId" , nwId ) , is ( "network01" ) )
assertFalse ( connection . connect ( ) )
assertEquals ( "" , event . getEntityForNaming ( true , true , false ) )
assertEquals ( 1 , count )
Assert . assertFalse ( bpInfo1 . equals ( bpInfo2 ) )
Assert . assertEquals ( Syntax . XWIKI_2_1 . toString ( ) , syntaxId )
Assert . assertEquals ( "first" , data )
Assert . assertFalse ( ctx . getResult ( ) )
assertEquals ( expectedMessage , result )
assertEquals ( r1 , r2 )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( expected , actual )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2008 , 2 , 15 ) , OFFSET_PONE ) , t )
assertThat ( unlocked . getInteger ( ) , equalTo ( 2 ) )
assertNotNull ( entity . getId ( ) )
assertNull ( result )
Assert . assertFalse ( result )
assertCoordinates ( 1 , HEIGHT - 1 )
Assert . assertTrue ( authorizeInteraction )
assertEquals ( Arrays . asList ( "aa" , "bb" ) , list )
assertFalse ( me . isNewMsg ( ) )
assertEquals ( "" , result )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
assertEquals ( expectedBounds , actualBounds )
Assert . assertEquals ( 150 , terminatedAfter )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��***��\\n" + "��***��\\n" + "�尖�尖�尖�尖��\\n" )
assertEquals ( Double . valueOf ( "12.3" ) , converter . getAsObject ( facesContext , new UIPanel ( ) , "12.3" ) )
assertEquals ( "Parser error: DeviceProvisioningServiceName mismatch!" , expected , actual )
assertEquals ( "" , value , currentProjectPathProvider . getValue ( ) )
AssertAnnotations . assertSentence ( sentences , select ( jcas , Sentence . class ) )
Assert . assertEquals ( true , booleanConstant . evaluate ( null ) )
Assert . assertEquals ( path , "some" + File . separatorChar + "dir" + File . separatorChar + "dir2" )
Assert . assertEquals ( 0 , m . get ( ks1 . getKeyspaceMetaData ( ) . getPartitioner ( ) . partition ( "row1" ) , "column2" ) . intValue ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertAxisEquals ( timeInterval , new ArrayDouble ( 1.0 / 18.0 , 6.0 / 18.0 , 11.0 / 18.0 , 16.0 / 18.0 ) , Arrays . asList ( TimeScalesTest . create ( 2014 , 12 , 24 , 23 , 59 , 59 , 990 ) , TimeScalesTest . create ( 2014 , 12 , 25 , 0 , 0 , 0 , 0 ) , TimeScalesTest . create ( 2014 , 12 , 25 , 0 , 0 , 0 , 5 ) ) , Arrays . asList ( "2014/12/24 23:59:59.990" , ".995" , "2014/12/25 00:00:00.000" , ".005" ) , timeAxis )
Assert . assertEquals ( 6.0 , calc . evaluate ( "this is a test,ref2,*" ) , 0.0 )
assertThat ( path . getString ( NO_OP_ENCODER ) , is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../d/./{http://www.modeshape.org/1.0}e/../.." ) )
Truth . assertThat ( outputStream . toString ( ) )
assertEquals ( "foo.bar" , pathConnector . getPropertyPath ( ) )
assertTrue ( "Accepts a method that returns a Page" , interceptor . accepts ( resourceMethodThatReturnsPage ) )
Assert . assertTrue ( errors . hasFieldErrors ( "retireReason" ) )
assertEquals ( 80 , uniqueWords )
Assert . assertFalse ( new ProcessorDecorator ( processor ) . isMinimize ( ) )
assertThat ( replaced , is ( existingEditRelation ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp2 , result ) )
assertEquals ( "Got wrong plan node" , pn , record . getAnnotation ( Annotation . RELATIONAL_PLANNER ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><alice charlie=\\"david\\">bob</alice>" , result . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Host" , result )
runner . assertAllFlowFilesTransferred ( InvalidAssumption . REL_FAILURE , 1 )
assertEquals ( "Hello World" . substring ( 2 , 7 ) , bytes . parseUtf8 ( CONTROL_STOP ) )
assertArrayEquals ( CAFEBABE_SHA1 , sha1 )
Assert . assertTrue ( "Expected tuples to be equal" , Utils . equals ( t1 , t2 ) )
assertLife ( playerB , 3 )
Assert . assertEquals ( 0 , patients . size ( ) )
assertTrue ( splitOnWhitespace . size ( ) == 4 )
assertEquals ( "Did not get expected parameter count" , 3 , params . size ( ) )
assertTrue ( filter . attemptAuthentication ( request , new MockHttpServletResponse ( ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( FILE_BASE ) ) )
assertEquals ( "HARD" , fileEntry . getLockType ( ) )
assertEquals ( "<html><head></head><body></body></html>" , rewritten )
assertNull ( sut . execute ( new DeleteActivityRequest ( smithersId , bogusId ) ) )
assertThat ( environmentVariables . getProperty ( "safari.home" ) , is ( "noexistant.properties" ) )
Assert . assertTrue ( configuration . isDubboEnabled ( ) )
assertNotNull ( newActivity )
assertInvocations ( invocations , "prepare" , "commit" )
assertTrue ( "Coercing to VARBINARY failed for PDataType " + p , obj instanceof byte [ ] )
assertEquals ( 1 , permMissingElem . solution ( array ) )
assertTrue ( LogSource . isRoot ( source ) )
assertThat ( PrettyTime . of ( Locale . GERMANY ) . print ( dur , TextWidth . WIDE , true , 3 ) , is ( "1 jour, 0 heure, 4 minutes, 0 seconde et 123 microsecondes" ) )
assertTrue ( result )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertThat ( c . resolve ( schema ) , is ( nullValue ( ) ) )
assertEquals ( "Expected 99 results!" , 99 , n )
assertEquals ( result , expected , 0.0000001 )
Assert . assertTrue ( 1 == _c . convert ( "1" ) )
assertThat ( Template . parse ( source ) . render ( ) . replaceAll ( "\\\\s" , "" ) , is ( "test-string" ) )
assertEquals ( "Wrong # of objects found" , 1 , count )
Assert . assertFalse ( inBlackList )
assertEquals ( 0 , fooDao . create ( null ) )
assertEquals ( "Expected 5 results!" , 5 , n )
Assert . assertTrue ( "The expected values were not send. The missing values are " + expectedValueMap , expectedValueMap . isEmpty ( ) )
assertEquals ( exception . getMessage ( ) , "The input stream is not closed" )
assertEquals ( "fireActionActivated2\\n" , actionList )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigCaller ( ) ) . isTraceEnabled ( ) )
assertThat ( element . isPresent ( ) , is ( true ) )
this . assertHeadersSet ( CONTEXT + "/topics/1" )
assertThat ( house . getMouse ( ) . getName ( ) , is ( equalTo ( "James" ) ) )
assertEquals ( "LINESTRING (0 0, 1 1, 1 1, 1 2, 2 2)" , rt )
assertEquals ( outputExpect , output )
Assert . assertNull ( u )
assertFix ( "8=FIX.4.4|9=64|35=2|34=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVER|7=1|16=1|10=199|" )
assertThat ( encodedValue , equalTo ( GLOBAL_ENCODED_SHA_384_VALUE ) )
editor . assertProblems ( "my-server|unknown 'VMExtensions'. Valid values are: [my-server, my-server]" )
assertEquals ( "{ a : [ { a : 1 } ] }" , doc )
Assert . assertNull ( tup )
assertNotNull ( Participant . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( pgpSignedMessage . verify ( getPublicKey_5763950D ( ) ) , is ( true ) )
assertThat ( options . isStrict ( ) , is ( true ) )
assertHierarchyIsEmpty ( )
assertEquals ( 2 , services . size ( ) )
assertThat ( mySignalHandler . wasCalled , IsEqual . equalTo ( false ) )
assertEquals ( Arrays . asList ( filter2 , filter1 ) , returned )
assertEquals ( "" , result )
Assert . assertEquals ( msg , expected , actual , delta )
assertEquals ( category , ConversionUtil . convertToEntityAttribute ( category ) )
assertEquals ( 0.0F , ( float ) calculator . add ( 1 , 0 ) , - 1 )
Assert . assertNotNull ( mxBeanMapping2 )
assertEquals ( "abc" , buf . getTail ( ) )
Assert . assertTrue ( fitResidualSum < noisyResidualSum )
Assert . assertEquals ( "Text should be the same" , text , toggle . getText ( ) )
assertions . doesNotContain ( value , index )
assertEquals ( 20 , results . size ( ) )
assertEquals ( "X" , tr . getTraceAttr ( ) )
Assert . assertEquals ( StreetSearchAction . POPUP_VIEW , streetSearchAction . searchpopup ( ) )
assertEquals ( 100 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
assertEquals ( "Wrong visited nodes" , expected , visitor . getVisitedNodes ( ) )
assertResultSet ( res )
assertNotNull ( form )
assertEquals ( expected , out )
assertTrue ( newYearsDay . isAfter ( newYearsEve ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertNull ( result )
Assert . assertEquals ( str , new String ( byteData ) )
Assert . assertTrue ( contentType , contentType . contains ( "text/plain" ) )
assertRequest ( "DELETE" , "Call/%s/Play/" , callId )
assertEquals ( "We expect that the URL ends with /orgs/nomes/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/nome/n
assertThat ( output , is ( startPositions ) )
assertEquals ( msg , i , curVal )
assertEquals ( 1 , inverses . size ( ) )
assertTrue ( "File audit log should be created" , ops . exists ( TEST_FILE_AUDIT_LOG_ADDRESS ) )
assertFalse ( matchResult )
assertNull ( getWithTimeout ( commit ) )
assertEquals ( "straks" , t . format ( new Date ( ) ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertEquals ( 0 , initEmptyContainer )
assertNotNull ( monitor . getNotification ( ) )
assertResultSet ( res )
assertEquals ( "org.talend.components.kinesis.runtime.KinesisDatastoreRuntime" , runtimeInfo . getRuntimeClassName ( ) )
assertThat ( query . getQuery ( ) , is ( expectedToString ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( false ) ) )
assertTrue ( message . contains ( "Invalid type" ) )
assertEquals ( ScenarioSimulationModel . Type . RULE , retrieved . getSettings ( ) . getType ( ) )
Assert . assertEquals ( expected , actuals )
assertNotNull ( alumnoPaquete . getId ( ) )
assertAxisEquals ( 234567 , 678967 , new double [ ] { 0.00001 , 0.0004 , 0.0005 , 0.0006 , 0.0007 , 0.0008 , 0.0009 } , new String [ ] { "234567" , "6" , "5" , "6" } , axis )
assertEquals ( 3 , arr . reduceRight ( callbackfn ) . intValue ( ) )
assertEquals ( getMessage ( MessageKeys . E_TR_FW_0006 ) , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) )
assertThat ( dockerInfo , is ( notNullValue ( ) ) )
assertEquals ( expResult , result )
assertEquals ( options1 , options2 )
assertParse ( "productline PL; features FM;" + "product P(FM);" + "root FM" )
assertThatSliderValueIs ( value )
assertEquals ( " swing.userList.userWrite.text" , cellRenderer . getText ( ) )
Assert . assertTrue ( terminated )
Assert . fail ( "LoggingServlet messages should be presented only in files specified in profiles, but found: " + line )
assertSame ( given , actual )
assertThat ( request . getTimeLoaded ( ) , is ( notNullValue ( ) ) )
assertNull ( OpenShiftContext . get ( ) . get ( "foo" ) )
Assert . assertTrue ( "Expected 500 to be less than 500ms" , ( System . currentTimeMillis ( ) - start ) < 500 )
Assert . assertEquals ( "contenido" , ret )
assertEquals ( message , scandiumUtil . getMessages ( ) . get ( 0 ) )
assertContextOk ( ctx , "O1:doc:doc,O2:doc:ref,O1:ref:doc" , "Hello 1!,Hello 2!,Hello 3!" , "Source,Source,Source" )
assertEquals ( "127.0.0.1" , m . getAddress ( ) )
assertFalse ( _wardenService . isWardenServiceEnabled ( ) )
assertThat ( out . toString ( ) , containsString ( "Using timeout for story a_short.story of 25" ) )
Assert . assertTrue ( equalsResult )
assertEquals ( 3 , query . count ( ) )
assertSingleIssue ( issues , 8 , "For statement." , "10min" )
assertEquals ( ts , t . exec ( newTuple ( input ) ) )
assertEquals ( 10.0 , Solutions . bestOf ( solutions ) . getRoutes ( ) . iterator ( ) . next ( ) . getStart ( ) . getEndTime ( ) , 0.0 )
Assert . assertEquals ( 12 , analyser . getMaxLoad ( route ) . get ( 0 ) )
assertEquals ( "Con1 not found" , id , new Integer ( id ) )
Assert . assertTrue ( executor . awaitTermination ( 120 , TimeUnit . SECONDS ) )
Assert . assertEquals ( expResult , result )
assertThat ( history . selectLast ( - 4 ) , contains ( exit ( ) , dumpTo ( "C:\\\\Users\\\\franckc" ) , history ( ) , version ( ) ) )
Assert . assertNull ( actual )
assertTrue ( exceptionThrown )
assertEquals ( "<div> jsoup </div>" , doc . body ( ) . html ( ) )
Assert . assertNull ( job )
assertEquals ( 0 , queryPaths . length )
assertThat ( schema , allOf ( hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( OUT ) . withReferenceType ( TYPE_3 ) ) ) ) , hasEntry ( is ( TYPE_3 ) , hasProperty ( "predicates" , hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( Direction . IN ) . withReferenceType ( TYPE_2 ) ) ) ) ) )
assertEquals ( "valueA" , pc . getString ( "keyA" ) )
assertFalse ( deleteSubtasksHidden )
assertEquals ( "3 vuosituhannen p盲盲st盲" , t . format ( new Date ( 3155692597470L * 10L * 3L ) ) )
AssertAnnotations . assertSentences ( sentences , select ( jcas , Sentence . class ) )
assertNotNull ( symmetricAnnotation )
assertEquals ( ace , parsed )
assertNullOrEmpty ( MultiTainter . getMergedTaint ( arr ) )
Assert . assertTrue ( error != null && info != null )
assertFalse ( iter . hasNext ( ) )
assertTrue ( String . format ( "geoPos at <%d> is invalid" , i ) , geoPos . isValid ( ) )
assertEquals ( 3l , session . from ( $ ( emp ) ) . where ( $ ( emp ) . in ( emp1 , emp2 , emp3 ) ) . count ( ) )
assertNull ( osm )
assertNotNull ( dao . findByPK ( 123 , UserEntity . READSET_FULL ) )
assertThat ( tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) , is ( 1 ) )
assertThat ( range1 . isFinite ( ) , equalTo ( false ) )
assertFalse ( valid )
assertTrue ( detectWrap )
assertEquals ( "some text" , text )
assertEquals ( "Serialised data set" , expectedXML , actualXML )
assertTrue ( Objects . equals ( scores , expectedURIs ) )
Assert . assertEquals ( 0 , labels . size ( ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . END . getIndex ( ) )
Assert . assertEquals ( "a test.css" , br . readLine ( ) )
Assert . assertEquals ( Logger . EVENT_UNSPECIFIED . toString ( ) , markerCapture . getValue ( ) . getName ( ) )
assertEquals ( "GBP 3.57" , test . toString ( ) )
assertNotNull ( module )
Assert . assertEquals ( expectedResult , res )
assertEquals ( true , result )
assertFalse ( rule . isVersionValid ( null ) )
assertNotNull ( team1 . getId ( ) )
assertArrayEquals ( expected , Proto . build_fixed_str ( 3 , str ) )
assertEquals ( Long . valueOf ( timestamp ) , this . timestampValue )
assertEquals ( "22-16157603-G-C" , argument . getValue ( ) . getTranscript_consequences ( ) . iterator ( ) . next ( ) . getVariant_id ( ) )
assertEquals ( expected , modified )
assertNoOrders ( )
assertEquals ( asUnorderedSet ( o . logicalAxioms ( ) ) , asUnorderedSet ( o1 . logicalAxioms ( ) ) )
assertBeanValidation ( json , "query.metric[0].tags[0].host value must not be null or empty" )
Assert . assertTrue ( MsgUtils . compareIgnoringWhiteSpaces ( serializedRequest , fu . readFile ( "TradingSessionStatusRequest.xml" ) ) )
Assert . assertNotNull ( addressResultsDto )
assertNotNull ( node )
assertNotNull ( result )
assertEquals ( 2 , result . size ( ) )
assertOutsideEqualsValue ( "NaN" , Double . NaN )
assertThat ( requestedShutdownCallable . call ( ) , equalTo ( false ) )
assertThat ( parents , contains ( propertyB ) )
assertEquals ( asList ( "FOOFOO" , "BARBAR" , "BAZBAZ" ) , result )
assertImagesEqual ( servedImage , storedImage )
assertThat ( target , is ( not ( instanceOf ( Link . class ) ) ) )
assertThat ( msg , startsWith ( "Overlaps, file already exists" ) )
assertEquals ( false , result )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
Assert . assertEquals ( count , 4 )
assertEquals ( "/onlyDefaultRealmName" , picketLinkRequest . get ( ) . getServletPath ( ) )
assertThat ( actual , containsInAnyOrder ( "testSearchByReferenceIds01" , "testSearchByReferenceIdsGiven01" , "testSearchByReferenceIdsGiven01" ) )
assertEquals ( Arrays . asList ( expected . build ( ) ) , builder . build ( ) . getPipeline ( ) )
assertTrue ( actionServiceRegistered )
Assert . assertTrue ( "Optimal coverage was not achieved " , cov == 0.0 )
assertEquals ( TEST_2007_07_15_PONE , t )
assertTrue ( executor . getException ( ) instanceof V8ScriptCompilationException )
assertThat ( ( Long ) v , is ( 35L ) )
assertNull ( ivl )
assertEquals ( "foo" , c . getStyleName ( ) )
assertEquals ( Status . UNAVAILABLE , status )
assertThat ( sw . toString ( ) , is ( "{\\"value\\":\\"bar\\"}" ) )
assertEquals ( "<span>Car</span>" , output )
assertTrue ( translator . isMethodSupported ( "refreshUserMappings" ) )
assertEquals ( "left" , actual . getText ( ) )
assertIntValues ( array , 1 , 2 , 3 )
assertEquals ( "bcc@domain.com" , emailer . getProperties ( ) . getProperty ( "bcc" ) )
Assert . assertEquals ( createKeySpace . createQuery ( query ) , NETWORK_TOPOLOGY_STRATEGY )
assertTrue ( g1 instanceof PublicCloneable )
Assert . fail ( "Missing required input" )
assertEquals ( exp , res )
assertTrue ( resolver . isValid ( "test" , null ) )
assertEquals ( "a comment" , testSet . getTestResult ( 1 ) . getComments ( ) . get ( 0 ) . getText ( ) )
assertEquals ( 0 , cache . size ( ) )
assertThat ( asNumberArgument . getValue ( ) , equalTo ( 1 ) )
assertEquals ( 10 , classUnderTest . getColumOrder ( ) )
assertEquals ( "Method #toString is wrong" , "TextMapper{field=field, indexed=false, sorted=true, validated=true, analyzer=English}" , mapper . toString ( ) )
assertEquals ( expResult , result )
assertEquals ( PVManager . DEFAULT_THREAD_POOL_SIZE , pvReader . getMaxConcurrentTasks ( ) )
assertEquals ( expResult , result )
Assert . assertTrue ( "Failed to list resources: " + result , Operations . isSuccessfulOutcome ( result ) )
assertThat ( conf , containsString ( "<interaction><code value=\\"" + TypeRestfulInteraction . HISTORYINSTANCE . toCode ( ) + "\\"/></interaction>" ) )
assertFalse ( completed . get ( ) )
assertNotNull ( _logger )
assertTooltips ( )
assertNotNull ( feather . instance ( Plain . class ) )
assertEquals ( count , query ( ) . from ( cat ) . orderBy ( cat . id . stringValue ( ) . castToNum ( Long . class ) . asc ( ) ) . select ( cat ) . fetch ( ) . size ( ) )
assertThat ( graph . run ( ) . get ( ) , equalTo ( 5 ) )
assertEquals ( "The model type should be equals" , mt , otherModelType )
assertEquals ( "RESOURCE" , r . get ( String . class ) )
assertEquals ( "foo" , importAppropriate ( appRegistration ( ) ) )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
assertEquals ( expectedSize , actualSize )
assertParseTree ( rootNode ( "1" ) , relunctant )
assertTrue ( strings . isEmpty ( ) )
assertNotNull ( IncomingPhoneNumber . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "^/cntrl/actn/clients/([0-9]+)$" , pattern )
assertThat ( rdx . toString ( ) , not ( Matchers . isEmptyOrNullString ( ) ) )
assertEquals ( "3" , result . getXdmValue ( ) . itemAt ( 0 ) . getStringValue ( ) )
assertEquals ( vo . getPhoneNumbers ( ) . get ( 1 ) . getNumber ( ) , "5432109876" )
assertEquals ( "Expected " + value + " to be the same as " + expected , expected , actual )
assertEquals ( 0 , container1 . bytesField . get ( ) . length ( ) )
Assert . assertEquals ( 8 , result . intValue ( ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertActionFailedExceptionWithMessageIndicatingEditorWasUnableToActivateEditor ( )
assertNull ( command )
assertThat ( c , not ( nullValue ( ) ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertTrue ( "Origin " + localhostname + " is not allowed. Please check your hostname." , notebookServer . checkOrigin ( mockRequest , localhostname ) )
assertEquals ( 1 , count )
assertEquals ( true , result [ 0 ] )
assertEquals ( false , getMoveObjectDownAction ( ) . isEnabled ( ) )
assertEquals ( 1 , processInstances . size ( ) )
assertTrue ( msg . toString ( ) , expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
Assert . assertTrue ( testeeCacheGenerator . isUserPeriod ( ) )
assertContains ( e . getMessage ( ) , "'name'" )
assertNotNull ( reporter )
assertEquals ( "Unexpected status code in HTTP response." , SC_UNAUTHORIZED , statusCode )
assertions . endsWith ( sequence )
context . assertIsSatisfied ( )
assertTrue ( "Should get buffer" , responseReader != null )
assertEquals ( "Expecting well formed hql" , "from CcAndInferredLocationRecord cc ," + "ArchivedInferredLocationRecord in where cc.vehicleId= :vehicleId" + " and cc.vehicleAgencyId= :vehicleAgencyId order by cc.vehicleId desc " , hql . toString ( ) )
assertEquals ( "ISA*00*                *00*             *ZZ*SENDERID            *ZZ*RECEIVERID         030409*0701*U*00401*0000000001*0*T*:^" + "GS*1212*SENDERID*RECEIVERID*0701*000000001*X*00401^" + "ST*835*000000001^" + "BPR*DATA*NOT*VALID*RANDOM*TEXT^" + "TRN*1*0000000000*1999999999^" + "DTM*111*20090915^" + "N1*PR*ALWAYS INSURANCE COMPANY^" + "N7*AROUND THE CORNER^" + "N4*SHINE CITY*GREEN STATE*ZIP^" + "REF*DT*435864864^" + "N1*PE*FI*888888888*P.O.BOX 456*SHINE CITY*GREEN STATE*ZIP*EARTH^" + "LX*1^" + "CLP*PCN123456789**5555.55**CCN987654321^" + "CAS*PR*909099*100.00^" + "NM1*QC*1*PATIENT*TREATED*ONE***34*333333333^" + "DTM*273*20020824^" + "AMT*A1*10.10^" + "AMT*A2*20.20^" + "LX*2^" + "CLP*PCN123456789**444444.44**CCN987654321^" + "CAS*PR*909099*200.00^" + "NM1*QC*1*PATIENT*TREATED*TWO***34*444444444^" + "DTM*273*20020824^" + "AMT*A1*30.30^" + "LX*2^" + "CLP*PCN123456789**44
assertNotNull ( LastMonth . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "00000000000000000000000000000000000000000000000a" , key . getPublicKeyAsHex ( ) )
assertEquals ( expected , sanitized )
assertThat ( converter . convert ( formattedValue , BigDecimal . class , bundle ) , is ( equalTo ( theValue ) ) )
assertNotNull ( ids )
assertEquals ( incorrectQuery , query )
arrays . assertContains ( description , null , array ( "Yoda" ) )
Assert . assertEquals ( "Should have caused an exception" , XPathValidator . XPathExists ( xpath . getXPathWithoutDeclarations ( ) , "//*[@name='XPath']" ) , true )
assertMatrixEquals ( new double [ ] { - 20.0 , - 10.0 } , matrix , 1e-10 )
assertSeq ( new String [ ] { "<a/>" , "<b/>" , "c" } , "remove((/top/*, 'a', 'b', 'c'), 2)" )
assertEquals ( "OU=NiFi#
assertFalse ( hasPermission )
assertTrue ( "" , types != null && types . size ( ) == 1 && types . contains ( ProfileType . INDUSTRY ) )
assertEquals ( DATA , storage . loadPerson ( ID ) )
Assert . assertEquals ( true , agent . detectMobile ( ) )
assertEquals ( 2 , parsed . getContained ( ) . size ( ) )
assertEquals ( "Expected exception doesn't occurs" , ReplyCode . KO_STREAM_OPERATION_NOT_ALLOWED . getCode ( ) , ( Integer ) code )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( SPEC0_ENTITY_FIELD , entityDef . getEntityField ( ) )
assertEquals ( expected , elements )
assertTrue ( manager . isFragmentedMessageComplete ( 0 , 0 ) )
assertNull ( wrapperFilename )
Assert . assertEquals ( 0 , descriptors . size ( ) )
Assert . assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getCode ( ) )
assertTrue ( comparator . compare ( "/hotels/{hotel}/**" , "/**" ) < 0 )
assertEquals ( subject . getResources ( ) , childContext . getResources ( ) )
assertEquals ( "Hello {id}" , ResponseBodyInterpolator . interpolate ( "Hello ^{id}" , req ) )
assertNotNull ( avatar )
result . assertErrorFreeLog ( )
Assert . assertTrue ( users . size ( ) >= 0 )
assertEquals ( result , true )
Assert . assertEquals ( expectedURL , token . toURL ( ) )
assertEquals ( true , ConfigUtils . getOrNull ( config , "hello" , false ) )
Assert . assertEquals ( 100 , out . getTotalRecords ( ) )
assertions . doesNotContain ( value , index )
assertFalse ( peerAcceptanceUtil . isWorkerDisposed ( workerADeploymentID . getServiceID ( ) ) )
assertEquals ( stateModelDefinition , stateReplication . stateModelDefinition )
assertEquals ( "Failed decomposition" , poly , gcd0 )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Start>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Start>" , elem . toXml ( ) )
XMLAssert . assertXpathEvaluatesTo ( String . valueOf ( true ) , "//accepted" , response )
assertEquals ( Arrays . asList ( "Hello" , "World" ) , list )
assertThat ( client . getAvailableServers ( ) , is ( addresses ) )
assertEquals ( expectedMetricsEnabledDimensions , config . getMetricsEnabledDimensions ( ) )
assertNotNull ( Task . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 160 , query . getCacheCount ( cache , 160 ) )
assertTrue ( "testReinstateAuth 0" , it . isWithdrawn ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertDateEquals ( dateTime , result )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( "select entity_0 from Entity entity_0" , select . getQuery ( ) )
assertEquals ( hashed , BCrypt . gensalt ( ) )
assertEquals ( "invalid percent complete" , AnalysisSubmissionServiceImpl . STATE_PERCENTAGE . get ( AnalysisState . PREPARING ) , analysisSubmissionServiceImpl . getPercentCompleteForAnalysisSubmission ( ID ) , DELTA )
assertArrayEquals ( longng , m . getRecipients ( NEWSGROUPS ) )
Assert . assertTrue ( sut . isWeekday ( cal . getTime ( ) ) )
Assert . assertNotNull ( domain )
assertEquals ( 37.5 , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( 1 , lt . getJLanguageTool ( ) . getThreadPoolSize ( ) )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
assertThat ( getTemplateLabel ( jobSpec , LabelConstants . JOBNAME_LABEL ) , equalTo ( NAME ) )
Assert . assertEquals ( 1 , testUserList . getTotalCount ( ) )
assertNotNull ( result )
assertEquals ( 84 , id3tag . getWmpRating ( ) )
assertTrue ( eq . test ( entity . build ( ) ) )
Assert . isTrue ( "Updated Description" . equals ( newOrganization . getDescription ( ) ) && departmentList . size ( ) == newDepartmentList . size ( ) && departmentList . size ( ) > 0 )
AssertAnnotations . assertNamedEntity ( ne , select ( jcas , NamedEntity . class ) )
assertEquals ( expected , actual )
assertEquals ( expectedResult , verifyDrugref . invoke ( audit ) )
assertNull ( result )
Assert . fail ( "Cannot create EvictConfig with negative replicas" )
assertEquals ( "/projects/iur-service-client/target/classes" , actualObj )
assertThat ( _response . getStatus ( ) , is ( FORBIDDEN ) )
assertTrue ( jsonld . contains ( "\\"knows\\"" ) )
assertEquals ( 0 , entities . size ( ) )
assertArrayEquals ( expectedVector . toArray ( ) , node . marshal ( ) . toArray ( ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertThat ( target . readValue ( value ) , is ( false ) )
assertEquals ( statistics . getBatchSize ( ) , 1 )
assertThat ( logoutResponseXML , containsString ( "<samlp:LogoutResponse" ) )
assertNotNull ( view )
Assert . assertEquals ( - 1 , comparator . compare ( currentRelease , laterRelease ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ] , expectedResult , actualResult )
assertEquals ( hash1 , hash2 )
assertThat ( result , is ( new String [ ] [ ] { { "c" } } ) )
Assert . assertEquals ( "test" , res )
Assert . assertEquals ( json , writer . toString ( ) )
assertUid ( "2" )
assertThat ( augustHours , closeTo ( 144.0 , 0.1 ) )
Assert . assertTrue ( responseList . size ( ) < 2 )
assertEquals ( 3 , result . scoreDocs . length )
assertTrue ( Pattern . matches ( "(?s).*<html>\\\\s*<head>\\\\s*<title>\\\\s*attribute1.jsp\\\\s*</title>\\\\s*</head>\\\\s*<body>\\\\s*<input\\\\s*id=\\"username\\"\\\\s*type=\\"text\\"\\\\s*name=\\"username\\"\\\\s*maxlength=\\"32\\"\\\\s*onkeypress=\\"attrValue\\"\\\\s*size=\\"20\\"/>\\\\s*</body>\\\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( "http://localhost:8080/api/v1/key/123456/agency/1/command/predictions/" + "rs=16E|6010|rs=52|6010|rs=54|6010|format=json" , PredictionsUtil . encodePredictionsUrl ( preEncodedPredictionsUrl ) )
assertEquals ( expected , actual )
assertIteratedKeys ( x , "1" , "10" , "100" )
assertTrue ( errorsContainer . equals ( errors ) )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=all&minSupportCount=50" ) )
assertEquals ( 1 , foundPosts . size ( ) )
Assert . assertEquals ( 0 , analyser . getLoadAtBeginning ( route ) . get ( 0 ) )
assertArrayEquals ( new long [ ] { 1 , 2 , 3 } , result )
assertEquals ( "bar" , response . getEntity ( ) . getStringValue ( ) )
assertTrue ( hour1 . equals ( hour2 ) )
assertEquals ( key , target . getTypes ( ) . get ( 0 ) )
assertTrue ( result == 0 )
assertNotNull ( result )
assertEquals ( 5 , sut . getMaxDaysToKeepEntries ( ) )
Assert . assertEquals ( "Hello Kermit" , result )
assertSeen ( results , s0 )
assertThat ( array , is ( new double [ ] { 2 , 3 , 5 , 7 } ) )
assertNotNull ( assertion )
assertThat ( facade . getDriver ( ) , is ( nullValue ( ) ) )
assertNotNull ( coreMlFile )
assertNotNull ( fixture )
assertContains ( e . getMessage ( ) , "'id'" )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatusCode ( ) )
assertEquals ( CRS . forCode ( "Proj4::+init=epsg:4326" ) , op )
assertTrue ( matcher . match ( msg , rule ) )
assertEquals ( expected , toJSON ( object ) )
assertTrue ( "toDegrees() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( 1 , count )
assertThat ( output , contains ( "a" , "b" , "c" , "d" ) )
this . assertLoadBlobViaTuples ( tuples , true , false )
Assert . assertThat ( ret3 , Matchers . containsString ( sum + "," + 11 ) )
Assert . assertTrue ( "Headers not set correctly" , uic . getHeaders ( ) . isEmpty ( ) )
assertThat ( result , is ( translated ) )
assertTrue ( keyCodesSet . size ( ) == keyCodes . size ( ) )
assertEquals ( l0 , l1 )
assertNotNull ( target )
assertThatSql ( query , is ( "SELECT table.col1,table.col2 FROM table" ) )
Assert . assertFalse ( mockDevice . getDeviceExtension ( ArchiveDeviceExtension . class ) . isVisibleSOPClass ( "1.2.3" ) )
Assert . assertThat ( e . getMessage ( ) , containsString ( expected ) )
Assert . assertEquals ( expected , actual )
assertFootersJoined ( )
Assert . assertEquals ( "(new WebDriverWait(driver, 60)).until(new ExpectedCondition<Boolean>() {" + "\\n\\t\\t\\t\\tpublic Boolean apply(WebDriver d) {" + "\\n\\t\\t\\t\\t\\treturn true;" + "\\n\\t\\t});" , result )
assertEquals ( expectedUrl , authorizationUrl )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "data" , null , "{ foo: null, bar: 0 }" , ctx ) . pass )
assertSame ( Sex . MALE , select . getSelectedItem ( ) . orElse ( null ) )
assertEquals ( 3 , query ( func . args ( PATH1 , "CP1252" ) ) . length ( ) )
assertThat ( file , exists ( ) )
assertNotNull ( result )
assertThat ( result , is ( jsonNull ( ) ) )
assertEquals ( StrictMath . sin ( asin ) , sin )
assertEquals ( location2 , locationManager . retrieveLocation ( ) )
assertThat ( tester . request . getParameterValues ( "aaa" ) , is ( Arrays . asList ( MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate . class . getName ( ) , MyDelegate
assertNull ( "The theme was not deleted" , theme )
assertEquals ( r1 , r2 )
assertEquals ( "1-9223372036854775808" , _textBuilder . toString ( ) )
assertEquals ( TargetType . PILLAR_EXACT , target . getType ( ) )
assertEquals ( jid , component . getJID ( ) )
assertEquals ( "Incorrect color" , ColorSpaces . getHex ( ColorSpaces . #FF0000 ) , meta . getSampleInt ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( "We should have a complete header" , bufPos != - 1 )
assertEquals ( "<p>This <a>is</a> <a>jsoup</a>.</p>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( expResult , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff11_" ) )
assertEquals ( policy , policy2 )
assertThat ( applicationSettings . getProjectCreationSetting ( ) , is ( PROJECT_CREATION_ALLOWED ) )
Assert . assertEquals ( thisYear , age )
assertEquals ( pm . getPmDefaults ( ) . size ( ) , 1 )
assertEquals ( "{\\"first_name\\":\\"Max\\",\\"last_name\\":\\"Mustermann\\"}" , jsonb . toJson ( model ) )
assertTrue ( "The decrypted message was " + new String ( dec ) + "and must be " + "equal to " + TEST_XML_STRING , Arrays . equals ( dec , original ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
assertEquals ( "Wrong number of roof surfaces has been detected" , 1 , nDetect )
assertId ( items , result )
assertEquals ( expected , actual )
assertEquals ( testStyle , classUnderTest . getFunctionStyle ( ) )
assertTrue ( uit . isValid ( STR_VAL , STR_VAL ) )
assertThat ( allResourcePermissions . isEmpty ( ) , is ( true ) )
assertEquals ( DummyDrawHandler . drawCircleToString ( 50 , 100 , 10 , null , null , null , null ) , drawHandler . getLastDrawCall ( ) )
assertFalse ( result . passedValidation ( ) )
assertThat ( actual , sameJSONAs ( expected ) )
assertTrue ( hiveDatabaseMeta . isDriverVersion ( 5 , 5 ) )
assertThat ( isValid , is ( true ) )
assertEquals ( testResponse , response . get ( 0 ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertEquals ( 0 , RGW_ADMIN . listBuckets ( ) . size ( ) )
assertEquals ( "Wrong parameters" , createTestParameters ( ) , params2 )
assertEquals ( "Base for v4s is wrong" , "192.168.0.13" , parsed )
Assert . assertEquals ( 2 , result . length ( ) )
assertEquals ( "Darwin" , output . get ( id ) )
assertTrue ( supportsPlacement )
assertFalse ( CacheUtils . isSymbolicLink ( "/test_file.txt" , cache ) )
assertTrue ( ( ( BooleanType ) respParam . getParameter ( ) . get ( 0 ) . getValue ( ) ) . booleanValue ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([-30, 0, 0]) (empty)" , cube1 )
assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
Assert . assertEquals ( present , listener )
assertEquals ( 80 , count )
assertEquals ( 1 , dao . create ( foo ) )
Assert . assertNotNull ( savedTenant2 )
assertThat ( control . matches ( "/clients/5/subtask/6/" ) , is ( true ) )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( "http://tempuri.org" , w . getFundingGroup ( ) . get ( 0 ) . getFundingSummary ( ) . get ( 0 ) . getUrl ( ) . getValue ( ) )
Assert . assertNotNull ( cred )
assertEquals ( "{\\"text\\":null}" , toJSON ( title ) )
assertThat ( shortForm , is ( equalTo ( "root-ontology" ) ) )
assertEquals ( 0 , services . size ( ) )
assertFalse ( instance . hasNext ( ) )
assertEquals ( response . getStatus ( ) , 200 )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertTrue ( Arrays . equals ( svalues . toArray ( new ServiceValue [ 5 ] ) , svalues1 ) )
Assert . assertEquals ( "Google" , actualValue )
assertEquals ( "bar" , patchedVer . get ( "hodor" ) )
assertTrue ( hash == 0x0920e0c1b7eeb261l )
assertEquals ( 0 , map . size ( ) )
assertEquals ( query , result )
Assert . assertEquals ( "query\\n" , query . getCommandText ( ) )
assertTrue ( "Short Ref empty" , constraintViolations . size ( ) == 1 )
assertEquals ( "9A3F" , production . getJobIds ( ) . get ( 0 ) )
assertEquals ( vars ( "a" , "b" , "c" ) , getNonPseudoVars ( csv , true ) )
assertEquals ( 0 , result )
assertEquals ( 1 , proc . getProjectedSymbols ( ) . size ( ) )
assertCount ( 3L , "one >= ?" , value ( 2 ) )
assertEquals ( bookVersion , QBookVersion . join ( bookMark , "," ) )
assertEquals ( 9 , array [ pivot ] )
assertSameEnumeration ( "PostOrderModel" , coreEnum , xEnum )
assertThat ( underTest . isAccessAllowed ( httpServletRequest ) , is ( false ) )
assertTrue ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_3_BYTE_CHAR ) )
assertNull ( principal )
assertTrue ( helper . getFileObjects ( ) . isEmpty ( ) )
assertEquals ( mvj . get ( "ProgressStatus" ) , null )
assertEquals ( res , 1 )
assertCard ( expectedCard , "http://magiccards.info/m14/en/5.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( expected , result . getAttributes ( ) )
assertNotNull ( propSchema )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 0 ) , both ( hasEntry ( "resourceVersion" , Integer . toString ( INITIAL_RESOURCE_VERSION ) ) ) . and ( hasEntry ( "labelSelector" , LabelConstants . CREATEDBYOPERATOR_LABEL ) ) )
assertEquals ( LocalDate . of ( 2009 , Month . JUNE , 1 ) , fourthQuarter )
assertTrue ( file . exists ( ) )
assertEquals ( "new_end" , vRoute . getEnd ( ) . getLocation ( ) . getId ( ) )
assertTrue ( testEntity . isNew ( ) )
assertEquals ( 1 , tables . size ( ) )
assertSame ( rb . getViewBuffer ( ) , result )
Assert . assertNotNull ( "The returned digester for  '" + algorithm + "' algorithm is null." , digester )
assertThat ( check . isCompatible ( ) , is ( true ) )
assertThat ( builder , hasToString ( "<script type=\\"text/javascript\\">/* <
assertEquals ( expResult , result )
assertions . doesNotContain ( value , index )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 } )
assertEquals ( expResult , result )
assertEquals ( 1 , session . from ( $ ( noteVar ) ) . where ( where ) . list ( $ ( noteVar ) ) . size ( ) )
assertEquals ( "lalala@example.com" , dss . parseEmail ( ) )
Assert . assertEquals ( data [ i ] * i , m . getEntry ( i , i ) , 0d )
assertThat ( handler , is ( instanceOf ( PersonValidator . class ) ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . FUNDING_READ_LIMITED )
assertEquals ( "g1.js" , groupNames . get ( "g1.js" ) )
assertEquals ( "hello, world!" , result )
assertThat ( conf , instanceOf ( ClearCacheConfirmation . class ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( isDepartmentValid , is ( Boolean . FALSE ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
Assert . assertEquals ( CORSFilter . CORSRequestType . INVALID_CORS , requestType )
assertNotNull ( Revision . reader ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertFalse ( matchResult )
assertRecurrencesCorrect ( "MINUTE" , 3 , process ( trigger ) . getMinuteRecurrences ( ) )
assertFalse ( validator . validate ( EntityNames . STUDENT , studentIds ) . equals ( studentIds ) )
assertTrue ( engine . getConfiguration ( ) . getResolvers ( ) . isEmpty ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 5 , analyser . getLoadAtBeginning ( route ) . get ( 0 ) )
assertEquals ( expectedScript , observedScript )
Assert . assertFalse ( "shouldn't have written" , irodsFileOutputStream . exists ( ) )
assertThat ( result . contains ( expectedString ) , is ( true ) )
assertEquals ( "Wrong cipher suites for " + cipherSuite , cipherSuite , sslParameters . getProtocols ( ) )
assertTrue ( className . equalsIgnoreCase ( Integer . class . getSimpleName ( ) ) )
assertEquals ( "fake-token" , kc . getAccessToken ( ) )
assertEquals ( "application/json;odata.metadata=minimal" , request . getResponseContentType ( ) . toContentTypeString ( ) )
Assert . assertEquals ( expected , resultString )
Assert . assertEquals ( avroData . toString ( ) , avroMessage . toString ( ) )
assertThat ( sequencerContext . getNamespaceRegistry ( ) , is ( sequencerContext . getNamespaceRegistry ( ) ) )
assertEquals ( 10L , FutureUtils . result ( target ) . longValue ( ) )
assertEquals ( 200 , ctx . getResponseCode ( ) )
assertEquals ( now , result )
assertEquals ( random , decrypted )
Assert . assertEquals ( 0 , ( ( List < User > ) ret . getValue ( ) ) . size ( ) )
assertEquals ( object . doubles , result . doubles )
assertEquals ( responsesRemaining , collector . getResponsesRemaining ( ) )
assertTrue ( converter . canRead ( clazz , mediaType ) )
assertSizes ( validator , char [ ] . class )
Assert . assertTrue ( message , expected . equals ( actually ) )
assertEquals ( singleValue , stats . getStatisticValue ( Statistic . VARIANCE ) )
Assert . assertEquals ( state . IDLE , state )
assertEquals ( "/home/work" , mConfiguration . getString ( PropertyKey . WORK_DIR ) )
Assert . fail ( "Instantiation should fail" )
Assert . assertTrue ( h . match ( cookie , origin ) )
assertEquals ( fifth , found )
assertEquals ( "bar" , view . getHeaderText ( ) )
Assert . assertFalse ( result )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertEquals ( 0 , _driver . getJobs ( ) . size ( ) )
assertEquals ( E * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( "org.apache.hadoop.fs.shell.Ls" , cmd . getClass ( ) . getName ( ) )
assertGenerators ( result , generator . getClass ( ) )
Assert . assertEquals ( 86300000L , newDate . getTime ( ) - date . getTime ( ) )
Assert . assertEquals ( simple . getName ( ) , name )
assertNull ( m )
assertMatrixEquals ( "shifted" , Matrices . create ( 7 , 7 , new double [ ] { 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
assertEquals ( 2 , l . size ( ) )
Assert . assertNull ( retireable . getRetireReason ( ) )
assertThat ( module . getMappingFiles ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertSeen ( results , s0 )
assertTrue ( repository . getFeatureState ( DummyFeature . TEST ) . isEnabled ( ) )
assertEquals ( "OK" , response )
Assert . assertTrue ( errMsg , appId . endsWith ( expectedAppId ) )
assertExtendedEquals ( expected , dd , PRODUCT_TOLERANCE_FACTOR )
assertFalse ( cmd . onCommand ( sender , new CommandParser ( plugin , args , 1 ) ) )
assertEquals ( 0.0 , result , TOL )
assertSplit ( result , stringToSplit )
assertEquals ( Resolution . KEEP , subject . getResolution ( ) . get ( ) )
assertTrue ( url2 == url1 )
Assert . assertEquals ( "The file is packaged as test-dependency-test-1.0.0.jar" , "test-dependency-test-1.0.0.jar" , file . getName ( ) )
assertEquals ( "Response users should be equal to the mocked users" , mockedUsers , responseUsers )
Assert . assertTrue ( testedStore . existProperty ( "logX" ) )
assertEquals ( expectedData , filteredData )
assertFalse ( impl . isLate ( ) )
assertNotNull ( Country . reader ( ) . read ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( original , transformersSubRegistration . get ( address ) )
assertSame ( e , result )
assertEquals ( test , output . readString ( ) )
assertSame ( "Wrong conversion handler" , handler , config . getConversionHandler ( ) )
assertEquals ( expectedValue , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( "<abc_def id=\\"1\\">Hello</abc_def> <abc-def>There</abc-def>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "testCreatesFooClass" , generatedName )
assertTrue ( view . showPaging ( ) )
assertEquals ( "bar" , s )
assertEquals ( expResult , result )
assertEquals ( "Wrong toString" , "DBConfig{path=true, reverse=true}" , o1 . toString ( ) )
Assert . assertEquals ( "(aa_range (aa_point_location (aa_char Cys) Ter 125) _ (aa_point_location (aa_char Ala) Ter 123))" , loc . toStringTree ( parser ) )
assertEquals ( "abcdef0123456789" , room . getRoomId ( ) )
assertThat ( ddlParsers . getDdlParsers ( ) , is ( myParsers ) )
assertThat ( subject . getAbuseContact ( autnum ) . isPresent ( ) , is ( false ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertSetDirty ( )
Assert . fail ( "Error retrieving customer list caused by: " + e . getMessage ( ) )
assertThat ( result , equalTo ( true ) )
assertEquals ( " Echo Message = vasu" , response )
assertNotNull ( result )
assertTrue ( "Aggregate sasl server factory should be created" , ops . exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertEquals ( 2 , capturedEvent . getValue ( ) . getRemovedItemsCount ( ) )
assertEquals ( CONF_DIR , appConfig . getConfDirectory ( ) )
assertThat ( Arrays . asList ( new float [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ) , hasSize ( 0 ) )
assertFactorization ( poly , f )
assertEquals ( 0x9000 , responseApdu . getSW ( ) )
assertThat ( MomentInterval . between ( m1 , m2 ) . toZonalInterval ( ZonalOffset . UTC ) , is ( TimestampInterval . between ( t1 , t2 ) ) )
assertNotNull ( entityAsInserted )
assertEquals ( "one" , firstElement )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertNull ( ic . getItem ( 0 ) )
assertThat ( noOfSolutions , is ( 16 ) )
runner . assertAllFlowFilesTransferred ( PublishKafkaRecord_0_11 . REL_FAILURE , 3 )
assertEquals ( results , lcsMatch )
assertNotNull ( result )
assertEquals ( 10 , ref . atomicGet ( ) )
Assert . assertFalse ( element instanceof ExclusiveElement )
assertEquals ( expectedDocumentProjects , retDocumentProjects )
Assert . assertTrue ( "The list is not ordered descending" , sortedTestFields . equals ( testFields ) )
assertEquals ( "3.141592653589793" , parseExpression ( "cast( 3.141592653589793\\t, Edm.SByte
Assert . fail ( "Expected an exception" )
assertEquals ( expected , actual )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 2 , conceptSearchResultList . size ( ) )
assertEquals ( "foo==2011-03-01" , ret )
throwables . assertHasRootCauseMessage ( INFO , error , null )
assertSame ( expected , actual )
assertEquals ( expectedResult , result )
assertEquals ( "test.war" , normalizeArchiveName )
assertEquals ( FOUR_LINES_REMOVED_SCORE + GLASS_OVERFLOWN_PENALTY , playerScores . getScore ( ) )
assertSame ( stringMessageBodyReader , applicationProviders . getMessageBodyReader ( String . class , null , null , TEXT_PLAIN_TYPE ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'integer',format:'int32'}}}" , s . getSchema ( Simple2dList . class ) )
assertTrue ( bugs . toString ( ) , bugs . isEmpty ( ) )
assertEquals ( o1 , o2 )
assertEquals ( testSeed , new ContinuesRandomGenerator ( testSeed , NO_TESTS_PER_CASE ) . initialize ( ) . get ( ) )
assertEquals ( expected , map . getMap ( ) )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "serverUrl" , SINGLE_TIBCO_BROKER ) )
assertTrue ( instance . runCommand ( ) )
assertThat ( resourceLocators . size ( ) , is ( 1 ) )
assertEqualHash ( byteBuffer , murmur3a )
assertThat ( signature , hasItem ( namedIndividual ) )
assertNotNull ( result )
assertEquals ( innocent , back )
assertEquals ( cache , sut . getCache ( ) )
assertEquals ( "Wrong value" , ( short ) 0xef , u . s8 . get ( ) )
assertEquals ( 0xffffffffffffffffL , result )
mojos . assertBuildOutputs ( new File ( basedir , "target" ) , "classes/proc/Source.class" , "classes/proc/GeneratedSource.class" , "classes/proc/GeneratedSourceSubclass.class" , "generated-sources/annotations/proc/AnotherGeneratedSource.class" , "classes/proc/AnotherGeneratedSource.class" )
assertThat ( property , is ( " hibernate.enabled" ) )
assertThat ( data . getOriginal ( ) , is ( "{\\"str\\":\\"hoge\\",\\"nest\\":[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]}" ) )
assertEquals ( project2 . getCascadingProject ( ) , project1 )
assertTrue ( exp instanceof ASTCurrentTimestamp )
assertThat ( logRecords , containsInfo ( CREATING_CRD ) )
assertEquals ( "Expected " + tableList . size ( ) + " actual " + tableList , expectedTableList , actualTableList )
assertEquals ( 255 , result . getVoxel ( 5 , 15 , 5 ) , .01 )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Integer" ) )
TestsIOUtils . assertEqualSets ( documents , new AvroDataStoreReader < DocumentWithoutTitle > ( path , DocumentWithoutTitle . SCHEMA$ ) )
assertNotNull ( entryCaptor . getValue ( ) . getStackTraceWriter ( ) )
assertPlanMatches ( access )
assertEquals ( "bill" , fake . name ( ) )
Assert . assertEquals ( configuration . getLong ( KafkaConfig . KAFKA_TEST_MESSAGE_COUNT_KEY ) , KafkaConsumerUtils . INSTANCE . getNumRead ( ) )
assertSingleElementCollection ( testCommandClientId , executeIds )
assertThat ( userCount , is ( 1 ) )
assertNull ( task )
assertNull ( classUnderTest . getTableFrameXmlBean ( ) )
assertEquals ( "1.0.0" , v2 . toString ( ) )
Assert . assertTrue ( hasIndexHashKeyEqualCondition )
Assert . assertTrue ( hedgeErrorRMS < 0.01 )
assertEquals ( Arrays . asList ( "ok" , "test" ) , list )
context . assertIsSatisfied ( )
assertNotEquals ( table1 , table2 )
assertEquals ( AnnotationDataDummy . CLASS_CACHE , data . getCacheName ( ) )
assertThat ( msg . getValue ( ) , containsString ( "Error message: expected exit value" ) )
assertEquals ( ( timeBucket - 3600 ) * 3600 , timeBucket )
assertEquals ( "Fusco" , person . getLastName ( ) )
assertEquals ( "r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator , sw . toString ( ) )
Assert . assertEquals ( "example (wiki:XWiki.user (127.0.0.1): action on null at null)" , ex . toString ( ) )
assertNull ( value )
Assert . assertEquals ( 5 , age . getBuckets ( ) . size ( ) )
Assert . assertEquals ( new Complex ( 0.0 , 0.5 ) , z . reciprocal ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 1 , undefRes . size ( ) )
assertEquals ( ValidationResult . Result . OK , validationResult . getStatus ( ) )
assertNull ( cfg . getProperty ( "foo.bar" ) )
assertEquals ( expected , actual )
assertMessages ( "write" , 1 , "write_bytes_offset" )
assertTrue ( "value was " + Arrays . toString ( target ) , Arrays . equals ( expected , target ) )
assertEquals ( 0 , snapshots . size ( ) )
assertEquals ( "127.0.0.1" , strategy . hash ( infoMock , 0 ) )
assertEquals ( now , gelfMessage . getTimestamp ( ) )
assertEquals ( "mycmd a\\\\b" , s )
assertThat ( result , is ( sameInstance ( cacheFileMetadataRequest ) ) )
assertEquals ( list . get ( 0 ) . getName ( ) , "testUpdate" )
assertNotNull ( result )
assertSame ( policy , dest . getServerPolicy ( ) )
assertEquals ( 123 , result )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( "incorrect value" , result , aNumber . toString ( ) )
assertThat ( isValid , is ( true ) )
assertEquals ( packet , p )
assertTrue ( false )
assertNotNull ( constraints )
assertEquals ( b . build ( ) , doc )
assertThat ( output . get ( ) , hasContent ( "first" ) )
assertEquals ( "Failed to match 2 xrefs" , 2 , i )
assertEquals ( e1 , e2 )
assertEquals ( Boolean . TRUE , methodOutcome . getCreated ( ) )
Assert . assertEquals ( "winphonealert" , notification . toJSON ( ) )
assertThat ( testValue . copy ( TestValueType . AGE . of ( 42 ) ) , equalTo ( new TestValueType ( TestValueType . NAME . of ( "Hello" ) , TestValueType . AGE . of ( 42 ) ) ) )
assertThat ( jcrWorkspaces , is ( graphWorkspaces ) )
assertFound ( Files . newDirectoryStream ( dir , "1*" ) , child , child2 )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertEquals ( "Method toString is wrong" , "BooleanMapper{field=field, indexed=false, sorted=true, validated=true, column=field}" , mapper . toString ( ) )
assertEquals ( euclideanAssertion , result )
Assert . assertEquals ( "EXECUTE ERROR:" , sqltrue , sqlnew )
assertNotNull ( instanceXml )
assertEquals ( 0 , start . getSize ( ) . get ( 0 ) )
assertNotNull ( dao )
assertDiedCount ( playerA , "Pillarfield Ox" , 1 )
assertOut ( "a.setAttribute(z, 'foo')" )
assertEquals ( expected , new ResolverUtil ( ) . extractPath ( url ) )
assertTrue ( main . getWidget ( dataset . visible ) . isVisible ( ) )
assertNotNull ( manager . x )
assertEquals ( countryName , "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country-United%20Kingdom>" )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( connMock , dbcManagerSpy . getPooledConnection ( DBType . MYSQL , DB_URL , DHARMA_USER , DHARMA_PASSWORD ) )
Assert . assertEquals ( result . toStringWithoutTime ( ) . trim ( ) , expectedResult . trim ( ) )
assertThat ( gtx . get ( HogeMeta . get ( ) , key , key ) , is ( notNullValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( - 626025600001L , m . getFirstMillisecond ( c ) )
assertEquals ( 1 , tasks . size ( ) )
assertEquals ( converter . getClass ( ) , converterDescription . getImplementationClass ( ) )
assertThat ( output , CoreMatchers . containsString ( "Trigger deleted:" ) )
assertEquals ( profile . getAttributes ( ) . get ( "uid" ) , "user123" )
Assert . assertSame ( this . patient , this . mocker . getComponentUnderTest ( ) . get ( this . patientReference ) )
assertEquals ( true , code . toString ( ) . contains ( "d<-3\\n" ) )
assertNotNull ( result )
assertThat ( serialized , is ( equivalentTo ( instance ) ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( target . matchExactly ( ( FlowAction ) action ) , is ( true ) )
Assert . assertEquals ( "value" , ds . getStringProperty ( ) )
assertBreadcrumbsAreEqual ( actualList , expectedList )
assertEquals ( 10 , l . size ( ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 LEFT OUTER JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertEquals ( 2 , result . size ( ) )
assertThat ( InvertListNumber . index ( actualCoords , sizes , invert ) , equalTo ( index ) )
assertEquals ( "http://java.example.com:8080/foo/bar" , got . toString ( ) )
Assert . assertEquals ( N , command . execute ( ) )
assertMatrixEquals ( expectedTableau , tableau . getData ( ) )
propertyChangeListenerTester . assertPropertyChanged ( 1 )
assertConfigErrorForMissingAttributeRequired ( data )
assertEquals ( 10 , blc . size ( ) )
propertyChangeListenerTester . assertPropertyChangedEvent ( )
assertEquals ( "Hello World" , request . headers ( ) . getFirst ( HttpHeaderNames . ACCEPT_ENCODING ) )
assertThat ( root . getType ( ) , is ( Type . SCHEDULING_POINT ) )
assertThat ( extractMonitorables ( histogramAdapter ) . get ( MEDIAN ) . get ( ) , Matchers . < Object > is ( newMedian ) )
assertEquals ( unit1 , unit2 )
Assert . assertEquals ( "LOAD DATA INFILE 'data.txt';\\n" , text )
assertEquals ( or01 , or02 )
Assert . assertEquals ( clickMe . getText ( ) , buttonText )
assertTrue ( areBonded ( atom1 , atom2 ) )
assertEquals ( "%1-%2 something %1-%3" , BufferTools . substitute ( source , "%X" , "XXXXX" ) )
Assert . assertEquals ( expected , pass . concretizeCell ( term ) )
assertEquals ( String . valueOf ( me . getCode ( ) ) , me . getNick ( ) )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_BOOLEAN ) )
assertEquals ( pool , pool . getSwimmingPool ( ) )
Assert . assertNull ( result )
assertEquals ( sha1sum , instance . getSha1sum ( ) )
assertContentChanges ( changes )
assertEquals ( p1 , p2 )
assertEquals ( 2 , objects . size ( ) )
this . tester . assertContains ( "<p class=\\"empty\\">hello
assertThat ( this . subject . isAuthenticated ( ) , is ( true ) )
Assert . assertEquals ( "/start%20%2A~%2Bend" , getLine ( PATH_LINE , canonicalRequest ) )
assertThat ( result , is ( true ) )
assertTrue ( model . contains ( parent , child ) )
Assert . fail ( "Expected failure" )
assertEquals ( 0 , handlers . length )
Assert . fail ( "This sequencer run should not exist, should not have lanes, and should show a 404 Not Found" )
assertTrue ( mappedUrl . startsWith ( expectedPath ) )
assertEquals ( 3 , count )
assertEquals ( "Invalid default port" , 4573 , defaultAgiServer . getPort ( ) )
assertThat ( body , not ( containsString ( "<p></p>" ) ) )
assertTrue ( videos . contains ( video ) )
assertTrue ( 0 > v . compareTo ( v ) )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertEquals ( "Wrong number of entries" , 2 , entries . size ( ) )
assertEquals ( Status . DOWN , impl . getStatus ( ) )
assertDocumento ( documentoCreado )
assertThat ( result , is ( "Network Component" ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertEquals ( 10 , getCache ( provider , "bar" ) . capacity )
assertEquals ( 2 , result . getSize ( ) )
assertEquals ( 2 , e1 . getObjectContext ( ) . performQuery ( query ) . size ( ) )
assertThat ( "same relationship from index" , lookedUpRelationship , is ( relationship ) )
assertFalse ( or . isDefined ( ) )
assertThat ( Lists . newArrayList ( iterable ) , contains ( "Hello" , "World" ) )
assertThat ( ( Boolean ) dummyExpression . evalChildAsBoolean ( 0 , returnNode , super . variables , super . functions , super . expressions ) , is ( true ) )
this . assertIndexOkResponseJsonStructure ( 0 , 10 , response )
assertEquals ( s . toString ( ) , expecting )
assertEquals ( UnresolvedAddressException . class , thrown . getClass ( ) )
assertTrue ( stopAtFirstIneligibleField ( field ) . isEmpty ( ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp1 , result ) )
assertEquals ( CSV_FILE , writer . toString ( ) )
assertEquals ( AppConfigProperties . DEFAULT_HIBERNATE_CONFIG_PATH , spyAppConfigProperties . getHibernateConfigPath ( ) )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertTrue ( accountOperations . isEmpty ( ) )
assertTargetInstanceIsOriginalModel ( )
Assert . assertNotNull ( scheduler )
assertNotNull ( domain )
assertNull ( extensionMapping )
assertTrue ( nodeExists ( serviceNode ) )
assertMockEndpointsSatisfied ( )
assertTrue ( file . getAbsolutePath ( ) . contains ( "java8" ) )
assertEquals ( 0 , listLocationEvent . size ( ) , 0 )
assertThat ( result . httpRequestType , equalTo ( "GET" ) )
Assert . assertNull ( m )
Assert . assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertEquals ( definition , om . readValue ( "CKeyspaceDefinitionTestData.js" , String . class ) )
assertThat ( conv , is ( "12:44:22.123" ) )
Assert . assertEquals ( "existsIn(IndexedCollection<Garage>, \\"name\\", \\"brandsServiced\\", equal(\\"location\\", \\"Dublin\\"))" , query . toString ( ) )
assertFalse ( filter . shouldDeliverNotification ( eventContext ) )
assertEquals ( expected , actual )
assertEquals ( "q w" , result )
assertFloatEquals ( "X position moved over the edge" , 64F , viewportVector . getX ( ) )
Assert . assertEquals ( "somethingmock" , ret . getValue ( ) )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( IntegerUtil . toInteger ( i ) . intValue ( ) , is ( 1 ) )
assertThat ( result , is ( false ) )
assertEquals ( "input" , action . execute ( ) )
assertTrue ( "timestamp changed" , first != second )
assertFalse ( result )
assertSame ( expected , actual )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd" ) . format ( dt ) , new SimpleDateFormat ( "yyyy-MM-dd" ) . format ( dueDate ) )
assertTrue ( connectTimeout > 0 )
assertEquals ( "MethodKey['debugString', 'List<String>, Void']" , str )
arrays . assertContains ( description , actual , null )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
Assert . assertEquals ( 1.0D , StreamsTestUtils . getMetricByName ( driver . metrics ( ) , "skipped-records-total" , "stream-metrics" ) . metricValue ( ) )
context . assertIsSatisfied ( )
assertTrue ( "Expected session to be closed" , connectFuture . isClosed ( ) )
assertTrue ( observer . accept ( path ) )
assertEquals ( result . build ( ) . find ( ArrayElement . class , "values" ) . get ( 0 ) . getEntries ( ) , myTestInstance . distinct ( builder ) . toList ( ) )
assertEquals ( "/sendError" , view )
assertNotNull ( cache . getFileChecksum ( ) )
assertThat ( domain . getReadOptions ( ) . getReadDomain ( ) , is ( equalTo ( DOMAIN_V2_SAMPLE_YAML_3 ) ) )
assertEquals ( "b:alt 2 a:alt 1\\n" , found )
assertEquals ( "Organization/AAA" , p . getManagingOrganization ( ) . getReference ( ) )
Truth . assertThat ( callable . call ( 1 ) )
assertEquals ( 3 , NDArrayMath . matricesPerSlice ( arr ) )
assertEquals ( "http://foo/Patient?no-params=aaa&_no-params=inc1" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertJsonEquals ( "{hello:'world',foo:'bar'}" , JsonSerializer . serialize ( doc ) )
Assert . assertTrue ( reporter . hasReportedStartup ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import org.kissmda.AException;\\n" + "import org.kissmda.BException;\\n" + "public class ClazzName {\\n" + "  public void doSomething(  Name values) throws AException {\\n" + "         throw new org.kissmda.AException();\\n" + "  }\\n" + "  public void doSomething3(  Name values) throws AException, BException {\\n" + "
assertFalse ( v . isReturnToDepot ( ) )
assertEquals ( expected , cls )
assertEquals ( "3.5.13" , verison )
Assert . assertTrue ( "should have only one file in the collection" , nbrFilesInDir == 1 )
assertTrue ( tuple instanceof StaticBinding )
assertEquals ( "TEXT" , p2 . getCode ( ) . getText ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . MISSING_SOURCE_QUEUE , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertThat ( Asn1DerDecoder . readSubjectPublicKeyAlgorithm ( data ) , is ( "DSA" ) )
assertThat ( rows . getPagedData ( ) . getValues ( ) , is ( mockExpression ( "rowCount" ) ) )
assertLogEvent ( logEvent )
assertNull ( layout . getLayout ( ) )
assertThat ( value , is ( equalTo ( 1024L ) ) )
assertEquals ( extractedYAML , expectedYAML )
Assert . assertTrue ( ! result . isSetName ( ) && ! result . isSetDescription ( ) && ! result . isSetDefinition ( ) )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertNull ( constraints . getExpiryTime ( ) )
assertEquals ( "{\\"out1\\":\\"\\"}" , toJson )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , query1 ) )
Assert . assertEquals ( DMLScript . RUNTIME_PLATFORM . EXPLAIN , o . execMode )
assertZippelGCD ( gcd , a , b )
assertEquals ( comboBox . getItemCount ( ) , comboBox . getItemCount ( ) )
assertEquals ( origDatagrams [ testIdx + 1 ] , d )
assertThat ( attributeValues . getProperties ( ) , contains ( "x" , "y" ) )
assertArrayEquals ( new BigDecimal [ ] { 1 , 2 , 3 } , params . valuesAsBigDecimalArray ( "a" ) )
assertEquals ( rs1 , rs2 )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( TestUtil . HTTPS_TEST_PROXY , result . get ( 0 ) )
assertEquals ( "a.b*$PI" , expression . evaluate ( null ) )
assertThat ( extractor . extractDataModelCondition ( sheet ) , is ( ( Object ) EnumSet . allOf ( DataModelCondition . class ) ) )
Assert . assertThat ( rdbStore . getRdbStore ( ) , is ( nullValue ( ) ) )
assertOut ( "var a:* = function() {\\n}" )
assertEquals ( "short field not aligned" , MAGIC , testlib . struct_align_Signed16 ( s ) )
assertSame ( test , base )
assertEquals ( "Registering a command doesn't make sense" , "foo" , command . getName ( ) )
assertEquals ( version . toString ( ) , "1.0" )
assertSame ( result , sameResult )
assertEquals ( "Digest realm=\\"custom\\"" , scheme )
assertEquals ( 2 , repository . getCommits ( ) . size ( ) )
assertNotNull ( result )
Verify . assertSetsEqual ( UnifiedSet . newSetWith ( "John's Saving Account 2" , "Savings" ) , accounts . asEcList ( ) . collect ( CustomerFinder . name ( ) ) . toSet ( ) )
assertEquals ( "Expected at least 4 columns" , 4 , table . getColumnCount ( ) )
assertThat ( file . exists ( ) , is ( true ) )
Assert . assertEquals ( expectedKeys , actualKeys )
Assert . assertEquals ( 1 , rcs . size ( ) )
assertEquals ( "first=value1&second=value2" , getLastRequestQuery ( ) )
assertNotNull ( victim . getInputStream ( mockRequest , mockResponse , "http://www.google.com" ) )
assertThat ( doc . getKey ( ) , is ( notNullValue ( ) ) )
assertNotEquals ( one , Setting . class )
assertEquals ( "Address" , type . getName ( ) )
Assert . assertEquals ( 12 , analyser . getLoadRightAfterActivity ( route . getActivities ( ) . get ( 1 ) , route ) . get ( 0 ) )
assertTrue ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( 1 , listeners . size ( ) )
assertEquals ( "SimpleSens ('" + valueSensDirect + "')" , retour . toString ( ) )
Assert . assertEquals ( matrixCplx_EXPECTED , matrixCplx_ACTUAL )
assertEquals ( action . getShowWeekender ( ) , true )
assertResultSet ( res )
Assert . assertFalse ( impl . canCachedResponseBeUsed ( host , request , entry , now ) )
assertThat ( backToJson , sameJSONAs ( ( Object ) asTinkerpop ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( expected , cassandraRowMapper . map ( resultSet ) . next ( ) )
assertTrue ( "should run containing matching method" , exactFilter . shouldRun ( secondTestMethod ) )
assertTrue ( handler . supportsView ( ComplexObsHandler . RAW_VIEW ) )
Assert . assertTrue ( updatedRows > 0 )
assertFalse ( result . isResult ( ) )
context . assertSentrySemanticException ( statement , "CREATE database " + DB2 , semanticException )
assertEquals ( "di.me meeting" , updated . getPrefLabel ( ) )
assertEquals ( TEST_URL , popup . getWindowHandle ( ) )
assertImgSubOneEquals ( in , out )
assertEquals ( ReadConcern . READ_CERTS , parsedReadConcern )
assertThat ( match , is ( BestTypeMatch . NEUTRAL ) )
assertEquals ( Integer . class , collectionParameterType )
assertEquals ( id , dc . getClientID ( ) )
assertEquals ( "8=FIX.4.4|9=82|35=A|34=1|49=SC|50=SS|52=20140101-10:10:10.100|56=TC|57=TS|98=0|108=30|141=Y|383=8192|10=080|NEXT MESSAGE" , getReceivedEmail ( ) )
assertTrue ( downloader . getClass ( ) . equals ( CachedDownloader . class ) )
assertThat ( identifiedPrincipals , hasItems ( new UidPrincipal ( 1000 ) , new GidPrincipal ( 1000 , true ) , new JwtSubPrincipal ( "EXAMPLE" , sub ) , new JwtJtiPrincipal ( "EXAMPLE" , jti ) ) )
assertThat ( minimizedChanges , is ( empty ( ) ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertNull ( config . getString ( DEFAULT_CONTAINER , "expression" ) )
assertOut ( "var /** @type {XML} */ a = new XML(\\"<top attr1='cat'><child attr2='dog'><grandchild attr3='fish'>text</grandchild></child></top>\\")" )
assertHistoricProcessInstances ( )
assertEquals ( "failed to generate new object with parameterized type" , "new ArrayList<ArrayList<String>>()" , s )
Assert . assertEquals ( 6 , permutations . size ( ) )
Assert . assertEquals ( "The identifier must be as expected" , "test" , new SPQRNodeServer ( ) . registerNode ( "http" , "localhost" , 8080 , 8081 , mockClient ) )
assertTrue ( victim . isValid ( PredefinedSetOfPages . ALL_PAGES , null ) )
assertEquals ( expResult , result )
assertEquals ( "{\\"a\\":1}" , n )
assertTrue ( message . contains ( "No topic specified" ) )
assertEquals ( "There should be two registrations/unregistrations of MavenResolver before final (ConfigAdmin based) registration" , 2 , count )
assertEquals ( "Created incorrect LinkedHashMap" , 0 , hm2 . size ( ) )
assertIsAborted ( tx )
context . assertIsSatisfied ( )
assertEquals ( "unable to read remote files" , 0 , list . size ( ) )
Assert . assertEquals ( buckets5 , buckets5After . get ( Long . valueOf ( 10L ) ) )
AssertJUnit . assertTrue ( difference . isZero ( 1e-7 ) )
assertEquals ( JSON . serialize ( result ) , "[ \\"value1\\" , 12]" )
Assert . assertEquals ( 1 , ( int ) reporter . getProblemCounters ( ) . get ( Code . FIELD_NOW_STATIC . code ( ) ) )
Assert . assertEquals ( new Path ( "obj1.nested.objArr.*.nestedArrObjString1" ) , fullPath )
assertEquals ( "code" , groovyScanner . getGroovyMacroCode ( GROOVY_MACRO ) )
assertEquals ( "INSERT INTO user (user_id,user_name,pwd ) VALUES ( :userId,:userName,:pwd ) " , t . getInsertSql ( ) )
assertArrayEquals ( new Object [ ] { } , params )
assertEquals ( "DELETE" , request . getMethod ( ) )
runner . assertAllFlowFilesTransferred ( ListenRELP . REL_SUCCESS , 2 )
assertFalse ( userCanSubmitChangeRequest )
assertSideBarContainsClass ( "closed" )
Assert . assertEquals ( "<div id=\\"MyPage\\"></div>" , printer . toString ( ) )
Assert . assertFalse ( handler . deleteCgroup ( cgroupDir . getAbsolutePath ( ) ) )
assertEquals ( "helloworld" , result )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertNotNull ( objectAccessor )
assertThat ( result , hasSize ( 1 ) )
assertEquals ( exp , mapper . toString ( ) )
context . assertIsSatisfied ( )
assertEquals ( "Expected 10 results!" , 10 , n )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the rule button" ) )
assertStatementCanBeDeparsedAs ( select , statementTgt )
assertEquals ( Arrays . asList ( "House" , "House1" , "House2" , "House3" , "House4" , "House5" , "House6" , "House7" , "House8" , "House9" , "House10" , "House11" , "House12" , "House13" , "House14" , "House15" , "House16" , "House17" , "House18" , "House19" , "House20" , "House21" , "House22" , "House23" , "House24" , "House25" , "House26" , "House27" , "House28" , "House29" , "House30" , "House31" , "House32" , "House33" , "House34" , "House35" , "House36" , "House37" , "House38" , "House39" , "House40" , "House41" , "House42" , "House43" , "House44" , "House47" , "House48" , "House49" , "House50" , "House51" , "House52" , "House53" , "House54" , "House55" , "House56" , "House57" , "House58" , "House59" , "House62" , "House63" , "House64" , "House65" , "House67" , "House68" , "House69" , "House70" , "House71" , "House72" , "House73" , "House74" , "House85" , "House72" , "House85" , "House88" , "House94" , "House97" , "House98" , "House99" , "House98" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99" , "House99
assertions . startsWith ( sequence )
rule . assertScenarioEnded ( )
assertThat ( result , containsString ( "irt:
assertTrue ( readMap . getPredicates ( ) . contains ( predicate ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "12345" , job . getConfiguration ( ) . get ( "hbase.client.scanner.timeout.period" ) )
assertEquals ( "Getting a feed with no namespaces should return empty string" , "" , httpClient . executeMethod ( getFeedMethod ) )
assertEquals ( asList ( "\\n" + "raindrops--\\n" + "her last kiss\\n" + "goodbye.\\n" ) , texts )
assertEquals ( FleetSize . INFINITE , vrp . getFleetSize ( ) )
assertTrue ( max < connPerRoute . getMaxPerRoute ( route ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "prop like \\"abc\\"" , e . toString ( ) )
Assert . assertEquals ( vector , new Vector ( 50 , 50 , 50 ) )
assertEquals ( false , out . firstElement ( ) . get ( ) )
assertThat ( givenStories . getPaths ( ) , equalTo ( Arrays . asList ( GIVEN_STORY_PATH1 + ",  " ) ) )
assertThat ( mode , is ( equalTo ( ShellMode . batch ( ) ) ) )
assertThat ( testStatus , is ( expectedStatus ) )
assertTodo ( expected , actual )
assertTrue ( 0 != rmAdminCLI . run ( args ) )
Assert . assertFalse ( lanes . isEmpty ( ) )
assertThat ( connection , sameInstance ( Links . getDefault ( ) ) )
Assert . assertArrayEquals ( new String [ ] { "w=see" , "pt1=pr" , "pt2=v" } , cg . getContext ( 3 , TOKENS_1 , new String [ ] { "wh" , "v" , "pr" } , AC_1 [ 3 ] ) )
assertEquals ( Arrays . asList ( 1 ) , list )
assertNull ( httpWebService . getPayloadAsString ( request ) )
assertTrue ( "Failed permission check was not logged" , loggedFailedPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertThat ( messages . getMessages ( ) . getAllMessages ( ) , hasSize ( 0 ) )
assertFalse ( channelManager . isEphemeralNode ( user1 ) )
assertEquals ( Collections . emptyList ( ) , tlsToolkitStandaloneCommandLine . createConfig ( ) . getClientDns ( ) )
assertEquals ( bd . toBigDecimal ( ) , result )
assertEquals ( 15634800000L , q . getFirstMillisecond ( ) )
assertEquals ( "a = 1\\n" , output . toString ( ) )
assertEquals ( 9 , providers . size ( ) )
assertThat ( "Only one of the values is set" , mapper . writeValueAsString ( new HashMap < > ( ) ) , is ( "1" ) )
assertThat ( stdoutObsWasRead . get ( ) )
assertEquals ( responseStr , responseUpgrade . validateUpgradeReply ( ) )
assertThat ( owlOntologyChange , is ( ontologyChange ) )
assertTrue ( "Expected that the sum is correct." , list . size ( ) == t )
Assert . assertNotNull ( addressResultsDto )
Assert . assertTrue ( resource . contains ( DummyService . class . getName ( ) ) )
assertEquals ( "unknown" , column . getDefaultExpression ( ) )
Assert . assertEquals ( Lists . newArrayList ( 1 , 2 , 3 , 4 , 5 ) , dropResult )
assertEquals ( pollTime , result )
assertEquals ( 0 , trailers . getAllValues ( ) . size ( ) )
assertThat ( userInfo , nullValue ( ) )
assertFalse ( S3StorageBackend . requiresS3MediaDownload ( s3Properties :: get ) )
arrays . assertContainsSequence ( someInfo ( ) , actual , emptyArray ( ) )
assertEquals ( RenameSettings . MachStrategy . SUFFIX , view . getMachStrategy ( ) )
Assert . assertEquals ( "ref:g.43511" , gPos . toString ( ) )
assertFalse ( sf . getCache ( ) . containsEntity ( "com.hazelcast.hibernate.entity.DummyEntity" , 0L ) )
assertThrows ( MergeException . class , ( ) -> instance . merge ( remotePr ) )
assertThat ( Timezone . of ( fallback ) , is ( expected ) )
Assert . assertEquals ( streamServiceRequest , argumentCaptor1 . getValue ( ) )
assertThat ( change . isChangeFor ( axiomType ) , is ( false ) )
assertNotNull ( Recording . fetcher ( "RTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "RTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertNotSame ( instruction1 , instruction2 )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertNotNull ( "Run as a tech wasn't assigned an ID." , mr . getId ( ) )
assertEquals ( e1 , e2 )
assertEquals ( ( Integer ) Integer . MAX_VALUE , extractedId )
assertNull ( daoService . get ( userWrapper , "PKEY" , "Config" , StatisticRefEnum . CREATED_ISSUE_COUNT ) )
assertTrue ( semaphore . tryAcquire ( 100 , TimeUnit . MILLISECONDS ) )
assertActive ( player1 , player2 , player3 , player4 )
assertNotNull ( "Previous step failed" , uri_attachmentInstance )
assertEquals ( "ICAg" , res )
assertFalse ( underTest . hasBalance ( ) )
assertEquals ( expected , properties )
assertEquals ( "2" , httpClient . get ( baseUrl ( ) + "/count" , HttpStatus . SC_OK ) )
assertEquals ( "fozzie" , runtimeService . createVariableInstanceQuery ( ) . singleResult ( ) . getStringValue ( ) )
assertFalse ( valid )
assertEquals ( expected , splitter . split ( str ) )
assertNotNull ( Metric . reader ( "CAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( deviceMastership . isDeviceMastered ( ) )
assertThat ( actual , equalTo ( expected ) )
assertNull ( resourceEntity . getExternalLink ( ) )
assertThat ( FileUtils . readFileToString ( new File ( tempCopyFile ) ) , CoreMatchers . is ( cp_file . asText ( ) ) )
assertEquals ( "valo" , grid . getCell ( 0 , 0 ) . getText ( ) )
assertFalse ( "A rule is never equals to null!" , r . equals ( null ) )
assertEquals ( "one dollar" , actual )
editor . assertHoverContains ( "@ConditionalOnMissingBean" , "@ConditionalOnMissingBean (types: example.Hello; SearchStrategy: all) found bean 'missing'\\n" + "\\n" + "Process [PID=22022, name=`test-conditionals-live-hover`]" )
assertTrue ( null == obj )
Assert . assertEquals ( m , TestUtils . serializeAndRecover ( m ) )
assertEcssEquals ( ".myDiv{" + "background-image:\\"url(#{resource['test?gradientHeight=100px&height=150px&gradientColor=Skin.myskin']})\\";" + "}" , convertFragment ( xcss ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertThat ( "minimun number of cores" , sut . getMinCores ( ) , is ( equalTo ( minCores ) ) )
assertEquals ( "name" , entityNameExtractor . extract ( ) )
assertEquals ( resolvedConstructor . hashCode ( ) , resolvedConstructor . hashCode ( ) )
assertNotNull ( body )
assertNotNull ( credentialsProvider )
assertEquals ( "testDesc" , trace . getDescription ( ) )
Assert . assertTrue ( c1 . isCompatible ( c2 , mutations ) )
assertEquals ( 3 , orders . size ( ) )
assertEquals ( "Close" , close )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertEquals ( 4 , analyser . getNumberOfPickupsAtBeginning ( route ) , 0.01 )
assertFailureResponse ( response )
assertNotNull ( result )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertNull ( localFileInstanceStorageManager . getBinlogInfo ( "test1" ) )
assertEquals ( "test" , JsonbProvider . provider ( ) . create ( ) . build ( ) . fromJson ( new StringReader ( json ) , SimpleProperty . class ) . value )
Assert . assertNotNull ( "null data object, was not found" , dataObject )
assertNull ( concreteCache . get ( "key" ) )
Assert . assertEquals ( resultEntity , siteEntity )
assertEquals ( 2 , deserFlows . size ( ) )
assertTrue ( output . contains ( storeFileName ) )
assertEquals ( "localhost" , localAddressProvider . getAddress ( ) )
assertEquals ( 2000 , testVehicleSetTests . getYear ( ) )
assertEquals ( "http://example.com#frag" , actual )
assertEquals ( "#" , link . getAttribute ( "href" ) )
assertEquals ( "" , result )
assertTrue ( SOME_FLOAT == result )
assertThat ( command . accept ( state ) , is ( false ) )
assertEquals ( "Select with simple join" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( extensionConverterManager , sm . getExtensionConverterProvider ( ) )
assertEquals ( "$metadata#ESCompMixPrimCollComp(PropertyInt16,PropertyString," + "CollPropertyComp/CollPropertyETMultipleKeyNavPropertyInt16)" , ContextURLBuilder . create ( contextURL ) . toASCIIString ( ) )
Assert . assertEquals ( "88095550" , endereco . getCep ( ) )
assertThat ( url , is ( equalTo ( "https://app.org/app/service/v1/app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v1-app-service-v
assertSame ( ss , manager . getSubscriptionsStore ( ) )
Assert . assertEquals ( 13 , list . size ( ) )
assertThat ( population , hasSize ( 0 ) )
Assert . fail ( "expected IllegalArgumentException" )
Assert . assertFalse ( validator . validSequence ( 0 , inputSequence , outcomesSequence , outcome ) )
assertEqual ( "map{\\"a\\":\\"&lt;a&gt;\\"}" , query . next ( ) )
assertNotSame ( fsU1 , fsU2 )
assertNotNull ( newMember . getId ( ) )
assertSame ( mockConnection , connection )
assertTrue ( userCanUpdateProject )
assertTrue ( d_domain . getIndications ( ) . isEmpty ( ) )
assertNull ( cs . getValueReference ( ) )
assertThat ( callbackRan , is ( true ) )
assertEquals ( newVariable , variable )
e . put ( "/B?body=" + UonSerializer . DEFAULT . serialize ( DTOs . B . INSTANCE ) , "a" ) . execute ( ) . assertBody ( expected )
assertThat ( time . with ( PlainTime . COMPONENT . roundedToFullMinute ( ) ) , is ( PlainTime . midnightAtEndOfDay ( ) ) )
assertNotNull ( githubPage )
assertEquals ( clone , template )
assertEquals ( 5 , actualCapacity )
assertThat ( auth . getTotpKey ( ) , nullValue ( ) )
assertEquals ( "Count of customer" , 0 , res )
assertThat ( isValid , is ( true ) )
Assert . assertEquals ( "Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw" , endereco . getDescricaoMunicipio ( ) )
assertEquals ( Event . Payload . valueOf ( "one" ) , event . getPayload ( ) )
assertThat ( Template . parse ( markup ) . render ( assigns ) , is ( expected ) )
assertPingFailure ( service , "error" )
assertTrue ( get ( request ) . headers ( Collections . < String , String > emptyMap ( ) ) . ok ( ) )
assertTrue ( suggestions . isEmpty ( ) )
assertNotNull ( nre )
assertEquals ( mode , permission . getMode ( ) )
assertEquals ( obj , stringDeserializer . deserialize ( result ) )
assertThat ( logger . getMessage ( ) , is ( "tag" ) )
assertThat ( secret , is ( "secret" ) )
assertEquals ( CollectionStringProducer . class , typeProducer . getClass ( ) )
assertEquals ( 6 , values . size ( ) )
assertEquals ( "select a.b from a a a" , result )
Assert . assertTrue ( result )
assertNotNull ( actualDeviceClientList )
assertOut ( "a(b.toString())" )
assertThat ( minimizedChanges , is ( empty ( ) ) )
assertEquals ( expected , actual )
assertTrue ( connector instanceof NioSocketConnector )
assertThat ( hijri . with ( CommonElements . weekOfYear ( HijriCalendar . family ( ) , model ) . ceilingWeekOfYear ( HijriCalendar . MONTH_OF_YEAR , 1 ) ) , is ( expected ) )
Assert . assertTrue ( "should have cleaned the RIPE-TEST-SUBDIR" , irodsFile . delete ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "ENVELOPE (11.0 22.0,44.0 88.0)" , writer . toString ( ) )
assertThat ( gridColumn . getAlign ( ) , is ( nullValue ( ) ) )
assertEquals ( 0 , comp . getHtmlClassList ( ) . size ( ) )
assertThat ( jPath . elementFrom ( glossaryRoot ) . getAsString ( ) , equalTo ( "[1]" ) )
assertEquals ( 0 , buyPercentageFee . compareTo ( new BigDecimal ( "0.0025" ) ) )
this . assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Fponyuniverse%252Finjector/FoodandHouseInjectionTest/injector/options" , "servicetemplates/ServiceTemplateResource-getInjectionOptions.json" )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_LONG ) )
assertEquals ( 123L , info . getId ( ) )
assertThat ( md . getProperty ( "expiry" ) , is ( new Long ( 0 ) ) )
assertNotNull ( uploadResponse )
assertTrue ( ctx . isAborted ( ) )
assertThat ( stringFragment , is ( "FOOBAR with NO " ) )
Assert . assertArrayEquals ( expected_output , out . toArray ( ) , 1e-2 )
assertEquals ( expResult , result )
Assert . assertEquals ( list , objectTree . get ( "randomStrings" ) )
Assert . assertTrue ( false )
assertThat ( edges , containsInAnyOrder ( hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefixpersons" , equalTo ( "prefixdocuments" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty ( "prefix" , equalTo ( "prefix" ) ) , hasProperty
assertThat ( session1 , is ( not ( equalTo ( session2 ) ) ) )
assertEquals ( new Float ( 123.4F ) , result )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( "Wrong variable value" , TEST_VALUE , interpolator . resolve ( TEST_PREFIX + ":" ) )
assertNotNull ( provisioningServiceClient )
Assert . assertEquals ( now , value )
assertEquals ( "No rules have been imported" , 0 , ss . size ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertFalse ( TestRMILoadBalancerFactory . areServerBalancersClosed ( ) )
assertThat ( context . statement ( ) , is ( "\\"b ' c\\"" ) )
assertThat ( returnedMode , is ( AvroMode . GENERIC ) )
assertEquals ( 10 , entities . size ( ) )
assertEquals ( 0 , result . getRequiredPlugins ( ) . size ( ) )
assertEquals ( "file://org.talend.components/file-input/0.1.0.SNAPSHOT/jar" , computePathToDepsFromMvnUrl )
assertThat ( result , isFailedCommand ( ) )
Assert . assertEquals ( msg , expected , actual , delta )
assertTrue ( caughtException )
assertThat ( priceStream . count ( ) , is ( priceSum ) )
assertEquals ( o , null )
assertEquals ( ( short ) 87 , result )
assertEquals ( new Scanner ( getClass ( ) . getResourceAsStream ( "/expected-2-sample.html" ) , "UTF-8" ) . useDelimiter ( "\\\\A" ) . next ( ) , sw . toString ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "1" , client . ports . findById ( "1" ) . execute ( ) . gid )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( expected ) )
assertThat ( criteriaReader . start ( ) , is ( false ) )
assertEquals ( future , underTest . streamCollect ( futures , consumer , supplier ) )
assertEquals ( opponentHealth , opponent . getHero ( ) . getHp ( ) )
assertEquals ( reference , lessSpecific )
assertEquals ( "Taro" , got )
assertEquals ( expected , actual )
Assert . notNull ( ( Department ) departmentDao . getDepartmentById ( departmentParent . getId ( ) ) )
assertThat ( "Unexpected MDX query" , getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Gender].[F], [Gender].[M]}, CrossJoin({[Promotion Media].[All Media]}, {[Product].[All Products], " + "[Product].[Drink], [Product].[Drink].[Alcoholic Beverages], [Product].[Drink].[Beverages], " + "[Product].[Drink].[Beverages].[Carbonated Beverages], [Product].[Drink].[Beverages].[Drinks], " + "[Product].[Drink].[Beverages].[Hot Beverages], [Product].[Drink].[Beverages].[Pure Juice Beverages], " + "[Product].[Drink].[Dairy], [Product].[Food], [Product].[Non-Consumable]})) ON ROWS " + "FROM [Sales] WHERE [Time].[1997]" ) ) )
assertEquals ( "tst-01" , result . getValue ( ) . getName ( ) )
Assert . assertEquals ( "Two" , column )
assertEquals ( expResults , results )
assertViolationsThat ( report . getValidationViolations ( ) , equalTo ( "Example does not match schema for action(POST /ok) response(200) mime-type('application/json')\\n" + "Content: 42\\n" + "Messages:\\n- error: instance type (integer) does not match any allowed primitive type (allowed: [\\"string\\"])" ) , startsWith ( "Example does not match schema for action(POST /ok) response(200) mime-type('application/json')\\n" + "Content: 42\\n" + "Messages:\\n- error: instance type (integer) does not match any allowed primitive type (allowed: [\\"string\\"])" ) )
assertTrue ( constrainedReturnDescriptor . hasConstraints ( ) )
assertThat ( request . getConnectorId ( ) , equalTo ( zeroValue ) )
Assert . assertEquals ( "Document ID mismatch" , expectedDocumentID , actualDocumentID )
Assert . assertEquals ( getManager ( ) . count ( ) , 0 )
assertEquals ( "{\\"d\\":{\\"MaximalAge\\":99}}" , StringHelper . inputStreamToString ( ( InputStream ) result . getEntity ( ) ) )
assertTrue ( fileContents . contains ( MULTI_LINE_VALUE ) )
TerminalParserTest . assertResult ( parser , "order by foo;" , OrderBy . class , "order by foo;" )
Assert . assertEquals ( "41 minutes ago" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert . assertEquals ( 2 , counter )
assertEquals ( StatsdMetricAggregated . JSON_FORMAT_STRING , statsdMetricAggregated . getInfluxdbV1JsonFormatString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertTrue ( "our user should be member in one VO" , vos . size ( ) >= 1 )
assertEquals ( "banner" , banner )
assertTrue ( lu . isSingular ( ) )
assertEquals ( "(String,String)" , mnd . getParameterDisplaySignature ( ) )
assertEquals ( "Wrong class forolatednode" , net . ggtools . grand . tasks . ToNodeFilterType . class , filter . getClass ( ) )
Assert . assertNotNull ( addressResultsDto )
assertTrue ( tester . testXmlSerialization ( ) )
assertEquals ( future , underTest . collect ( futures ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
assertFalse ( response . isPresent ( ) )
Assert . assertArrayEquals ( coeff_EXPECTED , coeff_ACTUAL , DELTA )
assertSame ( reply , myTestInstance . runAdminCommand ( "command" ) )
assertEquals ( expected , output )
assertEquals ( "Base for doubles is wrong" , Double . valueOf ( 3.6d ) , parsed )
assertThat ( target . getOutput ( ) , is ( output ) )
assertNull ( jedis )
Assert . assertTrue ( "Incorrect file types returned" , CollectionUtils . isEqualCollection ( types1 , widget . getFileTypes ( ) ) )
Assert . assertNotNull ( "null checksum" , localChecksum )
assertEquals ( thePosition1 , thePosition2 )
assertTrue ( core . getBufferManager ( ) . getBufferByNames ( "logon" ) . isEmpty ( ) )
assertNull ( json )
assertEquals ( expectedSource , instrumentedSource )
Assert . assertEquals ( 5 , arrays . size ( ) )
assertEquals ( MessageTrait . POPUP_POSITION , cell . get ( MessageTrait . POPUP_POSITION ) )
assertEquals ( "Line numbering should be same as the original" , source . toString ( ) , lineNumbered )
assertEquals ( 4 , fixture . bytesRead ( ) )
assertEquals ( "gonzo" , result . getId ( ) )
assertEquals ( "GCS[\\"GCS_Sphere\\",DATUM[\\"D_Sphere\\",6371000.0,0.0]],PRIMEM[\\"Greenwich\\",0.0]," + "UNIT[\\"Degree\\",0.0174532925199433]]" , sr . getSpatialReference ( ) )
assertEquals ( "Job " + jobID . getJobID ( ) + " not found" , expectedJobList , actualJobList )
assertFalse ( "Top250 is empty" , result . isEmpty ( ) )
assertTrue ( "Same arrays should be equal" , equals )
assertThat ( validationList1 , is ( Arrays . asList ( INVALID_DB_TYPE , INVALID_DB_SERVER_NAME , INVALID_USERNAME , INVALID_PASSWORD , INVALID_TRUST_ALL_ROOTS , INVALID_RESULT_SET_TYPE , INVALID_RESULT_SET_CONCURRENCY , INVALID_COMMAND , INVALID_TIMEOUT ) ) )
assertEquals ( a , new SnapshotVersion ( "13w05a" , "13w05a" ) )
assertThat ( query . toString ( ) , is ( expectedToString ) )
assertEquals ( "An unexpected node membership was returned" , expected , result )
assertFalse ( underTest . validate ( "teacher" , teachers ) . containsAll ( teachers ) )
assertThat ( testHostname , is ( expectedHostname ) )
assertEquals ( 3 , count )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( 1 , metrics . meter ( MetricRegistry . name ( SessionManager . SESSIONS_METRIC_PREFIX , "changed" ) ) . getCount ( ) )
assertArrayEquals ( wrapped , Hex . toHexString ( keyEncryptionKey ) . toLowerCase ( ) )
Assert . assertEquals ( expected , actual , delta )
Assert . assertEquals ( "[1, 2, 3, 4]" , linkedList . toString ( ) )
runner . assertAllFlowFilesTransferred ( FetchS3Object . REL_FAILURE , 1 )
Assert . assertTrue ( "Failed to verify signed challenge" , SaslEcdsaNist256PChallenge . verify ( recreatedPrivateKey , CHALLENGE , signature ) )
assertEquals ( "Wrong tree string" , expectedValue , actualValue )
assertNull ( widget )
assertEquals ( oldPos + size , buffer . position ( ) )
assertEquals ( "GET" , method . toString ( ) )
assertContainsOnly ( testee . getFileFilters ( ) , filter1 , filter3 )
assertEquals ( IotHubStatusCode . OK_EMPTY , result )
assertEquals ( endOfDay ( base . plusWeeks ( 3 ) ) , absoluteTime )
assertTrue ( entity . equals ( loadedEntity ) )
assertEquals ( expected , actual )
assertEquals ( 3 , result . getViolations ( ) . size ( ) )
assertEquals ( "root" , kars . get ( 0 ) )
Assert . assertTrue ( BindingUtils . sameObject ( s1 , s2 ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
Assert . assertTrue ( contains )
AssertJUnit . assertTrue ( difference . isZero ( 1e-7 ) )
assertTrue ( "Result: " + session . getHtmlToDisplay ( ) , session . getHtmlToDisplay ( ) . contains ( "<option value=\\"true\\">" ) )
assertEquals ( expected , actual )
MutableMessageFactoryTest . assertExpiryDateEquals ( expiryDateValue , message )
Assert . assertEquals ( String . format ( "send to\\n%s now" , html ( bb , "email" , "address.domain" ) ) , formatter . format ( "send to\\nemail@address.domain now" , defaultOptions ( ) ) )
assertEquals ( padded ( ARRAY_OVERHEAD + FIRST_DIM * ( OBJECT_REF + padded ( ARRAY_OVERHEAD + SECOND_DIM * OBJECT_REF ) ) ) + padded ( ARRAY_OVERHEAD + 2 * INT ) , ThreadTrackingContext . getBytes ( ) )
Assert . fail ( "server-group missing name" )
assertEquals ( qf1 , qf2 )
assertCursor ( meta . pofClassAttribute , 1 , 1 , 10 , 17 )
assertEquals ( "<a><b>1</b><b>2</b><b>3</b></a>" , projector . asString ( emptyProjection ) )
assertThat ( parsed , is ( answer ) )
assertTrue ( connectionServiceImpl . updateConnection ( mockDBConnection ) )
assertEquals ( "Unexpected state class" , SelectState . class , state . getClass ( ) )
assertServiceEvent ( ServiceEvent . REGISTERED , TestService . class , 5 , TimeUnit . SECONDS )
assertions . doesNotContain ( new short [ ] { 6 , 8 } )
Assert . assertEquals ( "Candidate size should be " + EXPECTED_CANDIDATE_SIZE , EXPECTED_CANDIDATE_SIZE , termList . size ( ) )
assertParser ( twig )
assertEquals ( CustomsDeclarationCollection . getData ( ) . size ( ) , 1 )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( result , expected ) )
Assert . assertEquals ( ps2 . getUuid ( ) , vol . getPrimaryStorageUuid ( ) )
assertTrue ( testVehicleSetTests . isClean ( ) )
assertFlowState ( ACCEPTED_NOT_FULFILLED )
assertEquals ( "Hello, World" , poller . receiveMessage ( ) . popString ( ) )
assertEquals ( expected , actual )
assertEquals ( "Wrong width of text component" , fontMetrics . stringWidth ( "s" ) , ( ( String ) invocation . getArguments ( ) [ 0 ] ) . length ( ) )
assertEquals ( "lexicalvalue" , literal . getLang ( ) )
Assert . assertEquals ( xmlEsperado , icms101 . toString ( ) )
Assert . assertTrue ( deadline . isBefore ( nowPlusOneMin + 1 ) )
assertArrayEquals ( expectedOutput , output )
assertServerReceived ( "<iq id=\\"*\\" type=\\"set\\" from=\\"userc@localhost/voxeo\\" to=\\"#callId@localhost\\"><say xmlns=\\"urn:xmpp:tropo:say:1\\"><audio xmlns=\\"\\" src=\\"http://ccmixter.org/content/DoKashiteru/DoKashiteru_-_you_(na-na-na-na).mp3\\"></audio></say></iq>" )
assertEquals ( 1L , query ( ) . from ( show ) . where ( show . acts . containsKey ( "A" ) ) . fetchCount ( ) )
maps . assertContainsOnly ( description , actual , null )
assertTrue ( timeInstant != null )
assertTrue ( success )
assertTrue ( "Environment object was not found in news environment set." , foundNews )
assertEquals ( literal , newLit . getLiteralDate ( ) )
assertEquals ( mockList , queryPlan . getChildQueryPlans ( ) )
assertEquals ( InetAddress . getByName ( "192.168.1.137" ) , loopbackResourceAddress . getAddress ( ) )
assertEquals ( expectedGmtOffset , actual )
assertNotNull ( server )
assertEquals ( 1 , victim . getPreProcessors ( ) . size ( ) )
assertTrue ( "Invalid response statusCode: " + statusCode , statusCode == HttpServletResponse . SC_OK )
assertTrue ( "return too late" , time < TIME )
assertOut ( "a |= b" )
assertEquals ( ts , obj . get ( TIMESTAMP ) . getAsLong ( ) )
Assert . assertNull ( wordAfter )
assertNotNull ( "Null connector returned" , connector )
assertFalse ( flag )
assertEquals ( "MyResourceType" , result )
Assert . assertEquals ( "1234567890" , result . getText ( ) )
assertEquals ( "F" , to . getMotion ( ) )
Assert . assertEquals ( expected , superflatPreset )
assertEquals ( "xxx" , o )
context . assertIsSatisfied ( )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( 1 , result . size ( ) )
assertTrue ( headerUserAchievements . getBronzeBadgesCount ( ) > 0 )
Assert . assertTrue ( combiSet . nbOfCombinations ( 2 ) == 3 )
assertEquals ( result , ParseUtils . parseQuery ( "consumer." , "verion=1.0.0&cluster=china" ) )
assertMockEndpointsSatisfied ( )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 * 24L * 60L * 60L * 1000L ) , parsed )
assertEquals ( Long . valueOf ( arg ) , il . exec ( t ) )
Assert . assertEquals ( previousGamma , Erf . gcdInv ( x ) , 1.0e-15 / dydx )
assertEquals ( 365 , julDate . getJulianDate ( ) )
assertEquals ( Integer . valueOf ( 2 ) , myTestInstance . insertAsync ( doc , Durability . ACK ) . get ( ) )
Assert . assertNotNull ( savedTenant )
Assert . assertTrue ( can )
assertEquals ( location . getPort ( ) , 80 )
assertThat ( result ( ) , not ( containsString ( "<price>" ) ) )
Assert . assertEquals ( ImmutableList . of ( ThresholdFilterHeaderExtender . FILTER_GT_MIN_COV_HET ) , annotator . getFiltersFor ( gt ) )
assertEquals ( c , new Constant ( "%" ) )
Assert . assertEquals ( "when the import is in progress, the " + ResetImportAction . ASK + " view should be returned" , ResetImportAction . ASK , view )
Assert . fail ( )
assertThat ( formatter . parse ( "(D) GGGG yyyy" ) , is ( PlainDate . of ( 1603 , 4 , 4 ) ) )
assertTrue ( b )
context . assertSentryException ( statement , "CREATE ROLE r2" , SentryAccessDeniedException . class . getSimpleName ( ) )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
assertEquals ( false , check . isRequired ( ) )
assertTrue ( parser . isMyType ( document ) )
assertInvalidQuery ( query )
assertEquals ( 6. * 3600. + 6. * 60. + 6. , sec , 0.01 )
assertThat ( outcomes . get ( 0 ) . getResult ( ) , is ( TestResult . SUCCESS ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( Action . DISCONTINUE , discontinuationOrder . getAction ( ) )
assertLife ( playerB , 17 )
assertThat ( underTest . retrieveGitPath ( orgUnit ) , is ( workspacePath ) )
assertEquals ( expResult , result )
assertEquals ( Arrays . asList ( ")" ) , candidates )
Assert . assertEquals ( result , em )
assertVisitorSatisfied ( )
assertTrue ( xml . contains ( "<fn>" + NEWLINE + "      <text>John Doe</text>" + NEWLINE + "    </fn>" ) )
assertEquals ( "service" , s1 . getType ( ) )
assertNotNull ( victim . get ( new COSObjectKey ( 6 , 0 ) ) )
Assert . assertEquals ( expected . getAttribute ( "id" ) , actual . getAttribute ( "id" ) )
assertNull ( array . getArray ( ) )
assertTrue ( j . scheduleBuild ( singletonMap ( "slavename" , s . getName ( ) ) ) )
JSONAssert . assertEquals ( "{" + "status: 'inProgress', startTime: '" + now . toString ( ) + "', endTime: '" + now . toString ( ) + "', " + "description: 'Completed successfully in 10 seconds', commit: {}" + "}" , s , JSONCompareMode . LENIENT )
assertEquals ( item , actual )
assertNull ( actualException )
assertNotNull ( executions )
assertEquals ( "This is my cookie from the server" , response )
assertNull ( d )
assertEquals ( 20.0 , request . getEcommerceRevenue ( ) , 0.0 )
assertResponse ( response , 204 )
assertEquals ( chainID , AltcoinBlock . getChainID ( auxpowVersion ) )
Assert . assertEquals ( "Incorrect condition" , "((WTextField=\\"1\\" and WTextArea=\\"2\\") and WDropdown=\\"3\\")" , builder . build ( ) . toString ( ) )
assertEquals ( combineCounts ( ) , result )
assertEquals ( "King Brothers Holdings Inc...; (former big ticker symbol KKQ)" , words [ words . length - 1 ] )
assertEquals ( "token should be valid" , VALID_SIGNED_TOKEN , identity )
assertEquals ( "Expected " + REPEATS + " results, but got " + testdata . size ( ) , testdata . size ( ) , 0 )
assertEquals ( MaritalStatus . class , result . getClass ( ) )
assertEquals ( "TextBuilder String Is Test" , _textBuilder . toString ( ) , "Test" )
Assert . assertEquals ( "Hello SomeObj" , s . getName ( ) )
assertEquals ( "ST" , loop . getSegment ( 0 ) . getElement ( 0 ) )
assertEquals ( 1 , counter . get ( ) )
assertResultSet ( res )
assertThat ( indexHits . isEmpty ( ) , is ( true ) )
Assert . assertNull ( user )
assertEquals ( BaseAction . INPUT , action . doDefault ( ) )
assertEquals ( 1 , metaContext . getIndexes ( ) . size ( ) )
assertFalse ( isEditable )
assertEquals ( "public static  main(final String[] args) " , actualContent )
assertEquals ( "Event count" , eventsReceived , "Event count" )
assertEquals ( TEST_MSG , actual )
Assert . fail ( "Error retrieving workflow list caused by: " + e . getMessage ( ) )
assertEquals ( NotificationConstants . KEW_CONSTANTS . NOTIFICATION_DOC_TYPE , document . getDocumentTypeName ( ) )
assertEquals ( Boolean . TRUE , result )
assertTrue ( mpis . getParts ( ) . isEmpty ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertThat ( vraptor . getParameterValues ( "name" ) , is ( equalTo ( values ) ) )
assertEquals ( obj . getArray ( ) , null )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertEquals ( "Populate should have been called" , original_width , table . getSize ( ) . getWidth ( ) )
assertEquals ( 127 , fixture . readVarInt ( ) )
assertEquals ( repo . resolve ( gfs . getStatusProvider ( ) . branch ( ) ) , result . getCommit ( ) )
assertThat ( parse ( contents ) , contains ( map ( "value" , new String [ ] { "1" } ) ) )
assertEquals ( events . size ( ) , size ( stream ) )
assertEquals ( expecetedTableName , builtTableName )
assertJsFunctionCallSequence ( asList ( "" + "formatter.background({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Background\\",\\n" + "  \\"name\\": \\"background name\\"\\n" + "});\\n" , "" + "formatter.step({\\n" + "  \\"keyword\\": \\"Given \\",\\n" + "  \\"name\\": \\"first step\\"\\n" + "});\\n" , "" + "formatter.match({\\n" + "  \\"location\\": \\"path/step_definitions.java:3\\"\\n" + "});\\n" , "" + "formatter.result({\\n" + "  \\"status\\": \\"passed\\"\\n" + "});\\n" , "" + "formatter.scenario({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Scenario\\",\\n" + "  \\"name\\": \\"scenario 1\\"\\n" + "});\\n" , "" + "formatter.result({\\n" + "  \\"status\\": \\"passed\\"\\n" + "});\\n" , "" + "formatter.scenario({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Then \\",\\n" + "  \\"name\\": \\"first step\\"\\n" + "});\\n" , "" + "formatter.match({\\n" + "  \\"location\\": \\"path/step_definitions.java:7\\"\\n" + "});\\n" , "" + "formatter.result({\\n" + "  \\"status\\": \\"passed\\"\\n" + "});\\n" , "" + "formatter.scenario({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Given \\",\\n" + "  \\"name\\": \\"
assertEquals ( "something == something" , result )
Assert . assertEquals ( "(124_125insA)" , del . toHGVSString ( ) )
Assert . assertEquals ( "Decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\t" } } ) ) )
assertEquals ( "true" , everrestConfiguration . getBooleanProperty ( "foo" ) )
assertNotNull ( Record . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( threadReleasedLatch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "/pentaho-di" , biServerContextPath )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "The text field of the calendar should be empty after updating a date" , "" , driver . findElement ( By . cssSelector ( ".v-datefield-calendarpanel" ) ) . getText ( ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
assertArrayEquals ( refar , d . getResult ( ) )
Assert . assertEquals ( "[]" , reference . get ( ) . getAttachment ( Http2Client . RESPONSE_BODY ) )
assertTrue ( result )
factory . assertCredentials ( destination . getCredentials ( ) )
assertEquals ( SliceReadStatus . StreamDeleted , slice . status )
assertTrue ( doubleArray . length == 3 )
assertThat ( select , hasSelectedOption ( hasValue ( SELECTED_OPTION_VALUE ) ) )
assertNotNull ( getResponse )
assertEquals ( new Dimension ( 200 , 100 ) , res )
assertEquals ( "src\\\\s+d+._" + dst . toString ( ) , actual )
assertTheEntireDomainTreeHasPermissionsDefined ( client )
assertTrue ( actual . equals ( expected ) )
assertTrue ( validator . isValidForRoutingTable ( globalAddress ) )
assertFalse ( lock . lock ( ) )
Assert . assertArrayEquals ( expected , processed )
assertEquals ( cache . get ( "a" ) , "b" )
Assert . assertTrue ( json . getString ( "status" ) . equals ( "204.0" ) )
assertNotNull ( photoContext )
assertEquals ( Address . newBuilder ( ) . setType ( Type . TYPE_UNKNOWN ) . setAddress ( "other-socket-address" ) . build ( ) , BinlogHelper . socketToProto ( other ) )
assertBounds ( - 10 , 15 , 10 , 20 )
assertFalse ( fs . exists ( newDir ) )
assertEquals ( asList ( debug ( mdcValues , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( exp , out )
assertTrue ( map . isEmpty ( ) )
Assert . assertEquals ( "{/var}" , e . toString ( ) )
assertThat ( nextToken , is ( nullValue ( ) ) )
assertNotNull ( query )
assertEquals ( Arrays . asList ( aa , ab , ac , ba , bb ) , kittens )
assertEquals ( sb . toString ( ) , b . toString ( ) )
assertTrue ( true )
assertEquals ( packet , p )
assertThat ( term , is ( "┿" ) )
assertEquals ( "This is an English example." , jcas . getDocumentText ( ) )
assertEquals ( 1.0 , type . getValue ( rs , 1 ) , 0.0 )
assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , is ( 16l ) )
assertEquals ( "Video 1" , node . getVideoTitle ( ) )
assertEquals ( "Test template" , rt . getContents ( ) )
assertEquals ( true , rss )
assertEquals ( 1l , session . from ( $ ( dep ) ) . where ( $ ( dep . getEmployees ( ) ) . contains ( emp1 ) ) . count ( ) )
assertValidationFailures ( schema , config )
assertEquals ( "test apollo" , config . get ( "test" ) )
assertThat ( testHeader , sameInstance ( tabHeader ) )
assertThat ( queue . hasRemaining ( ) , is ( true ) )
assertEqualDoubleArrays ( pytranspose , transpose , epsilon )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' " ) )
assertArrayEquals ( expected , target . getPixels ( ) )
Assert . assertEquals ( "SomeClass" , dummyDocEmitter . getLastWrittenText ( ) )
assertEquals ( "333 4444 55555" , StringUtils . join ( toText ( select ( jcas , Token . class ) ) , " " ) )
assertThat ( parsed , equalTo ( source ) )
assertEquals ( expectedResult , result )
assertThat ( "Integer schema" , combined , matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( MultipleChoices . MULTIPLE_CHOICES , ri . getDescription ( ) )
assertEquals ( "Outer class instance variable is 779" , 779 , ret )
Assert . assertNotNull ( user )
Assert . assertEquals ( "<customIcons><Icon><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><Data>AAAAAAAAAAAAAA==</Data></Icon></customIcons>" , xml )
assertXpathEvaluatesTo ( "group" , "//ui:label/@what" , label )
assertTrue ( peterRank <= 3 )
assertNotNull ( "Logger not found" , logManager )
assertTrue ( "Wrong file handler" , detector . isReloadingRequired ( ) )
TestHelpers . assertDeepEquals ( expected , snapshot . getValue ( ) )
assertAppearanceFontSize ( dest , 36.0f )
assertions . doesNotContain ( value , index )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expResult , result )
assertEquals ( arc , arc2 )
assertThat ( phase . getGoals ( ) , contains ( goal ( "goal1" , 0 , 500 , 500 ) ) )
assertThat ( options . getSnippetType ( ) , is ( SnippetType . UNION ) )
context . assertIsSatisfied ( )
assertEquals ( "de" , properties . get ( PebbleProperty . DEFAULT_LOCALE . key ( ) ) )
assertions . isNotGreaterThan ( new Short ( ( short ) 2 ) )
assertEquals ( refPoint , testPoint )
assertEquals ( queryCopy . getQueryGeometry ( ) , query . getQueryGeometry ( ) )
assertEquals ( new HashSet < String > ( Arrays . asList ( "staff1" , "staff2" , "staff3" ) ) , underTest . filterConnectedViaEdOrg ( new HashSet < String > ( staffIds ) , e ) )
assertThat ( finalType . getModifiers ( ) , is ( Modifier . FINAL ) )
assertSame ( injector . getInstance ( ScopeTest . class ) , injector . getInstance ( ScopeTest . class ) )
Assert . assertEquals ( userConfig . getIntField ( ) , result . getIntField ( ) )
assertReceivedJson ( )
assertMap ( navigator . getStateParameterMap ( ) , entry ( "foo" , "bar" ) , entry ( "baz" , "" ) )
assertThat ( value , is ( equalTo ( instance . parse ( "DIARY" ) ) ) )
assertTrue ( multiThreadedSingleKernelReportObserverTestHelper ( device , 16 ) )
assertEquals ( DOCS_TO_INSERT , docs . size ( ) )
assertTrue ( expectPawn == Piece . BLACK_PAWN )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( "Expected " + queryString + " to return a result" , result . getResults ( ) . size ( ) == 1 )
assertEquals ( expectedAllocationPolicy , actualAllocationPolicy )
assertEquals ( "������" , s . get ( 0 ) )
assertEquals ( "Wrong ID" , test . getTmdb ( ) , result . getTmdbId ( ) )
assertTrue ( v . allowsOwnValidationPaths ( ) )
assertEquals ( expResult , result )
assertTrue ( generatedIds . contains ( id ) )
Assert . assertFalse ( "Invalid response from interceptor" , result )
assertThat ( runtimeClass , typeCompatibleWith ( BundleClassResolverHelperDecorator . class ) )
assertEquals ( expectedOutput , output )
assertSame ( component , componentByFieldInjection )
assertFalse ( validator . validate ( EntityNames . STUDENT_SCHOOL_ASSOCIATION , associations ) . isEmpty ( ) )
assertTrue ( "warnings list should be empty" , warnings . isEmpty ( ) )
assertNotNull ( response )
assertThat ( shardValue . getValue ( ) . getShardGroup ( ) , is ( nullValue ( ) ) )
assertEquals ( 1 , allVisible . size ( ) )
assertEquals ( expected , actual )
assertEquals ( "Test" , request . getSearchType ( ) )
assertEquals ( "Required profiles" , "tui" , new ConciergePlatformBuilder ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertEquals ( resizer , receivedResizer )
assertThat ( "Unexpected MDX query after adding a new hierarchy" , getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Gender].[All Gender]}, {[Product].[All Products], [Product].[Drink], [Product].[Food], " + "[Product].[Non-Consumable]}) ON ROWS FROM [Sales]" ) ) )
assertEquals ( map1 , map2 )
assertArrayEquals ( ONE_BYTE_CODE_LIST , ByteArray . readAllBytes ( nlriByteBuf ) )
assertEquals ( Hex . toHexString ( outputStream . toByteArray ( ) ) , "000000000041fa2f0270204bafe49cd42e5b4584000000000041fa2f0270204bafe49cd42e5b45840000000000" )
Assert . assertEquals ( 100 , status . getInAlluxioPercentage ( ) )
assertEquals ( dataflow , edit . getSubject ( ) )
assertTrue ( customerKey . prefixOf ( key ) )
assertThat ( result , is ( false ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\\\s*<head/>\\\\s*<body>\\\\s*<span\\\\s*id=\\"id1\\">\\\\s*\\\\$123\\\\.45\\\\s*</span>\\\\s*</body>\\\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( expected , getStringWithContext ( TestUpdateImpl . example ( ) ) )
assertTrue ( it . next ( ) . asText ( ) . contains ( "mvc" ) )
assertEquals ( Status . OK , captor . getValue ( ) . status ( ) )
assertEquals ( FilterReply . ACCEPT , mockAppender . getFilterChainDecision ( loggingEvent ) )
assertTrue ( "checking initially haveChildMap() true" , _scs . hasChildMap ( "root" ) )
assertTrue ( hasPermission )
Assert . assertTrue ( schema instanceofDirectSchema )
assertEquals ( 5 , d , 0 )
result . assertIsSatisfied ( 100 )
assertThat ( parsed , is ( answer ) )
assertEquals ( 16 , profile . dashBoards [ 0 ] . widgets . length )
assertFalse ( violation )
assertEquals ( "tag_order_test.obo" , written )
assertEquals ( "GBP -2.5" , test . toString ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "straks" , t . format ( new Date ( ) ) )
assertStoreContains ( out , 9 , 8 , 7 , 6 , 5 , 4 , 3 )
assertEquals ( "Broker info not set correctly" , "Broker" , a . getBroker ( ) )
assertEquals ( "b" , newPost . getBody ( ) . get ( 0 ) . getText ( ) )
Assert . assertFalse ( "Failure expected false" , r . getLeft ( ) )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , nullValue ( ) )
assertEquals ( "Object Type: Roa\\n" + "Signing time: 2008-09-01T22:38:29.000Z\\n" + "Version: 0\\n" + "Number: 68\\n" + "This update time: 2008-09-01T22:43:29.000Z\\n" + "Authority Key Identifier: " + roaCms + "\\n" + "Filenames and hashes:\\n" + "   filename1 ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\\n" + "   filename2 cb8379ac2098aa165029e3938a51da0bcecfc008fd6795f401178647f96c5b34\\n" , output . getBuffer ( ) . toString ( ) )
assertTrue ( unit . isValid ( Money . of ( 0 , "EUR" ) , null ) )
assertEquals ( 1 , matcher . groupCount ( ) )
assertEquals ( "[c_0 = 22,c_1 = 11,c_2 = 11,c_3 = 42,c_4 = 27,c_5 = 37,r_0 = 30,r_1 = 86,r_2 = 55,x_0_0 = 4,x_0_1 = 1,x_0_2 = 10,x_0_3 = 5,x_0_4 = 3,x_0_5 = 7,x_1_0 = 12,x_1_0 = 8,x_1_2 = 18,x_1_3 = 16,x_1_4 = 15,x_1_5 = 17,x_2_0 = 6,x_2_1 = 2,x_2_2 = 14,x_2_3 = 11,x_2_4 = 9,x_2_5 = 13,xa_0_0 = 4,xa_0_1 = 1,xa_0_2 = 2,xa_0_3 = 5,xa_0_4 = 3,xa_0_5 = 7,xa_1_0 = 12,xa_1_0 = 6,xa_1_2 = 18,xa_1_3 = 16,xa_1_4 = 15,xa_1_5 = 17,xa_2_0 = 6,xa_2_1 = 2,xa_2_2 = 14,xa_2_3 = 11,xa_2_4 = 9,xa_2_5 = 13,xa_2_0 = 4,xa_2_3 = 5,xa_2_4 = 3,xa_2_5 = 7,xa_2_0 = 4,xa_2_3 = 11,xa_2_4 = 15,xa_2_5 = 17,xa_2_0 = 6,xa_2_3 = 11,xa_2_4 = 9,xa_2_5 = 13,xa_2_0 = 4,xa_2_4 = 3,xa_2_5 = 7,xa_2_0 = 4,xa_2_4 = 3,xa_2_5 = 13,xa_2_0 = 4,xa_2_4 = 3,xa_2_0
assertThat ( authorization , is ( present ( ) ) )
assertEquals ( 1 , size )
assertEquals ( "V" , five )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( true , resultA . compareTo ( resultB ) < 0 )
Assert . assertEquals ( expected , input )
Assert . assertEquals ( "SELECT INTERVAL '5-3' YEAR TO MONTH + INTERVAL'20' MONTH\\nFROM DUAL;\\n" , text )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" , "-r" , file . getAbsolutePath ( ) } ) )
assertThat ( sources , hasSize ( 3 ) )
Assert . assertTrue ( true )
assertEquals ( 281547991161788L , ceosReader . readB8 ( ) )
Assert . assertTrue ( tableList . size ( ) > 0 )
assertEquals ( remainder1 , pathFooNullBar )
assertNotNull ( sb . install ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertOut ( "var a:Number = new Number(\\"1\\")" )
assertNull ( state )
assertEquals ( 2 , result )
assertEquals ( "Content-type header not found" , boundary , boundary )
assertTrue ( Arrays . equals ( data , wrapper . getData ( ) ) )
Assert . assertEquals ( info , infoProxy )
assertSame ( 5 , conf . getDefaultGatheringTimeout ( ) )
assertEquals ( "Substitution was not correctly applied" , "This is a lunches lunches" , logRecord . getFormattedMessage ( ) )
assertTrue ( service . getSoftlinkRelations ( ) . isEmpty ( ) )
assertTrue ( 10 > IterableUtils . countNodes ( getDatabase ( ) ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertEquals ( ( Double ) 3.5d , getTarget ( results , "secondLevel" ) )
assertEquals ( 0 , mockResult . included ( "isUserWatchingTopic" ) )
assertThat ( time , is ( 0 ) )
assertThat ( page . singleSelectWithSelection . getAllSelectedValues ( ) , contains ( "1" , "3" ) )
assertNull ( "Date parsing is wrong" , mapper . readBitemporalDate ( new Columns ( ) , "tt_to" ) )
assertEquals ( "bearista" , convSessionId )
Assert . assertEquals ( "{\\"at\\":\\"01:33:08.750431006Z\\"}" , os . toString ( ) )
assertTrue ( avroSchema != null )
assertEquals ( "en" , locales . iterator ( ) . next ( ) . getDisplayName ( ) )
Assert . assertSame ( owner , pa . getAccessLevel ( ) )
assertArrayEquals ( new short [ ] { 0 , 0 } , cv2 . getPhaseAngles ( ) )
Assert . assertEquals ( xmlEsperado , nfNotaInfoICMSTotal . toString ( ) )
assertTrue ( "Incorrect mapping of property with annotated setter" , actual . indexOf ( "property-1: value1\\r\\n" ) >= 0 )
assertThat ( foundThread , is ( OptionalPresentMatcher . present ( ) ) )
assertEquals ( 4 , exceptions )
Assert . assertEquals ( set ( b , c ) , presenceDao . getSubdirectories ( a , b , c ) )
assertEquals ( 123456.89f , executeTestMethod ( test , Float . class , null , 123456.89f ) . floatValue ( ) , 0.0f )
assertThat ( actualJson , is ( expectedJson ) )
assertTrue ( "Thread was not shutdown" , latch . getCount ( ) == threads )
assertEquals ( HTTP_RESPONSE_MESSAGE , inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
Assert . assertTrue ( "Unable to fetch module update url: " + url , updateRdf . contains ( "<updates" ) )
assertNotNull ( result )
Assert . assertArrayEquals ( bytes , bytes2 )
assertThat ( ( List < String > ) criterion . convertValueForDatastore ( Arrays . asList ( SortDirection . ASCENDING ) ) , hasItem ( "ASCENDING" ) )
assertEquals ( "((ENTITY_ID is_null  OR ENTITY_ID != " + userId + ") AND ((ID = " + userId + " AND (ACTUALOWNER =  OR ACTUALOWNER is_null )) OR ACTUALOWNER = " + userId + "))" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertTrue ( "counter serializable" , output . size ( ) > 0 )
assertContainsMesssage ( healthMessages , Severity . INFO , HEALTH_CHECK_IS_ALIVE , 0 )
assertEquals ( "b" , toml . getString ( "target.'cfg(unix)'.dependencies.b" ) )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( - 1 , victim . readNumber ( ) )
assertEquals ( "serverName" , settings . getServerName ( ) )
assertThat ( feature . getType ( ) , is ( "Feature" ) )
assertThat ( other , DateMatchers . sameSecond ( date ) )
assertNotNull ( "No company information found" , company )
assertTrue ( result . get ( ) )
assertEquals ( "'a'b'c',xyz" , sw . toString ( ) )
assertTrue ( check ( "az" , input , output ) )
assertEquals ( 10000L , messagingQos . getRoundTripTtl_ms ( ) )
assertEquals ( 0 , s . getRequiredSkills ( ) . values ( ) . size ( ) )
assertTrue ( set . contains ( tuple ) )
assertEquals ( expected , actual )
assertEquals ( "There should be one file" , 1 , files . length )
Assert . assertEquals ( expected , rmc . getCorrectedCourse ( ) , 0.0 )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertTrue ( cause instanceof PredicateException )
assertThat ( Name . of ( component ) , is ( expectedName ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "wmfImageTest01.pdf" , sourceFolder + "cmp_wmfImageTest01.pdf" , destinationFolder , "diff_" ) )
assertEquals ( Optional . of ( ImmutableMap . of ( "VIEW1" , "xa" , "VIEW2" , "yb" , "VIEW3" , "zc" ) ) , schema ( view ( "VIEW1" , "view1" , select ( literal ( "x" ) ) . from ( tableRef ( "a" ) ) ) ) )
assertEquals ( "CREATE TABLE CATALOG_NAME.TABLE_NAME (COLUMN1_NAME BIGINT IDENTITY NULL)" , generatedSql [ 0 ] . toSql ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertNumEquals ( DoubleNum . valueOf ( 0 ) , cost )
Assert . assertEquals ( ticketId , ticket . getTicketString ( ) )
assertEquals ( 10 , toTest . available ( ) )
assertEquals ( v , v2 )
assertEquals ( "Expected only one GeospatialCoordinatesValue" , 1 , v . getAllowedPrecisions ( ) . size ( ) )
assertEquals ( 1 , clusters . size ( ) )
assertEquals ( expected , proxy )
assertThat ( monthsStartWith_M . values ( ) , contains ( "June" , "July" ) )
Assert . assertEquals ( bitField . getStartElapsedEncodingStrategy ( ) , StartElapsedTimeEncodingStrategy . PREV_DELTA )
assertEquals ( id , db . getLongValue ( id , LONG_STORED_FILED_NAME ) )
Assert . assertEquals ( ab1 . getEdgeLabel ( ) , bc2 . getEdgeLabel ( ) )
assertEquals ( graphIds . size ( ) , elementMock . getGraphCount ( ) )
assertTrue ( result . getSuccess ( ) )
assertEquals ( 1 , fired )
assertContains ( "testRTFWithCurlyBraces.rtf" , content )
assertNotEquals ( testResource1 , testResource2 )
Assert . assertNull ( concept . getShortestName ( Locale . US ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( "10078668" , user . getId ( ) )
assertThat ( displayableGoal , is ( new DisplayableGoal ( "project1" , "phase1" , "goal1" , "dep1 dep2" , 0 , 4 , 8 ) ) )
Assert . fail ( "Should have Assert.failed on the second parameter to 'ends-with' not " + "being bound." )
assertFalse ( problem )
assertTrue ( buffer . toString ( ) . contains ( "http://example.com/thumbnails/1.jpg" ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "com.example.TypeNameConflict" ) )
assertEquals ( "aTestString" , classUnderTest . getDatabaseSize ( ) )
Assert . assertEquals ( r . asNode ( ) , query . getParam ( "s" ) )
assertEquals ( "Hello <b>there</b>!" , TextUtil . stripNewlines ( cleanHtml ) )
assertTrue ( endState )
assertTrue ( checker . isCalled ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertActive ( player1 , player2 , player3 , player4 )
Assert . assertEquals ( 0 , errors . size ( ) )
assertThat ( hostConfig . restartPolicy ( ) , is ( HostConfig . RestartPolicy .never ( ) ) )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( "testgroup" , groupMembers . get ( 0 ) . getName ( ) )
assertEquals ( settingsA . hashCode ( ) , settingsB . hashCode ( ) )
assertEquals ( contractInfo , contractRegistry . registerContract ( targetClass , contractClass ) )
Assert . assertNull ( foundTenant )
assertThat ( result , is ( true ) )
Assert . assertFalse ( context . getResult ( ) )
assertEquals ( 1d , t [ 0 ] , 0.1d )
Assert . assertEquals ( "1" , qy . get ( 0 ) )
assertEquals ( "aTestString" , classUnderTest . getProcedureSeparator ( ) )
assertThat ( strings , not ( stringContainsInOrder ( "<Bundle" , "<entry>" , "<base value=\\"" , "<Patient" , "<id value=\\"1\\"/>" , "<Patient xmlns=\\"http://hl7.org/fhir\\">" , "<id value=\\"2\\"/>" , "<Patient xmlns=\\"http://hl7.org/fhir\\">" , "<id value=\\"2\\"/>" ) )
assertThat ( formatterOutput , is ( "classpath:path/test.feature:2\\n" ) )
assertThat ( status . code , is ( HttpURLConnection . HTTP_BAD_REQUEST ) )
Assert . assertEquals ( "mobilesafari" , provider . getPropertyValue ( mockServletRequest ) )
assertThat ( isTransactionRelated , is ( false ) )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertThat ( expected . getMessage ( ) , startsWith ( "[foo] did not satisfy [" + getClass ( ) . getName ( ) ) )
assertNotNull ( shareLibService . getShareLibJars ( "pig" ) )
assertNotNull ( result )
assertSingleReplacement ( tokenIterator , "{foo}" , "b" , "abc" )
assertEquals ( 3 , p . getTotalPages ( ) )
assertEquals ( "gt0100" , code )
Assert . assertNull ( entry1 )
assertEquals ( 2 , beans . size ( ) )
assertNotNull ( result )
assertEquals ( "5" , e . getAttribute ( "name" ) )
assertEquals ( "I have had msg1" , matches . get ( 0 ) . getSuggestedReplacement ( ) )
assertEquals ( modifyAliases1 , modifyAliases1Duplicate )
Assert . assertEquals ( 0 , l . size ( ) )
Assert . assertEquals ( expected , actual )
assertFalse ( constraint . fulfilled ( iContext ) )
Assert . assertNull ( vo )
assertEquals ( "http://foo.bar.com/fu/bar?_a=b&c=d,e" , eu . withParameter ( EldaURL . OPERATION . SET , "a" , "b" ) . toString ( ) )
assertThat ( messages , hasSize ( 0 ) )
assertAccessForbidden ( client )
assertThat ( description . toString ( ) , startsWith ( "a stage that completed exceptionally with java.io.IOException: error" ) )
assertEquals ( 1 , stat . getSize ( ) )
assertEquals ( "test" , CompletableFuturesExtra . getCompleted ( res ) )
Assert . assertTrue ( response . contains ( "<out>AudiTesting enhanced REST Feature relative mapping</out>" ) )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertTrue ( p . get ( ) . getTitle ( ) . equals ( "Test" ) )
assertCorrectPropertyPathStringRepresentations ( constraintViolations , "addresses[2]" )
mock . assertIsSatisfied ( )
assertThat ( driver . findElement ( By . id ( "userIdMDC" ) ) . getText ( ) , is ( "user1" ) )
context . assertEquals ( "The RIPE NCC file is not as expected" , sha512 , shaWriteStream . read ( ) )
assertTrue ( okstate . get ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "OK" , status )
assertTrue ( events . size ( ) == 5 )
assertTrue ( "Wrong simplified filter: " + simplified , simplified == null || simplified instanceof AllFilter )
assertThat ( listener . awaitCompletion ( 100 , TimeUnit . MILLISECONDS ) , is ( true ) )
assertEquals ( "{\\"d\\":{\\"Age\\":42}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( newName , hadoopClusterDelegate . newNamedCluster ( variableSpace , iMetaStore , shell ) )
assertLog ( Log . VERBOSE , "test trace argument argument2 argument3" , exception )
assertFocused ( c42 )
arrays . assertContainsOnly ( description , actual , other )
assertNotNull ( tutor )
assertEquals ( "straks" , t . format ( new Date ( ) ) )
assertEquals ( UUID_NAME , SouthboundMapper . extractNamedUuid ( insert ) )
Assert . assertTrue ( this . people . anySatisfy ( predicate ) )
Assert . assertEquals ( 40 , bh . decodeXml ( multiValuedAttribute , null , null ) )
assertSame ( expectedResult , result )
assertNotNull ( entity . getId ( ) )
arrays . assertDoesNotContain ( description , actual , value , null )
assertEquals ( 0 , registry . size ( ) )
assertEquals ( "S�owacki" , book . getTitle ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . EDIT , this . doc ) )
assertEquals ( m , support . convert ( m ) )
assertEquals ( "Unexpected primary style name" , "v-select-twincol" , state . primaryStyleName )
Assert . assertEquals ( 4 , root . left . right . data . intValue ( ) )
Assert . assertThat ( properties . size ( ) , IsEqual . equalTo ( 2 ) )
assertValueModelFires ( model , interval , expected )
assertResultSet ( res )
assertNotNull ( SupportingDocument . reader ( ) . read ( ) )
assertFalse ( plan . contains ( "Analyze" ) )
assertEquals ( expected , actual )
assertThat ( this . requestMap , hasKey ( "pagedData" ) )
assertEquals ( "Cursor position is out of range" , currentPixel , derivativeRA . get ( ) . get ( ) )
assertThat ( chksumChannel . isWritten ( ) , is ( true ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
assertEquals ( 3 , count )
Assert . assertTrue ( false )
assertAnnotations ( 2 , MilitaryPlatform . class , new TestMilitaryPlatform ( 0 , "Hovercraft" , "OTHER" ) , new TestMilitaryPlatform ( 1 , "firewall" , "SPACE" ) )
assertEquals ( "Usage: man [<options>]" + getLineSeparator ( ) + "[OPTION...]" + getLineSeparator ( ) + getLineSeparator ( ) + "Options:" + getLineSeparator ( ) + "  -d, --debug  emit debugging messages" + getLineSeparator ( ) + "  -D, --default  reset all options to their default values" + getLineSeparator ( ) , clp . printHelp ( ) )
Assert . fail ( "MessageConverter could not convert to internal" )
assertThat ( repository . findAll ( ) . size ( ) , is ( posts . size ( ) + exceptions . size ( ) ) )
assertEquals ( 0 , result )
assertEquals ( new Character ( 'b' ) , ctxt . getCompositeElementSeparator ( ) )
assertEquals ( expected , actual )
assertEquals ( 5 , counter . get ( ) )
assertNull ( array )
assertThat ( representation , is ( notNullValue ( ) ) )
assertEquals ( historyTimeToLive , activity . getHistoryTimeToLive ( ) )
assertEquals ( "Wrong value of key" , 50 , bean . getTestClassNumber ( ) )
assertEquals ( Collections . singletonList ( new ServerCookieDecoder ( "test" , "toast" ) ) , req . cookies ( ) . getAll ( "test" ) )
assertThat ( data .Streq ( ) , is ( "test" ) )
assertEquals ( "incorrect value" , 0 , aNumber . signum ( ) )
assertEquals ( expected , dbMeta . getFieldDefinition ( valueMeta , null , null , false , false , false ) )
assertEquals ( basic , basic . build ( ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( place , mv . getPlace ( ) )
assertEquals ( 0 , evaluateStartConditions . size ( ) )
Assert . assertEquals ( 2 , path . getShapes ( ) . size ( ) )
Assert . assertEquals ( "the woman kicks the dog on the rock and kicks the dog behind the curtain" , this . realiser . realise ( aggregated ) . getRealisation ( ) )
assertPointArrayArrayEquals ( expected , actual )
assertEquals ( step , stepConfig )
assertEquals ( "V8ScriptExecutionException: null (4 bytes null)" , exceptionWithNulls . toString ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertTrue ( "output does not contain version" , listOutput . contains ( "version" ) && listOutput . contains ( "metadata" ) )
Assert . assertEquals ( "Bbb" , aaa . getName ( ) )
assertEquals ( "CompoundInterest{\\n" + " RateAndPeriods{\\n" + "  rate=Rate[0.05]\\n" + "  periods=100}}" , ci . toString ( ) )
Assert . assertEquals ( RpcUtils . getInvocationId ( inv ) , RpcUtils . getInvocationId ( url ) )
assertTrue ( mediator . changeNick ( " Amy " ) )
assertArrayEquals ( test , getInputStream ( ) . readLittleFloatArray ( test . length ) )
assertFalse ( txNew . isPresent ( ) )
assertEquals ( expected , actual )
assertThat ( results , hasSize ( 1 ) )
assertEquals ( mxResult , mx1 )
Assert . assertEquals ( 0 , patientCount )
assertEquals ( expected , result )
assertEquals ( 0 , sessionID . getId ( ) )
assertEquals ( "Legacy mode should be preserved" , true , graph . getLastModified ( ) . get ( ) . equals ( System . currentTimeMillis ( ) ) )
assertEquals ( TASK_LOG_LOCATION , taskLogOnlyTaskLogger . getLogLocation ( ) )
assertEquals ( "2017-01-JAN-2018" , format . format ( config ) )
assertEquals ( 1 , users . size ( ) )
assertEquals ( DEFAULT_COMMITTER_EMAIL , presenter . getEmail ( ) )
assertEquals ( defaultTimeZone , DateUtils . timeZoneFromString ( defaultTimeZone2 . getID ( ) ) )
assertThat ( formatterOutput , sameJSONAs ( expected ) )
assertEquals ( expResult , result )
assertEquals ( diff , result . intValue ( ) )
assertSuccess ( result )
assertEquals ( "testuser1" , username )
assertEquals ( "Hello" , retObj )
assertEquals ( fakeResolver , factory . newNameResolver ( new URI ( "bbb://" ) , Attributes . EMPTY ) )
assertEquals ( 1 , correlatedExecutions )
assertTrue ( ex . isPrime ( 71 ) )
assertFalse ( arr . some ( callbackfn ) )
assertEquals ( "" , result )
assertThat ( serialisedBadgesDetailsOf ( job ) , is ( nullValue ( ) ) )
assertDropdownIsBelow ( )
assertEquals ( false , target . shouldIgnore ( "some value we don't care" ) )
assertOut ( "for each (var i:int in obj)\\n\\tbreak;" )
assertNull ( tuple . getMap ( "field" ) )
assertThat ( m , arrayWithSize ( 1 ) )
assertTrue ( ulonglongValue == - 1000000000L )
assertThat ( children , containsInAnyOrder ( clsD ) )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "red" , "colored" ) ) , formatter . format ( "a [color='red']colored[/color] text" , defaultOptions ( ) ) )
assertEquals ( "Response body is not correct." , USER_IN_DEFAULT_REALM , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_DEFAULT_REALM , CORRECT_PASSWORD , SC_OK ) )
assertTransformedText ( normalizedText , inputText , "de" , segmenter , normalizer )
assertTrue ( d1 instanceof PublicCloneable )
assertEquals ( "GCD test" , gcd , test . numerator . gcd ( ) )
assertEquals ( CodecSupport . toString ( Base64 . decode ( EX_14_SUFFIX ) ) , plaintext )
assertEquivalent ( bufferB , new Buffer ( ) . writeUtf8 ( us + xs + ys ) )
assertFalse ( df . isAvailable ( ) )
assertEquals ( "Wrong toString" , "ArrayBuilderImpl{add(new byte [1])}" , builder . toString ( ) )
assertEquals ( base , test )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertSame ( musicPlayer . getSongs ( ) , getSongs ( ) )
Assert . assertEquals ( "[:d = document.type =blog-post]" , p . q ( ) )
assertTrue ( diff . toString ( ) , diff . similar ( ) )
assertEquals ( 0 , SolutionListUtils . findIndexOfBestSolution ( list , comparator ) )
Assert . assertEquals ( 6 , total )
assertEquals ( expected , actual )
assertEquals ( ( short ) 123 , deserialize . readShort ( ) )
Assert . assertEquals ( "(aa_change_ssr (aa_point_location (aa_char C) 123) ( 3 _ 4 ))" , aa_change_ssr . toStringTree ( parser ) )
assertEquals ( expected , converted )
assertEquals ( testUser , controller . getUser ( 1235 ) )
assertFalse ( ic . outgoingResponse ( reqDetails , new ResponseDetails ( resource ) , req , resp ) )
Assert . fail ( "an exception should have been thrown" )
assertNotNull ( Daily . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
listener . assertEventFired ( new SortOrder ( "foo" , SortDirection . ASCENDING ) )
assertEquals ( 2 , res . getInt ( "nbHits" ) )
assertEquals ( "Unexpected response" , "one" , manager . getSourcePolicy ( ) . getSequenceTerminationPolicy ( ) . getMaxLength ( ) )
assertEquals ( savedAppModule , applicationInterfaceRepository . getApplicationModules ( applicationModule ) . get ( 0 ) )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( Arrays . asList ( ) , res . getValues ( ) )
assertEntityCount ( 0 , entity , TEST_CONNECTION_ID )
assertEquals ( 0.0267 , density , .001 )
Assert . assertEquals ( 1 , resultList . size ( ) )
assertEquals ( "1.0.2" , subject . getVersion ( ) )
assertEquals ( t , new HttpURL ( s ) . toString ( ) )
Assert . assertEquals ( false , retval )
Assert . assertEquals ( "Jumps" , result )
assertEquals ( "Boolean value does not match" , bookmark . isRead ( ) , loadedBookmark . isRead ( ) )
assertThat ( records , hasItem ( apiKeyRecord ) )
Assert . assertEquals ( 210 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( mockResponse , testResult )
strings . assertContains ( mock ( Description . class ) , "Yoda" , null )
assertThat ( HibernateSettingsXml . class , hasValidGettersAndSettersExcluding ( excludeProperties ) )
assertEquals ( "123" , ( ( org . apache . cxf . ws . rm . v200702 . IdentifierImpl ) message . getExchange ( ) . get ( BindingOperationInfo . class ) ) . getValue ( ) )
assertThat ( DomainPermissions . getInstance ( systemPermissionName ) , sameInstance ( domainPermission ) )
assertEquals ( 7 , s1 . getClausesCount ( ) )
assertNotNull ( template )
assertEquals ( "http://127.0.0.1:9997" , builder . getProxy ( ) )
assertEquals ( 0 , set . size ( ) )
assertEquals ( authors , result )
assertNull ( drug )
assertEquals ( mvj . get ( "OriginAimedDepartureTime" ) , "2012-03-01T14:20:00.000-05:00" )
assertEquals ( newService , newRegister . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertEquals ( 0 , duration . getDuration ( ) , 0.01 )
assertFalse ( deserialize ( toTest , "ffff" ) )
assertThat ( target , is ( root . getThis ( ) ) )
Assert . assertEquals ( expected , actual )
assertTestRunFails ( testPlan1 )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertEquals ( getUrl ( "redirect" ) , finalURL )
Assert . assertEquals ( GisgraphyServiceType . GEOCODING , geocodingServlet . getGisgraphyServiceType ( ) )
assertThat ( resources , contains ( orgId , parentOrgId ) )
assertGraphHead ( expected , received )
assertThat ( encoded , stringContainsInOrder ( "<MedicationRequest xmlns=\\"http://hl7.org/fhir\\">" , "<contained>" , "<Medication xmlns=\\"http://hl7.org/fhir\\">" , "<id value=\\"123\\"/>" , "<code>" , "<coding>" , "<system value=\\"urn:sys\\"/>" , "<code value=\\"code1\\"/>" , "</coding>" , "</code>" , "</Medication>" , "</contained>" , "<medicationReference>" , "<reference value=\\"#123\\"/>" , "<display value=\\"MedRef\\"/>" , "</medicationReference>" , "</MedicationRequest>" ) )
assertThat ( path . get ( "b.c.d.e.f.g.h.a.b.c.d.e.f.g.h.a.b.c.d.e.f.g.h.a.b.c.d.e.f.g.h.a.b.c.d.e.f.g.h.a.b.c.d.e.f.g.h.a.b.c.d.e.f.g.h.h" ) , is ( equalTo ( "h.a.b.c.d.e.f.g.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.
Assert . assertThat ( classList . size ( ) , is ( 1 ) )
assertEquals ( "1" , XPathAfterVisitor . saxVisitedAfterElement . getTextContent ( ) )
assertEquals ( "abc\\n" , found )
assertEquals ( expected , actual )
assertTrue ( result )
assertEquals ( millisecond , millisecond )
assertEquals ( out , frame2 )
context . assertIsSatisfied ( )
assertThat ( result , is ( nullValue ( ) ) )
assertNull ( "current workflow null" , presenter . currentWorkflow )
runner . assertValid ( )
assertTrue ( result . isSuccess ( ) )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Categories(1)/Products/Model.AllOrders()" ) . build ( ) , uriBuilder . build ( ) )
assertEquals ( 1 , result . size ( ) )
assertThat ( duration . dividedBy ( 1 ) , equalTo ( TimeDuration . ofSeconds ( 1.5 ) ) )
assertTrue ( "isDisplayed should return true if a list with at least a single element loaded" + " required with a requirement limit." , view . isDisplayed ( ) )
assertNull ( prettyPrintedXml )
assertEquals ( "Should not loop  or composition should be skipped" , 0 , list . size ( ) )
UnitTestUtils . assertEquals ( "MatrixUtils.inverse() returns wrong result" , MatrixUtils . createRealIdentityMatrix ( data . length ) , result , Math . ulp ( 1d ) )
assertTrue ( "Database driver information can't be empty" , ! driverInfo . isEmpty ( ) )
assertTrue ( isHurricaneSeason )
assertEquals ( count , metric . getCount ( ) )
assertEquals ( "category" , request . getEventCategory ( ) )
assertEquals ( "ID" , spec . getModuleId ( ) )
assertFalse ( resultMessage ( result , HttpRequestType . POST ) , result . passedValidation ( ) )
Assert . assertEquals ( "x:y" , cs . get ( "x" ) )
Assert . assertEquals ( pix2fdc_EXPECTED , pix2fdc_ACTUAL , eps05 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes WHERE CONTAINS(nodes.property,'expression')" ) )
assertEquals ( "Expected skip to be zero" , 0 , skip . getNumberOfSkips ( ) )
assertEquals ( inputString , outputString )
Assert . assertEquals ( "涓洪�|瑕�|����" , words )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
assertEquals ( Object . class . getSimpleName ( ) , result )
assertEquals ( expected , actual )
assertEquals ( "(boo 34)\\n" , found )
assertEquals ( jedisCluster . get ( "foo" ) , "bar" )
assertResultsEqual ( net , "ALPHA" , "BETA" , "GAMMA" )
resultListener . assertTestCasePassed ( )
Assert . assertEquals ( "preliminary end of stream" , bytes . length / 4 , i )
assertEquals ( prevDate , DateUtils . getPrevDate ( theDate ) )
assertRows ( filePath , 1 , TEST_COLUMNS )
Assert . assertEquals ( 1 , comparator . compare ( id1 , id2 ) )
assertThat ( e . getClass ( ) . getName ( ) , is ( AuthAccessDeniedException . class . getName ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( errors . toString ( ) , containsString ( "No issues" ) )
assertEquals ( "test1" , x . toString ( ) )
Assert . assertEquals ( range . getQualifyingPageNums ( 5 ) , Arrays . asList ( 11 , 12 , 13 , 14 , 15 , 16 ) )
assertEquals ( HttpServletResponse . SC_NOT_MODIFIED , responseWrapper . getStatusCode ( ) )
assertEquals ( OrderBy . FWD_ROW_KEY_ORDER_BY , plan . getOrderBy ( ) )
assertThat ( ( BigInteger ) getter . invoke ( instance ) , is ( equalTo ( new BigInteger ( "1337" ) ) ) )
assertThat ( fakeValues . get ( PATH ) , is ( nullValue ( ) ) )
assertFalse ( appender . isStarted ( ) )
assertEquals ( "A.1.0-export.bpmn" , test )
assertTrue ( solution . getAttributes ( ) . isEmpty ( ) )
assertOut ( "a.removeChildAt(0)" )
assertEquals ( view , viewName )
assertEquals ( expectedArray , actualArray )
assertThat ( managementService . createJobDefinitionQuery ( ) . jobDefinitionId ( jobDefinition . getId ( ) ) . singleResult ( ) . getOverridingJobPriority ( ) , is ( 1701L ) )
assertEquals ( "" , result )
Assert . assertEquals ( "<div class=\\"htmlform\\">This shows a logic test for a man</div>" , session . getHtmlToDisplay ( ) )
assertTrue ( response . getNumberOfFeatures ( ) . intValue ( ) == 4 )
assertEquals ( "xpto1" , retrievedParent . getName ( ) )
assertNotNull ( ritaBirthdate )
assertThat ( options . getGlue ( ) , contains ( URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create ( "classpath:com/example.feature" ) , URI . create
assertArrayEquals ( expectedOffsetValues , actualOffsetValues , 1e-10 )
assertTrue ( "No 'administrator' in " + home , home . contains ( "administrator" ) )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 ) )
Assert . assertEquals ( 2 , forumToChange . getDisplayOrder ( ) )
Assert . assertTrue ( ( scopePath . findScopeByName ( DefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( DefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( DefaultScopeDescriptor . NAME ) . containsAllProperties ( properties ) ) )
assertEquals ( 2 , processInstances . size ( ) )
assertEquals ( 13 , dt . intValue ( ) )
assertThat ( key . getVersion ( ) , is ( "1.1.0" ) )
assertEquals ( Status . OK , jxm . getStatus ( ) )
assertThat ( converter . convert ( formattedToday , Date . class , bundle ) , is ( equalTo ( date ) ) )
assertions . isNotEqualTo ( actual )
assertThat ( stream ( extract ) . filter ( v -> v == SPECIFIC_VALUE ) . count ( ) , is ( Long . valueOf ( extract . length ) ) )
assertFalse ( appender . isStarted ( ) )
assertTrue ( status == 0 )
Assert . fail ( "Not valid" )
assertEquals ( "LINESTRING (0 0)" , ClobType . getString ( ( ClobType ) Evaluator . evaluate ( ex ) ) )
assertTrue ( instance . verify ( signature ) )
assertEquals ( expected , uri . toString ( ) )
assertNotNull ( recordWriter )
assertEquals ( YarnApplicationAttemptState . NEW , applicationAttempt . createApplicationAttemptState ( ) )
objects . assertIsEqualToIgnoringNullFields ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . END . getIndex ( ) )
Assert . assertEquals ( "name" , serialize )
assertEquals ( expecteds , actuals )
assertRequest ( "GET" , "Powerpack/" , params )
assertThat ( actual . stream ( ) . map ( ValidationResult :: getExplanation ) . collect ( Collectors . toList ( ) ) , hasItem ( containsString ( "The current service cannot be registered as a " + SERVICE_TYPE . getSimpleName ( ) + " to lookup" ) ) )
Assert . assertEquals ( "User" , r )
assertEquals ( "MyLabel" , sfp . getShortForm ( root ) )
assertTrue ( new Matcher ( ) . matchInstance ( output , cm ) )
assertEquals ( get ( "propIsTrue" ) , actual )
Assert . assertTrue ( fields . size ( ) >= klass . getDeclaredFields ( ) . size ( ) )
assertEquals ( asList ( warn ( mdcValues , marker , throwable , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertServiceEvent ( ServiceEvent . REGISTERED , TestService . class , 5 , TimeUnit . SECONDS )
assertNode ( "/sequenced/teiid/vdbs/YahooUdfTest" , "vdb:virtualDatabase" , "mix:referenceable" , "mode:derived" )
assertTrue ( checkPoint )
assertFalse ( history . isStepBackwardAllowed ( ) )
assertThat ( ServiceHelper . getServiceDomainUid ( service ) , equalTo ( "domain1" ) )
Assert . assertTrue ( "Expect null expression: " + expr , expr . isNullExpression ( ) )
assertEquals ( Arrays . asList ( 3L ) , root . select ( 3L ) )
Assert . assertEquals ( config . getUserID ( ) , config2 . getUserID ( ) )
assertEquals ( "doi" , work . getPository ( ) . getTitle ( ) . getContent ( ) )
assertThat ( timeTransition . isStarted ( ) , is ( false ) )
assertEquals ( "RemoteAddr" , entity . getRemoteAddr ( ) )
Assert . assertEquals ( 2 , integer . get ( ) )
assertNotNull ( result )
Assert . assertEquals ( 3.141592653589793 , toml . getDouble ( "foo" ) , 0.0 )
assertEquals ( 1 , first . compareTo ( second ) )
assertThat ( request . getChargePointVendor ( ) , equalTo ( stringLength20 ) )
Assert . assertTrue ( EdtfPattern . YEAR_MONTH_DAY_Q . matches ( edtf ) )
assertEquals ( Arrays . asList ( "foo:1234" , "bar:1234" ) , config . getServers ( ) )
assertFalse ( cp . isReadOnly ( ) )
assertEquals ( expResult , result )
assertEquals ( 0 , sibs . size ( ) )
assertEquals ( "Hi commons!" , StrSubstitutor . replace ( "Hi ${name}!" , map ) )
assertEquals ( "Hello World!" , stringBuilder . toString ( ) )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
context . assertIsSatisfied ( )
assertThat ( resolvedPath , is ( equalTo ( EXECUTABLE_THAT_EXISTS_IN_CLASSPATH ) ) )
assertEquals ( "true" , writer . toString ( ) )
assertEquals ( "maxTime" , result )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertEquals ( numBlocks , numBlocksRead )
Assert . assertEquals ( 0 , list . length )
assertTrue ( callbackArgument . getValue ( ) )
assertEquals ( "test" , registryKey . getName ( ) )
assertEquals ( mod , modSer )
assertEquals ( rde , bd )
arrays . assertDoesNotContain ( description , actual , values )
assertEquals ( obj . toString ( ) , "LSAPR_POLICY_PRIMARY_DOM_INFO{DomainName:null, DomainSid:null}" )
assertEquals ( field . getXrefEntity ( ) , xrefEntity )
assertThat ( isValid , is ( false ) )
assertEquals ( i , test . getValue ( ) )
assertEquals ( 1 , storage . size ( ) )
assertTagsetMapping ( files )
assertEquals ( expectedResult , actualResult )
assertEquals ( true , ExclusionTriggers . ShouldTriggerOnListOfFiles ( "dir_1" , "" , changedfilespath ) )
assertPattern ( info , "ListEndpointApiController" )
assertEquals ( location . toString ( ) , coordinates )
assertEquals ( obj . toString ( ) , "SAMPR_USER_ALL_INFORMATION{UserId:50,PrimaryGroupId:100,FullName:RPCUnicodeString,FullName1:RPCUnicodeString,FullName1:UserName1}" )
assertArrayEquals ( result , CompactEncoder . binToNibbles ( test ) )
assertThat ( formatter . format ( PlainDate . of ( 1752 , 9 , 13 ) ) , is ( "1930 n. Chr." ) )
Assert . assertEquals ( expResult , result )
assertThat ( client . getMongoUri ( ) , is ( "mongodb://custom.domain.com" ) )
assertThat ( retrievedPost , is ( equalTo ( post ) ) )
assertValues ( presentFieldList , actual )
Assert . assertEquals ( "Basic " + resultString , expectedString )
assertMakeImage ( image )
assertThat ( replaced , is ( sameInstance ( change ) ) )
assertFalse ( testPropertyLoader . properties . isEmpty ( ) )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertThat ( target . putEdgeActions ( "node1" , actions ) , is ( true ) )
Assert . assertEquals ( "MapperFactory[{factoryName: \\"MapperFactory\\", " + "mapperName: \\"MapperFactory\\", " + "date: \\"" + now . toString ( ) + "\\"}]" , string )
assertFalse ( resolver . supportsParameter ( param ) )
assertEquals ( "Should get right result" , json , store . getAsJSON ( ) )
runner . assertAllFlowFilesTransferred ( DeleteS3Object . REL_SUCCESS , 1 )
assertNotNull ( job )
assertTrue ( matcher . match ( msg , rule ) )
assertThat ( builder . build ( ) , equalTo ( "{\\"metrics\\":[{\\"name\\":\\"metricName\\",\\"tags\\":{\\"fi\\":[\\"fum\\"],\\"foo\\":[\\"bar\\"]}}],\\"start_relative\\":{\\"value\\":1,\\"unit\\":\\"DAYS\\"}}" ) )
assertEquals ( alias , alias )
assertUserIsActivated ( )
Assert . assertEquals ( data , FileChannelEmul . byteBufferToString ( result ) )
assertPermanentCount ( playerA , "Barrage Tyrant" , 1 )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( expectedQuery , actualQuery )
rule . assertScenarioEnded ( )
assertEquals ( 2 , sut )
Assert . assertThat ( methodMatcher . matches ( methodInvocationTree ) , is ( false ) )
Assert . fail ( "Shouldn't be able to update dataset with wrong name " + dataset . getName ( ) + " of dataset with id " + dataset . getId ( ) )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayDouble ( array ) ) )
assertEquals ( decoded , attData )
assertEquals ( "
Assert . assertTrue ( ! file . exists ( ) && ! childFile . exists ( ) && ! child2Config . exists ( ) )
assertEquals ( "Expected 3 results!" , 3 , n )
assertEquals ( "Wrong property value (path=" + path + ")" , USER_POLYNAME_ORIG , found )
assertEquals ( 0 , unitMoveIntents . size ( ) )
assertThat ( noOfSolutions , is ( 3 ) )
assertTrue ( output . contains ( TEST_ZK_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) && output . contains ( TEST_ZK_CHILD1_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) && output . contains ( TEST_ZK_CHILD2_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) )
assertThat ( request . getIdTag ( ) , equalTo ( idTag ) )
assertEquals ( "Table[tbl] Col1=[value1, value2]" , builder . build ( ) . toString ( ) )
assertNotNull ( tag )
assertThat ( Generator . generate ( Parser . parse ( smi ) ) , is ( smi ) )
assertTrue ( true )
assertThat ( modelInstance , notNullValue ( ) )
assertEquals ( expResult , result )
assertEquals ( "Wrong node map" , nodeMap . size ( ) , 0 )
runner . assertValid ( cfProvider )
assertSame ( e , CRestException . handle ( e ) )
assertEquals ( expected , actual )
assertEquals ( "decimal" , shortForm )
assertFalse ( list . isEmpty ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n  return React.createElement('div', { 'id': 'foo' });\\n}" )
assertEquals ( 500 , node . completedTime ( ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0x90 , 0x78 , 0x56 , 0x34 , 0x12 } , capturers )
assertEquals ( EventType . RS_ZK_REGION_FAILED_OPEN , data . getEventType ( ) )
assertNotNull ( result )
XMLAssert . assertXMLEqual ( "<regexParameterFilter>\\n" + "  <key>TEST</key>\\n" + "  <defaultValue>Default</defaultValue>\\n" + "  <normalize>\\n" + "    <case>UPPER</case>\\n" + "    <locale>en_CA</locale>\\n" + "  </normalize>\\n" + "  <regex>foo|Bar|BAZ</regex>\\n" + "</regexParameterFilter>" , xs . toXML ( filter ) )
assertThat ( result , is ( false ) )
assertEquals ( "UID1 should have Permission NO" , Permission . NO , localDomainAccessController . getConsumerPermission ( UID1 , DOMAIN1 , INTERFACE1 , OPEARATION1 , TrustLevel . HIGH ) )
Assert . assertEquals ( - 1 , compareResult )
assertEquals ( FORBIDDEN , action . getCode ( ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  var /** @type {Function} */ f = null;\\n  f = org.apache.royale.utils.Language.closure(this.b, this, 'b');\\n  c(f);\\n}" )
assertThat ( token . getType ( ) , is ( PCRELexer . NewLineSequence ) )
assertEquals ( "Hello Czesc!" , client . say ( ) )
assertEquals ( loader , bf . getAppserverClassLoader ( ) )
assertNotNull ( PropertyUtils . getProperty ( result , "auditInfo" ) )
assertTrue ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertResponse ( response , 204 )
assertThat ( target . exists ( ) , is ( true ) )
assertThat ( longProperty , is ( equalTo ( 42L ) ) )
assertEquals ( "org.talend.components.${componentNameLowerCase}.runtime.${componentNameClass}InputRuntime" , runtimeInfo . getRuntimeClassName ( ) )
assertNotNull ( schema )
Assert . assertEquals ( false , context . error ( ) . isPresent ( ) )
assertArrayEquals ( new String [ ] { "a" , "ccc" , "bb" } , strings )
assertNull ( LivingDoc . $ ( key ) )
assertTrue ( cleanExit )
assertTrue ( p1 . equals ( p2 ) )
assertEquals ( "10.1234" , d . getPrefix ( ) )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "INVALID_ACCESS_TOKEN" )
assertEquals ( 4 , results . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
EvictorTestUtils . assertEvictionPlanValid ( requestBytes , plan , mMetaManager )
assertMockEndpointsSatisfied ( )
assertEquals ( explicitList , defaultedList )
Assert . assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass\\">A1</td>\\n" + "</tr>\\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
assertEquals ( "Hello" , md . getString ( ) )
assertIsSemver ( semver , version , 1 , null , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
assertEquals ( 500 , getCap . get ( 0 ) )
Assert . assertEquals ( "The locale should be the same as the bean we are about to invoke!" , Locale . GERMANY , csvValues . get ( "locale" ) )
assertEquals ( result , topicDraft )
Assert . assertEquals ( "<pp:foo xmlns:pp=\\"http://p\\"></pp:foo>" , writer . toString ( ) )
assertTrue ( usl . getPenStroke ( ) . getDashArray ( ) . equals ( "1 -5 3" ) )
Assert . fail ( "Expect dropping partition to fail" )
assertSame ( people , result )
assertFeatureValues ( expected , testQuery , testText , getChain ( new OrderedSequentialPairsFeatureExtractor ( 1 ) ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertFalse ( result )
context . assertAuthzException ( statement , "USE default" )
assertTrue ( lines . contains ( "longest-mention: Bill C.*/" ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 } , actual )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "default" , processEngine . getName ( ) )
assertEquals ( "" , value )
assertArrayEquals ( new int [ ] { 0 , 0 , 1 } , closed )
assertEquals ( 5 , css . getSeverity ( ) )
assertEquals ( "" , Bytes . toString ( res ) )
assertEquals ( s , msg . getStringProperty ( s ) )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) )
Assert . assertEquals ( javaValue , xtreemfsValue )
assertEquals ( 4 , business . findGreatest ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertEquals ( expected , actual )
assertEquals ( Arrays . asList ( "aaa" , "bbb" , "ccc" ) , topics )
assertEquals ( "a'b'c" , writer . toString ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<SolrQueryResponse xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<NamedList xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?
assertDownloadAndInstallMessage ( getDistributionSet ( ) . getModules ( ) , controllerId )
assertEquals ( 1 , cnf . evaluate ( vertex ) . count ( ) )
assertEquals ( "alt 1\\n" , found )
assertNotNull ( tpmAttestation )
assertEquals ( expected , result )
assertNumEquals ( 0 , getCriterion ( ) . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( expected , result )
assertThat ( relId , is ( notNullValue ( ) ) )
assertEquals ( 3 , lines . size ( ) )
assertFalse ( axis . isTickMarksVisible ( ) )
assertFalse ( presenter . isUseExpandedMode ( ) )
assertNotNull ( woodcuttingPlugin . getSession ( ) )
assertThat ( syncData , is ( equalTo ( expectedSyncData ) ) )
assertNotNull ( target )
assertEquals ( "�" , encoded )
assertEquals ( "CallInfo should have had hints" , CallStateChanged . State . IN_PROGRESS , callback . getState ( ) )
assertThat ( "missing owner not detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( 3 , keyspaces . size ( ) )
Assert . fail ( "Invalid input" )
assertSame ( s , new Subject ( ) . getSubject ( ) )
assertEquals ( html , sanitized )
Assert . assertEquals ( domain , new Domain ( "domain" , "myDomainGroup" ) )
assertEquals ( 1 , entityLog . size ( ) )
assertHasError ( result , PlanningExecutionResult . ErrorCode . TASK_MODIFIED_SINCE_PLAN_ASSIGNMENT_ERROR , errorMessage , CONTAINER_ID )
Assert . assertEquals ( 1 , ( ( CalculatingReceiver ) receivers [ i ] ) . msgCount )
Assert . assertEquals ( "0c8463c904e6444fa5c2b4597f816bc2" , oAuthMachine . readAttributeFromBodyMap ( input , "sub" ) )
assertThat ( manager . register ( "foo" , "bar" ) , is ( - 1 ) )
assertFalse ( topic . isPlugable ( ) )
assertEquals ( "Wrong node name" , nodeName , ConfigSchemaV1 . limitNodeNameLength ( nodeName ) )
assertTrue ( RelaxNgSchemaValidator . validateAgainstRelaxNg ( actualXml ) )
assertEquals ( 25 - 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( expected , getWeekmodel ( ) . getWeekmodel ( i ) )
assertNotNull ( rs )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( root , result )
org . junit . Assert . assertEquals ( expectedPatterns , count . get ( ) )
assertEquals ( sz , z , FastInteger . parseUint ( sz ) )
assertNotNull ( informe . getId ( ) )
assertTrue ( cut . isPositive ( 50 ) )
assertThat ( "Body is incorrect!" , body , matchesPattern ( "^Processed \\\\[message] with \\\\[Camel \\\\(test\\\\) thread #\\\\d+ - Profile Threads]$" ) )
assertNull ( record )
assertThat ( result . getType ( ) , is ( "OutPacket" ) )
assertTrue ( p . hasTag ( "tag1" ) )
Assert . assertEquals ( FastMath . toDegrees ( x ) , value . toDegrees ( ) . getReal ( ) , epsilon )
Assert . fail ( "Expected failure" )
assertOut ( "public class A implements B implements IA, IB, IC {\\n}" )
assertEquals ( "Testing group by" , key , result . get ( key ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0 ) . get ( 0
service . callCounter . assertCalls ( "{findIds=2, getItems=6}" )
assertOutput ( expected )
Assert . assertTrue ( score <= 0 )
assertArrayEquals ( new byte [ ] { ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0xff , ( byte ) 0
assertEqualsIgnoreWhitespace ( expected , drl )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( pl . get ( "filename" ) , "a b.txt" )
assertEquals ( selectedInterval . getName ( ) , "Engineering" )
assertEquals ( CREATED . getStatusCode ( ) , response . getStatus ( ) )
assertArrayEquals ( data , stream . toByteArray ( ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location (nt_number 123)) (nt_offset + (nt_number 4)))" , loc . toStringTree ( parser ) )
Assert . assertTrue ( found110Warning )
assertNull ( channel21 . readOutbound ( ) )
assertEquals ( "wrapping renderer must use list's default on null" , defaultRenderer . getClass ( ) , renderer . getDelegateRenderer ( ) . getClass ( ) )
assertEquals ( correctJson , producedJson )
assertTrue ( result . isSuccess ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , initialQuery ) )
descriptor . assertValid ( )
assertEquals ( "Version!" , manager . getTransportVersionString ( ) )
assertEquals ( 1 , handler . recover ( new Object [ ] { "Randell" } , new RuntimeException ( "Planned" ) ) )
assertEquals ( expecting , t . toStringTree ( ) )
assertEquals ( "" , result )
assertEquals ( 0 , topic . getUserPostCount ( ) )
assertNotNull ( toolSpec )
arrays . assertStartsWith ( description , actual , null )
ReflectionAssert . assertReflectionEquals ( except , result )
assertEquals ( lbl . size ( ) , lbl2 . size ( ) )
Assert . assertEquals ( "method()" , e . evaluate ( jc ) )
assertEquals ( "javax.security.auth.login.javax.Authentication" , invoke . invoke ( null ) )
assertEquals ( "2015-10-05" , mo . getDateWrittenElement ( ) . getValueAsString ( ) )
assertEquals ( "The view paths aren't correct" , "viewpath" , scm . getViewPaths ( ) )
assertPutFails ( occurrence , OntopiaRestErrors . MANDATORY_FIELD_IS_NULL )
assertNull ( m . get ( "foo" ) )
assertEquals ( COSBoolean . FALSE , victim . nextBoolean ( ) )
assertEquals ( LOGIN_URL , casClient . getClientInformation ( ) . getBaseUrl ( ) )
assertEquals ( "Two" , doc . head ( ) . text ( ) )
Assert . assertNotNull ( hm )
Assert . assertEquals ( expectedSpec , actualSpec )
assertEquals ( ids , knownItems2 . keySet ( ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertThat ( ClockInterval . parseISO ( "PT1H55M30S/14:15:30" ) , is ( interval ) )
assertEquals ( "test message" , logger . getName ( ) )
Assert . assertEquals ( originalFont . getOs2 ( ) . getVersion ( ) , parsedFont . getOs2 ( ) . getVersion ( ) )
Assert . assertEquals ( "user-id" , ctx . getSqlStatement ( ) )
assertNotNull ( emailAlerter )
assertEquals ( asList ( "O" , "�" , "�" ) , stringsToSort )
assertEquals ( aseVariant1 . getA2Counts ( ) , expResult )
assertThat ( NF . numberNode ( BigDecimal . ONE ) , is ( sut ) )
assertFalse ( dialect . isValid ( ) )
assertEquals ( 2 , constraints . size ( ) )
Assert . assertEquals ( 51 , startLevel . getStartLevel ( ) )
assertEquals ( SampleLocations . STOCKHOLM , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertTrue ( connection . isAuthenticated ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 7 )
Assert . assertEquals ( s , new String ( expanded ) )
assertEquals ( startOffset , endOffset )
assertEquals ( 2 , rsp . getTotalCount ( ) )
assertThat ( sel , is ( dataProperty ) )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday" , days )
assertNull ( actual )
assertNoViolations ( constraintViolations )
assertEquals ( buildExceptionMessage ( "Expected SUCCESS but twin status was " + deviceUnderTest . deviceTwinStatus , internalClient ) , DeviceTwinCommon . STATUS . SUCCESS , deviceUnderTest . deviceTwinStatus )
Assert . assertEquals ( expectedGeoJson , geoJson )
assertThat ( storyText , equalTo ( "dummy.story" ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertEquals ( true , result )
Assert . assertEquals ( 2 , result . length ( ) )
PatternAssert . assertThat ( CHOUSE_CONNECTION_STRING_PATTERN )
Assert . assertEquals ( "xx" , FastqTools . convertQualities ( fastq , FastqVariant . FASTQ_SINGLEXEME ) )
assertEquals ( "\\n# Level1\\n" , writer . toString ( ) )
assertTrue ( validator . validate ( EntityNames . TEACHER_SECTION_ASSOCIATION , teacherSchoolAssociations ) . isEmpty ( ) )
assertThat ( validPeriods , definedBy ( StartOfTime . create ( ) , EndOfTime . create ( ) ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( 1 , presenter . getEvents ( ) . size ( ) )
assertEquals ( "Should be one run on the page" , 1 , listPage . getNumberOfRunsInProject ( ) )
assertEquals ( EventType . USER_CREATED , userCreatedEvent . getEventType ( ) )
assertNotNull ( tg )
assertNotNull ( result )
assertEquals ( expected , query )
Assert . assertEquals ( element . getText ( ) , "click me" )
Assert . assertNull ( testsuites )
assertThat ( serializer , is ( instanceOf ( IgnoringSerializer . class ) ) )
assertThat ( rs . size ( ) , equalTo ( 3 ) )
assertEquals ( "2015-02-06T21:59:08.123-04:30" , formatted )
assertTrue ( monitor . isSendQueueWarning ( ) )
assertEquals ( expected , exported )
assertEquals ( "66" , xml . get ( "total-fat" ) )
assertNotNull ( token )
assertThat ( add , is ( 2.5 ) )
assertEquals ( 3 , bs . getPlayerNumber ( ) )
assertEquals ( "  EAP Test" + j , trueEAP_mixed [ j ] , eap , 1e-4 )
assertNull ( testList . get ( before ) )
assertTail ( input , 100 , expectedOutput )
assertEquals ( true , xmlHelpers . validateSignature ( document ) )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( "4 Nov 2010 16:06:04 GMT" , block . getTime ( ) . toGMTString ( ) )
assertions . isNotEqualTo ( actual )
assertEquals ( FORMAT , formatterMember )
Assert . assertEquals ( null , vo )
assertThat ( resultedQuery , is ( expectedQuery ) )
Assert . assertNotNull ( limitOrder )
assertNull ( mav )
assertPrefetchResult ( result )
Assert . assertTrue ( check . getErrors ( ) . isEmpty ( ) )
assertEquals ( "oauthToken" , user . getName ( ) )
UnitTestUtils . assertEquals ( "scalar add" , new Array2DRowRealMatrix ( testDataPlus2 ) , m . scalarAdd ( 2d ) , entryTolerance )
assertEquals ( totalBlockLoads , assignments . size ( ) )
assertThat ( findCitiesCalled , is ( false ) )
Assert . assertEquals ( "K9KJYBOMPUXHYHKSNRNMMSSZCSHOFYOAETMTVXRSZMAAYWDYEIMVOGKPJBV9TDPULSFUNMTVXRKFIDOHUXXVYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHNIQWJQNDWRYLCA" , hash )
assertThat ( slEndpoint . getAddress ( ) , is ( nullValue ( ) ) )
assertEquals ( - 3L , result )
assertEquals ( HttpStatusCode . CREATED . code , response . getStatus ( ) )
assertEquals ( Rational . ONE , result )
assertTrue ( testFailed . isEmpty ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( expResult , result )
assertFailureValue ( "missing (1)" , "x" )
Assert . assertTrue ( list . isEmpty ( ) )
assertEquals ( deliveryDay , deliveryDayOld )
assertEquals ( "Incorrect status code" , new Integer ( 400 ) , new Integer ( resp . getStatusCode ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertNotNull ( doc )
assertEquals ( CUSTOM_PRIORITY , seedJob . getPriority ( ) )
Assert . assertEquals ( "custom-value" , mf . getMainAttributes ( ) . getValue ( "Custom-Entry" ) )
assertTrue ( dir . exists ( ) )
assertEquals ( "[FOO, FOOBAR]" , Iterables . toString ( tree . getKeysContainedIn ( document ) ) )
assertNotNull ( scriptStatement )
assertEquals ( "GraphHead was not equal" , graphHeadIn , GradoopFlinkTestUtils . writeAndRead ( graphHeadIn , getExecutionEnvironment ( ) ) )
assertEquals ( 0 , ProfileLogger . dump ( ) . size ( ) )
assertTrue ( DateUtils . isSameDay ( clockTime , clockTime2 ) )
assertEquals ( expResult , result )
assertDateAndTime ( p1 , p21 , p22 , actual )
assertEquals ( 1.5d , prediction , 0.000001d )
assertEquals ( script , DockerFileUtils . build ( dockerFile ) )
assertEquals ( "Wrong property" , values , config . getList ( String [ ] . class , KEY_PREFIX ) )
assertEquals ( fixture . get ( "id" ) , response . get ( "id" ) . asText ( ) )
Assert . assertNotNull ( clusterMeta )
Assert . assertTrue ( msg , Arrays . deepEquals ( esperado , resultado ) )
assertEquals ( LinkstateTopologyBuilder . LINKSTATE_TOPOLOGY_TYPE , topology . getTopologyTypes ( ) )
assertE ( "�尖�尖�尖�尖�尖��" + "�尖��   ��" + "��     ��" + "��     ��" + "�尖��    ��" + "�尖�尖�尖�尖�尖��" )
assertEquals ( "test" , m . get ( "test" ) )
assertFalse ( evaluator . shouldProxyHost ( "1.232.12.3" ) )
assertTrue ( b )
assertFutureCancelMetaCancel ( future )
assertEquals ( 54321 , settings . getSystemColor ( ) )
Assert . assertTrue ( expected . equals ( actual ) )
Assert . assertNotNull ( migrationPlan )
assertEquals ( "JPEG" , TestUtils . getFormatName ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) )
assertEquals ( 12345 * 1000 , result )
Assert . assertEquals ( 1 , stateContext . getData ( ) )
assertEquals ( 0 , records . size ( ) )
Assert . assertEquals ( "Huawei_Gsm" , vertexTraversal ( this . sqlgGraph , softwareVersion ) . in ( "vendorTechnology_softwareVersion" ) . next ( ) . value ( "name" ) )
assertEquals ( expectedFirstname , actualFirstname )
assertEquals ( taskExecutor . execCount , 10 )
Assert . assertEquals ( "div" , div . query ( "span" ) . getParent ( ) . getTagName ( ) )
Assert . assertEquals ( "The <word content='fox'>jumps over</word>" , hl . makeWellFormed ( xmlContent ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION , testConfiguration . get ( "dfs.replication.initial" ) )
assertThat ( span . to ( SECONDS ) , is ( 17L ) )
Assert . assertEquals ( xmlEsperado , referenciada . toString ( ) )
assertEquals ( 0 , consumerPrefetch . retriesAttempted )
assertEquals ( "Mismatched data" , expected , res )
Assert . assertEquals ( 0 , queue . size ( ) )
assertFalse ( "Initiator role should not have an Ack request from disapproval because they were the disapprover user" , document . isAcknowledgeRequested ( ) )
assertEquals ( 0 , ( ( Object [ ] ) emptyArray . getArray ( ) ) . length )
assertTrue ( result )
assertEquals ( uriContent , uriSchemaFile )
assertFalse ( abstractRule . test ( patent ) )
assertNull ( converter . getAsObject ( facesContext , new UIPanel ( ) , "      " ) )
Assert . assertTrue ( "collection should have inherit turned back off" , isInherit )
assertThat ( sampleEntities . getTotalElements ( ) , equalTo ( 0L ) )
assertTrue ( r <= s . getRadius ( ) )
assertEquals ( "doCompile" , feel . getExpression ( ) )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertTrue ( dnsMessage . getHeader ( ) . isQuery ( ) )
assertSame ( GBP_2_34 , test )
assertEquals ( expecting , result )
assertEquals ( 7 , result1 . size ( ) )
assertEquals ( "file Name" , message )
assertThat ( idAndVersion1 . compareTo ( idAndVersion2 ) , is ( - 1 ) )
assertEquals ( "Expected 2 results!" , 2 , count )
Assert . assertEquals ( numCollections . intValue ( ) , numObjects )
assertFalse ( proxy . wasCalled ( ) )
assertThat ( response , is ( "" ) )
assertEquals ( "A_" , buffer . removeCString ( ) )
assertNull ( tempFile . getFilePermissions ( ) )
assertEquals ( 4 , bs . capacity ( ) )
assertTrue ( Pattern . matches ( "(?s).*text%20before%20query%20string.*?text%20after=query%20string.*" , page . asXml ( ) ) )
assertEquals ( combinationsExpected , result )
Assert . assertTrue ( referredGraphs . contains ( DEFAULT_GRAPH ) )
assertEquals ( requestString , StaxUtils . toString ( response ) )
assertEquals ( s . fromReal ( 2 * - 4 + 3 * 6 + 5 * 7 ) , t1 . getDotProduct ( t2 ) , 1e-13 )
assertThat ( Template . parse ( markup ) . render ( assigns ) , is ( expected ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp2 , result ) )
assertTrue ( "Returned object should be a TransformedQueue." , queue instanceof TransformedQueue )
Assert . assertEquals ( "Domain is not valid - Should have 0 cookies" , 0 , result . size ( ) )
assertTrue ( "Wrongly reduced InOid filter: " + query . getFilter ( ) , query . getFilter ( ) instanceof NoneFilter )
assertTrue ( props . size ( ) > 0 )
assertEquals ( 0 , userPostCount . get ( topic ) )
assertThat ( result , is ( expectedAxiom ) )
assertThat ( controller . getUsers ( ) , hasSize ( 1 ) )
assertThat ( Integer . parseInt ( codepoints ) , is ( 0x0061 ) )
assertNull ( remainingBuffer )
assertThat ( result , is ( nullValue ( ) ) )
assertThat ( copyObjectRequest . getNewObjectMetadata ( ) . getSSEAlgorithm ( ) , is ( ObjectMetadata . AES_256_SERVER_SIDE_ENCRYPTION ) )
assertTrue ( tweets . length == 6 )
assertEquals ( "from SURVEY SURVEY with (NOWAIT, NOLOCK)\\nwhere SURVEY.NAME is null" , query . toString ( ) )
assertEquals ( "Line count" , lineCount , line . split ( "\\n" ) . length )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20100110</date>" + "<item><id>222</id><amount>1</amount></itemn></order>" , xml )
assertTrue ( runtimeService . createProcessInstanceQuery ( ) . singleResult ( ) . isSuspended ( ) )
Assert . assertTrue ( true )
Assert . assertEquals ( instantiatedMethod . getGeneratedClass ( ) , genericMethod )
assertEquals ( value , ( Double ) 20.6 )
assertEquals ( String . valueOf ( ReturnCode . NO_SPEECH . code ( ) ) , firstEvent . getParameter ( "rc" ) )
assertThat ( extractMonitorables ( adapter ) . get ( MIN ) . get ( ) , Matchers . < Object > is ( newMin ) )
assertEquals ( "" , result )
Assert . assertEquals ( expect , text )
assertEquals ( "A" , out . get ( "A" ) )
assertEquals ( STATUS_BAD_REQUEST , resp . getStatus ( ) )
assertTrue ( fromJson instanceof BigDecimal )
assertEquals ( destination , OutlineUtils . toPageDestination ( victim , catalog ) . get ( ) )
assertThat ( date . with ( YEAR , 2000 ) , is ( PlainDate . of ( 2000 , 2 , 29 ) ) )
assertThat ( asyncReconnectAfterReset , is ( notNullValue ( ) ) )
Assert . assertEquals ( BatchStatus . COMPLETED , jobExecution . getBatchStatus ( ) )
Assert . assertEquals ( "All is well" , message )
assertThat ( anonymized , is ( "http://<USERNAME>:<PASSWORD>@www.domain.com" ) )
assertEquals ( "T thing" , this . thing . asString ( ) )
assertTrue ( observer . await ( tc ) )
Assert . assertEquals ( "绗�涓�椤�|涓�涓�椤�|��椤�" , value )
assertEquals ( "double: 7 654 321,099" , b . primitiveDouble ( 7654321.0987d ) )
assertThat ( options . getCredentialsProvider ( ) , is ( URI . create ( "localjceks://file/foo/bar.jceks" ) ) )
Assert . assertEquals ( "564aa231f84039ce2b2b886e58f88dcee26fa3e3" , fp )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
Assert . assertSame ( dElem , mergeElem )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 4 ) )
assertEquals ( 0 , alarmClock . getAlarms ( ) . size ( ) )
assertTrue ( runtimeService . createProcessInstanceQuery ( ) . singleResult ( ) . isSuspended ( ) )
Verify . assertSize ( 6 , PetList pets )
Assert . assertEquals ( "s0" , udf . getValue ( ) )
Assert . assertEquals ( true , a . contains ( b ) )
assertEquals ( "AmqpResponder.AmqpMessage" , responderOptions . getMessageTemplate ( ) . get (AmqpMessage . class ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( VpnRoute . class ) )
assertEquals ( AssetPathToFilterConfigMapper . XLIFF_FILTER_CONFIG_ID , filterConfigId )
assertTrue ( AuthType . NOSASL . getAuthName ( ) . equals ( u . getAuthType ( ) ) )
assertions . doesNotContain ( value , index )
assertTrue ( ok )
assertEquals ( "Unexpected element in list: " + e , a , expected . get ( i ) )
assertTrue ( "List size mismatch across lists" , words1 . equals ( words2 ) )
assertNull ( ebl . getReceived ( ) )
assertEquals ( Arrays . asList ( "ok1" , "ok2" ) , list )
assertNull ( conceptService . getConceptProposal ( conceptProposalId ) )
assertEquals ( getFailureMessage ( ) , w , rows )
Assert . assertEquals ( reply , receivedReply )
assertTrue ( containsJob ( vrp . getJobs ( ) . get ( "1" ) , getRoute ( "21" , Solutions . bestOf ( solutions ) ) ) )
InvoiceCandidateExpectation . newExpectation ( ) . inDispute ( false ) . qtyWithIssues ( new BigDecimal ( "10" ) ) . qualityDiscountPercent ( new BigDecimal ( "33.33" ) ) . assertExpected ( receipt )
assertTrue ( or . isDefined ( ) )
assertParsedMessages ( fix )
assertThat ( found , is ( false ) )
assertArrayEquals ( "{ 'hello' : 'world' } not the expected bytes." , helloWorld , out . toByteArray ( ) )
assertEquals ( "date" , type . getDataType ( 0 , 0 , 0 , false ) )
assertScriptEquality ( expectedScript , actualScript )
assertEquals ( 2 , objectStrategy . deserialize ( in ) . size ( ) )
assertTrue ( cache . remove ( key , value ) )
assertThat ( restored . isNull ( ) , is ( true ) )
assertTrue ( alertService . hasAlerts ( AlertMapping . ALL_AUTHORIZED ) )
assertEquals ( "From is not properly parsed" , new Date ( 5 ) , mapper . readFrom ( columns ) )
Assert . assertEquals ( "There should be no matching threads since the node limit was reached" , 10 , freeThreads )
Assert . assertEquals ( expectedResults [ i ] , out )
assertEquals ( "The variable value was ignored." , "This is a email!" , value )
assertEquals ( persistenceModel2 , persistenceModel )
Assert . assertNotNull ( "Reply message was null on reply queue: " + replyQueue , reply )
assertEquals ( 1 , repository . getCommits ( ) . size ( ) )
assertThat ( impl . isPermitted ( Sets . newHashSet ( "repoName" , "repoName2" ) , "repoFormat" , BreadActions . READ , variableSource ) , is ( false ) )
assertThat ( result , containsString ( "<type>basic</type>" ) )
assertEquals ( "valueA" , pc . getString ( "keyA" ) )
this . assertLoadBlobViaTuples ( tuples , true , false )
assertEquals ( res , String . class )
assertEquals ( CREATED . getStatusCode ( ) , actual . getStatus ( ) )
assertEquals ( expResult , result , 0.000001 )
assertNotNull ( templateFile )
assertEquals ( Arrays . asList ( "Duke Oracle" , "Hantsy" ) , person )
assertEquals ( result , new Pair < > ( 0 , 4 ) )
assertEquals ( "Used the DemoService as default.\\r\\nYou can cancel default service by command: cd /" , result )
assertThat ( responseStep . getTestResponse ( ) . getTestSteps ( ) . get ( 0 ) . getTestResponse ( ) . getMetaData ( ) . getLabels ( ) . getItem ( "be" ) , is ( "different" ) )
assertEquals ( 3 , count )
assertThat ( attributeValueNs , is ( "CanHazExtendedWings" ) )
Assert . assertEquals ( "ZZZZ" , FastqTools . convertQualities ( fastq , FastqVariant . FASTQ_SANGER ) )
Assert . assertEquals ( id , E . withComponent ( Basic . class ) . id ( ) )
assertEquals ( expecteds , actuals )
assertTrue ( ca . getFallbackParameters ( ) . equals ( ap2 ) )
assertEquals ( outputExpected , certificateTabController . getExpected ( ) )
Assert . assertEquals ( "/css/ui.css" , ModuleUtil . getPathForResource ( module , path ) )
assertEquals ( expected , exported )
assertTrue ( ret . isEmpty ( ) )
assertNotNull ( reporter )
assertEquals ( expOut , out )
assertEquals ( boundingBoxOf , Rectangle . wrapped ( rectangles . get ( 0 ) ) )
assertEquals ( false , result )
assertEquals ( 0 , messages . size ( ) )
Assert . assertEquals ( IdentityConstants . BAD_REQUEST , IdentityResponseWrapper . buildFaultMessage ( responseMock ) . getCode ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertFalse ( user . isPresent ( ) )
assertEquals ( String . valueOf ( me . getCode ( ) ) , me . getNick ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff" + testName + "_" ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( RESULT_COUNT , actual )
Assert . assertEquals ( "did not get expected PARSedTags" , 1 , sb . length ( ) )
assertions . contains ( )
assertEquals ( expected , stats1 )
assertEquals ( 87 , result )
assertNotNull ( adviceController )
assertEquals ( z1 , z2 )
assertEquals ( "Resolved" , "scan-dir:" + file . toURL ( ) . toExternalForm ( ) , m_underTest . resolve ( file . getAbsolutePath ( ) ) )
assertThat ( b . getConsole ( ) , Matchers . containsString ( "Checking out " + svnContainer . getUrlUnsaveRepo ( ) ) )
assertEquals ( "Mon May 13 14:18:52 UTC 2017" , field . getDate ( ) . toString ( ) )
assertEquals ( parentVersion , instance . getParentVersion ( ) )
assertEquals ( 0 , tuple . len ( ) )
assertEquals ( qm1 , qm2 )
assertEquals ( EXPERIMENT_ID , deserialize ( buffer ) . getIdentifier ( ) )
assertEquals ( ByteBuffer . wrap ( stopRow ) , ByteBuffer . wrap ( new byte [ ] { 0 , 0 , 1 } ) )
assertRequest ( "POST" , "Message/" )
assertTrue ( acualValues . isEmpty ( ) )
assertThat ( ordinalVOs , hasItem ( ordinalA ) )
assertArrayEquals ( yhat1 , yhat2 , 1e-8 )
Assert . assertEquals ( 3 , registrationsRepository . getAllRegistrations ( ) . size ( ) )
assertEquals ( "localhost:8080" , req . host ( ) )
assertEquals ( "" , prettifiedKey )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertThat ( transformed , is ( nullValue ( ) ) )
this . assertLoadBlobViaTuples ( tuples , false , true )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_READ_LIMITED , ScopePathType . AFFILIATIONS_READ_LIMITED , ScopePathType . FUNDING_READ_LIMITED , ScopePathType . ORCID_PATENTS_READ_LIMITED , ScopePathType . PEER_REVIEW_READ_LIMITED , ScopePathType . ORCID_WORKS_READ_LIMITED )
assertThat ( PlainDate . axis ( ) . stepBackwards ( date ) , is ( PlainDate . of ( 2014 , Month . JANUARY , 24 ) ) )
assertDefaultConfig ( config , true )
assertEquals ( 5 , pages . size ( ) )
assertEquals ( 0 , h . nestLevel )
assertThat ( consoleStepListener . toString ( ) , is ( "a step" ) )
assertThatStepsInstancesAre ( builderUnloadableResource . buildCandidateSteps ( ) )
assertTrue ( result )
Assert . assertFalse ( jedis . jedis (JesqueUtils . createKey ( config . getNamespace ( ) , QUEUES ) , queue ) )
assertStack ( new Object [ ] { - 1 , null , null , null , null , null } , stack )
assertTrue ( "Unexpected compressed size: " + compressed . size ( ) , compressed . size ( ) > SAMPLE_SIZE * 8 )
assertTrue ( ( Boolean ) result )
assertEquals ( "Base for string is wrong" , Long . valueOf ( 3 ) , parsed )
assertEquals ( 0 , JNIBusyWaiting . INSTANCE . whileLessThan ( null , buffer . address ( ) , runs , 0 ) )
Assert . fail ( "Expected an exception" )
assertEquals ( 100 , vrp . getJobs ( ) . values ( ) . size ( ) )
assertThat ( timeLine . getValidIntervals ( ) , definedBy ( StartOfTime . create ( ) , point ( contemporaryExample ) , point ( contemporaryExample . plusDays ( 0 ) ) , EndOfTime . create ( ) ) )
runner . assertNotValid ( )
assertNull ( principal )
assertEquals ( expBefore , profile . getExpirationDate ( ) )
Assert . assertEquals ( expected , mFileSystemMaster . checkConsistency ( FILE , CheckConsistencyContext . defaults ( ) ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 )" , select . getQuery ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" + "456" ) . getValue ( ) )
assertThat ( view . status ( ) , containsString ( "disabled" ) )
assertNull ( candidate )
assertEquals ( 0 , breakpointCount )
assertNotNull ( InstalledAddOnExtension . reader ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertTrue ( mojo . isSkip ( ) )
assertNotNull ( model )
assertEquals ( expected . toString ( ) , actual . toString ( ) )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� ��#��" + "��###��" + "�尖�尖�尖�尖��" )
assertEquals ( 0 , document . select ( ".vcard.prodid" ) . size ( ) )
assertEquals ( "redis://${REDIS_URI}" , config . getAddress ( ) )
assertEquals ( results , clientWrapper . getBulk ( keys ) )
TestUtil . assertSuccess ( result )
assertEquals ( 1 , posts . size ( ) )
assertTrue ( connectFuture . isConnected ( ) )
assertThat ( tuple . getList ( "field" ) , equalTo ( value ) )
assertEquals ( 3 , map . size ( ) )
assertThat ( foundBanners , hasSize ( 0 ) )
assertThat ( buf . toString ( ) , is ( equalTo ( "" ) ) )
assertFalse ( count . isShowQuotas ( ) )
Assert . assertEquals ( field , fieldAccessor . getField ( ) )
assertEquals ( text , adapter . getStringAt ( 2 , 0 ) )
assertTrue ( entity . getName ( ) == null )
this . tester . assertRenderedPage ( AuthenticationRequiredPage . class )
Assert . assertEquals ( Response . Status . OK . getStatusCode ( ) , modifyingResponse . getStatus ( ) )
assertEquals ( "{\\"age\\":12}" , gson . toJson ( p ) )
Assert . assertEquals ( "{\\"@context\\":\\"../$metadata#Collection($ref)\\"," + "\\"value\\":[{\\"@id\\":\\"ESAllPrim(32767)\\"}," + "{\\"@id\\":\\"ESAllPrim(-32768)\\"}]}" , resultString )
assertEquals ( NAME_NODE , action . getNameNode ( ) )
assertNotNull ( ase )
assertEquals ( 5. , start . getTheoreticalEarliestOperationStartTime ( ) , 0.01 )
assertEquals ( "Success" , task . getResult ( ) )
assertFalse ( AuthzResolver . isAuthorized ( new PerunAdmin ( perun , new PerunPrincipal ( "pepa" , ExtSourcesManager . EXTSOURCE_NAME_INTERNAL , ExtSourcesManager . EXTSOURCE_INTERNAL ) , new PerunClient ( ) ) , Role . PERUNADMIN ) )
assertions . endsWith ( sequence )
assertEquals ( exp , area , 1e-10 )
assertNull ( propertiesConfigurationProperties . getProperty ( null ) )
Assert . assertEquals ( "56138725000103" , infoConsultaCadastro . getCnpj ( ) )
Assert . assertEquals ( Schema . Type . FIXED , subSchema . getType ( ) )
assertEquals ( config . getStorageIndexNamePrefix ( ) + "-1920-01-01_23" , name )
assertEquals ( 0 , result )
assertEquals ( "Hello Scott" , response )
assertEquals ( "\\t" , pluginParameters . indentCharacters )
assertThat ( target . equals ( flow ) , is ( true ) )
assertTrue ( GitFileUtils . exists ( file , commit , repo ) )
assertXMLEqual ( "Invalid source" , "<child/>" , result . toString ( ) )
assertEquals ( 8 , d )
assertNull ( nullGitTool )
assertTrue ( sn . equals ( other ) )
assertEquals ( fixture , this . libshout . getDumpfile ( ) )
Assert . assertEquals ( build . getBestStrategy ( ) , StringEncodingStrategy . ALWAYS_SAME_VALUE )
assertHelpLines ( "Option
assertThat ( f . andThen ( i -> i + 1 ) . apply ( "" , "" , "" , "" , "" ) , is ( 2 ) )
assertThat ( DockerHost . configPathFromEnv ( ) , equalTo ( "foobar" ) )
assertThat ( this . mongoTemplate . getCollection ( "span" ) , is ( notNullValue ( ) ) )
Assert . assertTrue ( Integer . MIN_VALUE == _c . convert ( "-9223372036854775808" ) )
assertEquals ( expected , toString ( tx ) )
assertNotNull ( result )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertEquals ( actualPage , expectedPage )
assertThat ( map , hasEntry ( "vt1" , RawSnmpUsage . class ) )
assertEquals ( "select * from (  " + "select a.*, rownum rn from (  " + "select survey1.ID from SURVEY survey1  ) " + "a) " + "where rn > 3 and rownum <= 5" , query . toString ( ) )
assertEquals ( FleetSize . FINITE , vrp . getFleetSize ( ) )
assertEquals ( URL + "?param+1=value1&param+2=value2" , uri . toString ( ) )
assertEquals ( 1 , ontology . getAxiomCount ( ) )
assertThat ( Version . findHighestMatchingBuildNumber ( version , versionSet ) , equalTo ( 10 ) )
assertResultSet ( res )
assertScoreAndParse ( content , "oracle_test_statements_4" , 4 )
assertEquals ( example , decoded )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "aUser" ) . count ( ) , is ( 1L ) )
assertEquals ( "Mr T, 1" , value )
assertThat ( breakers . size ( ) , is ( 3 ) )
Assert . assertEquals ( ste . toString ( ) , frame . toString ( ) )
assertXmlVersionInProlog ( inputWithBom , "1.1" , "<?xml version='1.1'>" )
assertFalse ( srcGeoCoding . isCrossingMeridianAt180 ( ) )
assertTrue ( videos . contains ( video ) )
assertCorrectBinaryString ( data , expected )
assertEquals ( qn , qnExpected )
assertThat ( toUnqualifiedVersionlessIdValues ( mySearchParameterDao ) , containsInAnyOrder ( "@Observation/O1" , "@Observation/O2" , "@Observation/O3" , "@Observation/O4" ) )
assertEquals ( g1 , g2 )
assertEquals ( "Mismatched result" , expected , actual )
Assert . assertEquals ( 200 , response . getStatus ( ) . getStatusCode ( ) )
Helpers . assertJson ( twinMetadata . toString ( ) , "{\\"$lastUpdated\\":\\"2017-09-21T02:07:44.238Z\\"}" )
assertTrue ( mappedNames . contains ( VALID_USERNAME_RESPONSE ) )
assertTrue ( JobUtils . isJobExecutionStoppable ( jobExecution ) )
assertScoreCompareToOrder ( comparator , buildNode ( 1 , "-110" , 5 , 41 ) , buildNode ( 1 , "-110" , 5 , 40 ) , buildNode ( 1 , "-110" , 7 , 40 ) , buildNode ( 1 , "-90" , 5 , 40 ) , buildNode ( 1 , "-90" , 7 , 40 ) , buildNode ( 1 , "-90" , 7 , 40 ) , buildNode ( 2 , "-110" , 5 , 40 ) , buildNode ( 2 , "-110" , 7 , 40 ) , buildNode ( 2 , "-90" , 5 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 )
assertEquals ( body . toString ( ) , "error test error" )
assertEquals ( "test-value" , clientWrapper . get ( "key1" , transcoder ) )
assertEquals ( resource , actualResource )
assertEquals ( UriComponentsBuilder . fromHttpUrl ( "http://www.indexer.com/api?t=search&extended=1&q=title title" ) . build ( ) , testee . buildSearchUrl ( searchRequest , null , null ) . build ( ) )
assertEquals ( "Wrong conversion result" , number , val . length ( ) )
assertEquals ( Arrays . asList ( 2 , 3 , 4 ) , fromLittleEndian ( b ) )
assertEquals ( expResult , result )
assertTrue ( "Datasets not isomorphic" , isomorphic ( m0 , m ) )
Assert . notNull ( canalInstance )
Assert . assertNotNull ( request . getHeaders ( ) )
Assert . assertNotNull ( str )
assertProposalDoesNotExist ( proposals , "Pick out selected part of String" )
assertEquals ( test , loadedEntity . getSomeBytes ( ) )
assertThat ( underTest . equals ( underTest ) , is ( false ) )
assertEquals ( expected , systemInputDef )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "a" , 1.0 , 2.3 , 3.4 , 4.5 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 , 10.0 , 11.0 , 12.0 , 13.0 , 14.0 , 15.0 , 16.0 , 17.0 , 18.0 , 19.0 , 20.0 , 21.0 , 22.0 , 23.0 , 24.0 , 25.0 , 26.0 , 27.0 , 28.0 , 29.0 , 30.0 , 31.0 , 32.0 , 33.0 , 34.0 , 35.0 , 36.0 , 38.0 , 39.0 , 40.0 , 41.0 , 42.0 , 43.0 , 44.0 , 45.0 , 46.0 , 47.0 , 48.0 , 49.0 , 50.0 , 51.0 , 52.0 , 53.0 , 54.0 , 55.0 , 56.0 , 57.0 , 58.0 , 59.0 , 70.0 , 70.0 , 71.0 , 70.0 , 71.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0 , 70.0
assertEquals ( diffItems . length , output . size ( ) )
assertEquals ( expectedLogMessage , actualLogMessage )
Assert . assertTrue ( list . size ( ) == 1 )
assertTrue ( Arrays . equals ( expected_output , actual_output ) )
assertEquals ( svalues , svalues1 )
Assert . assertEquals ( expected , computed , 0.000001 )
assertEquals ( new BigDecimal ( "0.00" ) , min )
Assert . assertEquals ( 3 , getRowCount ( ) )
assertTrue ( true )
assertNull ( getTestChargingStationFromRepository ( ) )
assertNotNull ( schema )
assertUrlProtected ( servletUrl )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) )
Assert . assertEquals ( access . getPosition ( rng . nextInt ( ) ) , d )
Assert . assertEquals ( 5 , ( ( Long ) l . get ( 0 ) ) . longValue ( ) )
Assert . assertNull ( option )
assertEquals ( 1L , result . available ( ) )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( centroidExpected , location . getCentroid ( ) )
assertThat ( uris , is ( asList ( new URI ( "http://baseurl/static/rapture/baseapp-prod.js" ) , new URI ( "http://baseurl/static/rapture/extdirect-prod.js" ) , new URI ( "http://baseurl/static/rapture/bootstrap.js" ) , new URI ( "http://baseurl/static/rapture/d3.v4.min.js" ) , new URI ( "http://baseurl/extjs-script-1-test-1.js" ) , new URI ( "http://baseurl/extjs-script-2-test-1.js" ) , new URI ( "http://baseurl/extjs-script-1-test-2.js" ) , new URI ( "http://baseurl/static/rapture/test-1-prod.js" ) , new URI ( "http://baseurl/static/rapture/test-2-prod.js" ) , new URI ( "http://baseurl/static/rapture/app.js" ) ) ) )
JsonAssert . assertJsonObjectEquals ( EXPECTED_JSON_RESPONSE , jsonResponse )
assertTrue ( engine instanceof SimpleExecutionEngine )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
Assert . assertTrue ( conference . getConferenceDetail ( ) . isEmpty ( ) )
Assert . assertTrue ( links . isEmpty ( ) )
assertEquals ( "testStr" , bean . getTestStr ( ) )
assertTrue ( "Run called" , flag )
Assert . assertTrue ( "the 'stopMaintenanceMode' method was not invoked as expected." , invoked )
assertEquals ( "{\\"duration\\":{\\"a\\":1,\\"b\\":16,\\"c\\":4,\\"d\\":43}}" , JsonHelper . toJSONResult ( res ) )
assertEquals ( "Must be equal" , optNodes , Optional . of ( nodeIid ) )
assertThat ( message . getKeyword ( ) , is ( keyword ) )
assertTrue ( "Expected successful outcome" , response . getUnderlying ( ) )
assertNumEquals ( "1.0" , highestValue . getValue ( 0 ) )
assertEquals ( set , sameSet )
context . assertTrue ( res . failed ( ) )
assertEquals ( MediaType . TEXT . name ( ) , child . getAttribute ( mediaTypeAttributeType . getName ( ) ) . getValue ( ) )
Assert . assertTrue ( result )
assertTrue ( "Configurable http server mechanism factory should be created" , ops . exists ( TEST_SERVER_MECHANISM_FACTORY_ADDRESS ) )
Assert . assertThat ( item , is ( equalTo ( task2 ) ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertThat ( list . size ( ) , is ( 1 ) )
assertSame ( "OutputStream is not set correctly." , outputStream , entrancePi . getOutputStream ( ) )
assertEquals ( bd1 , bd2 )
assertTrue ( "t value should be null" , null == cr . getTag ( "t" ) )
assertEquals ( 1 , searchResults . getTotalNumberOfSearchResults ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( families , arrayContaining ( ProcessingFamilyDefinition . NAME ) )
given ( ) . param ( "expand" , 1 ) . when ( ) . get ( "resources/" ) . then ( ) . assertThat ( )
assertThat ( header . getName ( ) , is ( "name" ) )
assertEquals ( 2 , setWithUpperBound . size ( ) )
assertEquals ( expected , buchberger )
assertEquals ( "
assertEquals ( expecteds , actuals )
assertNotNull ( jobs )
assertThat ( gson . fromJson ( gson . toJson ( i ) , Interval . class ) , is ( i ) )
assertAnnotations ( 1 , Temporal . class , new TestEntity < > ( 0 , "Mon 25th February 2013" ) )
assertNotNull ( resp )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
Assert . assertEquals ( FastMath . toRadians ( x ) , value . toRadians ( ) . getReal ( ) , epsilon )
assertEquals ( "foo" , testClass4StringFieldAccessor . getValue ( testClass4 ) )
assertEquals ( "Wrong content" , CONTENT , readFile ( testSavePropertiesFile . getParentFile ( ) . toURI ( ) . toURL ( ) . toString ( ) ) )
assertEquals ( "replName#testParagraphTitle" , actual )
Assert . assertTrue ( "Adler32 mismatch between written and read" , processListener . checkAdlers ( ) )
assertEquals ( 10 , classUnderTest . getUpdateAction ( ) )
assertEquals ( model . getModels ( ) . size ( ) , 0 )
assertNotNull ( lp )
assertThat ( result , equalTo ( "withIsmyField" ) )
assertEquals ( guess , set2 . guess ( ) )
assertTrue ( output , output . contains ( "The command-timeout must be a valid positive integer" ) )
assertSuggestions ( suggestions , "foo" , "foob" )
Assert . assertEquals ( "John" , response . iterator ( ) . next ( ) . getUuid ( ) )
assertEquals ( "noVehicle" , v . getId ( ) )
assertEquals ( 0 , test . build ( ) . size ( ) )
assertThat ( factory . buildConfiguration ( ) , is ( filterConfig ) )
assertThat ( output , stringContainsInOrder ( "    <text>" , "        <div" , "           <pre>line1\\nline2\\nline3  <b>BOLD</b></pre>" ) )
assertEquals ( "342\\n" , found )
assertEquals ( m , new HashMap < > ( m ) )
assertEquals ( "Number of upgrades steps" , 1 , path . size ( ) )
assertThat ( actual , is ( "localhost" ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_FAILURE , 1 )
assertions . doesNotContainNull ( )
assertEquals ( "99\\n" , found )
assertTrue ( Arrays . equals ( recreated , secret ) )
assertEquals ( buf . toString ( ) , "{\\"a\\":\\"aa\\"}" )
assertThat ( element . getText ( ) , is ( "still 0123456789" ) )
assertEquals ( vNum , stringsNum )
assertEquals ( BPResultType . PASS , result . getResultType ( ) )
assertEquals ( 3 , algo . getSearchStrategyManager ( ) . getStrategies ( ) . size ( ) )
assertThat ( result , is ( "Slicer" ) )
Assert . assertNotNull ( query . retrieveKnownFields ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( 1 , properties . size ( ) )
assertNotSame ( dg1 , dg2 )
assertEquals ( input . limit ( ) , input . position ( ) )
assertFalse ( found )
assertEquals ( "Did not parse expected message" , expected , dMsg )
assertProcessEnded ( pi . getId ( ) )
assertFalse ( validate )
assertNotNull ( "Condition builder is not built" , builder )
assertEquals ( FeatureState . ENABLED , state )
assertValidationFailures ( deriver , config )
assertTrue ( ! failed . get ( ) )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "INVALID_ACCOUNT_ID" )
assertArrayEquals ( helloMessage . toByteArray ( ) , serialised )
assertEquals ( NUMADD , table . size ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getSex ( ) == 'M' )
assertEquals ( "xmlEntity() content-type-header=[application/custom] accepts-header=[*/*]" , actual )
assertArrayEquals ( expectedSorted , data )
assertNotNull ( logger )
assertThat ( defn . equals ( defn2 ) , is ( false ) )
assertEquals ( "Editable MASTER ACE for UID1 should be equal to expectedOwnerAccessControlEntry" , expectedOwnerAccessControlEntry , store . getEditableMasterAccessControlEntries ( UID1 ) . get ( 0 ) )
assertValid ( result )
assertNotNull ( result )
Assert . assertEquals ( expected , actual )
assertEquals ( expectedDate , formatDate ( "yyyyyy-MM-dd HH:mm" , result ) )
assertEquals ( 3 * 1024 * 1024 , cluster . getDataNodes ( ) . size ( ) )
assertTrue ( expectedDesc . containsAll ( list ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( entity ) )
assertEquals ( providedToken , userConfig . getToken ( ) )
assertEquals ( "val3" , value )
assertEquals ( "x" , record . toString ( ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsFile , accessObjectFactory , irodsAccount )
assertNotNull ( Media . fetcher ( "FXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( 1 , reservations . size ( ) )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertTrue ( pageXml . contains ( "Welcome to Page2" ) )
assertThat ( value , is ( nullValue ( ) ) )
assertEquals ( StatusCode . NAMESPACE_NOT_FOUND , response . getCode ( ) )
assertFailureLogPresent ( pi , "failingTask" )
assertEquals ( Collections . singletonList ( 3L ) , context . performQuery ( query ) )
assertEquals ( null , min )
assertTrue ( Objects . equals ( city , getDocumentDataAsCity ( docRef ) ) )
Assert . assertEquals ( "(hgvs_variant (nt_single_allele_var (nt_single_allele_multi_change_var (reference NM_000109.3 :) c. (nt_multi_change_allele [ (nt_multi_change_allele_inner (nt_change (nt_change_inner (nt_change_substitution (nt_point_location (nt_base_location (nt_number 123))) A > C))) (nt_var_sep /) (nt_change (nt_change_inner (nt_change_substitution (nt_point_location (nt_base_location (nt_number 124))) A > C))) ]))))" , hgvs_variant . toStringTree ( parser ) )
assertNull ( polygonSymbolizer . getFill ( ) )
assertThat ( getPodSpec ( jobSpec ) . getReadinessGate ( ) , is ( new V1PodReadinessGate ( ) . conditionType ( "www.example.com/feature-1" ) ) )
assertThat ( result . getPayload ( ) , is ( not ( instanceOf ( ExceptionPayload . class ) ) ) )
assertEquals ( "test" , c . getFunction ( "test" ) )
Assert . assertEquals ( 0 , proposals . size ( ) )
assertEquals ( "Mismatched data" , expected , res )
files . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertArrayEquals ( shapeAssertion , get . shape ( ) )
Assert . assertEquals ( 400 , index )
assertEquals ( 1 , message . getMessageId ( ) )
assertEquals ( "Document" , da . getDocType ( ) )
assertMatches ( expr . matcher ( "/a/b/c/d/e/@something" ) , "/a/b/c" , "/x/y" )
assertTrue ( r1 . equals ( r2 ) )
assertEquals ( ( byte ) 8 , ( byte ) result . getByteWrapperValue ( ) )
assertNotNull ( result )
assertEquals ( allAlarms . size ( ) , alarmService . getAllAlarms ( ) . size ( ) )
assertEquals ( 14 , xreader . findIPStart ( packet ) )
assertEquals ( reference , andPredicate . asCNF ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
Assert . assertEquals ( msg , result )
assertEquals ( MODEL_ID , savedModel . getId ( ) )
Assert . assertNotNull ( registerSingletonService )
assertSame ( hello . getIterationStrategyStack ( ) . get ( 0 ) , uriTools . resolveUri ( HELLO_URI . resolve ( "iterationstrategy/0/" ) , wfBundle ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( setPin , BytesHelper . pinGet ( setPin ) )
assertEquals ( Sets . newHashSet ( "server=server1->db=jranalyst1" , "server=server1->functions" ) , backend . getPrivileges ( Sets . newHashSet ( "manager" ) , new ActiveRoleSet ( Sets . newHashSet ( "functions" ) ) ) )
Assert . assertTrue ( cp . contains ( "com.sun.jini:outrigger-dl:jar:2.1" ) )
Assert . assertNotNull ( obj )
Assert . assertTrue ( errMsgList . isEmpty ( ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) Credential . builder ( ) . userName ( "user" ) . setPassword ( "password" . toCharArray ( ) ) . database ( "db" ) . x509 ( ) . build ( ) ) )
assertThat ( result , Matchers . equalTo ( "test1=blah1&test2=blah2" ) )
assertEquals ( 3.14159 , result , 0.00001 )
assertEquals ( 6L , impl . getNanoTime ( ) . size ( ) )
assertIdentityNotExist ( securityRealm , evidence )
assertTrue ( "deploy artifact should exist" , destinationJar . exists ( ) )
assertTrue ( serviceManager . getAllServiceTypes ( pgList ) . size ( ) == 5 )
assertThat ( rendering , is ( "1st September 2011" ) )
assertEquals ( users , userDao . add ( "1" , "first" ) )
assertEquals ( "a < b" , out . getDrl ( ) . getEscapeValue ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "with recursive sub as ((select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\\n" + "from EMPLOYEE EMPLOYEE\\n" + "where EMPLOYEE.FIRSTNAME = ?)\\n" + "union all\\n" + "(select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\\n" + "from EMPLOYEE EMPLOYEE, sub\\n" + "where EMPLOYEE.SUPERIOR_ID = sub.ID))\\n" + "select *\\n" + "from sub" , serializer . toString ( ) )
assertEquals ( expected , stripped )
this . context . assertIsSatisfied ( )
Assert . assertArrayEquals ( new File [ ] { longhand } , longhand )
assertTrue ( runtimeFolder . exists ( ) )
assertThat ( date , is ( PlainDate . of ( 2012 , 2 , 1 , 0 ) ) )
assertTrue ( exception )
assertEquals ( 0 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
assertTrue ( dsl . size ( ) > 0 )
assertEquals ( 200 , result . getStatus ( ) )
assertFalse ( strategy . shouldRetry ( request , env ) )
assertFalse ( info . hasErrors ( ) )
assertEquals ( OFPFlowActionSetField . OFPFlowMatch . class , target . getOFPFlowMatch ( ) . getClass ( ) )
assertEquals ( "Count of customer" , 0 , res )
assertThat ( address . getSession ( ) , is ( nullValue ( ) ) )
assertNull ( capabilities . getOperation ( WMSCapabilitiesOperation . UNSUPPORTED ) )
assertEquals ( 0 , symbols . size ( ) )
assertEquals ( "Cell should be selected." , "1" , getGridElement ( ) . getHeaderCell ( 0 , 1 ) . getText ( ) )
assertEquals ( "-23" , sb . toString ( ) )
assertThat ( configurer . getConnection ( ) , is ( notNullValue ( ) ) )
assertNotEquals ( 0 , validationIssues . size ( ) )
assertEquals ( pb . getProperty ( "test" ) , "42" )
Assert . assertTrue ( errors . hasFieldErrors ( "dose" ) )
assertTrue ( client . hasMobile ( ) )
assertPaths ( paths , "s,t,t" , "s,t,t" )
assertEquals ( "test.jar" , content )
assertEquals ( "not anymore" , concrete . finalMethod ( ) )
assertThat ( driver . findElement ( By . cssSelector ( ".date-and-time" ) ) . isDisplayed ( ) , is ( true ) )
assertThat ( target . matchExactly ( match ) , is ( false ) )
assertEquals ( s , s2 )
assertTrue ( result . getMessage ( ) . contains ( "Invalid JSON" ) )
assertEquals ( TestEnum . A , settings . getEnumValue ( "key" ) )
assertTrue ( cut . getLinks ( ) . isEmpty ( ) )
assertEquals ( "my" , result . get ( ) )
assertEquals ( 0L , analyser . getCommands ( ) . values ( ) . iterator ( ) . next ( ) . getCommand ( 0 ) . getAllStatmts ( ) . stream ( ) . filter ( stat -> stat . getPosition ( ) . getLine ( ) == 24 ) . count ( ) )
assertEquals ( expected , actual )
assertNotNull ( childCert )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoImportacao ( ) . toString ( ) )
assertTrue ( operations . isEmpty ( ) )
Assert . assertNull ( "Result is not null" , o )
assertThat ( currentSessionManager . getMeasurementStreams ( ) . size ( ) , equalTo ( 0 ) )
Assert . assertEquals ( "bar" , resolved )
assertFalse ( lockAcquired )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( tctf . isReady ( mock ( CyColumn . class ) ) )
assertFalse ( timeLine . isValid ( intervalEnd ) )
assertEquals ( 1 , ( int ) access . readFromExpecting ( "stoppedCount" , 1 ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "Hello Kermit" , result )
assertEquals ( "action" , action )
assertEquals ( "a = a.entrySet();" , CodeModelTestsHelper . toString ( aLambda ) )
assertEquals ( Status . CREATED . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 2 , resultWarningsCount )
assertThat ( manager . getPreferences ( ) , is ( applicationPreferences ) )
assertTrue ( accept )
assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertFlatResult ( result )
assertNotNull ( entity . getId ( ) )
utils . assertStatus ( "/stacks/" + id , HttpStatus . OK )
assertNotNull ( createdPost )
runner . assertValid ( )
Assert . assertEquals ( "11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y" , endereco . getNumero ( ) )
assertThat ( buf . toString ( ) , is ( equalTo ( "// act\\r\\n" ) ) )
Assert . fail ( "Failed to catch unsupported comparator names" )
assertTrue ( rootNode . isAuthenticationEnabled ( ) )
assertEquals ( 3.0 , WeightedLevenshtein . distance ( "totanic 1" , "titanic 2" , e ) )
Assert . assertEquals ( "Hello World" , new String ( err . toByteArray ( ) ) )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
Assert . assertEquals ( expected , actual )
assertTrue ( cont1 == 10 )
assertEquals ( asList ( foo2 , foo3 ) , results )
assertTrue ( s . contains ( "Transaction count" ) )
assertEquals ( "PONG" , result )
assertFalse ( 0 > v . compareTo ( v ) )
assertTrue ( content . contains ( "foo=bar" ) )
assertSameEnumeration ( "BreadthFirstModel" , coreEnum , xEnum )
assertTrue ( "Should have caught an exception" , caughtNullMutation )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( DEFAULT_PAGE_LIMIT , limit )
assertEquals ( attributeName , wadlAttributeName . getName ( ) )
assertEquals ( row , null )
assertTrue ( Files . isDirectory ( target ) )
Assert . assertEquals ( "<p>Target blank link</p>" , text . asHtml ( linkResolver ) )
Assert . assertNotNull ( json . getString ( "unRecommendPostId" ) )
assertEquals ( TERM_FACTORY . getConstantLiteral ( "2016-12-02 15:57:02.03" , XSD . DATE ) , translation )
assertEquals ( "l'item 42" , withLabel . getLabel ( ) )
assertThat ( result . fullName ( ) , is ( "boolean" ) )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
Assert . assertEquals ( 50L , tuplesPerWindow )
assertThat ( throttler . throttledRequests ( ) , is ( 1L ) )
assertNotNull ( result )
assertFalse ( features . isEmpty ( ) )
assertThat ( next . join ( ) , is ( VALUE ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "http://a.b/abc" , servletURI )
assertEquals ( String . format ( "Create table new_table with 1 column and no indexes" + "%n    - A non-null column called column_one [STRING(10)]" ) , HumanReadableStatementHelper . generateAddTableString ( newTable ) )
assertResultsMatch ( select ( windowFunction ( sum ( field ( "aggregationValue" ) ) ) . partitionBy ( field ( "partitionValue1" ) ) . build ( ) . as ( "unorderedWindowSum" ) ) . from ( tableRef ( "WindowFunctionTable" ) ) , "19" , "19" , "19" , "19" , "19" , "19" , "19" )
assertNotNull ( svg )
assertEquals ( externalLink , delegatedExternalLink )
assertEquals ( score , smsd1 . getEnergyScore ( 0 ) )
Assert . isTrue ( 13388L == time )
assertThat ( task , is ( equalTo ( des ) ) )
assertEquals ( "the status of message reply must be 'ok'. " , "ok" , reply . body ( ) . getString ( "status" ) )
assertEquals ( 3 , inMemoryResultAccumulator . getAggregationResultCount ( ) )
assertThat ( properties , containsInAnyOrder ( allOf ( hasProperty ( "name" , equalTo ( "name" ) ) , hasProperty ( "value" , equalTo ( "Hans" ) ) ) , allOf ( hasProperty ( "name" , equalTo ( "age" ) ) , hasProperty ( "value" , equalTo ( "12" ) ) ) ) )
assertTrue ( baseTestFailed )
assertThat ( returnValue , equalTo ( "public" ) )
assertEquals ( 3 , providerList . size ( ) )
assertTrue ( checkContains ( reasoned , "SubClassOf(<http://x.org/XA> <http://x.org/XB>)" ) )
assertEquals ( new HashSet < String > ( ) , all )
assertThat ( sut . getGMPath ( ) , is ( expectedPath ) )
assertThat ( coll . withComplement ( window ) , is ( expected ) )
assertQuery ( em , 1 , query )
assertEquals ( 3 , ac . size ( ) )
assertEquals ( ti [ 0 ] , BigInteger . valueOf ( ti [ 1 ] ) )
assertNotNull ( result )
assertEquals ( 0 , acia . getTx ( ) )
Assert . assertEquals ( - 1 , timeZoneDefinition . compare ( second , null ) )
assertNotNull ( Service . reader ( ) . read ( ) )
Assert . assertTrue ( ( ( BasicDecider ) instance ) . compareWorkflowRunFiles ( metadata . getWorkflowRun ( workflowRunAcc ) . getInputFileAccessions ( ) , filesToRun ) == BasicDecider . FILE_STATUS . DISJOINT )
assertEquals ( false , mockResult . included ( "canEdit" ) )
assertEquals ( m1 , m2 )
assertTrue ( ctx1 . getScore ( ) < ctx2 . getScore ( ) )
assertEquals ( valueIn , valueOut , 0.0001 )
assertEquals ( testChangeNameSvrAddr , opsService . getNameSvrAddrList ( ) . get ( 0 ) . getAddress ( ) )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "23-Apr-2013" )
assertEquals ( "alal" , studyAccession )
assertEquals ( expecting , found )
Assert . assertEquals ( "ExacRecord [chrom=1, pos=13371, id=., ref=G, alt=[C], filter=[], " + "alleleCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], ALL=[2]}, " + "alleleHetCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], ALL=[1]}, " + "alleleHemiCounts={}, " + "chromCounts={AFR=770, AMR=134, EAS= 254, FIN=16, NFE=2116, OTH=90, SAS=5052, ALL=8432}, " + "alleleFrequencies={AFR=[0.0], AMR=[0.0], EAS=[0.0], FIN=[0.0], NFE=[0.0], OTH=[0.0], SAS=[3.95882818685669E-4], ALL=[2.3719165085388995E-4]}]" , record . toString ( ) )
assertEquals ( expectedValue . trim ( ) , entityExecutor . getEntities ( ) . get ( 1 ) . getContent ( ) . trim ( ) )
assertEquals ( 1 , allPatients . size ( ) . intValue ( ) )
assertEquals ( 0 , oobMixer . getOutput ( ) . size ( ) )
assertEquals ( 1 , serviceInfos . size ( ) )
Assert . assertEquals ( ValidationType . DAY_OF_MONTH , ctxUser . execute ( input ) )
assertTotal ( list )
assertTrue ( verifier . verify ( signature ) )
Assert . assertEquals ( getManager ( ) . count ( ) , count - 1 )
assertEquals ( expResult , stringBuilder . toString ( ) )
Assert . assertFalse ( "Failed to configure bad pattern" , grok . configure ( props ) )
assertEquals ( query , result )
assertTrue ( "Date entity validation failed" , schema . validate ( dateString ) )
assertTrue ( obtainedLock )
assertNotNull ( "Immunosuppression was not null" , immunosuppressionTreatment )
assertEquals ( expected . toString ( ) , encoded . toString ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( "Should be a copy of the original request" , adapter . isRequestSupported ( request ) )
assertNotNull ( testObj . getVendorOptionInfo ( ) )
Assert . assertEquals ( "Processing of the HL7 message did not result in the new proposal being added to the model" , initialOccurrences + 1 , Context . getConceptService ( ) . getConceptProposals ( "PELVIC MASS" ) . size ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertNotNull ( val )
Assert . assertEquals ( quantidadeItemEfetivamenteExportado , exportacaoIndireta . getQuantidadeItemEfetivamenteExportado ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><camelGlobalModules><first>John</first><last>Citizen</last></camelGlobalModules>" , result )
assertArrayEquals ( "Byte arrays are not the same." , bOut . toByteArray ( ) , finalOut . toByteArray ( ) )
assertEquals ( 0 , parser . getClasspath ( ) . size ( ) )
assertNotNull ( itemId )
assertEquals ( 6. * 3600. + 6. * 60. + 12. * 3600. + 12. , sec , 0.01 )
Assert . assertEquals ( Integer . class , clazz )
Assert . assertTrue ( "Unexpected returned set" , ret . containsAll ( referenceList ) && ret . size ( ) == referenceList . size ( ) )
assertNotNull ( session . from ( $ ( var ) ) . where ( $ ( var . getText ( ) ) . containsIgnoreCase ( "a bcd e" ) ) . uniqueResult ( $ ( var ) ) )
assertNotNull ( fixture )
assertUnsuccessfulConversion ( res )
assertFalse ( controller . isConnected ( ) )
assertEquals ( object , result )
Assert . assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertEquals ( "v1" , global . getString ( key ) )
assertThat ( attributeReference , is ( notNullValue ( ) ) )
assertThat ( output . readValuesToList ( ) , equalTo ( expectedValues ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( sql , expect )
assertTrue ( kbuilder . hasErrors ( ) )
assertTrue ( "processor does not support supported return type" , processor . supportsReturnType ( supportedReturnType ) )
Assert . assertEquals ( 4 , count . get ( ) )
assertEquals ( properties , injectedProperties )
assertArrayEquals ( expected , jsonified )
assertEquals ( jsonValue , result )
assertNull ( response . getRedirectedUrl ( ) )
Assert . assertNotNull ( "staticNonvoidNoParams should have returned a value" , returned )
Assert . assertEquals ( DEFAULT_USERNAME , callIntermediateWhoAmI ( ) )
assertThat ( domainPresenceInfo . getDomain ( ) , is ( nullValue ( ) ) )
tester . assertContains ( "admin" )
context . assertAuthzException ( statement , "CREATE DATABASE admin1" )
assertThat ( secretClubName , is ( notNullValue ( ) ) )
assertEquals ( "<p>Test</p>" , cleanHtml )
assertEquals ( rc . request ( ) . host ( ) , host )
assertThat ( restResponse . getCode ( ) , is ( 200 ) )
assertEquals ( conditionEvaluator , conditionEvaluator )
assertFalse ( impl . hasElapsed ( ) )
assertSame ( TEST_ROUTE , extractedValue )
Assert . assertEquals ( testString , decodedUTF8 )
assertTrue ( messageLatch . await ( 3 , TimeUnit . SECONDS ) )
assertNotNull ( "name is null" , conf . getName ( ) )
assertThat ( dialect . addOptimizerHints ( sql , hints ) . toString ( ) , is ( "SELECT /* SQL_ID */ /*+ INDEX (PUBLIC.TEST_1 test_ix) USE_NL */" + System . lineSeparator ( ) + " * FROM PUBLIC.TEST_1" ) )
assertEquals ( "PointImpl" , pt . getClass ( ) . getName ( ) )
assertArrayEquals ( array . data ( ) . asFloat ( ) , compressed . data ( ) . asFloat ( ) , 0.1f )
assertTrue ( Arrays . equals ( getPacketData ( "02 00 71 00" ) , request . serialize ( ) ) )
assertThat ( generatedHtmlReports . size ( ) , is ( 3 ) )
assertTrue ( Arrays . equals ( pktSerialized , pktSerialized1 ) )
Assert . assertFalse ( ldapLogin . doAction ( req , resp ) )
assertPayloadEqual ( contents )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED" , FilterUtils . eq ( "service.objectClass" , "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ) , 2 , TimeUnit . SECONDS )
assertEquals ( "URI is not built correctly" , expectedUri , newUri )
assertThat ( options . getRegion ( ) , is ( region . getName ( ) ) )
assertNotNull ( kieBase )
Assert . assertEquals ( conn . getResponseCode ( ) , HttpURLConnection . HTTP_BAD_REQUEST )
assertNull ( ids )
assertFalse ( infoValidator . validate ( info ) )
assertEquals ( "Advance(2)" , screenshotPlugin . parseLevelUpWidget ( LEVEL_UP_LEVEL ) )
assertEquals ( 0 , input . read ( ) )
assertUrl ( url , "https" , "localhost" , 443 , "/app" )
assertEquals ( array , buffer . array ( ) )
assertThat ( syncManager . findMarkedProjectsToSync ( ) . size ( ) , is ( 1 ) )
assertTrue ( result )
assertEquals ( "0.002322" , button . getStatusProperty ( "sensor_value" ) . get ( ) . getValue ( ) )
assertTrue ( matcher . matches ( mockElement ) )
assertOut ( "/**\\n * @export\\n * @return {number}\\n */\\nfoo.bar.B.prototype.b = function() {\\n  var /** @type {Array.<string>} */ s = null;\\n  return s.length;\\n}" )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( configurator . getIntProperty ( propertyName ) , expectedValue , TestUtility . epsilon )
assertEquals ( "user1,user2" , result )
assertEquals ( 1 , performImportScript ( csv , false ) )
assertEquals ( "com.querydsl.codegen.QPoint.Q" , factory . create ( type ) . getFullName ( ) )
assertEquals ( "Some String" , leftTrimmedString )
assertTrue ( result )
assertEquals ( USER_PRINCIPAL , op . getUserPrincipal ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( exp instanceof ASTCurrentTime )
assertThat ( info . isTeiidSupport ( ) , is ( Boolean . FALSE . booleanValue ( ) ) )
assertEquals ( expected , actual )
assertMedianIs ( 3D )
Assert . assertEquals ( true , DeDupExample . Collector . isDone ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter a=\\"b\\" foo=\\"bar\\"/>" , elem . toXml ( ) )
assertFalse ( gc . moveToTrash ( path ) )
Assert . assertNull ( "No se ha borrado el documento" , getServicioDocumentos ( ) . getInfoDocumento ( ID_EXISTENTE ) )
Assert . assertTrue ( "Expected file to exist" , recoveryDir . exists ( ) )
assertEquals ( DummyDrawHandler . drawTextToString ( "Das ist \\" dfs " , 10 , 20 , AlignHorizontal . LEFT , null ) , drawHandler . getLastDrawCall ( ) )
assertTrue ( result . isEmpty ( ) )
assertAnnotationCompletions ( "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${else.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@Value(\\"${spring.prop3}\\"<*>)" , "@Value(\\"${spring.prop1}\\"<*>)" , "@Value(\\"${spring.prop2}\\"<*>)" , "@
assertEquals ( request . getRequestHeaders ( ) , headers )
assertEquals ( query , expected )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expecting , found )
assertMatch ( e , s )
assertEquals ( 15 , result )
Assert . assertEquals ( "Kermit" , result )
assertTrue ( true )
Assert . assertEquals ( "12 minutes ago" , t . format ( new Date ( 0 ) ) )
assertEquals ( Deencapsulation . getField ( deviceRegistrationState , "errorMessage" ) , VALID_ERROR_MESSAGE )
assertEquals ( target . field , check . send ( ) )
assertSame ( t . toLocalTime ( ) , LocalTime . MIDNIGHT )
Assert . assertEquals ( "123\\r\\n1\\r\\n:0\\r\\n*0\\r\\n" , str )
assertTrue ( "Expected a non-empty set of values." , expected . length != 0 )
Assert . assertTrue ( this . component . setVisibility ( this . entity1 , PRIVATE ) )
Assert . assertEquals ( "name1" , person . getAttribute ( "name1" ) . getName ( ) )
Assert . assertEquals ( 1 , qualifyMock . getMessages ( ) . size ( ) )
assertEquals ( "UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START t眉眉p INT -> TEXT, vaartus 0 17 * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'" , sqls [ 0 ] . toSql ( ) )
assertTrue ( algos . length > 0 )
Assert . assertEquals ( Long . MAX_VALUE , v )
assertEquals ( response . getStatus ( ) , HttpServletResponse . SC_NOT_FOUND )
assertEquals ( "HmacMD5 size" , 20 , result . length )
assertEquals ( EXPECTED_HEADER , token )
Assert . assertEquals ( 33L , vm . getGraphicsState ( ) . vmMode . longValue ( ) )
assertEquals ( Collections . EMPTY_SET , nullFieldProblems )
assertEquals ( vo . get bags ( ) . get ( 1 ) . getNumber ( ) , "5432109876" )
runner . assertNotValid ( )
assertNotNull ( getFixture ( ) . review ( null , master , slave ) )
assertEquals ( 0 , proxy . executeStatement ( "statment" , null , null ) )
assertEquals ( clientDn , escapedClientDn )
assertEquals ( result , "not ok" )
assertNotNull ( argumentType )
assertEquals ( "info:My message with 3 parameters : 1, 2, 3" , output )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<break/>" , elem . toXml ( ) )
assertEquals ( host . address , "https://localhost:6443" )
Assert . assertTrue ( "Expected zero but it was: " + actualValue , actualValue == 0 )
assertThat ( stepListener . getCurrentTestOutcome ( ) . getTestSteps ( ) . get ( 1 ) . getScreenshotCount ( ) , is ( 4 ) )
assertTrue ( this . testBulkListRequestHandlerAdvice . executeLatch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "| script | selenium driver fixture |\\n" + "| start browser | firefox | on url | http://example.com |\\n" + "| check | is | getText | on | field | Test |\\n" + "| stop browser |\\n" , result )
assertKernel ( kernel , CIRCLE3 , e )
assertEquals ( 14 , xreader . findIPStart ( packet ) )
assertXMLEqual ( expected , actual )
assertEquals ( expResult , result )
assertEquals ( "0362210a336ba79c6c6cab30bf09deaf2f1a749e6f" , actual . get ( "/content/test-page/jcr:content" ) )
assertIterationsEqual ( out2 , out1 )
assertTrue ( containsMutatedSeededMethod )
assertArrayEquals ( expectedBuffer , buffer )
assertEquals ( numeric , query ( ) . from ( numeric ) . select ( numeric . value ) . fetchFirst ( ) )
assertEquals ( "Item 1" , irs . getItemName ( ) )
Assert . assertEquals ( total , JFishList . wrap ( all ) . sum ( "age" ) . intValue ( ) )
assertEquals ( ( ( SoapMessage ) messageContext . getRequest ( ) ) . getSoapMessage ( ) , result )
FunctionTestUtil . assertResult ( stringFunction . invoke ( contextMap ) , "{ key1 : value1, key2 : { childKey1 : childValue1 } }" )
assertNotNull ( countTime )
assertThat ( config . getProvider ( ) , Matchers . is ( Matchers . typeCompatibleWith ( SpringContainerProvider . class ) ) )
assertNotNull ( fixture )
assertEquals ( exp , rev )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertNotNull ( rec )
Assert . assertTrue ( this . component . setVisibility ( this . entity1 , PRIVATE ) )
assertNotNull ( Fax . fetcher ( "FXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Failed to construct proper writer" , "Hello" , result )
assertEquals ( AuthStatus . SUCCESS , module . validateRequest ( messageInfo , client , null ) )
assertEquals ( expResult , result )
Assert . assertNotNull ( editor . getValue ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( expectedHmacSHA256Signature , actualHmacSHA256Signature )
Assert . assertTrue ( result . success ( ) )
Assert . assertTrue ( result . length ( ) > 0 )
assertSame ( channel , new GrpcCleanupRule ( ) . register ( channel ) )
assertNotNull ( maintenance )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' []{0,2} 'Force' " ) )
assertEquals ( nnf , comp )
assertEquals ( expResult , result )
assertEquals ( gmtDateOneHour , gmtDateOneHour )
assertSame ( theScene , theObject . getGameScene ( ) )
assertNotNull ( paquete )
assertEquals ( "All test cases should pass" , 4 , runner . getPassed ( ) )
assertTrue ( "Annotated text should contain the text" , ta . getText ( ) . contains ( "This is a test text" ) )
assertTrue ( actual )
Assert . assertTrue ( "Expected no objects to be materialized, but materialized " + done , done )
Assert . assertNotNull ( result . getQueryExplanations ( ) )
assertThat ( model2 . getMyStringText ( ) , is ( "aaa" ) )
assertSame ( d , e . getDomain ( ) )
assertEquals ( before , after )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertEquals ( expectedPlan , actualPlan )
assertNull ( usernameForAuthorEmail )
Assert . assertThat ( result . size ( ) , is ( 1 ) )
assertEquals ( expectedTypes , targetTypeDAO . getTypes ( TENANT_ID , true ) )
Assert . assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ = 'me' ORDER BY `foo.bar`" , sql )
assertThat ( movie . toUri ( ) , equalTo ( rootUri . resolve ( "/movies/1" ) ) )
assertThat ( dispatched , is ( SYNC_OR_ASYNC_PRIVATE_FLOW_MSG + ".main1@" + ASYNC_MAIN_FLOW_THREAD_NAME + "." + SYNC_PRIVATE_FLOW_NAME + "@" + ASYNC_MAIN_FLOW_THREAD_NAME ) )
assertNotNull ( result )
assertTrue ( aNumber == result )
Assert . assertEquals ( 2 , lqs . size ( ) )
assertNull ( mojoTimer )
Assert . assertEquals ( 1 , a . getNestedblocks ( ) . size ( ) )
assertSizeViolations ( validator . validate ( foo ) )
Assert . assertTrue ( this . manager . connectFromAll ( null , null , this . family1 ) )
Assert . assertEquals ( "{title=fivesmallq}" , result )
assertFalse ( violated )
assertThat ( processors , nullValue ( ) )
assertThat ( def . isMultiple ( ) , is ( true ) )
assertErrorEventDefinition ( "subProcessStart" , "myErrorCode" , null )
assertEquals ( expected , product , TOL )
assertEquals ( expecteds , actuals )
assertThat ( doHandle ( request , errorResponse ) , is ( sameInstance ( errorResponse ) ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 7 , warnings . size ( ) )
assertTrue ( status == 0 )
assertTrue ( savedEntity . isValid ( ) )
assertEquals ( joinDataSourceListBo , JoinDataSourceListBo . EMPTY_JOIN_DATA_SOURCE_LIST_BO )
assertEquals ( 1 , externalTaskService . createExternalTaskQuery ( ) . priorityHigherThanOrEquals ( 1 ) . count ( ) )
assertEquals ( TypeInfoFactory . getListTypeInfo ( TypeInfoFactory . getMapTypeInfo ( TypeInfoCreator . createString ( ) , TypeInfoCreator . createLong ( ) ) ) , orcType )
assertEquals ( "Should have deleted ACE" , 1 , _fs . getAcl ( dirInode ) . size ( ) )
assertThat ( doc . getKey ( ) , is ( notNullValue ( ) ) )
assertThat ( representation . getString ( "check-number" ) , is ( nullValue ( ) ) )
assertEquals ( testPublicId , resultPublicId )
Assert . assertNotNull ( personStructure )
assertEquals ( expr , printConstraint ( expression ) )
Assert . assertEquals ( expectedXML , actualXML )
assertTrue ( "Editor must not work when it is disabled!" , ! isElementPresent ( TextFieldElement . class ) )
Assert . assertArrayEquals ( expected1 . toArray ( ) , one . toArray ( ) , 0.01 )
assertEquals ( "A" , result )
assertEquals ( "myconfig" , configObservable . toBlocking ( ) . single ( ) )
assertNull ( "Unexpected value for index=" + index , o )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optDistinctToReduced ) )
assertEquals ( "value" , parsedCmd . getValue ( ) )
Assert . assertEquals ( actual , expected )
assertEquals ( openIds , user . getOpenIds ( ) )
assertTrue ( "Incorrect statement in the Block" , stmts . equals ( sample1 ( ) ) )
assertEquals ( 13 , value )
assertTrue ( "incorrect value" , aNumber . toString ( ) . equals ( result ) )
assertNotNull ( rule . getRepositoryService ( ) . createUserTaskQuery ( ) . processDefinitionId ( procDef . getId ( ) ) . singleResult ( ) )
assertNull ( accessToken )
assertEquals ( "I win" , result . getName ( ) )
assertFalse ( transform instanceof LinearTransform )
assertTrue ( isDisabled )
assertEquals ( expectedDate , iso8601Format . format ( expectedDate ) )
assertEquals ( "max" , actual )
Assert . assertEquals ( 1 , latch . getCount ( ) )
assertEquals ( "Value is incorrect" , value , cb . getValue ( ) )
assertEquals ( Status . FAILED , result . getStatus ( ) )
assertThat ( readUserId , is ( userId ) )
assertThat ( page . hasError ( ) , is ( false ) )
assertEquals ( filterClause , " AND \\"fieldName\\" = fieldValue" )
Assert . assertTrue ( clusterVerifier . verify ( _gZkClient , ZK_ADDR , _gZkClient . getChildren ( "/testDB1" ) ) )
assertThat ( "candidates should contain [name=]" , candidates , hasItems ( "name=" ) )
assertNull ( action )
assertOut ( "for (var /** @type {number} */ i = 0, /** @type {number} */ len = 10; i < len; i++)\\n\\nbreak;" )
Assert . assertNotNull ( addressResultsDto )
Assert . assertNotNull ( instance . getAllAtomMapping ( ) )
Assert . assertTrue ( "target file not written" , actualFile . exists ( ) )
assertEquals ( mockSqlDatabaseMetaData , DialectFactory . getStart ( mockHelper ) )
assertEquals ( reader , readerResult )
org . fest . assertions . Assertions . assertThat ( currentSessionManager . state . recording ( ) . isRecording ( ) )
assertNotNull ( aa )
assertEquals ( 0 , DynamoDBUtil . getItemSizeBytes ( item ) )
assertEquals ( label , 0.0 , diff . getRMS ( ) , TOLERANCE )
assertExec ( "Should be the same" , Numbers . class , "deserDouble__D" , f )
assertThat ( log . getLogEntries ( 1 , 5 , quorumId ) , resultsIn ( empty ( ) ) )
assertNotNull ( gadgetUrl )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY id" + fieldAdd + " ASC LIMIT 0, 5 ;" , sql )
assertEquals ( expecteds , actuals )
assertEquals ( 2 , session . from ( var ) . distinct ( ) . list ( var ) . size ( ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( FlowspecL3vpnRoute . class ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Wrong output: " + output , output . contains ( "Stubrunner called" ) )
assertFalse ( server . isComplete ( ) )
Assert . assertTrue ( elapsed < numberLongEvents )
assertEquals ( "MD5 mismatch" , "6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6
assertEquals ( "cat_kittens_0.name = ?1" , serialize ( predicate ) )
assertThat ( commands , hasKey ( asList ( "test" ) ) )
assertNotNull ( method )
assertEquals ( "Wrong URL" , file . getAbsoluteFile ( ) , FileLocatorUtils . fileFromURL ( url ) . getAbsoluteFile ( ) )
Assert . assertNotNull ( testConnectionDetails1 )
assertEquals ( host , other )
assertTrue ( control . matches ( "/any/ICanPutAnythingInHere/what" ) )
assertEquals ( "foobar should be encoded the same way as in commons-codec" , new String ( encodeBase64 ( testBytes , false ) , Constants . CHARSET ) , Base64 . toBase64String ( testBytes ) )
assertEquals ( "test" , underTest . getHref ( node ) )
assertEquals ( expected , nameGenerator ( prefix ) . generate ( nameRequest ( ) . originalName ( originalName ) ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-3 )
context . assertIsSatisfied ( )
assertTrue ( "Intersection between plane and half line is incorrect" , pi . equals ( piExp ) )
assertNull ( eRetrieved )
assertNull ( variableValue )
assertEquals ( messageList . size ( ) , partitionMessageQueue . getMessageList ( ) . size ( ) )
assertThat ( found , equalTo ( expected ) )
assertEquals ( exp , res )
assertTrue ( matcher . match ( msg , rule ) )
Assert . assertEquals ( _runCounts . size ( ) , 5 )
assertEquals ( 3 , breakpoint . getLine ( ) )
assertThat ( any . contains ( AM_PM_OF_DAY ) , is ( true ) )
Assert . assertEquals ( 2 , tables . size ( ) )
assertSequence ( visitor . getNodes ( ) , "c" , "b" , "e" , "d" , "a" )
Assert . assertEquals ( ServerParse . INSERT , sqlType )
assertSame ( p3 , result )
assertEquals ( 1.0101L , element . getLongValue ( ) , 0.000001 )
Assert . assertEquals ( idSet . size ( ) , 16 )
assertEquals ( 2 , response . getBody ( ) . getEntities ( ) . size ( ) )
assertEquals ( "Expected no listener to receive the same messages as the one that sent" , 0 , sublistenerCaptor1 . getAllValues ( ) . size ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert . fail ( ex . getMessage ( ) )
assertEquals ( 10 , sum , 0 )
assertNotNull ( control )
assertEquals ( 4 , MigrationTaskSkipper . getMigrationTaskList ( ) . size ( ) )
throwables . assertHasMessageMatching ( info , actual , Person . class )
assertEquals ( "car" , type . getProfile ( ) )
assertEquals ( cache . get ( "a" ) , null )
assertEquals ( profilePage . getUsername ( ) , "test-admin" )
assertEquals ( expectedResult , result )
assertEquals ( "http://hl7.org/fhir/ValueSet" , res . getSearchParam ( ) . get ( 1 ) . getName ( ) . getValue ( ) )
assertEquals ( 20 , wrapper . getGenre ( ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigCaller ( ) ) . isWarnEnabled ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( 200 , status )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertThat ( record . getStation ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( createArrayNode ( createObjectNode ( "fieldName" , 3 ) , createObjectNode ( "fieldName" , 4 ) , createObjectNode ( "fieldName" , 5 ) ) , result )
assertThat ( msg , is ( "MESSAGE_TEXT" ) )
Assert . assertNotNull ( thesaurus )
assertEquals ( "error" , ex . getMessage ( ) )
assertThat ( eventCaptor . getValue ( ) . getConfiguration ( ) , is ( storeConfig ) )
assertEquals ( 2 , cnt . get ( ) )
Assert . assertEquals ( testTemplate1 . getTemplateName ( ) , templateName )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
assertEquals ( asList ( "6:7" , "6:8" , "6:9" , "6:10" , "6:11" , "6:12" , "6:13" , "6:14" , "6:15" , "6:16" , "6:17" , "6:18" , "6:19" , "6:20" , "6:21" , "6:22" , "6:23" , "6:24" , "6:25" , "6:26" , "6:27" , "6:28" , "6:29" , "6:30" , "6:31" , "6:32" , "6:33" , "6:34" , "6:35" , "6:36" , "6:37" , "6:38" , "6:39" , "6:40" , "6:41" , "6:42" , "6:43" , "6:44" , "6:45" , "6:46" , "6:47" , "6:48" , "6:49" , "6:50" , "6:51" , "6:52" , "6:53" , "6:54" , "6:55" , "6:56" , "6:57" , "6:58" , "6:59" , "6:60" , "6:61" , "6:62" , "6:63" , "6:68" , "6:69" , "6:70" , "6:71" , "6:72" , "6:73" , "6:74" , "6:75" , "6:71" , "6:72" , "6:73" , "6:74" , "6:75" , "6:72" , "6:73" , "6:74" , "6:75" , "6:72" , "6:73" , "6:74" , "6:75" , "6:72" , "6:73" , "6:73" , "6:73" , "6:73" , "6:73" , "
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertSame ( ctrlA , accelerator )
assertEquals ( 4.0 , distance . compute ( point1 , point2 ) , EPSILON )
assertThat ( ifCounterDataIndexable . matchesPojo ( this . counterData ) , is ( false ) )
assertEquals ( 1 , added )
org . junit . Assert . assertEquals ( 0 , ret )
assertEquals ( CustomsItemCollection . getData ( ) . size ( ) , 1 )
assertEquals ( HttpStatusCode . NOT_FOUND . getStatusCode ( ) , connection . getResponseCode ( ) )
assertEquals ( ( i < 10 ? i : 10 ) , ( ( Long ) ksession . getQueryResults ( "TestDeclaredLengthWindow" ) . iterator ( ) . next ( ) . get ( "$eventCount" ) ) . intValue ( ) )
Assert . assertEquals ( "b" , response . getSource ( ) . get ( "_labels" ) )
assertEquals ( score , 1.0 )
assertEquals ( "a\\n" , found )
assertThat ( skipped , is ( equalTo ( 3L ) ) )
assertThat ( result , is ( expected ) )
assertViewName ( mav , "editProfile" )
assertEquals ( jt . getRawClass ( ) , Long . class )
assertFalse ( hidden )
assertEquals ( Integer . valueOf ( 0x42 ) , command . getMessageId ( ) )
assertEquals ( 1L , folder . getUnpackSize ( ) )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "color" , "color" ) ) , formatter . format ( "some [color]color color[/color]" , defaultOptions ( ) ) )
assertResultSet ( res )
assertTrue ( "Wrong number of interpolators" , cc2 . getInterpolators ( ) . size ( ) == 1 )
assertEquals ( "1999-05-16 00:00:00.591" , dbr . selectTimestamp ( "TIMESTAMPA" , "1970-02-04 01:02:33.01" ) )
assertEquals ( avClusteringCoefficient , 0.0 )
assertEquals ( H2Templates . DEFAULT , JPAProvider . getTemplates ( em ) )
assertProjectOut ( compiledFileNames , testDirPath )
assertThat ( conn , is ( notNullValue ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( tz . isInvalid ( date , PlainTime . of ( 3 , 0 ) ) , is ( false ) )
assertEquals ( "械�械写懈薪�械� 谐芯��写邪���胁邪" , "械�械写懈薪�械� 谐芯��写邪���胁邪" , city . getCountry ( ) . getName ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertTrue ( bar1 . equals ( bar2 ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( popup ) instanceof WPopupRenderer )
assertEquals ( o1 , o2 )
assertThat ( result . toString ( ) , is ( "OuterBean2{name='bingoohuang', bean=InnerBean2{addr='gongjianfang'}}" ) )
assertNotNull ( plist )
assertEquals ( "UnsubscribeMessage" , encode ( msg ) )
assertNotNull ( Regulation . reader ( ) . read ( ) )
assertEquals ( "1" , ( ( NumberValue ) value1 ) . getValue ( ) )
assertEquals ( "c" , result . toString ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . COMMENT , this . doc ) )
assertEquals ( "Expected type is returned for existing property" , BeanItemContainer . class , container . getType ( ) )
assertEquals ( "test-classes/custom.enc" , encodedPass )
assertEquals ( 0 , shell . run ( new String [ ] { "listbookies" , "-ro" } ) )
Assert . assertEquals ( 4 , count . intValue ( ) )
assertEquals ( 2 , orgUnits . size ( ) )
Assert . assertFalse ( result )
assertThat ( nodeTuple , is ( nullValue ( ) ) )
getResponseOfGet ( PERMISSIONS_ENDPOINT + "?service=costcenters" ) . then ( ) . log ( ) . all ( ) . assertThat ( )
assertContentSame ( rs , rc , columnParam1 )
assertFalse ( "There was cacheable headers" , HeaderUtils . hasCacheableHeaders ( headers ) )
assertEquals ( top , entry . getValue ( ) )
assertThat ( model . getControllerId ( ) , is ( Target . CONTROLLER_ID_MAX_SIZE ) )
assertEquals ( "The cat kisses a dog." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertNull ( converter . getAsObject ( facesContext , new UIPanel ( ) , null ) )
assertTrue ( uploadSuccessful )
Assert . assertNull ( result )
assertEquals ( 77 , optionalLong . orElse ( 77 ) , 0 )
assertTrue ( length == 10 )
Assert . assertEquals ( correlation . computeCorrelationMatrix ( input ) , new BlockRealMatrix ( expected ) )
assertEquals ( "s:test" , out )
assertArrayEquals ( plaintext , recovered )
assertTrue ( NamedCurve . verify ( KeyCodec . getKeyAsRawBytes ( pubKey ) , dataForSigning , Asn1 . decodeToBigIntegerArray ( Base64 . decodeBase64 ( signatureB64 ) ) ) )
Assert . assertNotNull ( topic )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
assertSame ( "Wrong root node" , NodeStructureHelper . IN_MEMORY_AUTHORS_TREE , model . getInMemoryNodeModel ( ) )
assertEquals ( "2 | 3" , expr . getParameterValue ( ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertThat ( result . fullName ( ) , is ( "long" ) )
Assert . assertEquals ( "[1, 3]" , s . toString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
Assert . assertEquals ( "99999999999.9999" , cide . getQuantidadeBCCIDE ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "A:\\t[A, C]\\t[A, C]\\t\\n" + "C:\\t\\n" , res )
assertThat ( source . contains ( "\\r" ) , is ( true ) )
Assert . assertEquals ( "(nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 456))))" , range . toStringTree ( parser ) )
assertTrue ( "failed to decrypt ciphertext" , Arrays . equals ( message , expectedMessage ) )
TerminalParserTest . assertResult ( parser , "synchronized" , SynchronizedBlockStatement . class , "synchronized" )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . NOT , TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEX , v , TERM_FACTORY . getConstantLiteral ( "A.*B" , XSD . STRING ) , TERM_FACTORY . getConstantLiteral ( "i" , XSD . STRING ) ) , TERM_FACTORY . getConstantLiteral ( "b" , XSD . STRING ) ) , translation . get ( 0 ) )
Assert . assertEquals ( 1 , queue . size ( ) )
assertEquals ( "3" , evaluator . asString ( expression ) )
assertThat ( System . currentTimeMillis ( ) - startTime , is ( 6000L ) )
Assert . assertEquals ( expResult , result )
assertEquals ( value , this . impl . getString ( key ) )
assertThat ( id , greaterThan ( 0 ) )
assertEquals ( "Repository contains incorrect number of statements" , 1 , testCon . size ( ) )
assertEquals ( "Buffer[0]" , str )
assertThat ( result , is ( "" + "{\\n" + "  \\"abuse-contact\\" : {\\n" + "    \\"type\\" : \\"locator\\",\\n" + "    \\"href\\" : \\"http://rest.db.ripe.net/abuse-contact/193.0.0.1\\"\\n" + "  },\\n" + "  \\"parameters\\" : {\\n" + "    \\"name\\" : \\"abuse-contact\\",\\n" + "    \\"value\\" : \\"abuse-c\\",\\n" + "    \\"uri\\" : \\"http://rest.db.ripe.net/abuse-contact/193.0.0.1\\"\\n" + "  },\\n" + "  \\"abuse-c-parameters\\" : {\\n" + "    \\"name\\" : \\"abuse-contact\\",\\n" + "    \\"value\\" : \\"abuse-c\\",\\n" + "    \\"uri\\" : \\"http://rest.db.ripe.net/abuse-contact/193.0.0.1\\"\\n" + "  },\\n" + "  \\"abuse-contact-parameters\\" : {\\n" + "    \\"name\\" : \\"abuse-contact\\",\\n" + "    \\"value\\" : \\"abuse-c\\",\\n" + "    \\"uri\\" : \\"http://rest.db.ripe.net/abuse-contact/193.0.0.1\\"\\n" + "  },\\n" + "  \\"abuse-contact-parameters\\" : {\\n" + "    \\"name\\" : \\"abuse-contact\\",\\n" + "    \\"value\\" : \\"abuse-c\\",\\n" + "    \\"uri\\" : \\"http://rest.db.ripe.net/abuse-contact/193.0.0.1\\"\\n"
assertThat ( captor . getValue ( ) , is ( true ) )
assertPutFails ( association , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert . assertEquals ( "in the room and a car" , this . realiser . realise ( this . inTheRoom ) . getRealisation ( ) )
assertNotNull ( Role . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNotNull ( result )
assertEquals ( "2.25" , event . getLocation ( ) . getReference ( ) . toString ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Should have finished successfully" , ValidationResult . OK , sandboxedInstanceTestFixture . getResult ( ) )
Assert . assertEquals ( session . getRandomGenerator ( foo0 ) , session . getRandomGenerator ( foo1 ) )
Assert . assertEquals ( expected , value )
assertEquals ( modelFromTest , modelFromConfig )
assertThat ( element . getText ( ) , is ( "value with appended text" ) )
assertEquals ( original , other )
assertOut ( "for each (var i:int in obj) {\\n\\tbreak;\\n}" )
assertThat ( replicationCache , is ( nullValue ( ) ) )
assertFalse ( undefined . isReleased ( ) )
assertObjectEquals ( "{type:'array',items:{type:'string'}}" , x . getSchema ( ) )
assertFalse ( "testIsInProgressSubmission 0" , isInProgressSubmission ( wi , item ) )
Assert . assertEquals ( infoReverse . getSequence ( ) , resultTranscript )
Assert . assertEquals ( 11 , patients . size ( ) )
assertEquals ( "testString" , s . split ( "\\n" ) [ 1 ] )
assertEquals ( new Integer ( 2 ) , MethodFixture . getArgNum ( ) )
assertStat ( result )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'true',h:'123'}" , r )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( listResponse . getEnvironments ( ) . size ( ) , 5 )
assertEquals ( "x" , ejbql )
assertInvalidQuery ( query )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertEquals ( "Failed to generate while loop with nested expressions and no body" , WHILE_NESTED_EMPTY , s )
assertEquals ( totalBestFriendAge , myFriends . size ( ) )
Assert . assertEquals ( "Wireless LAN" , capitals )
assertTrue ( errors . equals ( noErrors ) )
assertEquals ( major , version . getMajor ( ) )
assertThat ( zookeeperClient , not ( nullValue ( ) ) )
assertEquals ( expected , xml )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n  return React.createElement('div', { 'id': 'foo' });\\n}" )
Assert . assertEquals ( "http://foo:8080/bar?a=A&b=B" , filter . getRequestURL ( request ) )
assertThat ( writer . get ( ) , is ( - 100 ) )
assertThat ( target . getMergeFeature ( feature1 . getId ( ) ) . getStatuses ( ) . get ( 0 ) . getName ( ) , is ( Statuses . UNKNOWN . getTextName ( ) ) )
assertEquals ( 6 , counter )
assertEquals ( expected , recovered )
assertEquals ( expecteds , actuals )
Assert . assertEquals ( lb . getStatus ( ) , LoadBalancerStatus . ACTIVE )
assertNotNull ( "Specialty is null" , entity )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertEquals ( expectedId , this . repository . findByName ( "test" , "test" ) . getId ( ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . OK ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( result )
Assert . assertEquals ( "213.200.193.129" , new String ( b ) )
assertThat ( errors , hasFieldErrors ( "givenName" ) )
assertTrue ( "Encoder test-" + i , b )
assertEquals ( 4 , tool . heapCaculation ( ) )
assertResponse ( response , 404 )
assertFalse ( validator . validate ( EntityNames . STAFF , staffId ) . equals ( staffId ) )
assertEquals ( "test" , cache . getProgram ( ) )
assertEquals ( f . getQuery ( ) , q )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
assertEquals ( metadata , repository . getModuleMetadata ( "TEST-REPLICA" ) )
assertNotNull ( writer )
assertEquals ( "" , result )
assertEquals ( 0 , app . executeApplication ( args ) )
assertSame ( eagAttributes , npn . grpcHandler . getAttributes ( ) )
Assert . assertEquals ( CATEGORY_A , category )
Assert . assertNull ( result )
context . assertIsSatisfied ( )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
Assert . assertEquals ( 20 , fakeShardService ( "shard1" , "shard2" , "shard3" , "shard4" , "shard5" , "shard6" , "shard7" , "shard8" , "shard9" , "shard10" ) . getHealthyCount ( ) )
assertEquals ( drlExpected , drlActual )
assertEquals ( "" , v . toString ( ) )
assertEquals ( true , storage . getAllPictures ( ) . contains ( id ) )
assertEquals ( expResult , result )
assertPlanMatches ( oPlan )
assertTrue ( throwables [ 0 ] instanceof NullPointerException )
assertEquals ( "abstrACT should be 'foobarbaz'" , ABSTRACT , ch . read ( ) )
assertFalse ( pgql . parse ( query ) . isQueryValid ( ) )
assertEquals ( "Wrong value" , ( byte ) 0xdead0000 , u . s16 . get ( ) )
Assert . assertFalse ( isPortInCircuit )
assertNotNull ( checkProfessionalUser )
assertThat ( this . passwordService . passwordsMatch ( "password" , password ) , is ( true ) )
assertThat ( resolver . resolve ( CamelCaseStory . class ) , equalTo ( "org/jbehave/core/io/camel_case.story" ) )
assertPermanentCount ( playerA , "Cabal Therapist" , 1 )
assertEquals ( expected , actual )
assertEquals ( Nd4j . create ( 1 , 4 ) , linear )
assertOut ( "goog.provide('foo.bar.baz.A');\\n\\n/**\\n * @constructor\\n */\\nfoo.bar.baz.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('foo.bar.baz.A', foo.bar.baz.A);\\n\\n\\n/**\\n * @return {Object.<string, Function>}\\n */\\nfoo.bar.baz.A.prototype.ROYALE_REFLECTION_INFO = function () {\\n" + "  return {\\n" + "    variables: function () {return {};},\\n" + "   accessors: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n" + "  methods: function () {return {};}\\n
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertSame ( t . toLocalTime ( ) , LocalTime . MIDNIGHT )
assertEquals ( TestUtil . SOCKS_TEST_PROXY , result . get ( 0 ) )
assertTrue ( manager . isStartedAndCheckedBeforeMatching ( ) )
assertNotNull ( con . getMetaData ( ) )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( result , is ( false ) )
Helpers . assertJson ( json , expectedJson )
assertEquals ( "Input value json should match output value json" , inputJson , outputJson )
assertNotNull ( cache )
assertNotNullOrEmpty ( "Tags should never be null." , tags )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
Assert . assertEquals ( true , localesInOrder . contains ( LocaleUtility . fromSpecification ( OpenmrsConstants . GLOBAL_PROPERTY_DEFAULT_LOCALE_DEFAULT_VALUE ) ) )
assertNull ( rule )
assertEquals ( 1 , foundComments . size ( ) )
assertOut ( "a++" )
Assert . assertEquals ( diffusioncoefficient , result [ 0 ] , 0.1 )
assertTrue ( details . hasAborted ( ) )
assertEquals ( response . getStatusCode ( ) , 200 )
Assert . assertEquals ( ValidationResult . OK , sink . retrieveStats ( null ) . getStatus ( ) )
Assert . assertEquals ( expected , queryFromBuilder )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( "GEDCOM version is 5.5, but found file: " , baseWriter . getFile ( ) , baseWriter . getFile ( ) )
MockEndpoint . assertIsSatisfied ( mockEndpoints )
Assert . areEqual ( true , countA == 10 && countB == 0 , "shard+rw读优先级判断,countA=" + countA + ",countB=" + countB )
assertEquals ( "[1, 2, 3]" , Util . toString ( data ) )
assertEquals ( 1 , executeTestMethod ( test , Integer . class , null , 0 ) . intValue ( ) )
assertTrue ( content . contains ( "*.forge" ) )
assertThat ( result , is ( "value" ) )
assertEquals ( 2 , list . size ( ) )
Assert . assertEquals ( degree_EXPECTED , degree_ACTUAL )
assertEquals ( 77 , mr . getLocation ( ) )
assertEquals ( expected , actual )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertTrue ( "testCanEditBooleanAuth 0" , collectionService . canEditBoolean ( context , collection ) )
JsonTestUtils . assertHasArrayOfObjectsWithFields ( response , "teams" , "id" )
Assert . assertTrue ( new JSONObject ( PEDIGREE_1_MIGRATED_DATA ) . similar ( new JSONObject ( captured ) ) )
assertEquals ( Math . sqrt ( 2 ) - 1 , circle . distance ( r ) , PRECISION )
Assert . assertEquals ( "caught" , o )
assertEquals ( String . valueOf ( ReturnCode . NO_SPEECH . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertNull ( io . getDocumentById ( id1 , false ) )
assertEquals ( t1 , t2 )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "GPGLL,,,,,,," , s )
Assert . assertEquals ( "{\\"a\\":\\"a\\",\\"b\\":2,\\"c\\":{\\"a\\":\\"c.a\\",\\"b\\":4,\\"c\\":{\\"a\\":\\"c.c.a\\",\\"b\\":7}}}" , objectMapper . writeValueAsString ( auctionSummary ) )
assertOrecValue ( orec , orecValue )
assertFalse ( andFn . accept ( 1 ) )
assertTrue ( Bytes . equals ( key1Bytes , key1ExpectedBytes ) )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertEquals ( vo . getPhoneNumbers ( ) . get ( 1 ) . getNumber ( ) , "5432109876" )
assertEquals ( port , result )
assertOut ( "var /** @type {CustomVector} */ a = new CustomVector([\\"String
assertEquals ( domain , target . getDomains ( ) . get ( 0 ) )
assertEquals ( expResult , result )
assertEquals ( 1 , repositoryService . createProcessDefinitionQuery ( ) . count ( ) )
assertEquals ( "<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertFalse ( setA . equals ( setB ) )
Assert . assertEquals ( 0.0059 , test . bootstrap ( x , y , 10000 , false ) , 1E-3 )
assertEquals ( VALID_DATE , Deencapsulation . getField ( enrollmentGroup , "lastUpdatedDateTimeUtcDate" ) )
Assert . assertNotNull ( contacts )
assertEquals ( "Failed to filter query string" , expectedResult , normalizedUrl )
assertEquals ( value , property . getOriginalValue ( ) )
assertOutput ( freemarker . benchmark ( ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
assertEquals ( "foo" , client . getAttribute ( DOMAIN_NAME , OBJECT_NAME , "foo" ) )
assertTrue ( exception . getMessage ( ) . contains ( "must be a Collection" ) )
assertThat ( value , is ( equalTo ( 1024L ) ) )
assertEquals ( "Required profiles" , "runner" , new FelixPlatformBuilderF160 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertTrue ( "size must be 1, but it is - " + queryModel . size ( ) , queryModel . size ( ) == 1 )
assertTrue ( accepts )
assertEquals ( expResult , result )
assertEquals ( constraintViolations . size ( ) , 0 )
Assert . assertEquals ( "result2" , result . get ( "outputVariable1" ) )
assertAntFilter ( filters , "{\\"address\\":{\\"streetName\\":\\"At my place\\",\\"streetNumber\\":\\"1\\"},\\"email\\":\\"somewhere@no.where\\",\\"firstName\\":\\"Martin\\",\\"lastName\\":\\"Frey\\",\\"reports\\":[{\\"address\\":null,\\"email\\":\\"report0@no.where\\",\\"firstName\\":\\"First 0\\",\\"lastName\\":\\"Doe 0\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report1@no.where\\",\\"firstName\\":\\"First 1\\",\\"lastName\\":\\"Doe 1\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report2@no.where\\",\\"firstName\\":\\"First 2\\",\\"lastName\\":\\"Doe 2\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report3@no.where\\",\\"firstName\\":\\"First 3\\",\\"lastName\\":\\"Doe 3\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report4@no.where\\",\\"firstName\\":\\"First 4\\",\\"lastName\\":\\"Doe 4\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report5@no.where\\",\\"firstName\\":\\"First 5\\",\\"lastName\\":\\"Doe 5\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report6@no.where\\",\\"firstName\\":\\"First 6\\",\\"lastName\\":\\"Doe 6\\",\\"manager\\":null,\\"reports
assertNoConsumerError ( exception . get ( ) )
Assert . assertEquals ( FastMath . PI , solver . solve ( 100 , f , 3.0 , 3.2 , 3.1 ) , solver . getAbsoluteAccuracy ( ) )
testRunner . assertAllFlowFilesTransferred ( PutKudu . REL_SUCCESS , 1 )
assertEqualsIgnoreWhitespace ( expected , real )
assertObjectEquals ( "[{f:-1},{f:0},{f:1},{f:2},{f:3}]" , run ( INT_BEAN_ARRAY , s ) )
Assert . fail ( "Should have thrown an exception" )
Assert . assertEquals ( "number emitted tuples" , 1 , swinSink . collectedTuples . size ( ) )
assertThat ( findFeature ( features , "UpdateFirmware" ) , is ( instanceOf ( UpdateFirmwareFeature . class ) ) )
assertEquals ( ha , hb )
assertEquals ( augmentationNode , entry . getValue ( ) )
assertEquals ( RequestOptions . WAIT_FOR_RESPONSES_UNTIL_TIMEOUT , requestOptions . getWaitForResponses ( ) )
assertEquals ( "ReasonToTerminate: Time to exit!" , pod1 . getStatus ( ) )
assertThat ( clusterContext1 . getMembers ( ) . size ( ) , is ( 0 ) )
Assert . assertEquals ( "Smiths" , names . makeString ( ) )
Assert . assertTrue ( result . isValid ( ) )
assertEquals ( arr , resultArr )
assertThat ( entities . isEmpty ( ) , is ( true ) )
assertTrue ( address1 . equals ( address2 ) )
Assert . assertEquals ( dto1 , loaded1 )
assertThat ( result . toSet ( ) . size ( ) , is ( 1 ) )
assertEquals ( 25 , counter . getCountIterations ( ) )
Assert . assertTrue ( "key and value check" , AerospikeTestUtils . checkEvents ( ) )
assertEquals ( "https://example.com" , got . toString ( ) )
assertEquals ( entity , second )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
Assert . assertEquals ( "A file with this name already exists. Continue to upload as a new version or rename the file." , text )
assertEquals ( HttpStatus . SC_NOT_FOUND , response . getStatus ( ) )
assertThat ( c , is ( 2 ) )
Assert . assertNotNull ( cars )
assertNotNull ( AppContext . current ( ) . getServletContext ( ) )
assertThat ( encoded , stringContainsInOrder ( "<Patient xmlns=\\"http://hl7.org/fhir\\">" , "<contained>" , "<Condition xmlns=\\"http://hl7.org/fhir\\">" , "<id value=\\"1\\"/>" , "</Condition>" , "</contained>" , "<extension url=\\"test\\">" , "<valueReference>" , "<reference value=\\"#1\\"/>" , "</valueReference>" , "</extension>" , "<birthDate value=\\"2016-04-05\\"/>" , "</Patient>" ) )
assertArrayEquals ( "invalid opaque value" , opaque . getOpaque ( ) , xdr . xdrDecodeDynamicOpaque ( ) )
assertTrue ( result . length ( ) > 0 )
assertNotNull ( ci )
assertFocusModificationSanity ( context )
assertEquals ( "GoogleChartDotWriterTest.toImage(toGoogleImage)" , image )
assertTrue ( "Should get response" , response == null )
assertOverflow ( new BigDecimal ( x ) . add ( new BigDecimal ( y ) ) , result , x + y )
assertTrue ( execContext . getDeliveryConfig ( ) instanceof DOMContentDeliveryConfig )
assertEquals ( model , actual )
assertEquals ( score , 0.0 , 0.00001 )
assertFalse ( activityManager . isStarted ( expectedSplashScreenActivity ) )
assertNotNull ( getCoprocessor ( log ) )
Assert . assertEquals ( last , server . getAverageLatency ( ) , 0.01 )
assertEquals ( "Expected 5 results!" , 5 , count )
assertTrue ( config . isClientProfile ( ) )
Assert . assertEquals ( "node path" , getPostData ( "uniqueness" ) )
JSONAssert . assertEquals ( expected , response . getBody ( ) , false )
assertNotNull ( documentIRI )
assertEquals ( dataSet . getRowCount ( ) , 50 )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optOrderByDistinctApplication ) )
assertEquals ( values , obj . getSensorObservations ( ) )
assertEquals ( "~valid" , expr . getParameterValue ( ) )
assertFalse ( pm . isEnabled ( ) )
assertEquals ( root . getNodeState ( ) , root . getNodeState ( ) )
assertFalse ( isValid )
assertTrue ( objUnderTest . removeServiceProvider ( existingIssuer ) )
assertTrue ( dumpToFile . exists ( ) )
assertTrue ( flag )
assertEquals ( 1L , msg . get ( key ) )
assertEquals ( "Container returned too many items when the range was >> container size" , 1 , ic . getItemIds ( 0 , 10 ) . size ( ) )
Assert . assertEquals ( 0 , queue . size ( ) )
assertEquals ( 0 , out . size ( ) )
assertThat ( elasticsearchTemplate . indexExists ( "test-index" ) , is ( true ) )
assertNull ( request . getEcommerceTax ( ) )
assertThat ( actual , is ( expected ) )
assertEquals ( expected , actual )
Assert . assertSame ( this . securePatient , this . componentUnderTest . getByName ( "Neuro123" ) )
Assert . assertEquals ( Arrays . < Object > asList ( 1 , 2 , 3 ) , list )
assertEquals ( logs . get ( i ) , message )
assertEquals ( expected , this . output . toString ( ) )
assertTrue ( ( Boolean ) result )
assertTrue ( between . appliesToProperty ( "foo" ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( "Gsample.xml" , files [ 0 ] . getName ( ) )
assertNotNull ( result )
assertEquals ( "<a><b><xxx newElementAttribute=\\"1234\\"></xxx></b></a>" , result . getResult ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
MatcherAssert . assertThat ( new GmCombined ( ImmutableList . of ( ( ) -> ImmutableSet . of ( one , two , three ) ) ) . persistentGrammemes ( ) , CoreMatchers . is ( meaning ) )
TestUtils . assertEquals ( anexo , anexoModificado )
assertEquals ( results [ p ] , density , 0.0 )
assertVisitorSatisfied ( )
assertEqualsIgnoreWhitespace ( expected , real )
assertNull ( singletonServiceGroup . unregisterService ( firstReg ) )
assertEquals ( "[0, 1, 2, 3]" , Util . toString ( spec ) )
assertNotNull ( Document . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ETXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 1 , ( ( ClusterMetricGetters ) statsCollector ) . getMessageFailedCount ( ) )
assertEquals ( 2 , copies )
assertEquals ( 1 , pub . length )
assertEquals ( crisisTypeDTO . getName ( ) , result . iterator ( ) . next ( ) . getName ( ) )
assertArrayEquals ( TEST_DATA , attrs . getBytes ( 0x7FE00010 ) )
assertThat ( ruleFired , is ( fired ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertEquals ( Boolean . TRUE , f . evaluate ( ) )
assertEqualsJson ( expected , actual )
assertArrayEquals ( new byte [ ] { 5 , 4 , 3 , 2 , 1 } , bytes )
assertEquals ( 2 , ( int ) entries . count ( ) . toBlocking ( ) . single ( ) )
assertOut ( "org.apache.royale.utils.Language.sort(a, 'foo')" )
assertEquals ( description , activity . getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertThat ( windows . withIntersection ( ) . isEmpty ( ) , is ( true ) )
assertCollectionSerialization ( expectedJSON , collection )
assertFalse ( PharmaModulo11Validator . isValid ( pzn ) )
assertNull ( getParameterRepositoryService ( ) . getParameterValueAsString ( key ) )
Assert . assertNull ( new CompareTool ( ) . compareVisually ( dest , sourceFolder + "cmp_signed" + file , destinationFolder , "diff_" , getTestMap ( new Rectangle ( 30 , 245 , 200 , 12 ) ) ) )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
Assert . assertEquals ( Collections . < Term > emptyList ( ) , terms )
assertEquals ( v1 . getValue ( ) , v2 . getValue ( ) )
assertEquals ( 3 , uris . size ( ) )
Assert . assertEquals ( "a" , rootEl . getNodeName ( ) )
Assert . assertEquals ( "somethings" , unit )
assertFalse ( currentData . isPresent ( ) )
assertMatches ( expr . matcher ( "/a/b/c/d/f/@something" ) , "/a/b/c" , "/\\\\$2u/b/c/y/z/d/f" )
assertEquals ( "Count of customer" , 0 , res )
assertEquals ( 0 , methods . size ( ) )
assertEquals ( JsonCodec . boolToBoolean ( true ) , JsonCodec . boolToBoolean ( val ) )
Assert . assertEquals ( originalPaths , harPaths )
assertTrue ( producer . windowing instanceof Time )
assertSame ( root , transform ( root ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertEquals ( "abc" , FuturesExtra . asyncTransform3 ( futureA , futureB , futureC , ( a , b , c ) -> Futures . immediateFuture ( a + b + c ) , MoreExecutors . directExecutor ( ) ) . get ( ) )
Assert . assertEquals ( Arrays . asList ( new IntegerToken ( 1 ) , new IntegerToken ( 2 ) , new IntegerToken ( 3 ) , new IntegerToken ( 4 ) , new IntegerToken ( 5 ) , new IntegerToken ( 6 ) , new IntegerToken ( 7 ) , new IntegerToken ( 8 ) , new IntegerToken ( 9 ) , new IntegerToken ( 10 ) , new IntegerToken ( 11 ) , new IntegerToken ( 12 ) , new IntegerToken ( 13 ) , new IntegerToken ( 14 ) , new IntegerToken ( 15 ) , new IntegerToken ( 16 ) , new IntegerToken ( 17 ) , new IntegerToken ( 18 ) , new IntegerToken ( 19 ) , new IntegerToken ( 20 ) , new IntegerToken ( 21 ) , new IntegerToken ( 22 ) , new IntegerToken ( 23 ) , new IntegerToken ( 24 ) , new IntegerToken ( 25 ) , new IntegerToken ( 26 ) , new IntegerToken ( 27 ) , new IntegerToken ( 28 ) , new IntegerToken ( 29 ) , new IntegerToken ( 30 ) , new IntegerToken (31 ) , new IntegerToken ( 32 ) , new IntegerToken ( 33 ) , new IntegerToken ( 34 ) , new IntegerToken ( 35 ) , new IntegerToken ( 36 ) , new IntegerToken ( 38 ) , new IntegerToken ( 39 ) , new IntegerToken ( 40 ) , new IntegerToken ( 41 ) , new IntegerToken ( 42 ) , new IntegerToken ( 43 ) , new IntegerToken ( 44 ) , new IntegerToken ( 45 ) , new IntegerToken ( 46 ) , new IntegerToken ( 47 ) , new IntegerToken ( 48 ) , new IntegerToken ( 49 ) , new IntegerToken ( 50 ) , new IntegerToken ( 51 ) , new IntegerToken (52 ) , new IntegerToken ( 53 ) , new IntegerToken ( 54 ) , new IntegerToken ( 55 ) , new IntegerToken ( 56 ) , new IntegerToken ( 57 ) , new IntegerToken ( 58 ) , new IntegerToken ( 59 ) , new IntegerToken ( 60 ) , new IntegerToken ( 63 ) , new IntegerToken ( 63 ) , new IntegerToken ( 64 ) , new IntegerToken ( 65 ) , new IntegerToken ( 66 ) , new IntegerToken ( 67 ) , new IntegerToken ( 68 ) , new IntegerToken ( 69 ) , new IntegerToken ( 70 ) , new IntegerToken ( 71 ) , new IntegerToken ( 72 ) , new IntegerToken ( 73 ) , new Integer
assertEquals ( "Recent-Date" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
Assert . assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CParameter%2F%3E" , elem . toUrl ( ) )
assertEquals ( pullResult . getPullStatus ( ) , PullStatus . FOUND )
assertEquals ( "from SURVEY s\\n" + "inner join  b SURVEY s1\\n" + "on s.ID = s1.ID" , query . toString ( ) )
assertTrue ( "Bundle file '" + _bundle + "' for bundle'" + bundle + "' does not exist." , _bundle . exists ( ) )
assertEquals ( 5 , cashFlow . getSize ( ) )
assertTrue ( "Should equals" , toJsonNode ( res ) . equals ( toJsonNode ( TestUtils . readStringFromClasspathFile ( "/asserts/prepareCommentIndexedDocument_ORG-1501_1.json" ) ) ) )
assertNull ( entryRelationship )
Assert . assertTrue ( charset . equals ( CharsetUtil . getCharset ( charsetIndex ) ) )
assertNotNull ( form )
assertThat ( credentials , is ( notNullValue ( ) ) )
assertEquals ( 4 , actualExpectedWorkerLinkCount )
Assert . assertTrue ( response . contains ( "Call reached IMPL as schemaValidation went thru fine.siteid - 0clientid - abclang - 3" ) )
Assert . assertEquals ( resp . getStatus ( ) , HttpServletResponse . SC_OK )
given ( ) . get ( "zips/expireaftertwoseconds.zip/test/path/resource/gateleen.png" ) . then ( ) . assertThat ( )
assertEquals ( sc1 , sc2 )
assertThat ( stream . count ( ) , equalTo ( 2L ) )
assertEquals ( "lucene condition serialization is wrong" , expected , actual )
assertTrue ( outStr . contains ( NamenodeFsck . HEALTHY_STATUS ) )
Assert . assertFalse ( molecule1 . equals ( molecule2 ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "log home" , "/shared/logs/" + UID ) ) )
assertTrue ( result instanceof Boolean )
assertEquals ( ms , client . get ( ) . getMessageCount ( ) )
Assert . assertEquals ( "^.*$" , f . getPath ( ) . getTextContent ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertEquals ( "Part1/Part2trunk/Part3" , sw . toString ( ) )
assertThat ( separators , is ( ";\\n;\\n;\\n;\\n;\\n" ) )
Assert . assertTrue ( recordTable instanceof HTableRepository . HTableRepository )
assertEquals ( 0 , report . getEventCount ( ) )
Assert . assertFalse ( t1 == t2 )
assertThat ( sshClientEnvVar , anyOf ( startsWith ( "::1" ) , startsWith ( "127.0.0.1" ) ) )
assertThat ( new ShortTypeValidator ( "hoge" ) . validate ( parameters , "aaa" ) , is ( "hoge" ) )
Assert . assertEquals ( expectedOutputCardinality , outputCardinality )
assertThat ( a . overlaps ( b ) , is ( false ) )
this . assertVerification ( )
assertEquals ( buf . toString ( ) , "null" )
assertEqualsStoreParams ( params , params2 )
assertEquals ( 1 , bucket . size ( ) )
assertEquals ( Expression . LESS_THAN , exp . getType ( ) )
assertEquals ( original , inverse )
assertEquals ( RestrictedHealthStatus . WARN , response . getHealthy ( ) )
assertTrue ( predicate . isHighlighted ( null , adapter ) )
assertNull ( array )
assertEquals ( expectedSqlForMathOperations8 ( ) , result )
Assert . assertEquals ( "(aa_change_ssr (aa_point_location (aa_char Cys) 123) ( 3 _ 4 ))" , aa_change_ssr . toStringTree ( parser ) )
assertTrue ( pct . isOverrideSystemSettings ( ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    struct f_0001_0000 {int m0;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertEquals ( err . getClass ( ) , HttpPostRequestEncoder . ErrorDataEncoderException . class )
assertUserCount ( users , 5 )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertNotNull ( kbase )
BatchMainMock . assertLog ( "main(" + "-initiator, myUser, " + "-type, segmentation, " + "-segmentations, 1, 2, " + "-configuration, myBatchConfiguration, " + "-date, myDate, " + "-arg1, value1, " + "-arg2, value2, " + "-arg3, value3)" )
assertNotNull ( filter )
Assert . assertEquals ( "Data not inserted" , matchingResults . size ( ) , matchingResults . size ( ) )
Assert . assertEquals ( "did not get expected length back" , expectedLen , actualRead )
assertEquals ( "Jimmie, Barninger, CApainter" , object . getString ( "firstname" ) )
Assert . assertTrue ( writer . isStopped ( ) )
assertEquals ( "UserRegistration.ok" , mockResult . included ( "message" ) )
assertEquals ( myFile , entry . getFile ( ) )
assertEquals ( 0 , violations . size ( ) )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertEquals ( Properties . class , p . getPropertyType ( ) )
assertArrayEquals ( expected , params . getTripleIndexes ( ) )
Assert . assertTrue ( p . g ( 1 ) < 3 )
assertEquals ( 0 , result . size ( ) )
assertEquals ( expected , actual )
assertEquals ( 70 , loadOntology . getAxiomCount ( ) )
assertSame ( "same info" , info , info ( "m" , "m desc" ) )
maven . forProject ( basedir ) . execute ( "verify" ) . assertErrorFreeLog ( )
assertEquals ( expectedResult , result )
assertEquals ( "failed to generate class with method calling method on this" , CLASS_WITH_METHOD_CALLING_METHOD_ON_THIS , cls )
assertEquals ( "Request should be allowed due to lack of authentication" , Response . Status . UNAUTHORIZED , val . getStatusInfo ( ) )
assertEquals ( "http://localhost:80/mywebapp/servlet/MyServlet/" , tested . getBaseUrl ( ) )
Assert . assertTrue ( map . containsTransformer ( expected ) )
assertEquals ( "http://foo/Patient?_include=a&_include=b" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertTrue ( cohortService . getCohortMembershipByUuid ( RestTestConstants2_1 . COHORT_MEMBERSHIP_UUID ) . getVoided ( ) )
assertTrue ( reduce . getWindowing ( ) instanceof Time )
assertTrue ( resultFound )
assertTrue ( validator . getValidationResult ( ) . hasFailures ( ) )
Assert . assertTrue ( checkFlowNodeInstanceState ( NodeInstaceStates . PASSED_STATE , process , defaultInstanceId ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertFalse ( "Expected DateSchema string validation failure did not succeed" , schema . validate ( stringEntity ) )
assertTrue ( permissionEvaluator . hasPagePermission ( authentication , "project" , "branch" , DocumentrConstants . HOME_PAGE_NAME + "/foo" , Permission . VIEW ) )
assertNotNull ( statsd )
assertFalse ( handler1 . canRecvd ( capaBytes ) )
assertEquals ( users . size ( ) , 2 )
assertNull ( "Property not removed" , node . getProperty ( KEY ) )
assertThat ( readBytes ( testee ) , is ( "Hello|World|" ) )
Assert . assertEquals ( "1\\n1\\n3" , formatted )
assertEquals ( "Expected 404 but got " + response . getStatus ( ) , 404 , response . getStatus ( ) )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
runner . assertNotValid ( service )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
assertEquals ( expected , returnValue )
assertEquals ( expected , actual )
assertEquals ( columnInfo1 , decodedColumnInfo )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( sortedValues , values )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( expResult , result )
assertChangesDispatched ( listener )
Assert . assertEquals ( "did not build expected path" , expected , path )
assertThat ( url , is ( "/abc/Anything/def/123/ghi/123.45" ) )
assertIsRemovedToInvisible ( columnModel , 0 , false )
assertEquals ( 3 , longStream . getAsLong ( ) )
assertEquals ( expectedDate , ccmessage )
assertEquals ( assertion , rowMean )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( "Persist operator should be added to dag after stream.add" , "Stream1_persister" , persistOperatorMeta )
assertEquals ( "The slider was not properly updated" , 123 , label . get ( ) )
assertResultSet ( res )
assertEquals ( files . size ( ) , scanner . count ( ) )
assertEquals ( 2 , findIndexObject . size ( ) )
assertNotNull ( proveedorFacturas . getId ( ) )
assertEquals ( "True has to be returned in this case" , preferredBlockSize , inf . getPreferredBlockSize ( ) )
Assert . assertEquals ( ImmutableSet . of ( "keyToInclude" , "anotherKeyToInclude" ) , filteredPhotonRequest . keys ( ) )
assertEquals ( 2 , actualExpectedWorkerLinkCount )
Truth . assertThat ( GrpcCallContext . createDefault ( ) . withTimeout ( Duration . ofSeconds ( - 1L ) ) . getTimeout ( ) )
Assert . assertEquals ( 2 , a . rank ( ) )
assertEquals ( 1 , list . size ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "No such service demo" , result )
assertTrue ( ! outputEntity . hasKey ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertNotNull ( job . toString ( ) )
assertEquals ( "<b><<test>></b>" , multiLineText . toDisplay ( ) )
assertTrue ( action . getResponseContent ( ) . contains ( "Unusual view id was rendered!" ) )
assertThat ( url , equalTo ( dotCucumber ) )
assertTrue ( result . size ( ) == 2 )
assertTrue ( response . getEntry ( ) . size ( ) > 0 )
Assert . assertTrue ( result . equals ( "10 minutes" ) )
assertSseResponse ( sseResponse , "event:eventName" , "data:payload1" , "" , "event:eventName" , "data:payload2" )
assertTrue ( this . validator . validate ( c ) . isEmpty ( ) )
TestResources . assertFilesPresent ( basedir , "target/output.txt" )
Assert . assertEquals ( "The house where I played poker has been abandoned since 1986." , realised . getRealisation ( ) )
assertFalse ( authorizer . isAuthorized ( "test" , profiles , null ) )
assertThat ( map . prices ( ) , is ( ImmutableMap . of ( "red" , 17 , "green" , 18 ) ) )
assertTrue ( close . await ( 10 , SECONDS ) )
assertEquals ( 1 , i )
assertThat ( "Kein Ergebnis geliefert" , target , notNullValue ( ) )
assertEquals ( NS , testSubject . getPrefix ( ) )
Assert . assertEquals ( "41 minutoj" , prettyTime . formatDuration ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert . fail ( type [ j ] + ", " + b + ", " + a )
Assert . assertEquals ( 4d , StatUtils . getMean ( numbers ) , TOL )
Assert . assertEquals ( "88132-020" , retornoConsultaCadastroEndereco . getCep ( ) )
assertTrue ( serviceSet . isEmpty ( ) )
assertThat ( IDN . toUnicode ( result . toString ( ) ) , equalTo ( robots ) )
assertNull ( query . offset ( 10 ) . fetchOne ( ) )
Assert . assertFalse ( ZipCompletionScanner . isCompleteZip ( file ) )
assertEquals ( asList ( new LogoutRequest ( ) ) , serverEvents . collect ( ) )
Assert . assertThat ( values , Matchers . contains ( "value 0.5;p=v0.5" , "value 1.0" , "other;param" ) )
assertEquals ( newModified , Files . getLastModifiedTime ( path ) . toMillis ( ) )
assertPolygons ( expected , polys )
assertNotNull ( accessToken )
assertThat ( database . getManager ( ) . externalizer ( "test" ) . getLocation ( ) , is ( "Rome" ) )
Assert . assertEquals ( "Report
ModelTestBase . assertIsoModels ( expected , m )
assertThat ( violations . size ( ) , is ( 1 ) )
assertTrue ( "expected oval but got " + count , count == 1 )
assertEquals ( Float . class , handler . apply ( rs , 1 ) . getClass ( ) )
assertCleanedUpState ( 1 )
assertNotNull ( edm )
assertThat ( timePeriod . with ( STD_CLOCK_PERIOD . with ( ClockUnit . STD_CLOCK_PERIOD ) ) , is ( Duration . ofClockUnits ( 2 , 61 , 120 ) ) )
assertTrue ( true )
assertEquals ( IOTester . BT_IN_PAYLOAD , buf . getPayload ( ) )
Assert . assertEquals ( 3 , table . getRowCount ( ) )
assertEquals ( 11 , v . getProperty ( "value" ) . intValue ( ) )
assertEquals ( 0 , result . size ( ) )
assertValidSelector ( result )
assertThat ( result , is ( sameInstance ( primaryKeysResponse ) ) )
Assert . assertNotNull ( result )
Assert . assertTrue ( getException )
assertEquals ( expected , dotFileFormat . format ( new File ( "." ) ) )
assertThat ( this . state . getRowIndex ( ) , is ( equalTo ( rowIndex ) ) )
assertNull ( underTest . createNewKey ( FORMAT , apiKeyCollection ) )
assertNotNull ( instance . getFactor ( ) )
given ( ) . get ( "zips/notfound.zip/test/path/resource/gateleen.png" ) . then ( ) . assertThat ( )
assertThat ( renewer . getCurrentlyHeldLeases ( ) . size ( ) , equalTo ( 0 ) )
Assert . assertEquals ( "The rule does not match the built one" , testRule , builtRule )
assertEquals ( "Compression mode should match" , eOutputCompressionMode , getCompressionMode ( ) )
assertEquals ( "dubbo://127.0.0.1:20887" , result )
Assert . assertTrue ( "topic was not deleted" , topic . getTopicMap ( ) == null )
assertEquals ( PropUtil . getIntSessionProperty ( sess , "test" , 1 ) , 2 )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertFalse ( "check same component" , _update . hasUpdate ( NEW_STRING_PATH , newComponent2 ) )
assertEquals ( 4 * TWO_LINES_REMOVED_SCORE , playerScores . getScore ( ) )
assertEquals ( "array type" , 1 , parsed . params . get ( 0 ) . first . arrayDepth )
Assert . assertTrue ( check . equals ( o ) )
assertTrue ( usl instanceof UniqueSymbolArea )
assertTrue ( 5.0f == d . asFloat4 ( ) )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertTrue ( easyCTO . isCreatingClass ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
Assert . assertEquals ( 404 , response . getStatus ( ) )
assertTrue ( NativeCodeLoader . canLoad ( ) )
assertEquals ( value , out . getSizeT ( ) )
assertEquals ( expected , wrapperFilename )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertEquals ( 0 , version . getMinor ( ) )
assertThatSliderValueIs ( maximumOf ( slider ) )
assertThat ( resourceIds , equalTo ( expectedResourceIds ) )
Assert . assertEquals ( EMPTY , result )
assertEquals ( o1 , o2 )
assertEquals ( REMOTE_CONNECTOR_ADDRESS , store . getRemoteConnectorAddress ( ) )
assertNotNull ( logServiceState )
assertEquals ( response . getStatusCode ( ) , 201 )
assertEquals ( expected , actual )
assertThat ( parameter , is ( "bar" ) )
Assert . assertEquals ( ColorExtension . COLOR_RGBA , buf . remaining ( ) )
assertEquals ( "dois sextilh玫es de inteiros" , actual )
assertEquals ( texts . length , detections . length )
Assert . assertEquals ( "Failure - expected validatorList size to be 2" , 2 , str . size ( ) )
assertEquals ( anchorListItem , workbenchMenuStandardNavBarView . getMenuItemContextWidgetMap ( ) . get ( menuId ) )
assertTrue ( zoomUI . canZoomOut ( ) )
assertOut ( "function foo(bar:*):int {\\n\\treturn -1;\\n}" )
assertTrue ( vrpBuilder . getLocationMap ( ) . containsKey ( "end" ) )
assertEquals ( contentExpected , contentReturned )
Assert . assertTrue ( rep . containsKey ( "name" ) )
Assert . assertEquals ( 500 , li . getValue ( 50 ) , 1e-5 )
assertEquals ( newestVersion . getIndex ( ) , 1 )
Assert . assertEquals ( 0 , services . size ( ) )
assertThat ( TestI18n . testMessage . text ( Locale . GERMANY ) , is ( "Test Message" ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( result , expecting )
assertEquals ( "5:::{\\"name\\":\\"edwald\\"}" , result )
assertThrown ( val , promise )
assertPaths ( asList ( "path" , "metadata.xml" ) , paths )
Assert . assertEquals ( Integer . valueOf ( 3 ) , object )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertEquals ( "a b\\n" , found )
assertEquals ( cal . getTime ( ) , w . getEnd ( ) )
Assert . assertEquals ( 1 , entities . size ( ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPermissions ( authorizables , list ( "jranalyst" ) ) . values ( ) ) . toString ( ) )
assertRecord ( record )
assertEquals ( "field.toLowerCase()" , p . toString ( ) )
assertEquals ( "Sie diesren Finnish Finnishisation" , ref [ 0 ] [ 0 ] )
assertFalse ( hasLock )
assertEquals ( "Hello TestNG!" , translate . execute ( "Bonjour le monde" , Language . FRENCH , Language . ENGLISH ) )
Assert . assertFalse ( this . entityAccess . isOwner ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "2.1" , PomIdsHelper . getJobVersion ( property ) )
assertTrue ( outContent . toString ( ) . equals ( args [ 3 ] + " is in progress.\\n" ) )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( ) )
Assert . assertNull ( mapping )
assertEquals ( randomCommentDTO ( ) , comments )
assertNotNull ( row . hashCode ( ) )
this . assertResponse ( faultResponse , null , this . defaultMessage , null , null , this . parameters )
Assert . assertEquals ( result . getResultSize ( ) , 8 )
assertTrue ( nicHandle . equals ( nicHandle ) )
assertEquals ( true , victim . getConfiguration ( ) . isDebug ( ) )
assertFalse ( b )
Assert . assertSame ( timer , this . timer )
assertEquals ( "Failed to convert empty String to BigInteger" , null , model . getAmount ( ) )
Assert . assertNotNull ( "FileName value is missing" , atFields . get ( "fileName" ) )
assertSame ( solution , selection . execute ( population ) )
assertEquals ( newValue , presenter . getValue ( ) )
assertNull ( resource )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error test error" ) . getValue ( ) )
assertEquals ( "1" , rootMapper . mySynchronizer . getSelectedItems ( ) . get ( 0 ) )
assertConstruct ( tq , ttl )
Assert . assertEquals ( "{\\"relatednessResponse\\":{\\"msg\\":\\"This is a test of the emergency alert system\\",\\"code\\":400}}" , writer . toString ( ) )
assertEquals ( 3 , ret_val )
assertEquals ( "Attemped updating a Tab after adding a Tab to a new tab group" , "Foo" , tabGroup . getTabs ( ) . get ( ford . getStartTabGroup ( ) . getTabs ( ) . size ( ) - 1 ) . getTabName ( ) )
assertEquals ( "2 << 3" , expr . getParameterValue ( ) )
assertEquals ( "<foo:bar id=\\"1\\" /><abc:def id=\\"2\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertFalse ( like1 . equals ( like2 ) )
assertEquals ( 0 , attribsSet . size ( ) )
assertEquals ( "Reference value not set" , Integer . valueOf ( MAGIC ) , ref . getValue ( ) )
Assert . assertArrayEquals ( expected , kernel . toArray ( ) , 1e-6 )
assertEquals ( "Answer returning " + value , r . toString ( ) )
Assert . assertEquals ( expectedSignature , signature )
assertEquals ( "Wrong number of replators" , 2 , config . getReplicators ( ) . size ( ) )
Assert . assertEquals ( "Should return exactly one variable" , 1 , response . jsonPath ( ) . getMap ( "" ) . size ( ) )
assertions . doesNotContain ( 'e' , index )
assertThat ( validatedConfig . getSlots ( ) , hasItem ( "xx-aa" ) )
assertEquals ( a . getDstContextAlias ( ) , "dst" )
RouteUtils . assertSatisfied ( result )
assertThat ( query . count ( ) , is ( 0L ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
assertThat ( log . getEvents ( ) . size ( ) , equalTo ( 4 ) )
Assert . assertEquals ( "The received ID in force delete case is different than expected VALID_ID_FOR_DELETION." , VALID_ID_FOR_DELETION , da . getId ( ) )
assertNull ( jobResult . getOutcomeResult ( ) )
Assert . assertEquals ( getResultMatrix ( ) , resultMatrix )
assertTrue ( "Target file should match" , pom1 . isDirectory ( ) )
assertEquals ( "test" , FileUtils . getFileName ( new File ( "." ) ) )
Assert . assertNotEquals ( Board . Cell . CELLS [ 4 ] [ 2 ] , move . start )
assertEquals ( LINK_URL , convertedEvent . getURL ( ) . toExternalForm ( ) )
assertEquals ( expectedMethods , calledMethods )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LENGTH(nodes.property) < 'literal'" ) )
assertLogContains ( "Completed [1/1 (1!)]" )
assertEquals ( ORDER_XML , orderXML )
assertEquals ( "Mock" , instruction . getType ( ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertTrue ( ind . contains ( v ) )
Assert . assertArrayEquals ( message , expecteds , actuals )
assertTrue ( htmlToDisplay . contains ( "<span id=\\"obs-id\\" class=\\"obs-field custom-class\\">" ) )
Assert . assertEquals ( "Frank" , MVEL . eval ( "parent.firstName" , person ) )
assertEquals ( "http://java.example.com:8080/foo/bar/buz/qux" , got . toString ( ) )
assertEquals ( expectedAddMonths ( ) , result )
assertThat ( delegate . get ( ) , is ( new BigDecimal ( "10" ) ) )
assertEquals ( "wkt" , dump ( ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "geomencoder_config" ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
context . assertSentrySemanticException ( statement , "drop database " + DB1 , semanticException )
assertTrue ( getNoErrorMsg ( ) , result )
assertCustomerWithLinksSample ( )
assertFalse ( result )
assertNull ( adapter . getColumnIdentifierAt ( 0 ) )
assertTrue ( true )
assertSame ( "Cloned instance" , EmptyState . INSTANCE , cloned )
assertEquals ( DataTypeManager . DefaultDataClasses . STRING , f . getType ( ) )
assertEquals ( "jdbc/DS" , propertyLoader . getUniqueName ( ) )
assertEquals ( "Consultant" , json . getString ( "profile" ) )
assertEquals ( "unit" , mojo . getLineSeparator ( ) )
assertEquals ( 1 , routingTable . getRoutingList ( ) . length )
assertEquals ( "Wrong number of child builders" , 3 , childBuilders . size ( ) )
assertEquals ( "2008/DT Sichuan/JJ earthquake/NN From/IN Wikipedia/NN ,/, the/DT free/NN encyclopedia/NN" , firstLine )
assertEquals ( 0 , a . getFive ( ) . getTime ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) = $literal" ) )
assertThat ( one , is ( equalTo ( "1" ) ) )
Assert . assertNotNull ( source )
assertEquals ( obj . getStatus ( ) , Status . STOPPED )
context . assertEquals ( OK , replyBody . getString ( STATUS ) )
Assert . assertTrue ( versionMatchFilter . check ( makeAssociationDescriptor ( null ) , makeServiceItem ( ) ) )
Assert . assertNull ( value )
assertInvocations ( client . getBusinessActivityInvocations ( ) )
Assert . assertEquals ( "x=" + x , sig . value ( x ) , sigL . value ( x ) , EPS )
Assert . assertEquals ( "empty stream" , testBuffer . result )
assertResultSet ( res )
Assert . assertSame ( e , this . mocker . getComponentUnderTest ( ) . process ( e ) )
BeanAssert . assertBeanEquals ( bean , parsed )
assertNotNull ( actual )
assertEquals ( allFiles . size ( ) , 1 )
assertThat ( graph . run ( executorService ) . get ( ) , equalTo ( "fallback response" ) )
assertNotNull ( reporter )
Assert . assertFalse ( orPredicate . test ( null ) )
assertThat ( taxFactorForPerson , equalTo ( TAX_FACTOR ) )
assertTrue ( pior . getResult ( ) == null )
assertQuery ( testId , result , tdr . getTestData ( testId ) )
assertEquals ( "OK" , r )
MatcherAssert . assertThat ( new LrFromVocabulary ( concept ) . pickLexeme ( Mockito . mock ( ActualArguments . class ) , new BasicVocabulary ( ImmutableMap . of ( concept , lexeme ) ) ) , CoreMatchers . is ( lexeme ) )
assertEntityHasValue ( mappedKey , value )
assertConfig ( cfg , "permessage-compress" , expectedParams )
Assert . assertThat ( value , instanceOf ( PreConfiguredKafkaMessageListener . class ) )
assertEquals ( InternetServiceLifecycleMeta . States . InService . class . getSimpleName ( ) , service . getState ( ) )
assertEquals ( days , testResult )
assertEquals ( "filename.middle.jpg" , filename )
TestUtils . assertEquals ( interesadoDTO , interesadoVO )
assertEquals ( "yes" , html )
assertEquals ( 12345678910L , tiffLong . getData ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertResponse ( response , 200 , "{\\"errors\\":[\\"query.bogus is not a valid time unit, must be one of MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS,WEEKS,MONTHS,YEARS\\"]}" )
assertEquals ( 0 , actual . size ( ) )
assertEquals ( "appName1" , config . getAppName ( ) )
assertNotNull ( Sim . reader ( ) . read ( ) )
assertThat ( xoManager , notNullValue ( ) )
assertThat ( ont . containsAxiom ( otherAnnoAssertion ) , is ( false ) )
assertTrue ( cell . getTerrain ( ) instanceof Rock )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertTrue ( null == obj )
Assert . assertEquals ( StatusCodes . NOT_FOUND , result . getStatusLine ( ) . getStatusCode ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ORCID_BIO_UPDATE , ScopePathType . ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
Assert . assertTrue ( sum . longValue ( ) == 255 )
assertEquals ( ss . getValue ( ) , ss . getPvalue ( ) , 0.0001 )
assertEquals ( prefix_and_search_result , result )
Assert . assertEquals ( 2 , terms . size ( ) )
assertEquals ( 0 , count )
assertEquals ( connectionsBeforeReporting , connectionsAfterReporting )
assertThat ( anyTS . getMinimum ( MINUTE_OF_DAY ) , is ( 0 ) )
assertEquals ( without , with )
assertNotNull ( injectionTargetInformation . getInjectionTarget ( ) )
assertTrue ( "Selectable is not set" , table . isSelectable ( ) )
arrays . assertDoesNotContain ( description , actual , value , index )
assertSame ( connection , recoveredConnection )
assertEquals ( expected1 , actual )
assertThat ( Duration . in ( units ) . between ( t1 , t2 ) , is ( Duration . ofPositive ( ) . months ( 0 ) . days ( 27 ) . hours ( 9 ) . minutes ( 15 ) . build ( ) ) )
assertEquals ( "a" , found )
assertTrue ( ! result )
assertEquals ( "<table> <colgroup> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col</</</</</</</
Assert . assertTrue ( ops . isEmpty ( ) )
assertEquals ( "abc=123" , a [ 0 ] )
Assert . assertFalse ( rose . containsRemote ( endp ) )
assertTrue ( glass . accept ( point , 0 , 0 ) )
assertEquals ( CREATED . getStatusCode ( ) , getStatus ( response ) )
assertEquals ( "http://localhost:8080/jaxrs-uri-template-1.0-SNAPSHOT/app/download/file/{path:.+}" , result )
assertThat ( expected , equalTo ( actual ) )
mockAggregated . assertIsSatisfied ( )
assertTrue ( locDeser . toString ( ) + " != " + loc . toString ( ) , locDeser . equals ( loc ) )
assertEquals ( "Geo names are not as expected" , 1 , connection . getMetaData ( ) . getAllProperties ( ) . size ( ) )
assertEquals ( 123L , deserialize . readLong ( ) )
assertEquals ( 2 , all . size ( ) )
assertEquals ( "- 34, channel=0\\n" , found )
assertEquals ( cause , sut . getCause ( ) )
Assert . assertNotNull ( freeTaggingService )
assertEquals ( sandboxName , System . getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertEquals ( expectedScript , observedScript )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( "title" , html )
assertFalse ( ex . isPrime ( - 231 ) )
Assert . assertEquals ( "Test" , out )
assertEquals ( "The list from the detailed history, was not the same as returned from checkout" , list , actualList )
Assert . assertFalse ( this . component . equals ( new DefaultMatchCountImpl ( this . feature2 , HP01_GENES ) ) )
Assert . assertNotNull ( inputStream )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( baos . toByteArray ( ) ) , iterators )
assertTrue ( r1 . contains ( d ) )
assertTrue ( result )
assertTrue ( p >= 0 )
assertEquals ( "Should return HTTP 201 (Created)" , HttpStatus . CREATED , adapterResponse . getResponseStatus ( ) )
assertEquals ( "(f=1)" , o )
assertNotNull ( result )
assertTrue ( pn . canonicalName ( ) . equals ( "Abies" ) )
assertEquals ( "&#;" , writer . toString ( ) )
assertThat ( target . matchExactly ( action ) , is ( false ) )
assertEquals ( TextUtil . readUTF8 ( path ) , generator . getResult ( ) )
Assert . assertEquals ( "Test that getLocationY returned an int value" , - 1 , val )
Assert . assertEquals ( ECHO_STRING , outMessage )
Assert . assertEquals ( "2013/09/03" , result . getText ( ) )
assertEquals ( "Incorrect Short Reason" , "Platform Down leela.local Custom Property (customPropertyValue) " , alertManager . getShortReason ( testPlatformAlert ) )
assertEquals ( qf1 , qf2 )
assertTrue ( ret == null )
Assert . assertNotNull ( raised )
assertTrue ( this . dataservice . equals ( thatDataservice ) )
assertThat ( selectedCell , is ( "B2" ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "EADD" )
assertThat ( range . normalize ( - 10.0 ) , equalTo ( 0.0 ) )
Assert . assertEquals ( new DoubleMatrix ( A_PASCAL_22 , A_PASCAL_22 ) , outMatrix )
Assert . assertNotNull ( "Null input" , input )
assertEquals ( typeId1 , typeId2 )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertEquals ( "SELECT 1 XOR 1 XOR 1;" , text )
assertEquals ( Sets . newHashSet ( g . getEnd ( ) ) , g . getStart ( ) . getFollow ( ) )
assertEquals ( "<foo:bar id=\\"1\\" /><abc:def id=\\"2\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertNotFired ( watch )
assertEquals ( 2 , wlsClusterConfig . getMaxClusterSize ( ) )
assertTrue ( "Should have received message" , latch . await ( 1 , TimeUnit . SECONDS ) )
assertTrue ( correct . get ( namedEntity . getLabel ( ) ) . equals ( disambiguatedURL ) )
assertNoOrders ( )
Assert . assertEquals ( now , value )
assertEquals ( 5 , annotationProxy . differentReturnType ( ) )
assertEquals ( "Wrong property" , null , conf . get ( String . class , key ) )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "value" , value . asIs ( ) )
assertThat ( harry . getFriends ( ) , hasItems ( sally , steve ) )
assertEquals ( "Failed to generate foreach loop using a literal String array" , FOREACH_LITERAL_STRING_ARRAY , foreachWithStringArray )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertThat ( converter . toJavaObject ( writableList ) , is ( ( Object ) javaList ) )
Assert . assertTrue ( received )
assertTrue ( actual )
assertEquals ( "name" , caller . getResponseBody ( ) )
assertThat ( result , is ( Arrays . asList ( a , b , c ) ) )
assertEquals ( text , toString ( text ) )
assertArrayEquals ( new String [ ] { "A" , "B" , "C" } , r . readAtomStringList ( ) )
Assert . assertEquals ( "Value is incorrect" , map ( DATE_TIME_2_STRING , "test" ) , value )
Assert . assertEquals ( IrodsRuleInvocationTypeEnum . IRODS , actual )
assertSame ( argument , service . call ( args ) )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertNotNull ( "Could not find workflow " + WF_APICONSUMER , wfResource )
Assert . assertEquals ( 3.0 , result , 0.0 )
assertTrue ( value instanceof NullWritable )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_maxheight_04_" ) )
assertThat ( writer . get ( ) , is ( nullValue ( ) ) )
assertThat ( event . getMetadata ( ) . getEvent ( ) , nullValue ( ) )
assertEquals ( Integer . valueOf ( 42 ) , event . getMessageId ( ) )
assertTrue ( 5.0f == d . asFloat4 ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( true , result )
assertEquals ( rep . getEntry ( 0 ) , rep . getEntry ( 1 ) )
assertEquals ( 3 , fTempDir . list ( ) . length )
assertEquals ( "123" , ids )
Assert . assertTrue ( result )
assertTrue ( filter . shouldDeliverNotification ( eventContext ) )
assertSingleNotificationType ( EventType . FAILED_AUTHENTICATION )
assertEquals ( "subchannels" , oobChannel . getName ( ) )
assertNotNull ( smartsheet )
Assert . assertEquals ( "Task failed: " + tids [ 0 ] . toString ( ) , "Task failed: " + info . getDatum ( ) , 0 )
assertTrue ( "This roles should have the privilege" , role . hasPrivilege ( "priv1" ) )
assertTrue ( plugin . getPlayerBanStorage ( ) . getBanned ( player . getUUID ( ) ) . isSilent ( ) )
Truth . assertThat ( name . toString ( ) )
assertEquals ( 2 , numberOfOccurences )
assertEquals ( "TestValue" , ( ( Context ) context . lookup ( "context" ) ) . lookup ( "test" ) )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertRequestIsInitializedWithMapping ( )
Assert . assertEquals ( tag , _getTag ( o ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertTrue ( requestParameter . isFloat ( ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( conf , containsString ( "<interaction><code value=\\"" + SystemRestfulInteraction . HISTORYSYSTEM . toCode ( ) + "\\"/></interaction>" ) )
assertEquals ( "grand grandFather" , firstName )
assertEquals ( "ix" , suffix )
assertThat ( entry , is ( instanceOf ( CreateVertexLogEntry . class ) ) )
assertEquals ( iSun , iMine , Integer . parseInt ( numberStrings [ i ] ) )
assertThat ( dest . get ( "aaa" ) , is ( nullValue ( ) ) )
assertEquals ( 0 , result )
assertions . doesNotContain ( value , index )
Assert . assertEquals ( "failing-db" , actual )
Assert . assertEquals ( "should have returned the tag removed" , 0 , irodsTagValues . size ( ) )
assertEquals ( expected , x )
Assert . assertEquals ( HttpStatus . SC_OK , result . getCode ( ) )
assertEquals ( expected , actual )
assertFeatureValues ( expected , "document test" , "document test test" , EXTRACTOR )
login . assertIsConnectedAs ( "test1" )
assertThat ( dog . names , is ( equalTo ( Dog . names ) ) )
assertEquals ( "getServerConfig" , expected . getServerConfig ( ) , serialized )
assertTrue ( out . equals ( "M6 T2" ) )
assertNull ( event . getLocation ( ) )
assertThat ( nsp . getZeroDigit ( new Locale ( "fa" ) ) , is ( "‎" ) )
Assert . assertEquals ( 10 , analyser . getLoadDelivered ( route ) . get ( 0 ) , 0.01 )
assertThat ( other , DateMatchers . sameSecond ( date ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TimeValue . ofSeconds ( 6 ) , impl . getCorrectedInitialAge ( entry ) )
assertEquals ( expected , broker . getFactories ( ) . get ( 0 ) )
assertEquals ( "Certificate can be parsed" , ValidationMessage . getMessage ( validationCheck , Locale . GERMANY ) )
assertEquals ( streamName , sn . getName ( ) )
assertThat ( parameters , equalTo ( Arrays . asList ( ( Object ) "foo" ) ) )
assertSeen ( results , s1 )
assertEquals ( expected , cassandraRowMapper . map ( resultSet ) . next ( ) )
assertEquals ( query , result )
assertTrue ( response . getStatusCode ( ) == 422 )
assertEquals ( Integer . valueOf ( 64444167 ) , ( ( Document ) ( ( List ) ( ( Document ) queryResult . getResult ( ) . get ( 0 ) ) . get ( "chromosomes" ) ) . get ( 0 ) ) . get ( "size" ) )
checker . assertEquals ( "[" + s + "][" + r + "][" + c + "]" , exp , act )
Assert . assertEquals ( ( Integer ) 11 , res )
assertEquals ( XML_PREFIX + PREFIX + currentTest + POSTFIX , result . toString ( ) )
assertFalse ( ( "" + kieModuleMetaData . getPackages ( ) ) . contains ( "junit" ) )
assertEquals ( "db17" , rec . get ( "SUM" ) )
assertSame ( cmd . returnValue , cmd . await ( ) )
assertEquals ( "(a 3 4)\\n" , found )
assertEquals ( "111.222" , intStr )
Assert . assertTrue ( success )
assertEquals ( "Wrong number of results" , 100 , count )
assertEquals ( 120 , count )
Assert . assertEquals ( num , count )
Assert . assertNotNull ( factory )
assertTrue ( result . registration_ids . size ( ) == 0 )
Assert . assertFalse ( evaluator . hasPermission ( authentication , targetId , targetType , permission ) )
assertEquals ( expected , actual )
assertEquals ( 3 , springBeansConfig . getTargets ( ) . size ( ) )
assertEquals ( "TestGetValues 0" , valueList , concatenate . getValues ( context , item ) )
Assert . assertFalse ( canUse )
assertEquals ( "<select class='gwt-ListBox'>" + "<option value='Please select...'>Please select...</option>" + "<option value='M'>M</option>" + "<option value='F'>F</option>" + "</select>" , c . getRight ( ) )
assertEquals ( "Should have thrown an IllegalStateException" , IllegalStateException . class , Framework . getRuntimeException ( ) . getClass ( ) )
Assert . assertEquals ( 100l , ( long ) RequestObjectHelper . getStartOffset ( requestObject ) )
assertThat ( snippetFor ( "I have:\\n" + "
assertEquals ( keyExpected , keyBuilt )
assertEquals ( "DEFAULT" , instance . getValue ( "architect" ) )
assertTrue ( testFailed . isEmpty ( ) )
assertEquals ( "<html><head></head><body>pre <script>inner</script> aft</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
MutableMessageFactoryTest . assertExpiryDateEquals ( expiryDateValue , message )
Assert . assertEquals ( uuid , result )
assertTrue ( c . value ( ) == Cursor . NOT_LOADED )
assertNotNull ( response )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertEquals ( KarmaCalculator . UPVOTED_QUESTION_OR_ANSWER , votedAtSomething . reward ( ) )
assertThat ( tags . size ( ) , is ( 2 ) )
assertThat ( resultTally . getRunCount ( ) , is ( 2 ) )
assertTrue ( filter . matches ( record ) )
assertListTEquals ( listT , 42 )
assertEquals ( expectedYaml , exportedYaml )
assertEquals ( arr , resultArr )
assertArrayEquals ( e , a )
assertEqualsIgnoreWhitespace ( expected , real )
assertArrayEquals ( buffer , hammingWindow . getOutputArray ( ) , 0.0 )
assertions . isNotEqualTo ( null )
Assert . assertTrue ( enabledSections . isEmpty ( ) )
assertEquals ( value , picker . getEditor ( ) . getValue ( ) )
assertEquals ( buf . toString ( ) , "[\\"a\\", [], \\"b\\"]" )
assertThat ( TimestampInterval . parseISO ( "2012-W13-7T14:15/P0000-00-04T01:45" ) , is ( expected ) )
assertEquals ( "OK" , result )
assertEquals ( 2 , constraints . size ( ) )
assertEquals ( response . getStatus ( ) , JsonResponseStatus . FAIL )
assertEquals ( "There should be 0 errors" , 0 , chain . getChildren ( ) . size ( ) )
assertEquals ( newTd , store . update ( query ) )
assertEquals ( JodaBeanUtils . collectionType ( test , Person . class ) , Person . class )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( "Hello, world!" , path )
assertEquals ( expectedHtml , removeTextRange ( result ) )
assertEquals ( 100_000_000 , counter . sum ( ) )
assertEquals ( "ExceptionContext" , cOut , cIn )
assertThat ( feature . getId ( ) , is ( WidgetFeature . class . getCanonicalName ( ) ) )
assertNotNull ( service )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertThat ( list . size ( ) , is ( 0 ) )
assertThat ( result , equalTo ( expected ) )
assertEquals ( "test" , m2 . getHeader ( "Subject" , null ) )
assertEquals ( "default" , value . getValue ( ) )
assertEquals ( "There should be only 1 history record" , 1 , historyFromFile . getHistory ( ) . size ( ) )
assertEquals ( original , restored )
assertIsAborted ( tx )
assertCharacterCut ( input , expectedOutput , 1 , 2 )
assertThat ( target . containsLink ( link . getId ( ) ) , is ( true ) )
Assert . assertNotNull ( sampleType )
assertEquals ( LIMIT , dps . size ( ) )
assertOut ( "foo : goog.array.forEach(obj, function (i) {\\n\\tbreak foo;\\n})" )
assertEquals ( "Checking subseq as expected" , expectedDna , subSeq . getSequenceAsString ( ) )
assertTrue ( differentiator . isNew ( fileInputStream ) )
assertEquals ( 1 , constraints . size ( ) )
assertEquals ( "Unexpected value for toString()" , expexted , actual )
assertEquals ( queryResult , stripHeader ( response ) )
assertNull ( "Null was expected." , result )
assertEquals ( expResult , result )
assertEquals ( Long . valueOf ( 0L ) , myTestInstance . delete ( doc ) )
assertFalse ( comparator . isDifferent ( lhs , rhs ) )
assertEquals ( Arrays . asList ( "ls -ltr | grep -v hello" ) , t . getCommandStrings ( ) )
assertEquals ( toolTip , tree . getToolTipText ( ) )
assertEquals ( expResult , result )
assertEquals ( EdmSimpleTypeKind . Temporal , edmDateType )
assertThat ( properties . main . schema . getValue ( ) , equalTo ( inputSchema ) )
assertEquals ( 12 , results . size ( ) )
assertThat ( new SomeClass ( ) , is ( sut ) )
assertThat ( error , containsString ( "Config file " + file . getAbsolutePath ( ) + " does not exist." ) )
assertArrayEquals ( new double [ ] { 1.0 , 2.0 , 3.0 } , airMass , 1e-4 )
assertEquals ( ace , parsed )
assertPerson ( person )
assertEquals ( "1" , msg . remove ( key ) )
assertEquals ( val , app . getTest ( ) )
assertEquals ( expectedFormKey , actualFormKey )
assertEquals ( NOT_FOUND , response . getStatus ( ) )
Assert . assertEquals ( CurrentUser . getUser ( ) , "doAsProxyUser" )
Assert . assertEquals ( expectedString , resultBootstrapString )
Assert . assertEquals ( "3 days 15 hours 38 minutes from now" , t . format ( durations ) )
assertTrue ( s . contains ( "Dump Configuration" ) )
assertThat ( description . toString ( ) , is ( "is \\"x\\"" ) )
Assert . assertTrue ( patientService . isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert . assertArrayEquals ( SOL_22_EXPECTED , SOL_22_ACTUAL , DELTA )
Assert . assertEquals ( newCfg , ctx . getConfiguration ( ) )
assertEquals ( "Date not equal to itself ISO formatted and parsed" , d . getTime ( ) , d2 . getTime ( ) % 1000 )
assertEquals ( exp , DEFAULT_EXPIRATION )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . fail ( "Cannot marshall a complex map" )
assertEquals ( expectedResult , actualResult )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . has ( "name" , "john" ) . count ( ) . next ( ) . intValue ( ) )
Assert . assertEquals ( before - 1 , after )
Assert . assertEquals ( expected , result )
assertEquals ( "{\\"ver\\":\\"2.2\\"}" , serialyse ( link ) )
assertEquals ( "IP address should be set to the IP address that was specified" , IP_ADDRESS , ipAddress )
assertNotNull ( jsonAllUserJobSummary )
assertEquals ( 5 , sumXValues )
assertThat ( actual , containsString ( "<h1>Name</h1><div class=\\"nameElement\\">given <b>FAM1 </b></div><h1>Address</h1><div><span>line1 </span><br/><span>line2 </span><br/></div></div>" ) )
assertThat ( response . getStatus ( ) , is ( Response . Status . OK . getStatusCode ( ) ) )
assertEquals ( resizer , receivedResizer )
assertEquals ( " UK" , test . getCode ( ) )
assertEquals ( DummyDrawHandler . drawTextToString ( "Das ist \\" dfs " , 10 , 20 , AlignHorizontal . LEFT , null ) , drawHandler . getLastDrawCall ( ) )
assertThat ( myBigDecimal , is ( equalTo ( new BigDecimal ( "0" ) ) ) )
assertEquals ( 5094000000L , y . getFirstMillisecond ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( "Hello World" , envs . get ( 0 ) . getName ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "2.1e2" , FmtUtils . stringForLiteral ( nl , getContext ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertTrue ( files . get ( 0 ) . contains ( "filesample.txt" ) )
assertEquals ( 1 , null1Dao . create ( nullThing ) )
assertThat ( multiSupplier . authForBuild ( ) , is ( nullValue ( ) ) )
assertThat ( string , is ( "" ) )
assertThat ( end , is ( Clock . fixed ( LocalDateTime . of ( 2012 , 6 , 30 , 23 , 59 , 59 ) . atOffset ( ZoneOffset . UTC ) . toInstant ( ) , ZoneId . systemDefault ( ) ) ) )
assertFalse ( "Did not create DatagramSocket" , socket == null || socket instanceof MulticastSocket )
assertTrue ( checker . isDetected ( ) )
assertEquals ( 1 , result . getLength ( ) )
assertTrue ( checker . isAuthorized ( context , profiles , "noNe" , null ) )
assertThat ( labels , equalTo ( Arrays . asList ( "2013/03/12 01:30:20" , "01:30:40" , "01:30:50" ) ) )
assertEquals ( 1 , result . size ( ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertEquals ( input , output )
assertEquals ( NUM_WRITERS * ENTRIES , countHLog ( logfile , fs , conf ) )
assertTriggered ( result , fieldValueAlertCondition )
assertResultSet ( res )
assertEquals ( "Stylesheet contains invalid ID" , 1 , ss . size ( ) )
assertEquals ( expecting , result )
Assert . assertNull ( dummy )
assertEquals ( 0 , maleFriends . size ( ) )
assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertNotNull ( polygon )
assertThat ( testOutcome . getUserStory ( ) . getUserStory ( ) . getUserStoryId ( ) , is ( MyUserStory . class . getCanonicalName ( ) ) )
assertEquals ( u . getSubusers ( ) . get ( 0 ) , subUsers . get ( 0 ) )
assertThat ( ( Integer ) cache . ms . get ( "aaa" ) , is ( 1 ) )
assertEquals ( 1 , rules )
Assert . assertEquals ( count , 59 )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertEquals ( 280 , executeTestMethod ( test , Integer . class , null , 280 ) . intValue ( ) )
assertEquals ( "The issue id list should be unique" , uniqueIssueIds , dao . ensureUniqueIssueIds ( dao . create ( new ArrayList < String > ( ) , new ArrayList < String > ( ) ) ) )
assertNotEquals ( optimize1 , optimize2 )
assertEquals ( 1 , sql . insertInto ( table ( "post" ) ) . columns ( field ( "id" ) , field ( "title" ) ) . values ( 1L , "High-Performance Java Persistence" ) . execute ( ) )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertions . isNull ( )
Assert . assertEquals ( 0 , buffer . length ( ) )
assertArrayEquals ( y , x )
assertEquals ( "hello world" , new String ( signatureValue , Constants . CHARSET ) )
assertEquals ( expected , dataStr )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoISSQNTotal ( ) . toString ( ) )
Assert . assertEquals ( resultEntity , entity2 )
assertEquals ( result , log ( 1 ) , 0.0 )
assertThat ( jmc . convert ( makeEvent ( quotedMsg , NO_ARGS ) ) , is ( quotedMsg ) )
assertEquals ( new Integer ( 1920 ) , a [ 0 ] )
Assert . assertEquals ( value , got . getpBigDecimal ( ) )
assertEquals ( "<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>" , doc . body ( ) . html ( ) )
assertEquals ( message , recoveryECKey . getPublicKeyAsHex ( ) )
assertEquals ( null , result )
Assert . assertEquals ( "ActionInvoker.ERROR_0012 - Could not invoke action \\"foo\\" locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String" + NL + "} java.util.HashMap" + NL , messages . getRunningInBgLocally ( "foo" , params ) )
Assert . assertNull ( retrieved )
assertThat ( sampleTestClass . driver , is ( not ( nullValue ( ) ) ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertThat ( route , canHandle ( GetAnnotatedController . class , "withRelativePath" ) )
assertSame ( t . toLocalTime ( ) , LocalTime . NOON )
assertAnnotations ( 1 , CommsIdentifier . class , new TestCommsIdentifier ( 0 , "phone" , "tel" , "abuse" , "abuse" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone" , "phone
Assert . assertEquals ( "<string>not strict</string>" , serializedData )
assertEquals ( "a,,b" + recordSeparator , sw . toString ( ) )
Assert . assertTrue ( result . isValid ( ) )
assertTrue ( rec_cnt == 3 )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
Assert . assertNotNull ( hd )
Assert . assertEquals ( 4 , cpu . getRegister ( ) , 0 )
assertThat ( peek . getCumulativeAverageLatencyInMs ( two ) , is ( 105d + 34d + 97d ) )
assertEquals ( "Select with union statements" , expectedWithUnionStatements ( ) , result )
assertEquals ( expected , roundTrip . getResults ( ) )
Assert . assertEquals ( expectedNames , names )
Assert . assertEquals ( 0 , violations . size ( ) )
assertEquals ( expectedResult , mapping )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "{" + "\\"@odata.context\\":\\"../$metadata#ESCollAllPrim(1)/CollPropertyDecimal\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":[\\"12\\",\\"-2\\",\\"1234\\"]}" , resultString )
assertTrue ( SUCCESS_MSG , monitor . setAsync ( key , value ) . get ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertThat ( entity . awakeFromInsertionCount ( ) , is ( 1 ) )
assertNotNull ( m )
assertThrows ( VolumeChooserException . class , ( ) -> choose ( ) )
assertTrue ( result . getIndexUpdates ( ) > 0 )
assertEquals ( "6kp/8/8/8/8/8/8/8/8/8/8/8" , classUnderTest . getAsFenString ( ) )
assertFalse ( victim . accept ( request ) )
assertEquals ( sb . toString ( ) , qb . prepareStatementString ( ) )
assertEquals ( "calendarColumn at absolute column " + column , calendarColumn , dayGridPosition . x )
assertEquals ( Integer . valueOf ( 1 ) , parseResults . get ( FILE_PATH ) . getHitsByLine ( ) . get ( NO_COVERAGE_LINE ) )
assertEquals ( "Wrong conversion result" , p . pattern ( ) , PropertyConverter . toPattern ( ".+" ) . pattern ( ) )
assertTrue ( uri . endsWith ( "D.ttl" ) )
assertThatSelectedValueIs ( "a20" )
assertEquals ( false , compositeController . execute ( operation ) )
assertEquals ( config . getWriteTimeoutInMillis ( ) , acceptedConfig . getWriteTimeoutInMillis ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertFalse ( "Expected ComplexSchema integer validation failure did not succeed" , schema . validate ( integerEntity ) )
assertTrue ( activationFunction . getType ( ) == networkActivationFunction . getType ( ) )
Assert . assertEquals ( 3 , activityNodes . size ( ) )
assertEquals ( t1 , t2 )
assertThat ( log , is ( Files . readAllLines ( Paths . get ( "src/test/resources/data/expected/AuditLogSqlFilter" , "testExecuteQueryFilter.txt" ) , StandardCharsets . UTF_8 ) ) )
assertEquals ( key . getDefaultValue ( ) , impl . getString ( key ) )
assertTrue ( logging . getLog ( ) . contains ( "RuleSet description is missing." ) )
assertEquals ( FORWARD_PATH , springSecurityRequest . getRequestURI ( ) )
Assert . assertNull ( job )
assertEquals ( 0.1f , mutNum . floatValue ( ) , 0.01f )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . fail ( "Should have thrown an exception" )
assertThat ( pickupTruck , hasProperty ( "model" , equalTo ( "Ram" ) ) )
assertEquals ( true , options . verbose ( ) )
Assert . assertEquals ( IsolationLevels . READ_COMMITTED , connection . getIsolationLevel ( ) )
assertMapping ( node , 0 , 4 , 0 , 0 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
arrays . assertContains ( description , actual , false , null )
Assert . assertSame ( InetAddress . getLocalHost ( ) , NetworkUtils . OK_HOST )
assertEquals ( new SchemaAndValue ( SchemaBuilder . struct ( ) . build ( ) , null ) , schemaAndValue )
assertNotNull ( "Returned input stream is null" , is )
Assert . assertEquals ( "moduleA" , foundModule )
assertThat ( result , is ( not ( nullValue ( ) ) ) )
assertEquals ( TARGET + DOCNAME , docName ( ) )
assertTrue ( true )
assertThat ( unlocked . getSuperClass ( ) , is ( XRayInterface . class ) )
Assert . assertSame ( MissingNode . getInstance ( ) , result )
assertMethodCall ( "clinicRepo.getString(firstNameParameter, lastNameParameter)" , "getString(firstName, lastName)" , JavaType . STRING_METHOD , firstNameParameter , lastNameParameter )
assertNotNull ( in )
assertEquals ( buf . toString ( ) , "EXISTING" )
assertEquals ( f , d . format ( DateTimeFormatter . ofPattern ( "yyyy-MM-dd HH:mm:ss.SSS" ) ) )
assertTrue ( "Expected:\\n" + new String ( expected_res ) + ". \\nGot:\\n" + transRes , StreamUtils . compareCharStreams ( new ByteArrayInputStream ( expected_res ) , new ByteArrayInputStream ( transRes . getBytes ( ) ) ) )
assertNull ( result )
assertEquals ( "string" , shortForm )
assertTrue ( violated )
Assert . assertEquals ( constructedTag , new String ( bytes ) )
assertTokens ( integer ( 1 ) , new CommentToken ( "#" , " + 2 # + 3" ) )
assertEquals ( "clone=true" , getLastRequestQuery ( ) )
assertTrue ( matcher . find ( ) )
context . assertTrue ( config . succeeded ( ) )
Assert . assertEquals ( expResult , result )
JSONAssert . assertNotEquals ( "Message" , "{id:1234}" , actual , false )
validator . verifyTextInLog ( "loaded class java.util.List<String> messages" ) . verifyTextInLog ( "loaded class javax.transaction.TransactionManager" ) . verifyTextInLog ( "loaded class javax.transaction.InvalidTransactionException" ) . assertThatLogLine ( is ( "java.specification.version=" + JVM_SPEC_VERSION ) , greaterThanOrEqualTo ( 1 ) )
assertEquals ( "joe" , StaticUserWebFilter . getUsernameFromConf ( conf ) )
assertEquals ( "SELECT A.alert_id FROM (FSK_ALERT AS A MAKEDEP INNER JOIN Core.FSC_PARTY_DIM AS C ON A.primary_entity_key = C.PARTY_KEY) " + "LEFT OUTER JOIN FSK_SCENARIO AS S ON A.scenario_id = S.scenario_id " , predicate . toString ( ) )
assertEquals ( 123L , b . getId ( ) )
assertEquals ( "Super" , occs . getScope ( ) . getEnclosingScope ( ClassScope . class ) . getClassName ( ) )
assertThat ( getServers ( ) , hasItem ( "ms1" ) )
assertEquals ( hiveConf . getBoolean ( HiveConf . KEY_INTERNAL_KEY_PREFIX + HiveConf . KEY_INTERNAL_KEY_PREFIX + "fed1" ) , true )
assertEquals ( 0 , executions . get ( ) )
assertEquals ( 0 , gets . getCount ( ) )
assertEquals ( 2.71f , array2 . getFloat ( 0 ) , 0.01 )
assertEquals ( VisitStatus . BYPASS , visit ( text ) )
assertThat ( replication . getEventId ( ) , is ( EVENT_ID ) )
assertEquals ( "queryParam" , encodeQueryParam ( o ) )
Assert . assertEquals ( 2 , reactorHandlerRegistry . getEntrypoints ( ) . size ( ) )
Assert . assertNotNull ( "null data object" , dataTransferOperationsAO )
Assert . assertEquals ( "what does a wolf eat" , this . realiser . realise ( p ) . getRealisation ( ) )
assertEquals ( "b 34\\n" , found )
Assert . assertEquals ( expected , BitBufferHelper . toNumber ( array , i ) )
assertEquals ( prefix + "#" , Prefixes . getURI ( uri ) )
assertEquals ( "hello" , res . getOutput ( ) . get ( "hello" ) )
assertEquals ( 160 , rrs . size ( ) )
assertEquals ( 32 , program . getMemSize ( ) )
assertEquals ( origin , resourceEditProperty . getOrigin ( ) )
assertEquals ( 0 , actual . size ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( - 2147483648 ) )
assertEquals ( "Hello, foo Earthright 3" , view . getContent ( ) )
Assert . assertEquals ( "Fail count record of room" , i , cr )
Assert . assertTrue ( false )
assertThat ( target . getConvPortId ( nwId , nodeId , portId ) , is ( "port01" ) )
assertEquals ( 1 , res )
assertEquals ( "A" , reqtPayload . get ( "A" ) . getA ( ) )
assertEquals ( 1000.0 , testResult , 0.0 )
result . assertIsSatisfied ( )
assertThat ( commands . poll ( ) , is ( empty ( ) ) )
assertThat ( issue . getTitle ( ) , is ( title ) )
assertEquals ( z1 , z2 )
assertEquals ( 1 , v . size ( ) )
assertTrue ( Arrays . equals ( pktSerialized , actual ) )
Assert . assertEquals ( "3.10" , retornoConsultaCadastro . getVersao ( ) )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 0 ) ) )
Assert . assertTrue ( true )
assertNotNull ( tiposBecas . getId ( ) )
Assert . assertEquals ( driver ( ) . manage ( ) . getCookies ( ) . get ( 0 ) . url ( ) , "frame" )
Assert . assertTrue ( impl . canCachedResponseBeUsed ( host , request , entry , now ) )
assertEquals ( "Hello world!" , inputField . getText ( ) )
assertTrue ( c1 instanceof PublicCloneable )
assertEquals ( jq ( ".zscell" ) . get ( 0 ) , "CopyFocusMark" )
assertNotNull ( service )
Helpers . assertJson ( jsonElement . toString ( ) , expectedJson )
Assert . fail ( "Exception expected." )
TestUtil . assertFuzzyDoesNotContain ( "<option value=\\"1\\">Autocomplete</option>" , session . getHtmlToDisplay ( ) )
assertFalse ( b . isOpen ( ) )
assertEquals ( "update EMPLOYEE\\n" + "set ID = (select emp2.ID\\n" + "from EMPLOYEE emp2\\n" + "where emp2.SUPERIOR_ID is not null)" , sql . getSQL ( ) )
assertTrue ( ex . getMessage ( ) . equals ( "Test dee exception 2" ) )
Assert . assertEquals ( "Stan" , server . getManagedBeanValue ( "#{input_foo_text}" ) )
assertEquals ( 1000 , executor . getMaxTotalMemorySize ( ) )
assertThat ( ruleManager . listGlobals ( ) . get ( "bla" ) , is ( "java.util.Random" ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , jdbcFeedSource . getFeed ( getFeedRequest ) . getResponseStatus ( ) )
assertEquals ( 2 , bs . capacity ( ) )
assertEquals ( 10L , read )
assertEquals ( expectedTransportCosts + expectedActivityCosts , iCosts , 0.01 )
assertTrue ( "pool size should be DEFAULT_MAX_ACTIVE, despite the wrong configuration" , poolConfig . getMaxActive ( ) == PoolConfiguration . DEFAULT_MAX_ACTIVE )
assertMultilinesEquals ( "Number of values:        6     5      4\\n" + "Minimum value:
assertEquals ( false , passedSessionWaitCall . await ( 2 , TimeUnit . SECONDS ) )
assertThat ( "Expceted principal not found" , rmap , hasItem ( GID_PRINCIPAL ) )
assertTrue ( "娑���" . equals ( new String ( result . getBytes ( "GBK" ) , "UTF-8" ) ) )
assertTokenStreamContents ( tokenizer , stringArray ( "example.com" ) )
Assert . assertSame ( o , ts . create ( o ) )
assertEquals ( "hello" , op . get ( "expression" ) . asString ( ) )
assertEquals ( "Recycle" , policy )
Assert . assertEquals ( 43 , map . size ( ) )
Assert . assertNull ( caixa )
assertEquals ( expecting , result )
Assert . assertEquals ( "Wrong  Port No" , new PortNumber ( 0x00010203L ) , deserializedMessage . getPort ( ) )
context . assertIsSatisfied ( )
assertUnderflow ( ( long ) x * ( long ) y , result )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertThat ( appMetadataResource . getFilename ( ) , is ( "foo-source" ) )
assertThat ( score , is ( 3900 ) )
assertEquals ( new Year ( 2000 ) , editor . getValue ( ) )
assertEquals ( "select survey.NAME from SURVEY survey order by survey.NAME asc where survey.NAME.ROW_NUM > 5" , toString ( query ) )
assertEquals ( new File ( dir , "foo" + ext ) , fileForURI ( uri , "/" , "/rest/foo" , dir , ext ) )
Assert . assertEquals ( codigoDeBarras , produto . getCodigoDeBarras ( ) )
assertEquals ( sampledDataSourceList , dataSourceChartGroup )
assertEquals ( "http://localhost:8080/test" , builder . build ( ) . toString ( ) )
Assert . assertEquals ( "brennus.asm.TestGoto$TestClass" , existing ( FSA . class ) . getName ( ) )
assertEquals ( 1 , hits . totalHits )
assertNull ( realm . getPassword ( ) )
assertEquals ( 1 , tasks . size ( ) )
DataMockery . assertREQMODWithGetRequestNoBodyResponse ( response )
assertEquals ( "Wikibot/2.0.2.CFNetwork/609.1.4.Darwin/13.0.0" , output . get ( id ) )
assertEquals ( 210 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertThat ( encoded , stringContainsInOrder ( "{" , "\\"resourceType\\": \\"Patient\\"," , "\\"contained\\": [" , "{" , "\\"resourceType\\": \\"Condition\\"," , "\\"id\\": \\"1\\"" , "}" , "]," , "\\"extension\\": [" , "{" , "\\"url\\": \\"test\\"," , "\\"valueReference\\": {" , "\\"reference\\": \\"#1\\"" , "}" , "}" , "]," , "\\"birthDate\\": \\"2016-04-05\\"" , "}" ) )
assertThat ( iter . next ( ) , is ( "11" ) )
assertEquals ( err , result )
assertEquals ( expectedLogMessage , actualLogMessage )
assertNull ( resolver . resolve ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ,
assertEquals ( 7 , count )
Assert . assertEquals ( demoService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) , helloService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) )
assertEquals ( TEST_MSG , actual )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertThat ( or . isSatisfied ( ) , is ( true ) )
Assert . assertNotNull ( connectionManager . createConnectionDetails ( TestConnectionProvider . SCHEME ) )
assertThat ( getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Promotion Media].[All Media], [Promotion Media].[All Media], [Promotion Media].[All Media], " + "[Promotion Media].[All Media], [Promotion Media].[Product Attachment], " + "[Promotion Media].[Radio], [Promotion Media].[Street Handout], [Promotion Media].[Sunday Paper], " + "[Promotion Media].[Sunday Paper, Radio], [Promotion Media].[Sunday Paper, Radio, TV], " + "[Promotion Media].[TV]}) ON ROWS FROM [Sales]" ) ) )
assertEquals ( user , serializedUser )
assertLines ( lines )
assertThat ( disque . bgrewriteaof ( ) , containsString ( msg ) )
Assert . assertEquals ( 0 , dfsadmin . run ( args1 ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( textFileSaver )
assertTrue ( errors . hasFieldErrors ( "name" ) )
assertEquals ( "Number of home branches is wrong" , countHomeStates , getStateFlowGraph ( ) . getAllStates ( ) . size ( ) )
assertEquals ( "token 1\\n" , found )
Assert . assertEquals ( "IN([CAT.COL];\\"value\\";\\"2\\")" , formatted )
assertEquals ( GrpcUtil . DEFAULT_MAX_HEADER_LIST_SIZE , codeOptions . size ( ) )
assertTrue ( e instanceof SocketTimeoutException )
assertEquals ( expected , resultVal )
assertEquals ( date , fileTime . getTime ( ) )
assertEquals ( entity , response . readEntity ( String . class ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Receive>" + "Hey no tags!" + "</Receive>" , elem . toXml ( ) )
Assert . assertEquals ( "Incorrect label set by constructor" , lbl , item . getLabel ( ) )
Assert . assertEquals ( 2 , routes . size ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertThat ( result , is ( defaultPlugins ) )
assertThat ( record . isPresent ( ) , is ( true ) )
assertEquals ( p , fromDenseRecursiveForm ( recForm , 3 , MonomialOrder . DEFAULT ) )
assertEquals ( 2 , sol . getUnassignedJobs ( ) . size ( ) )
assertEquals ( "\\"date1\\"" , processor . generate ( object ) )
Assert . assertEquals ( expected_1 , v )
assertEquals ( 10 * Constants . KB , mConfiguration . getBytesp ( PropertyKey . WEB_THREADS ) )
assertEquals ( "Test" , profile . getFirstName ( ) )
assertNull ( ruleCat )
assertEquals ( expected , result )
assertEquals ( 1 , cancelledRequests . size ( ) )
assertEquals ( expected , actual )
assertEquals ( 2 , posts . size ( ) )
assertOut ( "function foo(bar:String, baz:int = null):int {\\n\\treturn -1;\\n}" )
assertThat ( webapp . getBuildImage ( ) , is ( notNullValue ( ) ) )
assertEquals ( 4 , results . size ( ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertThat ( query . count ( ) , is ( 1L ) )
assertEquals ( "XmlTreeCode should be equal to the generated XML" , xml , "XmlTreeCode should be equal to the generated XML" )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
assertEquals ( "IdentifierLabel" , resource . getIdentifier ( ) . get ( 0 ) . getValue ( ) )
assertThat ( networkId , is ( "NewNetworkID" ) )
assertEquals ( "wrong value" , intVal , testVal . toString ( ) )
assertTrue ( inactivityTimeAfterRefresh > inactivityTime )
Assert . assertEquals ( expected , actuals )
assertMockEndpointsSatisfied ( )
Assert . fail ( "Should have thrown an exception" )
assertEquals ( ls1 , ls2 )
Assert . assertEquals ( 1 , testListener . getId ( ) )
assertSame ( secondTry , st )
Assert . assertNull ( "School category should be null" , result )
assertions . doesNotContain ( new short [ ] { 6 , 8 } )
assertEquals ( 123 , this . model . getPosition ( ) )
assertEquals ( expectedQuery , actualQuery )
assertGreater ( "Grid should scroll vertically while editing in unbuffered mode" , getGridVerticalScrollPos ( ) , originalScrollPos )
assertEquals ( exp , res )
assertEquals ( SecurityGroupEntityMgr . findById ( this . em , NEW_SECURITY_GROUP_SAME_SFC_BINDED_UPDATE_ELEMENT_ID . getId ( ) ) . getNetworkElementId ( ) , NEW_SECURITY_GROUP_SAME_SFC_BINDED_UPDATE_ELEMENT_ID . getNetworkElementId ( ) )
assertEquals ( 25.0 , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
UnitTestUtils . assertEquals ( "m3*m4=m5" , m3 . multiply ( m4 ) , m5 , entryTolerance )
FeedChecker . assertQ ( "The XML error is not correct" , result , "//error[.='" + errorMessage + "']" )
Assert . assertEquals ( 1 , response . getTotalHits ( ) . value )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff28_" ) )
Assert . assertTrue ( out . contains ( "car=\\"1999\\"" ) )
assertTrue ( convertedValue instanceof Integer )
assertEquals ( " ::  took 0 ms." , result )
assertEquals ( "file://dev/null/foo.jar" , mods . get ( 0 ) . getUrl ( ) )
assertEquals ( "Wrong timestamp" , date , timestamp )
assertEquals ( "ip" , extraInfo . getString ( "username" ) )
Assert . assertArrayEquals ( new long [ ] { 0 } , filter . getBits ( ) )
assertEquals ( "Testing" , message )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "The output has to be equal to the input" , "java.version > " + ctx . getOutputVersion ( ) , output )
assertEquals ( true , classUnderTest . getInitSessionTimezone ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertNotNull ( "null execOut" , execOut )
assertTrue ( sql , sql . startsWith ( "SELECT #result('t0.ESTIMATED_PRICE' 'java.math.BigDecimal' 'sc0' 'sc0' 3), " + "#result('t1.ARTIST_NAME' 'java.lang.String' 'sc1' 'sc1' 1) FROM" ) )
assertEquals ( "Can't come back" , ShadowToast . getTextOfLatestToast ( ) )
Assert . assertEquals ( namespace , event . getNamespaces ( ) . next ( ) )
assertEquals ( fileMd5 , FileUtils . encryptMD5File ( fileMd5 ) )
assertEquals ( "AAA" , strList )
assertEquals ( unused , h . getUnused ( ) )
assertTrue ( measures . toString ( ) , measures . isEmpty ( ) )
assertEquals ( "john" , relationshipManager . get ( new GroupMembership ( john , employees ) . getName ( ) ) . getName ( ) )
assertParsingIsCorrect ( nativeQuery , expectedCacheName )
Assert . assertEquals ( "Error downloading file" , file . length ( ) , bytes )
Assert . assertEquals ( "This is a comment" , newObservation . getComment ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
Assert . assertEquals ( text , fileEntry . getLabel ( ) + " could not be tagged because the file has been deleted or is no longer visible." , text )
Assert . assertEquals ( "%20" , urlEncodedValueReturned )
assertTrue ( connectLatch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( "Wrong name" , "common" , resourceType . getName ( ) )
assertEquals ( expectedScript , observedScript )
assertThat ( designDocs . size ( ) , is ( 1 ) )
assertEquals ( 50 , p . getAge ( ) )
assertThat ( results . get ( 0 ) . getTestSteps ( ) . size ( ) , is ( 1 ) )
Assert . assertEquals ( AuthenticationToken . ANONYMOUS , token )
assertEquals ( ApiStatus . SUCCESS , response . getMeta ( ) . getStatus ( ) )
paths . assertHasParentRaw ( info , actual , expectedParent )
assertEquals ( Response . Status . UNAUTHORIZED . getStatusCode ( ) , response . getStatus ( ) )
Assert . assertEquals ( CLOUD_SDK_PATH , sdk . getPath ( ) )
assertEquals ( 200 , responseExtractor . getStatusCode ( ) )
assertFalse ( isServiceReady )
assertGenres ( results )
Assert . assertEquals ( 0 , bucket . expire ( "someValue" ) )
assertDefaults ( targetProduct , true )
assertTrue ( "Reader Should Be Ready After Setting ByteBuffer" , _utf8ByteBufferReader . ready ( ) )
assertTrue ( ! orderKey . prefixOf ( key ) )
assertEquals ( "repro200207207 test" , diffsToString ( Diff . diffText ( a , b , false , false , false ) ) , "1.1.0.0*1.1.2.2*0.2.7.7*1.1.11.13*0.1.13.15*" )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertFalse ( root . hasListener ( cancellationListener , MoreExecutors . directExecutor ( ) ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertEquals ( "ID = userId" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( 0 , warningHeaders . length )
assertNull ( res )
assertEquals ( pattern , patterns . getPattern ( entityId ) )
Assert . assertEquals ( expectedLanguage , actualLanguage )
assertEquals ( expected , actual )
assertThat ( this . state . getSortColumn ( ) , is ( equalTo ( sortColumn ) ) )
Assert . assertEquals ( 2 , count [ 0 ] )
assertEquals ( "new1" , newTags . getId ( ) )
assertTrue ( ! result )
assertEquals ( Hive2DatabaseMeta . TRUNCATE_TABLE + testTableName , hive2DatabaseMeta . getTruncateTableStatement ( testTableName ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<features xmlns=\\"http://karaf.apache.org/xmlns/features/v1.0.0\\" name=\\"test-dependencies\\">\\n" + "<bundle>mvn:mygroup/myArtifactId/1.0</bundle>\\n" + "</features>\\n" , wr . toString ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertTrue ( w . getStatus ( ) == HttpServletResponse . SC_PROXY_AUTHENTICATION_REQUIRED )
assertEquals ( getDate ( "2013-03-27T23:18:40Z" ) , jstOi . getPrimitiveJavaObject ( result . get ( "five" ) ) )
assertThat ( route , canHandle ( PathAnnotatedController . class , "withRelativePath" ) )
assertThat ( matcher . matches ( response ) , is ( true ) )
assertArrayEquals ( new String [ ] { "\\"Delimited Field Name\\"" , "Default_Case" } , cols )
assertEquals ( false , OptimizerUtils . isIndexingRangeBlockAligned ( 2501 , 4500 , 1 , 1736 , BRLEN , BCLEN ) )
Assert . assertTrue ( authorizableHierarchy . toString ( ) , authzProvider . hasAccess ( user1 , authorizableHierarchy , actions , ActiveRoleSet . ALL ) )
assertEquals ( "\\"x\\".\\"dup\\"" , t . getNameInSource ( ) )
assertTrue ( req . getHeaders ( ) . isEmpty ( ) )
assertEquals ( expected , cls )
assertThat ( token . getType ( ) , is ( PCRELexer . ResetStart ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( "The computed solution for Manger attack must be equal to the original message" , message , solution . toByteArray ( ) )
assertThat ( testExecutor . invokeTest ( 1000L , ImmutableMultimap . of ( "force" , "whatever" ) ) , is ( false ) )
assertEquals ( a . hashCode ( ) , b . hashCode ( ) )
assertNotNull ( defaultRule . defaultQueueName )
assertEquals ( 2 , links . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
FunctionTestUtil . assertResult ( stringFunction . invoke ( offsetTime ) , "time( \\"" + TimeFunction . FEEL_TIME . format ( offsetTime ) + "\\" )" )
assertEquals ( "Unexpected widgetset configuration option value" , widgetset , config . getWidgetSet ( ) )
assertEquals ( "<foo/bar.js>\\n" + "  <bar/>\\n" + "</foo/bar>" , out )
assertEquals ( expResult , stringBuilder . toString ( ) )
Assert . assertEquals ( "{\\"alice\\":{\\"@xmlns:p\\":\\"http://test\\",\\"p:bob\\":[\\"charlie\\"]}}" , result . toString ( ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertTrue ( "The getChanges() method reported a change" , hasChange )
assertEquals ( expected , actual )
assertEquals ( "Hello world!" , testObj . getName ( ) )
Assert . assertTrue ( validator . isValid ( 9 , context ) )
assertTrue ( lineIntersects ( new Point2D [ ] { new Point2D ( 1 , 1 ) , new Point2D ( 2 , 2 ) } , new Point2D ( 1 , 1 ) , new Point2D ( 2 , 2 ) } , new Point2D ( 1 , 1 ) , new Point2D ( 2 , 2 ) ) )
assertThat ( element . getText ( ) , is ( "value with appended text" ) )
Assert . assertEquals ( Integer . MAX_VALUE , bytes . getInt ( Integer . MIN_VALUE ) )
assertNull ( daoService . get ( userWrapper , "PKEY" , "Config" , StatisticRefEnum . CREATED_ISSUE_COUNT ) )
assertThat ( schedCapture . getValue ( ) , is ( genericScheduler ) )
Assert . assertEquals ( 0 , distance . compute ( a , a ) , 0d )
assertEquals ( expectedUser , result )
assertSame ( map0 , mdcAdapter . getPropertyMap ( "k0" ) )
assertTrue ( StoreParams . sameValues ( p , pDft ) )
assertEquals ( 1 , fixture . mark ( ) )
Assert . assertTrue ( parseInvoked )
Assert . assertEquals ( nodeToKey ( queryA ) , nodeToKey ( queryB ) )
assertThat ( result , equalTo ( "hey, 1, hey, ho, hum, h盲pp, 2" ) )
Assert . assertEquals ( new URI ( "http://stuff:80/" ) , result )
_PmAssert . assertVisible ( pm . pmBeanImpl )
assertThat ( axioms , hasItem ( axiom ) )
assertThat ( intOrString1 , not ( equalTo ( intOrString2 ) ) )
Assert . assertEquals ( "Incorrect PersonMergeLog found byWinner" , lst . get ( 0 ) . getUuid ( ) , personMergeLog26 . getUuid ( ) )
assertTrue ( "The root directory is not accessible" , upDir . endsWith ( "/" ) )
Assert . assertEquals ( expectedLanguage , actualLanguage )
Assert . assertEquals ( 0 , results . size ( ) )
Assert . assertEquals ( "foo" , comp . getHtmlClass ( ) )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "05-FEB-2013" )
assertTrue ( basePermission . isAllowed ( auth , Sets . newHashSet ( permittable1 ) ) )
assertFalse ( validator . isValid ( new MyCustomStringImpl ( "79927398714" ) , null ) )
assertSame ( secToken , mapper . writeValueAsString ( secToken ) )
assertEquals ( expected , uri . getRawPath ( ) )
assertions . doesNotContain ( value , index )
assertMappedFieldValueIsEmptyCollection ( )
assertEquals ( v8 , v8TypedArray . getV8Type ( ) )
assertTrue ( json , jsonb . matches ( "\\\\{\\\\s*\\"third\\"\\\\s*:\\\\s*\\"Fourth\\"\\\\s*:\\\\s*\\"fifth\\"\\\\s*:\\\\s*\\"Six\\"\\\\s*:\\\\s*\\"Seven\\"\\\\s*:\\\\s*\\"Eight\\"\\\\s*:\\\\s*\\"Nine\\"\\\\s*:\\\\s*\\"10\\"\\\\s*:\\\\s*\\"11\\"\\\\s*:\\\\s*\\"12\\"\\\\s*:\\\\s*\\"13\\"\\\\s*:\\\\s*\\"14\\"\\\\s*:\\\\s*\\"15\\"\\\\s*:\\\\s*\\"16\\"\\\\s*:\\\\s*\\"17\\"\\\\s*:\\\\s*\\"18\\"\\\\s*:\\\\s*\\"19\\"\\\\s*:\\\\s*\\"20\\"\\\\s*:\\\\s*\\"21\\"\\\\s*:\\\\s*\\"22\\"\\\\s*:\\\\s*\\"23\\"\\\\s*:\\\\s*\\"24\\"\\\\s*:\\\\s*\\"25\\"\\\\s*:\\\\s*\\"26\\"\\\\s*:\\\\s*\\"27\\"\\\\s*:\\\\s*\\"28\\"\\\\s*:\\\\s*\\"29\\"\\\\s*:\\\\s*\\"30\\"\\\\s*:\\\\s*\\"31\\"\\\\s*:\\\\s*\\"32\\"\\\\s*:\\\\s*\\"33\\"\\\\s*:\\\\s*\\"34\\"\\\\s*:\\\\s*\\"35\\"\\\\s*:\\\\s*\\"36\\"\\\\s*:\\\\s*\\"37\\"\\\\s*:\\\\s*\\"38\\"\\\\s*:\\\\s*\\"39\\"\\\\s*:\\\\s*\\"40\\"\\\\s*:\\\\s*\\"41\\"\\\\s*:\\\\s*\\"42\\"\\\\s*:\\\\s*\\"43\\"\\\\s*:\\\\s*\\"44\\\\s*\\"45\\\\s*:\\\\s*\\"46\\\\s*\\"47\\\\s*\\"48\\\\s*\\"49\\\\s*\\"50\\\\s*:
Assert . assertTrue ( Files . size ( tmfile . toPath ( ) ) > 0 )
assertThat ( e . getMessage ( ) , containsString ( expectedExceptionMessage ) )
assertEquals ( exp , x )
assertEquals ( expecetedTableName , builtTableName )
assertEquals ( DATA , storage . loadPerson ( ID ) )
assertEquals ( new ArrayList < Category > ( ) , mockResult . included ( "categories" ) )
assertEquals ( fullName , metric . getName ( ) )
assertEquals ( 18 , instance . evaluations )
assertEquals ( "Select with where not clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertFalse ( isElementPresent ( By . className ( "v-slot-valid" ) ) )
assertions . isNotEqualTo ( actual )
Assert . assertEquals ( record . get ( "name" ) . toString ( ) , decoded . get ( "name" ) . toString ( ) )
assertThat ( capturePackage . getValue ( ) . name ( ) , is ( "com.example.package" ) )
assertEquals ( expected , actual )
assertEquals ( "Wrong number of infos in " + files , files , infos . size ( ) )
assertSame ( this . joystick , joystick )
Assert . assertEquals ( 42f , converter . convert ( 42f ) , 0.0 )
Assert . assertEquals ( "s3n://123:456@my-bucket/some/path" , HiveAuthzBindingHookBase . parseURI ( "/some/path" ) . getName ( ) )
Assert . assertEquals ( assinatura , eventoInutilizacao . getAssinatura ( ) )
Assert . assertEquals ( expectedResult , result )
Assertions . assertEquals ( Collections . singletonMap ( "color" , "red" ) , response )
assertHandCount ( playerA , 1 )
assertEquals ( NASTY , NASTY , NASTY , actual )
assertThat ( PropertiesUtil . createPrefixMap ( properties , "abc" ) , is ( answer ) )
assertNull ( datastore )
assertThat ( value , equalTo ( "DummyName" ) )
assertTarget ( "[['a']]" )
assertCompletions ( "spring:\\n" + "  application:\\n" + "    name: my-app\\n" + "spring:\\n" + "  activemq:\\n" + "    broker-u<*>" , "spring:\\n" + "  application:\\n" + "    name: my-app\\n" + "spring:\\n" + "  activemq:\\n" + "    broker-url: <*>" )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertThat ( resolver . resolve ( CamelCaseStory . class ) , equalTo ( "org/jbehave/core/io/CamelCaseStory.story" ) )
assertEquals ( txtFile . getAbsoluteFile ( ) , source . getFile ( ) )
assertEquals ( dataflow , edit . getSubject ( ) )
assertEquals ( "ABCD\\n" , b . asString ( ) )
assertTrue ( jee . evaluate ( event ) )
assertTrue ( "Application still exists." , applicationDirectory . exists ( testAppId ) )
assertThat ( aDouble , equalTo ( bDouble ) )
assertProcessInstanceCompleted ( processInstance )
assertThat ( new File ( current , "a.txt" ) , is ( file ( ) ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( "The entity text is correctly transported" , entityText , EntityUtils . toString ( response . getEntity ( ) ) )
assertEquals ( "Rate[0.0567]" , r1 . get ( ) . toString ( ) )
assertThat ( "unencoded setter has return type void" , setter . getReturnType ( ) , equalToType ( Void . TYPE ) )
assertEquals ( ImmutableMap . of ( CallOptionsUtil . REQUEST_PARAMS_HEADER_KEY , encodedRequestParams ) , headers )
assertThat ( aggregateMapper . getCapped ( ) . getMax ( ) , is ( 50 ) )
assertNull ( field . getColourExpression ( ) )
testHelper . assertExecutionTreeAfterMigration ( )
assertThat ( event , is ( expected ) )
assertThat ( s , is ( "a value greater than <1> or a value less than <5>" ) )
Assert . assertEquals ( "A" , name )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( originalSize - 1 , getNumberOfAllVisitsIncludingVoided ( ) )
Assert . assertArrayEquals ( sortedValues , values )
arrays . assertContains ( description , null , array ( "Yoda" ) )
assertTrue ( sc . invokeDestinationCalled ( ) )
assertEquals ( 7.76573e-2 , p , 1e-6 )
assertEquals ( AuthorizationResult . ACCESS_GRANTED , permission . getResult ( ) )
Assert . assertEquals ( resolvedString , valuesMap . get ( "animal" ) )
assertFalse ( result )
Assert . assertEquals ( expected , actual )
assertTrue ( str . contains ( format . format ( date ) ) )
assertThat ( t , is ( notNullValue ( ) ) )
BrowserAgentTestUtils . assertBrowserAgent ( CHROME_AGENT_MATCHER )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertEquals ( "Expected response not seen." , "ONE" , response )
assertEquals ( "true" , testedString )
assertNotNull ( oracleEngine )
assertEquals ( "Expected run to be OK, but it was " + runNo , runNo , memorySnapshot . getRun ( ) )
assertEquals ( "#646464" , getColorpickerValue ( ) )
assertEquals ( 1 , post . getId ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( this . family1 , this . component . resolveEntity ( FAMILY_1_ID ) )
assertTrue ( validationHelper . hasErrors ( ) )
arrays . assertContains ( description , null , array ( "Yoda" ) )
assertThat ( sut . isMatch ( real , expected ) , is ( false ) )
assertTrue ( failedAsExpected )
assertEquals ( "ABC" , result )
assertThat ( "Locations created with different paths and the same property must not be equal" , locationA1 . equals ( locationA2 ) , is ( false ) )
Assert . assertFalse ( result )
assertTrue ( true )
assertions . isNull ( )
assertEquals ( "minutia" , httpWebService . getDetailsParameter ( request ) )
assertTrue ( resources . getResources ( ) . isEmpty ( ) )
assertTrue ( "Rule Delegation Bo fetched " , ruleDelegationBos != null && ruleDelegationBos . size ( ) == 1 )
assertThat ( actual , is ( equalTo ( "/ab/C D" ) ) )
assertThat ( keyValueType . getValue ( ) , equalTo ( aString ) )
Assert . assertEquals ( "SELECT TO_DAYS('2007-10-07');" , text )
assertNotNull ( engine )
Assert . assertEquals ( query , interpretedQuery )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertThat ( context , INT , is ( RESULT_MSG + RESULT_INT ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertFalse ( value . isReplaceableBy ( 99L , 9 , ComparableComparator . INSTANCE ) )
assertEquals ( Optional . of ( s3 . getBucketInfo ( bucketName ) ) , response )
assertEquals ( "425116929" , orderId )
assertEquals ( 986083199999L , q . getLastMillisecond ( calendar ) )
assertNotNull ( testClass )
assertEquals ( tstName , ent . getCatalog ( ) )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"column 1\\",\\"nullable\\":true}]}]" , content )
assertEquals ( 42.1 , result , 0.00001 )
assertThat ( notification , containsString ( "\\"caption\\":\\"foobar\\"" ) )
assertEquals ( "/_nodes/_all/_shutdown" , action . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( "document/literal" , encodingStyle )
assertNotNull ( graph . variables ( ) . variables ( ) . supportsVariables ( ) )
assertEquals ( JobConfigHistoryConsts . ICONFILENAME , sut . getIconFileName ( ) )
assertEquals ( 'd' , ex . charAt ( s , 12 ) )
assertEquals ( qb , qa )
Assert . assertEquals ( true , errors . hasFieldErrors ( "encounterDatetime" ) )
assertThat ( hasNativeSupportForPseudo , is ( false ) )
assertEquals ( exp , TYPING_MAPPER . readValue ( json , ZoneId . class ) )
Assert . assertNotNull ( this . commandFacade . get ( key ) )
assertTrue ( e . getMessage ( ) . contains ( "Template directory not found" ) )
assertNull ( gd )
assertEquals ( friend . getTitle ( ) , stream [ 0 ] . toString ( ) )
assertThat ( MODEL . findNextTransition ( utc ) . get ( ) , is ( SPRING_1996 ) )
assertEquals ( "Failed on [" + i + "] iteration" , expected , merged )
assertThat ( jvm . shouldEnableRemoteDebugging ( ) , is ( false ) )
assertThat ( pages . getCurrentPageAt ( ApacheHomePage . class ) , is ( "http://www.apache.org" ) )
assertTrue ( "Add and get relation by type" , relation . getKeyid1 ( ) . equals ( testRelation . getKeyid1 ( ) ) )
assertEquals ( null , MavenConfigService . getLocalRepoFromConfig ( config ) )
Assert . assertEquals ( "should have added description" , irodsDataObject , actual )
assertArrayEquals ( expectedOutput1 , output1 )
assertEquals ( "Hello Tim" , ResponseBodyInterpolator . interpolate ( "Hello ^{name}" , req ) )
assertNull ( response . getHeaders ( ) . get ( "Content-Location" ) )
assertEquals ( "catch" , getValue ( ) )
Assert . assertEquals ( tokenList . size ( ) , 0 )
assertEquals ( 4.0 , distance . compute ( point1 , point2 ) , EPSILON )
assertFalse ( fs . unlink ( "foo" ) )
assertEquals ( "1,2,3" , getInorderForm ( tree ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertThat ( tracker . getAll ( ) [ firstElementOfArray ] . getTasks ( ) [ firstElementOfArray ] . getId ( ) , is ( 123L ) )
Assert . assertEquals ( expectedSlot , slot )
assertEquals ( val . apply ( m ) , m . with ( val ) )
context . assertIsSatisfied ( )
assertEquals ( value , actualValue )
Assert . assertEquals ( "No connections found" , 0 , jsonList . size ( ) )
assertEquals ( 0.7306356862792885 , r , 0.000000000001 )
assertTrue ( encodingDetector instanceof TXTPResponseEncodingDetector )
assertNotNull ( path )
assertTrue ( specification . stats ( ) . hasFailed ( ) )
assertEquals ( expected , actual )
assertEquals ( scIdentifier , result )
Assert . assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( expectedUri , uri )
assertEquals ( expResult , result )
assertEquals ( 1 , count . get ( ) )
assertTrue ( "Authentication Context should be created" , ops . exists ( TEST_AUTHENTICATION_CONTEXT_ADDRESS ) )
assertNull ( collection . getResource ( "Correct" ) )
assertEquals ( "Expected 0 results!" , 0 , good . getChildren ( ) . size ( ) )
assertTrue ( cs . isLast ( ) )
Assert . assertTrue ( redisd . isRunning ( ) )
assertTrue ( FileUtils . contentEqualsIgnoreEOL ( new File ( "src/test/resources/reference/test-normalized.dump" ) , outputFile , "UTF-8" ) )
assertE ( "�尖�尖�尖�尖��" + "�尖��  ��" + "��    ��" + "�尖��   ��" + "�尖�尖�尖�尖��" )
Assert . assertEquals ( "hello,world" , result . getName ( ) )
assertTrue ( hasResourceProvidableType )
assertEquals ( consumed , SchemaV1 . isValidResourceRelationType ( consumed ) )
Assert . assertEquals ( "Class should not be considered: " , false , new DifferenceAccumulatingHandler ( inclusionSet , exclusionSet ) . isClassConsidered ( "de/test/java/regex/codeImpl" ) )
assertEquals ( tmap , readValue )
assertEquals ( "Sidebar popup should be added to the sidebar" , "Sidebar popup" , getGridElement ( ) . findElement ( By . cssSelector ( ".v-grid-Sidebar-popup" ) ) . getText ( ) )
assertNotNull ( as )
assertEquals ( 3 , postCommentScores . size ( ) )
assertTrue ( wasEmpty . get ( ) )
assertArrayEquals ( new String [ ] { "singleton" } , treeContent )
Assert . assertTrue ( matcher instanceof UriPatternMatcher )
assertEquals ( 0 , tree . size ( ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\\"$or\\":[{\\"age\\":{\\"$ltte\\":50}}]}" )
assertTrue ( Arrays . equals ( expectedPrivs , privs ) )
assertTrue ( suspendables . contains ( method ) )
assertEquals ( 1 , searchService . search ( "Functionblock" ) . size ( ) )
assertEquals ( "kevin" , el . getAsText ( ) )
Assert . assertEquals ( 2 , secureComponents . size ( ) )
Assert . assertEquals ( 0 , analyser . getLoadRightAfterActivity ( route . getEnd ( ) , route ) . get ( 0 ) )
assertThat ( page . getTotalElements ( ) , is ( equalTo ( 2L ) ) )
assertEquals ( content , IOUtils . toString ( ungzippedStream , Charset . defaultCharset ( ) ) )
assertEquals ( "incorrect result" , result , aNumber . compareTo ( bNumber ) )
assertEquals ( constraintViolations . size ( ) , 1 )
assertEquals ( stsClient . getName ( ) , "doubleItTransportPort" )
assertThat ( classes . size ( ) , is ( 6 ) )
assertObjectEquals ( "{type:'string'}" , x . getSchema ( ) )
assertJsonEquals ( "{hello:'world',foo:'bar'}" , JsonSerializer . serialize ( map ) )
assertEquals ( 0 , violations . size ( ) )
assertStates ( "existing" , NOT_SUPPORTED , LINKED_BUT_NOT_SYNCED , EXISTING , null , null )
assertEquals ( "Black" , dto . getColors ( ) [ 0 ] )
assertArrayEquals ( expected , fixture . getServerAddresses ( ) )
assertEquals ( document , mapper . readValue ( JSON_MEDIA_INFO_LABEL , MediaInfoDocumentImpl . class ) )
assertEquals ( "Hello World" , translate . execute ( "Bonjour le monde" , Language . FRENCH , Language . ENGLISH ) )
assertEquals ( "1" , svc . getState ( ) )
assertNotNull ( sessionFactoryBean . getObject ( ) )
assertTrue ( shouldAnalyze )
assertTrue ( "Axioms are not equal" , cls . equals ( propP . getAxiomCount ( ) ) )
assertions . isLessThan ( expected )
assertEquals ( "names do not match!" , "myComponent" , component . getName ( ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertEquals ( "" , result )
assertEquals ( "Should have received 0 change events" , 0 , events . size ( ) )
assertTrue ( csv . equals ( "" ) )
assertNotNull ( config )
assertEquals ( "Unexpected primary style name" , "v-table" , state . primaryStyleName )
assertJson ( json )
assertEquals ( "https://50.0.0.1:5683/api/v1/server/getServer/getIdentity" , server . getUri ( ) )
Assert . assertEquals ( journalTable . getKeys ( ) , ImmutableList . of ( "def1" , "def2" ) )
assertEquals ( 0 , provider . getProperties ( ) . size ( ) )
Assert . fail ( "RuntimeException expected" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff16_" ) )
assertEquals ( "Found " + results . size ( ) + " results instead of " + test [ 1 ] , numResults , results . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( testDataValue , room . getData ( ) )
Assert . assertEquals ( expected . replace ( '\\'' , '"' ) , result )
assertMatches ( written , resolved )
assertEquals ( "hello" , result )
assertEquals ( "" , result )
Assert . assertNotNull ( strategy )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "/sharedlogs" , "/sharedlogs" ) ) )
assertThat ( statistics . getDistinctSourceVertexCount ( ) , is ( 8L ) )
assertEquals ( expectedData , ChartData . buildBarData ( chartData ) )
assertEquals ( "Mismatched remote root value" , expected , actual )
Assert . assertEquals ( "baz" , manipulation . getColumnToUpdate ( ) )
Assert . assertEquals ( new BigDecimal ( "23691.35" ) , term . getIndexedValue ( ) )
assertEquals ( "ID" , cb . getSelect ( ) . getSQL ( args ) )
assertEquals ( 100 , proxy )
assertThat ( servletResponse , allOf ( startsWith ( "java.io.IOException" ) , containsString ( "403" ) ) )
assertTrue ( suitable )
assertEquals ( true , classUnderTest . isShowConstraintNames ( ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertSame ( null , i . getStsClient ( ) )
Assert . assertEquals ( prefixes . getNsPrefixURI ( "ex" ) , query . getNsPrefixURI ( "ex" ) )
assertFalse ( subject . isDefaultToAbsent ( ) . isPresent ( ) )
assertEquals ( "Happy!" , version )
assertBeanValidation ( json , "query.metric[0].group_by[0].rangeSize may not be null" )
assertNotNull ( "Returned console reader cannot be null" , reader )
assertEquals ( "Expected another type of analyzer" , StopAnalyzer . class , analyzer . getClass ( ) )
assertDefaults ( targetProduct , false )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
assertThat ( traversal . toList ( ) , containsInAnyOrder ( likeVertex ( ) . withTimId ( "id1" ) , likeVertex ( ) . withTimId ( "id2" ) , likeVertex ( ) . withTimId ( "id3" ) ) )
assertEquals ( expected , getString ( TestIExistsCriteriaImpl . example ( ) ) )
assertThat ( result . getIssues ( ) , empty ( ) )
assertTrue ( user . hasRole ( "Super User" , true ) )
assertEquals ( o1 , o2 )
assertThat ( result . hasErrors ( ) , is ( false ) )
assertTrue ( set . isEmpty ( ) )
assertFalse ( "No keyword information" , result . getParts ( ) . isEmpty ( ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "9208675309" , parsedTelephoneNumber )
assertArrayEquals ( "2" . getBytes ( ) , jedisCluster . get ( byteKey ) )
assertEquals ( 0 , array . length )
assertFocusModificationSanity ( context )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( response . getStatus ( ) , STATUS200 )
Assert . assertEquals ( button . getAttribute ( "value" ) , "Hello there" )
assertEquals ( "find(\\"\\\\s+\\")" , buffer . toString ( ) )
assertEquals ( "{\\"a\\":{\\"b\\":1,\\"c\\":2}}" , n )
assertEquals ( "Test message ab c" , result )
assertEquals ( "SELECT mat FROM SOHeader soh JOIN soh.soItem soi JOIN soi.material mat WHERE soh.buyerId = 2 AND soh.createdBy = 'Peter' AND soi.shId = soh.soId AND mat.id = 'abc' ORDER BY mat.buyerId asc, mat.city desc" , jpqlStatement . toString ( ) )
assertEquals ( "0019" , this . banco . geraCodigoDeBarrasPara ( this . boleto ) . substring ( 0 , 3 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( BIG_DATA , result )
Assert . assertEquals ( "!!bitset [\\n" + "  1024,\\n" + "  # 000000000000000000000000000000000000010000000000\\n" + "\\n" + "]" , wire . toString ( ) )
Assert . assertEquals ( new Double ( 65535.65535d ) , _c . convert ( "65535.65535" ) )
assertTrue ( exceptionReport . getHTTPStatusCode ( ) == HttpServletResponse . SC_BAD_REQUEST )
assertEquals ( 2 , ontology . getAxiomCount ( ) )
Assert . assertEquals ( Constants . HEADER_SIGNIN_PATH , actualSignInPath )
assertTrue ( entity . getSex ( ) == null )
assertEquals ( expected , loops )
assertTrue ( retDocumentOrganizations == documentProjectOrganizations )
Assert . assertEquals ( "Hello world!" , result . get ( ) )
assertThat ( response . getStatus ( ) , is ( Response . Status . NOT_FOUND . getStatusCode ( ) ) )
assertEquals ( value , i )
assertDeclarationValueRecovery ( ss )
assertThat ( actual , containsInAnyOrder ( "G" , "Patient/P" ) )
assertEquals ( "OK" , jedisCluster . scriptFlush ( byteKey ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
arrays . assertHasOnlyElementsOfTypes ( someInfo ( ) , array ( ) , types )
assertNoCause ( "message\\nmyObject was: root" )
assertThat ( i , is ( 1 ) )
assertNotNull ( image )
AssertResults . assertResults ( scanner , expectedResults )
assertThat ( markdown , containsString ( String . join ( "\\n" , "### Start" , "" , tableHeader ( ) , tableEntry ( "`derived`" , linkTo ( "Derived Object" , "#derived-object" ) , "" ) , tableEntry ( "`simple`" , linkTo ( "Simple Object" , "#simple-object" ) , "" ) ) ) )
assertEquals ( p , Period . of ( 0 , 0 , 0 ) )
assertEquals ( counter . get ( ) , accumulated )
assertEquals ( TEAM_CITY_URL + "/app/rest/projects" , projectUrl )
assertNotNull ( "Country is null" , entity )
Assert . fail ( e . getMessage ( ) )
assertThat ( values , contains ( beginYear ) )
assertOut ( "var /** @type {*} */ a = 42" )
assertFalse ( result )
assertTrue ( pattern . matches ( "-1.0" ) )
assertResultSet ( res )
assertNotNull ( responseContent )
assertEquals ( 1 , kieSession . fireAllRules ( ) )
assertEquals ( expected , actual )
assertTrue ( contains ( url , "?key=123.5" ) )
assertEquals ( Tuple3 . of ( 17.29f , 14.5 , - 0.98 , 6 ) , Iterables . getOnlyElement ( applyAggregator ( a , input ) ) )
assertTrue ( s . getRequiredSkills ( ) . containsSkill ( "skill1" ) )
assertThat ( responseObject , is ( not ( nullValue ( ) ) ) )
Assert . assertEquals ( protocoloInfo , protocolo . getProtocoloInfo ( ) )
assertFalse ( "Attribute should be false" , msg1 . getEdimap ( ) . isIgnoreUnmappedSegments ( ) )
Assert . assertNull ( WebUtil . normalizeLocale ( s ) )
Assert . assertNull ( "user group returned" , actual )
Truth . assert_ ( )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
assertThat ( date . getMinimum ( CommonElements . RELATED_GREGORIAN_YEAR ) , is ( 1394 ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertThat ( transferSuccessful , is ( true ) )
assertTwoProcessesDifferentDefinition ( manager )
assertNoDummyAccount ( USER_JACK_USERNAME )
assertEquals ( 4 , ftpFiles . length )
assertNull ( value )
Assert . assertEquals ( 1 , ( int ) conceptName . getConceptNameId ( ) )
assertTrue ( str . contains ( "intValue" ) )
Assert . assertEquals ( units , deserialize ( tmpDir ) )
assertNotNull ( node )
assertTrue ( "hotmail contacts are empty" , contacts . size ( ) > 0 )
Assert . assertEquals ( new Long ( Long . MAX_VALUE ) , RequestObjectHelper . getEndOffset ( requestObject ) )
assertFailureLogPresent ( instance , "failingTask" )
assertThat ( parsers , is ( DdlParsers . DDL_PARSERS ) )
assertThat ( spec . getImagePullPolicy ( ) , equalTo ( ALWAYS_IMAGEPULLPOLICY ) )
assertFalse ( authenticator . isAuthenticated ( "username" , "password" ) )
assertEquals ( expectedGhostTable , ghostTable )
assertThat ( records , hasSize ( 0 ) )
assertThat ( root , hasType ( Type . COMPLETELY_SCHEDULED_SUPERELEMENT ) )
assertEquals ( previous + 2 , list . size ( ) )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
Assert . assertArrayEquals ( cplxData_ovsmp_EXPECTED . toDoubleArray ( ) , cplxData_ovsmp_ACTUAL . toDoubleArray ( ) , DELTA_08 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertTrue ( properties . shouldCreateNewChat ( ) )
assertThat ( view . getDetails ( ) , is ( presenter . getDetails ( ) ) )
assertTrue ( "Not EBV true: " + v , XSDFuncOp . booleanEffectiveValue ( v ) )
Assert . assertEquals ( "Invalid AND of " + operands , row . expected , expr . evaluate ( ) . booleanValue ( ) )
assertEquals ( expected , actual )
assertThat ( processor . getTables ( ) , is ( Arrays . asList ( DATABASE + "." + TABLE ) ) )
assertEquals ( label + " serialize-normal failed" , label , r )
assertEquals ( mongoDocument , read )
assertEquals ( expectedSource , instrumentedSource )
assertThat ( getter . invoke ( instance ) , is ( "defaultString" ) )
Assert . assertEquals ( element . getText ( ) , "click me" )
assertTrue ( pool . isEmpty ( ) )
assertThat ( reading . getQuery ( ) , is ( "offset=10" ) )
assertEquals ( 200 , tagCache . size ( ) )
assertNotNull ( p )
assertEquals ( expected , output . trim ( ) )
assertThat ( manager . getPartitionSubPath ( path ) , is ( new Path ( "partition%251" ) ) )
Assert . assertTrue ( person . getAttributes ( ) . isEmpty ( ) )
assertDegenerate ( scan )
assertEquals ( "9 3\\n" , found )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( JPackage . UNKNOWN , aCM . _package ( "org.pub.anything" ) )
assertThat ( cursor . hasNext ( ) , equalTo ( false ) )
assertEquals ( "irida workflow is invalid" , buildTestWorkflowSingle ( ) , iridaWorkflowFromFile )
assertEquals ( 3 , Iter . lastIndex ( data , filter ) )
assertTrue ( true )
Assert . assertTrue ( is . available ( ) > 0 )
assertEquals ( date , headers . getDate ( DATE ) )
Assert . assertNotNull ( "XML parser not null" , tba1 )
assertEquals ( "immediateResume" , str )
Assert . assertEquals ( 0 , this . outputDir . listFiles ( ) . length )
assertThat ( javaDocComment , containsString ( "A description for this type" ) )
assertEquals ( - 1 , askLevel1 . compareTo ( askLevel2 ) )
assertEquals ( expected , actual )
assertEquals ( name , newone . getNameAsString ( ) )
assertTrue ( ts . getMillis ( ) > currentTimeMillis )
assertTrue ( selectedCells . isEmpty ( ) )
Assert . assertEquals ( "var simulation gave unexpected data" , ( short ) 3 , ( short ) r )
assertEquals ( val1 , point . getValue ( ) )
Assert . assertTrue ( row . matches ( new Guess ( colors ) ) )
assertEquals ( 3 , position )
assertThat ( pathElement . getCompletePath ( ) , is ( "/a/b/c/d/e" ) )
assertEquals ( 13 , acc . get ( ) )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
Assert . assertEquals ( "Free nodes should be correct since run is considered new since run is considered new at this point " , 5 , freeThreads )
assertEquals ( "Test Group" , currentGroup . getName ( ) )
Assert . fail ( "IllegalArgumentException expected but not thrown" )
assertThat ( queryContext . get ( ) , is ( expected ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFInfoCupomFiscalReferenciado ( ) . toString ( ) )
assertThat ( resolve ( "http://example.org/b/c" ) , is ( "./example/b/c.xsd" ) )
assertEquals ( witness , map )
assertThat ( results . size ( ) , is ( 1 ) )
assertScoreAndParse ( content , null , 1 )
assertArrayEquals ( EXPECTED_SIGNED_BYTES , encodedBytes )
assertEquals ( "Foo" , kieBuilder . getMessages ( Message . Level . FOO ) . get ( 0 ) . getMessage ( ) )
assertThat ( ecodedSuffix [ 0 ] , equalTo ( qa [ 1 ] ) )
mockOutput . assertIsSatisfied ( )
Assert . assertEquals ( 3 , countResult ( query ) )
assertEquals ( testString , cv . getValue ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedRemoteCallReturn , remoteCallReturn )
assertRendererOpen ( )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertTrue ( doc . isSameNode ( mockBroker ) )
assertEquals ( 3 , concurrency )
assertEquals ( "" , converter . getAsString ( facesContext , new UIPanel ( ) , null ) )
Assert . assertEquals ( "http://example.com/events/Wiesbaden?eventName=Revo+Tour&location=Schlachthof#description" , expanded . toString ( ) )
assertTrue ( session . getNode ( path ) . isLocked ( ) )
assertArrayEquals ( expected , actual , EPS )
assertEquals ( "string" , array . getString ( 0 ) )
assertEquals ( "239104761" , nossoNumeroCompleto )
assertThat ( result , contains ( new Interval ( RangeBoundary . CLOSED , 0 , 4 , RangeBoundary . CLOSED , 0 , 0 ) ) )
assertNotNull ( Fleet . fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( 0 , time . getTime ( ) )
assertTrue ( "Expected HostCapacityReports" , obj instanceof Host )
assertFalse ( workReportTypeDAO . exists ( workReportType . getId ( ) ) )
assertTrue ( true )
assertEquals ( result , component )
assertEquals ( false , getLoadLayerDefinitionAction ( ) . isEnabled ( ) )
assertEquals ( resp . getCode ( ) , 204 )
assertEquals ( expected , answer )
assertEquals ( 1 , roles . size ( ) )
assertTrue ( "Tx 3 write should've completed" , write2Complete . await ( 5 , TimeUnit . SECONDS ) )
assertFalse ( notifier . wasPerformed ( ) )
assertEquals ( map1 , map2 )
helper . assertAttributeValue ( EXPECT_NoAttributeValue , orderLine . getM_AttributeSetInstance ( ) , attr_Country )
Assert . assertEquals ( expected , actual . toString ( ) )
assertArrayEquals ( expected [ i ] , digest , 0 )
Assert . assertFalse ( principal1 . equals ( principal2 ) )
assertThat ( result , is ( true ) )
assertEquals ( before , currentUser . getPostCount ( ) )
Assert . assertEquals ( "Compiling the Vocab failed" , 0 , result )
assertTrue ( e instanceof E_Version )
assertEquals ( "candidate took 1 millis to execute\\n" + "control took 1 millis to execute\\n" + "example: candidate and control both executed successfully, but the responses don't match\\n" , s )
Assert . assertEquals ( 2 , inter . size ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( "Unique identifier is not unique" , provider . isProviderIdentifierUnique ( ) )
assertEquals ( getExplain ( delete , table . getSchemaName ( ) ) , "\\n  Delete_Returning()\\n" + "    GroupLookup_Default(Index(c.PRIMARY) -> c)\\n" + "     IndexScan_Default(Index(c.PRIMARY), cid = $1)" )
assertEquals ( "header must be measured" , prefSize . width + table . getColumnMargin ( ) , columnExt . getPreferredWidth ( ) )
assertEquals ( "func code() {}" , element . getValueAsString ( ) )
assertArrayEquals ( new String [ ] [ ] { { "A" , "B" , "C" } , { "1" , "2" , "3" } } , event . getMatrix ( ) )
assertThat ( songList . getTotalElements ( ) , is ( 0L ) )
assertEquals ( "abaac\\n" , found )
assertEquals ( numCalls + 1 , newNumCalls )
Assert . assertEquals ( SslMode . MIXED , mode )
this . assertEditPostFormMavIsCorrect ( mav )
assertThat ( "unencoded field has type String" , field . getType ( ) , equalToType ( STRING ) )
assertTrue ( "Expected " + numberOfOperations + " to be equal to " + returnedNumber , returnedNumber == numberOfOperations )
Assert . assertTrue ( rPr . getSz ( ) . getVal ( ) . intValue ( ) == 24 )
assertEquals ( Type . PRIVACY_PREFERENCE_FILE , Type . get ( preference ) )
assertOut ( "delete a" )
Assert . fail ( "Expected SQL exception" )
assertFailureValue ( "value of" , "[0]" )
assertNotNull ( host )
assertEquals ( "Expected ratcheting to have been updated" , 3 , config . getTypeConfigs ( ) . get ( CHECKSTYLE ) . getUnstable ( ) . intValue ( ) )
assertEquals ( 0xff , keyInfo . getMaxSubKeyLen ( ) )
Assert . assertEquals ( 6 , metrics . size ( ) )
assertThat ( mapOfProperties . keySet ( ) , containsInAnyOrder ( "database.username" , "database.password" , "database.driver" , "database.url" ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertThat ( localization . getLocale ( ) . getLanguage ( ) , equalTo ( PT_BR . toString ( ) ) )
assertEquals ( 4 , booleans . size ( ) )
AssertJUnit . assertTrue ( "filter does not match object" , match )
assertFalse ( source . isSnapshotsDisabled ( ) )
assertThat ( noOfSolutions , is ( 2 ) )
assertEquals ( report , actual )
assertThat ( fileContent , is ( "Hello Andrew\\nGoodbye Andrew" ) )
assertEquals ( TEST_CONTENT , CharStreams . toString ( result ) )
assertObjectEquals ( "{'in':'header',name:'H',type:'string'}" , x )
Assert . assertTrue ( PublisherSoapServerUtils . gpPublisherClient . publishStyle ( "STYLE_MOCK_MOCKITO" , "STYLE_MOCK_MOCKITO" , Boolean . FALSE ) )
assertEquals ( "Hello Tim" , ResponseBodyInterpolator . interpolate ( "Hello :name" , req ) )
assertThat ( diffs . toString ( ) , equalTo ( "[Diff(EQUAL,\\"[a]\\"), Diff(EQUAL,\\"[b]\\"), Diff(EQUAL,\\"[c]\\")]" ) )
Assert . assertFalse ( pf . passesFilter ( p1 ) )
assertThat ( itemTypeDAO . getTypes ( TENANT_ID , false ) , is ( expectedTypes ) )
assertEquals ( HELLOWORLD_URI , uri . toASCIIString ( ) )
assertEquals ( "1" , patient . getFirstHeader ( "Logger" ) . getValue ( ) )
assertTrue ( success )
Assert . assertTrue ( result . get ( ) )
assertEquals ( new File ( absBaseDir + toResolve ) , DockerPathUtil . resolveAbsolutely ( toResolve , absBaseDir ) )
Assert . notNull ( department )
assertEquals ( false , result )
assertThat ( driver . findElement ( By . id ( "halfwidth" ) ) . getAttribute ( "value" ) , is ( "�����笺���笺����锛�" ) )
assertEquals ( null , min )
Assert . assertEquals ( 2 , resultList . size ( ) )
Assert . assertTrue ( out . size ( ) > 0 )
assertThat ( classesToParse , is ( empty ( ) ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNull ( e . getEnableCounting ( ) )
assertEquals ( expResult , result )
assertTrue ( true )
assertEquals ( "" , result )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertTrue ( mockService . isApproved ( ) )
Assert . assertTrue ( "Failure expected true" , r . getLeft ( ) )
assertRowCount ( results , 2 )
assertNotNull ( Member . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
this . assertAnalyzesTo ( _a , "{\\"foo\\":true}" , new String [ ] { "foo" , "true" } , new String [ ] { TypeAttribute . DEFAULT_TYPE , "<NUM>" } )
assertEquals ( renderJarTypeResult ( ) , result )
assertEquals ( new TupleN ( 1 , false , true , 2 , 3 ) , xtupleN ( sf , xint ( ) , xfloat ( ) , xint ( ) , xint ( ) ) . extract ( "1,false,true,2,3" ) )
Assert . assertEquals ( 12 , analyser . getLoadRightAfterActivity ( route . getActivities ( ) . get ( 1 ) , route ) . get ( 0 ) )
Assert . assertEquals ( "@" , model . getUnit ( 0 , PlainText . class ) . getText ( ) )
assertEquals ( body . toString ( ) , "1test final" )
Assert . assertEquals ( 2 , violations . size ( ) )
assertions . doesNotContain ( values )
Assert . assertEquals ( "/test?queryParams=1&user=1%2C2%2C3" , result )
assertThat ( count , is ( 1L ) )
assertTrue ( Iterables . elementsEqual ( result . getSteps ( ) , Lists . newArrayList ( new Step ( 0L , 2L , 1L , false ) , new Step ( 1L , 0L , 0L , false ) , new Step ( 1L , 1L , 2L , true ) , new Step ( 2L , 3L , 2L , true ) ) ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
assertEquals ( "value" , exp . asDynamic ( ) . asPropertyPath ( ) . getValue ( ) )
Assert . assertNull ( caixa )
classes . assertIsPrivate ( someInfo ( ) , clazz )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( selectionModel . getSelectedClass ( ) , is ( Optional . empty ( ) ) )
assertTrue ( filter . matches ( "resilient_pool-0" , poolOperation ) )
assertEquals ( expectedNewCookie , parsedNewCookie )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertTrue ( "Link " + link + " not found" , isReferenced )
assertSeven ( result , testContext , async )
assertNotNull ( sinkFactory )
assertThat ( ( String ) registrationProperties . getValue ( ) . get ( "configuration" ) , equalTo ( "configadmin" ) )
assertEquals ( "OK" , r )
assertEquals ( 0 , new NQueens ( solution ) . attackedQueens ( ) )
Assert . assertEquals ( "1 2" , ev . get ( "a" ) )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . fail ( "Shouldn't have received an OPTION_IGNORE_TYPE response" )
Assert . assertEquals ( expectedOutputValues , outputValues )
assertEquals ( 123 , row . getValue ( ) )
assertEquals ( expected , b )
assertEquals ( query ( func . args ( ) ) , path + File . separator )
assertThat ( reader , is ( notNullValue ( ) ) )
assertSame ( MockChooser1 . class , delegate . getClass ( ) )
assertEquals ( formatedValue , "26637142000158" )
assertTrue ( FileUtil . findPatternInFile ( new File ( resultFilename ) , "Avoid empty if" ) )
assertFalse ( executor . shouldExecute ( action , javax . faces . event . PhaseId . RESTORE_VIEW , false ) )
assertTrue ( str . contains ( "This is a test." ) )
assertEquals ( "Homer" , exp . evaluate ( person , vars ) )
assertOut ( "this.b = this.b + 1" )
Assert . assertEquals ( "PersonAddressName" , result )
assertEquals ( - 1 , in . peekByte ( ) )
assertNull ( result )
Assert . assertNull ( gran )
assertThat ( response , containsString ( "81.80.117.237 - 81.80.117.237" ) )
assertNotNull ( result )
assertThat ( givenStories . getPaths ( ) , equalTo ( Arrays . asList ( GIVEN_STORY_PATH1 , GIVEN_STORY_PATH2 ) ) )
assertFalse ( isEditable )
assertEquals ( "\\"I\\"\\"" , response )
assertEquals ( "Failed at " + i , reduced . getDouble ( i ) , res , 0.001 )
Assert . assertEquals ( state . IDLE , state )
Assert . isTrue ( getUser . getGroups ( ) . size ( ) == 0 )
assertLinkWithSameUnitsOk ( LinkInfo . UNIT_TYPE . STORE , units )
assertEquals ( DEFAULT_POPULATION_SIZE + evaluations , algorithm . getEvaluations ( ) )
assertEquals ( "Period of time %Milliseconds in a second >= 500L" , "00:00:01 (hh:mm:ss)" , DateTimeUtils . millisecondsToHumanTime ( period ) )
assertEquals ( "V1 Track" , wrapper . getTrack ( ) )
assertEquals ( buildInfo . getActionID ( ) , "40a436b1-28d1-4de6-b2c3-0a34f478e2c9" )
assertTrue ( closed . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "3 m氓neder siden" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "1 futureday from now" , p . format ( new Date ( 1000 * 60 * 60 * 24 ) ) )
assertEquals ( "2" , expr . getParameterValue ( ) )
assertEquals ( "pmTitleCfgTooltipUsesTitleTest.ContainerPm" , container . getPmTitle ( ) )
Assert . assertEquals ( config , result )
assertEquals ( proxySelector , ProxySelector . getDefault ( ) )
assertEquals ( r1 , r2 )
assertNotNull ( rs )
assertEquals ( component . getStyleName ( ) , "style1 style2" )
Assert . fail ( )
assertSame ( job , new JsonWriter ( job , file ) . getJob ( ) )
assertEquals ( expectedUrl , url )
Assert . assertTrue ( "Number of connections didn't change" , NUMBER_OF_GRAPHS == NUMBER_OF_SCHEMAS )
assertEquals ( coder . parse ( "(2 * (-3) * (-5)) + 1 / (2 * (-3) * (-5))" ) , coder . parse ( "(s2 * s3 * s5)^2 + 1 / (s2 * s3 * s5)^2" ) )
assertEqualsIgnoreLineEnding ( output , "{ }" )
Assert . assertEquals ( numberOfTuples , bc . size ( ) )
assertEquals ( "Value {" , result )
assertThat ( main . getClass ( ) . getResource ( toClassFileName ( "abc" ) ) , equalTo ( classPathUrls [ 0 ] ) )
assertEnvelopeEquals ( expected , actual , STRICT )
testKit . assertExceptionOnTxChainCreates ( txChain , DOMTransactionChainClosedException . class )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertThat ( actual , notNullValue ( ) )
assertEquals ( "/foo/bar/baz" , output )
Assert . assertFalse ( conceptService . hasAnyConceptAttribute ( conceptAttributeType ) )
assertTrue ( selector . evaluate ( source ) )
assertFalse ( "Created MulticastSocket" , context . datagramSocket instanceof MulticastSocket )
Assert . assertEquals ( 5.1f , value , 0.000001f )
assertCard ( expectedCard , "http://magiccards.info/m14/en/3.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( 1 , request . getOauthParameters ( ) . size ( ) )
assertEquals ( "SELECT\\n" + "c.id, c.name, c.tags, c.category, c.description, \\n" + "c.division, c.experience_level as \\"experienceLevel\\", \\n" + "c.locations, c.type, c.parent_id as \\"parentId\\", \\n" + "g.latitude as \\"latitude\\", g.longitude as \\"longitude\\"\\n" + "FROM campaign c\\n" + "WHERE \\n" + "c.type = 'JOBPAGE' AND c.createts < now() -- {}\\n" + "ORDER BY c.createts\\n" + "LIMIT 100 -- {}\\n" + "OFFSET 1 -- {}" , actual )
Assert . fail ( "Should not be able to generate a negative length String" )
context . assertIsSatisfied ( )
assertNull ( retry )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredVersion ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( renderLayers . getLayers ( ) , is ( empty ( ) ) )
Assert . assertNull ( job )
Assert . assertNotNull ( eqd2 )
assertEquals ( expResult , result )
assertEquals ( a1 , a2 )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { PATH , FORMAT , "group_repo" } , null ) , is ( false ) )
assertTrue ( Pattern . matches ( "(?s).*<td>\\\\s*<table\\\\s*lang=\\"en\\"\\\\s*style=\\"left:\\\\s*48px;\\\\s*top:\\\\s*100px;\\\\s*position:\\\\s*absolute\\">\\\\s*<li\\\\s*style=\\"color:\\\\s*red\\">\\\\s*<span\\\\s*title=\\"Informational\\\\s*Detail\\">\\\\s*Information\\\\s*Summary\\\\s*Informational\\\\s*Detail\\\\s*</span>\\\\s*</li>\\\\s*<li>\\\\s*<span\\\\s*title=\\"Warning\\\\s*Detail\\">\\\\s*Warning\\\\s*Detail\\\\s*Summary\\\\s*Warning\\\\s*Detail\\\\s*</span>\\\\s*</li>\\\\s*<li>\\\\s*<span\\\\s*title=\\"Error\\\\s*Detail\\">\\\\s*Error\\\\s*Detail\\\\s*</span>\\\\s*</li>\\\\s*</tr>\\\\s*<tr>\\\\s*<td>\\\\s*<table\\\\s*lang=\\"en\\"\\\\s*style=\\"left:\\\\s*48px;\\\\s*top:\\\\s*100px;\\\\s*position:\\\\s*absolute\\">\\\\s*<li\\\\s*style=\\"color:\\\\s*red\\">\\\\s*<span\\\\s*title=\\"Fatal\\\\s*Detail\\">\\\\s*Fatal\\\\s*Summary\\\\s*Fatal\\\\s*Detail\\\\s*</span>\\\\s*</td>\\\\s*</tr>\\\\s*</tr>\\\\s*</td>\\\\s*</tr>\\\\s*</tr>\\\\s*</table>\\\\s*</td>\\\\s*</tr>\\\\s*</tr>\\\\s*</td>\\\\s*</tr>\\\\s*</tr>\\\\s*</td>\\\\s*</tr>\\\\s*</tr>\\\\s*</td>\\\\s*</tr>\\\\s*</tr>\\\\s*</td>\\\\s*</tr>\\\\
mockery . assertIsSatisfied ( )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertOut ( "a.removeAt(2)" )
Assert . assertNull ( foundPid )
assertEquals ( asList ( Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 ) , segmentSizes )
assertEquals ( "sub" , hpi . getStartActivityId ( ) )
assertDocument ( session . getSessionFactory ( ) , "Component" , "{ '_id' : '" + tre . getId ( ) + "' }" , "{ " + "'_id' : '" + tre . getId ( ) + "', " + "'addresses' : {" + "'surching' : '" + tre . getId ( ) + "'," + "'sale' : '" + tre . getId ( ) + "'," + "'sale' : '" + tre . getSale ( ) + "'," + "'sale' : '" + tre . getSale ( ) + "}" + "}" )
Assert . assertEquals ( strExpected , strActual )
assertEquals ( calendar . getTime ( ) , toml . getDate ( "a_date" ) )
assertNotNull ( doc )
assertEquals ( "Unexpected return message" , "getStatus" , status . getReturn ( ) )
assertEquals ( "@Test" , annotation . getClass ( ) . getSimpleName ( ) )
AssertJUnit . assertEquals ( expectedEdge , actualEdge )
runner . assertNotValid ( credentialsService )
Assert . assertTrue ( "output does not contain version" , listOutput . contains ( "version" ) && listOutput . contains ( "metadata" ) )
assertTrue ( "Russian alphabet not correctly reverse sorted" , result )
assertNotNull ( result )
assertEquals ( "a b\\n" , found )
assertEquals ( "Infinite" , vrp . getVehicleRoutes ( ) . iterator ( ) . next ( ) . getVehicle ( ) . getName ( ) )
assertEquals ( "12234545hello4512689" , res )
assertEquals ( JobStatus . ENQUEUED , job . status )
assertEquals ( expected , content )
assertEquals ( expResult , result )
assertEquals ( XML_BOOKS , writer . toString ( ) )
assertSame ( "Source is not detected: " + select . getExpression ( ) , resolver . getSource ( ) , select . getSource ( ) )
ITUtils . assertReceivingDifferentRows ( proxy , key , ROW_COUNT + ROW_COUNT )
Assert . assertFalse ( p1 . isSameAs ( p2 ) )
assertRoundtrip ( input )
assertSame ( ctrlC , accelerator )
assertThat ( domain . getServer ( "server1" , "cluster" ) . shouldStart ( 0 ) , is ( true ) )
assertEquals ( before , after )
Assert . assertEquals ( b , a )
assertEquals ( asList ( foo1 , foo2 ) , results )
assertEquals ( "Number of steps incorrect!" , number , enumerate ( number , step ) )
assertThat ( converter . convert ( "10/06/2008" , Date . class , bundle ) , is ( equalTo ( new SimpleDateFormat ( "dd/MM/yyyy" ) . parse ( "10/06/2008" ) ) ) )
assertEquals ( "choob-plugin" , pluginPath )
assertEquals ( map . keySet ( ) . size ( ) , 249 )
assertEquals ( defaults , config . getDefaults ( ) )
assertEquals ( version1 , version2 )
Assert . fail ( "Should throw FileNotFoundException" )
assertThat ( uri , endsWith ( "testing" ) )
assertNotNull ( result )
Assert . assertEquals ( siteFinder . hasResults ( ) , true )
assertEquals ( "Expected 400 but got " + response . getStatus ( ) , 400 , response . getStatus ( ) )
assertEquals ( "Expected one site stream endpoint for localhost" , endpoint , SchemaRegistryConfig . endpointsToBootstrapServers ( endpointsList , SecurityProtocol . siteStreamEndpoint ( ) ) )
assertEquals ( "Expected 5 results!" , 5 , n )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullHour ( ) ) , is ( PlainTime . midnightAtEndOfDay ( ) ) )
Assert . assertEquals ( "John" , customer )
assertMockEndpointsSatisfied ( )
assertThat ( parsed , is ( equalTo ( original ) ) )
assertNotNull ( modelFamilyDTOs )
Assert . assertEquals ( ERROR_MESSAGE + input + '"' , expected , filter ( input ) )
Assert . assertTrue ( pss . toString ( ) . contains ( Integer . toString ( c . get ( Calendar . YEAR ) ) ) )
assertEquals ( "Did not match expected URIs" , expected , lookups )
assertEquals ( new Short ( ( short ) 3 ) , t )
assertEquals ( "icmp-rule-desc-update" , policyRule . getDescription ( ) )
assertThat ( to , is ( instanceOf ( DistributedUtils . class ) ) )
assertEquals ( "," , testDelimiter )
Assert . assertEquals ( decompressFlag , methodCalled . get ( 0 ) )
assertThat ( channel . isLongString ( ) , equalTo ( true ) )
assertEquals ( HttpStatusCode . OK_200 , response . getStatus ( ) )
assertEquals ( "/parent/dir/a/b/c" , path . toString ( ) )
assertTrue ( output . isIsomorphicWith ( source ) )
assertArrayEquals ( HandshakeMessage . fromHexString ( HexConverter . hexStringToByteArray ( message ) ) , HandshakeMessage . fromHexString ( HexConverter . hexStringToByteArray ( element ) ) )
Assert . assertEquals ( "(aa_change_substitution (aa_point_location (aa_char Cys) 123) (aa_char Arg))" , aa_change_substitution . toStringTree ( parser ) )
assertTrue ( Property . buildAll . fullName ( ) . contains ( "test" ) )
assertions . hasSize ( 5 )
assertThat ( description . toString ( ) , is ( "a future that completed with a value that is <1>" ) )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "xLabel" , Literal . class ) ) . and ( binds ( "x" , URI . class ) ) )
assertEquals ( "requests size" , 4 , requests . size ( ) )
assertEquals ( MultiStringPropertyState . createStringProperty ( "foo" , Arrays . asList ( "1" , "2" , "3" ) ) , builder . getPropertyState ( ) )
Assert . assertEquals ( json . toString ( ) , fromJson . toString ( ) )
assertThat ( error . getMessage ( ) , containsString ( "Duplicate label '" + otherTag . getLabel ( ) + "'" ) )
assertEquals ( 0 , stk . size ( ) )
assertEquals ( 1234L , get ( url ) . intHeader ( "malformed" , 1234 ) )
assertEquals ( profilePage . getUsername ( ) , "test-admin" )
assertNotNull ( cal )
assertNotNull ( output . list ( ) )
assertEquals ( FAILED , result . get ( OUTCOME ) . asString ( ) )
assertThat ( "testSetPrimaryBitstreamID 0" , b . getPrimaryBitstream ( ) , equalTo ( bs ) )
assertThat ( columnCombination . getContainedOneColumnCombinations ( fixture . getMaxNumberOfColumns ( ) ) , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedContainedOneColumnCombinations1 ( ) ) )
assertFalse ( nextExecution . isPresent ( ) )
assertTrue ( rw . isValidUtf8 ( buf ) )
Assert . assertEquals ( jdkHand , acHand )
assertEquals ( "custom_home" , config . getUserHome ( ) )
assertEquals ( AuthenticationTypeParser . SAS , parserSAS . getAuthenticationParser ( ) . getType ( ) )
assertThat ( true , equalTo ( result ) )
assertTrue ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
assertThat ( worker . getAssignments ( ) , hasSize ( 1 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertThat ( props . getProperty ( COLA_REPORT_METHOD ) , is ( GET_METHOD ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( expected , actual )
assertTrue ( instanceConstraintViolationsList . toString ( ) , instanceConstraintViolationsList . size ( ) == 0 )
assertEquals ( 0 , getMessageQueueSize ( ) )
assertTrue ( jiffle . isCompiled ( ) )
assertTrue ( CurrentInstance . get ( String . class ) . equals ( "Original value" ) )
assertThat ( response , containsString ( "Unreferenced" ) )
assertFalse ( objJPAEdmProperty . isConsistent ( ) )
Assert . assertEquals ( "10004" , index )
assertNotNull ( factoryBean . createKeyManagerFactoryBean ( ) )
Assert . assertEquals ( 0 , actual , 1e-10 )
assertEquals ( dn , dnExpected )
assertEquals ( a1 , a2 )
assertTrue ( ex . getCause ( ) instanceof MutationsRejectedException )
Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) )
assertEquals ( auth1 . hashCode ( ) , auth2 . hashCode ( ) )
Assert . assertEquals ( "Verify that the default registered container is returned as default" , name , container . getName ( ) )
Assert . assertTrue ( true )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( o . equals ( obj ) )
assertEquals ( "Unexpected URL address" , con . getURL ( ) . toString ( ) , ei . getAddress ( ) )
Assert . assertEquals ( driver ( ) . manage ( ) . getCookies ( ) . isEmpty ( ) , true )
assertTrue ( onBindCalled )
assertEquals ( list , deserializedList )
assertEquals ( "1.0" , aiResponse . getResultScore ( ) )
assertHelpLines ( "Option
assertThat ( anyTS . contains ( CLOCK_HOUR_OF_AMPM ) , is ( true ) )
assertEquals ( value1 , value2 )
assertThat ( action . hashCode ( ) , is ( other . hashCode ( ) ) )
assertEquals ( "Connection per hosts" , 70 , ioConfig . getMaxConnPerHost ( ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( 2L , actual )
Assert . assertNull ( c . getAccessLevel ( ) )
assertEquals ( "{\\"str\\":\\"strval\\",\\"int\\":2333,\\"double\\":2333}" , JsonUtils . toJson ( data ) )
Assert . assertNotNull ( options . getSubOptions ( Serializable . class ) )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( "Reference should be fetched" , masterApp , ref )
assertTrue ( cf1 . hasChildren ( ) )
Assert . assertTrue ( getException )
assertEquals ( "A" , output )
assertions . doesNotContainNull ( )
assertEquals ( 0 , ret . size ( ) )
assertEquals ( result , subject . unmodifiableSet ( ) )
assertEquals ( comm , deserializedComm )
assertTrue ( extension . isUpdateContainerAllowed ( CONTAINER_ID , new KieContainerInstanceImpl ( CONTAINER_ID , KieContainerStatus . STARTED , kieContainer ) , new HashMap < > ( ) ) )
assertXmlEqual ( "<profile-instance><filter-criterion><field name=\\"PUID\\">PUID</field><filter-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-criterion-
assertThat ( highlander , is ( not ( nullValue ( ) ) ) )
assertTrue ( cache . getResourceTypeManagerCache ( ) . getResourceActivities ( ) . isEmpty ( ) )
Assert . assertEquals ( "�械�械蟹 3 �械蟹邪写" , t . format ( new Date ( 1000 * 60 * 3 ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\\n  var /** @type {number} */ b = NaN;\\n  var /** @type {number} */ c = NaN;\\n  var /** @type {number} */ a = 1;\\n  //var /** @type {number} */ b = NaN;\\n  //var /** @type {number} */ c = NaN;\\n}" )
assertEquals ( 1 , interceptAnnotations . size ( ) )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 0 ) ) )
assertEquals ( "testing" , removeSentenceDecorator . toDisplay ( ) )
assertBeanBinding ( camelctx )
assertEquals ( "the notification handler did not receive the " + RESOURCE_ADDED_NOTIFICATION , 1 , handler . getNotifications ( ) . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 10" ) )
assertTrue ( Bean81V3BindMap . class . getName ( ) != null )
assertAccessorsCorrect ( multi , "maxSelect" , 0 , 1 , 2 )
assertTrue ( count1 . equals ( count2 ) )
assertEquals ( config . getJobEntryName ( ) , event . getValue ( ) . getNewValue ( ) )
assertEquals ( s , new TestSegment ( new Context ( '~' , '*' , ':' ) , new TestSegment ( new Context ( '~' , '*' , ':' ) ) ) )
assertTrue ( fileSystem . isOpen ( ) )
assertEquals ( "123涓���浜烘��卞����" , deserialize . readUTF ( ) )
assertTrue ( "Expected ComplexSchema hierarchy validation failure did not succeed" , hierarchySchema . validate ( hierarchyEntity ) )
assertEquals ( "Smiles" , foundName )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\\\t" } } ) ) )
assertEquals ( "svn" , mojo . flatten ( ) )
assertEquals ( "jks" , tm . getKey ( ) )
assertEqualsIgnoreWhitespace ( result , KnowledgeHelperFixerTest . fixer . fix ( raw ) )
assertThat ( result , is ( data ) )
assertEquals ( item . getId ( ) , item . getId ( ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertNotNull ( cat )
assertEquals ( expectedPanel , actualPanel )
assertTrue ( "testSnappyBlockCompression error !!!" , out . toByteArray ( ) . length > 0 )
Assert . assertEquals ( ActivitySourceClassBridge . APPLICATION_PREFIX + Long . toString ( 5L ) , sut . objectToString ( activity ) )
Assert . assertEquals ( rawInput , text )
assertEquals ( expected , elements )
Assert . isTrue ( organizations . size ( ) > 0 )
assertEquals ( "the_string" , obj )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : rule" ) )
assertEquals ( "涓���" , value )
assertEquals ( "SRID=2908;POLYGON ((-1.7343137097220955 -0.7184643510054844, -1.7343137097220955 1.2815356489945156, 1.317494696969250207 1.2815356489945156, 1.317494696969250207 -0.7184643510054844, -1.7343137097220955 -0.7184643510054844))" , ClobType . getString ( ( ClobType ) Evaluator . evaluate ( ex ) ) )
assertThat ( result , equalTo ( "setValue" ) )
assertEquals ( expected , model )
assertEquals ( "setter password expected" , "PaZZwor6" , user . getPassword ( ) )
assertEquals ( "root.parentq" , policy . assignAppToQueue ( "root.default" , "user1" ) )
assertOut ( "id=\\"myBtn\\"" )
Assert . assertEquals ( expectedIp , AgentUtils . findIpAddress ( "invalid-network" ) )
assertTrue ( isValid ( format ( "geographic with unsupported degree is not valid %s" , degree ) , crs ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( biography , dbAbba . getBioSummary ( ) )
Assert . assertEquals ( "a-b-c" , eval ( ) )
assertNull ( jdbcSource )
assertFalse ( messages . contains ( message ) )
assertThat ( result , is ( equalTo ( ( List < String > ) of ( "AA" , "BB" ) ) ) )
assertNotNull ( result )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( false ) ) )
assertNotNull ( result )
Assert . assertEquals ( string , table . getFilterVar ( ) )
assertEquals ( error , "UUID passed in does not match" )
assertEquals ( 0 , new NQueens ( states ) . attackedQueens ( ) )
assertTrue ( res instanceof LinkedList )
assertEquals ( ExpressionFactory . inExp ( "path" , Arrays . asList ( artist1 , artist2 ) ) , exp )
assertEquals ( expected , actual )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
Assert . fail ( "exception expected" )
assertFalse ( isValid )
assertThat ( unix ( instance , strategy ) , equalTo ( "ec2-0-0-0-0.compute-1.amazonaws.com" ) )
assertTrue ( result )
assertThat ( employee . getSalary ( ) , is ( 100.50D ) )
assertThat ( request . getTimestamp ( ) , equalTo ( now ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertThat ( advisor . getAdvice ( ) , instanceOf ( TpicPreAdvisor . DelegateTpicToThreadInterceptor . class ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemProdutoCombustivel ( ) . toString ( ) )
assertSame ( ds , _poolDeviceMap . getOrCreateDS ( name , 0 , ip ) )
assertTrue ( "exp(" + arg + ") is " + vM + " instead of " + vFM , Precision . equalsIncludingNaN ( vM , vFM ) )
assertEquals ( "1234567890" , digits . get ( 0 ) )
Assert . assertEquals ( "Hello World!" , result )
assertTrue ( resultComparator . compare ( od1 , od2 ) < 0 )
assertEquals ( 2 , nuOfType1Vehicles )
assertEquals ( "dois milh玫es de inteiros" , actual )
assertThat ( model2 . getMyBytes ( ) , is ( value ) )
assertEquals ( "Block size" , 16 , ecipher . getBlockSize ( ) )
assertEquals ( "Compression/Decompression error" , inputLine , readLine )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( actionsTriggered . get ( ) )
assertNotNull ( "TransMeta object must not be null" , transMeta )
assertThat ( underTest . where ( queryOptions ) . getContentAuth ( ) , is ( ContentAuth . NoContent . class ) )
assertEquals ( Arrays . asList ( "binary" , "param" , "value" ) , ramlRequest . getValues ( ) )
assertions . isSorted ( )
assertEquals ( "The Body" , new String ( output ) )
arrays . assertContains ( description , actual , null )
assertEquals ( "Unexpected status code in HTTP response." , SC_UNAUTHORIZED , statusCode )
assertFalse ( validatorLoadbalancer . validate ( meta , POST ) . passedValidation ( ) )
assertEquals ( 20 , result )
Assert . assertThat ( instance . getNaturalId ( ) , Matchers . is ( "natural key" ) )
assertEquals ( "value" , entry . getValue ( ) )
assertNull ( cut . getJobResource ( resource . getID ( ) ) )
assertNotNull ( WorkerChannel . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "{\\"@odata.context\\":\\"../../$metadata#ESMixPrimCollComp(32767)/" + "PropertyComp/olingo.odata.test1.CTBase\\"," + "\\"@odataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"@type\\":\\"#olingo.odata.test1.CTBase\\"," + "\\"AdditionalPropertyString\\":null," + "\\"PropertyInt16\\":111," + "\\"PropertyString\\":\\"TEST A\\"}" , resultString )
assertEquals ( "<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>" , doc . body ( ) . html ( ) )
assertTrue ( true )
assertEquals ( "user1" , decoded . getUserId ( ) )
assertEquals ( expectedOutput , timeConversion . getFormattedTime ( input . split ( ":" ) ) )
assertTrue ( container . getItemIds ( container . getItemIds ( id ) ) . contains ( id ) )
assertEquals ( expResult , result )
Assert . assertTrue ( newSql . equals ( "SELECT * FROM cpcplan" + suffix + " t1, cpc" + suffix + " t2 WHERE t1.a < t2.a(+)" ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\\"$or\\":[{\\"username\\":\\"Mistic\\"}]}" )
assertNotNull ( LibUsb . getDeviceList ( this . context , context ) )
assertNotNull ( e )
assertEquals ( "Null should be compatibilized to 0" , 0 , val )
assertEquals ( "city" , city . toString ( ) )
assertThat ( result , equalTo ( true ) )
assertEquals ( new ArrayList < > ( ) , tagsList )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertSame ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , combo . getWrappedCellRenderer ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . resolveVisibility ( "unknown" ) )
assertEquals ( "Table should be populated by 3 announcements" , 3 , usersPage . announcementsTableSize ( ) )
assertNull ( subject . preProcess ( "sql" , mock ( Statement . class ) , mock ( ResultSetInternalMethods . class ) , mock ( Connection . class ) , 1 , true , true , null ) )
assertEquals ( "1" , r )
org . junit . Assert . assertEquals ( expected , actual )
assertFalse ( rootNode . isAuthenticationEnabled ( ) )
assertEquals ( PERSON_COUNT , personCount )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( TEST_MD5 , computedDigest )
Assert . assertEquals ( expected , actual )
assertSemanticException ( statement , "create view view1 as select a from " + DB1 + ".tb1" )
assertThat ( result , is ( Arrays . asList ( "getMyField" , "getMyField" , "getMyField" , "isMyField" ) ) )
assertThat ( specification . getUnits ( ) , is ( BYTE . multiply ( 1L << 30 ) ) )
assertEquals ( expected , computed , 1E-6 )
assertEquals ( 0 , jobsToSubmit . size ( ) )
assertThat ( studies . size ( ) , is ( 0 ) )
assertThat ( score > 0.0f , is ( true ) )
assertEquals ( 0 , svc . getService ( 0 ) . fenceCount )
assertEquals ( "SELECT f1, f2 FROM Class" , q . toString ( ) )
assertNotNull ( hGrowSpace . getVgrow ( ) )
Assert . fail ( "Expect an invalid response" )
assertEquals ( dnsCache1 , dnsCache2 )
assertEquals ( SchemaFromInd2AndSubfield2 . class , field . getDefinition ( ) . getFieldIndexer ( ) . getClass ( ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 1000 ) , parsed )
assertTrue ( "Checkout method did not return true." , action . checkout ( ) )
assertThat ( estimator . getCardinality ( ) , is ( 34L ) )
assertEquals ( Lists . newArrayList ( and , and ) , Lists . newArrayList ( and ) )
assertThat ( connection , is ( notNullValue ( ) ) )
Assert . assertEquals ( maxAbsDeviation , 0.0 , 1E-3 )
assertNull ( rem )
assertEquals ( "5 minutes 12 hours 2 minutes" , humanizeTime )
Assert . assertTrue ( "We should get 2 documents filtered for being oversized" , count == 2 )
assertThat ( getWindowHeaderMarginRight ( ) , is ( "32px" ) )
assertThat ( elasticSearchDownloader . createQuery ( ) . toString ( ) , containsString ( "_all" ) )
assertThat ( source . getRetryLimit ( ) , is ( i ) )
assertAnnotations ( 0 , CommsIdentifier . class )
Assert . assertEquals ( expectedResult , result )
assertHasFooMethod ( dst , dstClass )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEquals ( 10 , count )
assertEquals ( "en" , jc . getStringArgument ( 0 ) )
assertTrue ( printError ( report ) , report . hasItems ( ) )
assertThat ( pairs , hasSize ( 0 ) )
assertNotNull ( builder )
assertNotNull ( result )
assertNotNull ( p )
assertEquals ( 10 , f . getHighestRank ( ) )
assertEquals ( storeMock , results )
assertTrue ( serviceWadl . length ( ) > 0 )
Assert . assertNotNull ( users )
assertEquals ( expectedRegister , newRegister )
assertEquals ( expResult , result )
assertEquals ( "um milh茫o e cento e cinquenta e novecentos e noventa mil茅simos e noventa mil茅simos" , actual )
assertNotNull ( getStdOut ( ) )
Assert . assertEquals ( "<Times><CreationTime>2016-01-18T00:00:00</CreationTime><LastAccessTime>2016-01-16T00:00:00</LastAccessTime><ExpiryTime>2016-01-18T00:00:00</ExpiryTime><LocationChanged>2016-01-18T00:00:00</LocationChanged><LastModificationTime>2016-01-18T00:00:00</LastModificationTime><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>23</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>24</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>25</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>26</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>29</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>30</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>31</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>32</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>33</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>34</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>35</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>36</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>41</UsageCount><LocationChanged>2016-01-18T00:00:00</LocationChanged><UsageCount>47</Usage
assertEquals ( prefixDeclarations . size ( ) , 2 )
assertTrue ( ret )
assertEquals ( "Mr. Horatio Test Hornblower" , providerAttribute . getProvider ( ) . getName ( ) )
assertThat ( out . toString ( ) , is ( String . format ( "Wrong move of Queen%s" , sep ) ) )
assertArrayEquals ( new int [ ] { 12345 , 54321 , 678768 } , factory . createDummy ( new ClassBindings ( ) ) )
assertEquals ( expected , Util . underscoredToJava ( "_CLASS_NAME_IDENTIFIER_" , true ) )
assertEquals ( expectedResult , result )
Assert . assertTrue ( "Capacity did not grow!" , ( ( CapacityBalancingEvictor < Integer > ) evictor ) . getCapacity ( ) > 10 )
assertEquals ( map . size ( ) , n * nThreads )
Assert . assertEquals ( xml , FabricaDeObjetosFake . getNFNotaInfoItemProduto ( ) . toString ( ) )
assertEquals ( 5 , sum )
assertEquals ( expResult , result )
assertNotNull ( connection )
assertTrue ( AuthzResolver . authorizedInternal ( session , "test_security_admin" ) )
assertThat ( formatter . format ( PlainDate . of ( 2017 , 4 , 30 ) ) , is ( "vor 4 dies" ) )
assertTrue ( "Failed to match with compatible IPv6 address." , match )
Assert . assertEquals ( "did not get expected column" , expectedColumn , actualColumn )
Assert . assertEquals ( new Long ( 1 ) , _c . convert ( "1" ) )
assertNotNull ( service . prepare ( query ) . asSingleEntity ( ) )
assertEquals ( "foobar" , s )
assertTrue ( intercepted . get ( ) )
assertThat ( status , is ( 201 ) )
assertFalse ( result )
Assert . assertNotNull ( migrationPlan )
N4CliHelper . assertExpectedOutput ( "external: application, request, response, Route, Router, query, static" , out )
assertEquals ( 3 , cheeses . size ( ) )
Assert . assertEquals ( expected , actual , TOl )
assertEquals ( registerList , registerListRegistry . registerList ( registerList ) )
assertThat ( MomentInterval . parseISO ( "2012-04-01T14:15Z/2012-04-05T16:00" ) , is ( expected ) )
assertTrue ( entities . size ( ) == 1 )
assertThat ( crownStreetAddress . equalsContent ( rileyStreetAddress ) , is ( false ) )
assertEquals ( "Two entries should be merged into one" , 1 , changes . size ( ) )
assertTrue ( jobConfig . exists ( ) )
assertRollupBeanValidation ( json , "rollup[0].query.metric[0].range_aggregator must be null" )
assertTrue ( reader . isTaken ( ) )
assertTrue ( set . isEmpty ( ) )
assertNotNull ( document )
Assert . assertNotNull ( session , "No session should have been created when proxy set is empty" )
Assert . assertEquals ( expected , actual )
assertEquals ( s , r . toString ( ) )
Assert . assertFalse ( innstillinger . isPrintable ( PdfValidationSettings . DEFAULT_PAGE ) )
assertTrue ( Arrays . toString ( imposter . getStackTrace ( ) ) , Arrays . equals ( original . getStackTrace ( ) , imposter . getStackTrace ( ) ) )
assertEquals ( actual , expected , "Wrong substitution" )
assertEquals ( 1 , statistics . size ( ) )
assertNull ( customPanelDef . getParent ( ) )
assertions . containsOnly ( values )
assertEquals ( "Response HTTP status code should be 200 (OK)" , clientResponse . getStatus ( ) , 200 )
assertTrue ( CollectionUtils . diff ( correctResults , results ) . isEmpty ( ) )
Assert . assertEquals ( "G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXXVYDLFSZYZTWTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHNIQWJQNDWRYLCA" , hash )
assertEquals ( "3 tuntia sitten" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertSame ( shouldFind , selection . text ( By . id ( "test" ) ) )
XMLAssert . assertXMLEqual ( "Invalid content received" , content , result . toString ( ) )
assertEquals ( "" , p01 . getContent ( ) )
assertNull ( "Check if the resource has been deleted" , searchedNode )
assertEquals ( pkgId , cache . getPkgId ( orgName , pkgName , pkgId ) )
assertThat ( value , isOneOf ( "55" , "44" , "45" , "54" ) )
assertEquals ( 1 , dao . findByDemographicNo ( 1 ) . size ( ) )
assertThat ( bufferedEvents . size ( ) , equalTo ( 0 ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( "error message not equal" , "error message not equal" , message )
assertEquals ( DummyModel . where ( new Condition ( "column1" , "test123" ) , new Condition ( "column2" , "test125" ) ) , Arrays . asList ( model ) )
assertEquals ( actual1 , actual2 )
assertArrayEquals ( plaintext , result )
assertSeen ( visible )
assertEquals ( r1 , r2 )
Assert . assertEquals ( clickMe . getText ( ) , buttonText )
assertEquals ( docs . get ( ) . getResults ( ) . size ( ) , 1 )
assertEquals ( keyExpected , keyBuilt )
testRunner . assertAllFlowFilesTransferred ( EncodeContent . REL_FAILURE , 1 )
assertSame ( "candidate" , choice . get ( ) , "exp" )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( postResponse . getStatus ( ) , is ( 400 ) )
assertFalse ( checker . isFormat ( stream ) )
assertThat ( underTest . createToken ( principalCollection ) , is ( equalTo ( FORMAT + "." + TOKEN ) ) )
assertThat ( description . toString ( ) , is ( "a future that completed with a value that is <1>" ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , target . request ( MediaType . TEXT_PLAIN ) . get ( ) . getStatus ( ) )
Assert . isTrue ( grade . getEmployments ( ) . size ( ) > 0 )
assertSame ( initialProperties , contextParameterResolver . resolve ( parameter , applicationContext ) )
assertEquals ( 0.0 , rmsd , 0.0001 )
assertTrue ( Modifier . isPrivate ( c . getModifiers ( ) ) )
assertEquals ( "Unknown tool" , commandDocument . getToolName ( ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == 0 )
assertThat ( matcher . matches ( mockResponse ) , is ( false ) )
assertEquals ( "d 42\\n" , found )
assertThat ( count , is ( 6 ) )
assertEquals ( defaultJobIdPartitioner . getNewJobId ( ) , defaultJobIdPartitioner . getNewJobId ( ) )
assertEquals ( testLzPaths , tenantProcessor . getIn ( ) . getHeader ( TENANT_POLL_HEADER ) )
assertEquals ( "my-path" , hystrixBundle . getAdminPath ( ) )
assertEquals ( "1 value1 value2\\n\\n" , drl )
assertEquals ( 1 , counter )
assertEquals ( expectedList , customerDAO . getAll ( ) )
assertEquals ( "<a href=\\"" + BASE_URL + "#dest1?a=b&amp;c=d\\">Link&amp;1</a>" + "<a href=\\"http://xyz/abc?x=y&amp;z=w\\">Link&amp;2</a>" , result )
Assert . assertNotNull ( json . getString ( "stoppedFollowingResource" ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertEquals ( "aTestString" , classUnderTest . getSchemaName ( ) )
assertCompletions ( "color:\\n" + "  next:<*>" , "color:\\n" + "  next: blue<*>" , "color:\\n" + "  next: green<*>" , "color:\\n" + "  next: red<*>" )
assertThatCellReaderWasCalled ( )
assertEquals ( "璁＄����璇�" , 2 , rs )
assertArrayEquals ( new String [ ] { "DOB_20010101" , "DOB_20020202" , "DOB_NONE" } , matches ( query , Tag . VerificationFlag ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertEquals ( "/db/a/" , xmldbURI . resolveCollectionPath ( uri ) . toString ( ) )
assertEquals ( "Failed on i = " + i , x , ret )
Assert . assertNotNull ( out . getD15 ( ) )
Assert . assertFalse ( "Get Profile  returned no results" , json . isEmpty ( ) )
Assert . assertEquals ( decryptedStringExpected , decryptedStringActual )
Assert . assertEquals ( "��匕 3 丿�丕卅�" , t . format ( new Date ( 0 ) ) )
assertEquals ( expected , service . getTimestampInSeconds ( ) )
Assert . assertTrue ( response . getStatus ( ) == OK . getStatusCode ( ) )
assertEquals ( expected , out . toString ( ) )
assertFalse ( "empty data source contains records" , it . hasNext ( ) )
assertThat ( serializeWith ( dateTime , formatter ) , containsString ( dateTime . format ( formatter ) ) )
assertEquals ( "1,9223372036854775808,null" , s . serialize ( ( HttpPartSchema ) null , new Short [ ] { new Short ( 1 ) , Short . MAX_VALUE , Short . MIN_VALUE , null } ) )
assertEquals ( "DRIVER" , cli . driver )
Assert . assertEquals ( 2 , ret )
assertEqualsIgnoreLineEnding ( xmlString , "<?xml version='1.1' encoding='UTF-8'?><string>Hello World</string>" )
assertFalse ( "Configuration is empty" , plist . isEmpty ( ) )
assertEquals ( VALID_DIR , mockPrefHandler . getPref ( PREF_KEY_LAST_TRACE_DIR ) )
assertThat ( subtree . isEmpty ( ) , is ( true ) )
assertNotNull ( editingContext . getGlobalID ( ) )
assertNotNull ( result )
assertTrue ( isCorrectEnqLinkRequest )
assertTrue ( payload . needsBuild ( getProject ( ) ) )
runner . assertValid ( )
Assert . fail ( "exception expected" )
assertSelected ( get ( 0 ) )
assertEquals ( - 1 , aNumber . compareTo ( bNumber ) )
assertEquals ( scale ( value ) , ra . get ( ) . get ( ) )
assertNotNull ( p1 )
assertNotNull ( ds . getAvailableDataStoreList ( ) )
assertEquals ( "a" , example . getContent ( ) )
assertEquals ( Result . FAIL , name . apply ( item , - 1 ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "Operator is not set" , 0 , ss . size ( ) )
assertTrue ( "Custom principal should say authenticated caller has access to /protectedServlet, but says has not." , resp . contains ( "has access to /protectedServlet: true" ) )
assertNull ( "Required profiles is not null" , new KnopflerfishPlatformBuilderF300 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertEquals ( NaCl . Sodium . CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE , result )
assertNull ( song . getName ( ) )
assertThat ( result , is ( Boolean . valueOf ( true ) ) )
assertThat ( encryptedPasswordPass1 , not ( equalTo ( encryptedPasswordPass2 ) ) )
assertTrue ( "target matches" , testConf . get ( "target" ) . equals ( pom1 . getCanonicalPath ( ) ) )
assertEquals ( "en" , metadata . getLanguage ( ) )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "400 hectares" , 400 , "ha" , 400 * Area . HECTARE_TO_M2 , "m^2" , "area" ) )
assertEquals ( true , results . contains ( "[INSERT], Return=OK, 1" ) )
assertDepth ( "addSubTree" , callTree , expectResult )
assertArrayEquals ( expected , actual , DELTA )
Assert . assertNotNull ( dataSourceFactory )
assertEquals ( "nl:surfnet:diensten:hallo" , group20 . getEntry ( ) . get ( 0 ) . getEntry ( ) . get ( 0 ) . getValue ( ) )
assertEquals ( s , bs . getSheep ( ) )
assertEquals ( "Hello,Earth!" , config . getString ( DEFAULT_CONTAINER , "expression" ) )
assertThat ( response . getStatus ( ) , is ( 200 ) )
assertDownloadMessage ( distributionSet . getModules ( ) , controllerId )
assertThat ( r . hasUnrestrictedChild ( LIST , FsPath . create ( "/foo/bar" ) ) , is ( equalTo ( true ) ) )
assertEquals ( Unpooled . buffer ( ) , actual )
assertEquals ( expected , test )
assertTrue ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_2_BYTE_CHAR ) )
assertSqlCanBeParsedAndDeparsed ( statement )
Assert . assertEquals ( "Hello NAR World!" , app . sayHello ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , dataset . getDefaultModel ( ) . size ( ) )
assertEquals ( expected , cacheManager . getDefaultSizeMB ( ) , 1e-9 )
assertEquals ( "$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata#ESAllPrim(PropertyInt16)$metadata
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( actualEnums , is ( expectedEnums ) )
assertThat ( object , is ( nullValue ( ) ) )
assertEquals ( 1 , deployments . size ( ) )
assertEquals ( doc1 , io . getDocument ( q1 ) )
assertEquals ( LocalDate . now ( zone ) . getDayOfYear ( ) , test . getValue ( ) )
assertEquals ( expected [ i ] [ y ] [ x ] , ra . get ( ) . get ( ) , 0 )
assertMessageEventDefinition ( "end" , "message" )
assertEquals ( expected , this . component . getAllIds ( ) )
assertEquals ( expected , actual )
assertEquals ( "foo" , result )
assertFalse ( ic . imageEqualToReference ( screenshotImage , referenceImage , "google1-masked.png" , 0 ) )
mini . assertReadFile ( mini . getLocalFs ( ) , fileSpec , "1;one" , "2;two" )
Assert . assertTrue ( billingService instanceof BillingCalculation )
assertEquals ( expected , actual )
assertArgumentParserException ( args )
assertTrue ( true )
Assert . assertEquals ( value , tMap )
assertOut ( "var /** @type {string} */ a = unescape('%25')" )
assertThat ( ( TraceeBackend ) FieldAccessUtil . getFieldVal ( interceptor , "backend" ) , is ( Tracee . getBackend ( ) ) )
assertTrue ( page . asXml ( ) . contains ( "Welcome" ) )
assertEquals ( 1 , groupsToBeProxied . size ( ) )
assertEquals ( layerId , result )
assertEquals ( 1 , saved . getDocUpsertedId ( ) . intValue ( ) )
assertFalse ( session . getNode ( "/lockable" ) . isLocked ( ) )
assertThat ( isTransactionRelated , is ( false ) )
assertFalse ( subject . isShortHand ( ) )
assertTrue ( ( Boolean ) result )
assertThat ( ClockInterval . parseISO ( "7:20/24:00:00,000" ) , is ( interval ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertThat ( injector . getInstance ( Key . get ( TestConfiguration . class ) ) , is ( expectedConfiguration ) )
assertEquals ( "Hello ^there" , ResponseBodyInterpolator . interpolate ( "Hello ^there" , req ) )
assertSqlCanBeParsedAndDeparsed ( sql )
assertTrue ( xml . matches ( "(?i)<\\\\?xml.*?version=\\"1.1\\".*?\\\\?>.*" ) )
assertEquals ( value , copy . get ( Gender . FEMALE ) )
result . assertErrorFreeLog ( )
assertThat ( actual , is ( equalTo ( "/ab/CD/GH" ) ) )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
assertThat ( target , is ( notNullValue ( ) ) )
assertEquals ( "master" , job . getBranch ( ) )
assertEquals ( 0 , result . getTotalHits ( ) )
assertThat ( CollectionUtil . join ( list , ", " ) , is ( "\\"Aaa\\", \\"Bbb\\", \\"Ccc\\"" ) )
assertFailureValue ( "value of" , "[[A], [5]]" )
assertEquals ( "endLoc" , v . getEndLocation ( ) . getId ( ) )
Assert . assertEquals ( "Hallo 'Test'" , I18N . tr ( "helloQuotesParam" , "Test" ) )
assertEquals ( "[1,2,3]" , returnResult . get ( RETURN_RESULT ) )
assertThat ( val . isPresent ( ) , is ( true ) )
assertEquals ( expecteds , actuals )
assertEquals ( "logging" , decorator . name ( ) )
Assert . assertTrue ( "did not validate ascii key" , true )
assertEquals ( "TEST." , result )
assertLife ( playerB , 19 )
Assert . assertThat ( control , is ( - 7 ) )
assertNotNull ( connection )
assertEquals ( "Hello World" , aviatorEvaluator . execute ( "100000000000000000000.0/3.0" ) )
assertEquals ( 0 , searchResultsConverter . getNoOfExecutions ( ) )
assertNull ( mainSource )
assertNull ( request . getVisitorRegion ( ) )
assertEquals ( road , road2 )
assertEquals ( 0 , stats . getEventCount ( ) )
assertEquals ( "unsortable column must be unsorted" , SortOrder . UNSORTED , table . getSortOrder ( identifier ) )
Assert . assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ) . format ( dt ) , new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ) . format ( dueDate ) )
assertThat ( actual , is ( expected ) )
Assert . assertTrue ( lrsRes . getSuccess ( ) )
Assert . fail ( "Exception should have been thrown" )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , actual )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3,\\"value\\"]}" , result . get ( RETURN_RESULT ) )
assertEquals ( "john + superclass hook" , object . getName ( ) )
arrays . assertContainsSequence ( description , actual , sequence )
assertTrue ( result . getBounds ( ) . equals ( nonEmpty . getBounds ( ) ) )
assertSame ( expected , result )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( out . exists ( ) , is ( false ) )
assertEquals ( f1 , f2 )
assertEquals ( Arrays . asList ( "a" , "" ) , results )
assertEquals ( 9_000_000 , version )
assertEquals ( truth , deserialized )
assertNull ( song . getName ( ) )
assertEquals ( TestClass . class . getName ( ) , service . logger . getName ( ) )
assertFalse ( sut . execute ( request ) )
assertEquals ( "This is a value spread out across many adjacent " + "natural lines by escaped backslash character." , property )
assertEquals ( response . getStateToken ( ) , getSiteDefaultContent ( ) . getStateToken ( ) )
Assert . assertEquals ( true , retval )
assertTrue ( isPostListSortedByDate ( topicsPage . getContent ( ) , false ) )
assertEquals ( expectedPolicy , builtPolicy )
assertTrue ( true )
assertEquals ( obj . toString ( ) , " LPQueryServiceConfigW [DwServiceType=1, DwStartType=2, LpBinaryPathName=WChar. NullTerminated, LpLoadOrderGroup=WChar. NullTerminated, LpDependencies=4, S1, S2, S3, S4]" )
Assert . assertEquals ( ip . getIp ( ) , ipvo . getIp ( ) )
assertNotNull ( entity . getId ( ) )
assertNotNull ( field )
assertEquals ( "Alice" , conn . getNamespace ( "ontology/name" ) )
assertFalse ( permissionService . hasPermission ( 0 , null , "hasPermission" ) )
assertEquals ( API_ID , spanEvent . getApiId ( ) )
assertEquals ( 1 , bs . capacity ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertTrue ( "same day" , model . isSelected ( today ) )
assertEquals ( empty , emptySerializable . asOptional ( ) )
assertEquals ( Double . valueOf ( 10 ) , day . inverse ( ) )
Assert . assertEquals ( "title" , winphone . getTitle ( ) )
assertTrue ( connection ( ) . exists ( RDFS . Resource , RDF . type , ex2 , null , false ) )
assertEquals ( 0 , consumersListOfActiveWatchers . size ( ) )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertEquals ( f . apply ( first , second ) , f . apply ( first , second ) )
assertEquals ( "longitude" , variableName )
Assert . assertTrue ( out . verifyDigest ( digestPos , handshakeBytes , RTMPHandshake . GENUINE_FMS_KEY , 36 ) )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( OPERATION , EndpointUtil . decodeEndpointOperation ( result , true ) )
assertTrue ( validator . isValid ( "7992739871-x" , null ) )
assertEquals ( "Wrong list property" , list , conf2 . getProperty ( prop ) )
assertEquals ( "0 0 12 ? * 6 *" , result )
assertEquals ( functionImportList . size ( ) , 0 )
assertTrue ( new CronExpression ( "0 0 0 1 5 *" ) . nextTimeAfter ( after ) . equals ( expected ) )
assertSame ( logger1 , logger2 )
Assert . assertFalse ( s . containsPrivateIdentifiableInformation ( ) )
assertArrayEquals ( result , authed )
assertEquals ( "contains condition serialization is wrong" , expected , actual )
assertEquals ( "a b\\n" , found )
assertTrue ( new File ( "target/export11" ) . exists ( ) )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getActivities ( ) . get ( 0 ) , route ) , 0.01 )
assertThat ( accessor . isMutable ( ) , is ( false ) )
assertThat ( results , is ( new String [ ] { "\\"Hello, world!" } ) )
assertNotNull ( metadata )
assertThat ( read ( format , written ) , contains ( 1.25f ) )
assertEquals ( p1 . element0 ( ) . getPrivateKey ( ) , m2 . getPrivateKey ( ) )
assertNotNull ( deviceRegistration . getAttestationCert ( ) )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( ( a , b ) -> x + a + b ) . intValue ( ) )
assertEquals ( expected , actual )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "Testing label with noise" , label , rlg . generateLabel ( labels , TextChunkRepresentationManager . EncodingScheme . BILOU , null ) )
Assert . assertEquals ( 1 , integer . get ( ) )
assertThat ( cut . getNumberOfFields ( ) , is ( 2 ) )
assertEquals ( "case when (cat.toes = ?1) then (cat.id * ?1) when (cat.toes = ?2) then (cat.id * ?2) else ?3 end" , serializer . toString ( ) )
context . assertEquals ( patternStr . hashCode ( ) , pH . hashCode ( ) )
assertFalse ( decoded . content ( ) )
assertEquals ( asList ( trace ( mdcValues , marker , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "The value is not correct." , date , value )
assertEquals ( times , result )
assertEquals ( 0 , project . getBuildConfigurations ( ) . size ( ) )
assertEquals ( "Grants on " + change . getObjectName ( ) + " have been given to " + change . getRecipientList ( ) , change . getConfirmationMessage ( ) )
Assert . assertEquals ( expectedJsonTree , actualJsonTree )
assertEquals ( "TEXT" , sb . toString ( ) )
Assert . assertEquals ( expectedResult , result . getValue ( ) )
AssertEx . assertDoubleEquals ( 10.5 , dist )
assertEquals ( "SafetySwitch" , properties . getProperty ( "SafetySwitch" ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertTrue ( id . getValue ( ) . matches ( "urn:uuid:[-\\\\da-f]+" ) )
assertEquals ( 2 , context . getTableCount ( ) )
assertTrue ( "Should have released 2 bytes" , weakMap . size ( ) == 2 )
Assert . assertThat ( bs . getMassiveArray ( ) , is ( control ) )
assertEquals ( "Hello World" , stateful . getName ( ) )
assertEquals ( expectedClientConfig , actualClientConfig )
assertEquals ( "null" , sb . toString ( ) )
assertEquals ( true , result )
assertEquals ( "fooValue" , entity . getValue ( ) )
assertEquals ( 0 , result )
assertEquals ( expResult , result )
assertSerializeDeserialize ( ext )
context . assertEquals ( 1 , types . size ( ) )
assertDecimalEquals ( dup . getValue ( 1 ) , 0 )
assertTrue ( denormalizer . denormalization ( "studentSectionAssociation" ) . create ( entity ) )
assertNull ( rpcException . getErrorCode ( ) )
assertThat ( ClockInterval . parseISO ( "12:20/24:00:00,000" ) , is ( interval ) )
assertEquals ( "foo" , fStep . getHtmlId ( ) )
assertFalse ( pgql . parse ( query ) . isQueryValid ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertContains ( e . getMessage ( ) , "'name'" )
assertEquals ( 2 , event . getValues ( ) . size ( ) )
Assert . assertEquals ( HiveRunnerConfig . TIMEOUT_RETRIES_DEFAULT , config . getTimeoutRetries ( ) )
assertEquals ( expected , chunks )
assertTrue ( "hasChildChanged() returns true for updated child" , _scs . hasChildChanged ( METRIC_NAME ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( request , copyBuilder )
assertEquals ( expResult , result )
assertEquals ( name , user . getName ( ) )
assertTrue ( ic . imageEqualToReference ( screenshotImage , referenceImage , "google1.png" , 0 ) )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "size[/size]" , defaultOptions ( ) ) )
Assert . assertEquals ( activity , resolved )
assertTrue ( requestResult )
Assert . assertEquals ( "should have overwritten file" , string1 , actual )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
Assert . assertEquals ( config . getTheClazz ( ) , Object . class )
assertEquals ( "default" , leaderTestKit . getShard ( TEST_PATH ) . getNodeIdentifier ( ) )
assertSame ( extractor , result )
assertFalse ( row . equals ( otherRow ) )
iterablesWithCaseInsensitiveComparisonStrategy . assertContains ( someInfo ( ) , actual , array ( "LUKE" , "YOda" , "LeIA" ) )
assertEquals ( "_cat/allocations?h=shards,disk.indices,disk.used" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( lines , hasSize ( 1 ) )
assertEquals ( 101 , keyCount . get ( ) )
assertEquals ( "Result" , dt . getDatatypeURI ( ) , RDFS . xsddouble )
assertEquals ( "%level - %m%n" , layout . getConversionPattern ( ) )
assertTrue ( analysis . isTestPassing ( ) )
assertEquals ( "recoveredResult must be Success(42)" , recoveredResult , new Try . Success < > ( 42 ) )
assertEquals ( 1 , gpxEntries . size ( ) )
assertTrue ( drugs . isEmpty ( ) )
assertThat ( result , contains ( likeTriple ( uri ( "http://example.org/items/Bill?blah" ) , ANY , ANY ) ) )
assertTrue ( true )
assertSame ( Code . ERROR , res . code ( ) )
assertLine ( "great lakes brewery" , b , false )
assertTrue ( schemaRegistry . getHostnameVerifier ( ) . verify ( "" , null ) )
assertEquals ( msg , myMessage )
assertEquals ( RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "ItemDocument.rdf" ) ) , model )
assertNull ( "Certificate should be null" , cert )
assertEquals ( expectedMessageString , rawTranslation )
assertSame ( MockChooser1 . class , delegate . getClass ( ) )
assertThat ( new JcrValue ( factories , PropertyType . DATE , date ) . getDouble ( ) , is ( ( double ) date . getTime ( ) ) )
Assert . assertEquals ( "START TRANSACTION WITH CONSISTENT SNAPSHOT;" , text )
assertEquals ( expected , statement . toString ( ) )
assertEquals ( "{\\"thetag\\":{\\"group\\":\\"b\\",\\"name\\":\\"a\\"}}" , s )
assertEquals ( "boolean" , result )
assertThat ( generated , is ( "{ item <eh:/P> ?v1.OPTIONAL { ?v1 <eh:/Q> ?v2 }\\nOPTIONAL { ?v2 <eh:/R> ?v1 . }\\nOPTIONAL { ?v2 <eh:/P> ?v1 . }\\nOPTIONAL { ?v1 <eh:/Q> ?v2 }\\nOPTIONAL { ?v2 <eh:/R> ?v1 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v2 <eh:/Q> ?v1 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v2 <eh:/P> ?v1 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTIONAL { ?v1 <eh:/P> ?v2 . }\\nOPTION
Assert . assertFalse ( isOk )
assertEquals ( path , "/module/motechmodule/addfacility" )
assertEquals ( "tset a siht" , out )
assertThat ( beanClass , typeCompatibleWith ( ApplicationDecorator . class ) )
assertTrue ( true )
assertThat ( lines . size ( ) , is ( 4 ) )
assertNotNull ( method )
assertEquals ( expected , passwordEncoder . encode ( plainText ) )
assertEquals ( 1.0 , response , 0.0 )
Assert . assertEquals ( ServerParse . REPLACE , sqlType )
assertEquals ( rep , rep1 )
assertEquals ( subThing , newThing )
assertEquals ( ByteBufUtil . hexDump ( newEntry3 ) , ByteBufUtil . hexDump ( res ) )
assertEquals ( expectedBodies , found )
assertEquals ( descriptor , content )
assertEquals ( "Successful authentication message should contain username 'successfulUser1'" , "successfulUser1" , successfulToken . getUsername ( ) )
Assert . assertEquals ( Double . MAX_VALUE , s . getPriority ( ) , 0.001 )
assertEquals ( 0 , count ( graph . vertices ( ) ) )
assertEquals ( "7::" , result )
assertNotNull ( result )
assertEquals ( Bytes . asList ( new byte [ ] { 3 } ) , bytes ( producer . getValue ( ) . next ( ) ) )
assertEquals ( expectatedMessage . trim ( ) , e . getMessage ( ) . trim ( ) )
assertEquals ( true , context . isResult ( ) )
assertNotNull ( this . filter )
assertEquals ( "2" , getValue ( ) )
assertEquals ( 5. , Solutions . bestOf ( solutions ) . getCost ( ) , 0.01 )
assertEquals ( null , result )
assertEquals ( "HttpAuthenticationFactory should be created" , TEST_AUTHENTICATION_FACTORY_NAME , ops . create ( TEST_AUTHENTICATION_FACTORY_ADDRESS , TEST_SECURITY_DOMAIN_ADDRESS ) . getRealmName ( ) )
assertNotEquals ( id1 , null )
assertEquals ( 6 , tokens . size ( ) )
QualityExpectationsAsserts . assertExpected ( aggregatedExpectations , partsExpectations )
Assert . assertEquals ( obj , obj2 )
switchyard . assertModelValid ( )
assertThat ( nonSerializableResult , is ( notNullValue ( ) ) )
assertions . isNull ( )
Assert . assertTrue ( _c . canConvertTo ( Byte . TYPE ) )
assertEquals ( "<table> <colgroup> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col> <col</</</</</</</
Assert . assertEquals ( "Hello
Assert . assertEquals ( json , writer . toString ( ) )
assertEquals ( "Options should be equal to itself" , options , options )
assertTrue ( objAssociation . getConsistentEdmAssociationList ( ) . size ( ) > 0 )
assertEquals ( "column_after" , statement . getCatalogName ( ) )
assertFailureCatalogContains ( AsyncSuspendWithoutForget . class , "should use complementary annotation.*(PUT|GET)" )
Assert . assertNotNull ( "ThreadName value is missing" , jsonObject . get ( "thread_name" ) )
Assert . assertEquals ( new URI ( url + "/" + suffix ) , UriUtils . buildNewURI ( new URI ( url ) , suffix ) )
assertFalse ( result . isPresent ( ) )
assertTrue ( check )
assertEquals ( "PercolateQueryBuilder should be constructed" , percolateQueryBuilder , percolateQueryBuilder . build ( ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertTrue ( "XML not written" , result . startsWith ( "<?xml version=\\"1.0\\"" ) )
Assert . assertEquals ( "should have found file permissions" , FilePermissionEnum . READ , enumVal )
assertEquals ( "group:artifact:1.0.0:jar:compile" , model . toString ( ) )
assertTrue ( "Expected text not found: " + searchInput , expectedTextFound )
Assert . assertEquals ( "eins zwei\\nfuenf" , result )
assertEventFired ( DeploymentScenario . class , 1 )
Assert . notNull ( wschu )
assertEquals ( "Display button should have been invoked" , "Hello world!" , display . getText ( ) )
assertEquals ( DummyLayout . DUMMY , teeOut . toString ( ) )
assertFalse ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
Assert . assertFalse ( "The filter should not have been initialized" , TestFilter . INITIALIZED )
assertEquals ( "1388538000000" , partition )
assertEquals ( "<csv-set><csv-record number=\\"1\\"><name>Erika Mustermann</name><email>e.m@ex.org</email></csv-record><csv-record number=\\"2\\"><name>Max \\"The Man\\" Mustermann</name><email>m.m@ex.org</email></csv-record></csv-set>" , result )
assertEquals ( expectedDateString , actualDateString )
assertEquals ( 2 , violations . size ( ) )
assertEquals ( "http://localhost:8080/a/b/c?a=x&b=y#hi" , u . toString ( ) )
assertOut ( "<Button label=\\"Click me\\"></Button>" )
assertEquals ( "Hello" , ( ( BizException ) read ) . getMessage ( ) )
Assert . assertEquals ( "hello" , result . hello ( ) )
assertThat ( entityFromElasticSearch , is ( notNullValue ( ) ) )
assertThat ( actualAlgorithms , IsIterableContainingInAnyOrder . containsInAnyOrder ( expectedAlgorithm ) )
Assert . assertNotNull ( foundProject )
Assert . assertEquals ( bd , value )
assertEquals ( "Req: " + req , req . toString ( ) )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertEquals ( "updatedName" , list . get ( 0 ) . getName ( ) )
assertTrue ( "yahoocn contacts are empty" , contacts . size ( ) > 0 )
assertEquals ( 3 , new NopolExample ( ) . getMax ( list ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( object , is ( notNullValue ( ) ) )
assertNotNull ( categories )
assertEquals ( output , processed )
Assert . assertEquals ( vector , new Vector ( - 10 , - 10 , - 10 ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( "Message in conversation 1" , checkMessage . getMessage ( ) )
assertEquals ( - 1L , nodeId . getId ( ) )
assertEquals ( mockResponse , testResponse )
assertMockEndpointsSatisfied ( )
assertEquals ( 10 , result . getTotalCount ( ) )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( ) )
assertTrue ( violation )
assertEquals ( expResult , result )
assertEquals ( "123456" , resp . getPrimayKey ( ) )
assertEquals ( 3 , types . size ( ) )
assertEquals ( uri1 , uri2 )
assertThat ( t1 . getAtoms ( ) , is ( Arrays . copyOfRange ( ( int ) 4 , ( int ) 3 ) ) )
Assert . assertEquals ( expected , pluginForREST . getElementType ( "Test" , false ) )
assertEquals ( deleteReason , hpi . getDeleteReason ( ) )
assertTrue ( logger . isWarnEnabled ( ) )
assertNotNull ( amqpsConnection )
assertEquals ( "2001:08:12" , dtm . getCurrentNode ( ) . getValue ( ) )
assertTrue ( filter . isActive ( ) )
assertThat ( moved . getPlots ( ) , is ( empty ( ) ) )
assertNotNull ( consumeInfoList )
assertEquals ( "name" , name )
assertNotNull ( logStream1 )
assertEquals ( set1 , set2 )
assertFalse ( syncOpt . isDbVersionPresent ( ) )
assertThat ( read ( tmp ) , is ( equalTo ( "Helles酶y" ) ) )
assertEquals ( resource , cache . getResourceTypeByID ( mock . getResourceId ( ) ) )
Assert . assertEquals ( SubBean . class , ReflectionUtils . getObjectPropertyGeneric ( myBean , myBean . getClass ( ) . getDeclaredField ( "t" ) ) )
assertEquals ( expectedResult , result , 0.00001 )
assertEquals ( "Width should have been preserved" , oldStyle , newStyle )
assertEquals ( HELLOWORLD_URI , uri . toASCIIString ( ) )
assertEquals ( "Should return creationTime from HttpSession" , 100l , session . creationTime ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 7 , warnings . size ( ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" } , remaining )
Assert . assertTrue ( edOrgContextRights . isEmpty ( ) )
Assert . assertTrue ( "Number of entities: " + count , count == 2 )
assertEquals ( VALID , credentials . getStatus ( ) )
bytes . assertLessThan ( description , actual , expected )
assertEquals ( testPlaylist , playlist )
Assert . assertEquals ( expr , "Hello \\nDimitri" , value )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
Assert . assertNull ( person )
assertEquals ( "John Doe" , actual )
Assert . assertEquals ( actualValue , "multipart/form-data" )
assertEquals ( "瀛ゅ�茶����" , u . getName ( ) )
assertEquals ( "bar" , indexSpec . getName ( ) )
assertNotEquals ( reindex1 , reindex2 )
assertEquals ( "Concrete Action" , value . asIs ( ) )
Assert . assertTrue ( "The re-generated and the read record do not match." , k1 . equals ( k2 ) && v1 . equals ( v2 ) )
assertNotNull ( scrollUI )
assertEquals ( s , r )
assertEquals ( "1.407" , version )
assertEquals ( file , VirtualDirTgz . getFilenameFromPath ( file ) )
assertEvidence ( evidence , 1 , 1 , 0 , 13 )
assertEquals ( "A,B" , f . print ( MoneyFormatter . of ( MoneyPrinter . class ) ) )
assertEquals ( "Damage!" , text )
assertThat ( validator , is ( notNullValue ( ) ) )
assertThat ( arguments . resolve ( null , null ) , is ( emptyIterable ( ) ) )
assertTrue ( Misc . containsNulls ( collection ) )
assertEquals ( Arrays . asList ( "1970-01-01" , "1970-01-02" , "1970-01-02" ) , getOutputStrings ( ) )
assertTrue ( method . getReturnType ( ) == Priority . class )
assertions . containsOnly ( values )
rule . assertScenarioEnded ( )
assertEquals ( Integer . valueOf ( 5 ) , reference . getRetries ( ) )
assertNotNull ( dao )
assertThat ( content , is ( equalTo ( numberOfElements ) ) )
assertThat ( getValues ( query ( "bla" , "mntner" ) , "key" ) , contains ( "bla-bla-mnt" , "bla-bla-mnt" , "bla-bla-mnt" ) )
assertTrue ( closed . await ( 5 , SECONDS ) )
Assert . assertNotNull ( req )
assertEquals ( expectedTimestamp , actualTimestamp )
assertEquals ( "PatientInformation<PatientInformation>" , s . toString ( ) )
assertEquals ( 401 , response . statusCode ( ) )
Assert . assertEquals ( 1 , this . sqlgGraph . traversal ( ) . E ( ) . has ( T . label , "A" ) . count ( ) . next ( ) . intValue ( ) )
assertEquals ( "whatever" , proxy . echoBack ( "whatever" ) )
assertEquals ( i1 , i2 )
assertArrayEquals ( new Object [ ] { 1 , 2 , 3 } , e . toList ( ) . toArray ( ) )
assertEquals ( documentoVO , infoDocumentoCSV )
assertEquals ( 0 , report . getItems ( ) . size ( ) )
assertTrue ( constraint . fulfilled ( iContext ) )
assertCoordinates ( 0 , TOP_Y - 1 )
Assert . assertEquals ( "Node{edge=FOO, value=-, edges=[]}" , node . toString ( ) )
org . junit . Assert . assertEquals ( expected , actual )
assertEquals ( clazz , request . getTargetClass ( ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( children . isEmpty ( ) )
assertions . isLessThan ( new Integer ( 10 ) )
assertTrue ( vosManagerEntry . getDirectAdmins ( sess , createdVo ) . contains ( user ) )
Assert . assertArrayEquals ( bytes , result )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadCaller ( ) ) . isErrorEnabled ( ) )
assertEquals ( USER_NAME , spec . getUserPrefs ( ) . get ( USER_NAME ) )
assertMockEndpointsSatisfied ( )
assertEquals ( v , fit . getVelocity ( ) , 0.01 )
assertNull ( loadedFile )
assertEquals ( expectedDate , formatDate ( "yyyyyy-MM-dd HH:mm" , result ) )
assertEquals ( list , shrinksOnSize ( "A" , "B" , "C" , "D" ) )
Assert . assertEquals ( "_ANYFIELD_ == 'email' && ANOTHER_FIELD == 'blah' && filter:includeRegex(FIELDA, '.*all_.*')" , JexlStringBuildingVisitor . buildQuery ( result ) )
assertEquals ( result , "10:15 AM" )
assertSame ( injectable , injectionTarget . injectable )
assertMockEndpointsSatisfied ( )
assertNull ( loggedInUser )
assertEquals ( asList ( foo4 ) , results )
assertTrue ( v1 . equals ( v2 ) )
assertEquals ( 3 , result . get ( ) . getList ( ) . size ( ) )
assertNotNull ( dialectConverterForEveryoneElse . get ( "brat" ) )
assertThat ( type , is ( equalTo ( Integer . class ) ) )
assertTrue ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
assertThat ( bar , is ( 0 ) )
assertThat ( hasJsonPath . matchesSafely ( json ) , is ( false ) )
assertEquals ( CompressionType . Zip , compressionType )
assertEquals ( expected , output )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatLocalSocket ( socket ) )
Assert . assertEquals ( registry1 , registry2 )
assertTrue ( inactiveQuestion . isInactiveForOneMonth ( ) )
Assert . assertNotNull ( counterManager )
assertThat ( registry . getPlugins ( ) , hasItem ( firstPlugin ) )
assertTrue ( valid )
assertEquals ( expResult , result )
assertEquals ( "test" , request . getTableName ( ) )
assertEquals ( "name" , name )
assertEquals ( "" , result )
Assert . assertNotNull ( rb )
assertEquals ( opponent . getMinions ( ) . get ( 0 ) . getSourceCard ( ) . getCardId ( ) , "minion_giant_disappointment" , "The opponent should have a Disappointment after Exampler is summoned" )
assertThat ( changes . isEmpty ( ) , is ( true ) )
assertEquals ( expected , dotfileWriter . formatPCollectionNodeDeclaration ( inputCollection , jobPrototype ) )
assertAxisEquals ( 0.9 , 10.0 , new double [ ] { 0.9 , 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 } , new String [ ] { "0" , "2" , "4" , "6" , "8" , "10" } , axis )
assertNotNull ( pi . getId ( ) )
assertEquals ( "1f8ac10f23c5b5bc1167bda84b833e5c057a77d2" , new String ( Hex . encodeHex ( message ) ) )
assertEquals ( 19 , maximum )
assertTrue ( myMessage . toString ( ) . contains ( "FOO=20120922-11:00:00\\00134=22\\00149=foo" ) )
assertThat ( response , is ( equalTo ( resource ) ) )
assertThat ( getResponseStatus ( DOMAIN1_CLUSTERS_HREF + "/cluster1" ) , equalTo ( HTTP_NOT_FOUND ) )
assertEquals ( 1 , events . size ( ) )
assertResultSet ( res )
assertThat ( result , is ( principalCollection ) )
Assert . assertEquals ( operator . getJobExecution ( id ) . getBatchStatus ( ) , BatchStatus . ABANDONED )
assertNull ( actualNativeClient )
assertThat ( songs . getTotalElements ( ) , is ( equalTo ( 2L ) ) )
assertions . containsSequence ( 'e' , 'f' , 'g' , 'h' )
assertEquals ( expected , actual )
assertThat ( actual , is ( expected ) )
Assert . assertTrue ( lt . getCertificate ( ) != null )
assertEquals ( expResult , result )
assertEquals ( "The world loves the loser." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertEquals ( icms10 , icms . getIcms10 ( ) )
assertThat ( unlocked . newLockedObjectWithPrivateConstructor ( ) . getMyField ( ) , equalTo ( "initialized" ) )
assertEquals ( - 99 , result )
assertThat ( context , body . containsKey ( "time" ) , is ( true ) )
assertEquals ( 1 , i )
assertEquals ( expResult , result )
assertFalse ( "Two violations with different begin column should result in not equal nodes" , node1 . equalsNode ( node2 ) )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( "/genPath" , path )
assertFalse ( job1 . addDependingJob ( new ControlledJob ( conf ) ) )
assertThat ( results , containsInAnyOrder ( "Hello, world!" ) )
assertThat ( options . getHelp ( ) , is ( "usage: s3.mapreduce.client.Options" ) )
assertEquals ( count , notifier . getNotifications ( ) . size ( ) )
Assert . assertEquals ( "RuleTable       This is my rule name" , result )
assertThat ( underTest . matches ( context ) , is ( true ) )
assertThat ( hasJsonValue . matchesSafely ( json ) , is ( false ) )
assertTrue ( drl . indexOf ( "emptyFreeFormLine" ) > 0 )
assertFalse ( result )
Assert . assertEquals ( 13L , value )
Assert . assertNotNull ( browser . findElement ( By . id ( "form" ) ) )
assertEquals ( KnightScorer . targetScores [ 1 ] , scorer . scorePosition ( board , context ) )
service . callCounter . assertCalls ( "{findIds=1, getItems=1}" )
assertEquals ( args , ImmutableList . of ( "-y" , "-v" , "error" , "-i" , "input" , "-preset" , "a" , "-fpre" , "b" , "-vpre" , "c" , "-apre" , "d" , "-spre" , "e" , "output" ) )
assertThat ( d1 . between ( d2 ) , is ( d2 ) )
assertQuery ( false , "deep-equal(/test/*[1], /test/*[2])" )
Assert . assertTrue ( Math . abs ( valueMonteCarlo - valueAnalytic ) < 1E-02 )
assertEquals ( Arrays . asList ( "" , "A" ) , list )
Assert . assertNull ( doc . getLastPublicationDate ( ) )
assertThat ( ct . getWeekdays ( TextWidth . WIDE , OutputContext . FORMAT ) . print ( Weekday . MONDAY ) , is ( "1" ) )
Assert . assertEquals ( expected , actual )
Assert . assertArrayEquals ( new byte [ ] { 1 , 2 , 3 , 4 } , argb . getBytes ( ) )
assertEquals ( "b" , r . get ( "name" ) )
assertEquals ( originalByteStrings , sortedByteStrings )
assertTrue ( CsrfProtectionRefererFilter . isAllowedUri ( uris , "https://" + uuid + ".com" , isGetRequest ) )
assertThat ( translatedStatement , is ( expectedTranslatedStatement ) )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertResultSet ( res )
assertThat ( ResourcePermissions . getInstance ( systemPermissionName ) , sameInstance ( resourcePermission ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
assertEquals ( result1 , result2 )
Assert . assertEquals ( "[3, 2, 6, 4, 7, 1, 5]" , result . toString ( ) )
assertNotNull ( transaction )
assertEquals ( expectedNormalized , actualNormalized )
assertTrue ( pojo . testService . interrupted . get ( ) )
assertFalse ( g1 . equals ( g2 ) )
Assert . assertEquals ( 3 , books . size ( ) )
Assert . assertEquals ( "should have returned the tag not found" , 0 , irodsTagValues . size ( ) )
Assert . fail ( "Expected a handler exception due to incompatible policy" )
objects . assertIsEqualToComparingFieldByFieldRecursively ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertThat ( lines . size ( ) , is ( 4 ) )
assertTrue ( exists )
assertTrue ( "Handler wasn't run" , ran . get ( ) )
assertThat ( uut . getColaInjectorFields ( ) , hasItems ( "i1" , "i2" ) )
assertFalse ( zero . exec ( input ) )
assertTrue ( theSelectedPoolsWere ( poolsWithHostValuesH0AndH1 ( ) ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "eventMessage" ) )
assertThat ( longProperty , is ( equalTo ( 42L ) ) )
Assert . assertEquals ( ServerParse . SELECT , sqlType )
assertFalse ( "Workflow should not be in add mode when workflowstate is selected" , actual )
assertTrue ( b . isTrue ( ) )
assertThat ( a . overlaps ( b ) , is ( false ) )
Assert . assertNull ( dataModelLoadBalancer )
Assert . assertEquals ( "ds.test.fromHome=withLove\\ndeltaspike_ordinal=123" , ConfigResolver . getConfigSources ( ) . get ( "ds.test.fromHome" ) . get ( "ds.test.toHome" ) . get ( "ds.test.directory" ) . get ( "ds.test.dir" ) . toString ( ) )
Assert . assertNotNull ( "wallets not null" ,wallets )
assertNull ( client . getJob ( id ) )
assertEquals ( "65" , result . toString ( ) )
assertEquals ( 4 , shrinks . size ( ) )
assertThat ( tokens . matches ( BasicTokenizer . WORD , BasicTokenizer . WORD ) , is ( true ) )
assertEquals ( TEST_STRING , actual )
assertFalse ( b )
assertEquals ( expectedFont [ i ] , foInline . getAttribute ( "font-family" ) )
assertThat ( domainCreatePermissions_post , is ( domainCreatePermissions_pre ) )
Assert . assertTrue ( Precision . equals ( 7.0 , MathArrays . distanceLinf ( p1 , p2 ) , 1 ) )
assertEquals ( e . getFreeVars ( ) , "b" )
assertEquals ( HttpStatusCodes . TEMPORARY_REDIRECT . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( TestConstants . TABLE_NAME , proxy . getTableName ( ) )
VertxAssert . assertEquals ( "The retrieval of the specified document resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
Assert . assertNotNull ( cumulates )
assertEqualTokenFeatureLengths ( "ahgsfdajhgsfd����涓��������������广�ㄥ�笺�般����������" , tokenizer )
assertEquals ( "find by created date not returning any events" , 1 , eventRepos . findByCreatedBetween ( now - 86400000 , now + 86400000 ) . size ( ) )
assertEquals ( e . getFreeVars ( ) , "f" )
TestCase . assertTrue ( attribute . match ( t ) )
assertEquals ( 200 , response . getStatus ( ) )
assertMapping ( node , 0 , 15 , 0 , 0 , 16 )
assertEquals ( - 1 , fixture . readShort ( ) )
assertEquals ( Duration . of ( 4 , SECONDS ) , d )
assertTrue ( BufferedImageComparer . isRGBSimilar ( sourceImage , img ) )
assertArrayEquals ( "a\\r\\n.\\r\\n" . getBytes ( "US-ASCII" ) , out . toByteArray ( ) )
Assert . assertEquals ( 18 , i )
assertEquals ( "c\\n" , found )
assertThat ( a . getValue ( ) , equalTo ( "A1" ) )
assertThat ( endpoints , containsInAnyOrder ( ENDPOINT_1 , ENDPOINT_2 ) )
assertEquals ( new BigDecimal ( 12345 ) , result )
assertTrue ( allOf . matches ( "Yoda" ) )
assertEquals ( seconds + ( ( minutes * DateUtils . MILLIS_PER_MINUTE ) + ( hours * DateUtils . MILLIS_PER_HOUR ) + ( ( aCalendar . get ( Calendar . DAY_OF_YEAR ) - 1 ) * DateUtils . MILLIS_PER_DAY ) ) / DateUtils . MILLIS_PER_SECOND , testResult )
assertThat ( resourcePermissions . isEmpty ( ) , is ( true ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertEquals ( expected , s . split ( "B-X I-X O-X I-X" ) )
Assert . assertNotNull ( car . getIocResult ( ) )
assertSame ( toBeThrown , ex . getCause ( ) )
assertEquals ( "Bob123" , query ( ) . from ( cat ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob123" ) . select ( cat . name ) . fetchFirst ( ) )
Assert . assertNotNull ( path )
assertTrue ( applications . size ( ) > 0 )
assertEquals ( 0 , query . getAuditEntries ( ) . size ( ) )
response . then ( ) . assertThat ( )
Assert . assertEquals ( true , retval )
assertTrue ( "objectClass should still be in the registry after move failure" , getObjectClassRegistry ( ) . contains ( OID ) )
assertTrue ( response . getHeaders ( "Test" ) . containsKey ( "Test" ) )
assertNotNull ( fsShell )
Assert . assertTrue ( timePassed > 19 * 1000 )
assertEquals ( "public enum Company { Company.name = \\"name\\"}" , ed . toString ( ) )
assertEquals ( in . readObject ( ) . getClass ( ) , Bean . class )
assertThat ( xoManager . getDatabasePath ( "test" ) , is ( "test" ) )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-bs" , "127.0.0.1:8000" , "-f" , "-l" , "1" } ) )
assertNotNull ( projects )
assertEquals ( "Something()" , builder . getResult ( ) )
assertEquals ( "A Session with an HTTPSession from the Request should have been created because create parameter " + "was set to false" , httpSession , request . session ( false ) . raw ( ) )
assertEquals ( 0 , rm . getResultsList ( ) . size ( ) )
assertEquals ( "void f(void* target) {\\n" + "    ((void (*)(void)) target)();\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertThat ( userPermissions , hasItem ( permission ) )
Assert . assertTrue ( bnet . getConditionalDistributionTimeT ( var ) . equalDist ( dynamicNB . getConditionalDistributionTimeT ( var ) , 0.05 ) )
assertEquals ( "www.leveluplunch.com/java/examples/java/examples/" , uri . toString ( ) )
assertEquals ( 1 , services . size ( ) )
Assert . assertEquals ( getElement ( "PID.6" ) , handler . getFillerOrderNumber ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertEquals ( false , result )
assertFalse ( validator . validate ( EntityNames . STUDENT_COHORT_ASSOCIATION , cohortIds ) . equals ( cohortIds ) )
Assert . assertNotNull ( result )
assertNotEquals ( e1 , e2 )
assertEquals ( "foobar" , scan . getFieldValue ( "field1" ) )
assertThat ( sampleEntities . size ( ) , is ( equalTo ( 30 ) ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongValue ( ) )
assertMockEndpointsSatisfied ( 1 , TimeUnit . MINUTES )
assertEquals ( i , 44 )
assertNull ( lookup )
assertEquals ( 0 , rule . match ( langTool . getAnalyzedSentence ( "Walk on the footpath." ) ) . length )
assertNotNull ( connector )
assertEquals ( "<csv-set><csv-record number=\\"1\\"><firstname>Tom</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>4</age><country>Ireland</country></csv-record><csv-record number=\\"2\\"><firstname>Mike</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>2</age><country>Ireland</country></csv-record></csv-set>" , result . getResult ( ) )
assertEquals ( errorMsg , dataXException . getMessage ( ) )
assertNotNull ( Channel . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Got children" , node . getChildren ( ) . isEmpty ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertResultSet ( res )
Assert . assertEquals ( 0 , list . getHeaderPosition ( ) )
assertTrue ( "PForDeltaDocSet No Exception CompressionRatio detected" , failed )
assertTrue ( li . handleFault ( ) )
assertEquals ( 404 , delete . getStatus ( ) )
assertArrayEquals ( arr , sort . getArr ( ) )
assertTrue ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( - 1 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
Assert . assertNotNull ( queryName )
assertEquals ( expected , uri )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "connectionNameList" , MULTIPLE_IBM_MQ_BROKERS ) )
assertions . isLessThan ( new Integer ( 2 ) )
assertThat ( drbdXml . getPossibleChoices ( option ) , is ( new Value [ ] { new StringValue ( ) , new StringValue ( "/usr/lib/drbd/crm-primary-on" ) } ) )
assertFalse ( n . exists ( ) )
assertNull ( next )
assertThat ( inSignature , is ( true ) )
Assert . assertArrayEquals ( bytes , result )
assertEquals ( expectedResults , actualResults )
assertNotNull ( result )
assertTrue ( collection . containsAll ( input . toArray ( ) ) )
Assert . assertThat ( ( Long ) graphDatabase . getReferenceNode ( ) . getProperty ( "test" , "not set" ) , not ( "shouldRollbackTransactionOnException" ) )
assertNotNull ( EntityProvider . readServiceDocument ( in , "application/atom+xml" ) )
assertEquals ( "this is the book" , source . getValue ( "title" ) )
assertOut ( "goog.provide('foo.bar.baz.A');\\n\\n/**\\n * @constructor\\n */\\nfoo.bar.baz.A = function() {\\n\\tvar self = this;\\n\\tif (a) {\\n\\t\\tfor (var /** @type {Object} */ i in obj) {\\n\\t\\t\\tdoit();\\n\\t\\t}\\n\\t}\\n};" )
assertOut ( "public class A {\\n\\tpublic function foo1():Object {\\n\\t\\treturn null;\\n\\t}\\n\\tpublic final function foo1a():Object {\\n\\n\\t\\treturn null;\\n\\t}\\n\\tpublic override function foo1b():Object {\\n\\t\\treturn " + "super.foo1b();\\n\\t}\\n\\tpublic static function foo7(value:Object):void {\\n\\t}\\n\\tpublic static function foo7(value:Object):void {\\n\\t}\\n}" )
assertEquals ( expected , exts )
assertThat ( restored , is ( p ) )
assertNull ( result )
assertEquals ( callsAdd , fct . getSize ( ) )
Assert . assertEquals ( source , dist )
assertFalse ( oldid != id )
Assert . assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertTrue ( StringUtils . isNotBlank ( content ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
BaseTest . assertEqualsUnordered ( "find(po)" , quads1 , quads2 )
assertThat ( list . get ( 0 ) , is ( 1 ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertRequestWithCookie ( endpoint , HttpMethod . GET , name , value )
assertEquals ( 1 , tagInode . stat ( ) . getGid ( ) )
assertEquals ( 307 , cr . getStatus ( ) )
assertThat ( PlainTimestamp . of ( date , time ) . getCalendarDate ( ) , is ( date ) )
assertEquals ( 0 , loaded . size ( ) )
assertNotNull ( facility )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertNotNull ( plasmapheresis . getId ( ) )
assertTrue ( page . getBody ( ) . asText ( ) . indexOf ( "Inserting children" ) != - 1 )
Assert . assertTrue ( "duplicate topic names should not be removed" , topicmap1 . getTopics ( ) . size ( ) == 2 )
Assert . assertFalse ( validator . validate ( EntityNames . TEACHER_SCHOOL_ASSOCIATION , teacherSchoolAssociations ) . equals ( teacherSchoolAssociations ) )
Assert . assertEquals ( 0 , points . size ( ) )
assertEquals ( "" , result )
assertEquals ( String . format ( "{\\"now\\":\\"%s\\"}" , now . toString ( ) ) , gson . toJson ( new Holder ( now ) ) )
assertEquals ( "http://example.com/gadget?fallback=http%3A%2Fexample.com%2Fresource" , uri . getFallbackUrl ( ) )
assertFalse ( list . isEmpty ( ) )
assertEquals ( "谩茅锚玫盲农���玫�" , slug )
assertThat ( archetypeElementVO , is ( archetypeElement ) )
assertEquals ( compareEncode , encode2 )
assertEquals ( expectedResItem , response . getUnexpected ( ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertEquals ( 1 , deleteOldFormsProtectedIdsScheduledTask [ 0 ] )
Assert . assertEquals ( factory . getFilters ( ) . get ( factory . getFilters ( ) . size ( ) - 1 ) , testParser )
assertEquals ( dateTime , esTimestampFormatted )
assertEquals ( "parameterExample.xsl" , s )
assertEvents ( context , "GreetingService not stopped or StoreReference not restarted." , true )
assertEquals ( expectedActivityCosts + expectedTransportCosts , iCosts , 0.01 )
assertEquals ( TEST_IOS_APP_METADATA , iosApp . getMetadataAsync ( ) . get ( ) )
assertThat ( entityId , is ( nullValue ( ) ) )
assertEquals ( ChannelzProtoUtil . extractChannelData ( stats ) , protoStats )
assertNull ( entity )
assertEquals ( false , CatalogTreeUtils . isCatalogReferenceNode ( noDapNode ) )
assertEquals ( "Wrong conversion result" , "1.234" , doublePrecisionFloat . toString ( ) )
assertNotNull ( Conversation . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "2" , query ( ) . from ( cat ) . where ( num . in ( "2" ) . eq ( "2" ) ) . select ( cat . name . length ( ) . as ( num . intValue ( ) ) ) . fetchOne ( ) )
assertEquals ( 1 , fixture . mark ( ) )
assertEquals ( NOT_DECODED , PASSWORD , object . getPassword ( ) )
assertEquals ( "Duke" , model . getName ( ) )
assertEquals ( "test" , article . getEditSummary ( ) )
assertSame ( testMessageResponderParticipantId , reply )
assertEquals ( expected , result )
assertEquals ( 41 , p . getAge ( ) )
assertEquals ( "[\\"a\\",\\"b\\",\\"c\\",\\"d\\",\\"d\\",\\"e\\",\\"f\\",\\"g\\",\\"h\\",\\"i\\",\\"j\\",\\"k\\",\\"l\\",\\"m\\",\\"j\\",\\"k\\",\\"l\\",\\"n\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"o\\",\\"
assertEquals ( true , result )
assertEquals ( expected , response . getResponse ( ) )
assertEquals ( expectedBounds , actualBounds )
assertThat ( domainPresenceInfo . getServerService ( SERVER_NAME ) , nullValue ( ) )
assertSame ( tileSize , renderingHints . get ( GPF . KEY_TILE_SIZE ) )
assertEquals ( LATIN1_STRING , response . getResponseAsString ( ) )
assertEquals ( 0.0671 , gst . getLongitudeError ( ) , 0.001 )
assertEquals ( "Item 40 is out of range" , item40Location2 , item40Location )
assertEquals ( "[\\"123.123\\",\\"b\\",true,\\"c\\",\\"d\\"]" , new String ( baos . toByteArray ( ) ) )
Assert . assertEquals ( 10000 , getRowCount ( ) )
Assert . assertTrue ( thriftTransportConfig . isTcpDataSenderCommandAcceptEnable ( ) )
assertThat ( value , is ( valueOfDesc2 ) )
assertEquals ( data , data2 )
Assert . assertEquals ( false , b )
Assert . assertNotNull ( asientoRecibido )
assertEquals ( name , greeter . getName ( ) )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) < 0 )
assertEquals ( 82 , new AcceptsLambda < Integer > ( ) . accept ( l ) . intValue ( ) )
arrays . assertContains ( description , actual , emptyArray ( ) )
assertEquals ( Unpooled . buffer ( ) , output )
assertEquals ( "OK" , r )
assertOut ( "var /** @type {boolean} */ a = new Boolean(1)" )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . fail ( "Exception occured: " + ex . getMessage ( ) )
assertEquals ( period , start . until ( end ) )
Assert . assertEquals ( Arrays . asList ( post ) , postList )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "notification" , data ) , message )
assertNull ( expression . evaluate ( record ) )
assertEquals ( m1 , m2 )
assertEquals ( result . size ( ) , 1 )
assertEquals ( false , result )
assertEquals ( 0 , table . getColumnCount ( ) )
assertEquals ( 2.2 , element . getChild ( "c" ) . getDoubleValue ( ) , 0.000001 )
assertTrue ( log . debugEnabled ( ) )
editor . assertProblems ( "my-repo|Unused" , "other-repo|Unused" )
assertFalse ( tokenizer . hasHeader ( ) )
assertTrue ( ucd . getChild ( 0 ) instanceof ASTImplementsList )
assertNull ( classUnderTest . getPluginStatuses ( ) )
assertEquals ( rep [ i ] , new String [ ] { "(" , ")" , "(" , ")" , "()" , "[" , "]" } )
assertEquals ( "{\\"user\\":null,\\"ip\\":null,\\"action\\":null,\\"extra\\":null}" , result . toString ( ) )
Assert . assertEquals ( "supervisor1" , child . get ( ) . get ( ) )
assertEquals ( "/projects/topic_17576/target/com.zeroturnaround/jrebel.commons/target/classes" , actualObj )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( json , "\\"n\\" RETURN n\\"" )
assertFalse ( filter . isSimplePnfsMatch ( ) )
Assert . assertEquals ( EventType . UNSUSPEND , eventType )
assertNotNull ( createdBreaker )
runner . assertNotValid ( )
assertSame ( newUrl , url )
assertEquals ( value , anotherValue )
assertTrue ( endpointRef . toString ( ) . equals ( expectedRef . toString ( ) ) )
assertEquals ( dbName , SchemaUtils . getSPARQLName ( "catalog" , NameUtils . SPARQL_DOT + "schema" , NameUtils . SPARQL_DOT + "table" , NameUtils . SPARQL_DOT + "column" ) )
Assert . assertNotNull ( trazas )
assertEquals ( binomial , jacobi . evaluate ( ) , 1e-6 )
assertTrue ( "Expected " + putCounter + " to be less than " + MAX_KEY , ( putCounter <= MAX_KEY ) )
assertThat ( DatastoreUtil . getOrNull ( ds , null , lock . key ) , is ( nullValue ( ) ) )
assertEquals ( "comparator=A%C4%B8%C5" , doc . getComparator ( ) . getClass ( ) . getSimpleName ( ) )
assertTrue ( ! result )
assertEquals ( 14.7 , fontSize , 0.1 )
Assert . assertEquals ( "preferred:1" , networks )
assertNull ( "Wrong result" , config . get ( Integer . class , KEY_PREFIX ) )
assertOut ( expected )
Assert . assertEquals ( "foo" , keyID . getValue ( ) )
assertEquals ( rc . request ( ) . host ( ) , host )
Assert . fail ( "Should throw an exception here" )
assertTrue ( ml . length == 1 )
assertThat ( subject . getMessages ( ) , hasSize ( 0 ) )
assertEquals ( 0 , fooDao . queryForAll ( ) . size ( ) )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
assertTrue ( result . isEmpty ( ) )
Assert . assertNull ( actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff24_" ) )
assertEquals ( 0 , latch . getCount ( ) )
assertThat ( json , is ( "{" + LS + "  \\"foo\\" : \\"bar\\"," + LS + "  \\"super-hero\\" : true" + LS + "}" ) )
assertEquals ( envelope . getMessageId ( ) , "fakeSystem" )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( RD , rd . getRouteDistinguisher ( ) )
assertTrue ( site . login ( "email@example.com" , "password" , http ) )
assertThat ( givenProgram . getChildPrograms ( ) , contains ( stringProgram ( "0123" ) , stringProgram ( "X" ) ) )
assertEquals ( "I'm a string." , interceptor . injectsValuesFrom ( context ) )
Assert . assertEquals ( 127 , response . getTotalHits ( ) . value )
assertTrue ( page . asXml ( ) . matches ( "(?s).*com.sun.faces.test.servlet30.faceletresourceresolver2.MyResourceResolver.*" ) )
Assert . assertEquals ( 7 , result . length )
assertTrue ( item . canBeCreated ( ) )
maps . assertHasEntrySatisfying ( info , actual , key , isNotDigits )
assertNotNull ( License . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expected , query . export ( ) )
assertEquals ( "POST /controllink HTTP/1.1\\r\\n" + "Host: fake\\r\\n" + "Content-Type: text/xml\\r\\n" + "SOAPAction: service:type#AddPortMapping\\r\\n" + "Connection: Close\\r\\n" + "Cache-Control: no-cache\\r\\n" + "Pragma: no-cache\\r\\n" + "Content-Length: 566\\r\\n" + "\\r\\n" + "<?xml version=\\"1.0\\"?>" + "<soap:Envelope xmlns:soap=\\"http://schemas.xmlsoap.org/soap/envelope/\\" soap:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">" + "<soap:Body>" + "<u:AddPortMapping xmlns:u=\\"service:type\\">" + "<NewRemoteHost>1.2.3.4</NewRemoteHost>" + "<NewExternalPort>15</NewExternalPort>" + "<NewInternalPort>12345</NewInternalPort>" + "<NewInternalClient>5.6.7.8</NewInternalClient>" + "<NewEnabled>1</NewEnabled>" + "<NewLeaseDuration>1000</NewLeaseDuration>" + "</u:AddPortMapping>" + "</soap:Body>" + "</soap:Envelope>" , bufferText )
assertTrue ( query . toString ( ) . contains ( "FROM <foo>" ) )
assertEquals ( - ONE_HOUR_IN_MILLIS , time . getTime ( ) )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( password , userObject . getPassword ( ) )
Assert . assertEquals ( msg , handler . getRcv ( ) . toString ( ) )
assertOut ( "var /** @type {string} */ a = String(100)" )
assertEquals ( "geom" , ( dump ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "layer" ) )
assertEquals ( "dois decilh玫es de inteiros" , actual )
assertThat ( combined , returnsSameItems ( expectedNodes ) )
assertEquals ( 0 , conf . getFileSystems ( ) . length )
assertEquals ( expected , actual )
assertTrue ( resourcesManager . getAdminGroups ( sess , resource , group ) . contains ( group ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "foo
assertThat ( ranking , equalTo ( 0 ) )
assertEquals ( list . size ( ) , 1 )
Assert . assertEquals ( "col" , intersect . getPath ( ) )
assertTrue ( pojo . testService . interrupted . get ( ) )
assertEquals ( "[{\\"foo\\":2,\\"bar\\":1}]" , JsonUtil . toJson ( list ) )
assertEquals ( "[Cookie{name='name', value='test1', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}]" , httpRequest . getEffectiveCookies ( ) . toString ( ) )
assertTrue ( getBody ( response ) . length ( ) > 100 )
assertTrue ( cleanExit )
assertEquals ( "my title" , configuration . getTitle ( ) . getText ( ) )
assertEquals ( "user1,user1" , result )
Assert . assertEquals ( "did not set intra file callbacks" , true , transferOptions . isIntraFileStatusCallbacks ( ) )
assertEquals ( describe , n . toJSONString ( false ) )
assertEquals ( readFile ( "src/test/resources/graal3" ) , out )
assertEquals ( "my goodLittle bad son" , output . toString ( ) )
assertTrue ( QueryUtil . getExplainPlan ( rs ) . contains ( "    SERVER ARRAY ELEMENT PROJECTION" ) )
assertTrue ( fst . equals ( fstReversed ) )
Assert . assertEquals ( result , collector . acked )
assertNull ( result )
Assert . assertEquals ( "a test.css" , br . readLine ( ) )
Assert . assertTrue ( output . contains ( "mychain" ) && output . contains ( "default" ) )
assertEquals ( expectedFileName , actualFileName )
Assert . assertEquals ( configNew . getData ( ) . size ( ) , set . size ( ) )
context . assertIsSatisfied ( )
assertThat ( chat . isReady ( ) , is ( true ) )
assertEquals ( expected , actual )
assertTrue ( videos . contains ( video ) )
Assert . assertEquals ( expected , getString ( writer ) )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( JSON . serialize ( result ) , "[ \\"value1\\" , 12]" )
Assert . assertTrue ( "Body validation failed" , isValid )
assertSame ( testTable , column . getTable ( ) )
assertValidationFailures ( deriver , config )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
assertEquals ( 1 , ( int ) lambdaList . iterator ( ) . next ( ) )
assertTrue ( response . getMessages ( ) . size ( ) > 0 )
assertTrue ( "Task retries lower than specified via withTaskRetryLimit()" , actualAttempts == expectedAttempts || actualAttempts == expectedAttempts - 1 )
assertFalse ( ret2 . equals ( t1 ) )
assertEquals ( "Hello ^[request?name1] [request?name2]" , ResponseBodyInterpolator . interpolate ( "Hello ^[request?name1] [request?name2]" , req ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( proc . context ( ) . contextAttrs ( ) . get ( "__retryCount" ) , is ( retryCount ) )
Assert . assertEquals ( 2 , failures . size ( ) )
Assert . assertEquals ( "3 days 15 hours 38 minutes from now" , t . format ( durations ) )
assertEquals ( ByteBuffer . wrap ( EMPTY_STRING . getBytes ( Charsets . UTF_8 ) ) , FieldParser . parse ( EMPTY_STRING , schema ) )
assertEquals ( Result . FAIL , user . apply ( item ) )
assertEquals ( id , ObjectId . of ( "Artist" , "ARTIST_ID" , "SERIAL" , 1 ) )
assertNotNull ( DialingPermission . fetcher ( "voice" , "dialing_permissions_inheritance" ) . fetch ( ) )
assertNotNull ( result )
assertTrue ( discretionary )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertEquals ( result . build ( ) . find ( ArrayElement . class , "values" ) . get ( 0 ) . getEntries ( ) , myTestInstance . groupBy ( builder ) . toList ( ) )
assertEquals ( "Should return true if Monitoring isWatchSubtree (or SubTree is not set)" , true , monitorer . getAsText ( mockMonitoringRequest ) )
assertThat ( result , is ( Optional . empty ( ) ) )
assertEquals ( "text/csv; charset=UTF-8" , layout . getContentType ( ) )
assertEqualsWithoutWhiteSpaces ( "(translate([10,20,30]) (model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 11 ) . create ( ) ) )
assertTrue ( buckets . size ( ) > 0 )
assertNotEquals ( meta1 , meta2 )
Assert . assertEquals ( config , result )
assertNotNull ( Extension . reader ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( DateInterval . between ( start , end ) . getEnd ( ) , is ( Boundary . of ( IntervalEdge . OPEN , end ) ) )
assertEquals ( false , MapUtils . isEmpty ( map ) )
assertEquals ( jedis , result )
assertEquals ( LockMode . WRITE , mLockList . getLockMode ( ) )
assertTrue ( "No Business categories returned!" , categories != null && categories . size ( ) > 0 )
assertThat ( books . getContent ( ) . size ( ) , is ( 2 ) )
assertEquals ( 2451545.0 , julDate . getJulianDate ( ) , TOLERANCE )
assertThat ( "getChildCount" , node . getChildCount ( ) , is ( 0 ) )
assertThat ( testOutcome . getResult ( ) , is ( FAILURE ) )
assertSimpleTerm ( result , "term1" , false , false )
Assert . assertTrue ( String . format ( "failed to force empty file verification error. expected message '%s ...', actual message: '%s'" , Application . VERIFY_ERROR , message ) , isErrorMessage )
Assert . assertEquals ( "EPSG:4326" , epsgDescription )
assertSame ( alternative , choice )
Assert . assertEquals ( "a%2Aa=b%2Ab" , getLine ( QUERY_LINE , canonicalRequest ) )
Assert . assertThat ( table . toString ( ) , is ( "Hello : World" ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
assertTrue ( c . isValidForSqlQuery ( ) )
runner . assertTransferCount ( PutHiveStreaming . REL_FAILURE , 1 )
assertEquals ( "{\\"version\\":10,\\"schema\\":\\"AVRO\\"}" , request . toJson ( ) )
assertTrue ( bos . toString ( ) . equalsIgnoreCase ( "<tpa:Filter xmlns:tpa=\\"http://types.talend.com/policy/assertion/1.0\\"/>" ) )
org . junit . Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "SELECT COUNT(`foo.bar`) FROM v WHERE _user_ = 'me' ORDER BY `foo.bar` DESC" , sql )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertEquals ( "first logical column in LToR" , BasicMonthViewUI . FIRST_DAY_COLUMN , dayGridPosition . x )
assertXMLEqual ( new StringReader ( "<body><outer>text&lt;e a='v'&gt;hello &amp; welcome&lt;</outer></body>" ) , new StringReader ( html ( processed ) ) )
assertEquals ( expected , actual )
assertThat ( predicate . getPartitionPredicate ( ) , is ( "(p1='value11' AND p2='value22') OR (p1='value1' AND p2='value2')" ) )
Assert . assertTrue ( exceptionThrown )
Assert . assertThat ( actual , is ( 0L ) )
assertEquals ( "5" , Sha2Crypt . sha256Crypt ( buffer , "$5$abc" ) )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , SH_APPID , sessionAppId )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "test" , m . getMessageHandler ( ) . getMessage ( ) )
assertEquals ( "Testing for correct handling of syslog " , true , ls5424pb . parseLine ( example5424Syslog ) )
assertThat ( editor . getValue ( ) , is ( getExistingObject ( ) . getId ( ) ) )
assertEquals ( "wrong message" , "Test message" , dut . getMessage ( ) )
assertEquals ( 'd' , ex . charAt ( s , 12 ) )
Assert . assertEquals ( "Invalid result" , true , predicate . test ( new Object ( ) ) )
Assert . assertEquals ( 10 , lookup . getVariable ( "10" ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( employees . size ( ) , empIds . length )
assertEquals ( test . getStrings ( ) , ImmutableList . of ( "A" , "B" ) )
assertEquals ( "^(a 3)b 5\\n" , found )
assertEquals ( response . getStatus ( ) , Status . SUCCESS . getValue ( ) )
assertEquals ( 0 , getObservationCount ( names ) )
assertNull ( shouldBeNull )
assertEquals ( "Wrong mode" , HeartbeatExtensionMessage . HeartbeatMode . UNSPECIFIED , context . getClientNamedGroupsList ( ) . get ( 0 ) . getMode ( ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertEquals ( "Testing Course" , courses . get ( 0 ) . getName ( ) )
assertFalse ( arr . every ( callbackfn ) )
assertTrue ( edit . hasChanges ( ) )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertSame ( fieldVar , result )
Assert . assertEquals ( demoBean , actualMessage )
assertEquals ( URI . create ( "http://localhost:8080/base/r" ) , u )
assertEquals ( "Option value" , "simpleValue" , commandLine . getOption ( "simpleOption" ) )
assertTrue ( validator . isValid ( resource , MetadataSection . COLLECTIONS_SECTION ) )
assertEquals ( "bar" , ref . getPath ( ) )
Assert . fail ( e . getMessage ( ) )
assertTrue ( "There should be errors" , chain . getChildren ( ) . size ( ) == 0 )
assertEquals ( new HashSet < String > ( Arrays . asList ( "staff1" , "staff2" , "staff3" ) ) , underTest . filterConnectedViaProgram ( new HashSet < String > ( staffIds ) , e ) )
assertEquals ( LocalDate . of ( 2012 , 7 , 6 , 0 , 0 ) , test )
Assert . assertFalse ( activeLedgers . containsKey ( lh . getId ( ) ) )
assertEventEqualAfterSerializeDeserialize ( event )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
assertThat ( results , samePaths ( new File ( root , "a.txt" ) , new File ( root , "b.txt" ) , new File ( root , "c.txt" ) ) )
assertThat ( result , is ( "1.0" ) )
assertEquals ( DomainExpressionBuilderRegistry . class , reg . getRegistrationType ( ) )
assertThat ( leaseType , is ( lease . getLeaseType ( ) . getReference ( ) ) )
assertEquals ( expectedQuery , actualQuery )
Assert . fail ( "No message should have been logged. It is up to the author of the logs to handle the logs. " + line )
assertEquals ( result , range . exclude ( other ) )
assertEquals ( "hrMethod" , response )
Assert . assertTrue ( result . isSuccessful ( ) )
assertEquals ( "A sentence.cise and another one." , tokenizer . tokenize ( input ) )
assertEquals ( false , check . isRequired ( ) )
assertFalse ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
this . assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher . class ) ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
Assert . assertTrue ( shexc . isAlive ( ) )
assertEquals ( 2 , i )
assertEquals ( Sets . newHashSet ( "table2" ) , service . getTablesToRepair ( cluster , unit ) )
assertEquals ( 1 , i )
Assert . assertEquals ( projectorForward . getTranscriptStartingAtCDS ( ) , resultTranscript )
assertTrue ( globalDomainAccessControlListEditorSubject . createOrUpdateOwnerRegistrationControlEntry ( USER_ID , DOMAIN , INTERFACE_NAME , TrustLevel . HIGH , TrustLevel . LOW , Permission . ASK ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( 0 , cacheStorage . size ( ) )
assertSame ( bindingII , bindingII )
assertEquals ( expected , elements )
assertTrue ( "Workflow is not in an error state" , workflowStatus . errorOccurred ( ) )
assertEquals ( "OK" , response . get ( 0 ) )
assertEquals ( expResult , result )
assertTrue ( "Identity realm should be created" , ops . exists ( TEST_IDENTITY_REALM_ADDRESS ) )
assertEquals ( expect , cpcClass . normalize ( ) )
assertNotNull ( p1 )
assertSimpleTerm ( result , "term% term_ %term_" , false , true )
Assert . assertTrue ( skipResult )
assertThat ( errors , not ( hasFieldErrors ( "degree" ) ) )
Assert . assertTrue ( intersect instanceof SegmentRange )
assertFalse ( isEmoji )
assertArrayEquals ( expectedResults , actualResults , 0.01 )
assertTrue ( ex . isPrime ( 97 ) )
assertEquals ( actualReturnValue , IndexSampleHelper . getASampleBaseExample ( ) )
assertEquals ( qn , qnExpected )
assertEquals ( 1 , value . size ( ) )
assertEquals ( this . unpacked , unpacked )
assertEquals ( setProperties , subscription . getSubscriptionProperties ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_buddies . FILTER(?user_buddies = ?_c6) }" )
assertPorts ( "port-offset" , DEFAULT_COMMAND_API_PORT + offset , DEFAULT_MONITORING_API_PORT + offset )
assertEquals ( 2 , filteredMatches . size ( ) )
Assert . assertEquals ( "\\"a string\\",\\"a string\\",\\"t\\":22.9,\\"t\\":220}," , b . toString ( ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0" , applicationWadl . length ( ) > 0 )
assertEquals ( 2. , end . getTheoreticalEarliestOperationStartTime ( ) , 0.01 )
Assert . assertEquals ( Option . of ( Integer . valueOf ( 23 ) ) , a0 . optionalInteger ( ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( remoteStartStopStatus ) )
assertEquals ( 4 , tool . heapCaculation ( ) )
assertEquals ( setOfStrings ( "silver" ) , all )
assertTrue ( tc . isValid ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertTrue ( checker . isZipInputStream ( bufferedInputStream ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "producer_group1" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertNull ( array )
assertEquals ( resp , "HEARTBEAT 2" )
Assert . assertEquals ( "Testing" , txtRes )
assertEquals ( true , ( ( DropDownImageListEditor ) presenter ) . isEditMode )
Assert . assertEquals ( demoService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) , helloService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( doc . getLabels ( ) . isEmpty ( ) )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , - 1 ) , im ( 2 , - 1 ) , im ( 3 , 2 ) )
assertThat ( codePoints . containsAll ( "锞�锞�锝般��锝帮�锞�锞�" ) , is ( false ) )
assertTrue ( ref != null )
assertEquals ( UNSUPPORTED_MEDIA_TYPE , argumentCaptor . getValue ( ) . getStatusInfo ( ) )
assertNull ( found )
assertNotFound ( client . executePost ( "/foo" , "{}" , ContentType . TEXT_PLAIN ) )
Assert . assertEquals ( false , obs . getValueAsBoolean ( ) )
Assert . assertTrue ( "Bad cardinality - expected " + 0.1 + " but was " + c . getCardinality ( ) , c . getCardinality ( ) == 0.1 )
assertEquals ( testPersonAccountId , testPersonAccountIdToString . get ( ) )
assertThat ( IOUtils . toString ( inputStream , StandardCharsets . UTF_8 ) , is ( schemaName ) )
Assert . assertTrue ( true )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "p" , URI . class ) ) . and ( binds ( "pLabel" , Literal . class ) ) )
assertEquals ( "Successfully put" , result , expected )
assertEquals ( "x" , new Experiment ( ) . doIt ( "x" ) . join ( ) )
assertEquals ( "helloworld2" , FileUtils . readFileToString ( testFile , Charset . forName ( "UTF-8" ) ) . trim ( ) )
assertEquals ( expected , formatted )
Assert . assertThat ( ExceptionCodeMapping . MissingParameterException . getExceptionIdentifier ( ) , is ( Integer . valueOf ( fromJson . getValue ( ) ) ) )
Assert . assertEquals ( 2147483647 , res )
assertFalse ( problem )
assertTrue ( ! d . getChildren ( ) . isEmpty ( ) )
assertEquals ( BYTE_FIELD_VALUE , storedValue )
assertThat ( nonInfo , hasSize ( 2 ) )
assertTrue ( sba instanceof ThickSBA )
assertEquals ( "OK" , response . getTitle ( ) )
Assert . assertNull ( deployment )
assertTrue ( validator . hasErrors ( ) )
assertTrue ( fail )
assertEquals ( 3 , obj . foo )
assertArrayEquals ( Arrays . copyOf ( os . toByteArray ( ) , 4 ) , MAGIC_LITTLE_ENDIAN )
assertEquals ( "Please input method name, eg: \\r\\ninvoke xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})\\r\\ninvoke XxxService.xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})\\r\\ninvoke com.xxx.XxxService.xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})" , result )
Assert . assertFalse ( itemsGet . accept ( element ) )
assertThat ( instance . getValue ( ) , equalTo ( TEST_VALUE ) )
assertArrayEquals ( packet , Proto . arraylist_to_array ( payload ) )
Assert . assertEquals ( row . length , length )
assertTrue ( Configurator . compareFs ( fs1 , fs2 ) )
assertEquals ( insertNum , results . size ( ) )
assertEquals ( "Common exception" , ms . getText ( ) )
assertEquals ( 1 , destroyed . get ( ) )
assertEquals ( Character . valueOf ( '|' ) , CsvBulkImportUtil . getCharacter ( conf , "conf.key" ) )
assertEquals ( in , outStream2 . toString ( ) )
assertEquals ( 5 , context . getTableCount ( ) )
assertTrue ( validator . validate ( EntityNames . STAFF , ids ) . equals ( ids ) )
assertEquals ( field . getName ( ) , NameUtils . canonicalizeForEnumTypes ( region . getRealmId ( ) ) )
AssertUtil . assertNoJSError ( )
assertFalse ( reader . isClosed ( ) )
Assert . assertTrue ( pis . size ( ) >= 1 )
assertEquals ( 80 , sumOfType1Cap )
assertDirectories ( "directories" , "hello" )
Assert . assertEquals ( expected , super . parse ( " good.path.here" ) )
assertEquals ( 10. , newVrp . getInitialVehicleRoutes ( ) . iterator ( ) . next ( ) . getDepartureTime ( ) , 0.01 )
assertE ( "#######" + "        " + "        " + "        " + "        " + "#######" )
assertEquals ( ".test(1, 2, 3)" , callTest . toJavaSrc ( ) )
assertEquals ( jobService . getJobServers ( namespace ) . size ( ) , 1 )
assertNotNull ( Conference . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "Configuration 'ogm-config' is applied to the cache" , "ogm-config" , configuration )
assertThat ( errors . toString ( ) , containsString ( "No response found for required item with id = 'link0'" ) )
assertEquals ( rows1 , rows2 )
assertNotNull ( cmp . getRecords ( ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertEquals ( expResult , result )
MatcherAssert . assertThat ( "Instance reusedExistingDatabase should be false." , ! instances . reusedExistingDatabase ( ) )
Assert . assertEquals ( "[5, [A, B, C, D, E, F, G]" , a . toString ( ) )
assertNotNull ( url )
assertThat ( maxSide . getSide ( ) , is ( equalTo ( Integer . MAX_VALUE ) ) )
assertFalse ( integer2 == integer3 )
assertEquals ( expResult , result )
assertThat ( header . getHeader ( ) , is ( "Header" ) )
assertTrue ( conn != null )
assertElementsOfIterator ( new BooleanValueRange ( ) . createRandomIterator ( workingRandom ) , Boolean . TRUE , Boolean . TRUE , Boolean . TRUE , Boolean . TRUE )
assertNotNull ( injector )
assertEquals ( 0.0 , instance . inclusiveHypervolume ( ind ) , 0.0 )
Assert . assertEquals ( simpleMapPOJO . getBytesMap ( ) , bytesMap )
assertThat ( currTime , is ( time . get ( ) ) )
Assert . assertNotNull ( str )
Assert . assertEquals ( configuration , result )
assertTrue ( checker . isLanguageDetected ( "HD" , "US" ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( "[0, 2, 4, 6, 8]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertFalse ( "Should produce different random bytes" , Arrays . equals ( new Random ( ) . randomBytes ( ) , new Random ( ) . randomBytes ( size ) ) )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY id" + fieldAdd + " ASC LIMIT 0, 5 ;" , sql )
assertTrue ( result < 0 )
assertTrue ( "Wrong info: " + result . info , result . info . startsWith ( "4 document" ) )
assertThat ( studies . size ( ) , is ( 0 ) )
assertEquals ( 1 , Context . getFormService ( ) . getFormFieldId ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , hasEnvVar ( "item1" , "value1" ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "Supplier retrieve their User as HAL+JSON" , actualResponse , "/fixtures/hal/user/expected-supplier-retrieve-user.json" )
assertEquals ( cliLoadJob . getJobSpec ( ) , createLoadJobSpec ( ) )
assertNotNull ( "Previous step failed" , uri_conferenceInstance )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( "{\\"a\\":null}" , n )
assertEquals ( "Parsing of long option does not match expected result." , PROPERTY_LONG_EXPECTED , parseResult )
Assert . assertEquals ( expected , returned )
assertEquals ( "no-cache" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
runner . assertValid ( service )
assertEquals ( "{\\"data\\":[{\\"x\\":80,\\"y\\":80,\\"name\\":80},{\\"x\\":20,\\"y\\":20,\\"name\\":20}]}" , toJSON ( containerSeries ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( expected , actual )
assertThat ( node , isBrowseNodeWith ( contentRepository , null , "foo" , "foo" , null , component ) )
assertFalse ( fieldAccessor . fieldIsTransient ( ) )
assertEquals ( true , out . firstElement ( ) . get ( ) )
assertEquals ( 2 , update . getSingleTarget ( ) . getChildren ( ) . size ( ) )
assertEquals ( pSquare . evaluate ( percentile , aggregates ) , randomMaster . reduce ( percentile , aggregates ) , Double . MIN_VALUE )
Assert . assertEquals ( NUM_SHIRT_THREADS , collector . size ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( secretMap . size ( ) > 0 )
assertEquals ( expected , getString ( TestSelectImpl . example ( true ) ) )
assertParseTree ( rootNode ( "hello world" , stringNode ( "greeting" , "hello" , stringNode ( "hi" , "hello" ) ) ) , tree )
assertThat ( res . size ( ) , is ( 0 ) )
Assert . assertEquals ( ans [ i ] , count )
assertEquals ( "" , contactEditText . getText ( ) . toString ( ) )
assertEquals ( before , after )
Assert . fail ( "Missing required input" )
assertThat ( relevant , is ( true ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertThat ( DateInterval . parseISO ( "2012-W01-1/W05-4" ) , is ( expected ) )
Helpers . assertJson ( expectedJson , json )
assertThat ( actual , is ( expected ) )
assertEquals ( "Retry policy should be set to none" , 0 , storage . retryPolicy ( e ) )
assertEquals ( 0.945f , result , 0.001f )
assertThat ( result , is ( sample ) )
Assert . assertFalse ( masterCommits . hasNext ( ) )
assertTrue ( "Node is a versioned node." , testObj . isVersionedNode ( mem , createURI ( "a/b/c" ) ) )
assertFalse ( options1 . equals ( options2 ) )
assertTrue ( sets . contains ( message3 ) )
assertNull ( meta . getColumnClassName ( "notNull" ) )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertTrue ( instantiator instanceof ObjenesisClassInstantiator )
assertNotNull ( userDTO )
assertEquals ( 2 , objects . size ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "putValue" , region . get ( "putKey" ) )
Assert . assertEquals ( msg , n )
Assert . assertEquals ( 1l , handler . convertIdentifier ( v ) )
assertEquals ( "Should get feed with METHOD_NOT_ALLOWED" , HttpStatus . METHOD_NOT_ALLOWED , response . getResponseStatus ( ) )
Assert . assertEquals ( BatchStatus . COMPLETED , exec . getStatus ( ) )
Assert . assertArrayEquals ( bytes , result )
assertTrue ( p . getStatusSimple ( ) . toString ( ) . equals ( "active" ) )
assertTrue ( "List should be empty" , list . isEmpty ( ) )
assertThat ( result , equalTo ( "Hello" ) )
files . assertHasSizeInBytes ( info , notAFile , 36L )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertEquals ( NetPlan . getNetworkElementByAttribute ( Arrays . asList ( n1 , n2 , n3 ) , "att" , "2" ) , n2 )
assertEquals ( 1 , context . getCommands ( ) . size ( ) )
assertTrue ( videos . contains ( video ) )
assertEquals ( check . getValue ( ) , actual )
assertEquals ( "class CompanyException {\\n" + "  public CompanyException(  String message,  Throwable cause){\\n" + "    super(message,cause);\\n  }\\n" + "}\\n" , td . toString ( ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( context . statement ( ) , is ( "'b c'" ) )
assertTrue ( str . endsWith ( "\\0" ) )
Assert . assertTrue ( "Sub-menu should have been added to group" , subMenu . getMenuItems ( ) . contains ( group ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertThat ( underTest . getLabel ( ) , is ( TEST_LABEL ) )
assertTrue ( "proposition should have been found" , propositionFound )
AviatorEvaluator . assertDocIdPicOutsEquals ( expectedOutputDocIdPicOuts , actualOutputDocIdPicOuts )
assertSingleResult ( op , Statistic . DOUBLE , expSD )
assertEquals ( value2 , updatedConfigState . value )
assertTrue ( result )
assertEquals ( expectedStatistics , stats )
assertEquals ( 1 , jumlah )
assertThat ( base . thenComposeCancelledCancelled ( supplier ) , is ( new ImmediateFailed < > ( caller , cause ) ) )
Assert . assertEquals ( 40. , solution . getCost ( ) )
Assert . assertFalse ( result )
assertEquals ( expected . build ( ) , doc )
assertEquals ( expected , actual )
assertTrue ( tasks . size ( ) == 50 && tasks . get ( 0 ) . getId ( ) == 1 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): hello:" , "   KEY(2): world:" , "     RAW(4): message" , "      RAW(-1): " )
assertLoadBalanced ( restTemplate )
Assert . assertNotNull ( "null data object, was not found" , dataObject )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( "�芯泻邪蟹邪蟹" , t . format ( new Date ( 0 ) ) )
assertArrayEquals ( shorts , decoded )
assertEquals ( Arrays . asList ( person ) , actual )
assertEquals ( "Wrong toString" , " FixedSizeCircularLinkedList<AtomicInteger>" , list . toString ( ) )
assertNull ( w )
assertNotSame ( 0 , count )
context . assertFalse ( handled , "GET Request to configuration resource should not be handled" )
assertThat ( response . getStatus ( ) , is ( Response . Status . OK . getStatusCode ( ) ) )
assertThat ( uut . getFeatures ( ) . isEmpty ( ) , is ( false ) )
assertEquals ( "Wrong number of results" , 1 , count )
assertThat ( subject . removeComments ( ) , is ( empty ( ) ) )
assertEquals ( 0 , result . size ( ) )
Assert . assertEquals ( "{\\"" + entityType . getPropertyNames ( ) . get ( 0 ) + "\\":{" + "\\"type\\":\\"MultiLineString\\",\\"coordinates\\":[" + "[[1.0,1.0],[2.0,2.0],[3.0,3.0],[4.0,4.0],[5.0,5.0]]," + "[[99.5,101.5],[150.0,151.25]]]}}" , IOUtils . toString ( serializerNoMetadata . entity ( metadata , entityType , entity , null ) . getContent ( ) ) )
assertFalse ( "queued.push() blocks" , ( time2 - time1 ) < delay )
assertThat ( response . buildURI ( ) , is ( "http://zazz.bg/?code=94168519" ) )
Assert . assertEquals ( "Error while getting Thesaurus Type !" , expectedThesaurusTypeTitle , actualThesaurusTypeTitle )
assertPostEdgeProducesJson ( response , false , false )
Assert . assertEquals ( "1234567890" , result . getText ( ) )
assertProcessInstanceCompleted ( processInstance . getId ( ) , ksession )
assertMockEndpointsSatisfied ( )
assertEquals ( "foobar" , result )
assertEquals ( "Exclude pattern" , Arrays . asList ( ".*" , ".*ha" ) , ruleSet2 . getExcludePatterns ( ) )
assertNotNull ( a )
assertTrue ( inventory . contains ( mat , amount ) )
Assert . assertTrue ( ( ( Person ) result [ 0 ] ) . equals ( ( Person ) array [ 0 ] ) )
Assert . assertEquals ( "null, ...(1)]" , equals )
assertTrue ( page . getBody ( ) . getTextContent ( ) . contains ( "Username or email" ) )
assertEquals ( map , map2 )
assertEquals ( 1 , testList . size ( ) )
assertEquals ( "should be the same age in days" , expected . intValue ( ) , result . intValue ( ) )
Assert . assertNull ( nullValue )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertThat ( repository . getDescriptor ( Repository . OPTION_USER_SUPPORTED ) , is ( "value" ) )
assertThat ( MockI18n . passthrough . text ( str ) , is ( str ) )
assertTrue ( actual . entrySet ( ) . containsAll ( expected . entrySet ( ) ) )
assertEquals ( 0 , FileChunkUtil . getNumberOfChunks ( file , 0 ) )
assertThat ( strategy , is ( instanceOf ( ActiveOntologyLocationStrategy . class ) ) )
Assert . assertEquals ( ValidationResult . Result . ERROR , snowflakeSourceOrSink . validate ( null ) . getStatus ( ) )
assertEquals ( "" , result )
assertEquals ( reference , image )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( 2 , result . length ( ) )
assertNull ( output )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
assertEquals ( "Hello Test" , testPr . getOutput ( ) )
assertFalse ( param . isRequired ( ) )
assertEquals ( "milestone" , activityType )
assertEquals ( "straks" , t . format ( date ) )
assertEquals ( builder . buildResponse ( ) . getDataErrors ( ) . size ( ) , 0 )
assertSame ( reply , myTestInstance . runCommand ( "command" , "name" , options . build ( ) ) )
assertNotNull ( result )
assertEquals ( 1 , slice . events . size ( ) )
assertEquals ( result , result2 )
assertEquals ( "ABCDEF" , tis . getName ( ) )
assertEquals ( "expect bookie idx 2 first" , origWriteSet , reorderSet )
assertThat ( archetypeCatalog , not ( nullValue ( ) ) )
Assert . assertTrue ( returnT . getCode ( ) == ReturnT . SUCCESS_CODE )
assertFalse ( "Testing ModuleNotFoundException" , everything . contains ( "ERROR" ) )
assertEquals ( "POINT(1 2)" , Evaluator . evaluate ( ex ) )
assertTrue ( text , text . startsWith ( "Listing of directory successfully finished, 1 files found:\\r\\n" + "${fname} = /tmpFile1_" ) )
assertEquals ( builder . type . toString ( ) , ExperimentType . SAVE_MODEL . toString ( ) )
assertThat ( encounter . getOrders ( ) , hasSize ( 0 ) )
assertTrue ( asyncTask . get ( ) )
assertThat ( userId , is ( present ( ) ) )
assertTrue ( downloader . waitForReportReady ( ) )
assertEquals ( s , "00000000000000000000000000000000000000000000000000000000" )
assertEquals ( 5 , pendingPosts . size ( ) )
assertEquals ( Permissions . UPDATE , testProcessEngineCfg . getDefaultUserPermissionForTask ( ) )
assertTrue ( "The getChanges() method reported a change" , hasChange )
assertTrue ( result . length == 0 )
assertThat ( families , arrayContaining ( "Processing" ) )
assertEquals ( aa , aa2 )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 0 ) ) )
assertNotNull ( EndUser . fetcher ( "ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 2 , packetIn . getCount ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertEquals ( 5l , d . asInt8 ( ) )
assertEquals ( expected , actualQuery )
Assert . assertNotNull ( json . getString ( "unRecommendPostId" ) )
Assert . assertNotNull ( numberTypeConverter )
assertTrue ( true )
assertEquals ( 1 , peopleIds . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 3 , numberOfUsers )
Assert . assertEquals ( Arrays . asList ( "0" , "1" , "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" ) , collected )
assertOut ( "this.b = this.b + 1" )
Assert . assertTrue ( id == 1 )
assertEquals ( "Should be 2 but was " + eh . size ( ) , 2 , eh . size ( ) )
assertEquals ( maxEventId , task . dataSent . size ( ) )
assertEquals ( "��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓��涓���
Assert . assertTrue ( "Bad cost - expected " + 12.0 + " but was " + cost , cost == 12.0d )
assertEquals ( Atom . of ( "test" ) , result )
assertArrayEquals ( TEObjectUtil . TE_LSP_FAST_REROUTE1 , ByteArray . getAllBytes ( output ) )
Assert . assertEquals ( "" , json , ios . toJSON ( ) )
assertDeleteMessage ( sendMessage )
assertThat ( new LnImpl ( ) . formatArgs ( s ) , equalTo ( expected ) )
assertFalse ( hasPermission )
assertEquals ( expected , actual )
Assert . assertThat ( ret , is ( nullValue ( ) ) )
assertTrue ( newUrl . equals ( url ) )
Helpers . assertJson ( DOCUMENT_JSON , document . json ( ) )
Assert . assertEquals ( "{\\"alice\\":{\\"bob\\":[\\"bob\\"]}}" , writer . toString ( ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient . reassignWhenNotCompleted ( CONTAINER_ID_ALIAS , task . getId ( ) , "2s" , reassign ) , "Container '" + CONTAINER_ID_V2 + "' is not associated with alias '" + CONTAINER_ID_ALIAS + "'" , "Container '" + CONTAINER_ID_V2 + "' is not associated with alias '" + CONTAINER_ID_ALIAS + "'" )
assertArrayEquals ( "repl and repl is repl" . getBytes ( ) , actuals )
assertThat ( markedWord , is ( "louper" ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . GT , v , TERM_FACTORY . getConstantLiteral ( "3" , XSD . LONG ) ) , translation . get ( 0 ) )
assertThat ( path , is ( "../foo-1.0-SNAPSHOT.woa/Contents/test" ) )
assertEquals ( BuilderFactory . start ( ) . addMongoTimestamp ( "a" , 12345678901L ) . build ( ) , doc )
assertEquals ( asOverZp64 ( a ) , intrp . monic ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertThat ( PlainTimestamp . of ( 2014 , 4 , 21 , 9 , 15 ) . with ( MICRO_OF_SECOND , 0 ) , is ( PlainTimestamp . of ( date , time ) ) )
assertContentType ( actual )
assertEquals ( testGenre , song . getGenre ( ) )
assertEquals ( 0 , components . size ( ) )
assertThat ( getter . invoke ( instance ) , is ( true ) )
assertEquals ( "
assertNotNull ( imageInfo )
assertTypeListsEqual ( params , expectedParams )
assertArrayEquals ( expected , actual )
assertThat ( comparator . compare ( axiom3 , axiom1 ) , is ( lessThan ( 0 ) ) )
assertTrue ( actual )
assertTrue ( contentAsString . indexOf ( fieldFontSetting ) > 0 )
Assert . assertTrue ( contains )
assertEquals ( "From is not properly parsed" , lsdf . parse ( "2015/02/28 01:02:03.004 GMT" ) , mapper . readFrom ( columns ) )
assertTrue ( sampler instanceof HTTPRawSampler )
assertEquals ( 1 , tasks . size ( ) )
assertEquals ( reservationName , "res_2" )
assertTrue ( "no exception was thrown" , exception )
assertThat ( database . isClean ( ) , is ( false ) )
Assert . assertNull ( "Distinct name should be absent" , jBossWebMetaData . getDistinctName ( ) )
assertTrue ( Files . isRegularFile ( target ) )
assertEquals ( query1 , query2 )
Assert . assertNull ( person . getAttribute ( 3 ) )
Assert . assertEquals ( "Test template val1 and val2" , output )
Assert . assertEquals ( "hey" , searchRequestBuilder . request ( ) . routing ( ) )
assertNotNull ( res )
Assert . assertEquals ( obj , target )
assertThat ( parseArguments . size ( ) , is ( 1 ) )
assertNull ( item . getList ( ) )
assertNull ( descriptor )
assertEquals ( "getPortalHome url failed" , expected , europeanaUrlService . getPortalHome ( "/euro/testrecord" ) )
assertEquals ( Integer . valueOf ( 2 ) , Integer . valueOf ( list . size ( ) ) )
assertThat ( rendering , is ( "1st September 2011" ) )
assertFalse ( d1 . equals ( d2 ) )
assertEquals ( "active" , payload )
assertThat ( output , containsString ( "<text><status value=\\"generated\\"/><div xmlns=\\"http://www.w3.org/1999/xhtml\\"><div class=\\"hapiHeaderText\\">John <b>SMITH </b>" ) )
Assert . assertEquals ( window2 , window1 )
Assert . assertEquals ( 1001 , total )
assertEquals ( "Hello World" , invokeResult )
assertFalse ( "our group shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
assertNull ( doc )
assertTrue ( results . size ( ) > 1 )
assertEquals ( joinFileDescriptorBo , JoinFileDescriptorBo . EMPTY_JOIN_FILE_DESCRIPTOR_BO )
assertTrue ( plugin . getPlayerMuteStorage ( ) . getMute ( player . getUUID ( ) ) . isSilent ( ) )
assertNotEquals ( insertAction , retractAction )
assertEquals ( NodeValue . TRUE , r )
assertEquals ( 2 , numberOfElephants )
assertThat ( def . isSingleValue ( ) , is ( true ) )
assertNotNull ( bindingDOMDataTreeProducerAdapter . createProducer ( ImmutableSet . of ( ) ) )
Assert . assertTrue ( elapsed < numberLongEvents )
Assert . assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( Version . valueOf ( "1.0.0-alpha+build" ) , builder . build ( ) )
assertEquals ( publicationDate , mods . get ( 0 ) . getRevision ( ) )
context . assertIsSatisfied ( )
assertNotNull ( result )
assertEquals ( "service" , s . getType ( ) )
assertEquals ( "TT:12" , x . toString ( ) )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertThat ( result . getPersonIds ( ) , hasItem ( "John Smith" ) )
assertEquals ( LifecycleState . CONNECTED , node . connect ( ) . toBlocking ( ) . single ( ) )
assertCompletionsDisplayString ( "spring:\\n" + "  http:\\n" + "          <*>" , "gson" , "jackson" )
Assert . assertNull ( queryResult . getExplanations ( ) )
assertEquals ( "/prefix1:root/prefix2:otherchild" , expression . toString ( ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\\n" + "  var self = this;\\n" + "  addListener('foo', function(event) {\\n" + "    doit();\\n" + "  });\\n" + "}" )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( asList ( Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 ) , segmentSizes )
assertThat ( fe , notNullValue ( ) )
assertEquals ( 1 , response . getEntry ( ) . size ( ) )
assertThat ( itr . hasNext ( ) , is ( false ) )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert . assertNotNull ( addressResultsDto )
assertTrue ( tasks . size ( ) == 50 && tasks . get ( 0 ) . getId ( ) == 1 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
assertEquals ( "Error detected" , scanResult . getErrorDetail ( ) , "Error detected" )
assertThat ( wrapper . get ( 0 ) , is ( ( short ) 0x2423 ) )
assertThat ( output , containsString ( "<text><status value=\\"generated\\"/><div xmlns=\\"http://www.w3.org/1999/xhtml\\"><div class=\\"hapiHeaderText\\">John <b>SMITH </b>" ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:negativeInteger" ) )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( LAUNCHER_FEATURE , LAUNCHER_FEATURE_JAR , LAUNCHER_BUNDLE , LAUNCHER_BUNDLE_LINUX ) ) )
assertEquals ( "select cat\\nfrom Cat cat\\n  right join cat.mate as cat1" , query2 . toString ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) >= 'literal'" ) )
assertEquals ( 0 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
assertThat ( PSetUtils . streaming ( testSet ) , is ( true ) )
assertTrue ( appender . getValidationLog ( ) . contains ( "No issues" ) )
assertEquals ( vNum , pdfNum )
assertTrue ( equals ( statEntity , nativeEntity ) )
Assert . assertEquals ( queue , testQueue )
assertEquals ( "UPDATE SimpleEntity SET SimpleEntity.name = ?" , Utils . singleLine ( sql ) )
assertFailureValue ( "value of" , "array.size" )
assertEquals ( Arrays . asList ( "http://somelink" , "" ) , new JsonLinkConsumer ( ) . readLinks ( reader , null ) )
Assert . assertEquals ( "bla_" , fileName )
Assert . assertEquals ( 1 , elements . size ( ) )
assertEquals ( "getRuntimeVersion timeout" , latch . getCount ( ) , 0 )
assertEquals ( true , result )
assertEquals ( 0 , suggestedConfigUpdates . size ( ) )
assertEquals ( 0 , tableNames . size ( ) )
Assert . assertTrue ( out . size ( ) > 0 )
assertThat ( returned . getX ( ) , is ( 1l ) )
assertTrue ( set . contains ( "a/b" ) )
assertEquals ( "Failed on rows: [" + rows + "], columns: [" + columns + "], iteration: [" + i + "]" , 1.0f , res , 0.01f )
assertSame ( faultUnMarshaller , factory . getFaultUnMarshaller ( ) )
CheckstyleTestUtils . assertSimilarXmlWithResource ( "/org/sonar/plugins/checkstyle/CheckstyleProfileExporterTest/" + "noCheckstyleRulesToExport.xml" , sanitizeForTests ( writer . toString ( ) ) )
service . callCounter . assertCalls ( "{findIds=2, getItems=6}" )
Assert . assertNotNull ( irodsTaggingService )
Assert . assertEquals ( 1 , timers . size ( ) )
assertEquals ( 1 , newUser . getViewedBooks ( ) . size ( ) )
Assert . assertEquals ( TimeValue . NEG_ONE_MILLISECOND , d )
assertThat ( CompositeBlobStore . getStoreSuitabilityCheck ( ) , equalTo ( CompositeBlobStore . StoreSuitabilityCheck . EMPTY ) )
assertInEqualsOut ( )
assertEquals ( "groupId:artifactId" , softwareProjectId . getGroupId ( ) )
assertEquals ( "Should return true if flush method is called" , true , methodCall . contains ( "flush" ) )
assertArrayEquals ( expected , actual )
assertEquals ( "" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" , raster . toString ( ) )
assertTrue ( "testIsOwningCollection 0" , result )
assertFalse ( target . isModify ( newSettings ) )
assertTrue ( gl . size ( ) > 0 )
assertEquals
assertEquals ( "utf-8" , mediaType . charset ( ) )
assertUserSettingsCount ( )
assertEquals ( "expected" , decoded )
assertEquals ( expectedResult , resultString )
Assert . assertTrue ( expect ( o , true ) )
assertMakeImageCanReadImage ( imageData )
Assert . assertNull ( character . getData ( ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertEquals ( action . getCoordActionInputCheckXCommand ( ) . get ( ) . getTime ( ) , action . getCoordActionInputCheckXCommand ( ) . get ( ) . getTime ( ) )
assertThat ( request . getConnectorId ( ) , equalTo ( someInteger ) )
Assert . assertEquals ( "Wrong order found for " + name + " vs " + name2 , trueOrder , order )
assertEquals ( null , avroField . convertToKettleValue ( array , schema , mock ( Schema . class ) , false ) )
Assert . assertEquals ( i , o )
arrays . assertContainsOnly ( someInfo ( ) , actual , emptyArray ( ) )
assertIsAborted ( tx )
Assert . fail ( "unknown identifier accepted as qname" )
assertEquals ( "[{\\"value\\":\\"\\"}]" , om . readTree ( JSON ) . stringValue ( ) )
assertEquals ( AccountType . ANALYTICS , account . getType ( ) )
assertEquals ( result , expectedResult )
assertEight ( result , testContext , async )
assertEquals ( "{\\"type\\":\\"button\\",\\"id\\":1,\\"x\\":2,\\"y\\":2,\\"color\\":0,\\"width\\":2,\\"height\\":2,\\"tabId\\":0,\\"isDefaultColor\\":false,\\"deviceId\\":0,\\"pin\\":-1,\\"pwmMode\\":false,\\"rangeMappingOn\\":false,\\"min\\":0.0,\\"max\\":0.0,\\"columns\\":[{\\"name\\":\\"indicator\\"},{\\"name\\":\\"name\\"},{\\"name\\":\\"value\\"}],\\"currentRowIndex\\":0,\\"isReoderingAllowed\\":false,\\"isClickableRows\\":false}" , result )
assertEquals ( exp , arrayX )
assertEquals ( "some return path" , mockResult . included ( "returnPath" ) )
assertE ( "----------" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "----------" )
assertNotNull ( executor )
Assert . assertTrue ( intersect instanceof SegmentRange )
assertNotNull ( result )
assertEquals ( "[{key:value},{key:value}]" , target . toString ( ) )
assertEquals ( expected , result )
assertEquals ( "Should be a realinic hospital." , ImmutableHospitalModel . of ( ImmutableHospitalData . of
assertEquals ( "hello, world!" , out )
assertNotEmpty ( token0 )
assertEquals ( Arrays . asList ( "x=1" ) , results )
assertTrue ( Bytes . equals ( opened , data ) )
Assert . assertEquals ( 1234 , multicastSocket . getLocalPort ( ) )
assertEquals ( "a" , example . at ( 0 , 0 , 0 ) . getContent ( ) )
assertEquals ( result , expected )
assertEquals ( expected , result )
Assert . assertNotEquals ( udf . getKey ( embedding ) , udf . getKey ( embedding ) )
Assert . assertEquals ( 76.875 , tdCosts . getBackwardTransportTime ( loc ( "from" ) , loc ( "to" ) , 100. , null , null ) , 0.01 )
assertEquals ( Lists . newArrayList ( 1 ) , listBad )
assertThat ( result . getBinNumber ( ) , equalTo ( 1 ) )
Assert . assertTrue ( "Optimal coverage: " + best . getCoverage ( ) , best . getCoverage ( ) < 0.99 )
Assert . assertEquals ( "Host pattern not overridden" , patterns . get ( index ) , sb . toString ( ) )
assertTrue ( results . size ( ) > 1 )
assertTrue ( DataBundles . isValue ( DataBundles . getPorts ( inputs ) . get ( "test" ) ) )
assertArrayEquals ( sentBytes , new byte [ ] { 0x17 , 0x03 , 0x03 , 0x00 , 0x04 , 0 , 1 , 2 , 3 } )
assertEquals ( "Name" , result )
assertions . containsSequence ( 'e' , 'f' , 'g' , 'h' )
assertEquals ( "void dest5(int, @B int)" , toString ( dest ) )
Assert . assertTrue ( "File types with invalid type not modified should not be honored" , CollectionUtils . isEqualCollection ( expected , widget . getFileTypes ( ) ) )
Assert . assertThat ( job . sendCommandStr ( "test command" ) , is ( false ) )
assertThat ( summed , equalTo ( new ListDouble ( ) ) )
assertThat ( options . getIgnoreFailures ( ) , is ( Boolean . TRUE ) )
assertEquals ( column , fromProto )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertTrue ( "There should be no GREService if no GRE is configured" , greServices . isEmpty ( ) )
assertEquals ( "CC=[C]=CC" , g . toSmiles ( ) )
assertThat ( f . format ( time ) , is ( "17:45 PDT" ) )
Assert . assertTrue ( "Did not expect optimal coverage: " , best . getCoverage ( ) < 1 )
Assert . assertEquals ( "SELECT USER();" , text )
assertTrue ( filteredEvidenceItemMap . isEmpty ( ) )
assertEquals ( 0 , errors . size ( ) )
Assert . assertEquals ( "id2 [" + id2 + "] - id [" + id2 + "]" , ( id2 - id ) , ( long ) MIN_BLK_SIZE )
assertTrue ( ! plan1 . equals ( plan2 ) )
assertTrue ( size < BUFFER_SIZE )
assertTrue ( Futures . getUnchecked ( collector ) )
assertThat ( propertyVariable , is ( "alex" ) )
assertSame ( test . b , test . toInjectOneTarget . m1 )
assertNull ( study )
assertNotNull ( bean )
assertTrue ( retCode == 0 )
assertFalse ( rolesPrivileges . isEmpty ( ) )
assertEquals ( 2 , branches . size ( ) )
assertThat ( supplier . authForImage ( tokenValue ) , not ( matchesAccessToken ( accessToken ) ) )
assertEquals ( 1234L , unprocessed . getExpected ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatus ( ) )
assertFalse ( kbuilder . getErrors ( ) . toString ( ) , kbuilder . hasErrors ( ) )
Assert . assertEquals ( "should have found 2 entries" , 2 , entries . size ( ) )
assertTrue ( clas . getClass ( ) . getName ( ) , clas instanceof Integer )
runner . assertAllFlowFilesTransferred ( PublishKafka_1_0 . REL_SUCCESS , 3 )
Assert . assertNull ( tags )
assertEquals ( "Max Mustermann" , result )
Assert . assertTrue ( result . length ( ) > 0 )
assertEquals ( map1 , map2 )
Assert . assertEquals ( "org.jboss.as:jboss-as-arquillian-container-domain-remote:7.1.1.Final" , adapter . dependencies ( ) [ 0 ] )
assertThat ( zonedDateTime , is ( OffsetDateTime . parse ( "1969-07-21T12:56:00+10:00" ) ) )
assertEquals ( "<b>1</b>\\n<p><b>2</b>3</p>" , doc . body ( ) . html ( ) )
assertEquals ( Status . CREATED . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 1 , res . getInt ( "nbHits" ) )
Assert . assertEquals ( "2011-11-01 00:00:00" , formater . format ( date . getTime ( ) ) )
Assert . assertFalse ( "server should supoort case-insensitive" , isSupport )
assertEquals ( Arrays . asList ( new CalculatedDatum < Map < String , Integer > > ( "assessments" , "HighestEver" , "ACT" , "calculatedValue" , highestEver ) ) , data . getCalculatedValues ( ) )
Assert . assertEquals ( 1 , 2 )
Assert . assertTrue ( newSql . equals ( "SELECT * FROM cpcplan" + suffix + " t1, cpc" + suffix + " t2 WHERE t1.a < t2.a(+)" ) )
assertThat ( getRecordedDomain ( ) , hasCondition ( Failed ) . withStatus ( "True" ) )
assertNotNull ( text )
assertThat ( problems . size ( ) , is ( 0 ) )
assertEquals ( - 300 , scorer . scorePosition ( board , context ) )
Assert . assertEquals ( 0 , repository . size ( ) )
assertTrue ( mapper . getOntologyIRIs ( ) . contains ( df . getIRI ( "http://owlapitestontologies.com/thesubont" ) ) )
Assert . assertEquals ( resp . getStatus ( ) , HttpServletResponse . SC_UNAUTHORIZED )
assertEquals ( "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" , loc )
assertEquals ( "image" , IOUtils . readStringFromStream ( os . toByteArray ( ) ) )
assertEquals ( "emplyee_setDept_" , elValue )
assertSame ( out , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( latch . await ( WAIT_SEC , TimeUnit . SECONDS ) )
Assert . assertTrue ( result . toString ( ) , result . isSuccessful ( ) )
assertNull ( factory . newNameResolver ( new URI ( "bbb://foo" ) , Attributes . EMPTY ) )
assertEquals ( expected , got )
assertNull ( "Therapy object was null" , therapy )
AssertiveInstance . init ( )
assertNull ( userService . getUser ( 502 ) )
ctx . assertTrue ( res . succeeded ( ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( inc . get ( ) . get ( ) , outRA . get ( ) . get ( ) )
assertFalse ( parameter . isNamed ( ) )
assertEquals ( 0 , out . size ( ) )
assertEquals ( 0 , livePostManager . getAll ( ) . size ( ) )
Assert . assertTrue ( this . manager . connectAll ( Arrays . asList ( this . family1 , this . family2 , this . family3 ) , null ) )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 , 4 } , sink . toByteArray ( ) )
assertThat ( axioms , containsInAnyOrder ( annotationAssertion , objectPropertyAssertion , dataPropertyAssertion ) )
assertEquals ( result , MessageFormat . format ( "{0,date,short} {0,time}" , min + high ) )
assertEquals ( value , returned )
assertEquals ( "one" , sb . toString ( ) )
assertThat ( unmarshal ( sb ) , allOf ( hasEntry ( "mdc" + HACK_ATTEMPT , "mdc value" ) , hasEntry ( "explicit" + HACK_ATTEMPT , "explicit value" ) ) )
assertEquals ( "NOT (x LIKE '%YWD%')" , c . toString ( ) )
assertNotNull ( jobProperties )
assertEquals ( 1 , fields . size ( ) )
assertThat ( estimator . getCardinality ( ) , is ( ae1bEstimator . getCardinality ( ) * ce2dEstimator . getCardinality ( ) ) )
Assert . assertEquals ( "Application name" , "TestAliasApp" , dag . getAttributes ( ) . get ( com . datatorrent . api . Context . DAGContext . APPLICATION_NAME ) )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatSocket ( socket ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( expected , actualQuery )
assertSelect ( tq , binding ( vars , "\\"Alice\\"" , "\\"Smith\\"" ) )
assertEquals ( expected , location )
assertEquals ( "Column{id: '0', type: BIGINT, column.type: NOT_NULL}" , column . toString ( ) )
assertEquals ( "anything" , taskLogger . taskOnlyMDC ( "test" , "test" ) )
assertEquals ( 201 , c . getResponseCode ( ) )
assertEquals ( "tpc/incoming/2014/02/01/03" , path )
assertEquals ( IpAddressFamily . parse ( "128.5.0.4/32" ) , IpAddressFamily . parse ( "10.5.4.0-10.5.15.255" ) )
assertThat ( p1 , is ( p2 . inverse ( ) ) )
assertTrue ( lineOffsetExpected . equals ( lineOffset ) )
assertEquals ( m1 , m2 )
assertEquals ( "http://example.org/{X}/{Y}/{X}" , URITemplates . getUriTemplateString ( f1 ) )
assertEquals ( 1 , result )
assertTrue ( "Expected comparison result " + comparisonResult + " to be equal to 0" , comparisonResult == 0 )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( url ) )
assertEquals ( expected , cls )
Assert . assertEquals ( "True" , obs . getValueAsString ( Locale . US ) )
assertEquals ( end - start , 100 , 50 )
assertTrue ( element . getElements ( ) . isEmpty ( ) )
Assert . assertEquals ( "42" , ( ( Foo ) result ) . getName ( ) )
Assert . assertEquals ( 1 , result . intValue ( ) )
assertEquals ( HttpStatus . CREATED , statusCode )
assertThat ( renderer . getShortForm ( entity ) , is ( "owl:backward compatible with OWL:with" ) )
assertEquals ( "auditActionType must not be null." , e . getMessage ( ) )
assertTrue ( "Height must be between 0 and " + valoHeight + "px" , valoHeight <= reindeerHeight )
HeadlessTestUtils . assertHeadlessNot ( $ . driver ( ) . get ( ) )
assertNull ( result )
Assert . assertTrue ( expected . similar ( actual ) )
assertEquals ( expectedId , newId )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm4Name" ) )
Assert . assertEquals ( "[1, 2, 3]" , html )
assertEquals ( geojsonRDD . rawSpatialRDD . count ( ) , 103 )
assertEquals ( "Should have fired only once" , 1 , runtimeInformation . getExecutionPlan ( ) . getExecutionSteps ( ) . size ( ) )
assertThat ( response , containsString ( "Alerts : user_id =1111" ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertEquals ( new URL ( appbase + "42/" ) , app . getRemoteURL ( "" ) )
assertEquals ( map . size ( ) , 2 )
assertNotNull ( relatedResult )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertTrue ( actual . isEmpty ( ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getNodeName ( ) , is ( "kube-01" ) )
assertEquals ( "Pattern matches for all parameters " , true , lslp . parseLine ( pattern , 1 , 2 , 2 , 2 , 2 , "(username):.COMMAND=nub" ) )
assertTrue ( help . contains ( "Usage: java org.apache.commons.chain2.Chain2" ) )
assertTrue ( encoded . indexOf ( "\\n" ) == encoded . lastIndexOf ( "\\n" ) )
assertEquals ( "[(foobar:1>7)>(AppNode:file:10>14)]" , sn . stringify ( true ) )
assertEquals ( flavour , flavour2 )
assertViewName ( mav , "redirect:/topics/1" )
assertEquals ( 1 , map . size ( ) )
assertThat ( result , is ( false ) )
Assert . assertEquals ( 0 , queue . size ( ) )
Assert . assertEquals ( 0 , violations . size ( ) )
assertEquals ( "Find by UOM label not returning a list with one value descriptor" , 1 , valueDescriptors . size ( ) )
assertThat ( results , is ( Arrays . asList ( "A" , "B" , "C" , "D" ) ) )
Assert . assertNull ( this . component . resolveEntity ( NONEXISTENT_ID ) )
assertEquals ( "Test" , bout . toString ( UTF_8 . name ( ) ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT * FROM A UNION SELECT * FROM B" ) )
assertThat ( renderingComparator . compare ( axiom1 , axiom2 ) , is ( 0 ) )
assertEquals ( "a<V>\\n" , found )
assertTrue ( event . isStarted ( ) )
Assert . assertTrue ( Models . isomorphic ( expected , actual ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . EDIT , this . doc ) )
assertEquals ( 0.167 , dataSet . collect ( ) . get ( 0 ) , 0.001 )
assertThat ( output . toString ( ) , is ( "\\"STATE\\"" ) )
Assert . assertEquals ( 3 , a . getNumberOfMethods ( ) )
assertEquals ( "1" , vars . iterator ( ) . next ( ) . get ( Var . alloc ( "bgp" ) ) . getStringValue ( ) )
assertEquals ( 1 , events . size ( ) )
assertThat ( c1 . call ( 1 , 2 , 3 ) , returns ( 19823 ) )
assertEquals ( 5.25D , toml . getDouble ( "double" ) . doubleValue ( ) , 0.0 )
Assert . assertEquals ( 0 , data . remaining ( ) )
assertEquals ( d1 , d2 )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayShort ( array ) ) )
assertArrayEquals ( data , stream . toByteArray ( ) )
Assert . assertNotNull ( addressResultsDto )
assertNotNull ( instance )
Assert . assertEquals ( xmlEsperado , icms51 . toString ( ) )
assertNotNull ( Query . fetcher ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "UHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 01" ) )
authRule . assertScenario ( scenario )
assertThat ( result , is ( false ) )
assertFalse ( "isLoaded should return false if only element not displayed is not required when " + "RequireAll annotation is used." , testView . isLoaded ( ) )
Assert . assertEquals ( MedianOf3PivotingStrategy . class , getUnivariateStatistic ( ) . getPivotingStrategy ( ) . getClass ( ) )
assertEquals ( DecodeQualification . INVALID , readerPlugIn . getDecodeQualification ( stReader ) )
assertEquals ( "Hello world!" , result )
Assert . assertEquals ( "Hello, ejbthree1852!" , result )
AsserterWithLazyInitialisationAlgorithm . ASSERTER . assertImmutable ( klasse )
assertTrue ( ! branch_conditions . isEmpty ( ) )
assertTrue ( "Expected ClusterIp" , obj instanceof ClusterIp )
assertNotNull ( factory . createContext ( file . toURI ( ) ) )
assertThat ( underTest . isValid ( Collections . singleton ( "dx27e${\\"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\\".toString().replace(\\"g\\", \\"q\\")}yv5rm" ) , context ) , is ( true ) )
assertThat ( channelDTO , nullValue ( ) )
assertEquals ( expResult , result )
assertEquals ( "MyService23" , service . name ( ) )
assertNull ( factoryReference . get ( ) )
assertEquals ( WroUtil . getImplementationVersion ( ) , victim . getWroManagerFactory ( ) . getImplementationVersion ( ) )
assertTitleEquals ( "resourceReference" , "WMS specification" , getSingleton ( resource . getResourceReferences ( ) ) )
assertTrue ( "Something wrong with deltaLink!" , json . contains ( "delta=0.0\\n" ) )
assertEquals ( 1 , branch_conditions . size ( ) )
Assert . assertEquals ( expectedTau , bearAndSteadyGene . calculateTau ( x , y ) , DOUBLE_PRECISION_DELTA )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
Assert . fail ( "Shouldn't allow nested execution" )
assertEquals ( v , v1 )
assertEquals ( "Generator should have been called once" , 1 , generator . callCount )
assertThat ( infos . length , is ( 0 ) )
Assert . assertNotNull ( fieldSet )
assertEquals ( new EntityTuple ( entity ) . get ( "col1" ) , "val1" )
Assert . assertEquals ( "8080" , result )
assertOperation ( ( ) -> roleClient . getSpace ( name ) )
assertFalse ( credentials . isPresent ( ) )
Assert . assertEquals ( numTestEntities , list . size ( ) )
assertFalse ( tokenizer . next ( testString ) )
assertUrl ( url , "http" , "localhost" , 80 , "/" )
Assert . fail ( )
Assert . assertNull ( loadedModule )
assertEquals ( tagList1 , tagList2 )
assertTick ( 2 )
assertEquals ( m1 , m2 )
assertNotNull ( stream )
assertEquals ( "encoded/decoded long do not match" , value , decoded )
given ( ) . header ( "Origin" , "http://127.0.0.1:8888" ) . when ( ) . get ( "tests/gateleen/cors/TestResource" ) . then ( ) . assertThat ( )
Assert . assertEquals ( "Static route collection is not equals to the expected static route collection." , srCollection , builtSrCollection )
assertEqualsIgnoreWhitespace ( expectedDRL , RuleModelDRLPersistenceImpl . getInstance ( ) . marshal ( model ) )
assertEquals ( BaggageHandler . RESPONSE_BODY_MATCHER , BaggageHandler . RESPONSE_BODY_MATCHER )
assertThat ( result . endsWith ( "[inNode,inPort]" ) , is ( true ) )
assertEquals ( sqe , actual )
assertOut ( expected )
assertEquals ( ints , ints2 )
assertEquals ( timezone , "Asia/Seoul" )
assertThat ( arguments . getResources ( ) , contains ( FIRST_RESOURCE_URI , SECOND_RESOURCE_URI ) )
assertEquals ( QCat . cat . bodyWeight , QCat . cat . bodyWeight . doubleValue ( ) )
assertEquals ( Arrays . asList ( "/dest/test1.txt" , "/dest/woo/test2.txt" ) , walker . paths )
Assert . assertNotNull ( provider )
assertEquals ( ProductData . TYPE_INT8 , tiffIFD . getBandDataType ( ) )
assertNotNull ( southboundProvider . getDb ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( "HierIZONTAL" , instance . getBackground ( ) )
assertThat ( RpslObjectFilter . diff ( original , updated ) , is ( "@@ -1,4 +1,2 @@\\n" + " mntner:          UPD-MNT\\n" + "-description:            UPD-MNT\\n" + "-mnt-by:            UPD-MNT\\n" + " source:           TEST\\n" ) )
assertEquals ( expResult , result )
assertTrue ( Initialize . isInitialized ( fs , sconf , conf ) )
assertEquals ( defaultExtension0 . hashCode ( ) , defaultExtension1 . hashCode ( ) )
assertEquals ( 0 , elements . size ( ) )
assertThat ( a , notNullValue ( ) )
assertEquals ( JodaBeanUtils . collectionTypeTypes ( test , Person . class ) , expected )
Assert . assertEquals ( "f1:2.5" , ret . toString ( ) )
assertTrue ( result . contains ( "CURRENT LOG APPENDER" ) )
assertEquals ( "MDCValue" , this . testTarget . cutValue ( null ) )
Assert . assertTrue ( dictionary . createSynset ( POS . WORD ) instanceof WordSynset )
assertTrue ( unwrapClass . isAssignableFrom ( unwrappedCacheEntry . getClass ( ) ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( REPLICA_SET_CONNECTION , myTestFactory . getConnection ( ) )
Assert . assertEquals ( resourceContent , writer . toString ( ) )
assertNotNull ( SyncListPermission . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( buf . toString ( ) , "{\\"a\\":\\"aa\\",\\"b\\":{\\"c\\":\\"cc\\"},\\"c\\":\\"cc\\"}" )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite1 ) )
assertEquals ( object , cache . get ( url , clazz , MediaType . TEXT_PLAIN_TYPE ) )
assertEquals ( TEST_CUSTOM_PAYLOAD , testResult . getProvisioningPayload ( ) )
assertUnderflow ( ( long ) x + ( long ) y , result )
assertEquals ( "hello world" , result )
assertEquals ( "user2" , result )
assertEquals ( window . getRootPane ( ) . getChildren ( ) . size ( ) , toplevels . size ( ) )
assertEquals ( "1.0" , parsedArg . getVersion ( ) )
assertEquals ( "testValue" , value )
assertEquals ( 2 , all . size ( ) )
assertEquals ( Seconds . of ( - 4 ) , test12 . dividedBy ( - 3 ) )
assertThat ( results , hasSize ( 0 ) )
Assert . assertEquals ( polygon , result . getValue ( ) )
assertTrue ( sut . writeList ( new byte [ ] { val } ) )
assertSame ( reply1 , reply2 )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95," + "\\"newName\\":\\"\\"}},\\"arrayTest\\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
Assert . assertEquals ( expected , outValue )
Assert . assertEquals ( TEXT1 + "\\n" + TEXT2 , PdfTextExtractor . getTextFromPage ( new PdfDocument ( new PdfReader ( new ByteArrayInputStream ( bytes ) ) ) . getPage ( 1 ) , createRenderListenerForTest ( ) ) )
arrays . assertContains ( description , new short [ 1 ] , null )
assertNotNull ( node )
assertEquals ( 0L , runtimeService . createProcessInstanceQuery ( ) . involvedGroups ( Collections . singleton ( "nonInvolvedGroup" ) ) . count ( ) )
assertThat ( rendered , is ( test [ 1 ] ) )
Assert . assertEquals ( rtpPacket . getTimestamp ( ) , 0 , "Timestamp should be 0." )
assertMockEndpointsSatisfied ( 1 , TimeUnit . MINUTES )
assertEquals ( arr , resultArr )
assertEquals ( input . acceptObjectKey ( JsonEvent . STRING ) , expected )
assertEquals ( expected , roads )
Assert . assertEquals ( String . class , t . getType ( ) )
assertNull ( TYPE_HANDLER . getResult ( rs , 1 ) )
assertEquals ( testIds , first )
assertNotNull ( user )
assertEquals ( "John" , e . getName ( ) )
Assert . assertEquals ( PingCommand . PONG , pong . getPayload ( ) )
assertEquals ( expectedJson , rp . toJson ( ) )
assertFalse ( call ( dao -> dao . unlinkAsset ( asset ) ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertNull ( computeTMTextUnitMD5 )
Assert . assertEquals ( expected , FileUtils . getCompressionTypeWithoutSetting ( new File ( "." ) ) )
assertEquals ( salaboyTasks . size ( ) , 1 )
assertEquals ( ValidationActionType . WARNING , actionAttributes . get ( ValidationActionTypeService . VALIDATIONS_ACTION_MESSAGE_ATTRIBUTE ) )
assertThatListContainsOneElement ( "bar" )
assertEquals ( "mm" , s )
Assert . assertFalse ( InstanceValidationUtil . hasResourceAssigned ( mock . dataAccessor , TEST_CLUSTER , TEST_INSTANCE ) )
assertTrue ( "Failed to match with compatible IPv6 address." , match )
assertOutput ( expected )
assertEquals ( maxLedgers , outputCustomMetadataMap . size ( ) )
assertTrue ( o . description ( ) . startsWith ( "(overridden) " + "<j_org_robovm_objc_CustomClassTest$SubClass1: 0x" ) )
assertTrue ( consumerFile . exists ( ) )
assertEquals ( "31.Jul.2014 13:58:14 UncaughtException in thread: main (id 1, priority 5)\\n" + "java.lang.RuntimeException: First\\n" + "\\tat FirstClass.secondMethod(SecondClass.java:12)\\n" + "\\tat FirstClass.firstMethod(FirstClass.java:10)\\n" + "31.Jul.2014 13:58:14 UncaughtException in thread: main (id 1, priority 5)\\n" + "java.lang.RuntimeException: Second\\n" + "\\tat FirstClass.secondMethod(FirstClass.java:10)\\n" + "\\tat FirstClass.firstMethod(FirstClass.java:10)\\n" , exceptionTextPane . getText ( ) . replaceAll ( "\\\\r\\\\n" , "\\\\\\n" ) )
assertNotNull ( object )
assertEquals ( expStr , jc )
assertNull ( jsonElement )
datesWithCustomComparisonStrategy . assertIsInThePast ( someInfo ( ) , actual )
assertEquals ( 3 , record . size ( ) )
Assert . assertEquals ( "Region (RS Index)" , command . getLoad ( ) . getLevelClass ( ) . getLevelTypeString ( ) )
assertEquals ( table . getColumn ( 1 ) . getIdentifier ( ) , adapter . getColumnIdentifierAt ( 1 ) )
assertThat ( ( Integer ) prop0 . getClass ( ) . getMethod ( "getSeedRatio" ) . invoke ( prop0 ) , is ( 1500 ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( results , is ( new String [ ] { "A\\tB" , "C\\tD" } ) )
assertEquals ( testName , actual )
assertThat ( fe , notNullValue ( ) )
SetSpanReceiver . assertSpanNamesFound ( expectedSpanNames )
assertSame ( response , builder . create ( ) )
Assert . assertNotNull ( connection . getWarnings ( ) )
assertNotNull ( ConfigUtils . newInstance ( this , "testProperty" , InnerClass . class ) )
assertThat ( formatterOutput , sameJSONAs ( expected ) )
Assert . assertEquals ( expected , result )
Assert . fail ( "Exception should be thrown" )
assertThat ( actualResult , equalTo ( expectedResult ) )
assertNotNull ( presenter . listEditor )
Assert . assertEquals ( "after_test cmd" , Iterables . getLast ( commands . getCommands ( ) ) )
assertEquals ( "Linting sensor for TypeScript files" , desc . name ( ) )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( version , VersionUtil . currentVersion ( version ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
AssertiveInstance . init ( )
assertTrue ( str . contains ( "rdf:type a rdf:Property , rdfs:Resource ; rdfs:label \\"X\\"^^xsd:string ." ) )
assertFalse ( config . isAdvancedClusterConfigSet ( ) )
assertFalse ( newVrp . getJobs ( ) . containsKey ( "4" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expected , actual )
Assert . assertNotNull ( ewd )
Assert . assertEquals ( Redirect . Status . USE_PROXY . intValue ( ) , response . status )
assertEquals ( 1 , records . size ( ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertNotNull ( serviceXml )
assertEquals ( "foo*" , res . getName ( ) )
assertEquals ( "{\\"d\\":{\\"EntitySets\\":[" + "\\"Employees\\",\\"Teams\\",\\"Rooms\\",\\"Managers\\",\\"Buildings\\"," + "\\"Container2.Photos\\"]}}" , getBody ( response ) )
assertEquals ( expected , result )
assertEquals ( "https://java.example.com/foo/1/100/true/bar/buz/qux/foo/bar" , got . toString ( ) )
assertThat ( ChatColor . stripColor ( subject . toString ( ) ) , is ( expected . toString ( ) ) )
Assert . assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( "foo" , ( String ) ext . getValue ( null , obj ) )
assertEquals ( true , bean . getPrimitiveBoolean ( ) )
assertEquals ( "columnControl must have margin from ui" , UIManager . getInsets ( ColumnControlButton . COLUMN_CONTROL_BUTTON_MARGIN_KEY ) , control . getMargin ( ) )
assertEquals ( "tcp://[0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
assertNotNull ( virtualSchemaTO )
assertThat ( ruleManager . get ( id [ 0 ] ) , is ( code [ 0 ] ) )
assertEquals ( prev , propertiesConfigurationProperties . remove ( key ) )
Assert . assertEquals ( TimeZone . getTimeZone ( "America/New_York" ) , config . getTimeZone ( ) )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2008 , 7 , 15 ) , OFFSET_PONE ) , t )
assertSuccess ( services . executeOperation ( udpOperation ) )
Assert . assertFalse ( compatibilityResult . isCompatible ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 }" )
assertTrue ( app . joinOp . succeeded ( ) )
assertNull ( "Expected null privacy policy, but it is not." , privacyPolicy )
assertNull ( transaction )
Assert . assertEquals ( "null" , writer . toString ( ) )
Assert . assertEquals ( new ArrayNode ( ) . add ( new IntNode ( 1 ) ) , node )
assertContains ( indels , 100 , "G" , "GGATCATTACA" )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertMockEndpointsSatisfied ( )
assertNotNull ( objJPAEdmProperty . getJPAAttribute ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"record\\":{\\"url\\":{\\"url\\":\\"http://sendme.com/tropo\\"},\\"beep\\":true,\\"interdigitTimeout\\":5.0,\\"maxTime\\":300.0,\\"asyncUpload\\":true}}]}" )
Assert . assertEquals ( new Partition ( "0-0" ) , partition )
assertTrue ( ( n - n >= warmup ) && ( n - n >= warmup ) )
assertSame ( error , failingStream . getError ( ) )
assertEquals ( expectedQuery , actualQuery )
tc . assertEquals ( thread , Thread . currentThread ( ) . getName ( ) )
assertEquals ( "bkchoi" , result . getResponse ( ) . getContentAsString ( ) )
assertTrue ( ex . isPrime ( 3 ) )
assertEquals ( "projects/settings/pages/associated_edit" , getProjectsForProject ( user ) )
assertThat ( result , is ( subscribedBoltNumber ) )
assertEquals ( 3 , result )
Assert . assertEquals ( "Value1:Value2:Value3" , normalize ( list ) )
assertEquals ( "req --reset-configuration=" + Config . getLineSeparator ( ) , connection . getOutputBuffer ( ) )
assertNull ( "Expected a non-null ojbObject" , notAnOjbObject )
assertEquals ( slice1Assert , slice1Test )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
verifier . assertFilePresent ( GENERATED_SCHEMA )
assertEquals ( "Expected another type of analyzer" , StandardAnalyzer . class , analyzer . getClass ( ) )
assertEquals ( "Hello" , subTrans . getValue ( ) )
assertTokenStreamContents ( ts , new String [ ] { "vitajt" , "wikip茅di" } , new int [ ] { 0 , 11 } , new int [ ] { 7 , 20 } , null , new int [ ] { 1 , 2 } , null , 20 , null , true )
assertEquals ( count , actual )
Assert . assertEquals ( msg , result )
assertEquals ( "The oscar classes should be loaded into the webapps runtime." , expectedResult , result )
assertScenario ( )
Assert . assertEquals ( "Jerry" , title )
assertEquals ( 2. , matrix . getTransportCost ( loc ( 1 ) , loc ( 2 ) , 0.0 , null , null ) , 0.1 )
assertEquals ( "10" , r )
Assert . assertNotNull ( o )
assertEquals ( "a = ? AND (`b.c` = ? OR d IN ?) ORDER BY x" , replacedQuery )
assertEquals ( "Local changes" , ( Integer ) 1 , ref . deref ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "myValue" , sessionStore . get ( "test" , sessionId , String . class ) )
assertEquals ( c1 , c2 )
Assert . areEqual ( 0 , st . getInt ( 1 ) , "验证无数据" )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( baselineData . getIdentifier ( ) , is ( patient . getIdentifier ( ) ) )
Assert . assertNull ( actual )
assertThat ( response . getEntitySearchResults ( ) . get ( 0 ) . getHandle ( ) , equalTo ( "DOMAIN-1" ) )
assertObjectEquals ( "{type:'object',additionalProperties:{type:'object',properties:{f1:{type:'string'}}},description:'org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$BeanMap<java.lang.Integer,org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$SimpleBean>'}}}" , s . getSchema ( BeanMap [ ] [ ] . class ) )
assertEquals ( "[2 = 2,25 = 25,Mr._Akerman_Group[1] = 1,Mr._Akerman_Group[2] = 1,Mr._Akerman_Group[3] = 1,Mr._Akerman_Group[4] = 1,Mr._Akerman_Group[5] = 0,Mr._Chatham_Group[1] = 1,Mr._Chatham_Group[2] = 1,Mr._Chatham_Group[3] = 1,Mr._Chatham_Group[4] = 0,Mr._Etting_Group[1] = 1,Mr._Etting_Group[2] = 1,Mr._Etting_Group[3] = 1,Mr._Etting_Group[4] = 1,Mr._Etting_Group[5] = 0,Ms._Baird_Group[1] = 1,Ms._Baird_Group[2] = 1,Ms._Baird_Group[3] = 1,Ms._Baird_Group[4] = 1,Ms._Baird_Group[5] = 0,Ms._Duval_Group[1] = 1,Ms._Duval_Group[2] = 1,Ms._Duval_Group[3] = 0,Ms._Duval_Group[4] = 0,Ms._Duval_Group[5] = 0,Ms._Duval_Group[5] = 0,Ms._Duval_Group[6] = 1,Ms._Duval_Group[7] = 1,Ms._Duval_Group[8] = 1,Ms._Duval_Group[9] = 1,Ms._Duval_Group[10] = 1,Ms._Duval_Group[11] = 1,Ms._Duval_Group[12] = 1,Ms._Duval_Group[13] = 1,Ms._Duval_Group[14] = 1,Ms._Duval_Group[15] = 1,Ms._Duval_Group[16] = 1,Ms._Duval_Group[17] = 1,Ms._Duval_Group[18] = 1,Ms._Duval_Group[19] = 1,Ms._Duval_Group[20] = 1,Ms._Duval_Group
assertTrue ( "FilterChain should continue." , continueFilterChain )
assertThat ( TestI18n . testMessage . text ( Locale . GERMANY ) , is ( "Test Message" ) )
assertTrue ( "Major Java Version detected" , majorJavaVersion > 0 )
assertEquals ( "Wildcard enum value" , dd . get ( "test.test.Wildcard" ) )
assertSamples ( )
this . assertVerification ( )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( "First option should be optionB" , optionA , SelectListUtil . getFirstOption ( options ) )
assertEquals ( 1 , tokens . size ( ) )
assertEquals ( 5.0 , FrontUtils . distanceToClosestPoint ( point2 , front ) , EPSILON )
assertEquals ( 0 , toml . getLong ( "a" ) . intValue ( ) )
assertEquals ( "Wrong date" , DataConfiguration . DATE_FORMAT_KEY , conf . getDateFormat ( ) )
assertTrue ( Double . isNaN ( percentile . evaluate ( nullArray ) ) )
assertEquals ( "Hello world!" , resources . getString ( "hello.world" ) )
assertEquals ( expectedTextResult , new String ( result ) )
assertNotNull ( workflowService . startWorkflow ( "test" , null ) )
assertEquals ( expected , transformed )
assertNull ( ExpressionUtils . extract ( builder ) )
assertThat ( bomb . state ( ) , is ( "kaboom!" ) )
assertNotNull ( colportor . getId ( ) )
Assert . assertEquals ( urlEsperada , nota . getInfoSuplementar ( ) . getQrCode ( ) )
assertTrue ( StoreParams . sameValues ( p , pDft ) )
assertEquals ( true , p . getActive ( ) )
assertTrue ( dbCon . contains ( "some_id" ) )
assertTrue ( "Successful permission check was not logged" , loggedSuccessfulPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertEquals ( 0 , userList . indexOf ( user ) )
assertEquals ( ProbeStatus . State . CLOSED , status . getState ( ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . GTE , v , TERM_FACTORY . getConstantLiteral ( "1" , XSD . LONG ) ) , translation . get ( 0 ) )
mockery . assertIsSatisfied ( )
Assert . assertNull ( new CompareTool ( ) . compareXmp ( destinationFolder + fileName , sourceFolder + "cmp_" + fileName , true ) )
assertEquals ( "ThinkTime(, )" , result )
Assert . assertEquals ( "��瑁�|��|��瑁�" , words )
assertEquals ( cells . size ( ) , 1 )
assertEquals ( expResult , result )
assertEquals ( stat , fromJson )
assertEquals ( ConnAckMessage . UNNACEPTABLE_PROTOCOL_VERSION , m_returnCode )
assertTrue ( string . contains ( "Missing parameter: foo" ) )
assertFalse ( validator . isValid ( resource , MetadataSection . GEOGRAPH_SECTION ) )
assertThat ( auth . getIssuer ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( URLDecoder . decode ( dest , "utf-8" ) , src )
assertThat ( Modifier . isPrivate ( constructor . getModifiers ( ) ) , is ( true ) )
Assert . assertTrue ( mesageReceivedByClient )
assertTrue ( page . asXml ( ) . indexOf ( "six" ) != - 1 )
assertFalse ( "Expected ComplexSchema integer validation failure did not succeed" , schema . validate ( integerEntity ) )
assertEquals ( "Junit error" , "FFFFFF00" , color . toString ( ) )
assertThat ( "Locations created with identical paths and different properties must not be equal" , locationA1 . equals ( locationA2 ) , is ( false ) )
assertEquals ( "Failed injecting literal with load()" , "\\"foo\\".toString()" , result )
assertTrue ( "The pacts-dependents file is not present in the target/pacts-dependents directory." , PactFileUtils . exists ( targetDir , PactFileUtils . getPactsDirectory ( ) ) )
assertEquals ( edge , axis . mirror ( axis ) )
assertEquals ( expecting , found )
assertEquals ( unitTestTablePojoRead . isBooldata ( ) , true )
assertEquals ( expResult , result )
assertEquals ( p2 , p )
Assert . assertEquals ( entity . ttl , reloaded . ttl , 5 )
assertThat ( changes . size ( ) , is ( 1 ) )
assertTrue ( iterated )
assertTrue ( multiMap . remove ( key ) )
assertEquals ( 1 , messages . size ( ) )
assertEquals ( true , classUnderTest . isUnableToCreateMoreTransactions ( ) )
assertThat ( xray . getInterfaceMethods ( ) , hasSize ( 0 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( "User should be logged in!" , browser . findElements ( By . xpath ( "//li[contains(text(), 'Welcome')]" ) ) . size ( ) > 0 )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( REFERENCED_BUNDLE_V1 , OPTIONAL_BUNDLE ) ) )
assertThat ( response . getStatus ( ) , is ( 200 ) )
assertNull ( testResults . getInvoked ( ) )
Assert . assertEquals ( 1 , term . getConceptReferenceTermMaps ( ) . size ( ) )
assertNotNull ( resultMap )
assertTrue ( cv . supports ( Date . class ) )
assertEquals ( 0.0 , score , 0 )
assertEquals ( 0 , found )
assertEquals ( 10 , toTest . deserialize ( ) )
Assert . assertNull ( result )
assertEquals ( 10 , updater . bytesTransferred ( ) )
assertElementsText ( "H1" , "URL's visited" )
assertEquals ( "test" , nestedAnnotation . name ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertEquals ( 654321 , wsss . getReceiveBufferSize ( ) )
assertFalse ( outputGraphExecutor . equals ( nullOutput ) )
Assert . assertEquals ( 200 , ex . getContext ( ) . getProperty ( HttpContextMapper . HTTP_RESPONSE_STATUS ) . getValue ( ) )
assertEquals ( 1 , jobs . size ( ) )
assertTrue ( "isDisplayed should return true if at most a number of elements are displayed as " + "required, with any number of non-displayed elements." , element . isDisplayed ( ) )
assertEquals ( expected , getString ( TestAggregateImpl . example ( NonReserved . COUNT , false , 42 ) ) )
assertEquals ( Sets . newHashSet ( testWorkflow1v1 , testWorkflowPhylogenomics ) , workflows )
assertArrayEquals ( TEObjectUtil . TE_LSP_ASSOCIATION_2 , ByteArray . getAllBytes ( output ) )
assertArrayEquals ( Doubles . toArray ( huginProbabilities ) , Doubles . toArray ( amidstProbabilities ) , 0.025 )
assertEquals ( "FDN Communications" , orgl . getOrg ( "70.46.123.145" ) )
assertTrue ( smsSettings . isConfigured ( ) )
assertThat ( currentPage , is ( notNullValue ( ) ) )
Assert . assertEquals ( 4 , result )
assertEquals ( "尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖尖�
assertFalse ( "There should be no row" , listParser . nextRow ( ) )
assertEquals ( "This parameter" , encodedURL )
assertTrue ( infoList . isEmpty ( ) )
assertEquals ( 0 , future . get ( ) . getResult ( ) . size ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
Assert . assertTrue ( users . size ( ) >= 0 )
Assert . assertEquals ( "Unexpected coverage: " , 2d / 3d , best . getCoverage ( ) , 0.001 )
assertTrue ( permissionEvaluator . hasProjectPermission ( authentication , "project" , "project" , Permission . EDIT_PAGE ) )
assertEquals ( 0 , query ( ) . from ( app1 ) . where ( app1 . isEmpty ( ) ) . fetchCount ( ) )
assertEquals ( input , JsonbProvider . provider ( ) . create ( ) . build ( ) . fromJson ( new StringReader ( json ) , SimpleProperty . class ) . value )
assertSame ( base , Duration . ofSeconds ( 1 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , result . size ( ) )
assertTrue ( userCanDeleteBranch )
assertTrue ( timeline . getFetchCount ( ) > 0 )
assertEquals ( "Select scripts are not the same" , expectedMergeSourceInDifferentSchema ( ) , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( "1:xxxy;\\n" , found )
assertEquals ( expected , bos . toString ( ) )
org . junit . Assert . assertEquals ( expected , tHandler . getLastRecord ( ) . getThrown ( ) )
assertThat ( outputFile . length ( ) , is ( fileLen ) )
assertNumEquals ( .9d , mdd . calculate ( series , tradingRecord ) )
Assert . assertEquals ( 2 , violations . size ( ) )
assertEquals ( "{\\"hello\\":[1,2]}" , writer . toString ( ) )
assertNotNull ( key )
assertRoundtrip ( input )
assertEquals ( 0. , violation , 0.01 )
assertEquals ( Boolean . valueOf ( true ) , result )
assertNotNull ( sKey , aCSS )
assertTrue ( "Should get valid parser" , parser != null )
assertFalse ( rule . shouldProceed ( userSession , request ) )
assertEquals ( displayer . isRefreshOn ( ) , false )
assertAnnotations ( 2 , Quantity . class , new TestQuantity ( 0 , "400 square millimetres" , 400 , "mm^2" , 400 * Area . MM2_TO_M2 , "m^2" , "area" ) , new TestQuantity ( 1 , "400mm^2" , 400 , "mm^2" , 400 * Area . MM2_TO_M2 , "m^2" , "area" ) )
assertTrue ( true )
Assert . assertFalse ( "multipart/byteranges" . equalsIgnoreCase ( elt . getName ( ) ) )
assertEquals ( "123" , id )
assertEquals ( 0 , manager . getAll ( ) . size ( ) )
assertFalse ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
assertNull ( lookUpManager . lookUpWorkingObjectOrReturnNull ( object ) )
assertEquals ( l1 , l2 )
approver . assertApproved ( data , new TableFormatter ( ) . withHeaders ( "Header 1" , "Header 2" , "Header 3" ) )
assertEquals ( attributes , repositoryRecord . getCurrent ( ) . getAttributes ( ) )
assertEquals ( expected , sanitized )
assertEquals ( - 1 , list . size ( ) )
assertEquals ( "Expected response not seen." , 404 , response . getStatus ( ) )
assertThat ( ( String ) Whitebox . invokeMethod ( target , "getDestinationCompId" , path ) , is ( "topology/nodes" ) )
assertThat ( sut . getFixtureFactoryDefinition ( ) , is ( notNullValue ( ) ) )
assertEquals ( "Wrong number of sink elements" , 2 , w . getAll ( ) . size ( ) )
assertNull ( person2 )
assertNotNull ( "IDPSSODescriptor is not null" , sp )
context . assertIsSatisfied ( )
Assert . assertEquals ( 600 , response . getExpireTime ( ) )
assertEquals ( "OS X" , os )
assertTrue ( i + ", " + src . getAbsolutePath ( ) , src . delete ( ) )
assertEquals ( 10L , FutureUtils . result ( target ) . longValue ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "test" ) )
assertThat ( result , is ( "((item.lastmodified:[" + escapedFromDate ( DATE ) + " TO *]))" ) )
Assert . assertEquals ( "should have updated info" , testUser , updatedUser . getInfo ( ) )
assertTrue ( req_018_Util . isPeerInterestedOnRemoteWorker ( rwmOID . getServiceID ( ) ) )
assertEquals ( 1.2e22 , ( ( DoubleValue ) ( ( SelectExpressionItem ) ( ( PlainSelect ) select . getSelectBody ( ) ) . getSelectItems ( ) . get ( 0 ) ) . getExpression ( ) ) . getValue ( ) , 0 )
assertTrue ( "Found nested declarations" , nested == null || nested . isEmpty ( ) )
assertTrue ( nonAdminTestingAccountEmail + " should be a valid admin." , answer . getReturnVal ( ) . equals ( "false" ) )
assertEquals ( true , ( allforums . size ( ) > 0 ) )
assertTrue ( startState )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response transactionId is: <xml />" ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + name + ".pdf" , destinationFolder , "diff_" ) )
assertEquals ( "" , result )
assertFalse ( iter . hasNext ( ) )
assertThat ( partitionKeyValue . toJson ( ) , equalTo ( mapper . writeValueAsString ( Collections . singletonList ( data . city ) ) ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertEquals ( "abcdef" , page1 . getTextContent ( ) )
Assert . assertEquals ( "http://localhost/123" , url )
assertThat ( "missing owner not detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( testSet , monitorNames )
assertThat ( findFeature ( features , "ChangeAvailability" ) , is ( instanceOf ( ChangeAvailabilityFeature . class ) ) )
assertEquals ( "twitter/tweet/_search" , search . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertReplacement ( input , regex , replacement , lookBehind , capacityCharBuf , expectedOutput , flags )
assertEquals ( V8Value . V8_ARRAY , type )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
Assert . assertTrue ( isValid , "Poll with empty title and empty items must be valid" )
assertEquals ( expected , toJSON ( series ) )
assertEquals ( "3 ��芯谢���� �芯屑�" , t . format ( new Date ( 0 ) ) )
assertThat ( request . getTargetClass ( ) , is ( equalTo ( clazz ) ) )
assertEquals ( "a" , params . getString ( new Parameter ( "a.k" ) , null ) )
assertThat ( o , nullValue ( ) )
Assert . assertEquals ( entity . publicValue , actualValue )
assertTrue ( result )
assertTrue ( t1 . getTopics ( ) . isEmpty ( ) )
Assert . assertNotNull ( cu )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyFields01.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "Expected average value" , 1.0 , outputValues . get ( 0 ) , 0.000001 )
assertTrue ( Arrays . equals ( data , ( boolean [ ] ) deserialize . readObject ( boolean [ ] . class ) ) )
assertions . doesNotContain ( value , index )
assertEquals ( expected , actual )
assertEquals ( expResult , result )
assertNotNull ( myBean )
assertThat ( errors , hasFieldErrors ( "givenName" ) )
Assert . assertEquals ( 0 , stat )
assertNotNull ( reconnectCohort )
Assert . assertEquals ( 1 , new QueryRunner ( this . em ( ) . unwrap ( DataSource . class ) ) . query ( "SELECT COUNT(*) FROM Foo" , new SingleValueHandler < Number > ( ) ) . intValue ( ) )
assertTrue ( "Path " + pathOnFileSystem + " not deleted" , entities . contains ( f ) )
assertNotNull ( table )
assertLongArrayEquals ( expected , toLongArray ( splits ) )
assertEquals ( "Must be Equal" , interfaceTypeClass , InterfaceTypeOther . class )
Assert . assertEquals ( 2 , tables . size ( ) )
assertThat ( rowCount , is ( 0L ) )
assertTrue ( tp . equals ( tp ) )
assertEquals ( "it is aa" , b . itIsAa ( "aa" ) )
assertGameOver ( )
assertThat ( getInst ( ) . findNode ( "master" ) , equalTo ( masterNode ) )
assertNull ( spanBuilder )
assertFalse ( isAuthenticated )
assertFalse ( voter . voteMatch ( affiliation , organization ) )
Assert . assertTrue ( queueResponse . isOk ( ) )
assertEquals ( 1.0 , instance . inclusiveHypervolume ( ind ) , 0.0 )
assertEquals ( UNDEFINED , metadata . getLanguage ( ) )
Assert . assertTrue ( comparator . compare ( cell2 , cell1 ) == - 1 )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
assertEquals ( 3 , list . size ( ) )
assertEquals ( expectedResult , verifyTomcat . invoke ( audit ) )
Assert . assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \\"A multi\\nline string\\" . }" , query . toString ( ) )
assertEquals ( prefixes , instance . getPrefixes ( ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertEquals ( expectedIds , Ids )
assertFederatedServiceResource ( resource )
Assert . assertEquals ( icmsSetado , icms . getIcmssn102 ( ) )
assertContains ( e . getMessage ( ) , "'id'" )
assertEquals ( "wrong size" , 1 , bitSet . size ( ) )
Assert . assertEquals ( false , objectSet . isEmpty ( ) )
assertThat ( "There should be 2 browser" , browsers , hasSize ( 2 ) )
assertNotNull ( photoRepository )
Assert . isTrue ( true )
assertSame ( ShadowToast . shownToast ( ) , ShadowToast . ShadowToast ( ) . get ShadowToast ( ) )
assertEquals ( expected , actual . toString ( ) )
assertEquals ( profile , copy )
assertEquals ( "Select with descending order by" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertEquals ( 0 , analyser . getWaitingTimeAtActivity ( route . getStart ( ) , route ) , 0.01 )
Assert . assertEquals ( "center" , cell . getHorizontalAlign ( ) )
assertThatSql ( query , is ( "SELECT nodes.col1,nodes.col2 FROM table AS nodes" ) )
assertEquals ( 3.1d , result , 0.00001 )
assertThat ( end . toZonalTimestamp ( tz . getID ( ) ) , is ( PlainTimestamp . of ( 2011 , 12 , 31 , 0 , 0 ) ) )
repository . findByFirstnameAndLastname ( Single . just ( "Walter" ) , "White" ) . test ( ) . awaitCount ( 1 ) . assertNoErrors ( )
Assert . assertEquals ( h2 . get ( "key" ) , h . get ( "key" ) )
Assert . assertEquals ( IntegerNode . valueOf ( 2 ) , result )
assertTrue ( "Path added node is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + addedNode . getPath ( ) , containsPath ( listener , addedNode . getPath ( ) ) )
assertEquals ( "Error from form:commandButton" , span . getText ( ) )
Assert . assertNull ( tocFile )
Assert . assertEquals ( testSize , _receiver . getCount ( ) )
assertEquals ( vr . getValidity ( ) , Validity . INVALID )
assertEquals ( 1 , testResults . getDeliveries ( ) )
Assert . assertEquals ( 10 , statusTuples . size ( ) )
assertEquals ( expResult , result )
assertEquals ( expected , actualOutput )
Assert . assertEquals ( 0 , terms . size ( ) )
Assert . assertNull ( eventScanConfig )
assertEquals ( localServer , localServant . _local_object ( ) )
assertViolationsThat ( report . getValidationViolations ( ) , equalTo ( "Root definition has no documentation" ) , equalTo ( "baseUriParameter 'path' in resource(/bla/{param}) has no description" ) , equalTo ( "uriParameter 'param' in resource(/bla/{param}) has no description" ) , equalTo ( "action(GET /bla/{param}) has no description" ) , equalTo ( "header 'ok' in action(GET /bla/{param}) has no description" ) , equalTo ( "header 'ok' in action(GET /bla/{param}) response(200) has no description" ) )
assertTrue ( nodes . split ( "\\n" ) . length > 0 )
assertEquals ( 1 , eventSubscriptions . size ( ) )
assertThat ( issues , is ( empty ( ) ) )
assertEqualDoubleVectors ( X , X [ 3 ] , epsilon )
assertEquals ( "Test SQL Exception" , formattedMessage )
assertSomeDataGuessed ( expected , actual )
assertEquals ( "1" , mockCodePipelineClient . job . getJobResult ( ) )
assertEqualsIgnoreWhitespace ( expectedDRL , RuleModelDRLPersistenceImpl . getInstance ( ) . marshal ( model ) )
assertEquals ( data , HelloWorld . helloWorld ( data ) )
assertNull ( data )
Assert . assertTrue ( zipfile . exists ( ) )
Assert . fail ( "Expected timeout exception" )
assertThat ( subject . getMaxSerialInContext ( ) , is ( 0 ) )
Assert . assertEquals ( "95686bc0483262afe170b550dd4544d1" , result . toStringUtf8 ( ) )
assertEquals ( 4 , extension . getHandlersForExceptionType ( IllegalArgumentException . class , bm , qualifiers , TraversalMode . BREADTH_FIRST ) . size ( ) )
Assert . assertEquals ( newLastModificationTimeMs , inodeDirectory . getLastModificationTimeMs ( ) )
assertEquals ( expResult , result )
assertEquals ( "hello world" , extractedString )
assertTrue ( "testCanEditBooleanAuth2 0" , collectionService . canEditBoolean ( context , collection ) )
assertEquals ( 1 , cache . listPrivileges ( null , null , null , new Server ( "server1" ) , new Database ( "db1" ) ) . size ( ) )
assertEquals ( expected , actual )
assertEquals ( null , cli . getCredentials ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import java.util.Collection;\\n" + "import java.util.List;\\n" + "public abstract class ClazzName extends java.util.Collection;\\n" + "public abstract class ClazzName {\\n" + "  public <T>List<T> asList(  Collection<T> values){\\n" + "    return null;\\n" + "  }\\n" + "}" , cu . toString ( ) . trim ( ) )
assertThat ( localization . getLocale ( ) , equalTo ( PT_BR ) )
assertEquals ( false , attributes . isOtherAttribute ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( f1 , f2 )
assertEquals ( expecteds , actuals )
assertTrue ( "InetSocketAddress should be recreated" , inetSocketAddress1 == inetSocketAddress2 )
assertTrue ( classLoader instanceof Fake_ClassLoader )
assertEquals ( packet , p )
assertEquals ( "25" , empty . getCommand ( ) )
assertEquals ( ForwardSecrecyBlackList . RSA_EXPORT_WITH_RC2_CBC_40_MD5 , cipher )
assertEquals ( "Hello ^there" , ResponseBodyInterpolator . interpolate ( "Hello ^there" , req ) )
assertArrayEquals ( expected , result )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( address , address2 )
assertThat ( domain . getValidationFailures ( resourceLookup ) , empty ( ) )
assertEquals ( stop , receivedStop )
assertFalse ( service . isSupported ( mockWpsServerContext ) )
assertTrue ( result . getMessageType ( ) . equals ( MessageType . REQUEST_BAD_REQUEST . getMESSAGE_TYPE ( ) ) )
assertNotNull ( "Previous step failed" , uri_userInstance )
assertEquals ( expected , actual )
assertEquals ( TestUtil . NO_PROXY , result . get ( 0 ) )
assertNull ( result )
assertEquals ( expected , out )
assertEquals ( expected , actual )
assertThat ( mFileHelper . mImageFile , is ( nullValue ( ) ) )
assertNull ( store . pull ( key1 ) )
assertThat ( matcher . matches ( "{\\"number\\":1}" ) , is ( false ) )
assertEquals ( "Should return the first server in the list" , 1 , fat . getNextServer ( ) )
assertThat ( duration . isNegative ( ) , equalTo ( true ) )
assertEquals ( "* :123: Arthur Dent\\n" , toWikiText ( note ) )
assertEquals ( expResult , result )
assertEquals ( expectedPort , actualPort )
Assert . assertTrue ( "expecting the false positive rate to be up to 3%" , falsePositiveRate < 0.03d )
assertEquals ( "helloworld" , cfg . helloWorld ( ) )
assertThat ( e . getCause ( ) , Matchers . instanceOf ( ArangoDBException . class ) )
assertNull ( testService . getState ( ) )
assertEquals ( content , "Line1\\nLine2" )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . UNKNOWN_SOURCE_QUEUE , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertEquals ( 0 , inclusionTerms . size ( ) )
assertEquals ( logs . get ( i ) , message )
Assert . assertEquals ( expectedResult , resultString )
assertThat ( DateInterval . parseISO ( "2012-01-01/2014-02-14" ) , is ( expected ) )
assertions . doesNotContain ( value , index )
assertEquals ( 8 , result . size ( ) )
assertThat ( tracker . getAll ( ) [ firstElementOfArray ] , is ( itemTask ) )
assertNotNull ( f . getRecordWriter ( config , c ) )
assertEquals ( 2 , ksession . fireAllRules ( ) )
Assert . assertTrue ( unicodeString . equals ( unicodeString ) )
assertThat ( output , containsString ( "FHIR resource created:" ) )
assertEquals ( "5" , exec . getNumMapTasks ( ) )
assertTrue ( fixture . hasSubscriptionId ( ) )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): world:" , "    KEY(2): europe:" , "     KEY(4): france:" , "        RAW(6): cheese" , "      KEY(4): belgium:" , "        RAW(2): beer" , "     KEY(2): canada:" , "       KEY(4): montreal: poutine" , "      KEY(4): vancouver:" , "       RAW(6): salmon" , "    KEY(0): moon:" , "    KEY(2): moonbase-alfa:" , "      RAW(4): moonstone" , "       RAW(-1):" )
Assert . assertArrayEquals ( "original array not equals compress/decompressed array" , result , bytes )
assertThat ( status , equalTo ( GGDataSource . Status . ROLLBACK ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfWithFieldsWithValue.pdf" , sourceFolder + "cmp_xfdfWithFieldsWithValue.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "true" , result . getResource ( 0 ) . getContent ( ) . toString ( ) )
assertThat ( count , is ( 1L ) )
assertTrue ( possibleOutcomes . contains ( concept ) )
assertTrue ( expectedExperimentContents . contains ( mockDocResult ) )
assertNotNull ( result )
assertForbiddenResponse ( response )
assertTrue ( true )
assertArray2dEquals ( expecteds , actuals )
assertEquals ( expected , uri . toString ( ) )
assertXMLIdentical ( new Diff ( result , combineWithIdKey ( recessive , dominant ) ) , true )
assertEquals ( lines - 1 , results )
assertTrue ( ndefMessage . getNdefRecords ( ) . length == 0 )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertEquals ( "Wrong result" , value , interpolator . interpolate ( value ) )
assertEquals ( 2 , all . size ( ) )
Assert . assertEquals ( 1 , dependences . size ( ) )
assertEquals ( "Shape names are incorrect" , allMyShapes , builder . toString ( ) )
Assert . assertTrue ( strategy instanceof ExportStrategy )
assertFalse ( node . equals ( node ) )
assertThat ( testResponse , is ( expectedResponse ) )
assertTrue ( o . description ( ) . startsWith ( "(overridden) " + "<j_org_robovm_objc_CustomClassTest$SubClass1: 0x" ) )
assertEquals ( "\\\\" + escapedFilename + "\\\\" , response )
assertEquals ( RaftServer . State . Leader , follower . state ( ) )
assertEquals ( BAD_REQUEST_400 , response . getStatus ( ) )
assertEquals ( 5 , calculator . getResult ( ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertXMLIdentical ( new Diff ( result , combineWithIdKey ( recessive , dominant ) ) , true )
assertNotNull ( res )
assertEquals ( "[{key:value},{key:value2}]" , target . toString ( ) )
assertThat ( resultedQuery , is ( expectedQuery ) )
assertNotNull ( "Clinical data is not null for ID" , clinicalData )
clusterSetup . assertLocationsEqualError ( )
assertEquals ( new Rectangle ( 0 , 0 , 10 , 100 ) , pos )
assertTrue ( r1 instanceof PublicCloneable )
assertTrue ( raises )
assertEquals ( "cast('2003-12-31' AS date)" , helpGetString ( func ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( "select a~ from dual" , result )
assertEquals ( 2 , in . getByteCount ( ) , 0L )
Assert . assertNotNull ( book . getId ( ) )
Assert . assertNotNull ( testSession )
assertArrayEquals ( new long [ ] { 1 } , result )
Assert . assertEquals ( 3 , vertices . size ( ) )
assertTrue ( map . containsKey ( JSR166TestCase . six ) )
Assert . assertEquals ( false , config . isDebug ( ) )
assertOut ( "/**\\n * @private\\n * @type {boolean}\\n */\\nRoyaleTest_A.prototype.foo" )
assertTrue ( buildIds . isEmpty ( ) )
Assert . assertEquals ( "There is no item here." , responseResult . getText ( ) )
assertNull ( mapValue . getValue ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( 0 ) )
assertEquals ( relationship1 , lookedUpRelationship )
assertEquals ( "foo" , classifier . classify ( new SubClass ( ) ) )
assertEquals ( expecting , found )
assertEquals ( Result . PASS , type . apply ( item ) )
assertEquals ( 1 , testList . size ( ) )
Assert . assertNotNull ( selfInjected )
assertEquals ( "3 dage siden" , t . format ( new Date ( 0 ) ) )
assertEquals ( sampleIn . removeCastToSameType ( oi ) , sampleOut . removeCastToSameType ( oi ) )
assertEquals ( "encrypted:bar properties do not match blob" , properties , item . getProperties ( ) )
Assert . assertEquals ( otfLength , reparsedFont . header . totalSfntSize )
assertMockEndpointsSatisfied ( )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaParameterTypeDefinition ( "" , "(.*)" , method , false , false , lookup ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertEquals ( expected , sb . toString ( ) )
assertTrue ( "Returned object should be a SynchronizedSortedBag." , bag instanceof SynchronizedSortedBag )
assertThat ( target . onConnectionChangedAddedPre ( msg ) , is ( false ) )
assertThat ( res . toString ( ) , is ( equalTo ( "My friend Rokko is 30 years old." ) ) )
Assert . assertEquals ( "faked-id-1" , newId )
assertDepth ( "addLevel" , callTree , expectResult )
assertThat ( "Event did not return correct event type" , listener . getEvents ( ) . get ( 0 ) . getType ( ) , is ( Event . NODE_ADDED ) )
assertTrue ( unitOfWork . isDirty ( ) )
assertFalse ( validator . isValid ( resource , MetadataSection . BASIC_SECTION ) )
assertEquals ( expectedAst , ast . dump ( "" ) )
assertNotNull ( workflowSource )
assertThat ( condition . isSatisfied ( ) , is ( false ) )
assertEquals ( 3.5d , prediction , 0.0 )
assertEquals ( 0 , a1 . getZeroBased ( ) )
assertEquals ( 1 , targets . size ( ) )
assertNotNull ( result )
assertEquals ( sum . getTotal ( ) , BigDecimal . TEN )
assertTrue ( pregame . before ( superBowlXLV ) )
assertNotNull ( result )
assertEquals ( expResult , result )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( "SSS:1234trueW:5" , x . toString ( ) )
assertTrue ( uuid . length ( ) == urlToken . length ( ) )
Assert . assertEquals ( dataString , str )
assertEquals ( 1 , x )
assertTrue ( key . isComplete ( ) )
Assert . fail ( "testCreateSymlink - expected exception is not thrown" )
Assert . assertFalse ( translateService . isTranslated ( field ) )
assertEquals ( "a,b,c" , sw . toString ( ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertEquals ( 6 , s )
assertThat ( ontologyIds , containsInAnyOrder ( ontologyIdA , ontologyIdB ) )
assertEquals ( "http://localhost:80/" , httpEndpoint )
assertEquals ( new String ( result ) , "test parsed" )
assertEquals ( Status . SUCCESS , response . getStatus ( ) )
assertFalse ( problem )
assertThat ( allergyStatus , is ( NO_KNOWN_ALLergIES ) )
assertTrue ( text . contains ( "Seam Reports Rocks" ) )
assertEquals ( expectedValues , DurationsConverter . convertFromNanos ( input , MINUTES ) )
assertEquals ( "foo" , Util . toString ( parameters ) )
given ( ) . param ( "res" , 1 ) . when ( ) . get ( "resources/" ) . then ( ) . assertThat ( )
Assert . assertTrue ( count == 0 || count == runs )
assertFalse ( validator . validate ( os , CollectionUtils . < Object > emptySet ( ) ) . isEmpty ( ) )
assertThat ( currentSessionManager . isSessionRecording ( ) , equalTo ( true ) )
assertNull ( outbound ( writeTarget ) )
assertEquals ( "Donald Trump turn on the light" , target_ )
assertEquals ( domTreeEntry , domRpcEntry )
Assert . assertEquals ( expected , actual )
assertEquals ( "tR3+Ty81lMeYAr/Fid0kMTYa/WM=" , signer . sign ( request , params ) )
assertEquals ( "Incorrect string generated" , String . format ( "%n    - Set bar to foo from ExampleData and OtherTable, joined on x is y" ) , HumanReadableStatementHelper . generateAliasedFieldAssignmentString ( field ) )
assertDateEquals ( new DateTime ( 2013 , 5 , 20 , 15 , 0 , 0 , 0 ) , date )
assertTrue ( randomBoolean == randomDouble )
assertEquals ( "SELECT @type as alias FROM C" , q . toString ( ) )
assertAllCommandsUsed ( )
assertThat ( allUsedBindings ( result ) , containsInAnyOrder ( "$p" ) )
assertNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( "The size of the list is incorrect!" , cnt , blockIterator ( ) . size ( ) )
assertEquals ( expectedQuery , query )
assertThat ( result , is ( true ) )
Assert . assertTrue ( pattern2 . matcher ( employee . getName ( ) ) . matches ( ) )
assertThat ( actual , is ( Key . create ( CounterShardData . class , TEST_COUNTER_NAME ) ) )
Assert . assertTrue ( rawClass . isArray ( ) )
assertNull ( query . singleResult ( ) )
Assert . assertEquals ( expected , tested . listRequestInit ( ) )
assertSame ( "requestsCount" , 1 , ejbCounter . getRequestsCount ( ) )
assertEquals ( "Message is not received" , client2MessageReceived . get ( ) , serverConnectionOpened . get ( ) )
assertEquals ( OTHER_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( size , codec . read ( bytes , 0 , bytes . length ) )
assertEquals ( expectedMimeType , actualMimeType )
assertEquals ( 3.0 , costs , 0.01 )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertThat ( changeList . getResult ( ) , is ( subject ) )
Assert . assertTrue ( returnedVisibilities . isEmpty ( ) )
assertNotSupported ( result )
assertEquals ( "numhits is wrong" , 1104 , res . getNumhits ( ) . intValue ( ) )
assertThat ( actual , is ( equalTo ( "test" ) ) )
assertThat ( MDC . get ( "FOO" ) , equalTo ( "BAR" ) )
assertThat ( thrown , instanceOf ( TimeoutExceededException . class ) )
assertEquals ( 2 , map . size ( ) )
assertThat ( result , is ( new String [ ] [ ] { { "Hello\\nworld!" } } ) )
assertEquals ( 3 , result . size ( ) )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertEquals ( "22-16157603-G-C" , argument . getValue ( ) . getTranscript_consequences ( ) . iterator ( ) . next ( ) . getVariant_id ( ) )
Assert . assertEquals ( "SELECT 10 IS true;" , text )
assertEquals ( 0 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertTrue ( humanName . hasGiven ( "test" ) )
assertEquals ( 900 , subject . getMinimumDisplayTime ( ) . get ( ) . intValue ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "header grid position must return null date" , null , ui . getDayInMonth ( month , BasicMonthViewUI . DAY_HEADER_ROW , BasicMonthViewUI . DAY_HEADER_COLUMN ) )
Assert . assertEquals ( "\\"bob\\"" , result . toString ( ) )
assertThat ( catResult . getEvents ( ) , hasSize ( 2 ) )
assertEquals ( "" , result )
assertEqArgumentGeneratesXPath ( - 2 , eqNegative2XPathExpression )
assertEquals ( expected , actual , DELTA )
assertEquals ( 3 , objmap . size ( ) )
assertEquals ( "(LIST<W> a<V> b<V> c<V>)\\n" , found )
assertEquals ( deploymentArtifact , driverDeploymentArtifact . getArtifactRef ( ) . getArtifact ( ) )
assertSame ( text , model . postFormBean ( text ) )
assertEquals ( "Test message" , writer . toString ( ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertTrue ( received )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
assertSuccess ( taskAfter . getResult ( ) )
Assert . assertNotNull ( newCluster )
assertEquals ( 10 , x )
assertEquals ( expected , actual )
assertNotNull ( expectedRequester )
assertEquals ( "[message: hello0, message: hello1]" , broadcasts . toString ( ) )
assertResponse ( outputStream , expected )
assertFalse ( features . isPresent ( ) )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , received )
assertEquals ( "������" , getMessage ( MessageKeys . E_TR_FW_0001 ) )
assertThat ( output . readValuesToList ( ) , equalTo ( expectedValues ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "The default domain" , localDomain , gmx . getProperty ( "defaultDomain" ) )
assertThat ( d . getScope ( ) , equalTo ( "m" ) )
Assert . fail ( )
assertEquals ( "date" , attributeDesc . getTypeName ( ) )
assertTrue ( features . isEmpty ( ) )
assertEquals ( "https://image.eveonline.com/Render/22436_32.png" , urlString )
assertEquals ( "/2012/2012-04-20T16%3A20%3A00.000-0400" , uri )
assertNotNull ( person )
assertEquals ( json . toString ( ) , sc . schemaConfAsJSON ( ) )
assertEquals ( BINARY_CONTENT , result )
assertEquals ( 1 , col . count ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( componentName , "${componentNameClass}" )
assertEquals ( Integer . valueOf ( 1 ) , mode )
assertDefaults ( filter )
assertEquals ( "https://login.microsoftonline.com/6731de76-14a6-49ae-97bc-6eba6914391e" , config . getSite ( ) )
assertThat ( PlainTime . axis ( ) . getBaseUnit ( MILLI_OF_DAY ) , is ( unit ) )
assertTrue ( isVisibleForModerator )
assertNotNull ( result )
assertTrue ( true )
Assert . assertEquals ( "f1:2.5" , ret . toString ( ) )
assertSame ( ClusterType . STAND_ALONE , myTestFactory . getClusterType ( ) )
assertThat ( "testGpValue" , is ( functions . globalProperty ( "testGpName" , "" ) ) )
assertEquals ( "\\n<p>This is <strong>bold</strong>
assertTrue ( Files . exists ( tmpFile ) )
assertEquals ( "mail.smtp.starttls.enable=true" , descriptor . getListId ( ) )
assertTrue ( mConfiguration . getBoolean ( PropertyKey . WEB_THREADS ) )
assertFalse ( entity . isValid ( ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( "PT1M" , microdata . getFirstProperty ( "prepTime" ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertEquals ( Long . class , h . getClass ( ) )
assertEquals ( "DoubleIt isn't working with negative numbers" , - 16 , response )
assertTrue ( "Stream contains data" , stream . size ( ) > 10 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( expectedRate , rate , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "jranalyst" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertThat ( Arrays . asList ( array ) , hasItems ( 0 , 1 , 2 , 3 , 4 , 5 , 6 ) )
assertExtractEquals ( Lists . newArrayList ( "AAC:value AAC" , "ABC:value ABC" , "value ACC:value ACC" ) , extractor . extract ( result ) )
runner . assertNotValid ( )
assertEquals ( undefined1 , undefined2 )
Assert . assertEquals ( "Basic url not escaped correctly" , in , WebUtilities . percentEncodeUrl ( in ) )
assertThat ( result , is ( "foo" ) )
Assert . assertThat ( bufferCount , is ( 8L ) )
assertThat ( "Initator methionine wrong" , initMet . toString ( ) , is ( "M" ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"say\\":[{\\"value\\":\\"1234\\"}]}]}" )
assertAccessorsCorrect ( new WTable ( ) , "noDataMessage" , msg , "nodata1" , "nodata2" )
assertThat ( customer , sameInstance ( anotherCustomer ) )
assertEquals ( "stream name not shortenen correctly" , "loadrules" , scm . getBranchNames ( ) )
assertEquals ( 0 , runnersAfter . size ( ) )
assertTrue ( found )
assertEquals ( 0 , annotatedTypes . size ( ) )
assertEquals ( "xsd:byte" , prefixedName )
assertTrue ( true )
Assert . assertEquals ( stop . getLatitude ( ) , csvValues . get ( "lat" ) )
assertEquals ( "2014-03-03T15:49:50Z" , actual )
assertThat ( componentId , is ( "madeup" ) )
assertTrue ( learned . isEquivalentTo ( given , ba ) )
assertEquals ( 123 , value )
assertEquals ( Arrays . asList ( input , tuples ) , results )
Assert . assertEquals ( "hux" , manipulation . getOldColumnName ( ) )
assertTrue ( integrationApp . isOnTerminate ( ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( Json . pretty ( model ) , "{" + NEWLINE + "  \\"properties\\" : {" + NEWLINE + "    \\"byteArray\\" : {" + NEWLINE + "      \\"type\\" : \\"array\\"" + NEWLINE + "      \\"items\\" : {" + NEWLINE + "        \\"type\\" : \\"string\\"" + NEWLINE + "        \\"format\\" : \\"binary\\"" + NEWLINE + "       }" + NEWLINE + "   }" + NEWLINE + "}" )
assertEquals ( 2 , numberOfLines )
assertArrayEquals ( bytes , otherBytes )
editor . assertProblems ( "build-it|should define 'branch'" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not-a-job|does not exist" , "not
assertEquals ( "ouch!" , t . getMessage ( ) )
assertTrue ( numberFour . isBefore ( newYearsDay ) )
Assert . assertEquals ( cDate , eDate )
assertEquals ( "Invocation" , event . getDataId ( ) )
assertEquals ( "upperContext fieldValidationError" , classNameForPropertyInputField )
assertions . isNotLessThan ( null )
Assert . assertTrue ( sdk . getAaptPath ( ) != null && ! sdk . getAaptPath ( ) . equals ( "" ) )
assertEquals ( HttpStatus . SC_BAD_REQUEST , response . getStatus ( ) )
assertNotNull ( bundle )
assertEquals ( Collections . emptyList ( ) , group . getValue ( ) )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
assertEquals ( FleetSize . FINITE , vrp . getFleetSize ( ) )
assertEquals ( 1 , counter . longValue ( ) )
assertEquals ( expected , graph . authorizations ( ) )
assertFalse ( actualResult )
assertCapturedMessage ( eventMessage ( "sess1" , "/foo/**/1" , "message1" ) , eventMessage ( "sess2" , "/foo" , "message1" ) )
assertPushPromiseFrame ( frame , streamId , Unpooled . EMPTY_BUFFER )
assertEquals ( fileSize , fileSizeActual )
assertThat ( actual , is ( "2015-05-01 12:31:49.000" ) )
assertEquals ( expected , result )
assertTrue ( bodyTypeAdapter instanceof JSONBodyTypeAdapter )
assertTrue ( foundMethods != null && foundMethods . size ( ) == 5 )
assertFalse ( credentials . isPresent ( ) )
assertEquals ( max , fs . getBootSector ( ) . getRootDirEntryCount ( ) )
Assert . assertEquals ( iters , 2 )
assertNull ( serverSpan . getCurrentServerSpan ( ) )
Assert . assertEquals ( 0. , analyser . getWaitingTimeAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertTrue ( closed . await ( 2 , SECONDS ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Prompt>" + "<Say language=\\"arb\\" loop=\\"1\\" voice=\\"man\\">message</Say>" + "<Pause length=\\"1\\"/>" + "<Play digits=\\"digits\\" loop=\\"1\\">https://example.com</Play>" + "</Prompt>" , elem . toXml ( ) )
assertEquals ( "{\\"from\\":\\"btccny\\",\\"to\\":\\"2\\"}" , json )
assertThat ( result . statusCode , is ( Response . OK ) )
assertFalse ( matcher . match ( msg , rule ) )
Assert . assertEquals ( "OK" , result )
assertEquals ( "" , sw . toString ( ) )
assertEquals ( con , fp . getConstraintValue ( ) )
assertThat ( indexPage . nameRadioButtons . getSelectedValue ( ) . get ( ) , is ( "2" ) )
assertEquals ( ImmutableList . of ( TestProto . newBuilder ( ) . setId ( "id" ) . setIntField ( 123 ) . setTestProto ( Proto1 . newBuilder ( ) . setInnerId ( "1" ) . build ( ) ) ) , protoBuf . getMessage ( ) . getBuf ( ) )
assertTrue ( wlsClusterConfig . checkUpdateDynamicClusterSizeJsonResult ( "{ xyz }" ) )
assertResponse ( DataMockery . createRESPMODWithGetRequestNoBody ( ) , request )
assertTrue ( output . startsWith ( "<
assertEquals ( expectedJsonObject , model . getJsonObject ( ) )
assertEquals ( "SELECT * FROM NEW1" , result )
assertThat ( userStoryClass . getName ( ) , is ( MyUserStories . PurchaseNewWidget . class . getName ( ) ) )
assertEquals ( "modulus " + i , modulusBits , getModulusRandom ( nBits ) )
assertNotNull ( "Social Followers (JSON STRING)" , friends )
assertSuccess ( validationResult )
assertNotNull ( result )
Truth . assertThat ( callable . call ( 1 ) )
assertNull ( entry )
assertEquals ( 1007164800000L , w . getFirstMillisecond ( calendar ) )
assertTrue ( sqlString . contains ( "sqlname.name asc" ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , defaultOutbound )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertEquals ( g1 , g2 )
assertNotNull ( signature )
assertThat ( domainTopology . getServerConfig ( serverName ) . getAdminPort ( ) , is ( adminPort ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertEquals ( 1 , branch_conditions . size ( ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertThat ( actual , not ( containsString ( "78ef6f64c2f2" ) ) )
assertEquals ( firefoxDriver , defaultDriver )
assertEquals ( "Expected keygen sequence to fail" , EXPECTED_KEYS , keygen . getKeys ( ) )
assertEquals ( 4 , result . getProperties ( ) . size ( ) )
assertTrue ( "Empty job should work" , success )
assertNoTaint ( arrayData [ 2 ] )
assertTrue ( ranges . isEmpty ( ) )
Assert . assertEquals ( "����|��宸�|澶у��" , words )
assertNotNull ( "CorporationDepartment is null" , entity )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithAlignmentStyle_expected.xls" ) )
assertTrue ( true )
assertEquals ( "Patch" , book . getName ( ) )
assertThat ( errors , hasSize ( 1 ) )
assertFalse ( namespaces . isEmpty ( ) )
assertion . satisfies ( "is not hunk" )
assertEquals ( notNull , presentSerializable . asOptional ( ) . get ( ) )
assertThat ( consoleStepListener . toString ( ) , is ( expectedSteps ) )
assertEquals ( expected , query . export ( ) )
assertValueEqualsResultSet ( rs , Arrays . < Object > asList ( ROW2 , ROW4 ) )
assertTrue ( url2 == url1 )
assertEquals ( 1 , bindings . size ( ) )
assertEquals ( "?a=b+c&d=e" , qs . toQueryString ( ) )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0xa4 , ( byte ) 0xee , ( byte ) 0xba , ( byte ) 0x8e , 0x63 , 0x3d , 0x77 , ( byte ) 0x88 , 0x69 , ( byte ) 0xf5 , 0x68 , ( byte ) 0xd0 , 0x5a , 0x1b , 0x3d , ( byte ) 0xc7 , 0x2b , ( byte ) 0xfd , 0x4 , ( byte ) 0xdd } , r )
assertEquals ( "Unknown class was not serialized properly" , o , ElsaSerializerBaseTest . clonePojo ( new Serialization2Bean ( ) , s ) )
Assert . assertFalse ( this . manager . disconnect ( this . person1 , this . family1 ) )
assertEquals ( "This is a test." , Tools . correctText ( "This is a test." , lt ) )
assertEquals ( facet1 , facet2 )
assertEquals ( propertyValue , p . getValue ( ) )
assertEquals ( EXPECTED_GET_APPLY_DETAILS_PATH , path )
Assert . assertNull ( "no data object found" , objStat )
Assert . assertEquals ( 1 , SimpleClass . class . getDeclaredFields ( ) . length )
assertThat ( result , equalTo ( false ) )
assertEquals ( "foo=le=2011-03-02" , ret )
assertEquals ( "certificate1" , auth . getCertificate ( ) )
Assert . assertThat ( dump , equalTo ( "UnionTypeExpressionNode: user | cat[] | hamster | fish (Start: 0 , End: 20, On: [artificial node])\\n" + "    NamedTypeExpressionNode User -> {null} (Start: 14 , End: 20, On: [artificial node])" ) )
assertTrue ( x . equals ( y ) )
assertEquals ( expected , query . export ( ) )
assertAnnotations ( 1 , CommsIdentifier . class , new TestCommsIdentifier ( 0 , "123" , "TF4-56" , "TF000a" ) )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 2f ) )
assertEquals ( TEST_INPUT , convertedString )
assertThat ( revisions , contains ( revision ) )
assertNotNull ( oInstance )
assertTrue ( true )
assertEquals ( expectedValue , result )
assertNotNull ( user )
Assert . assertThat ( result , is ( testResult ) )
assertSame ( tt2 , tt )
Assert . assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 't' , 'e' , 's' , 't' } , result )
assertPostFails ( "3" , role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert . assertEquals ( responseBean , userBean )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( whereClause , Deencapsulation . getField ( querySpecificationBuilder , "where" ) )
assertEquals ( expected , actual )
assertEquals ( "<table class=\\"table-documentr table-bordered table-striped table-condensed\\"></table>" , removeTextRange ( html ) )
assertSame ( connection , incrementPoolOnTimeoutConnectionAcquiringStrategy . getConnection ( connectionRequestContext ) )
assertEquals ( "definitions" , ctx . getMessages ( ) . get ( "definitions" ) . get ( 0 ) . getMessageType ( ) )
assertEquals ( expResult , result )
assertEquals ( "Expected " + out . toString ( ) + " to be equal" , expected , out . toString ( ) )
assertThat ( unmarshal ( sb ) , hasEntry ( "some key" , "some value" ) )
assertEquals ( expected , testVertex . getProperty ( "forDefault" ) )
assertEquals ( "(34 55)\\n" , found )
assertEquals ( 2 , violations . size ( ) )
assertEquals ( "<body><span id=\\"test\\">a</span><span id=\\"test\\">b</span></body>" , result )
assertEquals ( "a,b" , ary [ 0 ] )
assertEquals ( this , vRef )
assertNotNull ( exchangeAdapter )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "10" , "sized" ) ) , formatter . format ( "a [size=\\"10]sized[/size] text" , defaultOptions ( ) ) )
assertEquals ( "12345678901234567890" , s )
assertEquals ( "Hitpoints are now 99." , screenshotPlugin . parseLevelUpWidget ( LEVEL_UP_LEVEL ) )
Assert . assertTrue ( testPackage . getPackage ( ) . contains ( "Workflow" ) )
assertThat ( getEntityBody , is ( "something" ) )
Assert . assertTrue ( result . length ( ) > 0 )
assertEquals ( Deencapsulation . getField ( twinCollection , "version" ) , VERSION )
assertEquals ( expected , response . getValue ( ) )
assertEquals ( "The test{\\" key does not exist in JavaScript object!" , result . get ( RETURN_RESULT ) )
assertEquals ( "Skipped I_S key parsing" , 26 , skipped )
assertPoint ( 40 , 10 , change )
Assert . assertEquals ( expected , actual )
assertEquals ( "" , toml . getString ( "a" ) )
Assert . assertEquals ( "SELECT * WHERE { \\"with ? mark\\" \\"with ? mark\\" \\"test\\" . }" , query . toString ( ) )
assertTrue ( result == 0 )
Assert . assertEquals ( codigoEvento , infoEventoManifestacaoDestinatario . getCodigoEvento ( ) )
assertEquals ( expected , actual )
assertEquals ( 0 , result )
assertTrue ( rec_cnt == 3 )
assertEquals ( sc , actualConfig . getSamplerConfiguration ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "geom" , ( dump ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "layer" ) )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
assertThat ( mimetype , is ( TEXT_MIMETYPE ) )
assertEquals ( "Hello Camel in action" , reply )
assertEquals ( 4.35f , new TruncateDecimal ( ) . exec ( tuple ) )
assertEquals ( HttpStatusCodes . FOUND , response . getStatus ( ) )
assertions . isLessThan ( expected )
Assert . assertTrue ( "Incorrect suffix" , hdfsWriter . getOpenedFilePath ( ) . endsWith ( Long . toString ( testTime + 1 ) + suffix + ".tmp" ) )
assertEquals ( resp . getStatus ( ) , 200 )
assertEquals ( 1 , callable . call ( ) )
assertThat ( concat , is ( equalTo ( denyAll ) ) )
assertEquals ( expected , result )
assertEquals ( ReadConcern . DEFAULT_DB_NAME , parsedReadConcern )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPermissions ( authorizables , list ( "jranalyst" ) ) . values ( ) ) . toString ( ) )
assertToStringJoinEquals ( "|,|,|" , s )
assertEquals ( address , IpConverter . getGlobal ( address ) )
Assert . assertEquals ( 20 , result )
assertEquals ( "(San Francisco :" , map . get ( "Place of manufacture" ) . get ( 0 ) )
assertEquals ( new JsonObject ( ) , event . getBodyAsJson ( ) )
assertThat ( result , containsInAnyOrder ( "ABC" , "EDF" ) )
assertEquals ( "New Album renamed !" , itemClient . getItem ( createdAlbumId ) . getEntity ( ) . getTitle ( ) )
assertOutMessageBodyEquals ( CUSTOMER_XML , exchange . getOut ( ) . getBody ( ) )
assertEquals ( 3 , config . getMapping ( ) . getNbRecords ( ) )
Assert . assertTrue ( "Optimal coverage not reached: " + best_fitness , best_fitness == 0.0 )
assertNotNull ( vosManagerEntry . getVos ( sess ) )
assertTrue ( Arrays . equals ( message . toByteArray ( ) , message2 . toByteArray ( ) ) )
Assert . assertFalse ( channel . isOpen ( ) )
assertArrayEquals ( document . keySet ( ) . toArray ( ) , new Object [ ] { KEY1 , KEY2 , KEY3 } )
Assert . assertTrue ( "Item was stale" , item . isStale ( newDate ( ) ) )
assertEquals ( 0 , preferences . getIntValue ( "test" ) )
assertBundleEvent ( BundleEvent . STARTED , "org.knowhowlab.osgi.testing.it.test.bundle" , 5 , TimeUnit . SECONDS )
assertEquals ( "value" , keyInfo . getKey ( ) )
assertTrue ( "Graph not isomorphic" , isomorphic ( graph , m ) )
assertEquals ( "Hello World" , bytes . parseUtf8 ( CONTROL_STOP ) )
assertEquals ( 0 , appReport . getTotalPages ( ) )
assertSame ( filter , derive ( filter , "g:a:1" ) )
assertEquals ( Collections . singleton ( TestEnum . ONE ) , select . getSelectedItems ( ) )
assertEquals ( "Book should have been returned" , "Book" , bookNames . get ( 0 ) )
assertEquals ( expected , AuthorizationsUtil . downgrade ( expected ) )
assertException ( "FEEL-01015" , "''" , "< ''" , "'camunda'" , "< 'camunda'" , "false" , "< true" , "'12'" , "< '12'" , "\\"12\\"" , "< \\"12\\"" )
assertEquals ( ArrayIndexOutOfBoundsException . class , t . getException ( ) . getClass ( ) )
Assert . assertEquals ( "" , result )
assertThat ( referenceSet . getReferencingOntologyAnnotations ( ) , hasItem ( annotation ) )
assertThat ( target . onNodeDeletePre ( ORIGINAL_NW_ID , node1 ) , is ( false ) )
assertFalse ( accepted )
assertTrue ( versionFileApp . exists ( ) )
Assert . assertEquals ( expected , baos . toString ( ) )
assertThat ( indexPage . checkbox . isChecked ( ) , is ( true ) )
assertEquals ( newx , result , 0.01 )
assertEquals ( "Rule units created" , "Rule Unit Description" , r . createRuleUnitDescription ( fooBar ) )
Assert . assertEquals ( " INSERT INTO t_pet pet  " , sql )
assertFalse ( routeSpecification . isSatisfiedBy ( itinerary ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 ) , distinct ( asList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 ) )
assertThat ( existingName , is ( "camelcasefxml.fxml" ) )
assertThat ( response , containsString ( "invalid range: Not within 1-1" ) )
assertTrue ( result )
assertEquals ( "Oracle should have assigned " + createdVarNb + " variable" , createdVarNb , oracleAdapter .OracleForVar ( "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle" , "Oracle"
assertEquals ( "foo" , s )
assertTrue ( resultComparator . compare ( ind1 , ind2 ) > 0 )
Assert . assertEquals ( "Swang Metadata" , metadata . get ( "name" ) )
Assert . assertFalse ( result . isValid ( ) )
Assert . assertEquals ( JGitUtil . latestCommit ( baseDir . toPath ( ) ) . getId ( ) . getName ( ) , JGitUtil . gitCommit ( path ) . getId ( ) . getName ( ) )
assertEquals ( "Hello World!" , result )
assertEquals ( "Wrong number of hierarchies" , 3 , hierarchies . size ( ) )
Assert . fail ( "Expected IllegalArgumentException" )
Assert . assertEquals ( string , parse ( "    \\t\\r\\n" + string + "  \\t\\r\\n   " ) )
assertEquals ( constraint . getValue ( ) , "test" )
assertEquals ( Dec10th2015 , DayOfMonth . fromDayOfMonth ( Dec11th2015 , 1 ) )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) < 0 )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( "Expected no error message" , 0 , errorMessages . size ( ) )
assertThat ( matcher . matches ( value ) , is ( true ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( objectLibrary , transformer . fromEbXML ( classification ) )
Assert . fail ( "build listing failure" )
assertEquals ( "Invalid expression. Expected: a * * -1 * ?" , cronexpression )
assertEquals ( "" , json , ios . toJSON ( ) )
assertEquals ( "myd" , localRuntime . getDataDomain ( ) . getName ( ) )
assertEquals ( ChangeLevel . NONE , parseAndRun ( "ALTER TABLE c DROP PRIMARY IF EXISTS x" ) )
assertFalse ( feature . isEnabled ( configuration ) )
Assert . assertEquals ( "foo" , result )
assertEquals ( 1.0 , response , 0.0 )
assertEquals ( "reverse elements" , MONTHS_OF_YEAR_BACKWARDS [ 0 ] , MONTHS_OF_YEAR_BACKWARDS [ 1 ] )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
Assert . assertEquals ( "Parameter has different value than that specified" , "logging/file=" + file , config . getLogging ( ) . getFile ( ) )
assertEquals ( null , actualResult )
assertTrue ( userAuthorizedToAccess )
assertFalse ( validator . validate ( EntityNames . GRADE , grades ) . containsAll ( grades ) )
assertEquals ( new SimpleDateFormat ( "yyyy" ) . format ( dt ) , new SimpleDateFormat ( "yyyy" ) . format ( dueDate ) )
assertEquals ( DEFAULT_TIMEOUT , r . getTimeout ( ) )
assertNotNull ( tomcatProcessorQuery )
assertEquals ( test . minimumMoves ( input ) , 2 )
assertEquals ( propertyClass , ComponentProperties . class )
assertAmount ( actual , expected )
assertThat ( widgetset , is ( Constants . DEFAULT_WIDGETSET ) )
assertEquals ( getExpectedSchemaAndValue ( OPTIONAL_INT32_SCHEMA , message , expectedValue ) , result )
assertNotEquals ( searchScroll1 , searchScroll2 )
assertEquals ( 2 , victim . tocNumberOfPages ( ) )
assertEquals ( 10 , result )
assertNotNull ( producer . getMetadata ( ) )
assertEquals ( true , request . getPluginPDF ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( windowSize * windowSize * products . length * coordinates . length , measurementList . size ( ) )
assertEquals ( addedTriples + 1 , triplesAfter - triplesBefore )
assertArrayEquals ( bMessage , bEncrypted )
assertTrue ( latch . await ( 4 , SECONDS ) )
Assert . assertThat ( this . mojo . schemaCompatibility , IsEqual . equalTo ( expectedVersions ) )
assertEquals ( 2 , relationshipTypes . size ( ) )
assertEquals ( "SpringBeanLifecycleTracker" , "[setProperty, setMuleContext, springInitialize, start, stop, springDestroy]" , springLT . getTracker ( ) . toString ( ) )
assertThat ( collections , containsInAnyOrder ( "value1" , "value2" ) )
Assert . assertEquals ( 2 , this . em ( ) . getMetamodel ( ) . getEntities ( ) . size ( ) )
assertThat ( fe , notNullValue ( ) )
assertThat ( result . isHealthy ( ) , is ( true ) )
assertThat ( hours , equalTo ( hours . getHours ( ) ) )
assertNotNull ( result )
Assert . assertNull ( connection . getNetworkTimeout ( ) )
Assert . assertFalse ( result )
Assert . assertEquals ( "P0DT2H30M59.0S" , EwsUtilities . getTimeSpanToXSDuration ( timeSpan ) )
assertFalse ( folder . isOpen ( ) )
assertSearchYields ( index , "hello = b" , "body = hello" )
assertThat ( statusCodeOf ( response ) , is ( HttpServletResponse . SC_OK ) )
Assert . assertEquals ( this . msg , entity1 )
assertThat ( fmt . parse ( "20141000" ) , is ( PlainDate . of ( 2014 , 10 , 4 ) ) )
Assert . assertEquals ( "le beau grand bateau" , this . realiser . realise ( ap ) . getRealisation ( ) )
assertTrue ( "Wrong default logger" , config . getLogger ( ) instanceof NOPLogger )
assertEquals ( f1 . hashCode ( ) , f2 . hashCode ( ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertThat ( "sessionIds should not have the same prefix" , ! sessionId1 . regionMatches ( 0 , sessionId2 , 0 , 30 ) )
assertEquals ( expectedAffOrgPairs , affOrgPairs )
Assert . assertThat ( affordance . getVariableNames ( ) , Matchers . contains ( "focus" , "contractId" , "thing" ) )
assertNotNull ( Trunk . reader ( ) . read ( ) )
assertSimpleTerm ( result , "term\\\\*" , false , false )
assertTrue ( getStdErr ( ) . indexOf ( "WSI-BP-1.0 R2210" ) > - 1 )
assertEquals ( location , updatedLocation )
assertTrue ( kept . isEmpty ( ) )
assertEquals ( rightsString , rendering )
Assert . assertNotNull ( object )
assertThat ( copy . getMapProperty ( ) , is ( mapProperty ) )
assertE ( "�尖�尖�尖�尖�尖�尖�尖��" + "��   ��   ��" + "��       ��" + "��        ��" + "��        ��" + "��        ��" + "�尖�尖�尖�尖�尖�尖�尖��" )
Assert . assertEquals ( avulsa , notaInfo . getAvulsa ( ) )
assertMethod ( methodParser , testCase . name , testCase . responseTimeout , testCase . connectTimeout , testCase . responseTimeout , testCase . payload , "response" )
assertEquals ( "Failed on iteration " + x , z1 , z2 )
assertFalse ( OAuthUtils . validateScopes ( requestScopes , registeredScopes , false ) )
assertThat ( elementFacade . getTextValue ( ) , is ( "text" ) )
assertNull ( TYPE_HANDLER . getResult ( rs , 1 ) )
assertEquals ( buildValue ( i ) , new String ( value . getBytes ( ) , 0 , value . getLength ( ) ) )
Assert . assertEquals ( "2 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( new Date ( ) . getTime ( ) - 6543990 ) ) )
assertEquals ( 0 , qr . rank ( ) )
assertEquals ( 60 , integer . getInteger ( ) . intValue ( ) )
assertEquals ( mimeType , op . getMimeType ( ) )
assertNull ( client . lastBatch )
assertEquals ( nodeModel , config . getNodeModel ( ) )
assertSame ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , list . getWrappedCellRenderer ( ) )
Assert . assertTrue ( isValid ( resp , FORMAT_JSON , true ) , "Response is not valid" )
assertEquals ( "msg" , sut . getMessage ( ) )
assertEquals ( "Should respond with 400" , 400 , responseContext . getStatus ( ) )
assertEquals ( 40 , cts . size ( ) )
assertEquals ( "2002-03-07T10:00:00" , v1 . withoutTimezone ( ) . toString ( ) )
assertEquals ( p1 , p2 )
assertTrue ( out . toString ( ) . contains ( "Total size" ) )
assertEquals ( 0 , ByteUtils . asBytes ( value . asBytes ( ) ) )
assertEquals ( "GitHub URL" , obj . getDownloadURL ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( myObservationDao . search ( map ) ) , containsInAnyOrder ( toValues ( id1 ) ) )
assertEquals ( true , result [ 0 ] )
Assert . assertEquals ( "No se una firma CAdES con ClaimedRole valida" , CAdESValidator . getCAdES ( testURL , true ) . toString ( ) , baos . toString ( ) )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 418 ) )
assertEquals ( numDocs , results . size ( ) )
context . assertTrue ( event . succeeded ( ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , true )
assertThat ( generatedReportText , isSimilarTo ( expectedReport , "timestamp" ) )
assertEquals ( reg . getSoftwareVersion ( ) , reg2 . getSoftwareVersion ( ) )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testTimestamp.json" ) ) )
assertTrue ( collection . isEmpty ( ) )
assertEquals ( PATH , asset . name ( ) )
arrays . assertContains ( description , new short [ 1 ] , null )
assertEquals ( "(foo void ;)\\n" , found )
assertTrue ( validator . validate ( EntityNames . STAFF , staffId ) . equals ( staffId ) )
assertEquals ( EthiopicDate . of ( 2004 , 2 , 5 ) , test )
assertFootersJoined ( )
stringsWithCustomComparisonStrategy . assertDoesNotContainAnyOf ( someInfo ( ) , "Practice makes perfect" , values )
assertTrue ( shootist . responses . size ( ) > 10 )
assertGetCredentialsFailsWithAuthRequired ( setupIndirectKerberosClient ( ) , context , "Performing a 401 HTTP action" )
assertEquals ( description , activity . getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertEquals ( 1 , figures . size ( ) )
assertTrue ( veh1 . getSkills ( ) . containsSkill ( "skill2" ) )
assertTrue ( result )
assertThat ( url . toString ( ) , is ( "http://localhost?a=b&c=c" ) )
Assert . assertEquals ( 720 , result )
assertNull ( lock )
assertTrue ( keysMap . isValidKey ( getArtifact ( "test.group" , "test" , "1.1.1" ) , null , null ) )
assertSame ( "wrapping renderer must use combo's default on null" , renderer . getDelegateRenderer ( ) , combo . getWrappedCellRenderer ( ) )
assertEquals ( "WIFI:S:some weird SSID;U:Spock;P:aintNoSecret;E:PEAP;PH:MS-CHAPv2;H:true;" , wifi . toString ( ) )
assertions . endsWith ( sequence )
assertThat ( sulfuras . getQuality ( ) , is ( initialQuality + 3 ) )
assertEquals ( "USPS" , shipment . getToAddress ( ) . getResidential ( ) )
assertEquals ( encoding , upload . getEncoding ( ) )
assertEquals ( "test1" , output )
assertEquals ( "A" , pox . getAuthHeader ( ) )
assertNull ( this . commandFacade . exists ( SwitchFullScreenCommand . class , outKey ) )
assertEquals ( 1 , classFileDefinitions . size ( ) )
assertEquals ( "unsortable column must be unsorted" , SortOrder . UNSORTED , table . getSortOrder ( identifier ) )
assertThat ( set . size ( ) , is ( 3 ) )
assertEquals ( certSubject , certificateChain . get ( 1 ) . getSubject ( ) )
assertFalse ( change . isExists ( ) )
assertNotNull ( results )
assertTrue ( true )
Assert . assertEquals ( "Should retrieve value set" , fieldValue , node . getValue ( ) )
assertNotNull ( metricsFactory )
assertEquals ( cache1 , cache2 )
assertTrue ( dbStarted )
assertContentSame ( rs , rc , columnParam1 )
assertEquals ( "Wrong number of loaded entities." , 2 , loadedEntities . size ( ) )
assertTrue ( expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertTrue ( errorCaught )
assertEquals ( Arrays . asList ( child ) , instance . getChildren ( ) )
assertNull ( Iter . last ( iter , filter ) )
assertThat ( result , equalTo ( "/path?query" ) )
assertEquals ( expected , statement . toString ( ) )
assertTrue ( comp . disposed )
AssertUtil . assertSucceeded ( serviceResponse )
assertEquals ( "millisekunti sitten" , t . format ( new Date ( 0 ) ) )
assertTrue ( out . equals ( "G12/12.987654321" ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Kick/" , confId , memberId )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertFalse ( controller . isSortable ( 0 ) )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertSelection ( false )
assertThat ( searchResults , is ( empty ( ) ) )
assertEquals ( "a=c" , m . getHeader ( "cookie" ) )
assertEquals ( rows - 1 , sorter . convertRowIndexToView ( rows - 1 ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pay action=\\"https://example.com\\" actionOnEmptyResult=\\"true\\" bargeIn=\\"true\\" debug=\\"true\\" finishOnKey=\\"finish_on_key\\" hints=\\"hints\\" input=\\"dtmf\\" language=\\"af-ZA\\" maxSpeechTime=\\"1\\" method=\\"GET\\" numDigits=\\"1\\" partialResultCallback=\\"https://example.com\\" partialResultCallbackMethod=\\"GET\\" profanityFilter=\\"true\\" speechModel=\\"default\\" speechTimeout=\\"1\\"/>" , elem . toXml ( ) )
assertThat ( databaseGiven , is ( notNullValue ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertFalse ( address . as ( Address . street , "Nope" ) . as ( Address . city , "Berlin" ) . as ( Address . state , "Berlin" ) . as ( Address . country , "Z" ) . as ( Address . postalCode , "Z" ) . as ( Address . city , "Z" ) . as ( Address . state , "Z" ) )
Assert . assertTrue ( "Expected AES256 cipher suites, got null" , resolved != null && resolved . size ( ) != 0 )
assertEquals ( onTime , d . getLong ( 0 ) )
Assert . assertNull ( retVxGroup )
assertTrue ( v1 . getSkills ( ) . containsSkill ( "skill2" ) )
assertEquals ( 220777L , opts . getScans ( ) . get ( 0 ) . getTimeRange ( ) . getMax ( ) )
assertFalse ( fs . exists ( file ) )
assertEquals ( "Hello World!" , html )
assertEquals ( 1 , ccs . size ( ) )
assertEquals ( rs2 , rs )
assertEquals ( "2\\n" , found )
assertFalse ( groups . hasNext ( ) )
assertPrehandle ( "methodFeatureTwo" , true , METHOD_FEATURE_TWO_RESPONSE_STATUS )
assertThat ( "getValue" , node . getValue ( ) , is ( true ) )
assertEquals ( "A string with one expression ${here} set" , handler . expandExpressions ( "A string with one expression ${here} set" , null ) )
Assert . assertFalse ( graphUtil . hasCycle ( graph ) )
assertEquals ( "The attribute value is changed." , expectedNewValue , pm . stringAttr . getValue ( ) )
assertTrue ( err < .1 )
assertThat ( resolved , is ( nullValue ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "freeTextAnnotation01.pdf" , sourceFolder + "cmp_freeTextAnnotation01.pdf" , destinationFolder , "diff_" ) )
assertArrayEquals ( intList . toArray ( ) , ( ( GenericData . Array ) r . get ( "list1" ) ) . toArray ( ) )
Assert . assertTrue ( "User not found" , aliceFoundFirst )
assertEquals ( "_cat/indices?v=true" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( 126 , templateCache . size ( ) )
Assert . assertTrue ( ra . run ( "ab" ) )
assertThat ( description . toString ( ) , is ( "x y" ) )
assertThat ( iData . getSelectedVehicle ( ) , is ( veh2 ) )
assertFalse ( view . needsLoading ( item ) )
assertThat ( inputStream , notNullValue ( ) )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( "val1val2" , result )
assertEquals ( "testpassword" , response . getPassword ( ) )
assertEquals ( "error:My message with 3 parameters : 1, 2, 3" , output )
assertThat ( result , is ( true ) )
assertEquals ( 0L , result )
Assert . fail ( "expected IllegalArgumentException" )
Assert . assertNull ( entity2 )
assertThat ( result , isSuccessfulCommand ( ) )
assertEquals ( 1.0 , feasibilityRatio ( solutionList ) , 0.00000000001 )
Assert . assertNotNull ( victim . create ( ) )
assertRightOrder ( nodes , results )
Assert . assertEquals ( AccessValidator . DEVICE_WITH_REQUESTED_ID_NOT_FOUND , result )
assertThat ( scoreDocs . length , is ( 3 ) )
assertEquals ( new BigDecimal ( "29.95900" ) , entity . getN73 ( ) )
Assert . assertEquals ( 0 , trackable . skip ( 1 ) )
Assert . assertEquals ( 4 , filter . getWeightsSum ( ) )
assertHost ( "globalHost" , "myHost" , "gatewayHost" , "commandHost" , "internalHost" , "monitoringHost" )
assertThat ( "getValue" , node . getValue ( ) , is ( "abc" ) )
Assert . assertArrayEquals ( expected , actual )
mockery . assertIsSatisfied ( )
assertThat ( listPager . getListModel ( ) . getList ( ) , is ( listPager ) )
Assert . assertEquals ( uri1 , uri2 )
assertNull ( newTransports . poll ( ) )
assertThat ( result , is ( jsonString ( "hello" ) ) )
assertions . isNotGreaterThan ( new Long ( 2l ) )
assertFalse ( d . isUsingStatisticsManager ( ) )
assertFalse ( violation )
assertEquals ( "register" , jsp )
assertNull ( test )
assertEquals ( "1970-01-01" , loc . getAccession ( ) . getID ( ) )
assertEquals ( "application/octet-stream" , dataSource . getContentType ( name ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertThat ( first , not ( equalTo ( second ) ) )
assertFalse ( "Edits dir exists already - it shouldn't" , fs . exists ( regionEdits ) )
assertThat ( result . iterator ( ) . next ( ) . getString ( "value" ) , is ( "myValue01" ) )
assertEquals ( 403 , response . getStatus ( ) )
assertNotNull ( driver )
Assert . assertFalse ( secure )
assertOut ( "var /** @type {boolean} */ a = new Boolean(1)" )
assertEquals ( expectedQuery , actualQuery )
assertThat ( cut . apply ( hasText ) , is ( true ) )
assertEquals ( EXPECTED_STOPWORDS , stopwords )
assertNotNull ( NonTerminal . IF_COMMAND . buildAbstractSyntaxTree ( tokenStream ) )
assertEqualsJFiglet ( asciiArt )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertTrue ( lines . contains ( "longest-mention: Bill Clinton" ) )
assertThat ( formatter . drop ( ) , is ( "0" ) )
arrays . assertContains ( description , actual , null )
assertTrue ( param2 . getValue ( ) . get ( 0 ) instanceof QueryParam )
assertEquals ( "?p1=v1&p2=v2" , query . toString ( ) )
assertEquals ( nodeId , logicalNodeId )
assertEquals ( RPCTransport . DEFAULT_MAX_RECV_FRAG , transport . getMaxRecvFrag ( ) )
assertNotNull ( buildClient ( clientBuilder , "http://localhost" ) )
assertThat ( unit . filterDeniedParams ( unfiltered , Channel . IncomingRequest ) , equalTo ( unfiltered ) )
assertEquals ( "whole file not read back" , contents . length , entry . getSize ( ) )
assertThat ( baos . toString ( ) , startsWith ( String . format ( "" + "Failed scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Ambiguous scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "4 Scenarios" ) ) )
assertEquals ( 2 , sourceFolderKeys1 . size ( ) )
assertThat ( "There should be no tray matching anymore" , trayMatchings . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( 12 , analyser . getLoadRightAfterActivity ( route . getActivities ( ) . get ( 1 ) , route ) . get ( 0 ) )
assertEquals ( expected , actual )
assertTrue ( latch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "Base for floats is wrong" , Integer . valueOf ( 3 ) , parsed )
assertThat ( allUsedBindings ( result ) , containsInAnyOrder ( "$p" ) )
assertThat ( max . get ( ) , is ( "1" ) )
assertThat ( threadOne . getExecution ( ) , nullValue ( ) )
assertEquals ( 0 , data . length )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( "second" , res . getStringData ( ) )
assertThat ( options . getFeaturePaths ( ) , contains ( URI . create ( "classpath:com/example/feature" ) ) )
assertTrue ( executor . isAlive ( ) )
assertFalse ( isAuthenticated )
assertThat ( compositeRequestProcessor . process ( request ) , is ( request ) )
Assert . assertNull ( caixa )
assertEquals ( expectedPortNoStrings [ i ] , portNoString )
assertThat ( result , is ( instanceOf ( FederatorOnFlow . class ) ) )
assertFalse ( noneExistingFile . exists ( ) )
assertEquals ( betweenness [ index2 ] , 1.0 )
assertEquals ( job . jobId , lastRecentJob . jobId )
assertNull ( result )
assertEquals ( Character . valueOf ( '!' ) , formatWithRecordSeparator . getRecordSeparator ( ) )
assertEquals ( "win32" , PlatformDetector . OS . getName ( ) )
assertNull ( array )
assertNotNull ( "Process message with no part wsdl error" , file )
assertEquals ( "" , 6 , actual . size ( ) )
assertEquals ( "Expected to pass" , expected , actual )
assertEquals ( "3�� ��" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "Also at the end =\\r\\nvery very very very very very very very very =\\r\\nvery very long line" , toString ( bos . toByteArray ( ) ) )
Assert . assertFalse ( MultiPathSupportUtil . isTableTypeSupported ( this . constraints , AFI_SAFI ) )
assertEquals ( "http://localhost:8080" , webApiClient . getWebApiUrl ( ) )
assertEquals ( expected , result )
assertEquals ( 1 , unreadMessages . size ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "High-Performance Java Persistence" , book . getTitle ( ) )
assertFalse ( finder . hasNext ( ) )
assertEquals ( "A on" , getElement ( By . className ( "v-label" ) ) . getText ( ) )
assertTrue ( urlWithPathAndParam . equals ( urlString ) || urlWithPathAndParam1 . equals ( urlString ) )
assertTrue ( ferp . isReadable ( MultivaluedMap . class , null , null , null ) )
assertTrue ( WroUtil . matchesUrl ( request , "wroApi/test" ) )
assertThat ( getAllMessages ( ) , hasSize ( 2 ) )
assertEquals ( "true" , expr . evaluate ( null ) )
Assert . assertEquals ( 10 , result . getResultSize ( ) )
Assert . assertEquals ( "multipart/form-data" , actualValue )
Assert . assertNotNull ( uiClass )
assertEquals ( iterations , cryptor . iteration ( ) )
Assert . assertFalse ( this . manager . disconnect ( this . person1 , this . family1 ) )
MatcherAssert . assertThat ( PodHelper . isReady ( pod ) , is ( true ) )
assertEquals ( 2 , myPm . minLen2 . getMinLen ( ) )
assertThat ( lines , is ( Arrays . asList ( "This is a long linethatcannotfitonasingleline-" , "andcouldbe wrapped" ) ) )
assertEquals ( Arrays . asList ( "setName" , "getAttributeDescriptor" , "verifyAndConvert" , "isReadOnly" , "customAction" ) , events )
assertTrue ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertTrue ( true )
assertNotNull ( response )
assertEquals ( "Expected privilege from " + p . getName ( ) , privilege , p )
assertNull ( "Got a URL" , url )
assertEquals ( p1 , p2 )
Assert . fail ( )
assertThat ( DateInterval . atomic ( date ) . isEmpty ( ) , is ( true ) )
assertEquals ( "All received messages are correct." , 0 , messageVerifier . getFailures ( ) )
assertEquals ( BPResultType . NO_DATA , testResult . getResultType ( ) )
assertThat ( result , is ( false ) )
assertEquals ( sessionInfo . getIdentity ( ) . getIdentifier ( ) , username )
assertEquals ( "RESPONSE_VALUE_TO_TEST" , rsp . getHeaderField ( ModifyHeadersProxyServlet . RESPONSE_HEADER ) )
assertEquals ( "Expected another type of analyzer" , NorwegianAnalyzer . class , analyzer . getClass ( ) )
assertGalleriesPhoto ( galleries )
assertResult ( session )
Assert . assertEquals ( "{\\"value\\":\\"test\\"}" , json )
assertFalse ( "Class loader should not have been created" , ContextClassLoaderBinder . isOjbLoadedClass ( ) )
assertEquals ( 0 , engineRule . getHistoryService ( ) . createUserOperationLogQuery ( ) . count ( ) )
assertNull ( statusFail )
assertOrder ( order , length , comparator )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "sample1.js" , functionLibrary . getFunctionLibraryName ( ) )
assertEquals ( "Count.getReplacementCommand" , expected , actual )
assertEquals ( 1 , files . size ( ) )
assertTrue ( encoded . indexOf ( "\\n" ) == encoded . lastIndexOf ( "\\n" ) )
Assert . fail ( "an exception should have been thrown" )
Assert . assertEquals ( 10 , KafkaConsumerUtils . INSTANCE . getNumRead ( ) )
assertFalse ( shouldVote )
assertEquals ( future , underTest . doEventuallyCollectEmpty ( consumer , supplier ) )
assertEquals ( "2\\n" , found )
Assert . assertEquals ( 11 , patients . size ( ) )
assertEquals ( "Bic8 canonicalized wrongly" , "Bic8 canonicalized wrongly" , bic . toString ( ) )
Assert . assertNotNull ( dateTime )
files . assertHasDigest ( INFO , actual , digest , expected )
Assert . assertEquals ( FileUtils . readFileToString ( file0 , Charset . forName ( "UTF-8" ) ) , expected )
assertNotNull ( result )
assertEquals ( 10L , result )
Assert . assertEquals ( "Incorrect type" , WTabSet . TYPE_TAB_SET , tabset . getType ( ) )
Assert . assertNull ( removeFirst )
assertThat ( testSupport . getEnv ( ) , is ( envVar ) )
assertEquals ( "http://help.pentaho.com" , spyAppConfigProperties . getHelpUrl ( ) )
assertNull ( JavaLocator . findExecutableFromToolchain ( toolchain ) )
assertions . isNotGreaterThan ( expected )
assertStat ( result )
Assert . assertEquals ( "monkey" , mAuthenticator . getAuthToken ( ) )
assertEquals ( "/a/b/c" , result . toString ( ) )
assertEquals ( 0 , numbers . size ( ) )
assertEquals ( 4 , readCount )
assertNull ( this . taskExecutionService . getLog ( taskDeployment . getPlatformName ( ) , taskDeploymentId ) )
assertTypeEquals ( expected , actual )
assertFalse ( "Permission denied" , updateSamplesFromAnalysisSubmissionPermission . isAllowed ( authentication , analysisSubmission ) )
assertEquals ( expectedDatetime , strategy . getNextBusinessDay ( ldt ) )
assertEquals ( 1 , issues . size ( ) )
editor . assertProblems ( "foo-bar-zor.enabled|boolean" , "fooBarZor.enabled|boolean" )
assertEquals ( "http://server/articlepath/abc
assertNull ( user )
assertEquals ( 19 , maximum )
assertEquals ( 3 , expansion . getExpansion ( ) . getContains ( ) . size ( ) )
assertNotNull ( Account . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( first . size ( ) , second . size ( ) )
assertThat ( key . verify ( Algorithm . HMAC_SHA512 , "hello1" . getBytes ( UTF_8 ) , sig ) , is ( false ) )
assertEquals ( expectedIDs , featureIDs )
assertEquals ( expect ( ) . statusCode ( 200 ) , result )
assertEquals ( 1 , results . getWarnings ( ) . size ( ) )
Assert . fail ( "Expected serialization exception" )
Assert . assertEquals ( 1.33427403132E11 , n , 1e-10 )
Assert . assertEquals ( 3 , sync ( log . count ( ) ) . longValue ( ) )
assertNull ( links )
assertEquals ( expectedResult , result )
Assert . assertEquals ( new Double ( - 1.0 ) , _c . convert ( "-1.0" ) )
assertEquals ( expected , elements )
assertEquals ( Result . OK , source . validate ( container ) . getStatus ( ) )
assertTrue ( lb2 . getNodes ( ) . contains ( node2 ) )
Assert . assertNotNull ( rm )
assertTrue ( "Empty error config not empty" , setUpErrorConfig ( ) . isEmpty ( ) )
assertEquals ( "jdbc:hive2://testhost:21050/;ssl=true" , connectionString )
assertEquals ( 0.0 , diff . getValue ( METERS ) , 500 )
Assert . assertEquals ( rtpPacket . getVersion ( ) , 2 , "Expect version = 2" )
Assert . assertEquals ( "Error updating public community file" , file . getVersion ( ) , version + 1 )
assertEquals ( 1 , reader . readFields ( ) . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "LocationSearchFeed [locationList=Location [id=null, name=null, city=San Francisco], city=San Francisco" , result )
context . assertIsSatisfied ( )
Assert . assertNotNull ( lookup )
assertNull ( expression . evaluate ( record ) )
assertEquals ( 10 , pixel . get ( ) )
assertThat ( headlineOf ( view ) , is ( "2 builds have failed since Ben, Connor and Daniel committed their changes" ) )
assertTrue ( "Expect mapping generated by WithinMapper to be equal to reference mapping" , mapper . getMapping ( s , t , "?x" , "?y" , "top_within(x.asWKT, y.asWKT)" , 1.0d ) . equals ( referenceMapping ) )
assertEquals ( "baz" , config . getString ( "microbule.bar.config" ) )
assertEquals ( "spring:mod_security:mod_security" , instance . getCpe ( ) . getValue ( ) )
assertEquals ( "/" + ORCID + "/funding/123" , x . getFundingGroup ( ) . get ( 0 ) . getFundingSummary ( ) . get ( 0 ) . get ( 0 ) . getPath ( ) )
Assert . assertNull ( apiForUrl )
assertEquals ( 4 , exceptions )
assertEquals ( 2 , logs . size ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertNotNull ( getStdOut ( ) )
assertThat ( output , is ( Bytes . toArray ( asList ( 0 , 2 , 3 ) ) ) )
assertThat ( jexlSelector . getType ( ) , is ( CselSelector . TYPE ) )
assertFalse ( shouldVote )
assertFalse ( "hasFacet should return false" , hasFacet )
assertTrue ( setCookie . startsWith ( sessionCookieName + "=" ) )
Assert . assertTrue ( m . isVoicingVoices ( ) )
Assert . assertEquals ( 0 , chronicle . getNumEvents ( 0 , 2000 ) )
assertEquals ( Address . of ( "one" ) , fixture . removeSuffix ( 0 ) )
assertEquals ( "val2val1" , result )
assertNotNull ( relapse . getId ( ) )
assertEquals ( 2 , classUnderTest . getCompatibilityLevel ( ) )
Assert . assertEquals ( "NkK9" , b [ 0 ] )
assertEquals ( "string1" , ObjectUtils . getValue ( object , "string1" ) )
assertEquals ( 5 , documentCount )
assertEquals ( result , expectedResult )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( expResult , result )
assertEquals ( "" , result )
assertEquals ( mockMeta , node . getMetaData ( ) )
assertEquals ( 3 , breakpointID )
assertEquals ( "10.555" , new String ( bytes ) )
Assert . assertEquals ( EJB_INTERCEPTED , bean . test ( ) )
assertEquals ( 1 , executedActionCount . get ( ) )
assertEquals ( result , expecting )
assertEquals ( "[1]" , writer . toString ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "12 minutes ago" , t . format ( new Date ( 0 ) ) )
assertNotNull ( this . query )
assertThat ( argument . getValue ( ) . getName ( ) , is ( "step_with_array: <span class='step-parameter'>[1, 2, 3]</span>" ) )
assertions . isNotEqualTo ( actual )
assertTrue ( binlogEvent . equals ( EventFactory . dml ( 1 , 1 , "f.1" , 1 , "a" , "b" , false , false , DMLType . INSERT ) ) )
assertXMLEqual ( new StringReader ( "<body></body>" ) , new StringReader ( html ( processed ) ) )
assertEquals ( 0 , gavSchema . groupIds . size ( ) )
assertEquals ( "Hero has been fired by now" , 1 , highValueTarget . getAttack ( ) )
assertNull ( property )
assertNull ( author )
assertEquals ( in , out )
assertFalse ( HttpMessageUtils . isText ( message ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "Test Hello" , response )
Assert . assertEquals ( expected , actual )
assertTrue ( "Login empty" , constraintViolations . size ( ) == 1 )
assertEquals ( collection . size ( ) , 1 )
assertNull ( io . getDocumentById ( id1 , false ) )
assertThat ( traversal . toList ( ) , containsInAnyOrder ( VertexMatcher . likeVertex ( ) . withTimId ( "1" ) , VertexMatcher . likeVertex ( ) . withTimId ( "2" ) ) )
Assert . assertTrue ( fire ( "/sakai-ws/rest/i18n/getI18nProperties" , params , null ) )
assertEquals ( 0 , fileSize )
assertEquals ( label , bs . getVolumeLabel ( ) )
assertTrue ( matches )
assertThat ( errorResponse1 , is ( errorResponse2 ) )
assertNotNull ( result )
editor . assertProblems ( "spring:\\n" + "  cloud:\\n" + "    stream:\\n" + "
assertEquals ( expected , settings )
Assert . assertEquals ( 0.0 , a . transposeMultiply ( b ) . subtract ( a . transpose ( ) . multiply ( b ) ) . getNorm ( ) , 1.0e-15 )
assertTrue ( isPropsSupportedByDefault )
assertEquals ( 3 , count )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( expected , result )
assertTrue ( MatrixUtils . equals ( p , pinvRnk1 , 0.05 ) )
assertCompilationMessage ( diagnostics , Kind . ERROR , 15 , 8 , "Found more than one @WorkbenchPanel with isDefault=true." )
assertActionKey ( HttpVerb . GET , "root-collection-params" , true , keys . get ( 0 ) )
assertFalse ( hasPermission )
Assert . assertEquals ( true , retval )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 800 )
Assert . assertFalse ( "No connections found" , jsonList . isEmpty ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( new File ( f , "src/myxcode" ) , FolderLayout . getSourceFolder ( project ) )
assertEquals ( 4L , count )
Assert . assertEquals ( this . getClass ( ) . getResource ( "ontology.txt" ) , location )
Assert . assertEquals ( "user.zone" , info . toString ( ) )
assertEquals ( 0 , detector . detect ( ) . getTime ( ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertNotNull ( tagUC . getId ( ) )
assertTrue ( writeMethod . getReturnType ( ) == AwsProxyRequest . class )
assertEquals ( 1 , application . informAttributeReplaced . get ( ) )
assertThat ( result , is ( sameInstance ( foreignKeysRequest ) ) )
assertEquals ( "Expected that after deleting a Tab, it's still tied to the " + "tab, the tabIndex is null," + " and the tab is marked as deleted" , true , deletedFlag . booleanValue ( ) )
assertTrue ( page . asXml ( ) . indexOf ( "SUCCESS" ) != - 1 )
assertEquals ( list , parser ( "(\\n // comment\\n str )" ) . object ( "" ) )
assertEquals ( 3 , itemsets . size ( ) )
assertEquals ( 'b' , r . peekChar ( ) )
assertEquals ( "Hello, Microbule!" , metadata . get ( TikaCoreProperties . CREATOR ) )
Assert . assertEquals ( "https://foo.com:8080/things/123/456?param1=value1&param2=value2&param3=value3&param4=value4#value5,value6" , result )
assertTrue ( like . passesFilter ( "id" , item ) )
assertThat ( schema , containsString ( "}\\n\\ntype TypeMutations {\\n" + "  create(uri: String
assertVisitorSatisfied ( )
assertEquals ( expected , actual )
assertEquals ( 1 , inverses . size ( ) )
assertNull ( result . getItem ( COSName . R ) )
Assert . assertEquals ( CLOUD_SDK_HOME , sdk . getPath ( ) )
assertNotNull ( user )
Assert . assertNull ( session . getClassLoader ( NAME1 ) )
Assert . assertNotNull ( admin )
assertEquals ( 1 , output )
assertNotNull ( beanDescriptor )
assertTrue ( r1 instanceof PublicCloneable )
assertThat ( metrics . toString ( ) , is ( "" ) )
assertEquals ( KEY_ALIAS , rowProperties . connection . keyAlias . getValue ( ) )
assertEquals ( 0 , serverStatus . getVolume ( ) )
assertThat ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , res , is ( 0 ) )
Assert . assertEquals ( "{" + "\\"@odata.context\\":\\"../$metadata#ESAllPrim(32767)/PropertyDecimal\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"34\\"}" , resultString )
assertEquals ( "bar" , endpoint . getProperty ( JMSEndpoint . JAXWS_PROPERTY_PREFIX + "durableSubscriptionName" ) )
Assert . assertTrue ( true )
assertEquals ( 0 , p . getMaskGroup ( ) . getNodeCount ( ) )
assertEquals ( 3 , HttpUtil . readChunkSize ( new ByteArrayInputStream ( s . getBytes ( ) ) ) )
assertTrue ( s . isSubTree ( root , root ) )
Assert . assertTrue ( "Should exeed - " + LONG_TEXT_2 . getBytes ( ) . length , payload . isGlobalExceedLength ( ) )
assertMockEndpointsSatisfied ( )
assertNotNull ( channel )
assertArrayEquals ( HandshakeMessage . fromHexString ( HandshakeMessage . decode ( message ) ) , HandshakeMessage . fromHexString ( scalar ) )
assertEquals ( "concat() Text Is Test" , Text . valueOf ( "Test" ) , _text )
assertEquals ( dim . width , separator . getPreferredSize ( ) . width )
assertTrue ( testSupport . isAdminOnly ( ) )
assertArrayEquals ( pkgClasses . toArray ( ) , defaultClasses . toArray ( ) )
assertThat ( coordinate . getCoordinates ( ) , is ( nullValue ( ) ) )
assertEquals ( 0 , rpt . size ( ) )
assertSame ( expected , actual )
assertThat ( instance , is ( nullValue ( ) ) )
assertEquals ( witness , tl )
assertEquals ( expected , actual )
JSONAssert . assertEquals ( expected , response . getBody ( ) , false )
assertNotNull ( id )
Assert . assertEquals ( rgTime_EXPECTED , pixel_ACTUAL , eps05 )
assertEquals ( 6 , similarWordRatio , 0.01 )
assertEquals ( result , "10.2" )
assertEquals ( "ChronicleSet<Integer> name()" , "ChronicleSet<Integer> foo()" , set . name ( ) )
assertEquals ( "field.asMap()" , p . toString ( ) )
assertEquals ( OK , response . getStatus ( ) )
Assert . assertEquals ( "(aa_change_indel (aa_point_location (aa_char Cys) 123) del (aa_string Arg))" , aa_change_indel . toStringTree ( parser ) )
Assert . assertEquals ( 1 , find . getCount ( ) )
Assert . assertEquals ( "08/10/2016 17:57:49 GMT-04:00" , time )
assertEquals ( "[Cookie{name='name', value='foo', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}]" , httpRequest . getEffectiveCookies ( ) . toString ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertEquals ( expectedTimelineSegments , timeline . getTimelineSegments ( ) )
Assert . assertNotNull ( cm )
assertEquals ( model1 , model2 )
assertEquals ( "Find by label with unknown label is returning a list with one reading" , 1 , readings . size ( ) )
assertEquals ( generatedName , extractedName )
assertTrue ( out . contains ( "User [owner] is not authorized to view the logs for entity" ) )
assertEquals ( 2 , nodes . size ( ) )
assertThat ( MODEL . findNextTransition ( utc ) . get ( ) , is ( SUMMER_END_1947 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( returnedVisibilities . isEmpty ( ) )
assertEquals ( "master" , result . get ( ) )
Assert . assertEquals ( 2 , segments . size ( ) )
Assert . assertEquals ( discipline , expected )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "This is a test" , "Another test" , "No spaces" , "Between these two" ) ) )
assertEquals ( "0" , result )
assertMockEndpointsSatisfied ( )
assertEquals ( count1 . get ( ) , count2 . get ( ) )
assertEquals ( USERNAME , profile . getId ( ) )
assertFalse ( arrayType . isPrimitive ( ) )
Assert . fail ( "distcp failure" )
assertThat ( session . getProperties ( ) , hasItem ( getFakeProps ( ) ) )
assertEquals ( CREATED_PODCAST_RESOURCE_ID , ( ( PromodelWriterImpl ) manager . getWriter ( ) ) . getPodcastByFeed ( SOME_FEED ) . getId ( ) )
assertTrue ( exists )
assertEquals ( sortedSinged , result )
assertEquals ( body . toString ( ) , POST_VAL )
assertEquals ( expResult , result )
assertSame ( t , TEST_2007_07_15 )
assertEquals ( "{\\"list\\":[\\"bla\\",\\"blub\\"],\\"json\\":\\"\\"}" , json )
assertFalse ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
Assert . assertTrue ( pointQuadTree . contains ( nodeQuadTree ) )
Assert . assertEquals ( 5 , results . size ( ) )
Assert . assertTrue ( "should have written and deleted data object" , irodsFileForSecondaryUser . exists ( ) )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {}, \\"meters\\": {}, \\"timers\\": {}, \\"meters\\": {\\"foobar\\": {\\"count\\": 1, \\"max\\": 5.0, \\"mean\\": 5.0, \\"min\\": 5.0, \\"p50\\": 5.0, \\"p75\\": 5.0, \\"p95\\": 5.0, \\"p98\\": 5.0, \\"p99\\": 5.0, \\"p999\\": 5.0, \\"stddev\\": 0.0}}, \\"meters\\": {}, \\"timers\\": {}, \\"meters\\": {}, \\"timers\\": {}, \\"meters\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers\\": {}, \\"timers
assertEquals ( 4 , parent . getChildren ( ) . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( samplePage , actualSimplePage )
assertNotNull ( perms )
assertEventCount ( entry , 1 )
assertEquals ( TurkishDictionary . getAllLines ( ) . size ( ) , lexicon . getAllLines ( ) . size ( ) )
assertEquals ( searchFormat , updatedSearchFormat )
assertThat ( principals , hasItem ( new UserNamePrincipal ( "user" ) ) )
JSONAssert . assertEquals ( expected , result . getResponse ( ) . getContentAsString ( ) , false )
assertEquals ( "Wrong file size" , fileWithSize . getSize ( ) , fileWithSize . getSize ( ) )
assertEquals ( 1.0 , result , 0.1 )
assertEquals ( expectedValue , generatedValue )
assertNotNull ( session )
assertEquals ( expected , actual )
assertThat ( url . toString ( ) , is ( "http://localhost/foo/bar" ) )
assertThat ( listener . getPartitionSpecFilter ( ) , is ( "(p1='val1' AND p2=val2) OR (p1='val111' AND p2=val22) OR (p1='val111' AND p2=val22)" ) )
Helpers . assertJson ( result , json )
assertEquals ( new ModelId ( "Test" , "com.bosch" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertEquals ( testValue . trim ( ) , result )
assertEquals ( 1 , auc . updatesSize ( ) )
assertEquals ( expected , lastProcessed )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
Assert . assertFalse ( t . sameContent ( ) )
assertEquals ( "425116929" , orderId )
Assert . assertTrue ( isEqual ( distance , 0.25 ) )
assertNotNull ( service )
assertThat ( result , is ( true ) )
assertEquals ( expectedPrefix , actualPrefix )
assertNotNull ( regResponse )
assertEquals ( obj , value )
Assert . assertFalse ( dodgyBase . hasAttribute ( "href" ) )
assertMockEndpointsSatisfied ( )
assertThat ( cr . title ( ) , is ( "Comune Amministrativo-1.2.3" ) )
assertEquals ( "@{foo()}" , s )
assertEquals ( "thevalue" , retrievedValue )
Assert . assertEquals ( - 1 , timeZoneDefinition . compare ( first , second ) )
assertOrecValue ( orec , orecValue )
Assert . assertEquals ( avroSchema , nullConverted )
assertEquals ( CudaGridExecutioner . MetaType . NOT_APPLICABLE , executioner . getMetaOpType ( opB ) )
Assert . assertTrue ( pos <= members . size ( ) )
assertEquals ( 0 , issues . size ( ) )
assertTrue ( isMineInDirection )
Assert . assertEquals ( true , objectSet . isEmpty ( ) )
assertEquals ( "Hello, world!" , mustache . render ( new ArrayList < String > ( ) ) )
assertEquals ( "1b5b33346d611b5b6d" , Hex . encodeHexString ( TextUtils . green ( "a" ) . getBytes ( ) ) )
assertEquals ( sentinelHello1 , sentinelHello2 )
assertEquals ( stat , stat2 )
assertEquals ( "{\\"keys\\":{\\"excludedKeys\\":{\\"key\\":\\"not\\",\\"value\\":\\"not\\"}}}" , toJson ( map ) )
assertFalse ( "No media!" , result . isEmpty ( ) )
assertThat ( isWaiting ( thread ) , is ( false ) )
assertEquals ( Level . INFO . toString ( ) , level . toString ( ) )
assertEquals ( SVNRevision . create ( 0 ) , workingCopy . getRevision ( ) )
assertFalse ( MethodChecksUtils . hasAssertion ( nameNodes ( "sampleVariable" ) ) )
Assert . assertEquals ( "*8*9*" , result )
assertThat ( comparator . compare ( axiom1 , axiom2 ) , is ( 1 ) )
assertEquals ( "jede sekunde" , t . describe ( cron ) )
assertEquals ( StrictMath . pow ( 10 , 4 ) , pow )
assertEquals ( expected , successors )
assertEquals ( asList ( args ) , options . nonOptionArguments ( ) )
Assert . assertNull ( userService . getUser ( 502 ) )
assertEquals ( 0 , set . getResources ( ) . size ( ) )
Assert . assertEquals ( new URI ( "./mypath" ) , uri )
assertEquals ( CompressionType . TarGz , compressionType )
assertFalse ( shell . disposed )
assertEquals ( expected , actual )
assertEquals ( 0 , metrics . size ( ) )
endpoint . assertIsSatisfied ( )
assertEquals ( timeFrameView , timeFrameEditor . view )
assertEquals ( expectedJson , actualJson )
Assert . assertEquals ( expectedMessage , agpl )
assertThat ( outcome . getIssues ( ) , hasItem ( "#ISSUE-123" ) )
assertTrue ( ! result . hasErrors ( ) )
assertEquals ( 2 , both . getMessages ( ) . size ( ) )
Assert . assertTrue ( "Capabilities should match" , first . matchesCapabilities ( map ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertEquals ( "1.0 * SINGLECLOSED(+A) + 1.0 * SINGLECLOSED(+B) = 1.0 ." , rule . toString ( ) )
assertTrue ( output , output . contains ( objectNameString + " times" ) )
assertEquals ( "Alias not set" , delegate . getAlias ( ) , "myTestAlias" )
assertFalse ( new FakeClass ( fakeClass ) . canInstantiate ( fakeClass ) )
assertEquals ( InetAddress . getLoopbackAddress ( ) , tchannel . getPeerManager ( ) . getHostAddress ( ) )
assertEquals ( valuesWritten , valuesRead )
assertNotNull ( metadata )
Assert . assertFalse ( this . manager . isConnected ( this . person1 , this . family1 ) )
assertEquals ( fixture , this . libshout . getFormat ( ) )
assertEquals ( "vehLoc" , route . getEnd ( ) . getLocation ( ) . getId ( ) )
assertEquals ( expecting , found )
assertTrue ( countDownLatch . await ( 5 , TimeUnit . SECONDS ) )
assertionsFailure ( resultMap )
assertNull ( entry )
assertEquals ( lastValue , "EndNode10" )
assertThat ( getObserverCount ( ) , is ( 1 ) )
assertEquals ( expectedMap , map )
assertEquals ( "Hello John Doe" , ResponseBodyInterpolator . interpolate ( "Hello :firstName :lastName" , req ) )
assertFalse ( listOutput . isEmpty ( ) )
assertEquals ( trie1 , trie2 )
assertEquals ( CONTRIBUTED_PATH , cp )
assertEquals ( abort . getUserResourceLimitation ( ) , duplicate . getUserResourceLimitation ( ) )
Assert . fail ( )
assertThat ( stringOf ( sut . toDevice ( msg ) ) , is ( lua ( powerPinMessage ( anyAnalogPin . pinNum ( ) , "LOW" ) ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\\n" + "  var self = this;\\n" + "  function a() {\\n" + "  };\\n" + "  \\n" + "}" )
assertEquals ( 1 , courses . size ( ) )
Assert . assertEquals ( ( Float ) 1.0f , res )
assertEquals ( 1 , index . search ( "aaa" ) . getResults ( ) . size ( ) )
arrays . assertDoesNotContain ( description , null , values )
Assert . assertEquals ( functionColumn , ( ( String [ ] ) result ) [ 0 ] )
assertTrue ( success )
assertThat ( result , is ( expected ) )
assertEquals ( expectedLong , new BigDecimal ( string . substring ( offset , offset + length ) ) . longValue ( ) )
assertNotNull ( error )
assertEquals ( 0 , n )
sensei . assertWriteJson ( property )
assertSame ( expr . accept ( visitor ) , visitResult )
assertPutFails ( role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEquals ( "UTF-8" , UniversalDetector . detectCharset ( originalEncoding ) )
Assert . assertEquals ( "2015-11-23 00:00" , results )
assertTrue ( Futures . getUnchecked ( collector ) )
assertThat ( requestHeader ( UNDEFINED_PARAMETER , mockMatcher ) . retrieveValue ( req ) , is ( nullValue ( ) ) )
assertPartialOrdered ( storeWithoutCommit_expected ( stored , deleted ) , readLatestJournalEntries ( ) )
Assert . fail ( "Shouldn't have found the index" )
assertEqualsJson ( expected , actual )
assertEquals ( "Wrong number of visited nodes" , nodeCount , visitor . getVisitedNodes ( ) . size ( ) )
assertEquals ( "Mario" , result )
assertEquals ( resultMock , result )
assertTrue ( result . isEmpty ( ) )
assertVisitorSatisfied ( )
assertEquals ( "5421" , arr . reduceRight ( callbackfn ) )
context . assertIsSatisfied ( )
assertNull ( flow )
assertEquals ( xs , ys )
assertThat ( compatibility . getIncompatibility ( ) , both ( containsString ( "time" ) ) . and ( containsString ( "20" ) ) )
Assert . assertEquals ( "abc" , result )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( mockedPublicKeyCertificate , actualPublicKeyCertificate )
assertEquals ( text . getText ( ) , "" )
Assert . assertEquals ( 10L , template . execute ( callable ) )
Assert . assertEquals ( "Gradient incrementing not correct" , gradIdx , grad , EPS )
assertEquals ( "Select script should match expected" , expectedConcatenationWithNestedConcatenation ( ) , result )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
assertNotNull ( constraints . getExpiryTime ( ) )
assertTrue ( p . getSepPotentials ( ) [ sepVPos ] == 1.0 )
assertNotNull ( roads )
assertNotNull ( kidless )
assertEquals ( hashMap , CollectionsFactory . createMap ( TMap . entry ( 1 , "value" ) , TMap . entry ( 2 , "value" ) , TMap . entry ( 3 , "value" ) ) )
assertEquals ( data1 , data2 )
assertEquals ( "prefix must not be empty." , "" , getPrefixURI ( ) . getPrefix ( ) )
assertEquals ( "JNAerator failed" , "\\n" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" ) + ":\\t\\t" + RegexUtils . regexReplace ( "\\n" , "\\n" )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
Assert . assertEquals ( "disabled" , acceptOptions . get ( "name" ) )
assertEquals ( expected , actual )
Assert . assertEquals ( json , writer . toString ( ) )
Assert . assertEquals ( "true" , result )
assertNotNull ( entity . getId ( ) )
UmaTestUtil . assert_ ( pat )
assertThat ( service . getServiceManager ( ) , is ( MixerAPI . class ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( "Gridded data not monotone" , input_buffer , ( double [ ] ) outputBuffer . get ( 0 ) , DELTA_06 )
assertThat ( infos . length , is ( 0 ) )
assertEquals ( liList . get ( 0 ) . getContent ( ) . get ( 0 ) . getId ( ) , "newli01" )
assertTrue ( retryPolicy . getRetryCondition ( ) . shouldRetry ( null , e , 1 ) )
assertEquals ( 1 , mid . get ( ) )
assertEquals ( s , r . toString ( ) )
assertTrue ( processor . canProcessEvent ( event ) )
assertFalse ( result )
assertEquals ( ( long ) now , Long . valueOf ( output ) )
assertEquals ( 0 , result . getMappingsCount ( ) )
assertEquals ( position , returnedPosition )
assertEquals ( "myseq.nextval" , new SQLSerializer ( new Configuration ( new SQLServerTemplates ( ) ) ) . handle ( nextval ) . toString ( ) )
assertEquals ( "bar" , jsonConfiguration . getString ( "foo" ) )
Assert . assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertEquals ( new ModelId ( "Test" , "com.bosch" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertEquals ( "ExpirationDate not equal to tokenExpirationDate" , newExpireDate , sut . getTokenExpirationDate ( ) )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , false , "test" , null ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( expected , actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "foo" , s )
assertEquals ( result , true )
assertDtoAndMapConstructorAreSame ( 0 )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "notification" , data ) , message )
assertThrows ( IllegalStateException . class , funnel :: run )
assertEquals ( 4 , result . getProperties ( ) . size ( ) )
assertBrownGCD ( gcd , a , b )
assertEquals ( "Base for strings is wrong" , "2001:db8:2de:0:0:0:0:e13" , parsed )
assertEquals ( 0.5f , entry . getEffectiveDurationHours ( ) , Float . MIN_NORMAL )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "onekey1val1val5|key2val2|" , hash )
Assert . assertEquals ( 2 , batches . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertAnnotations ( 2 , Coordinate . class , new TestCoordinate ( 0 , "51.507, -0.125" , "dd" , TYPE_POINT_COORDINATES_0_125_51_507 ) , new TestCoordinate ( 1 , "-3.2,56" , "dd" , TYPE_POINT_COORDINATES_56_3_2 ) )
Assert . assertFalse ( context . getResult ( ) )
runner . assertAllFlowFilesTransferred ( AbstractBigQueryProcessor . REL_FAILURE , 1 )
Assert . assertEquals ( "test" , someObject . getField ( ) )
assertNull ( "Closer task cannot have a closer" , task . getCloser ( ) )
assertTrue ( "Thread should have completed within 30 seconds" , doneLatch . getCount ( ) > 0 )
assertEquals ( "delta Mon" , d . getName ( ) )
assertNotNull ( dao . getTable ( "remote_files_path" ) )
assertEquals ( "unknown" , e . getMessage ( ) )
tester . assertInfoMessages ( "Username and password are correct!" )
result . assertIsSatisfied ( 3000 )
assertThat ( prop . satisfiesConstraints ( value ) , is ( true ) )
assertEquals ( 0 , tableNames . size ( ) )
assertNotNull ( error )
assertEquals ( expected , result , 0.000001d )
assertEquals ( 1 , result )
Assert . assertTrue ( "Single namespace is not supported by protobuf" , false )
org . junit . Assert . assertEquals ( expected , actual )
assertTrue ( album1 . equals ( album2 ) )
assertTrue ( newRecipe . getTags ( ) . isEmpty ( ) )
assertEquals ( "https://localhost.jenkins/git/notifyCommit?" + "url=http%3A%2F%2Fsome.stash.com%2Fscm%2Ffoo%2Fbar.git" + "&branches=refs%2Fheads%2Fmaster" + "&sha1=sha1&TARGET_BRANCH=master" , captor . getValue ( ) . getURI ( ) . toString ( ) )
assertNotNull ( injector )
assertEquals ( expResult , result )
assertTrue ( ( ( BooleanType ) respParam . getParameter ( ) . get ( 0 ) . getValue ( ) ) . booleanValue ( ) )
assertEquals ( "The test failed" , 1 , cause . length )
assertEquals ( "Echo Tex.get()t Doesn't Match!" , "echo this..." , response . get ( ) . getMessageBody ( ) )
assertEquals ( "Z" , z )
assertEquals ( "zdalDataSource" , zdalDataSource . getName ( ) )
assertThat ( result , hasSize ( 0 ) )
assertTrue ( "Snapshot with greater timestamp is greaterert" , greaterSnapshot . compareTo ( snapshot ) > 0 )
assertThat ( bolt . field , is ( DEST_FIELD ) )
assertTrue ( sba instanceof ThickSBA )
Assert . assertTrue ( "The test file " + filename + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( "4.2.1" , model . getProperty ( "TreeModel.Function" ) )
assertEquals ( provName , conv . getNewProviderName ( ) )
assertEquals ( expected , result )
assertEquals ( getLabel ( ) , 0.0 , prod . minus ( b ) . getRMS ( ) , TOLERANCE )
assertions . containsOnly ( values )
assertThat ( os . size ( ) , not ( 0 ) )
assertEquals ( "double mapper serialization is wrong" , expected , actual )
assertNotNull ( res )
assertEqualLines ( "invalid updating" , definedContent , newContent . toString ( ) )
assertEquals ( "very obese" , string0 )
assertEquals ( "UNI___was" , orgSectionHasher . hash ( section ) )
assertEquals ( Orientation . typeOf ( 7 ) , orientation )
Assert . assertEquals ( expResult , result )
assertStillValid ( )
assertArrayEquals ( expected , actual )
Assert . assertTrue ( Models . isomorphic ( expected , actual ) )
assertEquals ( 0 , metaMessage . getDuration ( ) )
assertEquals ( i , instance . size ( ) )
assertEquals ( "8.2.0" , revision )
helper . assertAttributeValue ( EXPECT_NoAttributeValue , invoiceLine . getM_AttributeSetInstance ( ) , attr_Country )
assertEquals ( "switch on enum Test { KEY1, KEY2 }" , "case KEY1:" , "case KEY2:" , "return 'not default';" , "break;" , "default:" , "return 'default';" , "}" )
assertEquals ( "Unexpected analysis submission in project" , 1 , shareAnalysisSubmissionWithProject . getSubmissions ( ) . size ( ) )
Assert . assertNotNull ( obj )
assertEquals ( input . parseString ( ) , expected )
assertTrue ( testComplete . isCalled ( ) )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "
assertTrue ( Arrays . equals ( getPacketData ( "00 00 00 00 00 06" ) , version . serialize ( ) ) )
Assert . assertEquals ( 0 , a . getNosi ( ) )
assertEquals ( sb . toString ( ) , whereSb . toString ( ) )
assertEquals ( str , "text/plain" )
assertEquals ( "Wrong number of entries in map" , 2 , cm . getMap ( "Foo.cfg" ) . size ( ) )
assertTrue ( true )
assertEquals ( IPV4Address . getByAddress ( "192.168.1.1" ) , ip )
assertEquals ( NUM_WRITERS * ENTRIES , countHLog ( logfile , fs , conf ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertFalse ( translationResult . getResult ( ) . booleanValue ( ) )
assertEquals ( 0 , r . avalie ( avaliaveis , null ) . getReal ( ) , 0.0001f )
assertEquals ( 1 , shacl . nbResult ( gg ) )
assertTrue ( entity . isValid ( ) )
assertThat ( description . toString ( ) , is ( "got <1> sheet(s) expected <1>" ) )
assertEquals ( anchorListItem , workbenchMenuStandardNavBarView . getMenuItemContextWidgetMap ( ) . get ( menuId ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . FUNDING_READ_LIMITED )
mock . assertIsSatisfied ( )
assertThat ( target . getQueueId ( ) , is ( new Integer ( 1234 ) ) )
assertEquals ( "Hello Tim" , resp . getResponseBody ( ) . trim ( ) )
Assert . assertEquals ( expected , actual )
assertSelectResultKeys ( selector , "abc" , "edf" )
assertEquals ( request . feePerKb , Transaction . DEFAULT_TX_FEE )
assertNotNull ( MessageInteraction . reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "KCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNotNull ( result )
assertEquals ( expected , actual )
assertNull ( map )
assertEquals ( expected , actual )
assertThat ( ConnectionHeaders . fromString ( " \\b\\t\\n\\r\\f{ \\b\\t\\n\\r\\f\\"key\\" \\b\\t\\n\\r\\f: \\b\\t\\n\\r\\f\\"value\\" \\b\\t\\n\\r\\f: \\b\\t\\n\\r\\f\\"bar\\\\\\\\manchu\\" \\b\\t\\n\\r\\f} \\b\\t\\n\\r\\f" ) , is ( expected ) )
assertTrue ( events . size ( ) == 3 )
assertEquals ( "Steven \\\\(Frederic\\\\) Seagal" , victim . readLiteralString ( ) )
assertTrue ( acceptor . validate ( controllerMethod , controllerInstance ) )
assertEquals ( DUMMY_URL , endpoint )
assertThat ( out , is ( nullValue ( ) ) )
assertThat ( tester . request . getParameterValues ( "aaa" ) , is ( "111" ) )
assertEquals ( expected , result )
Assert . assertTrue ( pinyinSet1 . size ( ) > 1 )
assertEquals ( "ABCDEF" , ObjectInspector . substitute ( ObjectInspector . reVarSubstPattern , "${X|Y|Z}" , new ZorkaConfig ( props ) ) )
assertTrue ( error )
Assert . assertEquals ( "baz" , manipulation . getColumnToRemove ( ) )
assertEquals ( 6 , outSize )
assertEquals ( sample , equiv . getBDDAlgebra ( ) . getBDD ( ) )
assertThat ( pathsInSource , hasItems ( pathInSource1 , pathInSource23 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( out , cmp , destinationFolder ) )
assertEquals ( "1 event should be returned" , 1 , events . size ( ) )
Assert . assertEquals ( 2 , count . get ( ) )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertTrue ( "Syslog audit log should be created" , ops . exists ( TEST_SYSLOG_AUDIT_LOG_ADDRESS ) )
Assert . assertEquals ( 0 , comparator . compare ( id1 , id2 ) )
assertEquals ( 0 , argList . size ( ) )
Assert . assertTrue ( conn . isClosed ( ) )
assertEquals ( "{\\"foo\\":\\"bar\\"}" , scope . generate ( ) )
assertEquals ( "pong!" , reply . body ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertNotNull ( result )
assertEquals ( generatedJavascript , expectedJavascript )
assertNotNull ( oracleEngine )
assertTrue ( desc . size ( ) == g . getV ( ) . size ( ) )
assertNotNull ( result )
assertTrue ( "isPresent should return true if only element actually present is not " + "required when RequireAll annotation is used." , testView . isPresent ( ) )
assertNull ( future . get ( ) )
Assert . assertEquals ( 0x00 , JSONUtils . getInt ( jsonObject , "salary" ) )
assertEquals ( BODY_CONTENT , rewrite ( gadget , BODY_CONTENT ) )
Assert . assertEquals ( 2 , metaUpdate . addKeepers ( dc , cluster , new ShardTbl ( ) . setShardName ( shard ) ) )
Assert . fail ( "Expecting MathIllegalStateException" )
assertTrue ( 12345.0f == d . asFloat8 ( ) )
assertEquals ( "涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓�涓
assertTrue ( evaluator . evaluate ( ae ) )
assertEquals ( Result . STOP , or . apply ( pathData ) )
assertEquals ( 1 , x . size ( ) )
assertThat ( results , containsInAnyOrder ( mrId , pr . getId ( ) , mrId ) )
assertTrue ( versionFileLib . exists ( ) )
assertEquals ( "Expected version not found" , version , child1 . getVersion ( ) )
assertEquals ( "value" , properties . getProperty ( "rocketmq.namesrv.domain" ) )
assertEquals ( msg , output . toString ( ) )
assertThat ( root . getString ( ( NamespaceRegistry ) null , encoder , encoder ) , is ( "/" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , intList . size ( ) )
assertEquals ( "public boolean equals(java.lang.Object obj, java.lang.Object obj2) {\\n" + "  return true;\\n" + "
assertObjectEquals ( "{'in':'header',name:'If-Unmodified-Since',type:'string'}" , pi )
Assert . assertEquals ( expected , result . getTime ( ) )
assertThat ( this . wrapper1 . equals ( this . wrapper2 ) , is ( false ) )
assertEquals ( 1 , type . getCapacityDimensions ( ) . getNuOfDimensions ( ) )
assertGraph ( "" + "digraph G1 {\\n" + "  CoffeeMaker -> Heater [style=dotted;color=red];\\n" + "  CoffeeMaker -> Pump;\\n" + "  CoffeeMaker [shape=box];\\n" + "}\\n" )
assertFalse ( loadconstraint . fulfilled ( context ) )
Assert . assertEquals ( "MetadataTableConfigHelper.setup incorrectly identified the TableName" , MetadataTableConfigHelperTest . TABLE_NAME , uut . exposeTableName ( ) )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertTrue ( barrier . isAborted ( ) )
assertThat ( specification . getUnits ( ) , is ( MILLI ( SECOND ) ) )
assertEquals ( 0 , branch_conditions . size ( ) )
assertEquals ( 3 , paragraphElement . getElementCount ( ) )
assertEquals ( "Both filters should be used" , 17 , sizeWithUnfilteredQuery ( ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( new SchemaAndValue ( Schema . BOOLEAN_SCHEMA , true ) , avroData . toConnectData ( avroSchema , true ) )
assertTrue ( result . contains ( "\\"1-0-v0\\":{\\"type\\":\\"LCD\\",\\"values\\":[\\"\\\\u0000\\"]}" ) )
Assert . assertEquals ( true , 0 == partition . calculate ( "2014-01-01 12:00:03" ) )
Assert . fail ( "Expected failure due to missing service name on message" )
assertEquals ( mk , mk2 )
Assert . assertEquals ( expected , name )
Assert . assertEquals ( HttpServletResponse . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Foo" , this . classifier . classify ( new IllegalStateException ( "Foo" ) ) )
assertFalse ( attributes . isNew ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( "[5.0, 2.0, 3.0, 4.0]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertEquals ( 144. , violation , 0.01 )
assertEquals ( Float . valueOf ( 81.56891 ) , testVal )
assertNull ( expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertEquals ( centuryAndTitlesFromInput . length , centuryAndTitlesFromHadoop . length )
assertThat ( generated , is ( "{ }\\nUNION { ?X <eh:/P> ?v1}UNION { ?X <eh:/Q> ?v2\\nOPTIONAL { ?v2 <eh:/R> ?v1 . }}}" ) )
assertEquals ( expected , results )
assertTrue ( details . hasCompensated ( ) )
assertTrue ( "Location not defined" , handler . isLocationDefined ( ) )
assertThat ( "interface inherited static method" , obj , equalTo ( 44 ) )
Assert . assertTrue ( "No results when search for community full text search" , success )
assertEquals ( properties , fr . getAuthorAndPropertyNames ( ) )
assertEquals ( "var" , exp . s )
assertTrue ( result . isSuccess ( ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( "Failed to generate for loop with initializer" , FOR_INITIALIZER_NO_COUNTING_EXP_EMPTY , s )
assertNotNull ( transferer )
assertThat ( actual , is ( "ABC_ID_OID" ) )
assertEquals ( "Base for doubles is wrong" , Double . valueOf ( 3.5d ) , parsed )
assertEquals ( TOKEN , profile . getId ( ) )
assertEquals ( 1 , getCount ( ) )
assertEquals ( 1 , books . size ( ) )
assertEquals ( expected , got )
Assert . assertEquals ( 1 , getCountingDummyPersister ( ) . getSaveCount ( ) )
assertEquals ( 500 , fixedRate )
assertThat ( testOutcome . getTestName ( ) , is ( "My user story" ) )
Assert . assertTrue ( "Expected nextBackOffMillis = " + ( nextBackoffMillis + factor ) , nextBackoffMillis == server1Proxy . getNextBackOffMillis ( ) )
assertTrue ( isSorted )
Assert . assertTrue ( res . isEmpty ( ) )
assertTrue ( ! result . isEmpty ( ) )
assertEquals ( "Float value does not match" , bookmark . getVisitRatio ( ) , loadedBookmark . getVisitRatio ( ) )
assertThat ( result , containsInAnyOrder ( "John" , "Jane" , "Adam" ) )
assertEquals ( r . toString ( ) , "{\\"field1\\": 1729,\\"field2\\": [true,true,false],\\"field3\\": {\\"key\\": \\"value\\"}}" )
Assert . assertTrue ( myRecordList . size ( ) == 1 )
assertParser ( parser , "foo ::= bar \\n baz | 'baz' \\n\\n #line comment \\nbar ::= 'bar'" , List . class , "[foo ::= bar (baz | 'baz'), bar ::= 'bar']" )
assertNull ( sessionFactory . getCurrentSession ( ) . get ( TaskElement . class , task . getId ( ) ) )
assertArrayEquals ( "odd terminated compact decode fail" , expected , CompactEncoder . unpackToNibbles ( test ) )
assertEquals ( new SubmissionSet ( ) , result )
assertEquals ( "0fb7" , result )
assertEquals ( 2 , loader . iterator ( ) . next ( ) . getClass ( ) . getClassLoader ( ) . getResources ( ) . length )
AssertJUnit . assertTrue ( result . isSuccess ( ) )
assertNotNull ( Member . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "QUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( qr , q1 )
Assert . assertEquals ( "NonZnRecord" , payLoad )
Assert . assertSame ( o , p . getExpectedValue ( ) )
assertTrue ( "incorrect value" , aNumber . toString ( ) . equals ( result ) )
Assert . assertEquals ( expected , actual )
assertEquals ( model , model . getObjects ( Conversion . class ) . get ( 0 ) )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertFalse ( resp )
Assert . assertEquals ( TcpSocketManager . TcpSocketTrafficClass . IPTOS_LOWCOST . value ( ) , socket . getTrafficClass ( ) )
assertEquals ( "bar" , p . poll ( ) )
assertEquals ( true , classUnderTest . getSavePreferencesImmediately ( ) )
assertEquals ( 3 , c1 . getTotalBytes ( ) )
assertEquals ( expResult , result )
assertEquals ( r1 , r2 )
assertCorrectBinaryString ( data , expected )
Assert . assertEquals ( 1 , success )
assertEquals ( "raw() content-type-header=[application/x-www-form-urlencoded; charset=UTF-8] accepts-header=[*/*]" , actual )
Assert . assertEquals ( element . getText ( ) , "click me" )
Assert . assertEquals ( "Empty IPTarget must not have a host" , null , ip . getHost ( ) )
assertEquals ( mockUserDetails , userDetails )
assertEquals ( "TDP-3" , boardManager . getBoard ( ) . getCurrentState ( ) )
Assert . assertEquals ( c . getValue ( ) , "checked" )
assertEquals ( "test" , echo . echo ( "test" ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "DropMe" , destination . getText ( ) )
assertNotNull ( Transcription . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertThat ( "should not register user with existing mail address" , registered , is ( false ) )
assertTrue ( "unexpected value" , value )
assertNull ( result )
assertInvocations ( invocations )
assertThat ( builder , is ( CoreMatchers . any ( BaseWssFactoryBuilder . class ) ) )
TestUtils . assertEquals ( interesado , interesadoCreado )
assertThat ( testExecutor . invokeTest ( 5000L , ImmutableMultimap . of ( "force" , "whatever" ) ) , is ( true ) )
assertEquals ( expectedQuery , query )
assertThat ( po . get ( ) . getRunningCount ( ) , is ( 200 ) )
assertEquals ( "Expected HTTP response status code not seen." , 404 , response . getStatus ( ) )
Assert . assertNull ( prewriteSingleRow ( ) )
assertEquals ( expResult , result )
assertNotNull ( generator )
assertTrue ( true )
assertThat ( axioms , hasItem ( axiom ) )
assertEquals ( tags , taggedMetric . getTags ( ) )
assertEquals ( expected , json )
assertNotNull ( form )
assertTrue ( sut . isAccountNonLocked ( ) )
assertTrue ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_4_BYTE_CHAR ) )
assertEquals ( "(5)" , asSequenceStr ( result ) )
assertTrue ( traceHeaderLatch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( trans ,raudSet )
assertTrue ( rs . next ( ) )
assertThat ( count , is ( 1L ) )
Assert . assertEquals ( fsAccess . serviceHadoopConf . get ( "foo" ) , "FOO" )
assertThat ( output . format ( "failed" , "" , "failed" ) , Matchers . is ( "\\033[35mfailed\\033[0m" ) )
Assert . fail ( "Was able to create two fields with same alias" )
assertThat ( sortDependencies . toString ( ) , is ( "DependencySortOrder{childElementNames=[groupId, scope]}" ) )
assertNotNull ( frame )
assertEquals ( "Sum of 10.3 and 140.5 should be 1" , 1 , sum ( numbers ) , 1e-10 )
assertTokensEqual ( of ( integer ( 1 ) ) , lastSeenTokens . get ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEqualsQL ( A , qr . factor ( new DenseMatrix ( A ) ) )
assertThat ( writer . toString ( ) , equalTo ( "onetwothree" ) )
assertEquals ( expectedPosition , actualPosition , 0 )
assertEquals ( "Server returned response code " + r , HttpStatus . BAD_REQUEST_400 , urlConnection . getResponseCode ( ) )
assertEquals ( "test_topic" , streamDefinition . getStreamDefinition ( ) . getName ( ) )
arrays . assertContainsOnly ( description , actual , other )
assertNotNull ( query )
assertSame ( child , docElement . getBody ( ) )
assertTrue ( future . isDone ( ) )
assertEquals ( prefix , manager . getFileFormat ( ) . getPrefix ( ) )
assertEquals ( expectedDate , formatDate ( "yyyyyy-MM-dd HH:mm" , result ) )
assertMultilinesEquals ( "EPSG: Mercator (variant A)\\n" + "��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������
Assert . assertTrue ( newPointAvailable )
assertEquals ( 1 , statistics . size ( ) )
assertTrue ( lt . interpret ( Version . valueOf ( "1.2.3" ) ) )
assertThat ( result , is ( false ) )
assertXsltOutput ( "I" , "O" )
assertThat ( "Count of customer" , res , is ( 2 ) )
Assert . assertEquals ( "3 vuosituhannen p盲盲st盲" , t . format ( new Date ( 315569259747L * 3L ) ) )
Assert . assertEquals ( 1 , s . x )
assertEquals ( HttpStatus . SC_NOT_FOUND , response . getStatus ( ) )
assertEquals ( r1 . hashCode ( ) , r2 . hashCode ( ) )
assertFalse ( Intersects . lineIntersectsCircle . call ( a , c ) )
Assert . assertTrue ( pss . toString ( ) . contains ( Integer . toString ( Calendar . getInstance ( ) . get ( Calendar . YEAR ) ) ) )
assertEquals ( acceptor , typedMap . get ( accKey ) )
assertEquals ( history , unmarshalledHistory )
assertEquals ( result , Long . parseLong ( ( String ) entry . getValue ( ) ) )
assertEquals ( "333" , tk . next ( ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertNotNull ( activity . getVariable ( CoreProcessVariables . POOL ) )
assertEquals ( OVERRIDE_NAME_TRAIT , v . getProp ( NAME ) . get ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( hasIndexHashKeyEqualCondition )
assertNotNull ( "Date cannot be null" , date )
assertEquals ( expected , getPatternMap ( ) )
assertThat ( result . size ( ) , is ( 1 ) )
rule . assertScenarioEnded ( )
assertEquals ( uri , sentryApiUrl . toString ( ) )
assertSequence ( sequencedPath , "maxlines/" + filename , JcrConstants . JCR_CONTENT )
assertEquals ( 1 , changeEvent [ 0 ] . getPosition ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getArea ( ) == - Double . MIN_VALUE )
Assert . assertEquals ( VAL6 [ j ] [ 0 ] + "->" + j , VAL6 [ j ] [ 1 ] , result . getText ( ) )
assertEquals ( ReactiveEntitySerializer . class , deserializer . getClass ( ) )
Assert . assertEquals ( user , LdapUtil . auth ( user , password ) )
assertNotNull ( result )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( 1 , dataStore . getIndices ( MOCK_DATA_TYPE_1 ) . length )
assertEquals ( "Mismatched recovered value" , expected , actual )
assertEquals ( expected , filterAclEntriesByAclSpec ( existing , aclSpec ) )
Assert . assertEquals ( "<h1>Hello @ World
assertEquals ( "dew-test" , result . get ( ) )
assertEquals ( "^(.+)$" , regex )
assertTrue ( h . getNewURL ( ) . equals ( "/NewSimpleRegex" ) )
assertArrayEquals ( new String [ ] { "1.2.40.0.13.1.1.99.27.1.1" } , matches ( query , Tag . SOPInstanceUID ) )
assertTrue ( cloned [ 0 ] == cloned [ 1 ] )
assertTrue ( ok )
assertTrue ( TEST_UTIL . getHBaseAdmin ( ) . isTableEnabled ( TABLENAME ) )
assertEquals ( 2 , context . getAssociatedActivities ( ) . size ( ) )
assertResolvedModelIsNull ( )
assertEquals ( text , infoTextManager . getInfoText ( ) )
assertEquals ( expected , actual )
assertEquals ( 3 , count )
assertNull ( patientInfo . getName ( ) )
assertEquals ( expected , header . getValue ( ) )
Assert . assertFalse ( json . has ( CONTROLLER_NAME ) )
assertLog ( Log . INFO , "test info argument argument2 argument3" )
Assert . assertArrayEquals ( expected , actual . toArray ( ) )
Assert . assertTrue ( "raml: " + c . getLastReport ( ) . toString ( ) , c . getLastReport ( ) . isEmpty ( ) )
assertTrue ( clientInfoService . isUseProxiesEnabled ( ) )
assertTrue ( metricsService . metricsNames ( ) . size ( ) > 0 )
assertTrue ( clientManager . getChannel ( ) . isEmpty ( ) )
assertThat ( cloths , IsIterableWithSize . < String > iterableWithSize ( 4 ) )
assertEquals ( i , fromList )
assertNotNull ( testObj . getPanel ( ) )
assertEquals ( 1 , results . size ( ) )
assertEquals ( expectedReprovisionPolicy , individualEnrollment . getReprovisionPolicy ( ) )
assertEquals ( "Mismatched derived engineering for projected projection" , crs , derivedCRS )
assertTrue ( emptyMap . isEmpty ( ) )
assertPlanMatches ( project )
Assert . assertEquals ( null , _c . convert ( "" ) )
assertTrue ( criteria . getResultList ( ) . containsAll ( criteriaCTO . getResultList ( ) ) )
assertEquals ( 4 , result . get ( ) . getList ( ) . size ( ) )
assertEquals ( expected , splitter . split ( expression ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.BarrierOutput" , key1 . toString ( ) )
assertTrue ( Pattern . matches ( HTableDescriptor . VALID_USER_TABLE_REGEX , tn ) )
Assert . assertFalse ( task . isInitialized ( ) )
assertIterationsEqual ( out1 , out2 )
assertEquals ( "Should have created Gitlab project" , "/tmp/test" , subject . getProjectDirectory ( ) )
assertions . containsOnly ( )
assertTrue ( functionsWithName . isEmpty ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( "num metrics in registry" , 3 , r . metrics ( ) . size ( ) )
assertEquals ( "" , propertyValue )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertEquals ( setOf ( new KeyStatistics < String > ( "Ford" , 6 ) , new KeyStatistics < String > ( "Honda" , 6 ) , new KeyStatistics < String > ( "Toyota" , 6 ) , new KeyStatistics < String > ( "BMW" , 2 ) ) , keyStatistics )
Assert . assertEquals ( dim . getNumCols ( ) , 100 )
assertTrue ( action . isExecuted ( ) )
Assert . assertEquals ( atomURI , RdfUtils . findOne ( dataset , AtomUtils :: getAtomURI , true ) )
assertTrue ( lock . lockConnection . getMetaData ( ) . getURL ( ) . contains ( database ) )
assertEquals ( "{\\"type\\":\\"Text\\",\\"geometries\\":[{\\"type\\":\\"Point\\",\\"coordinates\\":[0 0, 1 3]},{\\"type\\":\\"LineString\\",\\"coordinates\\":[[4.0,6.0],[7.0,10.0]]}]}" , ClobType . getString ( c ) )
assertEquals ( dummyResource . getSourcePath ( ) , testResource . getSourcePath ( ) )
assertEquals ( arr , resultArr )
assertEquals ( r4 , mostRelevantResource )
assertThat ( result , equalTo ( "Hello World" ) )
assertEquals ( "bar1" , jedis . get ( "foo2" ) )
assertNotNull ( query )
Assert . assertEquals ( "Date " + date + " was not correctly truncated to year" , dateTruncExpected , dateTruncActual )
assertNotNull ( Member . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><root>" + "<firstArray><value>firstArrayValue0</value><secondArray><value>secondArrayValue0-0</value>" + "<thirdArray><value>thirdArrayValue0-0-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-0-1</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue1-0</value><thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue1-1</value><thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue1-1</value><thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue1-1</value><thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue1-1</value><thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-2</value></thirdArray>" + "<thirdArray><value>
assertNull ( t2 )
assertThat ( allDomainPermissions . isEmpty ( ) , is ( true ) )
assertThat ( effect , is ( 66 ) )
assertEquals ( "test label" , field . getFill ( null , null ) )
Assert . assertTrue ( irodsFile . isFile ( ) )
assertEquals ( 1 , count . get ( ) )
Assert . assertNotNull ( pojo . testManager )
Assert . assertEquals ( entity , result )
assertEquals ( original , modified )
assertFalse ( "Escaping not performed: \\"" + output + '\\"' , output . contains ( "<script>alert(" ) )
assertThat ( message , containsString ( "You have been banned until %s, please respect throttling and retry-after headers." ) )
assertTrue ( true )
Assert . assertEquals ( FileType . MZML , fileType )
assertEquals ( "Wrong property" , "bar" , propertyLoader . loadProperty ( "bar" ) )
org . junit . Assert . assertEquals ( 1 , count . get ( ) )
assertEquals ( sequencedRootPath , getTestFilePath ( sequencedRootPath ) )
Assert . assertEquals ( "empty" , description . getPattern ( ) )
assertTrue ( result . passedValidation ( ) )
Assert . assertEquals ( x , y )
assertSame ( latestActivity , component . getLastActivity ( ) )
assertThat ( getProcessingError ( ) , containsTypeError ( "domainNamespaces" , "bool" ) )
assertTrue ( "Record should be valid" , isValid )
assertEquals ( expResult , result )
assertEquals ( 2 , commentlList . size ( ) )
assertEquals ( arr , resultArr )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( value , genericSolutionAttribute . getAttribute ( solution ) )
assertEquals ( 1 , selectJobByProcessInstanceId ( processInstance . getId ( ) ) . getRetries ( ) )
assertThat ( converter . toJavaObject ( new HiveCharWritable ( hiveChar ) ) , is ( ( Object ) "a" ) )
assertEquals ( Subscription . State . PENDING , subscription . getState ( ) )
assertThat ( mid , is ( - 1 ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . delete ( this . patient ) )
assertEquals ( "abc" , result )
assertEquals ( dataType , header . getDataType ( ) )
runner . assertValid ( )
Assert . assertNotNull ( s )
Assert . assertFalse ( "Invalid response from interceptor" , result )
assertNull ( attrs . get ( "someInt" , Integer . class ) )
assertE ( "�尖�尖�尖�尖��" + "��131��" + "��121��" + "��111��" + "�尖�尖�尖�尖��" )
assertEquals ( name , result )
Assert . assertEquals ( "Error updating shared file" , file . getVersion ( ) , version + 1 )
assertEquals ( "GBP 125.34" , test . toString ( ) )
assertEquals ( "Expr.Dismissed" , idView . getCssValue ( "display" ) )
assertSame ( reply1 , reply2 )
assertTrue ( statsUsageService . getUsage ( StatsUsageType . FULLTEXT ) == usage )
assertEquals ( - 1 , resultComparator . compare ( ucc1 , ucc2 ) )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertEquals ( 0 , n )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertTrue ( executableHelper . overrides ( subType , superType ) , "Literature#getTitle() is private. It should not be possible to override it." )
assertSingleIssue ( issues , 1 , "Subscription rule." , "5min" )
assertDtos ( expected , actual )
assertEquals ( testDbName , baseSimbaDatabaseMeta . getUrlOdbc ( ) )
assertEquals ( "unsignedByte" , shortForm )
assertEquals ( "Expected 0 results!" , 0 , count )
assertEquals ( "ALTER TABLE testtable DROP IF EXISTS PARTITION (country='US')" , query )
assertThat ( findBook , hasProperty ( "title" , equalTo ( TITLE ) ) )
assertNull ( "no item should have been found" , item )
assertEquals ( readLog . getLogId ( ) , 123L )
assertEquals ( DataTransferStatus . REJECTED , response . getStatus ( ) )
Assert . assertEquals ( "true" , tree . getLabel ( data ) . getName ( ) )
Assert . assertEquals ( result . toStringWithoutTime ( ) . trim ( ) , expectedResult . trim ( ) )
assertEquals ( "local://foobar" , disp . get ( ) . getAddress ( ) . getValue ( ) )
assertEquals ( false , foo . _boolean )
Assert . assertNotNull ( referrers )
assertEquals ( "Must parse 1 element" , 1 , message . getObservations ( ) . size ( ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\r" } } ) ) )
assertNotNull ( result )
assertEquals ( result . size ( ) , 2 )
assertEquals ( "{\\"relationship\\":\\"SELF\\",\\"url\\":{\\"value\\":\\"http://orcid.org\\"},\\"workExternalIdentifierType\\":\\"DOI\\",\\"workExternalIdentifierId\\":{\\"content\\":\\"peer-review:subject-external-identifier-id\\"}}" , converter . convertTo ( peerReview . getSubjectExternalIdentifier ( ) , null ) )
assertEquals ( Sets . newHashSet ( "table2" ) , service . getTablesToRepair ( cluster , unit ) )
Assert . fail ( "Expected BundlePersistenceException" )
assertTrue ( result . isResultOK ( ) )
Assert . assertTrue ( result . isEmpty ( ) )
assertArrayTest ( form )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertNull ( "empty master is not worth a review. The UI spots that alone" , review )
assertFalse ( validator . validate ( request ) . passedValidation ( ) )
assertEquals ( expResult , result )
assertEquals ( "GridRow 1 has wrong height" , 0 , grid . getRowHeight ( ) )
assertNameToken ( ast , "bwahaha" )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertObjectEquals ( "{name:'foo'}" , t )
assertTrue ( LibUsb . getApiVersion ( ) . is18 )
assertEquals ( "010203ff" , formatter . decodeAsString ( new byte [ ] { 1 , 2 , 3 , ( byte ) 255 } ) )
Assert . assertEquals ( 2 , outPatient . getVoided ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "ttTo" ) )
validator . assertValid ( value )
assertThat ( errors , hasFieldErrors ( "familyNamePrefix" , "Patient.names.required.family" ) )
assertEquals ( "bar1,bar2" , containerRequest . getHeaderString ( "foo" ) )
assertEquals ( errorRate , 1.0 , 0.000001 )
assertEquals ( 0 , rpt . size ( ) )
assertTrue ( actual instanceof SimpleJaxb )
assertNull ( validatingPlugin )
assertEquals ( "4.0" , response . getHeader ( HttpHeader . ODATA_VERSION ) )
Assert . assertEquals ( "newId" , newActualId )
Assert . assertEquals ( 0 , solution . getUnassignedJobs ( ) . size ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertIsAborted ( tx )
Assert . assertEquals ( field1 , f1 )
assertNotNull ( "could not find contract resource" , url )
assertTrue ( folder . getProgressState ( ) == ProgressState . IN_PROGRESS )
assertEquals ( result , AuthenticationStatus . AUTHENTICATED , "Authentication not existing user with correct credentials should be successful." )
Assert . fail ( "Exception should be thrown" )
Assert . assertThat ( QueryBuilder . getInstance ( ) . buildFilterQuery ( co , "" , 1 , 0 , 0 , 0 , null ) , equalTo ( expected ) )
assertNull ( new RandomRelationshipSelector ( ) . selectRelationship ( database . getNodeById ( 0 ) ) )
assertEquals ( MESSAGE_LIST , getBatchResponse ( MESSAGE_LIST ) )
assertEquals ( 0 , model . size ( ) )
assertEquals ( "boolean" , shortForm )
assertThat ( sw . toString ( ) , is ( equalTo ( "    a\\n    b" ) ) )
assertSeq ( new String [ ] { "<a/>" , "a" , "b" , "c" } , "revert(/top/*, 'a', 'b', 'c')" )
assertThat ( asset . formatAttributes ( ) . get ( "contributors" ) , is ( "Foo <foo@example.com> (http://www.example.com/foo)" ) )
assertEquals ( 1 , entry . getTotalResults ( ) )
assertEquals ( "http://blob" , packageUri )
assertMatches ( written , resolved )
assertEquals ( expected , result )
assertEquals ( expectedAst , ast . dump ( "" ) + "\\n" )
assertEquals ( "" , digest )
Assert . assertTrue ( entryList . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expectedCount , result . size ( ) )
assertThat ( result , is ( false ) )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertArrayEquals ( u , MathArrays . unique ( x ) , 0 )
assertNotNull ( iterImpl )
assertEquals ( "Hello" , wire . toString ( ) )
Assert . assertEquals ( env . get ( "java.naming.factory.initial" ) , "com.sun.jndi.dns.DnsContextFactory" )
assertEquals ( "http://listener:2000/foo/bar" , url )
assertEquals ( version , "12" )
assertEquals ( expected , cls )
assertThatFeatureIsInContext ( builder , "feature_test" , Configuration . getDefault ( ) . url )
assertEquals ( String . valueOf ( ReturnCode . NO_DIGITS . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "nt" ) )
assertThat ( name . getQualifiedName ( ) , is ( "aaa.bbb.server.meta.ccc.DddMeta" ) )
assertEquals ( request . getContentLength ( ) , result )
Assert . assertEquals ( hello , helloFromIrods )
assertFalse ( isDisabled )
assertNotNull ( result )
assertEquals ( true , classUnderTest . getShowToolTips ( ) )
assertThat ( box . absenceAsIfItWas ( ) , is ( true ) )
runner . assertNotValid ( )
assertMockEndpointsSatisfied ( )
assertTrue ( longArray . length == 3 )
assertEquals ( TextUtil . readUTF8 ( path ) , generator . getResult ( ) )
assertEquals ( "Translation failed" , SocketException . class , pelopsException . getClass ( ) )
Assert . assertTrue ( contains )
assertEquals ( arr , resultArr )
Assert . assertEquals ( numGen . getValue ( ) , nums . getValue ( ) )
assertFalse ( Strings . isNullOrEmpty ( resp ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertNull ( output )
assertEquals ( "Failed to parse: @[5,50]" , pe . getMessage ( ) )
assertEquals ( expected , actual )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) > 0 )
assertNotNull ( "testDeleteFile error !!!" , reader )
assertEquals ( g1 , g2 )
assertTrue ( matchResult )
assertThat ( description . toString ( ) , is ( "cell at \\"XXX\\" contained <TRUE> expected <FALSE> sheet \\"Sheet1\\"" ) )
assertTrue ( sta . validateStrokeAndFill ( new PenStroke ( ) , null ) )
assertThat ( supplier . authForImage ( imageId ) , matchesAccessToken ( accessToken ) )
assertEquals ( SimpleScore . of ( 42 ) , scoreDirector . calculateScore ( ) )
Assert . assertEquals ( testString , HtmlToXMLUtil . unescapeToXML ( testString ) )
Assert . fail ( "Expected IOException" )
assertCollection ( response )
assertEquals ( "redirect:/reset-password?expired=true" , modelAndView . getViewName ( ) )
assertEquals ( "abc" , injected . val . get ( ) )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) )
assertEquals ( roles , roleListWrapper . getRoles ( ) )
Assert . fail ( "expected exception. Found " + resource )
Assert . assertEquals ( "涓�|浠�涔�" , words )
assertThat ( reportGenerator . generateJsonSingleUserStatistic ( usageStatistics ) , equalTo ( "{\\n" + "  \\"userId\\": \\"cvop\\",\\n" + "  \\"status\\": \\"SUCCEEDED\\",\\n" + "  \\"totalFileReadingMb\\": \\"262\\",\\n" + "  \\"totalCpuTime\\": \\"00:29:58\\",\\n" + "  \\"totalTime\\": \\"00:29:26\\",\\n" + "  \\"totalCpuTime\\": \\"00:29:26\\",\\n" + "  \\"totalMemoryUsedMbs\\": \\"7,500,170\\",\\n" + "  \\"project\\": \\"fire\\",\\n" + "  \\"startTime\\": \\"12.01.2017 17:03:40\\",\\n" + "  \\"totalVcoresUsed\\": \\"1,762\\",\\n" + "  \\"status\\": \\"SUCCEEDED\\"\\n" + "}" ) )
assertThat ( entityId , is ( equalTo ( ( Object ) 100L ) ) )
assertNotNull ( response )
assertEquals ( "2008-02-07_00" , s )
assertEquals ( 0 , logRecordList . size ( ) )
assertThat ( top3RichCustomerList , contains ( "Jack" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Bob" , "Alice" , "Alice" , "Bob" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "Alice" , "
assertNotNull ( menuBarContainerTool )
assertEquals ( entities , entities2 )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , wire . read ( ) . text ( ) )
assertTrue ( pass )
assertEquals ( n , c )
assertEquals ( "Execution Count" , 3 , table . getExecutions ( ) )
assertEquals ( "select sql_no_cache survey.NAME from SURVEY survey order by survey.NAME asc" , toString ( query ) )
Assert . assertEquals ( devices , loadedDevices )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( 1 , resultado )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( schema , schema2 . getSchema ( ) )
assertEquals ( "duration not reached" , duration , b . duration ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( PriorityBean . PRIORITY , job . getPriority ( ) )
Assert . assertTrue ( concept . isEmpty ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday" , days )
Assert . assertEquals ( createObjectNode ( "fieldName2" , 42 , 12 ) , result )
assertTrue ( matcher . match ( msg , rule ) )
assertEquals ( "Hello World" , testObject . getMessage ( ) )
assertEquals ( "Hello" , sub . receiveMessage ( ) . popString ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( combiSet . nbOfCombinations ( 2 ) == 3 )
assertFalse ( victim . isValid ( box , null ) )
Assert . assertEquals ( invokers , fileredInvokers )
assertNull ( dispatcherType )
assertEquals ( "0.0" , str )
Assert . assertNotNull ( stream )
assertNotNull ( result )
assertTrue ( simpleValue1 . equals ( simpleValue2 ) )
assertEquals ( "returned parsed text value was incorrect" , expectedReturn , StringUtils . searchAndColor ( text , searchText , dummyColorInt ) )
Assert . assertNotNull ( victim . create ( ) )
assertEquals ( asList ( asList ( 0 , 0 , 0 ) , asList ( 1 , 0 , 0 ) , asList ( 2 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 1 , 1 , 0 ) , asList ( 2 , 0 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 1 , 0 ) , asList ( 0 , 2 , 0 ) , asList ( 0 , 0 , 0 ) , asList ( 0 ,
mock . assertIsSatisfied ( )
assertTrue ( true )
assertEquals ( mod , modSer )
assertE ( "�尖�尖�尖�尖��" + "�� �� ��" + "�� �� ��" + "��   ��" + "�尖�尖�尖�尖��" )
assertThat ( r , hasEntry ( "int" , ( Object ) - 1 ) )
Assert . assertTrue ( count > 0 )
assertEquals ( "Input key/value json should match output key/value json" , inputJson , outputJson )
assertEquals ( VerifyFailType . WARN , pluginParameters . verifyFailType )
assertEquals ( "testVM/Renamed" , testDiskFileNameString )
Assert . assertEquals ( "test put schema with bson type" , HttpStatus . SC_CREATED , resp . getStatus ( ) )
assertMetric ( "ReqPerSec" , "1.99871" )
assertArrayEquals ( expected , actual )
assertNotNull ( result )
assertEquals ( clientConfig , clientConfig2 )
assertThat ( taxFactor , equalTo ( FinalTaxService . DEFAULT_TAX_FACTOR ) )
assertTrue ( validator . validate ( getWSDL ( wsdl ) ) )
assertEquals ( 1 , lintresult . getIssues ( ) . size ( ) )
assertNull ( query . getMetric ( ) )
assertStack ( new Object [ ] { Integer . valueOf ( 3 ) , null , Long . valueOf ( 1 ) , null , Long . valueOf ( 1 ) , null } , stack )
Assert . assertEquals ( expected , actual )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertScriptEquality ( expectedScript , actualScript )
assertEquals ( "http://apache.org/shindig?foo#hello=world" , builder . toString ( ) )
Assert . assertEquals ( 0 , numEdits )
assertEquals ( expected , actual )
assertEquals ( emptyList ( ) , result )
files . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( response . getStatus ( ) , Status . SUCCESS . getValue ( ) )
assertNotNull ( uMapping )
assertEquals ( 1 , testSet . getTestResults ( ) . size ( ) )
Assert . isTrue ( true )
Assert . assertEquals ( path , "dir" + File . separatorChar + "dir2" )
assertThat ( sw . toString ( ) , is ( equalTo ( "    bcd\\n    test" ) ) )
assertNotNull ( verbSynset )
assertEquals ( "High-Performance Java Persistence" , post . getTitle ( ) )
assertEquals ( 0 , valMessages . size ( ) )
assertEquals ( "Should get a value" , 1 , el . getValue ( ) )
assertEquals ( "" + QueryMessages . outputFilterNotice ( ) + "\\n" + "organisation:
Assert . assertEquals ( Integer . class , clazz )
assertTrue ( ex . getMessage ( ) . equals ( "Dee on initial crawl!" ) )
assertEquals ( 404 , responseGet . getStatus ( ) )
assertEquals ( DataStatus . ACTIVE , empty . getCycleLockStatus ( ) )
assertThat ( effect , is ( 1 ) )
assertThat ( validations . getErrors ( ) , hasSize ( 0 ) )
assertTrue ( syncOpt . isDbVersionPresent ( ) )
assertNotNull ( transplant . getRecurr ( ) )
assertNotNull ( db . getNode ( path ) )
assertEquals ( "a<V>\\n" , found )
assertThat ( referenceSet , is ( empty ( ) ) )
assertEquals ( "Hello World!" , result )
Assert . assertEquals ( "should have found collection" , collection , actual )
assertEquals ( 3 , groupMembers . size ( ) )
assertEquals ( expected , result )
assertEquals ( "Springfield" , exp . evaluate ( person , vars ) )
assertEquals ( SAMPLE_ITEM_NAME , returnedDomainEntity . getItemName ( ) )
assertEquals ( JBossSAMLURIConstants . NAMEID_FORMAT_PERSISTENT , servletRequest . getHeader ( JBossSAMLURIConstants . NAMEID_FORMAT ) . getValue ( ) )
assertEquals ( repo , diConfig . getRepository ( ) )
assertEquals ( "bob" , val )
assertThat ( mqttClient . getMessages ( ) , is ( Arrays . asList ( new Message ( topic ( "A8" ) , "9" ) ) ) )
assertEquals ( "getMinimized() doesn't return the same value as the previous setMinimized(true)" , gadget . getMinimized ( ) , testGadDef . getMinimized ( ) )
assertEquals ( "suryagaddipati/cancan" , template )
assertEquals ( type1 , type2 )
assertEquals ( pos . getErrorIndex ( ) , 0 )
assertThat ( l , contains ( 9 , 8 , 7 ) )
assertEquals ( parser . parse ( expectedOutput ) , devent . payload )
assertEquals ( expected , got )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_width01_" ) )
assertEquals ( "2.1234 >> 2" , e . eval ( ) )
assertThat ( html , is ( "<input type=\\"hidden\\" name=\\"w1\\" id=\\"w1\\" onChange=\\"changeFunc\\"  value=\\"2014-10-01\\" />" ) )
assertEquals ( 14 , res )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
assertEquals ( m1 , m2 )
assertEquals ( ElasticSearchIndexProvider . ES_TEXT_TYPE , type )
assertEquals ( "Wrong decoded value" , decodedValue , config . getEncodedString ( KEY_PREFIX , decoder ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( atom ) )
assertEquals ( message , baseObject , activity . getUpdated ( ) )
assertEquals ( expResult , result )
assertTrue ( m . isEmpty ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
assertEquals ( "testFolder" , testFolder . toString ( ) )
assertEquals ( BuilderFactory . start ( ) . addBinary ( "a" , ( byte ) 5 , new byte [ ] { ( byte ) 0xCA , ( byte ) 0xFE } ) . build ( ) , doc )
assertEquals ( "{\\"a\\":\\"a\\",\\"b\\":2,\\"c\\":{\\"a\\":\\"c.a\\",\\"b\\":4,\\"c\\":{\\"a\\":\\"c.c.a\\",\\"b\\":7}}}" , result )
assertEquals ( 1 , service . prepare ( query ) . countEntities ( fo ) )
Assert . assertEquals ( streetLayer . vertexStore . getVertex ( 37.3631 + latOffset ) . getEdgeIndex ( ) , ee . getEdgeIndex ( ) )
assertEquals ( "application2.properties" , bootConf )
assertEquals ( "test" , namedCluster . getHostNameParsed ( null ) )
Assert . assertNotNull ( personStructure )
assertNull ( target . getDataManager ( ) . get ( new Parameters ( ) . setLocationKey ( locationKey ) . setContentKey ( contentKey ) ) )
assertEquals ( Arrays . asList ( "col1" , "col2" ) , subset . getProperty ( "key4" ) )
Assert . assertFalse ( isNewRequired )
assertTrue ( "Waited less than 700ms: " + waited , waited < 700 )
assertThat ( argument . getValue ( ) , is ( instanceOf ( BasicDBObject . class ) ) )
assertNotEquals ( ctx1 , ctx2 )
assertFalse ( purchase . getTicket ( ) . isDiscount ( ) )
assertEquals ( 12 , metadata )
assertFalse ( validator . validate ( Meta , PUT ) . passedValidation ( ) )
assertEqualMarginals ( fg , bf , bp )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  c(custom_namespace::b);\\n}" )
assertTrue ( roles . size ( ) > 0 )
Assert . isTrue ( grades . size ( ) > 0 )
assertNull ( item . getList ( ) )
assertEquals ( 6. * 3600. + 6. * 60. , sec , 0.01 )
assertEquals ( sample , sample2 )
assertThat ( result . getPayload ( ) , is ( instanceOf ( String . class ) ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  c(org.apache.royale.utils.Language.closure(this.b, this, 'b'));\\n}" )
assertEquals ( ( short ) 0x0009 , s . m0_0 ( ) )
assertEquals ( htmlSanitized , sanitized )
Assert . assertTrue ( true )
assertEquals ( expectedSpec , opts . getIndexingSpecification ( ) )
assertTrue ( "Plugins loaded" , pluginManager . loadPlugins ( ) )
assertEquals ( expectedURI , gotURI )
assertThat ( metaStoreMapping . isReady ( ) , is ( true ) )
assertThat ( arguments . getAgent ( ) , is ( "funky-bot-2" ) )
assertCaret ( 2 )
Assert . assertTrue ( acc2 < acc )
assertThat ( output , containsString ( "Numerical stats" ) )
assertEquals ( "function requireConfigJavaScript() { var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\n" + "var self = this;\\n" + "var requireConfigJavaScript = function() {\\
assertThat ( dto . isLegacyUser ( ) , is ( false ) )
assertTrue ( userCanReadBranch )
assertEquals ( base . plusDays ( 20 ) . withTime ( 11 , 0 , 0 , 0 ) , absoluteTime )
Assert . assertFalse ( handle )
assertEquals ( refPoint , testPoint )
assertNull ( e . abortShutdownReason ( ) )
assertEquals ( 0 , p . getThisPage ( ) )
assertNotNull ( ciudad )
Assert . assertTrue ( authenticator . logout ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertNull ( factory . newNameResolver ( null ) )
assertArrayEquals ( overwrite , readAllBytes ( gfs . getPath ( "/dir/file.txt" ) ) )
assertTrue ( exceptionTestResults . getInvoked ( ) )
assertEquals ( false , result )
assertEquals ( expectedResult , user )
assertEquals ( 3 , count )
assertThat ( sel , is ( datatype ) )
arrays . assertContainsOnly ( someInfo ( ) , actual , array ( "Luke" , "Yoda" , "Leia" , null ) )
assertThat ( JDBCAdapter . SQL_TIMESTAMP . from ( Moment . of ( 2012 , 7 , 1 , 0 , 0 , 0 ) . atZone ( ZoneId . systemDefault ( ) ) ) , is ( ts ) )
assertEquals ( rdiv , answer )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertSame ( createdBreaker , circuitBreaker )
assertNotNull ( parent )
assertFalse ( result . passedValidation ( ) )
assertThat ( encoded , containsString ( "{\\"linkId\\":\\"value123\\",\\"_linkId\\":{\\"extension\\":[{\\"url\\":\\"http://123\\",\\"valueString\\":\\"HELLO\\"}]}}" ) )
assertEquals ( objectName , expectedObjectName )
assertThat ( actualShardNumber , is ( 2 ) )
assertThat ( underTest . isValid ( new TestObj ( "parentRole" , Collections . singleton ( "childRole" ) ) , context ) , is ( false ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 " + "INNER JOIN table2 AS t2 " + "CROSS JOIN table3 AS t3 ON t1.c0 = t3.c0 ON t1.c0 = t2.c0" ) )
assertEquals ( "configName" , fixture . getConfig ( ) . getName ( ) )
assertSame ( "Mocked and unmodifiable chat service instances should be the same." , chatService , binder1 , binder2 )
assertTrue ( song1 . equals ( song2 ) )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_LONG ) )
assertEquals ( "IDX" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertNotNull ( out )
assertEquals ( "getHelper() returns the correct helper" , formatterHelper . getName ( ) , ( ( HelperInterface ) command . getHelper ( "formatter" ) ) . getName ( ) )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3, 1)) COLUMNS x integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( "1" , result )
assertEquals ( 33 , model . getValue ( ) )
Assert . assertEquals ( "Dove" , language . getShortCode ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( user , repoForEntityWithOnlyHashKey . findOne ( 1l ) )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertEquals ( typeDeclaration . toString ( ) , "public class Company extends de.test.SuperCompany {\\n}\\n" )
assertFalse ( actualBoolean )
assertEquals ( "jdbc:derby:0" , reader . getJdbcUrl ( ) )
Assert . assertEquals ( "ExacRecord [chrom=1, pos=13371, id=., ref=G, alt=[C], filter=[], " + "alleleCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], ALL=[0]}, " + "alleleHetCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], ALL=[0]}, " + "alleleHomCounts={AFR=770, AMR=134, EAS= 254, FIN=16, NFE=2116, OTH=90, SAS=5052, ALL=8432}, " + "alleleFrequencies={AFR=[0.0], AMR=[0.0], EAS=[0.0], FIN=[0.0], NFE=[0.0], OTH=[0.0], SAS=[3.95882818685669E-4], ALL=[2.3719165085388995E-4]}]" , record . toString ( ) )
assertNotNull ( expression )
assertEquals ( false , result )
assertEquals ( 10 , results . getTotal ( ) )
assertTrue ( epollID > 0 )
Assert . assertEquals ( 0.0 , a . minInColumn ( 0 ) , Vectors . EPS )
assertThat ( referenceSet . getReferencingAxioms ( ) , hasItem ( annotationAssertionAxiom ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_READ_LIMITED )
assertFalse ( "No upcoming information" , result . getParts ( ) . isEmpty ( ) )
Assert . assertEquals ( 1 , analysis . getErrors ( ) . size ( ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
assertSame ( result , notifier )
assertEquals ( expectedAst , ast . dump ( "" ) + "\\n" )
assertEquals ( "Item 1" , result )
assertEquals ( GOOD_API_KEY , response )
assertEquals ( exepcted_individual , returned_individual )
assertEquals ( "Permission type doesn't match" , expectedPerm , e . getPermission ( ) )
assertThat ( SpringFacesIntegration . isInstalled ( this . externalContext ) , is ( true ) )
assertEquals ( "x---><cfset/></cfcomponent>" , cfmlSource . getComments ( ) . toString ( ) )
assertEquals ( "Select with where clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertArrayEquals ( VALUE . toArray ( ) , dataItems . toArray ( ) )
Assert . assertFalse ( "file should not have been deleted" , result )
assertEquals ( "EventIngestionExecutor should never be null." , eventIngestionExecutor , null )
assertEquals ( true , classUnderTest . isFirstRun ( ) )
assertTrue ( timestamp2 - timestamp1 >= 100 )
Assert . assertEquals ( "aString" , prop . getPropertyName ( ) )
Assert . assertNull ( "No se deber�a haber encontrado la aplicaci�n" , aplicacion )
Assert . assertTrue ( subscriptionsGet . accept ( element ) )
org . junit . Assert . assertEquals ( 4 , count . get ( ) )
Assert . assertEquals ( expected , result )
assertEquals ( "_cat/indices/testIndex" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertAppearanceFontSize ( dest , 6.83f )
assertEquals ( 1 , test . call ( ) . intValue ( ) )
assertTrue ( "Failed to read correct position" , new String ( buf1 , 0 , buf1 . length ) . equals ( fileString . substring ( 1000 , 1010 ) ) )
assertStreamEquals ( expectedBackoffs , policy . toBackoffs ( ) )
assertSame ( conf , table . getConfiguration ( ) )
assertEquals ( 5. , serviceActivity . getEndTime ( ) , 0.01 )
assertEquals ( AuthorizationResult . ACCESS_GRANTED , permission . getResult ( ) )
assertEquals ( "coap://127.0.0.1:12354/lwm2m/3/0/1" , coapRequest . getURI ( ) )
this . assertLoadBlob ( departments , true , false )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertEquals ( false , result )
assertPayloadEqual ( payload )
assertEquals ( true , result )
Assert . assertTrue ( "Native cipher failed to load!" , loaded )
assertNotNull ( edm )
assertEquals ( ElasticsearchClient . class . getName ( ) , getClusterName ( client ) )
assertSseResponse ( sseResponse , "data:payload" )
assertEquals ( Patient . class , bundle . getEntry ( ) . get ( 0 ) . getResource ( ) . getClass ( ) )
Assert . assertNotNull ( e )
assertFalse ( "Last modified date is not present" , strategy . lastModified ( ) )
Assert . assertNotNull ( table )
assertNotNull ( IpAccessControlListMapping . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ALXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Picture not valid" , constraintViolations . size ( ) == 0 )
assertions . isEqualTo ( expected )
assertThat ( job . getOwner ( ) , is ( user ) )
Assert . assertNull ( "should have deleted description" , actualDescription )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertTrue ( info . isEmpty ( ) )
assertThat ( cf . parse ( "30. Februar, AD 1712 00:00 +02:00" ) , is ( PlainDate . of ( 1712 , 3 , 11 ) . atStartOfDay ( ) . at ( ZonalOffset . ofHours ( OffsetSign . AHEAD_OF_UTC , 2 ) ) ) )
assertEquals ( 0 , lineWriter . getTotalLineLength ( ) )
assertFalse ( matchResult )
assertEquals ( "fault-one" , f . getMessage ( ) )
assertEquals ( "overloaded double ss" , b . overload ( "double ss" ) )
assertNotNull ( john )
assertEquals ( 0 , Util . getResultsSize ( result ) )
assertSame ( filter , derive ( filter , "g:a:1" ) )
assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( "LanguageVersion must be Java 1.4!" , LanguageRegistry . getLanguage ( JavaLanguageModule . NAME ) . getVersion ( "1.4" ) , languageVersion )
assertEquals ( original , restored )
result . assertIsSatisfied ( )
assertEquals ( 2 , artists . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expectedSequenceLength , count )
assertEquals ( nodeReply , reply )
assertHasInterface ( interfaceClass , dst . toClass ( ) )
Assert . fail ( "Should not be able to send successfully with no recipients." )
result . assertIsSatisfied ( )
assertEquals ( 1 , patient . getIdElement ( ) . getExtension ( ) . size ( ) )
assertEquals ( 1 , constructors . length )
assertEquals ( lineOriginal , lineNew )
assertCommit ( writeTx . submit ( ) )
assertTrue ( order . hasSameOrderableAs ( otherOrder ) )
Assert . assertNull ( ex )
Assert . assertEquals ( "Stromgol" , lastName )
assertNotNull ( store )
assertEquals ( DataTypeManager . getArrayType ( DefaultDataClasses . ARRAY ) , c . getType ( ) )
assertEquals ( initialDate , dispatcher . getLastMeasurementHistory ( ) . getReferenceDate ( ) )
AssertAnnotations . assertTables ( jcas , posTags )
assertEquals ( "Both rich groups should be same" , richGroup1 , groupsManagerBl . convertGroupToRichGroupsWithAttributes ( sess , group ) )
assertResult ( )
assertEquals ( mode , acl . mMode )
assertEquals ( expResult , result )
assertTrue ( ! nnList . isEmpty ( ) )
assertEquals ( "14449" , ripper . getGID ( url ) )
Assert . assertEquals ( result . getResultSize ( ) , 0 )
assertNotNull ( s3PersistWriter )
assertEquals ( 2 , logs . size ( ) )
assertTrue ( delta < delay + overhead )
assertEquals ( "Literal" , shortForm )
Assert . assertTrue ( state [ i ] == expected )
assertTrue ( failedAsExpected )
assertEquals ( 10 , calculator . sub ( 5 , 5 ) , - 1 )
assertEquals ( Long . valueOf ( 123 ) , rp . getIdPartAsLong ( ) )
assertResultList ( target )
assertResult ( )
assertEquals ( expected , out )
assertEquals ( "Unexpected result" , "{\\n  key:\\"val\\">val</Key>\\n}" , sb . toString ( ) )
assertEquals ( PersonGenderCodeType . UNKNOWN , output . getRegularCPRPerson ( ) . getPersonGenderCode ( ) )
assertEquals ( "foo foa foo" , tagsRetrieved )
assertEquals ( TimeUtil . parseTime ( time , TimeUtil . TimeFormat . LONG_DATE_PATTERN_DOUBLE_SLASH ) , "2014\\\\11\\\\11 10:11:11" )
assertTrue ( latch . await ( 1 , TimeUnit . MINUTES ) )
assertEquals ( "aTestString" , classUnderTest . getSchema1 ( ) )
assertEquals ( "Signature validation failed." , message , output . getSignature ( ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Client byoc=\\"BYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\" method=\\"GET\\" sendDigits=\\"send_digits\\" statusCallback=\\"https://example.com\\" statusCallbackEvent=\\"initiated\\" statusCallbackMethod=\\"GET\\" url=\\"https://example.com\\">+15017122661</Client>" , elem . toXml ( ) )
UnitTestUtils . assertEquals ( "Kendall's correlation matrix" , createRealMatrix ( rData , 5 , 5 ) , correlationMatrix , 10E-15 )
assertEquals ( "select count(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( "Python action outputs are not as expected" , expectedOutputs , actualOutputs )
assertThat ( getDomainPresenceInfo ( dp , UID ) . getPodPresenceInfo ( pod ) , equalTo (PresenceInfo . EMPTY ) )
assertSame ( val , ConfigUtils . getObject ( config , val , "no-value" ) )
assertEquals ( "S (RN)" , pennTree )
assertEquals ( "Find all not returning a list with one reading descriptor" , 1 , readings . size ( ) )
assertThat ( domain . getSpec ( ) . isDomainHomeInImage ( ) , is ( false ) )
assertEquals ( "Ghost moved" , tileAt ( g , 1 , 0 ) , theGhost . getTile ( ) )
assertThatSerializedRawExtensionMessageCompliesWithRfc7250 ( )
assertEquals ( 2 , pairs . size ( ) )
assertThat ( renderer . score ( context , null ) , is ( 0 ) )
assertEquals ( "^aa$" , result )
assertThatSelectedTabIndexIs ( index )
assertEquals ( a1 , a2 )
assertEquals ( cleanWorkspaceRequired , CascadingUtil . getBooleanProjectProperty ( childProject , AbstractProject . CLEAN_WORKSPACE_REQUIRED_PROPERTY_NAME ) . getOriginalValue ( ) )
context . assertIsSatisfied ( )
Assert . assertNotNull ( dataTypeUtil )
Assert . assertFalse ( "Must be invalid" , signed . verify ( verifier ) )
Assert . assertEquals ( "Should return exactly one variable" , 1 , response . jsonPath ( ) . getMap ( "" ) . size ( ) )
Assert . assertTrue ( "瑙ｆ��姝ｅ父HTTP GET璇锋��ㄤ�" , 1 == rst )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
assertTrue ( isValid )
assertEquals ( zpk1 , zpk2 )
assertThat ( parseCompileEvaluate ( inputExpression ) , is ( mapOf ( entry ( "an applicant" , mapOf ( entry ( "first name" , "Edson" ) , entry ( "last name" , "Tirelli" ) ) ) ) ) )
assertTrue ( "no writeskew detected" , writeSkewEncountered . get ( ) )
assertThat ( classes . size ( ) , is ( 2 ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE UPPER(NAME(nodes)) = $literal" ) )
assertNotNull ( tree . context ( ) )
assertThat ( s . getInnerStatic ( ) , equalTo ( exampleObject ) )
Assert . fail ( )
assertThat ( streetAddressNumber , matchesRegularExpression ( "[0-9]+" ) )
assertThat ( sink . toString ( ) , is ( "Database" ) )
assertions . isNotEqualTo ( expected )
assertEquals ( ansi ( ) . bold ( ) . fg ( Color . RED ) . toString ( ) , str )
assertEquals ( "testuuid" , sut . transform ( "/blah/whatever/someversionhere_uuid_testUUID" ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( expected , trace )
assertEquals ( "toplevel" , m . getModelClass ( ) . getSimpleName ( ) )
assertEquals ( 10 , value . getK1Bitrate ( ) )
assertCollectionCanBeSerialised ( collection , TreSource . ExtendedHeaderData , 2 )
Assert . fail ( "Expect IllegalArgumentException" )
assertTrue ( wlsClusterConfig . hasDynamicServers ( ) )
Assert . assertEquals ( 0 , sFsShell . run ( "mount" , mountPoint . toString ( ) , ufsPath ) )
assertThat ( originalContent , is ( "out-of-the-box" ) )
assertTrue ( "Got " + function . getCallCount ( ) + ", expected 20 <= x <= 40" , 20 <= function . getCallCount ( ) && function . getCallCount ( ) <= 40 )
assertAccessorsCorrect ( menu , "selectedMenuItems" , Collections . EMPTY_LIST , Arrays . asList ( itemA , itemB ) )
assertNotNull ( audio )
assertEquals ( "12" , projection . getValue ( ) . getStringValue ( ) )
assertEquals ( 1 , droppedFigure . getDroppedCount ( ) )
assertEquals ( "V2 Composer" , wrapper . getComposer ( ) )
assertThat ( result , is ( ofpFlowAction . getClass ( ) ) )
assertEquals ( "test1,test2,test3" , res )
Assert . assertEquals ( "2011-11-01 00:00:00" , formater . format ( date . getTime ( ) ) )
assertNotNull ( result )
Assert . assertNotNull ( "The TestCases should not be null" , cases )
assertTrue ( "Walked too far astray: " + walk + "\\nNote: This " + "test will fail randomly about 1 in 100 times." , FastMath . abs ( walk ) < FastMath . sqrt ( N ) * 2.576 )
assertTrue ( "FromEntity empty" , constraintViolations . size ( ) == 1 )
assertEquals ( setSize , saved . getMaxEntitySize ( ) )
assertNotNull ( component )
assertFalse ( unit . isValid ( Money . of ( - 1 , "EUR" ) , null ) )
assertEquals ( "\\"NAME\\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertEquals ( exceptions , 4 )
assertThat ( escapeXml ( supportedSpecialCharacters ) , is ( "\\\\u0019\\\\u0020" ) )
assertEquals ( "Base value is not properly parsed" , "0" , parsed )
Assert . assertNotNull ( str )
assertEquals ( initialHeaderHeight , getHeaderHeight ( ) )
assertTrue ( "Certificate accepted as empty" , certificateAccepted )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( buttonMenuVM . getItemCount ( ) , 2 )
assertTrue ( entity . getCount ( ) == 3456789 )
Assert . assertEquals ( "" , result )
assertEquals ( Sets . newHashSet ( g . getEnd ( ) ) , g . getStart ( ) . getFollow ( ) )
Assert . assertTrue ( s . isEnabled ( ) )
assertEquals ( timeAmount . getQuantity ( ) , 11 )
Assert . assertEquals ( 4 , i )
assertTestRunFails ( testPlan )
assertEquals ( MemoryCacheStrategy . class , actual . getClass ( ) )
assertEquals ( expected , this . output . toString ( ) )
assertEquals ( "user1" , targetBean . getPrincipalName ( ) )
Assert . fail ( )
assertNotNull ( jdbc )
assertEquals ( ( float ) 8 , result . getFloatValue ( ) , 0.0 )
assertEquals ( "LOCAL:     \\nFrau\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null ) )
Assert . assertNotNull ( rawJSON )
assertEquals ( "N" , operator . getSourceProduct ( ) . getName ( ) )
assertEquals ( expected3 , actual3 )
Assert . assertEquals ( "2.0 kB" , actual )
assertThat ( robots . getDirectives ( ) , empty ( ) )
assertFalse ( "Document should contain metadata" , doc . hasContentField ( "test_pdf_metadata" ) )
assertEquals ( "Wrong number of variables in test case94" , 3 , variables . size ( ) )
Assert . assertEquals ( esperado , obtido )
assertEquals ( "Objects{integerValue=100}" , objects . toString ( ) )
checker . assertEquals ( msg , exp , act )
assertEventEqualAfterSerializeDeserialize ( purchaseAdvisedEvent )
Assert . assertNull ( p )
assertEquals ( 1 , result )
assertNull ( config . trace ( ) )
Assert . assertEquals ( "my name is \\"repodriller\\", man" , lines [ 0 ] )
assertResponseContainsExpectedPayload ( response , respPayload )
Assert . assertEquals ( null , _c . convert ( "" ) )
assertTrue ( scriptEngine . executeFilter ( msg ) )
assertEquals ( simple . getName ( ) , find . getName ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<rdf:RDF\\n" + "\\txmlns:rdf=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\">\\n" + "\\n" + "</rdf:RDF>" , descriptionFile )
assertCertificationMetadata ( assignment . getMetadata ( ) , SchemaConstants . MODEL_CERTIFICATION_OUTCOME_ACCEPT , singleton ( USER_ADMINISTRATOR_OID ) , singleton ( "administrator: no comment" ) )
Assert . assertFalse ( dependency1 . equals ( dependency2 ) )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
assertEquals ( mockResponse , response )
assertListTEquals ( listT , 42 )
assertThat ( weightedCucumberScenarios . scenarios , contains ( MatchingCucumberScenario . with ( ) . featurePath ( "simple_table_based_scenario.feature" ) . feature ( "Buying things - with tables" ) . scenario ( "Buying more widgets" ) . tags ( "@shouldPass" ) , MatchingCucumberScenario . with ( ) . featurePath ( "simple_table_based_scenario.feature" ) . feature ( "Buying things - with tables" ) . scenario ( "Buying more widgets" ) . tags ( ) ) )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertThat ( result , is ( Collections . singletonList ( "setMyField" ) ) )
assertTrue ( ! result )
Assert . assertEquals ( MEDITECHHandler . formatDateTime ( sortStringToList ( getElement ( "OBR.8" ) ) . get ( 0 ) ) , handler . getOrderStatus ( 0 , 0 ) )
assertEquals ( AnalysisWorkspace . AnalysisWorkspace . class , submission . getWorkflowType ( ) )
PositionCollectorTestUtil . assertEmpty ( collector2 )
assertThat ( result , equalTo ( false ) )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertThat ( conf . getTopologyName ( ) , equalTo ( "tcp://localhost:61616" ) )
assertThat ( array2 , equalTo ( new short [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) )
Assert . assertEquals ( 3 , qy . size ( ) )
assertEquals ( true , conn . isOpen ( ) )
assertTrue ( "Returned object should be a PredicatedSortedBag." , bag instanceof PredicatedSortedBag )
assertEquals ( "Johannes" , nameField . getValue ( ) )
assertFalse ( response . isSuspended ( ) )
assertEquals ( expecteds , actuals )
maps . assertContains ( description , actual , other )
assertEquals ( Arrays . asList ( new Point ( 0 , 0 ) , new Point ( 0 , 1 ) , new Point ( 1 , 1 ) , new Point ( 2 , 2 ) ) , s . findPath ( grid ) )
assertEquals ( expectedAwql , serviceQuery . toString ( ) )
assertThat ( jcache . size ( ) , is ( MAXIMUM ) )
assertEquals ( on ( 5 , 3 ) , next )
assertEquals ( new Integer ( "2147483647" ) , result )
assertArrayEquals ( ArrayConverter . hexStringToByteArray ( "001009746c733133206b657900" ) , expand )
assertMockEndpointsSatisfied ( )
assertEquals ( "ByteTally" , byteTally . getClass ( ) . getName ( ) )
assertThat ( cursor . proceedTo ( 'b' ) , is ( false ) )
assertEquals ( "T1" , out . get ( "T2" ) )
Assert . assertTrue ( foundVideo )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
assertEquals ( "foobar" , instance . getProperty ( element ) )
assertEquals ( result , expected , 0.0000001 )
assertDelete ( )
Assert . assertEquals ( "John" , customer )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "google" , "url description[url=google]url description[url=http://something]url[/url]" , defaultOptions ( ) ) )
assertTrue ( isConnected )
assertThat ( result . isCompletedExceptionally ( ) , is ( true ) )
assertEquals ( expected , actual )
assertTrue ( ok )
assertThat ( result . statusCode , is ( Response . NO_CONTENT ) )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expected , replacing . transform ( subject ) . getType ( ) )
assertTrue ( daNull . isEmpty ( ) )
assertNull ( bucket )
assertEquals ( expect , result )
assertEquals ( "Buffer[size=0]" , buffer . getBufferSize ( ) )
assertEquals ( 10 , atAct . get ( 0 ) )
assertTrue ( "random double (" + r + ") value has to be in the range [" + min + ", " + max + "]" , ( Double . compare ( r , min ) >= 0 ) && ( Double . compare ( r , max ) <= 0 ) )
assertTrue ( pool . isClosed ( ) )
Assert . assertEquals ( d1 , d2 )
assertThat ( subject . getFormattedKey ( ) . toString ( ) , is ( "[mntner] route: 10/8\\norigin: AS333\\n" ) )
assertEquals ( output , input )
assertTrue ( client . exists ( "/test1/test11/test112" ) )
strings . assertEqualsIgnoringCase ( mock ( Description . class ) , s , s )
assertEquals ( "test" , echo . echo ( "test" ) )
assertBreadcrumbsAreEqual ( actualResult , expectedResult )
Assert . assertTrue ( result )
context . assertNotNull ( ip )
assertThat ( readedValue , is ( value ) )
assertFalse ( collector . isMessageComplete ( ) )
assertEquals ( true , result )
assertEquals ( "Hello" , result )
assertThat ( date , is ( expected ) )
assertTrue ( "The system realm should be created" , ops . exists ( TEST_FILESYSTEM_REALM_SYSTEM_ADDRESS ) )
assertOutputContains ( "you are not connected" )
assertFalse ( Files . exists ( child ) )
assertEquals ( "/order/" + PROVIDER_ID , rc . getPath ( ) )
testContext . assertEquals ( INTERNAL_SERVER_ERROR . getCode ( ) , cause . getCode ( ) )
assertions . isLessThan ( new Integer ( 2 ) )
assertThat ( matches . size ( ) , is ( 1 ) )
Assert . assertTrue ( validator . validate ( ) )
assertTrue ( exceptionThrown )
assertNotNull ( actual )
assertEquals ( "Must return self" , sut , result )
assertEquals ( 2 , fixture . getValue ( ) )
assertEquals ( expected , actual )
assertThat ( allEvents . stream ( ) . skip ( position ) . limit ( events . size ( ) ) . collect ( toList ( ) ) , containsInOrder ( events ) )
assertEquals ( mboss . getCar ( ) . getBrand ( ) , "缇�浜鸿惫" )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'\\\\'true\\\\'',h:'\\\\'123\\\\''}" , r )
assertEquals ( assertion , array )
Assert . assertEquals ( "beeline --showHeader FAILED. \\n" + results . get ( "outputStream" ) , false , consoleMsg . contains ( "set show header to false to show" ) )
Assert . assertEquals ( result . getResultSize ( ) , 0 )
Assert . assertEquals ( "You are second person." , result )
assertTrue ( subNodes . get ( 0 ) . get ( CyNetwork . SELECTED , Boolean . class ) )
Assert . assertEquals ( "Invalid csv line" , "1,DEVICE0,METRIC0,0,20150203235809-0500,UNDEFINED,1,13.31" , line )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertNotNull ( certificate )
assertEquals ( expectedDDL , ddl )
assertEquals ( "Message: [request.minor]" , ResponseBodyInterpolator . interpolate ( "Message: [request.minor]" , req ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . getPatientByExternalId ( "Neuro123" ) )
Assert . assertEquals ( config . getDecodeHook ( ) . getClass ( ) , RequestDecodeHook . class )
Assert . assertEquals ( 0 , connectionManager . getConnectionDetailsByScheme ( TestConnectionProvider . SCHEME ) . size ( ) )
assertTrue ( "Comparator did not reorder the List correctly" , orderedList . equals ( randomList ) )
assertTrue ( serializedNetwork . isStarted ( ) )
assertNull ( map . findPrev ( null , null , null , Pattern . compile ( Pattern . quote ( "cury" ) ) , true , null ) )
assertEquals ( result , "busybox" )
assertNotNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
test . assertValue ( expected )
assertTest1 ( )
assertEquals ( "development" , value )
assertEquals ( "text/html" , requestImpl . accepts ( "test/test" , "text/html" ) )
assertEquals ( 3 , result )
assertEquals ( "Billie" , result )
assertResourceWasAdaptedToModel ( )
assertEquals ( "TheSun angel and the view angle must be zero." , 0 , corrOzone )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 3155692597470L * 3L ) ) )
assertEquals ( "value1" , ( ( TextValue ) value1 ) . getValue ( ) )
assertBrownGCD ( gcd , a , b )
assertArrayEquals ( expectedObjects , array )
assertEquals ( NOT_DECODED , object , new ColorTransform ( decoder , context ) )
Assert . assertEquals ( rel . getEndNode ( ) , nodes . iterator ( ) . next ( ) )
assertEquals ( 10 , classUnderTest . getIndex ( ) )
assertThat ( range , hasItems ( new HexRange ( "0" , "7" ) , new HexRange ( "8" , "F" ) ) )
Assert . assertEquals ( Arrays . toString ( new int [ ] { 0 , 2 , 2 , 2 } ) , Arrays . toString ( this . getCounts4 ( ) ) )
assertArrayEquals ( data , ( int [ ] ) deserialize . readObject ( int [ ] . class ) )
assertThat ( propertyValues , Matchers . hasItem ( PropertyAnnotationValue . get ( propertyData , iriData , State . ASSERTED ) ) )
testRunner . assertAllFlowFilesTransferred ( PutCassandraQL . REL_FAILURE , 1 )
assertTrue ( AutnumUtil . isValidAutnum ( validAutnum ) )
Assert . assertTrue ( exception )
assertEquals ( "Rewritten command was not expected" , rewritProc , procReturned )
assertTrue ( ! states . isEmpty ( ) )
assertThat ( domain , is ( notNullValue ( ) ) )
assertEquals ( testId , song . getId ( ) )
assertEquals ( trend [ i ] , 1.0e-13 )
assertSame ( name , expected , ASN1Type . fromName ( name ) )
assertEquals ( "12345678910" , pn . getNumber ( ) )
assertJobExecutorWaitEvent ( 0 )
assertFalse ( sut . isEnabled ( ) )
objects . assertIsInstanceOfAny ( mock ( Description . class ) , actual , null )
assertEquals ( true , isOpened )
assertNotNull ( result )
assertFalse ( target1 . equals ( target2 ) )
assertEquals ( 0L , pipeline . getTotalBuildTime ( ) )
assertEquals ( 3 , filterStrings . size ( ) )
assertNotNull ( serviceConf )
Assert . assertEquals ( 0 , testHelper . snapshotAfterMigration . getVariables ( ) . size ( ) )
assertThat ( response , containsString ( "<object type=\\"person\\">AS102</object>" ) )
assertNull ( result )
Assert . assertEquals ( "Value is incorrect" , map ( "3141-05" , "test" ) , value )
assertEquals ( "MurmurHash.hash(String) returns wrong hash value" , expectedHash , actualHash )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
Assert . fail ( "Expect class java.sql.Date to be a class subclass of java.sql.Date" )
assertTrue ( result . contains ( "CURRENT LOG APPENDER" ) )
assertTrue ( temp . delete ( ) )
assertThat ( actual , hasSize ( 10 ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertEquals ( "999999999999.99" , produto . getValorTotalBruto ( ) )
assertEquals ( "testing" , param . getValue ( ) )
assertEquals ( version . getDescription ( ) , "First Full Functional Build" )
assertThat ( converted , equalTo ( expected ) )
Assert . assertSame ( EDIT_ACCESS , this . component . getAccessLevel ( this . entity , COLLABORATOR ) )
assertNull ( newProxyInstance )
Assert . assertEquals ( expected , component )
assertEquals ( DependendencyStatus . UNKNOWN , oracle . assess ( access ( "foo" , "bar" ) ) )
assertTrue ( predicate . test ( pickle ) )
context . assertIsSatisfied ( )
assertEquals ( "Number of threads is not set correctly." , numThreads , ThreadsEngine . getNumberOfThreads ( ) , 0 )
assertEquals ( s , cons )
Assert . assertTrue ( true )
assertThat ( listeners , is ( nullValue ( ) ) )
assertEquals ( expected , f . format ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n" + "<dummyNode eh=\\" 'a &> b&quot; \\" foo=\\"bar\\" ohio=\\"4\\">\\n" + "    <dummyNode o=\\"ha\\" />\\n" + "    <dummyNode />\\n" + "</dummyNode>\\n" , out . toString ( ) )
assertEquals ( "FOO" , unit . getConfiguration ( "FOO" ) )
Assert . assertTrue ( contains )
Assert . fail ( "Should have thrown exception" )
Assert . assertTrue ( irodsFile . canRead ( ) )
assertEquals ( PduType . PUBUN , request . getPduType ( ) )
assertEquals ( "Select with descending order by" , expectedSelectOrderByNullsLastDesc ( ) , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( dto , dto2 )
assertNull ( "Intersection between lines is incorrect" , pi )
assertEquals ( 119999L , m . getLastMillisecond ( ) )
assertTrue ( rec_cnt == 4 )
assertEquals ( "\\"2014-03-10T23:32:47+00:00\\",42,hello\\n" , csv )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expected , actual )
assertTrue ( PureEvaluator . isUnpureCacheEmpty ( ) )
assertEquals ( model , actual )
Assertions . assertTrue ( result )
assertThat ( new JcrValue ( factories , PropertyType . LONG , 0L ) . getDate ( ) . getTimeInMillis ( ) , is ( expectedValue . getTimeInMillis ( ) ) )
Assert . assertEquals ( 0 , memberships . size ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
Assert . assertTrue ( context . getResult ( ) )
assertEquals ( 10 , rpt . getEventCount ( ) )
Assert . assertTrue ( Arrays . equals ( new int [ ] { 1 , 0 } , this . getCounts1 ( ) ) )
Assert . assertEquals ( 400 , response . getStatus ( ) )
Assert . assertEquals ( false , config . isDebug ( ) )
assertEquals ( expectedMsg , faultSoap12 )
assertEquals ( "DebugClassLoading" , false , config . isDebugClassLoading ( ) )
assertEquals ( Wires . fromSizePrefixedBlobs ( bytes ) , results )
assertEquals ( 404 , ( int ) caller . getSentError ( ) )
Assert . assertEquals ( options . getTargetPath ( ) , new Path ( "hdfs://localhost:8020/target/" ) )
assertThat ( "Combined vars" , IteratorUtils . transformedIterator ( combined . iterator ( ) , VarDef :: getPathName ) , visitsMembers ( "Color.Hue" , "Color.Hue" , "Color.Hue" , "Shape" ) )
Assert . assertEquals ( 100. , tdCosts . getTransportTime ( loc ( "from" ) , loc ( "to" ) , 0. , null , null ) , 0.01 )
Assert . assertArrayEquals ( expected , values )
assertThat ( getServers ( ) , empty ( ) )
Assert . assertEquals ( "\\"name=name\\" \\"event_id=event-id\\" \\"key=129\\"" , event . toString ( ) )
Assert . assertArrayEquals ( b , a , MathUtils . EPSILON )
assertEquals ( "ñòó" , result )
assertThat ( extractMonitorables ( histogramAdapter ) . get ( COUNT ) . get ( ) , Matchers . < Object > is ( newCount ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( 1 , i . intValue ( ) )
assertEquals ( host , authscope . getHost ( ) )
assertTrue ( registry . getMonitorables ( ) . isEmpty ( ) )
assertTrue ( failedAsExpected )
assertEquals ( expected , filterAclEntriesByAclSpec ( existing , aclSpec ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1_WITH_REALM_AND_SUFFIX , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1_WITH_REALM_AND_SUFFIX , CORRECT_PASSWORD , SC_OK ) )
assertEquals ( expResult , result )
assertThat ( unescaped , is ( "\\\\thello\\\\nworld\\\\x" ) )
assertGridIndexes ( data , new boolean [ ] { false , true , true , true } , new boolean [ ] { false , false , false , false } , new Expected [ ] [ ] { { Expected . build ( false , 1 , true ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true
assertEquals ( "test" , echo . echo ( "test" ) )
assertFalse ( constraint . fulfilled ( iContext ) )
assertEquals ( 4.0 , median , 0.0000001 )
assertSame ( listener . getEvent ( ) , null )
Assert . assertEquals ( datahoraRecebimento , dados . getDatahoraRecebimento ( ) )
Assert . assertEquals ( "1" , eventoCancelamento . getIdLote ( ) )
Assert . assertEquals ( 0.0 , a . transposeMultiply ( b ) . subtract ( a . transpose ( ) . multiply ( b . transpose ( ) ) ) . getNorm ( ) , 1.0e-15 )
assertEquals ( "" , result )
assertThat ( IntraDayDate . getDate ( ) , equalTo ( dateTime ) )
assertThat ( certList , is ( context . getClientCertificateTypeDesiredTypes ( ) ) )
assertThat ( retrieved , isPresent ( infoEquals ( 2 ) ) )
Assert . assertTrue ( "occurrence had ID!" , occ . getItemIdentifiers ( ) . isEmpty ( ) )
Assert . assertEquals ( "0" , prefix . getPrefix ( ) )
Assert . assertFalse ( "user should not have access to collection" , actual . hasAccess ( ) )
assertE ( "�尖�尖�尖�尖�尖��" + "��    ��" + "��    ��" + "��    ��" + "��    ��" + "�尖�尖�尖�尖�尖��" )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertEquals ( content + "\\n" , result )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( 0 , content . refCnt ( ) )
assertThat ( isEquals , is ( true ) )
Assert . assertEquals ( "{\\"queue\\":\\"WQXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\",\\"expression\\":\\"1==1\\",\\"priority\\":54,\\"timeout\\":30,\\"order_by\\":\\"worker.english_level ASC\\",\\"skip_if\\":\\"workflowrules.loaded == 0\\"}" , target . toJson ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( expectedSize , size )
assertEquals ( "SELECT *\\nWHERE {\\n  ?s ?p ?o .\\n}\\n" , processed )
assertThat ( converters . existsFor ( MyConverter . class ) , is ( true ) )
Assert . assertNull ( oembedService . executeRequest ( request ) )
assertFalse ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertDeletedIDs ( expDeletedIIDs , deletedLinkIDs )
assertNull ( p )
assertEquals ( expected , d_meas . toString ( ) )
assertEquals ( 2 , collectorManager . collectorsByCorrelationId . size ( ) )
assertTrue ( flipConditionEvaluator instanceof DefaultFlipConditionEvaluator )
assertTrue ( "actions should have triggered" , actionsTriggered . get ( ) )
Assert . assertEquals ( expectedDate , conceptSource . getDateCreated ( ) )
assertNotNull ( injector )
assertThat ( proxy . wasCalled ( ) , is ( true ) )
assertEquals ( HttpStatus . SC_OK , response . getStatus ( ) )
assertXmlMarshaling ( referenceObjectBinding , XML )
assertNotNull ( initializer )
ctx . assertEquals ( 0 , records . size ( ) )
assertTrue ( details . hasCancelled ( ) )
assertSame ( hello . getIterationStrategyStack ( ) . get ( 0 ) , uriTools . resolveUri ( HELLO_URI . resolve ( "iterationstrategy/0/" ) , wfBundle ) )
assertEquals ( 1 , dao . getAll ( ) . size ( ) )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEqualsIgnoreLineEnding ( output , "{\\n" + "  \\"username\\" : \\"bob\\"\\n" + "}" )
assertThat ( "Expceted principal not found" , rmap , hasItem ( KERMIT_PRINCIPAL ) )
assertEquals ( 1 , semaphores . getReady ( ) . tryAcquire ( 2 , SEMAPHORE_WAIT , TimeUnit . SECONDS ) )
assertEquals ( 2 , prtition_num )
assertNotNull ( entityGroup )
Assert . assertEquals ( "{\\"universe\\":0,\\"time\\":0,\\"uuid\\":1,\\"data\\":{\\"name\\":\\"MySmartCity\\",\\"districts\\":[2,4]}}\\n" , buffer . toString ( ) . replaceAll ( "\\r\\n" , "\\n" ) )
assertThat ( config . getFailTopic ( ) , is ( "y" ) )
assertTrue ( "Match should have succeeded." , match )
assertTrue ( output , output . contains ( "The command-timeout must be a valid positive integer" ) )
Assert . assertEquals ( 2 , ( ( Number ) o ) . intValue ( ) )
assertEquals ( Action . SUCCESS , action . execute ( ) )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( "{\\"outgoingClient\\":{\\"clientName\\":\\"CL123\\",\\"params\\":{\\"foo\\":\\"bar\\"}}" , TemplateUtils . generate ( scope , params ) )
assertNull ( "null rowsorter initially, was: " + table . getRowSorter ( ) , table . getRowSorter ( ) )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertNull ( mergeReport )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {}, \\"timers\\": {}}" , bson . toJson ( writerSettings ) )
assertNull ( val )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
assertEquals ( expResult , result )
assertNotNull ( objJPAEdmProperty . getJPAAttribute ( ) )
Assert . assertEquals ( THIRTEEN_BYTE , pi . getThirteenByte ( ) )
assertEquals ( "{'some':'data'}" , json . toString ( ) )
assertThat ( baseStepListener . getDriver ( ) , is ( nullValue ( ) ) )
assertEquals ( new Date ( pastDate ) , job . getNextRun ( ) )
assertNull ( previous )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( asList ( "a.b.c" ) , toml . getList ( "a.b.c" ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertTrue ( FlowDifferenceFilters . FILTER_ADDED_REMOVED_REMOTE_PORTS . test ( flowDifference ) )
assertFalse ( "No keywords found" , result . isEmpty ( ) )
assertEquals ( rows , sorter . getViewRowCount ( ) )
assertEquals ( expResult , result )
assertNotNull ( source )
assertTrue ( simplePut ( keyEquiv ( 54321 ) , valEquiv ( 54321 ) ) )
assertOut ( "/**\\n * @constructor\\n * @implements {custom.TestInterface}\\n * @implements {custom.TestOtherInterface}\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
assertEquals ( 0 , acquiredTriggers . size ( ) )
assertEquals ( out , frame2 )
assertTrue ( instance . errorTextArea . getText ( ) . equals ( "" ) )
assertThat ( readBytes ( testee ) , is ( "World|!" ) )
assertEquals ( geo , expResult )
assertValueModelFires ( model , interval , expected )
assertArrayEquals ( content , readContent )
assertEquals ( 9 , fattest . getMax ( ) )
Assert . assertArrayEquals ( expected , result )
assertThat ( age , notNullValue ( ) )
assertThat ( plugin . getClass ( ) , is ( equalTo ( HtmlFormatter . class ) ) )
assertEquals ( PCEPErrors . UPDATE_REQ_FOR_NON_LSP , this . errorsSession2 . get ( 0 ) )
assertTrue ( "value was " + Arrays . toString ( target ) , Arrays . equals ( expected , target ) )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( PermissionsValidator . ERROR_CODE_ADMIN_TYPE ) )
Assert . assertEquals ( "Hello world!" , wire . bytes ( ) . readUtf8 ( ) )
assertEquals ( "motor" , reply . getOrderId ( ) )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( 2 , resultList . size ( ) )
assertFalse ( fail )
assertEquals ( "Passed collection not empty" , 0 , list . size ( ) )
assertNull ( tr . findCertInfo ( createCert ( true , "BISCUITS" ) ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( number , i )
Assert . assertTrue ( errors . hasFieldErrors ( "winner" ) )
assertThat ( result , is ( new byte [ ] { 0x41 , 0x30 , 0x01 , 0x0a } ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertThat ( items , arrayWithSize ( 0 ) )
assertTrue ( resultFound )
assertThat ( issues , hasItems ( "#123, #456, #789" ) )
assertArrayEquals ( location , referenceFloorOffset )
assertEquals ( "Power" , powers . get ( 0 ) )
assertEquals ( 0.6667 , result , 0.8 )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( 0 , patterns . size ( ) )
assertEquals ( "2005-10-11T10:00:00.5" , v . getStringValue ( ) )
Assert . fail ( "DalRuntimeException expected" )
assertThat ( attributes , contains ( new Attribute ( "members" , "AS1" , null , "aut-num" , new Link ( "locator" , "http://localhost/lookup/TEST/aut-num/AS1" ) , null ) , new Attribute ( "members" , "AS2" , null , "aut-num" , new Link ( "locator" , "http://localhost/lookup/TEST/aut-num/AS2" ) , null ) , new Attribute ( "members" , "AS3" , null , "aut-num" , new Link ( "locator" , "http://localhost/lookup/TEST/aut-num/AS3" ) , null ) ) )
Assert . assertNull ( queue . removeHead ( 0 ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertSame ( toTest , toTest . setMethodsRetryHandler ( RetryHandler . class ) )
assertEquals ( out . readableBytes ( ) , 0 )
assertTrue ( orgToCreate . getId ( ) != null )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Invalid SOAPMessage" , SOAPMessage . SOAPMessageType . SOAPMessage , response . getSOAPMessageType ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertFalse ( conceptService . getDrug ( uuidOfDrugToCheck ) . isRetired ( ) )
assertFalse ( validator . isValid ( resource , MetadataSection . METHODS_SECTION ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertEquals ( "Wrong number of nodes" , 2 , c2 . getNodes ( ) . size ( ) )
Assert . assertEquals ( node , r . get ( "node" ) )
assertNotNull ( EndUserType . reader ( ) . read ( ) )
Assert . assertNotNull ( out . getD6 ( ) )
assertNull ( extractor )
assertNotNull ( state )
Assert . assertEquals ( 100 , terminatedAfter )
assertOperation ( ( ) -> roleClient . getRepository ( SPACE_NAME , name ) )
assertEquals ( 654321 , wsss . getReceiveBufferSize ( ) )
PSLTest . assertModel ( dataStore , input , expected )
assertEquals ( HttpURLConnection . HTTP_NOT_FOUND , connection . getResponseCode ( ) )
assertEquals ( 3 , count )
assertThat ( table . asString ( ) , equalTo ( tableAsString ) )
assertTrue ( FlagDelegate . isVisited ( ) )
Assert . assertEquals ( 5 , set . size ( ) )
Assert . assertFalse ( "isRequestSupported should return false" , adapter . isRequestSupported ( request ) )
Assert . assertTrue ( threadPoolConfig . getQueue ( ) instanceof SynchronousQueue )
Assert . assertNull ( result . getFirstHeader ( "Date" ) )
Assert . assertFalse ( "failure - expected numbers to be diff" , CMC . equals ( CMC2 ) )
assertions . doesNotContain ( expected )
context . assertIsSatisfied ( )
assertTrue ( columnDifference . execute ( ) )
assertEquals ( Double . doubleToLongBits ( resultKthSelector ) , Double . doubleToLongBits ( resultSort ) )
Assert . assertEquals ( "Expected no rights" , ADMIN_AUTHS , auths )
assertNotNull ( uploadResult )
assertEquals ( "2012-01-02" , date . getValueAsString ( ) )
assertThat ( numFound ( query ( "q=company" ) ) , is ( 1L ) )
assertThat ( actual , is ( expected ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "Message is not correct" , msg , new LogMessage ( "m {0}, {1}, {2}, {3}, {4,number,#.00}, {5} {foe}" , "Channel 01" , new Object [ ] { "Foo" , "{abc}" , "" , null , 123 } , LogLevel . DEBUG ) )
assertEquals ( "������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������
Assert . assertEquals ( "someHost" , requestImpl . get ( "Host" ) )
Assert . assertEquals ( false , retval )
Assert . assertNotNull ( ff4j )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
Assert . assertNull ( caixa )
assertEquals ( ConfigClass .storm , mockStormApplication . getConfigClass ( ) )
assertEquals ( "getField1" , name )
assertDtoAndMapConstructorAreSame ( 1 )
assertions . doesNotHaveDuplicates ( )
assertE ( "�尖�尖�尖�尖�尖�尖��" + "��      ��" + "��   ��  ��" + "��      ��" + "��       ��" + "�尖�尖�尖�尖�尖�尖�尖��" )
assertEquals ( tenantId , connection . getClientInfo ( PhoenixRuntime . TENANT_ID_ATTRIB ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( component . getStyleName ( ) , "style1 style2" )
Assert . assertTrue ( got . contains ( "Created device: {" ) )
assertEquals ( expected , actual )
assertTrue ( loader . getSchemas ( ) . contains ( SmSchemaManager . class ) )
assertThat ( "addOpened" , localRepo . getOpened ( ) , is ( true ) )
assertTrue ( true )
Assert . assertTrue ( deadLockDetected . get ( ) )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , false , "test" , null ) . property ( "fubar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "bar" , false , "bar" , true , "fubar" , null ) . property ( "
assertEquals ( "Expected version to be equal" , expected , version )
assertEquals ( "http://127.0.0.1:8080/cluster/test" , mappings . loadUrl ( metaStore , testNcName , null ) )
assertEquals ( "Link type was incorrect." , "http://www.effektif.com/" , link . toString ( ) )
assertTrue ( processor . canProcessEvent ( event ) )
assertTrue ( expectedMaxPoolingActivation . compare ( poolingActivation , TOLERANCE ) )
assertThat ( restfulServerConfig . getPort ( ) , is ( Integer . parseInt ( getValue ( EnvironmentArgument . PORT ) ) ) )
assertTrue ( prefs . matches ( t ) )
Assert . assertEquals ( expected , MessageFormatter . format ( message , "p1" , "p2" , "p3" , "p4" , "p5" ) )
assertEquals ( "Unexpected read concern" , ReadConcern . DEFAULT , clientOptions . getReadConcern ( ) )
assertEquals ( expected , printer . toString ( ) )
assertEquals ( 2 , removeEmpty . size ( ) )
assertEquals ( ".outer { margin: 2px; }" , normalize ( css ) )
Assert . assertEquals ( 1 , compareResult )
assertEquals ( 20 , header . getCallID ( ) )
assertEquals ( actual , expected , "Wrong substitution" )
assertTrue ( cli . isConnected ( ) )
assertEquals ( rs2 , rs )
Assert . assertEquals ( expectedResult , resultString )
Assert . assertNull ( testPatientData )
assertThat ( tuple . getSetOrEmpty ( "field" ) . size ( ) , equalTo ( 0 ) )
assertThat ( buf . size ( ) , is ( 0 ) )
assertEquals ( expectedMessage , result )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( oldbb , bb )
assertEquals ( code , extension . getExtension ( ) . getCode ( ) )
assertEquals ( expected , actual )
assertEquals ( "[Function released]" , v8Object . toString ( ) )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 1200: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 1200 )
assertEquals ( 1 , fired )
assertXMLStringsEquals ( "<Root>\\n" + "    <X>\\n" + "       <Y>Passed</Y>\\n" + "    </X>\\n" + "   <Child>Value</Child>\\n" + "</Root>\\n" , test . toString ( ) )
assertFalse ( violation )
assertEquals ( con . hashCode ( ) , fp . hashCode ( ) )
assertNull ( actual )
Assert . assertEquals ( expected , component )
assertThat ( defn , is ( nullValue ( ) ) )
assertEquals ( 3 , anchors . size ( ) )
N4CliHelper . assertExpectedOutput ( "functionFromModuleA\\n" + "variableFromModuleB\\n" + "variableFromModuleC\\n" + "variableFromModuleC" , out )
Assert . assertEquals ( 200 , newMergedRecord . getIncomingTransferSsl ( ) )
assertEquals ( packet , p )
Assert . assertNotNull ( target )
assertEquals ( "Condition evaluates to false" , false , condition . evaluate ( ) )
assertFalse ( Boolean . FALSE . equals ( value ) )
assertEquals ( expResult , result )
assertEquals ( "The Norwegian people of the Norwegian people have a problem with counting theKing." , expectedNumber , numberOfItems )
assertThat ( studies . size ( ) , is ( 1 ) )
assertEquals ( set , new HashSet < ResourceComponent > ( set ) )
Assert . assertSame ( item , inventoryItems . get ( 0 ) )
assertThat ( reader . nextKeyValue ( ) , is ( false ) )
assertEquals ( 100 , getCache ( provider , "bar" ) . capacity )
Assert . assertTrue ( evaluator . hasPermission ( authentication , targetId , targetType , permission ) )
assertions . isNotEmpty ( )
assertTrue ( isTransposed ( m ) )
assertEquals ( sentryPrivilege . getDbName ( ) , sentryStore . listSentryPrivilegesByUsersAndGroups ( Sets . newHashSet ( roleName ) , Sets . newHashSet ( userName ) , new TSentryActiveRoleSet ( true , new HashSet < > ( ) ) , null ) )
assertDateEquals ( dateTime , result )
Assert . assertEquals ( Type . High , type )
assertNull ( info )
assertTrue ( "user in admin group should have access" , val )
Assert . fail ( "Can't cd into a non-existing nodepath." )
assertStat ( result )
assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . NOW )
assertEquals ( result , toTypedExpression ( "this.getSomeB()#ICB.onlyConcrete() " , ICA . class ) . getExpression ( ) . toString ( ) )
assertEquals ( 2 , response . getReturn ( ) . size ( ) )
assertEquals ( "Method #toString is wrong" , "PrefixCondition{boost=0.5, field=name, value=tr}" , condition . toString ( ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , postgresFeedSource . getEntry ( getEntryRequest ) . getResponseStatus ( ) )
arrays . assertContains ( description , null , array ( "Yoda" ) )
assertEquals ( "UnsubscribeMessage" , encode ( msg ) )
assertFalse ( strategy . isCrawable ( url , 2 ) )
assertEquals ( "JSON Form" , result , json . toString ( ) )
Assert . assertNotNull ( mediaId )
assertDepth ( right , rightSource , 2 )
assertTrue ( "The word " + s . getStringText ( ) + " is not found in the dictionary." , wordsFedFound )
Assert . assertTrue ( fallbackRan )
assertFalse ( query ( ) . from ( cat ) . where ( cat . kittens . any ( ) . id . in ( ids ) ) . select ( cat ) . fetch ( ) . isEmpty ( ) )
assertEquals ( "chrome" , result . getUserAgent ( ) )
Assert . assertEquals ( "Invalid output with XML" , TransformXMLTestHelper . TEST_XML , output )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( decompressFlag , methodCalled . get ( 0 ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( "check only root plugins" , _plugins , Collections . emptySet ( ) )
Assert . assertEquals ( "value~~~~~~~" , value )
Assert . assertEquals ( deleteCategory . getChildren ( ) . size ( ) , 1 )
assertAnnotationCompletions ( "@Value(\\"#{345${spring.prop1}<*>}\\")" )
assertArrayEquals ( ordered , result . toArray ( new String [ result . size ( ) ] ) )
assertTrue ( op . getValue ( ) instanceof WhenTaken )
Assert . assertTrue ( "It should return Parameter Values" , Arrays . equals ( values , parameterValues ) )
tester . assertRenderedPage ( HomePage . class )
assertThat ( text ( written ) , is ( "a\\tb\\n" ) )
assertEquals ( "/t/test" , templateUri . toString ( ) )
assertEquals ( 5445 , result )
assertEquals ( 0 , reasoned . getAxiomCount ( ) )
testRunner . assertNotValid ( )
assertEquals ( refPoint , testPoint )
assertEquals ( "value" , call . getArgument ( 0 ) )
Assert . assertTrue ( module . register ( KualiModuleService . class ) )
assertEquals ( result , domainRoles )
assertEquals ( 1 , ( ( ObjectWithOptions2 ) ( ( ObjectWithOptions ) options . optOp ) . optionsOp ) . value )
CONTEXT . assertIsSatisfied ( )
assertEquals ( 0.0 , epsilon . evaluate ( front ) , EPSILON )
assertThat ( orchestrator . getStarted ( ) , is ( false ) )
assertTrue ( testModelView instanceof MyModelViewWithDefaultConstructor )
assertEquals ( "PluginClassLoader should have inherited class" , pd1 , pd2 )
assertEquals ( Integer . valueOf ( 2 ) , deque . getLast ( ) )
assertEquals ( "a\\tb\\tc\\td\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\
assertEqualDoubleArrays ( pymin , min , epsilon )
assertEquals ( MyMedication . class , mo . getContained ( ) . getContainedResources ( ) . get ( 0 ) . getClass ( ) )
Assert . assertFalse ( subscriptionsGet . accept ( element ) )
assertThat ( testValues , is ( expectedValues ) )
assertEquals ( expectedContainers , actualContainers )
assertThat ( parsed . properties ( ) , hasSize ( 0 ) )
assertEquals ( "duzentos inteiros" , actual )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<samlp:Response Consent=\\"urn:oasis:names:tc:SAML:2.0:consent:unspecified\\" Destination=\\"https://samlcent/Shibboleth.sso/SAML2/POST\\" ID=\\"_fd601e21-5f81-469e-88c7-da72dccf1357\\" InResponseTo=\\"_545e60fe3602a06d25f241b622c5a773\\" IssueInstant=\\"2015-04-06T06:42:39.213Z\\" Version=\\"2.0\\" xmlns:samlp=\\"urn:oasis:names:tc:SAML:2.0:protocol\\"><Issuer xmlns=\\"urn:oasis:names:tc:SAML:2.0:assertion\\">http://SAMLWIN.saml.lan/adfs/services/trust</Issuer><samlp:Status><samlp:StatusCode Value=\\"urn:oasis:names:tc:SAML:2.0:status:Success\\"/></samlp:Status><Extensions><Assertion ID=\\"_f27d6403-32f3-45ec-8b24-8b2fb4ca99b0\\" IssueInstant=\\"2015-04-06T06:42:39.212Z\\" Version=\\"2.0\\" xmlns=\\"urn:oasis:names:tc:SAML:2.0:assertion\\"><Issuer>http://SAMLWIN.saml.lan/adfs/services/trust</Issuer><Subject><SubjectConfirmation Method=\\"urn:oasis:names:tc:SAML:2.0:cm:bearer\\"><SubjectConfirmationData InResponseTo=\\"_545e60fe3602a06d25f241b622c5a773\\" IssueInstant=\\"2015-04-06T06:42:39.213Z\\" Version=\\"2.0\\" xmlns=\\"urn:o
assertEquals ( instance . expectedFalsePositiveProbability ( ) , ratio , 0.01 )
assertEquals ( content , request . getResponseContent ( ) )
assertThat ( logRecords , containsInfo ( testFacade . getServiceCreateLogMessage ( ) ) )
assertEquals ( "Should have failed due to software version mismatch" , ive . getMessage ( ) , "This is a configuration configuration configuration." )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "Should return a serialized point" , TestVectors . ALICE_PUBLIC_KEY , mult )
Assert . assertEquals ( message . getSessionId ( ) , this . session . getId ( ) )
Assert . assertFalse ( pti . equals ( null ) )
assertTrue ( isValid )
assertGameOver ( )
assertTrue ( "Configurable sasl server factory should be created" , ops . exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertions . isLessThan ( 10f )
assertEquals ( 10 , nn . getVec ( ) . getLength ( ) )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertEquals ( simple . getName ( ) , find . getName ( ) )
assertDependencyWasResolvedToOptional ( )
assertThat ( mode , is ( equalTo ( ShellMode . interactive ( ) ) ) )
assertEquals ( expected , wire . read ( ( ) -> "VALUE" ) . int64 ( ) )
Assert . assertEquals ( 0d , p . evaluate ( d ) , Double . MIN_VALUE )
assertEquals ( "Table" , dsc . getDisplayName ( ) )
assertTrue ( ( Boolean ) result )
verify ( messages ) . assertAbsenceOfErrors ( )
assertThat ( tags , hasItems
assertEquals ( "Wrong location" , "urn:jboss:type:jca:resource" , formEntryContext . getLocation ( ) )
Assert . assertEquals ( "[{\\"@id\\":\\"http://dbpedia/Person/1\\",\\"@graph\\":[{\\"@id\\":\\"http://dbpedia/Person/1\\",\\"http://www.w3.org/2000/01/rdf-schema#label\\":\\"Alfred Hitchkoc\\",\\"http://www.w3.org/2000/01/rdf-schema#seeAlso\\":{\\"@id\\":\\"http://dbpedia/Person/2\\",\\"http://www.w3.org/2000/01/rdf-schema#label\\":\\"Brad Pitt\\"}]]" , toString ( debugConciseTreeQuery ) )
Assert . assertTrue ( "lookup returned wrong topic" , topic == found )
assertLdapPasswordByFullName ( USER_BARBOSSA_USERNAME , USER_BARBOSSA_FULL_NAME )
assertTrue ( "Failed authentication with wrong user was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , UNKNOWN_USER ) )
assertTrue ( getRecordsAsXmlString . contains ( "hopCount=\\"2\\"" ) )
assertEquals ( originalSize , tags . all ( ) . size ( ) )
assertEquals ( 4 , result . getProperties ( ) . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( expect , cnt )
assertResultSet ( res )
assertTrue ( Bytes . compareTo ( bytes1 , bytes2 ) < 0 )
assertEquals ( "subSubName" , expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertEquals ( "asdf" , obj . get ( "jsonNode" ) )
Assert . assertEquals ( node , r . get ( "node" ) )
Assert . assertFalse ( service . isAlertSystemOn ( ) )
mockery . assertIsSatisfied ( )
assertTrue ( "Login should not have been successful." , isSuccessfulLogin ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( true )
assertEquals ( NUM_WINDOWS , databaseSize )
assertTrue ( e instanceof E_UnaryMinus )
Assert . assertTrue ( parameter . evaluate ( rewrite , context ) )
assertSame ( GBP_2_34 , test )
assertEquals ( expected , result )
assertTrue ( check ( "a" , input , output ) )
assertTrue ( report . contains ( "Unable to convert from " + read . getClass ( ) . getName ( ) + " to " + read2 . getClass ( ) . getName ( ) ) )
assertEquals ( expResult , result )
assertEquals ( 2 , builder . getAddedVehicleTypes ( ) . size ( ) )
assertEquals ( test . expected ( ) , test . actual ( ) )
assertEquals ( creditCardXML , writer . toString ( ) . trim ( ) )
assertEquals ( inverse , new HashSet < Integer > ( fields ) )
assertEquals ( "-something" , commandLine . getOptionValue ( 't' ) )
assertEquals ( sqe , convertResult . get ( 0 ) )
assertEquals ( "Expected skipped" , 1 , skipped )
Assert . assertEquals ( 1 , reactorHandlerRegistry . getEntrypoints ( ) . size ( ) )
assertEquals ( "dois milh玫es de inteiros" , actual )
assertEquals ( EmailState . SENT , result . getState ( ) . getState ( ) )
assertPermanentCount ( playerA , "Elite Vanguard" , 1 )
assertNotNull ( result )
Assert . assertEquals ( 256.633 , result , 1 )
assertThat ( domain . getStatus ( ) , hasCondition ( Progressing ) )
assertArrayEquals ( new double [ ] { 0.0 , 0.5 , 0.6 , 0.8 , 0.9 } , a . getAbsorption ( ) , b . getAbsorption ( ) , c . getAbsorption ( ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
Assert . assertEquals ( String . valueOf ( obj ) , quantidade , tamanho )
assertEquals ( expected , identity )
assertThat ( catResult . getElasticSearchResult ( ) , is ( sameInstance ( cat ) ) )
assertEquals ( a1 , a2 )
assertNull ( property )
assertThat ( info . isRequired ( ) , is ( true ) )
assertTrue ( inv1 . fire ( ) )
assertEquals ( 8 , someNotSoRandomAsciiAsList . size ( ) )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
assertTrue ( selector . evaluate ( source ) )
Assert . assertEquals ( EstadoAsientoRegistralEnum . RECHAZADO . getValue ( ) , estado . getEstado ( ) )
assertEquals ( Math . sqrt ( 0.02 ) , distance . compute ( point1 , point2 ) , EPSILON )
assertEquals ( 4 , encounters . size ( ) )
assertThat ( notSent , hasSize ( 2 ) )
assertEquals ( dummy , dummy . dummy )
MatcherAssert . assertThat ( terminalStep . wasRun ( ) , is ( false ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertXMLEqual ( "Invalid contents of header" , "<Header xmlns='http://www.w3.org/2003/05/soap-envelope' />" , result . toString ( ) )
assertEquals ( 0 , monitor . getZk ( ) . size ( ) )
Assert . assertNotNull ( this . mocker . getComponentUnderTest ( ) . getLock ( this . currentDocumentReference ) )
assertFalse ( config . isAdvancedClusterConfigSet ( ) )
assertThat ( sampleTestClass . driver , is ( notNullValue ( ) ) )
rule . assertScenarioEnded ( )
assertTrue ( cp . isReadOnly ( ) )
assertEquals ( "Hello :name" , ResponseBodyInterpolator . interpolate ( "Hello :name" , req ) )
Assert . isTrue ( rows == 50000280834672 )
assertEquals ( "1.0" , version )
Assert . assertNotNull ( victim . create ( ) )
assertEquals ( expected , result )
assertEquals ( "proposition should have been returned" , propositionDefinition , returnPropositionDefinition )
assertEquals ( IS_NULL . toString ( ) , res . getHibernateCriterion ( ) . toString ( ) )
assertThat ( logSpy . getLog ( ) , containsString ( "Error while scrolling onscreen" ) )
assertEquals ( 1 , constraints . size ( ) )
assertTrue ( collection . size ( ) > 0 )
Assert . assertEquals ( "Fail count record of room" , i , cr )
Assert . assertFalse ( tcpConnectivity . supports ( requirement ) )
assertEquals ( LineText . LEFT , lineText . getAlignment ( ) )
assertThat ( anyTS . contains ( SECOND_OF_DAY ) , is ( true ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( 0 , curatedDrugs . size ( ) )
assertAxisEquals ( 0.9 , 10.0 , new double [ ] { 0.9 , 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 } , new String [ ] { "0" , "2" , "4" , "6" , "8" , "10" } , axis )
assertAllCommandsUsed ( )
assertThat ( selectedCell , is ( "B2" ) )
assertThat ( new SearchArgumentFilter ( searchArgument , structTypeInfo ) . accept ( corc ) , is ( true ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_overflowNewContent02_" ) )
assertEquals ( Integer [ ] . class , command . getProjectedSymbols ( ) . get ( 0 ) . getType ( ) )
assertExtendedEquals ( expected , dd , PRODUCT_TOLERANCE_FACTOR )
assertEquals ( 2 , numberOfTests . getLength ( ) )
assertNull ( result )
assertEquals ( 0 , tasks . size ( ) )
assertTrue ( "Scroll bar policy must be alwaysORED" , scrollPane1 . getVisible ( ) )
Assert . assertEquals ( 2 , tables . size ( ) )
assertNotNull ( result )
r . assertEqualBeans ( orig , received , "ami,zone,description,remoteFS,type,jvmopts,stopOnTerminate,securityGroups,subnetId,useEphemeralDevices,useDedicatedTenancy,connectionStrategy" )
assertEquals ( expected , actual )
assertTrue ( rs . next ( ) )
assertEquals ( "2011-01-01" , Evaluator . evaluate ( ex ) )
assertNull ( "Wrong result for unknown key" , config . getSources ( "an.unknown.key" ) )
assertThat ( result , is ( "Network2" ) )
assertEquals ( 2 , instance . getNeurons ( ) . size ( ) )
context . assertIsSatisfied ( )
assertEquals ( ea , ea2 )
assertTrue ( EncryptionUtil . validatePbkdf2 ( this . unEncryptedMessage , encryption ) )
Assert . assertNotNull ( instance . getFirstAtomMapping ( ) )
assertEquals ( 1 , followInitiativeDao . getFollows ( ) . size ( ) )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "shouldReturnFieldsOnly.json" , result )
assertNull ( "Unexpected value in outputTriple: " + outputTriple , outputTriple )
assertEquals ( "SomeValue" , map . get ( "SomeKey" ) )
assertTrue ( map . get ( loadBalancerId ) . get ( hostId ) . size ( ) == 1 )
assertThat ( type , equalTo ( DBR_String . TYPE ) )
assertEquals ( "Wrong super type" , Event . RESET , builderResetType . getSuperType ( ) )
assertEquals ( 2 , allClasses . size ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , not ( hasItem ( configMapKeyRefEnvVar ) ) )
assertEquals ( expected , actual )
assertThat ( getPodSpec ( jobSpec ) . getInitContainers ( ) , nullValue ( ) )
assertTrue ( elapsed > 0 )
assertEquals ( BatchStatus . COMPLETED , execution . getStatus ( ) )
assertThat ( underTest . isFeatureEnabled ( ) , is ( equalTo ( false ) ) )
assertEquals ( data . getTestString ( ) , ( ( H2HTestData ) nodeB . getDataManager ( ) . get ( parameters ) ) . getTestString ( ) )
assertEquals ( "6.3-((3+1)/5+3.14)*600%(2+3-(6+(4.3-9)))" , this . codeGenerator . getPostFixExpression ( ) )
Assert . assertNotNull ( transactionManager )
assertNotNull ( getBeanInstance ( CreditCard . class ) )
Assert . assertEquals ( expected , actual . getName ( ) )
assertEquals ( literal , builder . toString ( ) )
assertEquals ( 9 , aggregator . generateId2OutcomeFile ( ) . split ( "\\n" ) . length )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertThat ( page . clickTargetButton . isVisible ( ) , is ( true ) )
assertEquals ( expectedFolderPath , buildFolderPath )
assertChildren ( moveTo , moveTo . resolve ( "newFile" ) )
assertEquals ( "program name" , p . getName ( ) )
assertEquals ( "Latitude is not properly parsed" , 5.3f , mapper . readLatitude ( columns ) , 0 )
assertEquals ( testcrypt , client . getCryptoSuite ( ) )
assertThat ( result ( ) , not ( containsString ( "\\"client\\"" ) ) )
assertEquals ( "Should return the updated search format" , updatedSearchFormat , sut . getFieldWeight ( updatedSearchFormat ) )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertThat ( Material . matchMaterial ( String . valueOf ( material . getId ( ) ) ) , is ( material ) )
assertNotNullOrEmpty ( "Tags should never be null." , tags )
Assert . isTrue ( users . size ( ) > 0 )
assertTrue ( ( "actual count: " + count ) , count <= 2 )
assertTrue ( "Audit log count should greater than zero" , auditLogs . size ( ) >= 15 )
assertEquals ( 0. , iCosts , 0.01 )
Assert . assertEquals ( "Mismatch between system property (or default) and OgnlRuntime _useFirstMatchGetSetLookupValue flag state ?" , optionDefinedInEnvironment ? flagValueFromEnvironment : defaultValue , OgnlRuntime . getUseFirstMatchGetSetLookupValue ( ) )
assertEquals ( 2 , cache . listPrivileges ( null , null , null , new Server ( "server1" ) ) . size ( ) )
assertEquals ( "Hello There. Here is some text." , text )
assertEquals ( "456.5 [\\\\d\\\\.]+ =~" , this . codeGenerator . getPostFixExpression ( ) )
mockery . assertIsSatisfied ( )
assertEquals ( 100 , total )
assertXmlEqual ( expected , formatterOutput )
assertEquals ( publisher , result )
assertTrue ( AbstractAnalyticsService . hasMetrics ( css1 ) )
assertTrue ( setCookie . contains ( "; Secure" ) )
assertThat ( PlainDate . of ( 2000 , 12 , 1 ) . with ( model . weekOfYear ( ) . atFloor ( ) ) , is ( PlainDate . of ( 2000 , 11 , 26 ) ) )
assertEquals ( "LOCAL:  \\nz.L.Frau\\naddr2\\naddr1\\n121212 City1\\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null ) )
Assert . assertFalse ( FileUtil . gitDirectoriesAreEqual ( neq1 , neq2 ) )
assertEquals ( asList ( info ( mdcValues , marker , message ) ) , testLogger . getLoggingEvents ( ) )
assertNull ( t )
Assert . assertEquals ( "EXCEPTION: class java.lang.IllegalStateException" , response )
Assert . assertEquals ( true , authServerName . equals ( serverName ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( UpdateStatus . Accepted ) )
Assert . assertEquals ( "io.selendroid.test:0.13.0" , defaultApp )
assertEquals ( "hello, world!" , result )
assertTrue ( "Repository should contain newly added statement" , testCon . hasStatement ( name , name , nameBob , false ) )
assertEquals ( expectedValue , advice . cacheGetSingle ( pjp ) )
assertEquals ( expected , actual )
assertEquals ( "A Value with interpolated and real data should return the interpolated value on getValue()." , interpolatedValue , victim . getValue ( ) , EPSILON )
assertTrue ( dao . getPolicyDefinitions ( ) . contains ( pd ) )
assertThat ( result , is ( jsonBoolean ( false ) ) )
assertTrue ( pattern . matches ( "-1.1" ) )
assertEquals ( adapterHelloWorld . helloMessage ( ) , "Hello World!" )
assertThat ( sel , is ( cls ) )
assertThat ( result , is ( 7L ) )
assertBeanValidation ( json , "relative_end_value must be greater than or equal to 1" )
assertTrue ( "markSupported returned false" , cr . markSupported ( ) )
assertEquals ( 20 , rs . getInt ( 1 ) )
assertTrue ( output , output . matches ( "(?s).*Usage: set.*" ) )
assertThat ( ( String ) dest . get ( "ccc" ) , is ( "111" ) )
Assert . assertEquals ( "[a, b, c, d, e]" , inv . invokeFunction ( "split" , "a.b.c.d.e" ) . toString ( ) )
assertEquals ( list , parser ( "(\\n // comment\\n s //tr)" ) . object ( "" ) )
assertEquals ( workspaceNames , repository . getWorkspaces ( ) )
assertThat ( branchFilter , instanceOf ( AllBasedFilter . class ) )
Assert . assertEquals ( null , vo )
assertFalse ( resolver . resolve ( ) . isPresent ( ) )
Assert . assertEquals ( 0 , analyser . getVariableTransportCostsAtActivity ( route . getStart ( ) , route ) , 0.01 )
assertThat ( fileOperationMap . removeEntry ( operation . getPnfsId ( ) , "resilient_pool-12" ) , is ( false ) )
Assert . assertEquals ( 0 , errors . get ( ) )
assertEquals ( "Indented line\\nFirst line\\nLast line\\n" , formatted )
Assert . assertEquals ( AgentConstants . PLATFORM_VMWARE , this . agent . parameters )
Assert . assertEquals ( predict , parameters )
assertEquals ( "<p><img src=\\"http://example.com/\\" alt=\\"Image\\" /></p><p><img src=\\"ftp://ftp.example.com\\" alt=\\"Image\\" /></p>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "default" , f . getFieldType ( ) )
assertEquals ( 0 , errors . size ( ) )
assertEquals ( "Output script should be created" , "CLTVPaymentChannelOutput" , script . getOutput ( ) )
assertNotNull ( start . getLastBuild ( ) )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  id in (?,?) " ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( generatedJavascript , expectedJavascript )
assertEquals ( expected , actual )
Assert . assertEquals ( ( Long ) 10 , res )
assertTrue ( false )
assertEquals ( 6. * 3600. + 6. * 60. + 12. , sec , 0.01 )
assertThat ( str , equalTo ( Arrays . asList ( "Hello world!" ) ) )
assertThat ( result , is ( equalTo ( ids ) ) )
assertEquals ( 1 , findings . size ( ) )
assertValid ( "//s:Body/w:receiveUserResponse" , doc )
assertFalse ( mqttClient . isConnected ( ) )
assertEquals ( "Some Road" , result )
assertThat ( selected , is ( infoPresenter2 ) )
assertEquals ( body . toString ( ) , "<html><body><h1>Resource not found</h1></body></html>" )
assertNotNull ( "EngineFactory is not configured." , factory )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( Lists . newArrayList ( field1 , field2 , field3 ) , subset )
assertFalse ( algorithm . equals ( equalAlgorithm ) )
TestCase . assertTrue ( result )
assertTrue ( result )
assertTrue ( slice . events . isEmpty ( ) )
assertEquals ( Integer . valueOf ( 2 ) , conversions . newInstance ( 2 ) . get ( intPath ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertThat ( utc . toString ( TimeScale . POSIX ) , is ( "POSIX-2012-06-30T23:59:59,123456789Z" ) )
assertEquals ( message , sentFrame . read ( ) )
assertTrue ( determinized . equals ( fstDeterminized ) )
assertTrue ( ok )
assertEquals ( "" , result )
assertEquals ( "admin-mocreation" , vdb . getCollection ( "admin-mocreation" ) . getName ( ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertFalse ( tagNode . isSelfClosing ( ) )
Assert . assertEquals ( "in" , listLoopStatement . getExpression ( ) )
assertPowerToughness ( playerA , "Clutch of Undeath" , 6 , 6 )
assertThat ( testUriStr , is ( expectedUriStr0 ) )
assertNotNull ( store . get ( key , new String [ 0 ] ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( expFilter , filter )
assertEquals ( "Wrong base64" , base64 , base64 . getBase64 ( ) )
assertEquals ( 1 , result . getNuOfDimensions ( ) )
assertNotNull ( server )
assertEquals ( "com.jfireframework.context.test.function.aop" , person . getName ( ) )
assertEquals ( mockedPacket , inProgressMessages . get ( "test" ) )
Assert . assertEquals ( "a" , importedSample . getCurrentState ( ) )
assertThat ( repo1 , is ( repo2 ) )
assertTrue ( rec_cnt == 1 )
Assert . assertFalse ( result )
assertMatrixEquals ( Ad , A )
assertNull ( twinMetadata )
assertNotNull ( transcript )
assertThat ( control . matches ( "/clients/5/subtask/6/" ) , is ( true ) )
assertEquals ( "NameADE" , pm_ade . getName ( ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( true ) ) )
assertArrayEquals ( expected , result , 0.000001 )
assertTrue ( Transforms . abs ( sub1 . sub ( arr2 ) . div ( sub1 ) ) . maxNumber ( ) . doubleValue ( ) < 0.01 )
Assert . assertEquals ( dataHoraRecibo , consultaRetorno . getDataHoraRecibo ( ) )
assertArrayEquals ( expected , numbers )
Assert . assertNull ( "Default module not found" , def )
assertEquals ( "Hello, world" , message . toString ( ) )
assertEquals ( "https://api.bitcodin.com/apikey" , bitApi . getApiKey ( ) )
assertThat ( valid , is ( equalTo ( false ) ) )
assertEquals ( 100d * SCROLL_LEFT , position , 0 )
assertTrue ( array . isView ( ) )
assertEquals ( new Response ( ) , result )
assertEquals ( ChargingCapability . V_480V_3_PHASE_32A , ChargingCapability . fromConnector ( connector ) )
Assert . assertFalse ( faceted . register ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( abc , is ( "eureka" ) )
assertEquals ( expResult , result )
assertEquals ( hash64_1 , hash64_2 )
Assert . assertEquals ( "136.5" , response )
assertEquals ( "world&bar" , builder . getFragmentParameter ( "hello world" ) )
assertEquals ( "<html><head><title>One</title></head><frameset><frame /><frame /></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "Value is incorrect" , map , value )
assertTrue ( baseConsumerClass . exists ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( motivo , consultaRetorno . getMotivo ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "/my/foo/bar" , rewriteEngine . processInbound ( null , null , c , url ) )
assertEquals ( "Call count stability check." , "{findIds=1, getItems=2}" , service . callCounter . toString ( ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , secondOutbound )
Assert . assertEquals ( expected , actual )
assertEquals ( "test case " + testCase . getName ( ) + " was not used" , testCase . toString ( ) )
context . assertIsSatisfied ( )
assertEquals ( Sets . newHashSet ( 1 , 2 , 3 ) , Sets . newHashSet ( q . asList ( ) ) )
assertThrown ( val , promise2 )
assertNotNull ( result )
assertEquals ( expected , actual )
assertTrue ( cc . toString ( ) . contains ( "private=\\"a,b\\"" ) )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertEquals ( " Actual doesn't match with expected. " , new Integer ( 0 ) , new Integer ( cs . getRow ( ) ) )
assertEquals ( featureService1 , aspect . getFeatureService ( ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertTrue ( result == null )
Assert . assertEquals ( b , m . getBook ( ) )
assertEquals ( new Float ( 123.4F ) , result )
assertEquals ( expResult , result , 0.0 )
assertTrue ( actionServiceRegistered )
Assert . assertEquals ( new Path ( "obj1.nestedSimpleInteger" ) , fullPath )
Assert . assertEquals ( "Block result is wrong" , new Integer ( 2 ) , o )
assertEquals ( 0 , maxByColumns . length )
assertEquals ( ( map . get ( "child" ) ) , ( map . get ( "child" ) ) )
assertEquals ( - 1 , tree . getBeforePosition ( ZERO ) )
assertEquals ( "{k1:{f:1}}" , o )
assertTrue ( emptyDatabase . isClean ( ) )
assertEquals ( "jsmith@aaa.$4" , mappedIdentity )
assertThat ( db . getId ( ) , is ( txId1 . longValue ( ) ) )
assertThat ( uri . isTemplate ( ) , equalTo ( true ) )
Assert . assertTrue ( true )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "0" , wrapper . getFirstHeader ( "Via" ) . getValue ( ) )
assertEquals ( "graph has wrong average value, should be 0.2916" , ( ( 1d / 6d ) + ( 1d / 2d ) + ( 1d / 2d ) + 0d ) / 4d , average , 0.00001 )
assertEquals ( "testpass" , passwordFile . getName ( ) )
assertFalse ( violation )
assertTrue ( fs . exists ( srcFilePath ) )
assertEquals ( pluginConfiguration , actual )
assertEquals ( expectedQuery , actualQuery )
assertNotEquals ( getMapping1 , getMapping2 )
assertEquals ( "\\"\\": expected type: String, found: Integer" , actual )
assertEquals ( tag . doStartTag ( ) , Tag . SKIP_BODY )
assertTrue ( events . size ( ) == 1 )
assertEquals ( true , result )
assertEquals ( 3 , searchScreenshots . size ( ) )
assertEquals ( "Expected 10 results!" , 10 , n )
Assert . assertTrue ( children . size ( ) > 0 )
Assert . assertNotNull ( rangerServiceDef )
assertEquals ( endpoint . toString ( ) , "jt400://user:password@host/qsys.lib/library.lib/queue.dtaq?ccsid=500&format=binary&connectionPool=#mockPool" )
assertEquals ( "blah" , result . getIn ( ) . getBody ( ) )
Assert . assertEquals ( "current" , authzDepConf . get ( currentVar . getVar ( ) ) )
arrays . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Yoda" , "C-3PO" ) )
assertEquals ( 2 , em . createQuery ( query ) . getResultList ( ) . size ( ) )
assertEquals ( 200 , response . statusCode ( ) )
assertTrue ( true )
Assert . assertEquals ( getElement ( "PID.7" ) , handler . getPatientLocation ( ) )
Assert . assertArrayEquals ( expected , actual . toArray ( ) )
Assert . assertEquals ( builder . toString ( ) , expected , actual , tol )
assertEquals ( count1 , repository . execute ( countOp ) . longValue ( ) )
Assert . assertEquals ( "(nt_change_duplication (nt_point_location (nt_base_location (nt_number 123))) dup (nt_number 1))" , nt_change_duplication . toStringTree ( parser ) )
assertEquals ( Arrays . asList ( bigWhiskey . getId ( ) , bigWhiskey . getArtistName ( ) , bigWhiskey . getArtistArtistArtistType ( ) , bigWhiskey . getArtistArtistArtistVersion ( ) , bigWhiskey . getArtistArtistVersion ( ) , bigWhiskey . getArtistArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWhiskey . getArtistVersion ( ) , bigWh
assertEquals ( newValue , rot . getRateOfTurn ( ) , 0.1 )
Assert . assertEquals ( expected , new HTMLFormatter ( null , container ) . format ( input , options ) )
assertEquals ( "Accumulator state should have been checkpointed" , 10 , keys )
Assert . assertEquals ( expected , FileCommands . ftGetFileInfo ( 1 , channelIds , channelPasswords , filePaths ) . toString ( ) )
assertEquals ( server . getConfig ( ) . get ( "testserver.a" ) , "default" )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . BAD_REQUEST ) )
assertSame ( testExtractor , extractorInstance1 )
Assert . assertTrue ( success )
assertEquals ( "SSN = '11111111111111',SSM = '2222222222222222'" , result . toString ( ) )
Assert . assertEquals ( "涓�瑗�|浼�|��|浜�" , words )
Assert . assertThat ( values . getValues ( ) , Matchers . contains ( "compress" , "gzip
assertEquals ( uploadLocation + FileUtils . toDir ( stateToken ) + filename + "." + subExt + extension , absFile )
assertTrue ( MessageEncodeDecode . checkIsSameList ( m1 . dataMapList ( ) , m2 . dataMapList ( ) ) )
assertNotNull ( result )
assertCapturedHint ( expected , capture , EncodeHintType . CHARACTER_SET )
Assert . fail ( "Mechanism name could not be null" )
Assert . assertEquals ( "select sym2:sym from test" , select . toQ ( ) )
assertEquals ( "samedi, janvier 01" , DateUtils . formatFriendlyDate ( DateUtils . nowUtc ( ) , Locale . GERMANY ) )
assertTrue ( getAlphaConstraint ( ksession ) instanceof LambdaConstraint )
assertNotNull ( factory )
assertTrue ( newYearsEve . isBefore ( newYearsDay ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_USHORT )
assertEquals ( 0 , multimap . size ( ) )
assertThat ( subject . toString ( ) , is ( "%http://www.ripe.net/data-tools/db/faq/faq-db/why-did-you-receive-the-error-201-access-denied\\n" ) )
assertEquals ( DEFAULT_CONTENT_TYPE , connection . getHeaders ( ) . get ( "Content-Type" ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( qsCallback . asDocument ( ) , is ( b . build ( ) ) )
Assert . assertEquals ( fileComparer . replaceAbstractPartialClasses ( file1AsList , abstractPartialClasses ) , expectedResult )
Assert . assertEquals ( getDao ( ) . count ( ) , count - 1 )
assertEquals ( "[true, false]" , actualObj ( ) . get ( "myvalue" ) )
Assert . assertFalse ( policy . isResponseCacheable ( "GET" , response ) )
assertEquals ( i1 , i2 )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Sms action=\\"https://example.com\\" method=\\"GET\\" statusCallback=\\"https://example.com\\">message</Sms>" , elem . toXml ( ) )
assertSame ( cache , nativeCache )
assertEquals ( score , smsd1 . getFragmentSize ( 0 ) )
Assert . assertFalse ( "Capabilities should NOT match" , first . matchesCapabilities ( map ) )
assertEquals ( true , bm . isBitSet ( 63 ) )
Assert . assertEquals ( expected , Strings . unCapitalizeFirstChar ( data ) )
assertNotNull ( pi )
Assert . fail ( "Test encountered an unexpected exception." )
assertEquals ( "The schema names should be correct" , getTestProps ( ) . getSchemaNames ( ) , spy . getSchemaNames ( ) )
assertEquals ( "string" , param . toJson ( ) )
Assert . assertFalse ( report . isSuccess ( ) )
assertNull ( token )
assertNotNull ( type )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "distinct($current.x,$current.y)" , p . toString ( ) )
Assert . assertNotNull ( url )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 INNER JOIN table2 as t2 ON t1.c0 = t2.c0" ) )
assertEqualsIgnoreWhitespace ( expected , drl )
assertEquals ( 0 , changes . size ( ) )
assertThat ( collectionName , endsWith ( "s" ) )
assertThat ( value , is ( equalTo ( resolvable ) ) )
assertSame ( value , XenqttUtil . validateGreaterThan ( "integer" , value , max ) )
Assert . assertEquals ( ( Integer ) 1 , res )
assertThat ( testOutcome . getTags ( ) , hasItem ( TestTag . withName ( "A user story and features" ) . andType ( "story" ) ) )
Assert . assertEquals ( "driver.navigate().back();" , result )
assertEquals ( expected , result )
assertScheduleWhenTuplesAvailableStrategy ( strategy , 1 )
Assert . assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertNull ( rval )
assertThat ( tester . response . getStatus ( ) , is ( equalTo ( HttpServletResponse . SC_OK ) ) )
assertEquals ( linearChainFg , fgfile )
assertEquals ( "other" , initializer . getStringValue ( "name" ) )
assertArrayEquals ( "Profiles" , m_bundleContext . getRequiredProfiles ( ) . toArray ( ) , new ConciergePlatformBuilder ( m_bundleContext , "version" ) . getRequiredProfiles ( m_platformContext ) )
assertThat ( route , canHandle ( ClientsController . class , "list" ) )
assertEquals ( expectedResult , result )
assertContains ( e . getMessage ( ) , "'first'" )
assertBuildException ( "password" )
assertEquals ( "Wrong escape code" , "$${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc.jar\\\\,$${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar" , config . getString ( "mypath" ) )
assertEquals ( extSource , extSource2 )
Assert . fail ( "Should have thrown an exception" )
assertEquals ( "bar" , lr . get ( 1 ) . get ( ) )
assertNotSame ( fixture , copy )
assertNotEquals ( update1 , update2 )
assertFalse ( result . isFailure ( ) )
assertEquals ( "Base for floats is wrong" , Double . valueOf ( 3.6d ) , parsed )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( HttpStatus . SC_INTERNAL_SERVER_ERROR ) )
assertEquals ( this . userService . get ( ) , this . user )
assertThat ( result , is ( jsonNumber ( 1 ) ) )
assertEquals ( "/protected/somepage" , rc . mountPoint ( ) )
assertEquals ( JsonCodec . bsonObjectToJsonObject ( innerBson ) , JsonCodec . bsonObjectToJsonObject ( outerBson ) )
Assert . assertEquals ( "Remote invocation of EJB was not successful" , StatefulBeanRemote . ANSWER , response )
assertEquals ( "lentement plus" , lentement . getAdjPhrase ( ) )
assertNotNull ( exception )
assertThat ( b . join ( ) , is ( 10 ) )
assertSame ( is , this . testee . getResource ( "foo" ) )
assertLife ( playerB , 17 )
assertEquals ( "foo=bar&baz=quz" , s . serialize ( m ) )
assertNotEquals ( putMapping1 , putMapping2 )
assertObjectEquals ( "{}" , t )
assertEquals ( 1 , posts . size ( ) )
assertThat ( results , is ( Arrays . asList ( "A" , "B" , "C" , "D" ) ) )
assertEquals ( type , data . getType ( ) )
Assert . assertEquals ( "0ea49f0d1f89ae839e96c3665beb4ff6d0033c33c33" , fp )
assertFalse ( post . isVotedUpBy ( user ) )
assertEquals ( 7 , p . getTotalPages ( ) )
assertEquals ( 1 , handler . getCalledTimes ( ) )
assertThat ( testOutcome . getLastStep ( ) . getName ( ) , is ( "Step 1" ) )
assertTrue ( "Exception raised" , wasException )
assertFalse ( aggregator . usages ( ) . iterator ( ) . hasNext ( ) )
assertThat ( result , isFailedCommand ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( 0 , articles . size ( ) )
assertEquals ( "Expenses 9/12/2002\\n" + " \\tDinner\\t$10.00\\n" + " \\tBreakfast\\t$5.00\\n" + "Meal expenses $15.00\\n" + "Total $15.00" , printer . getText ( ) )
Assert . assertEquals ( 0 , resources . size ( ) )
assertEquals ( "Should return failure" , "failure" , jsonObj . get ( "status" ) . getAsString ( ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertEquals ( "Exists response" , Boolean . TRUE , batchedModifications . get ( 0 ) . isPresent ( ) )
assertEquals ( original , result )
assertEquals ( expResult , result )
assertEquals ( "[{\\"uniqueItems\\":true,\\"minItems\\":5,\\"maxItems\\":10,\\"allItemSchema\\":true,\\"uniqueItems\\":true}" , actual )
assertSame ( def , referenceObjectBinding )
assertTvShowResultsPage ( results )
assertThat ( house . cat . firstLeg . birthDay , is ( equalTo ( ( Calendar ) new GregorianCalendar ( 2010 , 4 , 10 ) ) ) )
assertEquals ( mockPom , converter . convertFromText ( ROOT_MODULE_SYMBOL , null , null ) )
assertTrue ( afterFile . delete ( ) )
this . assertLoadBlobViaTuples ( tuples , true , false )
assertTrue ( "should ignore all unknown keywords" , jdbcAuthProvider . comparePasswords ( PASSWORD , BCRYPTED_PASSWORD ) )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertTrue ( runtimeExceptionCalled [ 0 ] )
Assert . fail ( "Expected version " + version + " to fail" )
assertEquals ( "3.yes,1.A;3.yes,1.C;3.yes,1.D;3.yes,5.hello;3.yes,5.world;" , stringWriter . toString ( ) )
assertEquals ( 0 , container . getTables ( ) . size ( ) )
assertEquals ( "Expected " + expectedCoordinate [ 0 ] + " to be in " + linearRing . getCoordinates ( ) [ 0 ] , expectedCoordinate [ 0 ] , linearRing . getCoordinates ( ) [ 0 ] )
assertEquals ( provider , comboBox . getDataProvider ( ) )
assertEquals ( initialSize , taskScheduler ( ) . list ( ) . size ( ) )
assertEquals ( 1 , counter . getCount ( ) )
assertArrayEquals ( expected , one . split ( ) )
assertEquals ( Long . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertions . startsWith ( sequence )
assertEquals ( 6 , tokens . size ( ) )
assertArrayEquals ( transactionViewModel . getBytes ( ) , TransactionViewModel . fromHash ( tangle , transactionViewModel . getHash ( ) ) . getBytes ( ) )
Assert . assertTrue ( systemUnderTest . propertyOverridesExist ( ) )
assertEquals ( 0 , results . getTotalElements ( ) )
assertions . hasSize ( 5 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertSame ( "Expected same parent" , parent , instance . getParent ( ) )
assertEquals ( "docId" , sink . newDocumentUriTemplate ( "somePrefix/docId" ) . get ( ) )
assertNull ( "Wrong result" , interpolator . resolve ( TEST_PREFIX + ':' + TEST_NAME ) )
Assert . assertFalse ( isOk )
assertEquals ( Integer . valueOf ( 0 ) , value )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "[= foo]" , m . toString ( ) )
assertEquals ( "Counts [follows=1, followed_by=1]" , result )
Assert . assertEquals ( 4 , collector . actualResults . size ( ) )
assertFalse ( checkTest )
Assert . assertEquals ( 0.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
Assert . fail ( "Have not found 'doDynamic' in the returned function list" )
assertSame ( a , builder . getInstance ( ) )
assertThat ( token . isStillActive ( ) , is ( true ) )
assertEquals ( 1 , hookClass . connectionException )
assertNotNull ( NonTerminal . STATEMENTS . buildAbstractSyntaxTree ( tokenStream ) )
assertTrue ( resourceRelationBoundary . isAddableAsProvidedResourceToResourceGroup ( master , slaveName ) )
assertFalse ( cache . contains ( key ) )
Assert . assertTrue ( true )
assertThat ( driver . findElement ( By . id ( "exceptionCode" ) ) . getText ( ) , is ( "e.xx.9999" ) )
assertTrue ( result instanceof XMLTextChunkBuilder )
assertFalseForPropertyValidation ( )
assertThat ( properties , is ( expected ) )
assertThat ( ids , contains ( pid . getValue ( ) ) )
assertThat ( log . getLogEntries ( 1 , 5 , quorumId ) , resultsIn ( equalTo ( entries ) ) )
assertEquals ( NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( noOfSolutions , is ( 88 ) )
assertTrue ( exitCode == 0 )
assertEquals ( "2014-05-29T08:54:09.764+02:00" , Dates . format ( date , DateFormats . DATETIME_PATTERN ) )
Assert . assertEquals ( "Value is incorrect" , map ( MONTH_DAY_STRING , "test" ) , value )
assertEquals ( result , "10 years ago" )
assertEquals ( VALUE1 + VALUE2 , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( result , subUser )
Assert . assertArrayEquals ( "Not all expected favorites are returned." , expectedResult ( queryResult ) . toArray ( ) , results . toArray ( ) )
assertEquals ( lastProgress , progress )
Assert . assertEquals ( 2 , user . getTotalUnreadPrivateMessages ( ) )
assertThat ( result , is ( expected ) )
assertNotNull ( con . getMetaData ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"conference\\":{\\"id\\":\\"1234\\",\\"mute\\":false,\\"playTones\\":false,\\"joinPrompt\\":true,\\"leavePrompt\\":true}}]}" )
assertEquals ( "Deleted entity should match original" , revisions . getLatestRevision ( ) . getEntity ( ) . getName ( ) , p . getName ( ) )
assertFalse ( underTest . isLastDownloaded ( asset ) )
Assert . assertEquals ( "select babyfish_shared_alias_0 " + "from org.babyfishdemo.jpacriteria.entities.Employee babyfish_shared_alias_0" , createQueryTemplate ( cq ) . toString ( ) )
assertEquals ( "?p1=v1&p2=v2&p3=v3" , query . toString ( ) )
assertEquals ( 1 , tag . getTags ( ) . size ( ) )
assertEquals ( 5 , instance . evaluations )
assertEquals ( testOntologyUri , helper . getOntologyUri ( ) )
assertThat ( fe , notNullValue ( ) )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 299.0 , 299.0 )
testHelper . assertMigrationFired ( migrationPlan )
assertEquals ( 1 , CollQueryFactory . from ( entity , Collections . singleton ( new Entity ( ) ) ) . where ( $ ( entity . getBoolean2 ( ) ) . eq ( Boolean . TRUE ) ) . fetchCount ( ) )
assertThat ( result , contains ( v_131 , v_132 , v_133 , v_121 , v_122 ) )
Assert . assertEquals ( 9 , map . size ( ) )
assertMissing ( "missing" )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertFalse ( canHandle ( handlerInput ) )
assertEquals ( "Wrong new node" , newName , root . getName ( ) )
Assert . assertNotNull ( savedTenant2 )
assertEquals ( expected , result . getAsXml ( ) )
assertResultSet ( res )
assertEquals ( "this is a test" , pnr . getProperty ( "test" ) . get ( ) )
assertTrue ( diff > TIME_DIFF && diff < TIME_DIFF )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 0.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
assertEquals ( dataSet . getRowCount ( ) , 50 )
assertTrue ( "Headers tar file '" + headersTarFile + "' for sdk '" + sdk + "' and configuration '" + configuration + "' does not exist." , headersTarFile . exists ( ) )
assertEqualsQL ( lq , Ac . factor ( new DenseMatrix ( Ar ) ) )
assertEquals ( "Hawk id=\\"someId\\",mac=\\"LTIL+KWUhgH5+j+6SADI96HSA6MXlFMwhU1lIohkRo0=\\",ts=\\"1\\",nonce=\\"abc\\"" , h . toString ( ) )
assertTrue ( "Failed permission check was not logged" , loggedFailedPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertEquals ( "abc\\n" , found )
Assert . assertEquals ( jsonString , "{\\"name\\":\\"涓���\\",\\"id\\":1,\\"brithDate\\":null,\\"money\\":1.1}" )
assertEquals ( ( VecTools . multiply ( newOutput , outputGrad ) - VecTools . multiply ( output , outputGrad ) ) / eps , grad . get ( i ) , 1e-5 )
assertTrue ( check )
assertEquals ( "Password policy has not been updated" , "weakpassword" , identityService . createUserQuery ( ) . userId ( user . getId ( ) ) . password ( "weakpassword" ) . singleResult ( ) )
Assert . assertEquals ( "test" , stack . top ( ) . get ( "test" , null ) )
assertNull ( entry )
assertEquals ( 30.0 , v . getLatestArrival ( ) , 0.01 )
assertThat ( result , is ( jsonString ( null ) ) )
Assert . assertEquals ( expectedOutput , output )
assertEquals ( 1 , response . getHeader ( SecWebSocketVersionInterceptor . SEC_WEB_SOCKET_PROTOCOL_HEADER ) . length ( ) )
assertEquals ( "<p>Hello</p>\\n<p>There</p>" , divs . html ( ) )
assertEquals ( customUiTemplateUpdated . getTemplateValue ( ) , "template_value_updated" )
assertEquals ( "regexp condition serialization is wrong" , expected , actual )
assertFalse ( "WorkflowDocument should not indicate quickstart as SuperUser" , document . isValidAction ( ActionType . SU_DISAPPROVE ) )
assertThat ( description . toString ( ) , is ( "A JSON array with size: 2" ) )
assertThat ( searchResponse . getHits ( ) . totalHits ( ) , is ( 1L ) )
assertAllCommandsUsed ( )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertNull ( vm . getInstanceOfferingUuid ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertThat ( formatter . parse ( "14/29, Heisei 29" ) , is ( expected ) )
assertMedianIs ( 3D )
assertEquals ( false , test5 . equals ( null ) )
Assert . assertArrayEquals ( answer , result , 1e-6 )
assertEquals ( testGen1 . getLookupGroup ( testLSN ) . toString ( ) , testGen2 . getLookupGroup ( testLSN ) . toString ( ) )
assertEquals ( header , conditionals . toHeaders ( ) . getFirstHeader ( HeaderConstants . IF_MODIFIED_SINCE ) . get ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "<
Assert . assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 2</th>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass\\">A1</td>\\n" + "<td class=\\"pass\\">A2</td>\\n" + "</tr>\\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
assertEquals ( "Information content is not correct" , "Information content is not correct" , columnInformation . getInformationContent ( ) )
assertTrue ( page . getContent ( ) . contains ( "ENABLED = true" ) )
assertEquals ( 1 , graph . countVertices ( "Person" ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertEquals ( "dois nonilh玫es de inteiros" , actual )
assertProductEvidence ( result , product )
assertEquals ( 1.0 , result . getExperimentCounts ( ) . get ( 0 ) , 0.000001 )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 1 , result )
assertEquals ( false , maybeName . isPresent ( ) )
assertThat ( page . hasError ( ) , is ( false ) )
assertTrue ( exitCalled )
assertTrue ( list . isEmpty ( ) )
assertNotNull ( result )
assertEquals ( 1 , getStartBatchCount ( ) )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
assertTrue ( result instanceof V8Function )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"transfer\\":{\\"to\\":\\"tel:+14157044517\\",\\"from\\":\\"tel:+14157044522\\",\\"name\\":\\"transfer\\"}}]}" )
assertFalse ( Files . exists ( target ) )
assertNotNull ( result )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-managed:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertEquals ( "multipart/mixed" , ad . getAttachments ( ) . get ( 0 ) . getContent ( ) )
Assert . assertEquals ( 42 , getReplHeader ( ) . getTimeout ( ) )
assertThat ( webbitException . getMessage ( ) , is ( "[null] on null" ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
assertTrue ( "Failed at " + maxTries , failedAt < maxTries )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Luke" , "Yoda" ) )
assertTrue ( blobStore . delete ( tileRange ) )
assertEquals ( "Offset should be correct" , offsetMillis , getLogRow ( 0 ) )
assertEquals ( true , classUnderTest . isSelected ( ) )
Assert . assertFalse ( "did not pass filter when no last good path" , testControlBlock . filter ( "aaa" ) )
assertEquals ( 2 , tree . calculateDepth ( ) )
assertEquals ( afterAesEncrypt2 , pc . encrypt ( randomStr , replyMsg2 ) )
assertEquals ( 1 , e . getMessageReference ( ) . getContent ( ) . size ( ) )
assertTrue ( responseBody . contains ( "HTTP/1.1 404 Not Found" ) )
Assert . assertTrue ( expect ( o , false ) )
assertResourceContains ( "function" )
assertEquals ( expected , result )
assertCorrectList ( )
assertPaintingResult ( objects )
assertEquals ( ( short ) 0xffff , result )
assertArrayEquals ( "The view paths array is incorrect" , new String [ ] { "view" } , scm . getViewPaths ( EMPTY_VARIABLE_RESOLVER ) )
assertEquals ( id , act . getId ( ) )
assertEquals ( "x=(b a);(b a)\\n" , found )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertThat ( m1 , is ( not ( m2 ) ) )
assertNotNull ( rh )
softly . assertThat ( skipInstallationChecker )
Assert . assertTrue ( "Out of bounds (" + result [ 0 ] + " > " + sigma [ 0 ] + ")" , result [ 0 ] <= sigma [ 0 ] )
Asn1UtilTest . assertEncoded ( RFC3779_APPENDIX_B_EXAMPLE_1 , subject . ipAddressBlocksToDer ( resources ) )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
Assert . fail ( )
Assert . assertEquals ( expResult , result )
assertNull ( mostRecentId )
assertThat ( values , containsInAnyOrder ( "Diagnostic" , "EpisodeOfCare" , "EpisodeOfCare" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire" , "Questionnaire"
assertEquals ( "Patch with sparql update created direct container from basic container!" , CONFLICT . getStatusCode ( ) , getStatus ( patch ) )
assertStoreEmpty ( )
assertEquals ( "Apache" , sb . toString ( ) )
assertGroups ( ldapUserGroupCallback , false , false , false , false )
assertArrayEquals ( expected , ArrayUtils . reverse ( array ) )
assertNotEquals ( column1 , column2 )
Assert . assertEquals ( urlEsperada , nota . getInfoSuplementar ( ) . getQrCode ( ) )
assertEquals ( expected , sorted )
assertEquals ( expected [ i ] [ y ] [ x ] , ra . get ( ) . get ( ) , 0 )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( USERNAME , principal . getName ( ) )
assertEquals ( "42" , result . getStringValue ( ) )
assertEquals ( 2 , kSession . fireAllRules ( ) )
assertFalse ( appender . isStarted ( ) )
assertEquals ( "CFBundleVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_VERSION ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "ok" , close )
assertThat ( validator . getErrors ( ) , hasSize ( 0 ) )
assertEquals ( id , sut . getId ( ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ) . orderBy ( field ( "partitionValue1" ) ) . build ( ) . as ( "theCount" ) ) . from ( tableRef ( "WindowFunctionTable" ) ) , "4" , "4" , "4" , "7" , "7" , "7" )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
assertFalse ( fs . deleteOnExit ( path ) )
assertTrue ( "Wrote incorrect char[] string: " + s , s . equals ( "Hello World" ) )
ValidationTestUtils . assertPatternMatches ( pattern , expected )
assertThat ( result , is ( true ) )
should . assertEquals ( 2 , res . result ( ) . principal ( ) . getInteger ( "provider" ) )
assertEquals ( tags , new MetricResources ( configuration , security , api ) . getTags ( null ) )
assertEquals ( expResult , result )
Assert . assertEquals ( simple . getName ( ) , name )
assertEquals ( 25 , cap . get ( 0 ) )
assertThat ( coords , equalTo ( actualCoords ) )
assertEquals ( "http://tempuri.org" , w . getWorkGroup ( ) . get ( 0 ) . getWorkSummary ( ) . get ( 0 ) . getUrl ( ) . getValue ( ) )
Assert . assertEquals ( "my_pi" , this . ghci . pullRaw ( "my_pi" ) . get ( ) )
assertEquals ( result , pdiParams )
Assert . assertEquals ( "200" , test . getVal ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( newValues , contains ( ciString ( "dev-MNT-1" ) ) )
assertNotNull ( buildTime )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 } LIMIT 4" )
assertThat ( new SelectBest ( ) . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol2 ) )
assertEquals ( "12345" , headers . get ( "trace-id" ) )
assertEquals ( expected , actual )
assertEquals ( - 1 , comparator . compare ( null , solution2 ) )
Assert . assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CPointing%2F%3E" , elem . toUrl ( ) )
assertEquals ( data , posts . get ( 0 ) . getData ( ) )
assertEquals ( "Insert table should have 2 additional records now" , 2 , finalNumberOfRecords - initialNumberOfRecords )
assertEquals ( goldenResponse , responseObserver . firstValue ( ) . get ( ) )
assertNotNull ( testObj . getPanel ( ) )
Assert . assertEquals ( "alternate" , error . getErrorCode ( ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( expected , actual )
assertEquals ( - 2d * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
assertArrayEquals ( refar , d . getResult ( ) )
this . assertLoadBlob ( departments , false , true )
assertEquals ( 1 , metrics . size ( ) )
assertThat ( result , is ( true ) )
assertEquals ( addedNode , dummyNode )
assertEquals ( count1 , count2 )
assertTrue ( actualRate <= maxRate )
assertEquals ( "padRight() To 10" , Text . valueOf ( "******Test" ) , _text )
assertTrue ( doc . getStatementGroups ( ) . isEmpty ( ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( APP_BASE ) ) )
assertEquals ( "Wrong timer id" , TEST_TIMER_ID , timerId )
assertFalse ( selectedFile . exists ( ) )
assertEquals ( INTERACTION_NOT_ALLOWED . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( resultCommand , is ( expectedCommand ) )
assertEquals ( 1305 , result )
assertTrue ( resp . isSuccess ( ) )
MockInterceptor . assertContent ( new String [ ] { "Mock1" , "Mock2" , "Mock3" , "Mock4" , "Mock5" , "Mock6" } , new String [ ] { "Mock6" , "Mock5" , "Mock4" , "Mock3" , "Mock2" , "Mock1" } , new String [ ] { } )
assertEquals ( "http://s3.amazonaws.com" , connectorConfig . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration ( ) . getS3StorageConfiguration
assertThat ( tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) , is ( 1 ) )
assertEquals ( "Expected another type of analyzer" , StandardAnalyzer . class , analyzer . getClass ( ) )
Assert . assertEquals ( "SELECT 1 = 0\\n\\tAND ID = ?" , last . getRight ( ) . getRight ( ) . getRight ( ) . getRight ( ) )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "2 cubic metres" , 2 , "m3" , "s" , "time" ) )
assertEquals ( t , dt )
assertNoneEqual ( otherCapabilityFqans )
assertEqualsWithoutWhiteSpaces ( "" , union )
assertThat ( result , contains ( "hello" ) )
assertEquals ( "first,second" , subject . getFirst ( ) )
assertTrue ( logLatch . await ( 10 , TimeUnit . SECONDS ) )
assertThat ( result , equalTo ( true ) )
out . assertIsSatisfied ( )
assertSame ( t , TEST_2007_07_15 )
assertEquals ( BigDecimal . TEN , dto . getQty ( ) )
assertEquals ( values [ 0 ] , sparseView . getFirst ( ) )
assertTrue ( "Token realm should be created" , ops . exists ( TEST_TOKEN_REALM_ADDRESS ) )
assertEquals ( IProcess . URN_XPATH_1_0_IN_BPEL_2_0 , process . getQueryLanguage ( ) )
assertEquals ( 0 , placeHolder . getParentClass ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"message\\":{\\"say\\":[{\\"value\\":\\"This is an announcement\\"},{\\"value\\":\\"Remember, you have a meeting at 2 PM\\"}],\\"to\\":\\"3055551212\\",\\"answerOnMedia\\":false,\\"channel\\":\\"VOICE\\",\\"from\\":\\"305555551000\\",\\"network\\":\\"PSTN\\",\\"required\\":true,\\"timeout\\":10.1,\\"voice\\":\\"tom\\",\\"promptLogSecurity\\":\\"suppress\\"}}]}" )
assertThat ( supers , contains ( superProperty ) )
assertInstanceOf ( "geometry" , Path2D . class , geometry )
assertEquals ( OK , response . getStatus ( ) )
SerializableObjects . assertEquals ( bar , parsedBar )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . assertEquals ( "Result is not last evaluated expression" , "Hello,World" , o )
assertEquals ( "ping!" , reply . body ( ) )
assertEquals ( 32 , program . getMemSize ( ) )
assertTrue ( "sleep too long: " + duration , duration < 1 )
assertThat ( exists , is ( false ) )
Assert . assertTrue ( queryResult . getSize ( ) >= 1 )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertEquals ( 3 , ( int ) sync ( list . get ( 0 ) ) )
assertEquals ( "There are no sentences remaining" , 0 , BreakSentences . getSentences ( ) . size ( ) )
assertNotNull ( id )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , new Triple ( s , p , NodeFactoryExtra . parseNode ( "123" ) ) ) )
assertThat ( scriptContent , is ( "Selective Annotation" ) )
assertEquals ( 1 , result )
assertTrue ( true )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertTrue ( passed [ 0 ] )
assertTrue ( result . isResultOK ( ) )
assertEquals ( prefix + "hello" , result )
Assert . assertEquals ( Ipv4Match . EthernetType . ethernet , match . getEthernetMatch ( ) )
assertEquals ( "a,b,c" , out )
assertEquals ( testSet . length ( ) , board . getBits ( ) . length )
assertThat ( candidates . size ( ) , is ( 0 ) )
assertEquals ( NativeSelectSetNull . EMPTY_SELECTION_TEXT , getSelect ( ) . getValue ( ) )
assertEquals ( "Value not as expected!" , Long . valueOf ( 1L ) , bi . getValue ( ) )
assertEquals ( "[pm1.g1, pm1.g1, pm1.g1]" , query . toString ( ) )
assertTrue ( GerritVersionChecker . isCorrectVersion ( GerritVersionChecker . Feature . fileTrigger , testServer ) )
Assert . assertEquals ( unidadeFederativa , eventoRetorno . getOrgao ( ) )
assertObjectEquals ( "{type:'string'}" , x . getSchema ( ) )
assertThat ( listener . awaitCompletion ( 100 , TimeUnit . MILLISECONDS ) , is ( true ) )
assertEquals ( "hello world" , new String ( ObjectConverterUtil . convertToCharArray ( result . getBinaryStream ( ) , - 1 , "ASCII" ) ) )
assertEquals ( 0 , score ( ) )
assertTrue ( ( Boolean ) result )
assertEquals ( expected , actual , 0.0 )
assertEquals ( stream , streamAfterParse )
assertNotEquals ( playlist1 . hashCode ( ) , playlist2 . hashCode ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertEquals ( inputGraphHead , outputGraphHead )
assertTrue ( testObj . getFieldDataManager ( ) instanceof TTFDataManager )
assertContainsAllGames ( games )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "demo" ) . count ( ) , is ( 1L ) )
Assert . assertEquals ( displayNameExpected , displayNameActual )
assertTrue ( matchResult )
assertTrue ( satisfiesPrecondition ( cu ) )
assertEquals ( expResult , result , 0.0 )
Assert . assertEquals ( "Wrong key created" , comparationKey , createdKey )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Products(5)" ) . addParameter ( "$expand" , "Orders,Customers,Info" ) . build ( ) , uri )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertEquals ( expectedDataset , dataset )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Say>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Say>" , elem . toXml ( ) )
assertSame ( targetEnv , testConfig . getEnvironment ( ) )
assertEquals ( expectedSpritesNames , sprites )
assertTrue ( "The entityGroup should be present in online entityGroups list." , fs . getOnlineEntityGroups ( ) . contains ( eg ) )
assertTrue ( wkt , wkt . matches ( WGS84 ) )
Assert . assertNull ( voidable . getDateVoided ( ) )
assertEquals ( str , decrypted )
Assert . assertEquals ( "updated" , result . getReturnMsg ( ) )
assertEquals ( 2 , lostWorkersInfo . size ( ) )
assertThat ( testInstance . getMyInjection ( ) , is ( nullValue ( ) ) )
assertTrue ( root . containsNetwork ( s1 ) )
assertCloseTo ( "Scroll position should be 0" , newRowLocation , rowLocation0 )
assertEquals ( 0x000000000000322L , native_get_S1_3_m0_0 ( s ) )
runner . assertAllFlowFilesTransferred ( PublishKafka_0_11 . REL_FAILURE , 3 )
assertEquals ( "3.141592653589793" , method . invoke ( normalizer , literal , false ) )
Assert . assertEquals ( "41 minutes ago" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( reservation )
assertThat ( result . fullName ( ) , is ( Double . class . getName ( ) ) )
assertEquals ( "[s,e,c]" , s . getContext ( ) . toString ( ) )
Assert . assertEquals ( ExchangePhase . OUT , exchange . getPhase ( ) )
assertThat ( PrettyTime . of ( Locale . UK ) . print ( duration , TextWidth . WIDE ) , is ( "1 year and 1 day" ) )
assertThat ( isEquals , is ( true ) )
assertTrue ( p1 . implies ( p2 ) )
Assert . assertEquals ( CORSFilter . CORSRequestType . PRE_FLIGHT , requestType )
assertTrue ( reportData . size ( ) > 0 )
assertEqualsWithoutWhiteSpaces ( "union(){translate([10,20,30])(empty)translate([30,10,20])(empty)}" , moved )
assertEquals ( 1 , postIds . size ( ) )
Assert . assertFalse ( isFile ( fc , f ) )
assertIpAddress ( )
Assert . assertEquals ( schema . getVersionField ( ) , "version_number" )
assertEquals ( expResult , result )
assertTrue ( icheck . getFaults ( ) . length > 0 )
assertEquals ( "Body" , StaxUtils . getString ( reader , "Body" ) )
assertNull ( "key1 should hold null" , memcache . get ( KEY1 ) )
assertEquals ( expResult , result )
Assert . assertEquals ( patientPrograms . size ( ) , Util . getResultsSize ( result ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "Should be called 5 times" , 5 , cmpTo . compareTo ( new Long ( 5L ) ) )
assertTrue ( value . contains ( "cas" ) )
assertEquals ( expected , actual )
assertEquals ( s , s1 )
assertEquals ( "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country3-a>" , val )
assertEquals ( 0.5 , density , .05 )
assertTrue ( Futures . getUnchecked ( collector ) )
assertEquals ( mod , modSer )
assertEquals ( expected , modelWriter . toString ( ) )
Assert . assertThat ( reader . readLine ( ) , is ( "Hello World" ) )
assertHasMethod ( model , "long proofDepth()" )
assertTrue ( connectFuture . isConnected ( ) )
Assert . assertEquals ( jsc , jscs . get ( 0 ) )
assertEquals ( "<p>This is
assertEquals ( "Correct Platform is not fetched" , platform , pValue )
Assert . assertEquals ( GelfMessage . Level . INVALID_LEVEL , object . get ( "level" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertResultsEqual ( renderChild ( net , addNode ) , 80.0 , 80.0 , 80.0 )
assertTrue ( facilitiesManagerEntry . getAdmins ( sess , u ) . contains ( u ) )
assertThat ( content , is ( equalTo ( pageContent ) ) )
assertEquals ( 4 , majorityElement . majorityElement ( nums ) )
assertTrue ( page . asXml ( ) . contains ( "Hello world!" ) )
assertTrue ( response . contains ( getWebContextVarDefinition ( "FULL_QUALIFIED_URL" , this . pentahoWebContextFilter . doGetDefaultRequest ( ) ) )
assertThat ( duration . isNegative ( ) , equalTo ( true ) )
assertNotNull ( todo )
Assert . assertEquals ( aString , sut . getName ( ) )
assertEquals ( msg , msgAndResponse )
assertDurationEquals ( d , t1 . minus ( t2 ) )
assertEquals ( "en-US" , h . getFirst ( HttpHeaders . CONTENT_LANGUAGE ) )
assertEquals ( "[a, b, c]" , s )
assertFalse ( configuration . isPresent ( ) )
assertNotNull ( diagnosisDao . getDiagnosis ( diagnosis . getId ( ) ) )
Assert . assertArrayEquals ( list , result )
Assert . assertEquals ( 2 , vm . getStack ( ) . size ( ) )
Assert . assertEquals ( ConnectionInterceptor . State . CLOSED , object ( ) . state ( ) )
assertNotNull ( HostedNumberOrder . fetcher ( "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "PXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertTrue ( twoBackoffIntervalsMs < ( endTimeMs - startTimeMs ) )
Assert . assertEquals ( Component . class , ComponentAt . class )
assertThat ( node . getEntities ( ) , is ( Collections . singleton ( owlClass ) ) )
assertYaml ( "" , Samples . PROJECT_STRATEGY_ROLESMAPPING_UNIQUE_KIBANA_MODE . getContent ( ) , rolesMapping )
assertThat ( slider . getValue ( ) , is ( 5.0 ) )
assertNumEquals ( "1.0" , highestValue . getValue ( 0 ) )
assertEquals ( "Expected another type of analyzer" , SimpleAnalyzer . class , analyzer . getClass ( ) )
assertThat ( handledResponse , is ( equalTo ( response ) ) )
assertEquals ( expectedSqlForMathOperations15 ( ) , result )
assertEquals ( mockQuery , queryPlan . getQuery ( ) )
assertEquals ( Result . PASS , nogroup . apply ( item ) )
assertNull ( testLong )
assertFileWithMissingRecords ( filePath )
assertTrue ( node2 . getAttributes ( ) . containsKey ( ATTR_VALUE ) )
Assert . assertEquals ( "anta怒 3 semajnoj" , p . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertEquals ( "OK" , reply )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"modelregistry/api/componenticon\\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertEquals ( "Expected 2 result!" , 2 , n )
assertNull ( "Not returning inprogressZnode" , inprogressNodePath )
assertEquals ( DEFAULT . foreground ( RED ) , style )
arrays . assertContains ( description , actual , emptyArray ( ) )
assertEquals ( "simple test" , entries . get ( 0 ) . getMessage ( ) )
assertEquals ( Collections . emptyList ( ) , descendants )
Assert . assertEquals ( "test" , sb . toString ( ) )
assertEquals ( jsonFromObject , jsonFromString )
assertEquals ( expResult , result )
Assert . assertEquals ( identificador , protocoloInfo . getIdentificador ( ) )
assertNull ( f . evaluate ( null ) )
assertIsCommitted ( tx )
assertNull ( userCache . getUser ( ) )
assertResult ( metrics )
assertEquals ( "yes" , html )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( 17 , instance . evaluations )
assertEquals ( expected , uri . toString ( ) )
assertThat ( filter . include ( artifact ) , is ( false ) )
assertThat ( actual , equalTo ( expected ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( clearCacheStatus ) )
assertFalse ( "Result should be false for public method called only from constructor." , result )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( successInterpreterResult , spyJob . result )
assertTrue ( page . asText ( ) . contains ( "MESSAGE 1" ) )
assertEquals ( expected , actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 2</th>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass\\">A1</td>\\n" + "<td class=\\"pass\\">A2</td>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass multi\\" colspan=\\"2\\">2 more rows...</td>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass multi\\" colspan=\\"2\\">2 more rows...</td>\\n" + "</tr>\\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
assertEquals ( data , new String ( baos . toByteArray ( ) , StandardCharsets . UTF_8 ) )
assertEquals ( "{\\n" + "  'player3':{\\n" + "    'board':'some_board3',\\n" + "    'boardSize':14,\\n" + "    'gameName':'game',\\n" + "    'heroesData':{\\n" + "      'coordinates':'coordinates1',\\n" + "      'group':[\\n" + "        'player3'\\n" + "      ]\\n" + "    },\\n" + "    'info':'some_info3',\\n" + "    'score':235,\\n" + "    'scores':{\\n" + "      'player3':300\\n" + "    }\\n" + "  }\\n" + "}" , JsonUtils . prettyPrint ( result ) )
Assert . assertTrue ( strategy . shouldRetry ( null , 0 , null ) )
assertFalse ( it . hasNext ( ) )
assertThat ( target . parse ( ) , is ( true ) )
assertThat ( new CodePrinter . Builder ( statement ) . setCompilerOptions ( options ) . build ( ) , equalTo ( "_$jscoverage['test.js'].branchData['4'][2].init(12,15)" ) )
Assert . assertEquals ( "Hello World" , lambda . getString ( ) )
assertEquals ( expected , actual )
assertEquals ( 200 , i )
Assert . assertNotNull ( t )
assertNull ( "The validateArgTypes() method is buggy." , sf . validateArgTypes ( argTypes ) )
assertEquals ( "OK" , sc . getReasonPhrase ( ) )
assertEquals ( entry , result )
assertTrue ( ok )
assertEquals ( "zero" , actual )
assertEquals ( 10 , version )
assertEquals ( 0 , classpath . entries ( ) . size ( ) )
assertEquals ( new AffineTransform ( 1 , 3 , 2 , 1 , 10 , 20 ) , g2 . getTransform ( ) )
Assert . assertTrue ( cubes . size ( ) == maxSize )
assertTrue ( "Timeout=" + workingTimeOut + " != " + diff , diff <= 5 )
assertResponse ( outputStream , expected )
Assert . assertEquals ( SPECIFICATION , shape . decompress ( ) . build ( ) . getSpecification ( ) )
assertThat ( t , is ( u ) )
Assert . assertEquals ( expected , testIndex . findConc ( "[word = 'jumps' | lemma = 'jump']" ) )
assertEquals ( DependendencyStatus . FORBIDDEN , oracle . assess ( access ( "foo" , "bar" ) ) )
assertNotNull ( result )
assertEquals ( originalService , event . getServiceForData ( ) )
PSLTest . assertRule ( rule , "|A| * SINGLECLOSED(+A) + |B| * SINGLECLOSED(+B) = 1.0 ." , true )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) < 'literal'" ) )
assertThat ( new SearchArgumentFilter ( searchArgument , structTypeInfo ) . accept ( corc ) , is ( false ) )
assertUrlsEqual ( expected , url )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' []+ 'Force' " ) )
assertSqlCanBeParsedAndDeparsed ( statement )
assertTrue ( "Differences: " + differences + "/" + rounds , differences > rounds * 0.9 && differences <= rounds )
assertTrue ( "Short Title empty" , constraintViolations . size ( ) == 1 )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( "Expecting the service version passed in on resource instantiation" , edmImplProv . getVersion ( ) , serviceMetadata . getVersion ( ) )
assertSame ( test1 , test2 )
assertEquals ( asList ( foo5 , foo6 ) , results )
assertEquals ( 5 , deltaDays . longValue ( ) )
assertEquals ( "[(AppNode:foo --name=value:0>16)]" , ast . stringify ( true ) )
assertThat ( testDescription . getName ( ) , is ( "Should do this" ) )
assertThat ( envelope . getValue ( ) . getMessage ( ) , is ( "test" ) )
assertEquals ( "operator" , operator . getOperator ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertThat ( locationManager . getTableLocation ( ) , is ( new Path ( "file:///abc/xyz" ) ) )
assertEquals ( possibleValues , exValues )
Assert . assertEquals ( String . format ( "some %s here" , this . html ( bb , "http://something" ) ) , formatter . format ( "some [UrL]http://something[/URL] here" , defaultOptions ( ) ) )
assertEquals ( expected , result )
assertThat ( target , is ( instanceOf ( OFPFlowActionPopPbbQuery . class ) ) )
assertEquals ( val , results . getTimestamp ( colN ) )
assertEquals ( 20 , tasks . size ( ) )
assertTrue ( nullObserver . get ( ) )
Assert . assertTrue ( response . startsWith ( "200|OK" ) )
assertTrue ( stream . idempotent )
Assert . assertArrayEquals ( "Invalid binary data" , data , dataActual )
assertSame ( objectFactory , everrestApplication . getFactory ( ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertSame ( configuration , victim . getConfiguration ( ) )
assertEquals ( mockWriter , response . getWriter ( ) )
assertEquals ( expResult , result )
Assert . fail ( "Unknown reference not found" )
assertEquals ( "{X}/" , URITemplates . getUriTemplateString ( f1 ) )
assertArrayEquals ( new int [ ] { 0 , 0 , 1 } , closed )
assertChanged ( REACHED , "/doc[17]/baskets/basket/hay" , "/doc[17]/baskets/basket[78]/hay" )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertEquals ( "200" , resolved . getRequestBody ( ) . getSchemas ( ) . get ( "MySchema" ) . get ( "MySchema" ) . get ( "MyField" ) )
assertEquals ( 0 , sqlMetadataQueryExec . driverClassesToForceMeta . size ( ) )
Assert . assertEquals ( dbvEnum . size ( ) , 1 )
Assert . assertEquals ( ImportConfirmAction . STATUS , action . execute ( ) )
assertTrue ( page . asXml ( ) . contains ( "foo:bar" ) )
org . junit . Assert . assertEquals ( expected , tHandler . getLastRecord ( ) . getThrown ( ) )
assertNotNull ( caught )
Assert . assertEquals ( "Shadow Button 1" , button . getText ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( 1 , getHistoryLength ( ) )
assertEquals ( "dest_name1" , conf . getDestinationName ( ) )
assertEquals ( 5 , x )
assertTrue ( m . nextInt ( 4 ) < 4 )
assertTrue ( "Expected the DependencyCheck report to be generated" , report . exists ( ) )
assertNotNull ( foo . tList )
assertEquals ( "Option value" , "simpleOption" , commandLine . getOption ( "simpleOption" ) )
Assert . assertEquals ( 1 , count )
assertAllTargetsCount ( 0 )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) > 0 )
assertThat ( sut . isMatch ( real , expected ) , is ( false ) )
Assert . assertEquals ( expectedGeoJson , geoJson )
assertShapeCoordinates ( boundaryEventBounds , 343 , 200 )
assertEquals ( "tz:" + tz . getID ( ) + " locale:" + locale . getDisplayName ( ) , expected , actual )
DataMockery . assertCreateREQMODWithPreTermination ( request )
assertEquals ( 2 , ksession . getFactCount ( ) )
assertInvalidQuery ( query )
Assert . assertEquals ( "ActionInvoker.ERROR_0012 - Could not invoke action \\"foo\\" locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String" + NL + "} java.util.HashMap" + NL , messages . getCouldNotInvokeActionLocally ( "foo" , params ) )
assertTrue ( result )
assertNotNull ( binding )
assertThat ( formattedValue , is ( "A big story (<a target=\\"_blank\\" href=\\"http://my.issue.tracker/MYPROJECT/browse/MYPROJECT_123\\">#MYPROJECT_123</a>,<a target=\\"_blank\\" href=\\"http://my.issue.tracker/MYPROJECT/browse/MY_PROJECT_456\\">#MYPROJECT_456</a>)" ) )
assertFalse ( result . getMap ( ) . getGlyph ( ) . isEmpty ( ) )
assertReflectionEquals ( expectedLineItem , actualLineItem )
assertTrue ( statisticManager . findTaskRunningStatisticsDaily ( ) . isEmpty ( ) )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.b = function() {\\n  custom.TestOtherInterface.type = '';\\n}" )
assertEquals ( Sets . newHashSet ( "a" , "b" ) , response )
assertEquals ( EnumTest . class , c . resolveType ( "TheInnerClass.EnumTest" ) )
assertThat ( map . size ( ) , is ( 0 ) )
Assert . assertNull ( "Interceptor was not invoked" , interceptorResult )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE (nodes.col1 IS NOT NULL " + "AND (nodes.col2 IS NOT NULL " + "AND nodes.col3 IS NOT NULL))" ) )
assertEquals ( new BigDecimal ( "9.0" ) , ticket . getDiscountPrice ( ) )
assertThat ( localTime . toString ( ) , is ( "23:07" ) )
assertThat ( statisticManager . findJobStatusTraceEvents ( ) . size ( ) , is ( 1 ) )
assertEquals ( ref , item )
Assert . assertNotNull ( profile )
assertTrue ( listenerAdded . get ( ) )
assertEquals ( true , clusterBarrierManager . manageAckBarrier ( barrierPath , nodesExpected ) )
assertEquals ( Integer . valueOf ( "1" ) , result . getValue ( ) )
assertEquals ( columnInfoList , fromConfig )
assertThat ( found , is ( equalTo ( method ) ) )
assertEquals ( "name" , plugin . toString ( ) )
assertEquals ( "counter.inc(): counter.toString()=" + counter . toString ( ) , expectedString , counter . toString ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) = 'literal'" ) )
assertThat ( this . service . readRootDirectory ( "/WEB-INF/classes" ) , is ( "/x/WEB-INF/classes" ) )
assertEquals ( npLoad , test )
assertEquals ( 3 , count )
assertThat ( tableMetas , hasItems ( tableMeta ) )
Assert . assertEquals ( "1\\n2\\n3\\n" , eval ( sb . toString ( ) ) )
assertEquals ( "" , result )
assertEquals ( expected , actual )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testEnvironment.json" ) ) )
assertSingleElementCollection ( regionClientId , executeIds )
assertEquals ( TEST_QUOTED_QUOTED_X , readQuaternion ( buf ) )
Assert . assertEquals ( 0 , output . toByteArray ( ) . length )
assertEquals ( "payload" + i , result )
assertEquals ( "Expected that pruning snapshot delay is not min." , 10000 , iotaConfig . getDelay ( ) )
assertNotNull ( processInstanceId )
assertEquals ( SliceReadStatus . StreamNotFound , slice . status )
assertNotNull ( result )
assertEquals ( witnessList , partList )
assertEquals ( "StringColumns:\\n" + "StringArray:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n" + "StringColumns:\\n" + "StringSource:\\n
assertNumEquals ( 2 , getCriterion ( ) . calculate ( series , tradingRecord ) )
assertEquals ( 1.0 , errorRatio . evaluate ( FrontUtils . convertFrontToSolutionList ( frontApproximation ) ) , EPSILON )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
listener . assertTestFailedWith ( AssertionError . class )
Assert . assertEquals ( newValue , readValue , 0.0 )
assertEquals ( IProcess . URN_XPATH_1_0_IN_BPEL_2_0 , process . getQueryLanguage ( ) )
assertEquals ( expected , mapper . valueToTree ( resource ) )
assertThat ( content , is ( nullValue ( ) ) )
runner . assertValid ( )
assertEquals ( expResult , result )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( 1 , violations . size ( ) )
Assert . assertTrue ( portA != portB )
assertEquals ( "<table>" + "<tr><th>f1</th><th>value</th></tr>" + "<tr><td>f2</td><td>100</td></tr>" + "<tr><td>f3</td><td>true</td></tr>" + "</table>" , s . serialize ( a ) )
assertThat ( output , CoreMatchers . containsString ( "Successfully wrote 2 rows" ) )
assertEquals ( body . toString ( ) , "123" )
assertTrue ( callableInterceptor . executed . get ( ) )
assertEquals ( 259 , map . getf ( 190 , 211 ) , .01 )
assertEquals ( "Set of bytes not matching any bitmask " + bitmask , expected , result )
MatrixTestAbstract . assertMatrixEquals ( e , c )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result?hint=ok'>\\n" + "<input type='hidden' name='AMOUNT' value='1000'>\\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/result?hint=ca'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CN' value='holder  name'>\\n" + "<input type='hidden' name='COM' value='code2x2, ship2, bob@doe.com, 1234'>\\n" + "<input type='hidden' name='CURRENCY' value='USD'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=ca'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CN' value='holder  name'>\\n" + "<input type='hidden' name='COM' value='code2x2, ship2, bob@doe.com, 1234'>\\n" + "<input type='hidden' name='CURRENCY' value='USD'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=ca'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CN' value='holder  name'>\\n" + "<input type='hidden' name='COM' value='code2x2, ship2, bob@doe.com, 1234'>\\n" + "<input type='hidden' name='CURRENCY' value='USD'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=ca'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://my
assertDateEquals ( r , t . plus ( d ) )
assertEquals ( String . class . getName ( ) , propertyType . getName ( ) )
Assert . assertFalse ( reuseStrategy . keepAlive ( null , response , context ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertThat ( candidateSteps . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( icmsSetado , icms . getIcms90 ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( h . toSmiles ( ) , is ( "CCOCC" ) )
assertThat ( history . getVariant ( ) , is ( AncientJulianLeapYears . SCALIGER ) )
assertEquals ( "(| (& [* fo.*] [* .*oo]) [= bar])" , m . toString ( ) )
assertThat ( TimestampInterval . parseISO ( "2012-092T14:15/P4DT1H45M" ) , is ( expected ) )
mockOutput . assertIsSatisfied ( )
assertNull ( resolvedMatrixParameter )
assertEquals ( expectedDocument , itemDocument )
assertEquals ( Helper . toJetwickSearch ( "#jobs" , "empty.xtm" ) , extractor . toSaveHtml ( "#jobs #hiring" ) )
assertEquals ( 1 , result )
assertTrue ( result . isEmpty ( ) )
assertEquals ( true , result )
listener . assertEventFired ( new SortOrder ( "foo" , SortDirection . DESCENDING ) )
assertEquals ( new Integer ( 2 ) , transform . evaluate ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "colorTest03.pdf" , sourceFolder + "cmp_colorTest03.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "a${k0}c" , nodeToStringTransformer . transform ( ) )
Assert . assertEquals ( PriorityBean . PRIORITY , job . getPriority ( ) )
assertEquals ( longKey , password . getPassword ( ) )
assertThat ( parser . parsePath ( tokens ( identifier ) , typeSystem ) , is ( identifier ) )
assertVideos ( videos )
Assert . assertTrue ( exclusion1 . equals ( exclusion2 ) )
assertThat ( int_gt_1 , rejects ( 1 , "GreaterThan <1>" ) )
assertEquals ( expected , emptyGraph . getSuccessors ( ) )
assertRequest ( "POST" , "Call/%s/Speak/" , callId )
assertEquals ( expected , actualQuery )
Assert . assertNull ( "Unexpected path" , path )
assertEquals ( "V1 Title" , wrapper . getTitle ( ) )
assertTrue ( cvs . size ( ) > 0 )
assertSame ( "Auditor re-election is not happened for auditor failure!" , auditor , newAuditor2 )
assertEquals ( "" , 0 , actual . size ( ) )
assertEquals ( argumentCaptor . getValue ( ) . getExposedPorts ( ) , expectedExposedPorts )
Assert . assertTrue ( true )
Assert . assertEquals ( assinatura , eventoManifestacaoDestinatario . getAssinatura ( ) )
assertSame ( service1 , service2 )
TestUtil . assertSuccess ( result )
assertThat ( result , is ( "LowerNwNodeId" ) )
assertEquals ( expected , actual )
assertEqualsIgnoreWhitespace ( expected , real )
assertNotNull ( result )
assertThat ( event . getExtra ( ) . get ( key ) , equalTo ( expectedValue ) )
Assert . assertEquals ( "Decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertEquals ( "Hello world!" , engine . compileMustache ( "async_helper01" , "Hello {{#async}}{{include templateName}} {{world}}{{/async}}!" ) . render ( ImmutableMap . of ( "templateName" , "template" , "world" , "world!" ) ) )
assertNotNull ( Session . reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "Expected: " + q [ 0 ] + " Actual: " + q [ 1 ] , q [ 0 ] , MainOptions . FTINDEX )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyLargeFile.pdf" , destinationFolder , "diff_" ) )
assertEquals ( 0 , result . size ( ) )
assertTrue ( mapCell . isAtSameLocationAs ( other ) )
assertEquals ( c1 , c2 )
assertThat ( returnedMode . getData ( ) , is ( instanceOf ( ReflectData . class ) ) )
assertEquals ( "value" , sub . substitute ( org ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertTrue ( page . getSuccessMessages ( ) . isEmpty ( ) )
assertSame ( policy , dest . getPolicy ( ) )
assertEquals ( "1" , r )
assertEquals ( hash , Tools . roundToDecimals ( s [ 0 ] ) )
assertEquals ( Collections . singletonList ( 9L ) , result )
assertEquals ( change . getChangeData ( ) , data )
assertThat ( SystemPropertiesHandler . getSystemProperties ( new File ( tmpDir , "unknown" ) ) , equalTo ( expected ) )
assertThat ( c . toString ( ) , is ( "myString >= aaa" ) )
assertTrue ( worker . getTimeForQueryMs ( "select * {?s ?p ?o}" , "1" ) [ 0 ] > 0 )
assertEquals ( 1 , cc . getValue ( ) )
assertEquals ( Node . ANY , n )
assertEquals ( 1 , value . value )
assertThat ( resultFilters . isEmpty ( ) , is ( true ) )
assertSizes ( validator , double [ ] . class )
assertIsomorphic ( validRDFPost , parsed )
assertThat ( actual , is ( equalTo ( n ) ) )
assertEquals ( 1 , stat . getDev ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Rejecting illegal call to synthetic constructor: private Subclass(org.kohsuke.groovy.sandbox.impl.Checker$SuperConstructorWrapper). " + "Perhaps you meant to use one of these constructors instead: public Subclass(), public Subclass(int,int)" ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertFalse ( lhs . equals ( rhs ) )
assertSame ( expectedResp , FutureUtils . result ( rrStore . getNamespace ( expectedReq ) ) )
assertThat ( result , is ( true ) )
assertEquals ( "3 vuosituhannen p盲盲st盲" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertEquals ( result . build ( ) . find ( ArrayElement . class , "values" ) . get ( 0 ) . getEntries ( ) , myTestInstance . groupBy ( builder ) . toList ( ) )
Assert . assertEquals ( Character . valueOf ( 'F' ) , node . getIncomingEdgeFirstCharacter ( ) )
assertOut ( "visible=\\"false\\"" )
assertEquals ( superClass . hashCode ( ) ^ Objects . hashCode ( value ) , doublePrecisionFloat . hashCode ( ) )
assertEquals ( ( ( Number ) results . iterator ( ) . next ( ) . getValue ( ) ) . intValue ( ) , 43 )
assertThat ( storedProcResultAsString , equalTo ( "\\"my temp value\\"" ) )
assertEquals ( getExpectedItemSize ( allStrings ) , DynamoDBUtil . getItemSizeBytes ( item ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
Assert . assertEquals ( result , aggregator . getResult ( 0 ) )
assertEquals ( "4>5 \\n 6" , AviatorEvaluator . execute ( "4>5 \\n 6" ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TagUtils . getTaggedCommit ( "source_tag" , repo ) , BranchUtils . getHeadCommit ( "test_branch" , repo ) )
assertNotNull ( "PlacementChangeRequest is null" , entity )
assertEquals ( date , avg )
assertEquals ( "abc" , ent . getName ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertEquals ( "<<<<<<< refs/heads/ours\\n" + "base stuff + some stuff\\n" + ">>>> refs/heads/theirs\\n" , readAsString ( gfs . getPath ( "/test_file.txt" ) ) )
Assert . fail ( "Expected failure for an invalid conversion result." )
assertEquals ( 0 , instance . getInterfaces ( ) . size ( ) )
assertNotNull ( result )
assertNull ( "Should not find user" , MCRUserManager . getUser ( this . user . getUserName ( ) , this . user . getRealm ( ) ) )
assertFalse ( kieModule instanceof CanonicalKieModule )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
Assert . assertEquals ( expResult , result )
assertTrue ( foundSetting )
assertNotNull ( appContext . getResourceDocument ( new StringBufferInputStream ( xml ) ) )
Assert . assertNotNull ( response )
assertThat ( referenceSet , is ( ontologyId ) )
assertTrue ( connectFuture . isConnected ( ) )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( "Firstealealies are here" , firstLoyaltyAbilityRulesText )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "1 test case was supposed to be created" , 1 , foundTestCases . size ( ) )
assertEquals ( mav . getViewName ( ) , "redirect:/outbox" )
Assert . assertFalse ( context . getResult ( ) )
assertArrayEquals ( result , ByteArray . getAllBytes ( aggregator ) )
assertNotNull ( Country . reader ( ) . read ( ) )
assertEquals ( "uuml 眉" , p . getNameFirstRep ( ) . getFamilyFirstRep ( ) . getValue ( ) )
assertEquals ( expected , result )
Assert . assertEquals ( "AroundConstructPostConstruct" , bean . getMessage ( ) )
assertTrue ( "Should return true because the exception was resolved" , result )
assertEquals ( "<b>foo</b>" , unrender . get ( 0 ) . getText ( ) )
assertEquals ( q , result . getOrderQ ( ) )
assertEquals ( "abc" , sb . toString ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertNotNull ( addressResultsDto )
paths . assertHasDigest ( INFO , actual , digest , expected )
assertArrayEquals ( " { 'BSON': ['awesome', 5.05, 1986] } not the expected bytes." , arrayDocument , out . toByteArray ( ) )
assertCurrentTestFileName ( currentHtmlFileName )
assertEquals ( 1 , buffer . get ( ) )
assertThat ( ages , everyItem ( greaterThanOrEqualTo ( 18 ) ) )
assertLastEventIsType ( ChartClickEvent . class )
assertTrue ( onto . containsAxiom ( factory . getOWLDatatypeDefinitionAxiom ( factory . getOWLDatatype ( IRI . create ( tns , "Decimal" ) ) , OWL2DatatypeImpl . getDatatype ( OWL2Datatype . XSD_DOUBLE ) ) ) )
assertThat ( manager . register ( "foo" ) , is ( 123L ) )
this . assertServiceInstanceGetRequest ( serviceInstance , false , "failed" )
assertFalse ( post . getTopic ( ) . getSubscribers ( ) . contains ( user ) )
Assert . assertEquals ( 0.0 , a . product ( ) , 1e-5 )
assertEquals ( 1 , countValue )
assertTrue ( closed . await ( 2 , SECONDS ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertOut ( "var /** @type {*} */ a = ((a + b) - (c + d)) * e" )
assertThat ( p , is ( nullValue ( ) ) )
assertEquals ( "one" , sb . toString ( ) )
assertNotNull ( testee )
assertEquals ( i , list . head ( ) . get ( ) )
assertEquals ( expResult , result )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( itemExportacaoIndireta , detalheExportacao . getExportacaoIndireta ( ) )
assertTrue ( Double . valueOf ( f ) . equals ( output . get ( ) ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
Assert . assertTrue ( result . equals ( "11 minutoj" ) )
assertTrue ( hasNoise )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThat ( actualExceptionCode , is ( "bus001" ) )
assertThat ( result ( ) , not ( containsString ( "\\"comments\\"" ) ) )
Assert . assertTrue ( false )
assertEquals ( 8 , someNotSoRandomAsciiAsList . size ( ) )
assertTrue ( stack . getDurability ( ) == potion . toDamageValue ( ) )
Assert . assertEquals ( Arrays . asList ( record1 , record2 , record3 , record4 , record5 ) , listToSort )
assertNotNull ( monitorConfig . getIsMonitoringConfig ( ) )
assertNotNull ( result )
Assert . fail ( "Was able to set properties when referencing sensitive parameter from within EL" )
Assert . assertTrue ( isKeyEntity )
assertThat ( s1 , containsString ( str ) )
assertTrue ( "Entity(true) entity validation failed" , schema . validate ( booleanEntity ) )
assertEquals ( expected , membersFiltered . getTags ( ) )
assertArrayEquals ( expected , actual )
assertEquals ( RESULT , result )
assertions . isNotEqualTo ( actual )
assertTrue ( lines . stream ( ) . anyMatch ( l -> l . contains ( "Hello: World!" ) ) )
assertEquals ( expected , result )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertTrue ( detector . evaluate ( "" , 10 , 10 ) )
assertThat ( parse ( contents ) , contains ( map ( "value" , new DoubleOption ( 1 ) ) ) )
assertEquals ( r1 , r2 )
assertTrue ( true )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( new ParseResult ( new Doc ( "ParserTest" , Pkg . _Pkg ( list ( _JavaEOLComment ( "//a pre-start comment" ) , _JavaEOLComment ( "//a start comment" ) ) , "hello.world" ) , list ( _Imprt . _Imprt ( list ( IMPORTS_COMMENT ) , "wow.man" ) , _Imprt ( NO_COMMENTS , "flim.flam" ) ) , list ( new DataType ( list ( _JavaEOLComment ( "//an annotation comment" ) , _JavaEOLComment ( "//datatype comment" ) ) , list ( _Annotation ( "foo" , Optional . < AnnotationElement > _None ( ) ) , _Annotation ( "foo" , _Some ( _ElementValue ( _Annotation ( "bar" , Optional . < AnnotationElement > _None ( ) ) ) ) ) , "FooBar" , NO_FORMAL_TYPE_ARGUMENTS , NO_EXTENDS , NO_IMPLEMENTS , list ( new Constructor ( list ( _JavaEOLComment ( "//equal comment" ) , _JavaEOLComment ( "//constructor comment" ) ) , "foo" , Util . < Arg > list ( ) ) , new Constructor ( list ( _JavaEOLComment ( "//bar comment" ) , _JavaEOLComment ( "//really a bar comment" ) ) , "bar" , list ( new Arg ( Util . < ArgModifier > list ( ) , _Primitive ( _IntType ( ) ) , "hey" ) , new Arg ( list ( _Final ( ) ) , _Ref ( _ArrayType ( _Ref ( _Ref ( _ArrayType ( _Ref ( _Ref ( "//a pre-start comment" ) , _JavaEOLComment ( "//a start comment" ) ) , _Primitive ( _IntType ( ) ) , "hey" ) , _Ref ( _ArrayType ( _Ref ( _ArrayType ( _Ref ( "//a start comment" ) , _JavaEOLComment ( "//really a bar comment" ) ) , "bar" , list ( new Arg ( Util . < ArgModifier > list ( ) , _Primitive ( _IntType ( ) )
assertEquals ( ko1 , ko2 )
assertEquals ( indexRollover1 , indexRollover2 )
assertNull ( "The result should be null." , config )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasEnvVar ( "item1" , "ADMIN_SERVER is ADMIN_SERVER:7001" ) , hasEnvVar ( "item2" , "ADMIN_SERVER is ADMIN_SERVER:7001" ) ) )
assertEquals ( 591 , orbitFiles . length )
assertEquals ( "FRED" , name )
assertTrue ( match )
Assert . assertTrue ( "this should not exist" , isDir )
Assert . assertNotNull ( savedBook . getBookId ( ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertArrayEquals ( expected , dest . getBytes ( ) )
Assert . assertEquals ( value , nextValue )
assertNull ( "Analyzer must be null" , mapper . analyzer )
Assert . fail ( "RuntimeException should be thrown!" )
assertNotNull ( reporter )
assertNotNull ( decorator )
assertEquals ( "test email" , reply )
Assert . assertNotNull ( result )
assertNotNull ( proveedorFacturas . getId ( ) )
Assert . assertEquals ( 1.5 , f15 . getPartialDerivative ( 1 ) , 0 )
assertSame ( tokenCell ( 1 ) , sync . getPair ( ( TextTokenCell ) tokenCell ( 0 ) ) )
assertEquals ( keyExpected , keyBuilt )
assertEquals ( expect , strategy . write ( new FunctionData6 ( ) ) )
assertEquals ( expectedKeys , actualKeys )
assertFalse ( "syntax OID should no longer be present" , schemaManager . getSyntaxRegistry ( ) . contains ( OID ) )
assertParser ( twig )
assertTrue ( diff . toString ( ) , diff . similar ( ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"newCategory\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
assertEquals ( expResult , result )
assertThat ( del . getDeadline ( ) , is ( deadline ) )
assertEquals ( "txt" , new String ( Files . readAllBytes ( tmp . toPath ( ) ) ) )
assertNull ( "was supposed to pass" , status )
assertNull ( GeodeticDatum . ANCHOR_POINT_KEY , properties . put ( GeodeticDatum . ANCHOR_POINT_KEY , "Origin Z" ) )
assertEquals ( 1 , result . size ( ) )
Assert . assertNotNull ( "null data object" , dataObject )
assertThat ( builder , hasToString ( "<a class=\\"mybutton\\" style=\\"display:none;\\"" + " href=\\"https://flattr.com/thing/123546/a-demo-thing\\">" + "<img src=\\"http://api.flattr.com/button/flattr-badge-large.png\\"" + " width=\\"93\\" height=\\"20\\" alt=\\"Flattr this\\" title=\\"Flattr this\\" border=\\"0\\" />" + "</a>" ) )
assertThat ( allowed , is ( true ) )
assertTrue ( listEditor . getList ( ) . isEmpty ( ) )
assertThat ( DatastoreUtil . referenceToKey ( reference ) , is ( key ) )
Assert . assertEquals ( dbLoadBalancers , dbLoadBalancers1 )
Assert . assertEquals ( 2 , detailC . size ( ) )
Assert . assertNotNull ( cnx )
assertEquals ( 1 , idx )
assertEquals ( 1 , fetchIterationLimit )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( short [ ] . class ) )
assertThat ( condition . isSatisfied ( ) , is ( true ) )
assertArrayEquals ( new String [ ] { "DOB_20010101" , "DOB_20020202" , "DOB_NONE" } , matches ( query , Tag . PatientID ) )
assertResultSet ( res )
assertNull ( "Header 'authorization' should be null if no header present" , provider . getHeader ( AUTHORIZATION ) )
assertThat ( cb . getForwardCallback ( ) , sameInstance ( mockResults ) )
Assert . assertEquals ( true , a . compareTo ( b ) == 0 )
Assert . assertEquals ( "somethingmock" , ret . getValue ( ) )
assertOut ( "var /** @type {Object} */ a = Object(\\"1\\")" )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
Assert . fail ( e . getMessage ( ) )
assertEquals ( 1 , outputs . size ( ) )
assertResultsEqual ( results , 42.0 )
assertTrue ( true )
assertEquals ( "mickey@disney.com" , descriptor . getListId ( ) )
assertEquals ( "UNKNOWN_ID" , recordResultSet . getMetaData ( ) . getRecord ( "UNKNOWN_ID" ) . getIdentifier ( ) )
assertEquals ( forwardInfo , clone )
assertEquals ( "fileName-" + TIMESTAMP + ".js" , result )
assertEquals ( 1 , trace . allProperties ( ) . size ( ) )
assertEquals ( Status . OK . getStatusCode ( ) , updated . getStatus ( ) )
Assert . assertEquals ( i , InetAddress . getByName ( "10.0.0.2" ) )
assertEquals ( null , result )
assertFeatureValues ( expected , testQuery , testText , new UnigramFeatureExtractor ( ) )
assertArrayEquals ( result , new byte [ ] { 0x0 , 0x1 } )
assertEquals ( "table width must be equal to viewport" , table . getWidth ( ) , scrollPane . getViewport ( ) . getWidth ( ) )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location (nt_number 123)) (nt_offset - (nt_number 4)))" , loc . toStringTree ( parser ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "2_4" , "3" , "4" , "5" , "6" , "7" ) ) )
assertThat ( f . format ( PlainDate . of ( 2017 , 10 , 1 ) ) , is ( "Sunday, October 1, 106 Minguo" ) )
assertEquals ( DEFAULT_LIMIT , dureation )
assertFalse ( content . contains ( "Category:�板��" ) )
assertEquals ( "http://example.org/AS3546" , subject . getUri ( ) )
Assert . assertNotNull ( historyProxy )
assertThat ( router . allRoutes ( ) , hasItem )
assertEquals ( expected , result )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Rooms('3')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Rooms('3')\\",\\"type\\":\\"RefScenario.Room\\"," + "\\"etag\\":\\"W/\\\\\\"3\\\\\\"\\"}," + "\\"Id\\":\\"3\\",\\"Name\\":\\"Room 3\\",\\"Seats\\":2,\\"Version\\":3," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Rooms('3')/nr_Employees\\"}}," + "\\"nr_Building\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Building\\"}}," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Employees\\"}}," + "\\"nr_Building\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Building\\"}}," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Building\\"}}," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Building\\"}}," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Building\\"}}," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Buildings('2')/nr_Building\\"}}}}" , getBody ( response ) )
assertEquals ( 20 , tasks . size ( ) )
assertDocContent ( doc )
assertFalse ( empty . addModel ( new Cube ( 10.0 ) ) )
assertEquals ( NetPlan . getNetElementByAttribute ( Arrays . asList ( n1 , n2 , n3 ) , "att" , "2" ) , n2 )
assertTrue ( "Tag should be true" , expectedTag )
Assert . assertEquals ( HttpURLConnection . HTTP_FORBIDDEN , conn . getResponseCode ( ) )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertEquals ( first , builder . getValue ( ) )
assertNull ( userArg . getValue ( ) )
assertEquals ( globals . size ( ) , tree . getModelObject ( ) . getChildCount ( tree . getModelObject ( ) . getRoot ( ) ) )
assertEquals ( "aTestString" , classUnderTest . getClientName ( ) )
Assert . assertEquals ( "curl -X GET -L 'https://eatstreet.com/api/v2/CitiesByState.json' GET -L 'https://eatstreet.com/api/v2/CitiesByState.json' POST -L 'https://eatstreet.com/api/v2/CitiesByState.json' POST -L 'test-cookie' GET -L 'test-cookie' GET -L 'test-value2' GET -L 'test-value4' GET -L 'test-value3' GET -L 'test-value4' GET -L 'test-value4' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET -L 'test-value5' GET
assertThat ( text ( contents ) , is ( "120000000000\\n" ) )
assertEquals ( timeFrameEditor . isFirstMonthAvailable ( ) , true )
assertColumnFamilyResource ( resource , true )
assertEquals ( 0 , result . size ( ) )
assertEquals ( String . format ( p , r . getMillis ( ) ) , cf . format ( r ) )
assertThat ( formatMsg ( jmc , OBJ_MSG ) , is ( OBJ_MSG ) )
assertEquals ( actual , expected )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertMapping ( node , 0 , 15 , 0 , 0 , 16 )
Assert . assertEquals ( 5 , es . size ( ) )
TestUtils . assertBuildSuccess ( build )
assertNull ( user )
assertTrue ( properties . isEmpty ( ) )
assertEquals ( originalText , scriptPanel . getText ( ) )
assertEquals ( 1000 , ( int ) ( store2 . getChokeMap ( "logical-watch" ) . get ( "a" ) ) )
assertEquals ( personList . length , 2 )
assertEquals ( "Wrong type" , UNSUPPORTED_PARAMETER_TYPE , generator . formatTypeName ( UNSUPPORTED_PARAMETER_TYPE ) )
assertTrue ( database . removeEmployee ( "E1" ) )
assertTrue ( namespace . getUsers ( ) . size ( ) == 1 )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
Assert . assertTrue ( reason , reason . contains ( "nope" ) )
assertEquals ( "SQL to update records" , "UPDATE " + tableName ( TEST_TABLE ) , testDialect . convertStatementToSQL ( stmt ) )
assertArrayEquals ( asciiData , binaryData , 0.001f )
assertEquals ( null , instance . getChild ( ) )
assertEquals ( "Salty" , helper . getStringValue ( "flavour" ) )
assertResponse ( outputStream , expected )
assertOut ( "this[\\"knownMember\\"]" )
assertMockEndpointsSatisfied ( )
assertThat ( requests , is ( 1 ) )
assertEquals ( "All items minus one selection iteration result" , "[a, c, d, e, f]" , IterableUtil . shallowCopy ( selection ) . toString ( ) )
assertEquals ( 80. , stateManager . getActivityState ( route . getActivities ( ) . get ( 1 ) , vehicle , InternalStates . LATEST_OPERATION_START_TIME , Double . class ) , 0.01 )
assertEquals ( "Incorrect number of roles" , 0 , roles . size ( ) )
assertThat ( c . toString ( ) , is ( "myString = aaa" ) )
assertSame ( expectedT , t )
assertThat ( plugins , hasItems ( runningInForumPlugins ) )
assertOptionsSetViaConfigurator ( )
Assert . assertEquals ( createArrayNode ( 1 , 2 , 3 ) , result )
assertNull ( "Conversion did not match" , to )
Assert . assertEquals ( 0 , fileredInvokers . size ( ) )
this . assertAnalyzesTo ( _a , "{\\"foo\\":true}" , new String [ ] { "foo" , "true" } , new String [ ] { TypeAttribute . DEFAULT_TYPE , "<NUM>" } )
assertEquals ( result , "10:15 AM" )
assertEquals ( value , evaluated )
assertException ( "FEEL-01015" , "''" , "'camunda'" , "12" , "'true'" , "\\"false\\"" )
assertEquals ( "A" , respPayload . substring ( 0 , 128 ) )
Assert . areEqual ( true , countA < 10 && countB < 10 , "countA值" )
assertEquals ( "failed to generate class with jsnimethod" , CLASS_WITH_JSNIMEThod , cls )
assertEquals ( asList ( warn ( mdcValues , marker , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "2017-01-19 05:05:59" , spec . interpret ( "1484802359000" ) )
assertNotNull ( render . getRuleRenderOptions ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 1 , scheduler . getJobExecutions ( ) . size ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( expected , result )
assertEquals ( now , target . getCreatedOn ( ) )
assertEquals ( "Global" , binningFormModel . getRegion ( ) )
Assert . assertEquals ( position , lastPosition )
assertEquals ( "bug" , bout . toString ( ) . trim ( ) )
assertUrl ( url , "http" , "localhost" , 80 , "/" )
assertEquals ( "locationUpdate" , subscriptionRequest . getValue ( ) . getSubscriptionName ( ) )
assertThat ( result , is ( Arrays . copyOfRange ( data , 0 , 2 ) ) )
Assert . assertTrue ( bd . compareTo ( exp ) == 0 )
assertEquals ( "cha_rs" , person . getName ( ) . getFamilyName ( ) )
assertEquals ( "sort field condition serialization is wrong" , expected , actual )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( NOT_FOUND . getStatusCode ( ) , response . getStatusCode ( ) )
assertStreamOpenedExactlyOnce ( )
assertEquals ( 400 , fail )
assertTrue ( "This" . equals ( form . firstName . getValue ( ) ) )
assertEquals ( "Spilled records should be assigned to the output collector" , 0 , out )
assertFalse ( outputGraphExecutor . equals ( nullOutput ) )
Assert . assertTrue ( httpAcceptor . emptyBindings ( ) )
Assert . assertEquals ( "2016-07-12" , result )
assertThat ( codes , containsInAnyOrder ( "45" , "45" , "45" , "45" ) )
assertEquals ( "The output is correct" , message , poll ( ) )
assertEquals ( "Click listener" , getLogRow ( 0 ) )
assertEquals ( expResult , result )
assertNull ( cfg . primeNumber ( ) )
assertThat ( requestContext . isSecure ( ) , is ( true ) )
assertEquals ( field . getXrefLabelNames ( ) , Arrays . asList ( "xrefEntity" , "xrefEntity.1" , "xrefEntity.2" , "xrefEntity.3" ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
Assert . assertEquals ( PRIO_NODE , compoundWrite . apply ( PRIO_NODE ) )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
Assert . assertEquals ( "12.0" , result . toPlainString ( ) )
assertFalse ( agent . needsModelStarted ( ) )
assertTrue ( enumValuesSet . isEmpty ( ) )
Assert . assertNotNull ( zoo )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { assetDocument , "jexlexpression" , "*" , repoToContainedGroupMap } , null ) , is ( false ) )
Assert . assertEquals ( n , Long . valueOf ( i ) )
assertThat ( guid ( ) , is ( "12345678-1234-1234-1234-1234-123456789ABC" ) )
assertThat ( contributors , hasSize ( 1 ) )
assertEquals ( expecting , result )
assertEquals ( spec , ctn . toDSL ( ) )
assertTrue ( s . startsWith ( "str in com.querydsl.core.DefaultQueryMetadata@c" ) )
assertNotNull ( compassDropController )
assertEquals ( 1 , filter . filter ( aciContext , OperationScope . ENTRY , null ) . size ( ) )
assertTrue ( references . isEmpty ( ) )
assertEquals ( 0 , g . size ( ) )
assertOut ( "a *= b" )
assertEquals ( "1 a 2 3\\n" , found )
assertEquals ( g1 . order ( ) , g2 . order ( ) )
assertEquals ( "The retrieved Product Name andBrand Name should be the same" , brand , returnedItem . getItemName ( ) )
JSONAssert . assertEquals ( expected , data , false )
assertThat ( entities . getTotalElements ( ) , equalTo ( 1L ) )
Assert . assertEquals ( 0 , results . size ( ) )
assertTrue ( deleteSecurityGroupIPSetsResponse . getRet_code ( ) == 0 )
Assert . assertTrue ( result . isEmpty ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
Assert . assertTrue ( ! dict . contains ( entry2 ) )
assertNotNull ( services )
assertEquals ( 10 , routeState . get ( 0 ) )
assertNull ( dsc . getPanel ( ) )
assertThat ( exception . getMessage ( ) , containsString ( "No JSON object" ) )
assertSame ( user , cache . get ( id ) )
assertEquals ( "wrong number of facts" , 2 , fh . getObjects ( ) . size ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( aNumber == result )
Assert . assertEquals ( "{\\"firstName\\":\\"John\\",\\"lastName\\":\\"Doe\\"}" , result )
assertEquals ( 5 , hg19 . size ( ) )
assertEquals ( l1 , l2 )
assertEquals ( row . isPresent ( ) , false )
assertNull ( dao . getDraft ( topicId ) )
assertEquals ( "Removal failed" , 0 , newPerms & Perms . CREATE )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "test" , echo . echo ( "test" ) )
Assert . assertEquals ( 6 , p . h ( 4 ) )
assertThat ( exec . isTerminated ( ) , is ( false ) )
assertEquals ( algorithm , digest )
Asserts . check ( targetHosts . size ( ) > 0 , "fail setTargetHostsFromJsonPath setTargetHostsFromUrl" )
assertEquals ( 2 , trends . size ( ) )
Assert . assertNotNull ( driver . findElement ( By . xpath ( "//*[@class='sheet-tabsheet-container']//*[text()='new_sheet_REnamed']" ) ) )
assertEquals ( request . getRemoteHost ( ) , result )
assertEquals ( "d189225fbecb12296349d548fef503bc095fbc827dfd442706e48b8965eea482" , block . getHashAsString ( ) )
assertEquals ( date , emptySession . getEnd ( ) )
assertEquals ( "Base16Encoder converts to base16" , BaseEncoding . base16 ( ) . encode ( convertedSalt ) , "base16" )
assertEquals ( "range condition serialization is wrong" , expected , actual )
Assert . assertEquals ( result1 , result2 )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( "test-value" , clientWrapper . get ( "key1" ) )
Assert . assertTrue ( result )
assertNull ( getParameterRepositoryService ( ) . getParameterValueAsBoolean ( key ) )
assertEquals ( "Hibernate Master Class" , _post . getTitle ( ) )
assertStyleEquals ( ".xyz { font: bold;} A { color: #7f7f7f}" , styleSheet )
assertEquals ( "hello" , result )
assertEquals ( expectResult , result )
assertEquals ( 1 , capturedEvent . getValue ( ) . getFirstIndex ( ) )
Assert . assertEquals ( "myButton" , b . getText ( ) )
Assert . fail ( "InvalidFormatException must be thrown" )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
lowLevelElasticSearchOperations . assertThatConnectionToElasticsearchIsPossible ( anyString ( ) , anyInt ( ) )
assertThat ( localName , is ( "thename" ) )
assertEquals ( DecodeQualification . SUITABLE , readerPlugIn . getDecodeQualification ( headerFile . getName ( ) ) )
assertOut ( "a.setTime(10)" )
assertTrue ( true )
assertEquals ( 1 , myTestInstance . insertAsync ( doc ) . get ( ) )
assertEquals ( new BigDecimal ( "11" ) , lambda . apply ( BigDecimal . ONE , BigDecimal . TEN ) )
Assert . assertTrue ( new File ( jar ) . exists ( ) )
assertStat ( result )
assertGridBodyCellEditContext ( editContextArgumentCaptor . getValue ( ) , 1 , 1 , ROW_HEIGHT * 2 , col2 . getWidth ( ) , GRID_ABSOLUTE_Y + HEADER_HEIGHT , GRID_ABSOLUTE_X + col1 . getWidth ( ) , GRID_ABSOLUTE_Y + HEADER_HEIGHT , visibleBounds . getX ( ) )
assertScoreAndParse ( content , null , 1 )
Assert . assertEquals ( "[1, 2, 3, 4, 6, 7, 5]" , result . toString ( ) )
Assert . assertTrue ( isEqual ( distance , 0 ) )
assertValidLicenseKeyFormat ( licenseKey )
assertThat ( fileConfig . getConfigProperties ( ) , contains ( configProperty ( TRIM_TRAILING_WHITESPACE , false ) ) )
assertThat ( upstreamPipelines . size ( ) , is ( 0 ) )
assertEquals ( "echo 'hello world'" , lclp . toCommand ( env ) )
assertNotNull ( "Resource not found" , in )
assertEquals ( 1 , reports . size ( ) )
assertMigratedTo ( processInstance , targetDefinition )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Message action=\\"https://example.com\\" method=\\"GET\\" statusCallback=\\"https://example.com\\">body</Message>" , elem . toXml ( ) )
Assert . assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( ImmutableList . of ( 1 , 2 , 3 ) , ImmutableList . copyOf ( evaluate ( "${iter}" , Iterable . class ) ) )
arrays . assertStartsWith ( description , actual , null )
assertEquals ( "Wrong constructed key" , "key..test.more.tests" , key . toString ( ) )
assertEquals ( entry2 , foundEntry )
assertThat ( testOutcome . getPendingCount ( ) , is ( 3 ) )
assertThat ( ebs1 , not ( equalTo ( ebs2 ) ) )
assertEquals ( "wrapping renderer must use list's default on null" , custom , renderer . getDelegateRenderer ( ) . getClass ( ) )
assertTrue ( c . getDeclaredMethods ( ) . contains ( "registerAlertFiredEvent" ) )
assertEquals ( statsFile2 , bestStats )
assertEquals ( events , resp . getAll ( ) )
assertEquals ( 0 , payload . getTags ( ) . size ( ) )
assertThat ( result , isFailedCommand ( ) )
Assert . assertEquals ( expected , json )
assertEquals ( "2015-10-05" , mo . getDateWrittenElement ( ) . getValueAsString ( ) )
assertThat ( document , is ( nullValue ( ) ) )
assertTrue ( s . stopCalled )
assertEquals ( "getSongs/path" , Names . resourceMethodName ( resource , method ) )
assertTrue ( or . isDefined ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , slices , rows , columns ) + ", rmse = " + rmse , 0.0 , rmse , EPSF )
assertTrue ( "Alphabet not correctly reverse sorted" , result )
assertFalse ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) )
assertHeader ( header , name , value )
assertThat ( config . getBasePackages ( ) , is ( new String [ ] { } ) )
assertThat ( r . reduce ( Arrays . asList ( 5.0 , 1.0 , 4.0 ) ) , equalTo ( 5.0 ) )
assertTrue ( descriptor . isBeanConstrained ( ) )
assertThat ( objectMapper . writeValueAsString ( dto ) , equalTo ( "{\\"twoWords\\":\\"value\\"}" ) )
assertEquals ( fileId , mFileSystemMaster . getFileInfo ( NESTED_FILE_URI , GET_STATUS_CONTEXT ) . getFileId ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( new BigInteger ( "1" ) , bookCount )
assertEquals ( expectedSqlForMathOperations7 ( ) , result )
assertEntityHasValue ( key , value )
assertEquals ( "PONG" , proxy . getBookStore ( ) . get ( 0 ) . getName ( ) )
assertEquals ( count , 2 )
assertEquals ( "Wrong rule" , rule , incompleteActivationRule . getRule ( ) )
assertThat ( builder . toSettings ( ) . isAllowRespondByVRK ( ) , is ( true ) )
assertNull ( element . getEditType ( ) )
assertEquals ( "../subFolder1/fileName1" , relPath )
assertNotNull ( obj )
assertRequest ( "POST" , "Conference/%s/Member/%s/Speak/" , confId , memberId )
assertEquals ( "Chuck Norris" , victim . readLiteralString ( ) )
assertEquals ( 200 , containerResponse . getStatus ( ) )
assertEquals ( res , 1 )
assertMessage ( "<type>REASSIGNED</type>" , 4 )
assertions . isLessThan ( expected )
assertEquals ( Arrays . asList ( "fired" , "sumOf" , "wrong" ) , rule . getFiredRules ( ) )
assertEquals ( expectedRestriction , restriction )
assertEquals ( "inet mapper serialization is wrong" , expected , actual )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertFalse ( hasIndexRangeKeyCondition )
assertEquals ( GOOD_IP , credentials . getIp ( ) )
assertEquals ( "message with 2 cookies and milk" , logRecord . getMessage ( ) )
assertTrue ( crsStore . getNTV ( ) . getName ( ) . equals ( "NTV" ) )
assertEquals ( expectedJson , json )
assertEquals ( "Wrong IncludeListener" , includeListener , configuration . getIncludeListener ( ) )
Assert . assertEquals ( Permission . YES , providerPermission )
assertEquals ( cal . getTime ( ) , d . getEnd ( ) )
assertEquals ( "/a/b/c" , path . toString ( ) )
assertEquals ( value , things . iterator ( ) . next ( ) )
assertObjectEquals ( "[{f1:'x1'},null]" , p . run ( bs , in , sa ) )
assertEquals ( - 2 , ex . getMax ( - 2 , - 2 ) )
assertTrue ( resultFromJPQL . size ( ) == 1 )
assertEquals ( allocator . wrap ( ByteBuffer . wrap ( expect ) ) , out )
assertEquals ( "URI is not built correctly" , "http://bar/foo%20%20%2B?q=a%20b%20%2B" , newUri . toString ( ) )
assertThat ( result , is ( jsonBoolean ( false ) ) )
assertEquals ( expected , result )
assertEquals ( "2014-06-24 09:33:49" , format . format ( getDateWithZoneOffset ( 1403602429504L ) ) )
Assert . assertTrue ( state [ i ] == expected )
assertThat ( target . matchExactly ( ( FlowAction ) action ) , is ( true ) )
assertEquals ( "UVWXY" , targetId . textValue ( ) )
assertEquals ( m1 , m2 )
Assert . assertTrue ( isEqual ( distance , 0 ) )
Assert . assertFalse ( "SearchByTags returned no results" , jsonList . isEmpty ( ) )
Assert . assertEquals ( 1L , vm . getStack ( ) . pop ( ) )
assertThat ( token . getType ( ) , is ( PCRELexer . POSIXNamedSet ) )
assertEquals ( TestModel . class , model . getModelClass ( ) )
assertTrue ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertEquals ( "0" , result . toString ( ) )
assertTrue ( p1 . equals ( p2 ) )
assertEquals ( expResult , result , 0.01f )
assertTrue ( authorizer . isAuthorized ( MockWebContext . create ( ) , profiles ) )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertThat ( t . getName ( ) , notNullValue ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Empty selection returned" , "[]" , selection . toString ( ) )
assertTrue ( "p2 is assigned to g1 and g1 assigned to r2" , roleService . principalHasRole ( "p2" , roleIds , Collections . < String , String > emptyMap ( ) ) )
assertEquals ( "dubbo://127.0.0.1:20887" , result )
Assert . assertEquals ( RheemCollections . asSet ( - 1 + expectedOffset , 1 + expectedOffset , 5 + expectedOffset ) , RheemCollections . asSet ( result ) )
assertEquals ( TestService . SERVICE , TestService . get ( ) )
assertTrue ( instance . runCommand ( ) )
assertEquals ( root . getPermissionList ( ) . size ( ) , 4 )
assertThat ( index . getNode ( 3 ) , is ( notNullValue ( ) ) )
assertEquals ( "XML Equals" , jdkXml , javolutionXml )
assertEquals ( "PUBLIC" , tables . iterator ( ) . next ( ) )
assertEquals ( "http://localhost:8080" , client . getBasePath ( ) )
assertEquals ( 208 , stopTimes . size ( ) )
assertEquals ( 0 , peopleIds . size ( ) )
Assert . assertEquals ( 100 , count )
assertEquals ( 1 , new ArrayList < > ( results . values ( ) ) . get ( 0 ) . getWidgetUsages ( results . values ( ) ) . size ( ) )
assertEquals ( aNumber , Float . valueOf ( aNumber ) , 0.0f )
assertUpdate ( result , 1 )
assertNotNull ( response )
assertAllTargetsCount ( 0 )
assertTrue ( attributes . isNew ( ) )
Assert . assertEquals ( "groupid" , gid )
assertThat ( I18nUtil . marktr ( TEST_STRING ) , is ( TEST_STRING ) )
assertEquals ( "Does not compare " + nv5 + " & " + nv7 , NodeValue . CMP_GREATER , NodeValue . compare ( nv5 , nv7 ) )
Assert . assertEquals ( '\\'' , decChar )
Assert . assertEquals ( ANY , desc . getImplementation ( ) )
assertAllCodesOfSubChainSelector ( subChainSelector , "solution" )
assertEquals ( userAddCL1 , userAddCL2 )
assertEquals ( UberfireDockPosition . NORTH , tested . getDockPosition ( ) )
assertEquals ( 20. , violation , 0.01 )
assertEquals ( "one,two,three" , elr . getMessage ( ) . toString ( ) )
assertTrue ( m . isIsomorphicWith ( m2 ) )
Assert . assertEquals ( "did not add file to sha256 file" , 1 , actual . length )
assertThat ( gson . fromJson ( gson . toJson ( ldt ) , LocalDateTime . class ) , is ( ldt ) )
assertEquals ( expResult , result )
assertTrue ( userCanBuildProject )
assertEqualDoubleArrays ( pydiv , div , epsilon )
Assert . fail ( "should have failed due to null result" )
Assert . assertEquals ( "The class:\\n" + oc , sw . toString ( ) . replaceAll ( "\\r\\n" , "\\n" ) )
Assert . assertEquals ( "GcsTest" , result )
Assert . assertSame ( o , p . getExpectedValue ( ) )
Assert . assertEquals ( "Hello World!" , response . getEntity ( ) )
assertTrue ( b )
Assert . assertTrue ( "Modification group should be present" , driver . findElement ( By . xpath ( "//*[@data-id='ModificationGroup']" ) ) . isDisplayed ( ) )
assertEquals ( "fre_01-01-13.xliff" , res )
context . assertEquals ( Collections . emptyList ( ) , candidates )
Assert . assertEquals ( 2 , terms . size ( ) )
assertHelpLines ( "Option                          Description
Assert . assertEquals ( 0 , total )
assertEquals ( "lesson_05/_json_configs/smooks-config-reader-only.xml" , uri . toString ( ) )
assertThat ( requestedShutdownCallable . call ( ) , equalTo ( false ) )
assertEquals ( 83937 , size )
assertEquals ( name , manufacturerService . getManufacturer ( name ) . getName ( ) )
JSONAssert . assertEquals ( "{a:[[9]]}" , ARRAY_OF_JSONARRAYS , new CustomComparator ( JSONCompareMode . LENIENT , customization ) )
assertEquals ( prefix_not_search_result , result )
assertNull ( childProject . blockBuildWhenUpstreamBuilding )
assertThat ( targetLocator . getUntargetedDriver ( ) , instanceOf ( FirefoxDriver . class ) )
Assert . assertTrue ( v . getName ( ) . contains ( Versifications . DEFAULT_V11N ) )
Assert . assertTrue ( result . isEmpty ( ) )
assertEquals ( theme , sut . getThemes ( ) )
Assert . assertNotNull ( PropertyUtils . getProperty ( newObs , "problem" ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertImage ( null , destImg , e )
assertEquals ( c1 , c2 )
assertEquals ( bucketName , bucketName )
assertEquals ( "Double clicked" , testPage . doubleClick . getText ( ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa must be a float." ) )
assertEquals ( "Hello World!" , mvcResult . getResponse ( ) . getContentAsString ( ) )
assertEquals ( 1 , statements . size ( ) )
assertFalse ( one . equals ( two ) )
Assert . assertEquals ( 1 , patientCount )
Assert . assertEquals ( person . getName ( ) , person . getName ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( sentPayload , receivedPayload )
assertEquals ( expResult , result )
Assert . isTrue ( organizations . size ( ) > 0 )
assertEquals ( "Unexpected change in user." , "Doeve" , getFieldValue ( "firstName" , "Mike" ) )
assertEquals ( expectedJson , actualJson )
assertEquals ( expected , jsonString )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( expected , actual )
Assert . assertTrue ( theFlows . isEmpty ( ) )
assertNull ( svn . getProperties ( ) . get ( "svnrevision" ) )
assertThat ( count - 1 , is ( 7 ) )
assertThat ( "Testing an impossible date" , date , nullValue ( ) )
assertEquals ( s , LittleEndianInputStream . wrap ( b ) . readUnsignedShort ( ) )
assertTrue ( group . isStudent ( student ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
approver . assertApproved ( "banana" )
assertFalse ( "Model should contain RDF types" , rdfTypes . isEmpty ( ) )
Assert . assertEquals ( 1L , ctx2 . tQueryForLongValue ( "select count(*) from users where ${col}= [name] and address=[addr]" , bind ( "name" , "Tom" ) , bind ( "addr" , "China" ) , bind ( "$col" , "name" ) ) )
assertNotNull ( view )
assertEquals ( "numhits is wrong" , 15000 , res . getNumhits ( ) . intValue ( ) )
assertEquals ( "123" , map . get ( "v" ) )
assertPostFails ( "3" , added , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEntityHasValue ( key , value )
assertSuggestions ( suggestions , "foo" , "fooba" )
assertSame ( defaultDurability , result )
assertEquals ( 1 , client . getTables ( dbName , tabName2 ) . size ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaDefaultParameterTransformerDefinition ( threeArg , lookup , new String [ 0 ] ) )
assertEquals ( "Failed to generate an array" , "new String[][][] { { \\"1\\", \\"2\\" }, { \\"a\\", \\"b\\" } }, { \\"3\\", \\"4\\" }, { \\"b\\", \\"c\\" } }" , s )
assertEquals ( 1 , tags . size ( ) )
assertEquals ( entityBundle , clone )
assertTrue ( new Matcher ( ) . matchRelationshipInstance ( output , input ) )
assertTrue ( objmap . containsKey ( "field_private" ) )
assertTrue ( "expecting no start rules; found " + msg . getClass ( ) . getName ( ) , msg instanceof GrammarSemanticsMessage )
assertEquals ( 0 , map . size ( ) )
assertEquals ( "Running on control port " + port + " but responded with: \\"ok\\"" , response )
Assert . assertTrue ( ti . containsDefiningURI ( uri ) )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( "foo" , generator . formatTableName ( "foo" ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertTokenStreamContents ( ts , new String [ ] { "hello" , "Hello" , "world" , "World" } , new int [ ] { 0 , 0 , 0 , 0 } , new int [ ] { 5 , 5 , 15 , 15 } , null , new int [ ] { 1 , 0 , 2 , 0 } , null , 15 , null , true )
assertEquals ( r1 , r2 )
Assert . assertEquals ( 1 , buttons . size ( ) )
Assert . assertTrue ( deal . isAccepted ( ) )
Assert . assertNotSame ( exporter , exporter2 )
assertEquals ( "Not Matching" , VersionMatchResult . REJECTED , p . matches ( info ) )
assertEquals ( 0x01 , acia . read ( CMD_STAT_REG , true ) & 0x01 )
Assert . assertEquals ( 2 , count )
Assert . assertEquals ( 0 , issues . length )
assertThatSelectedValueIs ( "z" )
assertEquals ( false , sentryStore . isSentryVersion ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expected , this . printer . format ( tzid ) )
assertNull ( lease . getTenancyDuration ( ) )
assertEquals ( expected , x )
assertTrue ( "the method \\"vote\\" must return ACCESS_GRANTED" , voteGenericTest ( authorities , configAttributes , AccessDecisionVoter . ACCESS_GRANTED ) )
assertEquals ( 4 , traverseCount )
assertEquals ( 13l , theValue . get ( ) . longValue ( ) )
assertNotNull ( DocumentPermission . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( new ComparisonExpression ( a ) , orPredicate . getRhs ( ) )
assertEquals ( modulus , certificate . getPublicKeyModulus ( ) )
assertEquals ( SG_SFC_UNBIND_DELETE_SFC , DeleteServiceFunctionChainTask . getDeleteNetworkElement ( SG_SFC_UNBIND_DELETE_SFC . getNetworkElementId ( ) ) )
assertTrue ( entity . getId ( ) > 0 && entity . getCity ( ) == null )
assertNotNull ( target )
assertFalse ( result . isSucceeded ( ) )
assertNull ( query )
assertEquals ( expected . substring ( 0 , 5 ) , sb . toString ( ) )
Assert . assertNull ( changed . getReifier ( ) )
assertEvalTrue ( new File ( "abssamples/backend/ObjectTests/classRecover.abs" ) )
assertTrue ( redis . objectIdletime ( key ) > 0 )
assertTrue ( "content-type application/json; charset=wtf-8" , mediaTypeChecker . isContentTypeValid ( mockHeaders ) )
assertEquals ( "{\\"resourceType\\":\\"Observation\\",\\"payload\\":[{\\"contentAttachment\\":{\\"contentType\\":\\"text/plain\\",\\"data\\":\\"AAECAw==\\",\\"url\\":\\"http://foo\\",\\"size\\":123}}]}" , encoded )
assertEquals ( xs , ys )
Assert . assertFalse ( bpInfo1 . equals ( bpInfo2 ) )
assertEquals ( days , monthView . getDaysOfTheWeek ( ) )
assertThat ( comment , equalTo ( "Simple field comment" ) )
assertThat ( info . isRequired ( ) , is ( true ) )
assertEquals ( BigInteger . valueOf ( 536879104L ) , work )
assertEquals ( same . sum ( 1 ) , sum )
assertEquals ( IntegerProducer . class , typeProducer . getClass ( ) )
Assert . assertEquals ( n , getCounterValue ( c ) )
assertEquals ( VLWSentence . KM , empty . getTotalUnits ( ) )
assertTrue ( Files . exists ( retry ) )
assertArrayEquals ( unk1 , unk2 )
assertEqualsJson ( expected , actual )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response statusCode is: 200" ) ) )
Assert . assertFalse ( apacheCloudStackClient . shouldRequestsExpire ( ) )
assertEquals ( expResult , result )
assertFalse ( hasConfigurationChanged )
assertThat ( target . getBodyAsMap ( String . class ) , is ( notNullValue ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( 1 , result . getSize ( ) )
assertThat ( dns , hasItems ( LdapConfiguration . DEFAULT_ROOT_OBJECT_DN , LdapConfiguration . DEFAULT_PASSWORD , LdapConfiguration . DEFAULT_PORT ) )
assertEquals ( "Voltage" , data . getUnit ( ) )
assertDependencyWasResolved ( )
assertEquals ( AM_UXS , 4 , rd . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( string2 , string1 )
assertEquals ( Arrays . asList ( "INSERT INTO " + tableName ( "TableOne" ) + " (id, value) VALUES (3, " + expectedDateLiteral ( ) + ")" ) , testDialect . convertStatementToSQL ( testStatement , schema , null ) )
Assert . assertEquals ( expected , filterResult )
assertTrue ( AcceptanceTestUtil . isInterested ( component , remoteWorkerStatus . getDeploymentID ( ) . getServiceID ( ) , rwmOID . getServiceID ( ) ) )
Assert . assertEquals ( enumValue , value )
assertNotNull ( credit . getPersonCreditVoteCount ( ) )
assertEquals ( ExpressionFactory . exp ( "path not in (1,2,3)" ) , exp )
assertEquals ( DEFAULT_PROPERTIES , createSchema ( map , 0 ) . convert ( ) . getProperties ( ) )
assertEquals ( "admin" , jsp )
assertTrue ( code == 200 )
Assert . assertEquals ( "SELECT '0' = 0;" , text )
assertEquals ( 2 , kieSession . fireAllRules ( ) )
assertEquals ( expected , actual )
assertThat ( sslContextSelector . select ( httpContext ) , is ( sslContext ) )
Assert . assertEquals ( "UTF-8 not properly parsed" , in , WebUtilities . unescape ( out ) )
assertNotNull ( WorkerRealTimeStatistics . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 0 , walEdit . size ( ) )
assertServiceInstanceCreateRequest ( serviceInstance )
assertMockEndpointsSatisfied ( )
assertOut ( "function A(msg) {\\n\\tthis.msg = msg;\\n}" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( metric , metric2 )
assertThat ( normalize ( results ) , is ( path ( "" , "a" , "b" , "c" , "a/a.csv" , "b/b.csv" , "c/c.csv" ) ) )
assertThat ( DateUtil . clearDatePart ( date ) , is ( cal . getTime ( ) ) )
Assert . assertEquals ( expected , rewriter . rewriteCookie ( cookie ) )
assertEquals ( 1 , foo . size ( ) )
assertNotNull ( actual )
assertEquals ( - 23 , error . getOkValue ( ) )
assertEquals ( branches , Functions . listProjectBranches ( PROJECT ) )
assertObjectEquals ( "{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}" , s . getSchema ( BeanList . class ) )
assertEquals ( expected , actual )
assertEquals ( 4 , doubler . doubleIt ( 2 ) )
assertNotNull ( deserialized )
assertTrue ( "have lifetime after set" , _info . hasLifetime ( ) )
assertEquals ( 4 , actualExpectedWorkerLinkCount )
assertEquals ( "Expected 2 results" , 2 , p . getTotalElements ( ) )
assertArrayEquals ( result , new String [ ] { "mockPath" , "ext" } )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertEquals ( "Select with null where clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertEquals ( "testStreamName" , siddhiStreamDef )
assertSame ( first , second )
assertFalse ( params . doesCodingListMatch ( codings ) )
context . assertIsSatisfied ( )
assertEquals ( 1 , t . indexOfUnquoted ( str , ">>" ) )
assertEquals ( aNumber , result , 1E14 )
assertThat ( document , hasIdField ( "id" ) )
assertEquals ( 0 , estimatedSizeBytes )
assertEquals ( response , res )
assertArrayEquals ( new double [ ] { 1.0 , 2.0 , 3.0 } , degToRads , 1e-4 )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" , "-f" } ) )
assertTrue ( resourceBundle . getObject ( "component.type.category" ) instanceof Image )
assertEquals ( topic , topicList . get ( 0 ) )
Assert . assertTrue ( "RunJar failed" , outFile . exists ( ) )
assertThat ( ContractClass . privateNestedInstanceVariable , is ( true ) )
assertNotNull ( builder )
assertThat ( applicationSettings . getProjectCreationSetting ( ) , is ( PROJECT_CREATION_NOT_ALLOWED ) )
assertResults ( chain )
assertEquals ( "test" , databaseMeta2 . getName ( ) )
assertEquals ( "?a=b&c=d" , qs . decode ( ) . toQueryString ( ) )
assertEquals ( WEBJAR_URL_PREFIX + "jquery/jquery" , json . get ( "jquery" ) )
assertResult ( 2 , - 1 )
assertEquals ( "Expected 2 results!" , 2 , n )
assertFalse ( value . isPresent ( ) )
assertEquals ( HttpStatus . BAD_REQUEST , response . getStatusCode ( ) )
assertEquals ( 1 , testDescriptor . getChildren ( ) . size ( ) )
assertNotNull ( hit )
assertEquals ( "test (REG_SZ) = ?" , value . toString ( ) )
assertFalse ( iter . hasNext ( ) )
Truth . assert_ ( )
assertNull ( result )
assertThat ( driver . getTitle ( ) , containsString ( "JUnit 5 extension for Selenium" ) )
assertDisplayValues ( "fi.gif" , "Commit 1" )
Assert . assertEquals ( tree . predict ( x [ loocv . test [ i ] ] ) , evalPredict ( tree , x [ loocv . test [ i ] ] ) )
assertTrue ( e instanceof E_NotEqual )
assertThat ( "default64-os" , sut . getOs ( ) , is ( equalTo ( VM . DEFAULT_64_OS ) ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( expectedTypes , types )
assertEquals ( "Learn. Eat. Code." , phraseDecodedToString )
assertThat ( result . message ( ) . get ( 0 ) . getData ( ) , CoreMatchers . containsString ( "<img src=\\"http://yuml.me/diagram/" ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( date , result . getModified ( ) )
CallTreeAssert . assertDepth ( "cantFindNextSpan" , callTree , expectResult )
context . assertIsSatisfied ( )
assertContainsOnly ( testee . getFileFilters ( ) , filter1 , filter2 , filter3 )
assertEquals ( "<y-axis width=\\"-5\\"></y-axis>" , parent . child ( 0 ) . toString ( ) )
assertNull ( scanner . parse ( "*" ) )
assertThat ( whereClause , is ( equalTo ( WHERE_FILTER_WHERE ) ) )
Assert . assertEquals ( instancesCount , InstanceHelpers . getAllInstances ( this . app ) . size ( ) )
assertNotNull ( descuento . getId ( ) )
assertEquals ( "Wrong delay" , WAjaxControl . DEFAULT_DELAY , control . getDelay ( ) )
assertAccessorsCorrect ( table , "currentPage" , 0 , 1 , 2 )
assertThat ( response . getStatus ( ) , equalTo ( Response . Status . OK . getStatusCode ( ) ) )
assertEquals ( "Unexpected element found" , heading , findElement ( By . tagName ( "h2" ) ) )
assertThat ( handBook . hasNext ( ) , is ( true ) )
assertThatIsMaximized ( )
assertTrue ( true )
assertEquals ( DEFAULT_VALUES , settings . getDefaults ( ) )
Assert . assertEquals ( value + 1 , value1 )
Assert . assertTrue ( appTableColumnsMeta . indexOf ( "natural" ) != - 1 )
assertTrue ( codeGenFailedEx . getMessage ( ) != null )
assertThat ( credentials , is ( notNullValue ( ) ) )
assertNotNull ( actual )
assertNotNull ( mpp )
assertTrue ( "No wait" , System . currentTimeMillis ( ) - start < SHUTDOWN_WAIT )
assertThat ( result , is ( alicia ) )
assertEquals ( "v-box" , sut . getName ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertTrue ( ( fTime - sTime < 7000L ) , "Immediate trigger did not fire within a reasonable amount of time." )
Assert . assertTrue ( evaluator . evaluate ( offsets ) )
assertEquals ( "Wrong number of unique elements" , 3 , x . size ( ) )
assertNotNull ( "Skill is null" , entity )
Assert . assertEquals ( "single" , assign . getTagName ( ) )
assertEquals ( "History filename provider" , name )
Assert . assertTrue ( ( max - min ) <= defaultCapacity / 100 )
Assert . assertEquals ( 1 , analysis . getWarnings ( ) . size ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_UPDATE )
assertSame ( result , instance . unwrap ( String . class ) )
assertThat ( validationErrors . size ( ) , equalTo ( 0 ) )
assertNull ( entity . getProperty ( "user" ) )
assertSetDirty ( )
assertThat ( action , is ( Matchers . not ( new PrefixDeclarationsAction ( projectId , otherDecls ) ) ) )
assertEquals ( "User" , definitions . get ( "User" ) . getName ( ) )
assertEquals ( 3 , checkNumberUnreadMessages )
assertThatContainsOnly ( archive , scriptPath )
assertEquals ( 2 * Pointer . SIZE , struct . get ( ) . size ( ) )
assertEquals ( 666 , mpd . getTimeout ( ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertTrue ( ex . isPrime ( 11 ) )
assertEquals ( detailMethods , result )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertEquals ( HttpStatus . OK , responseEntity . getStatusCode ( ) )
assertThat ( world . inject ( st ) , is ( false ) )
assertEquals ( expectedResult , result )
Assert . assertEquals ( 20 , analyser . getLoadAtEnd ( route ) . get ( 0 ) , 0.01 )
assertEquals ( URL + "?param+1=&param+2=%22" , uri . toString ( ) )
assertNotNull ( x509Attestation )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 ) ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertThat ( windows . minus ( earlier ) , is ( IntervalCollection . onDateAxis ( ) ) )
Assert . assertSame ( connection , HConnectionManager . getConnection ( TEST_UTIL . getConfiguration ( ) ) )
assertEquals ( "bar" , result )
assertArrayEquals ( result1 , result2 )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
assertRange ( q , Long . class , time ( "2000-01-01 TO 2010-02-04" ) , time ( "2010-02-04T00:00:00:00" ) )
PatternAssert . assertThat ( CHOUSE_CONNECTION_STRING_PATTERN )
assertEquals ( actual1 , actual2 )
assertTrue ( latch . await ( 20 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "simpleInteger" , found . getName ( ) )
Assert . assertEquals ( "UserId should be same as authenticated user:" + answer , userId , answer . getReturnVal ( ) )
Assert . assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , response . getJerseyResponse ( ) . getStatus ( ) )
assertTrue ( ix . verify ( null ) )
assertEquals ( "2007-12-03 - 10:15:30" , result )
assertEquals ( 0 , res . getInt ( "nbHits" ) )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertIncluded ( node )
assertThat ( nextToken , is ( nullValue ( ) ) )
assertFailureValue ( "differs at index" , "[0]" )
assertEquals ( 1L , result )
Assert . assertNotNull ( page . getPageTimings ( ) )
Assert . assertNotNull ( xhtmlOptions )
Assert . assertEquals ( "Wrong port" , 0x00010203 , out . readUnsignedInt ( ) )
assertTrue ( "Expected updated policy to be invoked for user " + user , alert . isEnabled ( ) )
assertEquals ( selectedInterval . getName ( ) , "Engineering" )
assertThat ( tester . request . getServletPath ( ) , is ( "/" ) )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
assertTaskEvents ( task , TaskListener . EVENTNAME_COMPLETE )
assertEquals ( "Thank you." , email . getVisibleText ( ) )
Assert . fail ( "MathIllegalArgumentException expected" )
TestUtils . assertResponseStatus ( response , Status . NOT_FOUND )
Assert . assertEquals ( 40. , route . getActivities ( ) . get ( 0 ) . getEndTime ( ) , 0.01 )
assertEquals ( 3 , count )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "bar" , null , "{ 'a': '#(foo.a)', world: '#(foo.b)'  }" , ctx ) . pass )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( mockedJobResult , jobResult )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
assertFalse ( guangdong . existed ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( null , annotation )
arraysWithCustomComparisonStrategy . assertDoesNotContainSubsequence ( someInfo ( ) , actual , sequence )
assertTrue ( ( ( IMAPFolder ) test ) . getUIDNotSticky ( ) )
assertEquals ( unQuotedString , ocsvTransformer . getCellContent ( singleQuotedString ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( Arrays . asList ( "/parent/child" , "/parent/child/descendant" , "/parent/child/descendant[2]" ) , allChildrenPaths ( parent ) )
assertEquals ( Location . LOCATION_LHS_INSIDE_CONDITION_START , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( 3.4 , cs . getX ( 0 ) , TOL )
assertTrue ( notify . matches ( 10 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "12345.6789" , getCell ( 0 , 10 ) . getPureText ( ) )
assertEquals ( 1 , conceptService . getAllDrugTodos ( ) . size ( ) )
Assert . assertEquals ( "[3, 2, 4, 1, 5]" , result . toString ( ) )
assertEquals ( "OK" , reply )
Assert . assertTrue ( mod . exists ( ) )
assertNotNull ( sut . getFile ( ) )
assertEquals ( "a,\\"b\\\\c\\"" + recordSeparator , sw . toString ( ) )
assertEquals ( ActionType . INPUT , actionOut . getType ( ) )
assertEquals ( "https://127.0.0.1:6443" , builder . getBasePath ( ) )
assertMsg ( )
assertEquals ( expectedArg , parsedArg )
assertNull ( objmap . get ( "unknown" ) )
assertThat ( PrettyTime . of ( Locale . GERMANY ) . withReferenceClock ( clock ) . printRelative ( PlainTimestamp . of ( 2014 , 8 , 25 , 14 , 0 ) . atUTC ( ) , ZonalOffset . UTC ) , is ( "letzten Linden" ) )
assertThat ( deletes , StreamMatchers . empty ( ) )
assertEquals ( dividend , MultivariateDivision . divideAndRemainder ( dividend , divider ) )
Assert . assertTrue ( redisServer . isActive ( ) )
assertNotNull ( writer )
assertEquals ( "max time" , result )
assertAllCommandsUsed ( )
assertEquals ( car , car . getReference ( ) )
assertEquals ( cVector , normalizedCVector )
assertNull ( myDtoInstance )
assertEquals ( "&#x;" , writer . toString ( ) )
assertEquals ( "Wrong result" , o , new PathJoint ( ) . indirectDefaultMethod ( ) )
assertThat ( representation . getString ( "display" ) , is ( "44.56 $" ) )
assertEquals ( ModelInterceptor . findById ( DummyModel . class . getMethod ( "findById" , Serializable . class ) , model2 . getId ( ) ) , model2 )
Assert . assertEquals ( expected , actual )
assertEquals ( Constants . FILTER_LEVEL_PARAM , endpoint . getFilterLevel ( ) )
assertMatch ( e , s )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertEquals ( expected , sql [ 0 ] . toSql ( ) )
assertThat ( orderLine . getAdvancePercentage ( ) , sameValueAs ( division . divide ( 100 , 100 ) ) )
assertEquals ( 1 , cc . size ( ) )
assertEquals ( builder . getMaxEvaluations ( ) , 20000 )
assertFalse ( accepted )
assertTrue ( validationErrors . hasErrors ( ) )
assertEquals ( "" , doc . text ( ) )
assertEquals ( actualMime , "testFile.smt" )
assertEquals ( 2 , results . size ( ) )
assertEquals ( DEFAULT_FILTER , config . getBuildConfiguration ( ) . getFilter ( ) )
Assert . assertEquals ( Sets . newHashSet ( 1 , 2 ) , parser . getSecureResultIndices ( ) )
assertEquals ( "foo" , jc . get ( "51" ) )
assertEquals ( true , result )
assertTwoInstancesAreStarted ( firstProcessDefinition , secondProcessDefinition )
assertEquals ( "An Uninitialized Value should return NaN on get()." , NaN , victim . get ( ) )
assertTrue ( plan . getRootNode ( ) instanceof ProjectNode )
assertEquals ( 0 , profile . getExpirationAdvance ( ) )
Assert . assertEquals ( "Lukas Podolski" , result )
assertEquals ( 1 , result )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertOut ( "var a:Boolean = isFinite(1000000.9)" )
assertEquals ( FAILING , collector . getStatus ( ) )
assertNull ( nullResourceComposite . getResource ( ) )
assertTrue ( "Expected stop to block for maximum of around " + shutdownMaxTimeout + "ms. Actual: " + timeTaken , timeTaken >= shutdownMaxTimeout && timeTaken < shutdownMaxTimeout + 20 )
Assert . assertFalse ( result . call ( ) )
assertThat ( iframeStr . matches ( "<iframe id=\\"foo\\">.*</iframe>" ) , is ( true ) )
Assert . assertEquals ( 202 , response . getStatus ( ) )
assertStat ( result )
assertEquals ( "Response body is not correct." , SimpleSecuredServlet . RESPONSE_BODY , Utils . makeCallWithBasicAuthn ( servletUrl , ANIL , Utils . hashMD5 ( ANIL_PWD , Coding . BASE_64 ) , 200 ) )
assertEquals ( "Should have not constraint violation" , 0 , validator . validate ( product ) . size ( ) )
assertTrue ( language . contains ( country ) )
assertThat ( uri . getPath ( ) , endsWith ( "testing" ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION , testConfiguration . get ( "dfs.replication.initial" ) )
assertThat ( patients , hasSize ( 0 ) )
assertEquals ( b , a )
Assert . assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertEquals ( expResult , result )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertThat ( step . getResult ( ) , is ( TestResult . PENDING ) )
assertFeatureValues ( emptyChain , testQuery , testText , chain )
assertSame ( val , ConfigUtils . getObject ( config , null , "no-object" , "some-object" ) )
assertRemoveSubsystemResources ( servicesB )
assertThat ( errors , not ( hasFieldErrors ( "familyName2" ) ) )
assertTrue ( configurationDeserialized )
assertEquals ( HTML , result )
Assert . assertTrue ( klass . getFields ( ) . size ( ) >= klass . getDeclaredFields ( ) . size ( ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient . addPotentialOwners ( CONTAINER_ID_ALIAS , task . getId ( ) , false , add ) , "Container '" + CONTAINER_ID_V2 + "' is not associated with alias '" + CONTAINER_ID_ALIAS + "'" , "Container '" + CONTAINER_ID_V2 + "' is not associated with alias '" + CONTAINER_ID_ALIAS + "'" )
assertEquals ( "Optional response should be present" , "true" , result )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertEquals ( email , passwordResetPage . getCurrentEmail ( ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertEquals ( 2 , deltas . size ( ) )
assertEquals ( 1 , dashboardService . insert ( new DBDashboard ( ) ) )
assertThat ( objectId ( "/dir" ) , is ( original ) )
assertEquals ( "select textcat('a', 'b'), textcat+('a', 'b')" , result )
assertThat ( ( String ) c . value , is ( "aaa" ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertTrue ( Arrays . equals ( new int [ ] { 0x02 , 0x00 , 0x08 , 0x00 , 0x01 , 0x00 , 0xD7 , 0xff } , request . getOutputBuffer ( ) ) )
assertRequest ( "POST" , "Message/" )
Assert . assertEquals ( expected , actual )
assertEquals ( "Invalid type" , Schema . Type . NULL , v2Schema )
assertEquals ( "<#function name ></#function>" , result )
assertTrue ( transactionClosed . get ( ) )
assertEquals ( "OK" , r . getStatus ( ) )
assertEquals ( TEST_FILE , contents )
Assert . assertEquals ( "4" , head . getId ( ) )
assertEquals ( 0 , request . getAll ( ) . size ( ) )
assertThat ( resources , contains ( patientId , orgId , parentOrgId , parentParentOrgId ) )
assertEquals ( "test-123" , val )
Assert . assertTrue ( list . contains ( "a" ) )
Assert . assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( url ) )
assertThat ( terminologyService . isSubclassOf ( cp , CodePhrase . class ) , is ( true ) )
assertNotNull ( cacheConfig )
assertNull ( runtimeService . getVariable ( processInstance . getId ( ) , "myVariable" ) )
assertEquals ( ( byte ) 34 , s . m0_0 ( ) )
assertEquals ( 128000 , ph . getTpm2Driver ( ) . getMaxConcurrentTasks ( ) )
assertThat ( readEmailAddress , is ( address ) )
assertEquals ( 5 , interfaces . size ( ) )
assertFalse ( result )
assertEquals ( "TASKID = -1" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( result , result )
assertExec ( "Methods defined in Object" , Classes . class , "listObject__Ljava_lang_String_2ZLjava_lang_String_2" , methods , false , "" )
Helpers . assertJson ( QUERY_JSON , json . toString ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( s , s , FastInteger . readUint ( new StringReader ( s ) , sz . length ( ) ) )
assertTrue ( r . get ( String . class ) . contains ( "Bee Gees" ) )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��***��\\n" + "��***��\\n" + "�尖�尖�尖�尖��\\n" )
Assert . assertTrue ( contains )
assertCompleted ( "fff" )
assertTrue ( result )
assertTrue ( dump . contains ( JP_TEXT ) )
Assert . assertEquals ( 0 , analyser . getLoadRightAfterActivity ( route . getEnd ( ) , route ) . get ( 0 ) )
TestUtil . assertEquals ( exp , getSpans ( ) )
assertEquals ( 56 , profile . dashBoards [ 0 ] . widgets . length )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.b = function() {\\n  var /** @type {custom.TestProxy} */ a = new custom.TestProxy();\\n  a.setProperty('foo', 'bar');\\n}" )
assertThat ( ( double ) stopwatch . getMaximumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 150 , 50 ) ) )
assertTrue ( containsComplexSubPropertyAxiom ( chain , OWLObjectPropertyExpression . class ) )
assertEquals ( "Base for integers is wrong" , Double . valueOf ( 3 ) , parsed )
assertEquals ( 3 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertFalse ( handler . process ( null , consumer , Direction . In , null , null ) )
assertEquals ( "dummy:0" , toBeUpdated . getReference ( ) . getValue ( ) )
assertNotNull ( result )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" , "actors/Hugo" , "actors/Emil" , "actors/Carrie" , "actors/Laurence" ) )
assertTrue ( equals ( stat , nativeEntity ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertGridIndexes ( data , new boolean [ ] { false , true , true } , new boolean [ ] { false , false , false } , new Expected [ ] [ ] { { Expected . build ( false , 1 , "(0, 0)" ) , Expected . build ( false , 1 , "(1, 0)" ) } , { Expected . build ( true , 0 , "(0, 2)" ) , Expected . build ( false , 1 , "(1, 1)" ) } , { Expected . build ( true , 0 , "(0, 2)" ) , Expected . build ( false , 1 , "(1, 2)" ) } } )
assertEquals ( d1 , d2 )
assertEquals ( TEST_LOCALE_LANG , LocaleHelper . getLocaleOverride ( null ) )
assertThat ( now . getZone ( ) , is ( DateTimeZone . UTC ) )
assertEquals ( 1 , one . getAsDouble ( ) , 0 )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( "Expected ledger id to be in range" , pendingAddOpReceived )
assertEquals ( "Method #toString is wrong" , "GeoDistanceCondition{boost=0.4, field=name, latitude=9.3, longitude=1.0}" , condition . toString ( ) )
assertEquals ( expResult , result )
assertEquals ( 0 , properties . getOptions ( ) . size ( ) )
assertThat ( config . getMaxFileSizeBytes ( ) , equalTo ( maxFileSizeBytes ) )
Assert . assertEquals ( "transactionLatencyCount=42" , getReplHeader ( ) )
assertTrue ( "Expected no memory leak, but it did: " + weakMap . size ( ) , ! weakMap . isEmpty ( ) )
assertArrayEquals ( expectedResult , output )
Assert . assertEquals ( "[1, 2, 3, 4, 5]" , result . toString ( ) )
assertThat ( generatedReportText , containsString ( "sample.steps.FailingStep" ) )
assertEquals ( liveSearchDropDown . getSearchView ( ) . getText ( ) , "modification" )
assertEquals ( 4 , results . size ( ) )
assertEquals ( expected , test )
assertThat ( queryMapping . transformOutboundDatabaseName ( metaStoreMapping , query ) , is ( "SELECT " + PREFIX + "db1.myFunction()" ) )
assertEquals ( "testFindRelatedProjectShortName" , eventId )
this . assertLoadBlobViaTuples ( tuples , true , true )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( resp . getResponseBody ( ) . trim ( ) . matches ( "Value: [0-9]*" ) )
assertEquals ( RDF . type . getId ( ) , editor . getAsText ( ) )
assertEquals ( 1L , tpk . windowBy ( Time . of ( Duration . ofHours ( 1 ) ) ) . getValue ( ) )
assertEquals ( TMP , A )
assertEquals ( identity . getId ( ) , group . getIdentityElement ( ) . getId ( ) )
assertEquals ( 11 , converters . size ( ) )
tester . assertRenderedPage ( TestClient . class )
assertEquals ( asList ( asList ( 1 , 2 , 3 , 4 , 5 , 6 ) , asList ( 1 , 2 , 3 , 4 , 5 , 6 ) , asList ( 1 , 2 , 4 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 ) ) , result )
assertFalse ( property . isPersistent ( ) )
assertNull ( log )
Assert . assertEquals ( "Hello World" , cdiEjb . sayHello ( ) )
assertOutput ( expected )
assertTrue ( out . contains ( "User [owner] is not authorized to view the logs for entity" ) )
assertStack ( new Object [ ] { Integer . valueOf ( 3 ) , null , Long . valueOf ( 1 ) , null , Long . valueOf ( 1 ) , null } , stack )
Assert . assertTrue ( actualUrl . endsWith ( "/registration/result" ) )
assertEquals ( status , Docker18Util . digest ( status ) )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "1" ) ) . getServiceDuration ( ) , 0.1 )
assertEquals ( 3 , result . size ( ) )
assertEquals ( origItemsJson , outJson )
Assert . assertFalse ( result )
assertThat ( schema , allOf ( hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( OUT ) . withReferenceType ( TYPE_2 ) ) ) ) , hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( Direction . IN ) . withReferenceType ( TYPE_2 ) ) ) ) ) )
Assert . assertEquals ( i + "
assertThat ( targetSubdirectory , is ( expectedTargetSubDirectory ) )
assertThat ( dummified . getAttributes ( ) , containsInAnyOrder ( new RpslAttribute ( "mnt-by" , "AARDVARK-MNT" ) , new RpslAttribute ( "descr" , "Mntner for guy's objects" ) , new RpslAttribute ( "admin-c" , "FB99999-RIPE" ) , new RpslAttribute ( "tech-c" , "FB99999-RIPE" ) , new RpslAttribute ( "upd-to" , "***@ripe.net" ) , new RpslAttribute ( "auth" , "X509-1" ) , new RpslAttribute ( "auth" , "X509-1689" ) , new RpslAttribute ( "auth" , "MD5-PW # Filtered" ) , new RpslAttribute ( "auth" , "SSO # Filtered" ) , new RpslAttribute ( "notify" , "***@ripe.net" ) , new RpslAttribute ( "mnt-by" , "AARDVARK-MNT" ) , new RpslAttribute ( "mnt-lower" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-upper" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-lower" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-upper" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-lower" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-upper" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-lower" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-upper" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-lower" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt-upper" , "RIPE-NCC-MNT" ) , new RpslAttribute ( "mnt
assertEquals ( 0 , set . getSize ( ) )
assertTrue ( problemState )
assertEquals ( 1 , newSize - initialSize )
assertEquals ( expectedResult , consequenceBlock )
assertNotNull ( "Should create view with a redirect context" , view )
assertEquals (CallingClassUtils . class , callingClass )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isInfoEnabled ( ) )
assertInjectsCollectionsOfMocks ( exampleTest )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 5 , map . size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertTrue ( true )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 )" , select . getQuery ( ) )
assertThat ( problems . size ( ) , is ( 0 ) )
assertEquals ( 10 , count )
assertEquals ( "" , result )
assertThat ( output . toString ( ) , is ( "" + "Error: cannot create table widgets.\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "
Assert . assertEquals ( expect_sql , sql )
assertThat ( cy . atMonth ( 1 ) , is ( CalendarMonth . of ( 2016 , 1 ) ) )
assertEquals ( 0.1 , r , 0 )
assertEquals ( "0.5" , out . toPlainString ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC )
assertEquals ( 4 , actualEntries . size ( ) )
assertNotNull ( methodInjectable . getInjectionTarget ( ) )
assertEquals ( "OFF" , level . toString ( ) )
assertThatWritableIs ( false )
assertTrue ( propertiesMatch ( dataFieldOriginal , dataFieldCopy ) )
assertEquals ( 0 , topicServiceImpl . getTopics ( ) . size ( ) )
JSONAssert . assertEquals ( expected , flowsJson , false )
Assert . fail ( "Instance not found" )
assertEquals ( 5 , firehoseItemCount )
assertThat ( wrapped , is ( nullValue ( ) ) )
assertNull ( "principal should not be found" , principal )
assertEquals ( 10 , totalNumberOfLines )
assertThat ( PlainTimestamp . of ( date , time ) . getCalendarDate ( ) , is ( date ) )
Assert . assertEquals ( expectedKeys , globalTags . keySet ( ) )
assertEquals ( "Value {0\\\\}" , result )
Assert . assertEquals ( "Incorrect condition" , "((WTextField=\\"1\\" or WTextArea=\\"2\\") or (WDropdown=\\"3\\" or WMultiSelect=\\"4\\"))" , builder . build ( ) . toString ( ) )
assertEquals ( "1 minute 30 seconds" , repairStatus . getDuration ( ) )
assertEquals ( FACTORY , sink . result ( ) )
assertEquals ( cls . getNNF ( ) , nnf )
assertEquals ( 1 , res . size ( ) )
assertThat ( threadName , is ( AsyncResult . class . getName ( ) ) )
Assert . assertEquals ( 0 , doc . getFirstPage ( ) . getResources ( ) . getPdfObject ( ) . size ( ) )
Assert . assertEquals ( "1.3" , vers )
assertThat ( actualValues , is ( expectedValues ) )
assertEquals ( 10000 , connStr )
assertNotNull ( entryRelationship )
assertEquals ( "Reference should be present" , true , ref . isReferencePresent ( ) )
assertGenerators ( result , generator . getClass ( ) , AnInt . class )
assertEquals ( nrOfProcessInstances * 100 , COUNTER . get ( ) )
assertEquals ( "ODataDemo.ODataDemoFunctionImport" , fullyQualifiedFunctionImportName )
assertEquals ( "9208675309" , parsedTelePhoneNumber )
assertEquals ( OperatingSystem . MAC_OSX , OperatingSystem . get ( ) )
Assert . areEqual ( 1 , rownum , "数据验证" )
assertEquals ( "Expected 5 results!" , 5 , n )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( false ) )
assertTrue ( fortyNinersSuck . after ( superBowlXLV ) )
assertTrue ( output . startsWith ( "<
assertEquals ( RequestParameter . create ( true ) , validator . isValidDefault ( ) )
assertEquals ( r1 , r2 )
assertTrue ( skillConstraint . fulfilled ( insertionContext ) )
assertThat ( result , is ( false ) )
assertThat ( isTransactionRelated , is ( false ) )
assertMockEndpointsSatisfied ( )
assertTrue ( prefs . matches ( t ) )
Assert . assertArrayEquals ( expected , actualNames )
assertNull ( t )
assertThat ( result . _id , equalTo ( object . _id ) )
Assert . assertEquals ( "Value is incorrect" , map ( OFFSET_0_STRING , "test" ) , value )
assertEquals ( "1" , printer . format ( Timestamp . of ( 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
assertResultSet ( res )
assertEquals ( x , z )
assertTrue ( mockedProvider . getExternal ( ) )
assertEquals ( violations . size ( ) , 0 )
assertNotNull ( Worker . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expResult , result )
Assert . fail ( "AnnotationKey should throw an exception" )
Assert . assertEquals ( "liangpengyv@fir.im" , token )
assertEquals ( 3.4 , cs . getX ( 0 ) , TOL )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm2Name" ) )
assertEquals ( ( short ) 2 , mutNum . shortValue ( ) )
assertEquals ( response , webRespose )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertThat ( of , is ( Paths . get ( "test-app-1.txt" ) ) )
Assert . assertEquals ( "110_org.happyfaces.domain.TestEntity" , converter . getAsString ( null , null , testEntity ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "eventMessage" ) , eventMessage ( "sess2" , "/topic" , "eventMessage" ) )
assertEquals ( 0 , provenanceRepo . getEvents ( 0L , 100000 ) . size ( ) )
assertEquals ( SimpleScore . of ( 42 ) , scoreDirector . calculateScore ( ) )
assertEquals ( "bar" , objectColumn . getSortProperty ( "foo" ) )
Assert . assertEquals ( "��匕 3 丿�丕卅�" , t . format ( new Date ( 0 ) ) )
assertEquals ( "blob mapper serialization is wrong" , expected , actual )
assertOut ( "with (a)\\n\\tb;" )
assertEquals ( "A\\n" , mat . group ( ) )
assertEquals ( "Greetings Tenka to Rest service." , response . body ( ) . asString ( ) )
assertEquals ( "Should have captured some video" , 1 , yt . getCaptions ( ) . size ( ) )
assertTrue ( "Random braces - three" , "A }} ends an escaped sequence" . equals ( result ) )
Assert . assertTrue ( children . size ( ) > 0 )
assertEquals ( "1 屑械�屑械蟹邪写邪蟹" , t . format ( then ) )
assertEquals ( "List<String>" , con . getParameterTypes ( ) [ 0 ] . getName ( ) )
assertEquals ( "Line 1" , fTempDir . getPath ( ) . split ( "\\n" ) [ 1 ] )
assertEquals ( Status . ERROR , jxm . getStatus ( ) )
assertTrue ( ParseUtil . paramClassesMatch ( true , memberClassList , sigclassList , true ) )
Assert . assertTrue ( uniqueUnits . size ( ) > 0 )
assertEquals ( 200 , response . getStatusCode ( ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( "239 122 87 154 40 7 171 115 207 12 130 71 155 254 129 237" , visualized )
assertNull ( result )
assertEquals ( ResultType . ERROR , result . getType ( ) )
Assert . assertTrue ( this . ontologyServiceResult == 1 )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( Arrays . asList ( "a" , "b" , "c" ) , abc )
assertMockEndpointsSatisfied ( )
assertEquals ( wrappedTemplate + " IN ( ? )" , test . build ( ) )
assertTrue ( parent . isPrefixOf ( fixture ) )
assertNotNull ( target )
Assert . assertEquals ( chromPos , cds )
assertNull ( myTestInstance . restart ( b ) )
assertThat ( isPresent , is ( false ) )
assertEquals ( data , change . getChangeData ( ) )
assertFalse ( grid . getColumn ( "column1" ) . isSortable ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
Assert . assertTrue ( testedStore . getFeatures ( Util . list ( fx1 , fx2 ) ) . contains ( fx1 ) )
assertOutputResult ( consoleResult )
assertTrue ( "Credential store should be created" , ops . exists ( TEST_CREDENTIAL_STORE_ADDRESS ) )
assertEquals ( 0 ,addonCount )
assertEquals ( 2 , c . getRowCount ( ) )
assertions . contains ( )
assertTrue ( isDisabled )
assertEquals ( response . size ( ) , 2 )
Assert . assertEquals ( "some [img]text" , formatter . format ( "some [img]text" , defaultOptions ( ) ) )
assertNotNull ( SigningKey . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertFalse ( entry . containsAttribute ( "administrativeRole" ) )
assertEquals ( "application/json;odata.metadata=minimal" , request . getResponseContentType ( ) . toContentTypeString ( ) )
assertEquals ( expectedDescription , description )
Assert . assertEquals ( "DB number is not correct" , 2 , ( int ) redisURI . select ( ) )
assertEquals ( in . value , out . value )
assertTrue ( output . startsWith ( "<
assertNull ( getFixture ( ) . review ( null , master , slave ) )
assertArrayEquals ( TEST_DATA , actualBytes )
assertEquals ( "java.lang.String" , jmp . getNativeType ( "java.lang.String" , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
maps . assertHasEntrySatisfying ( info , actual , null , isNull )
assertPutResult ( ResponseCode . BAD_REQUEST )
assertThat ( email . getSubject ( ) , is ( "Default ErrorMail" ) )
assertEquals ( text , adapter . getStringAt ( 2 , 2 ) )
Assert . assertEquals ( 100 , li . getValue ( 50 ) , 1e-5 )
assertArrayEquals ( array1 , array )
assertThat ( "A" , matches ( exp ) )
assertPushPromiseFrame ( frame , streamId , promisedStreamId , Unpooled . EMPTY_BUFFER )
Assert . assertEquals ( result , collector . output . get ( Utils . DEFAULT_STREAM_ID ) )
assertEquals ( ( short ) 83 , x . value )
assertLabelHasBeenDisplayed ( "Nazwa: filename.txt" )
Assert . assertEquals ( "Test of 'quotes'' in quotes'" , actualResult )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Stream>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Stream>" , elem . toXml ( ) )
assertTrue ( impl . isByPassState ( ) )
assertNotNull ( fixture )
Assert . assertEquals ( newEncounter , newDocument )
assertEquals ( localeImportHandler . loadPropertiesByXml ( repFileBundleMock ) . size ( ) , 1 )
assertNotNull ( unlockKey )
test . assertResult ( )
assertThat ( z_F4JInternalParseUtil . getPrimitiveLong ( "long" , json ) , is ( - 1l ) )
assertEqualLines ( "invalid renaming in p2.A" , getFileContents ( getOutputTestFileName ( type , folder ) ) , cu . getSource ( ) )
assertThat ( testDataSourcePath . getInstanciatedPath ( "${user.dir}/simple-semicolon-data.csv" ) , is ( "/home/john/work/simple-semicolon-data.csv" ) )
assertSame ( node , transform ( node ) )
assertEquals ( fileData . getBytes ( ) [ 42 ] , fileRequest . getByte ( 42 ) )
assertEquals ( "default-value" , c . getParameterTypes ( ) [ 0 ] )
assertEquals ( expResult , result )
assertEquals ( asStatementList ( "\\"foo;\\\\; b  a r\\\\\\"\\"'foo;\\\\; \\\\'b  a r\\\\\\"'''\\"foxlov  e \\"" ) , splitter . split ( expression ) )
assertEquals ( "http://localhost/?foo=test" , uri . toString ( ) )
assertNotNull ( ShortCode . fetcher ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 403 , response . getStatus ( ) )
Assert . assertEquals ( "origMethod" , clonedAttr . getOriginalMethod ( ) . getName ( ) )
assertEquals ( body . toString ( ) , "123" )
assertTrue ( permitted )
assertEquals ( Integer . MAX_VALUE , victim . readInt ( ) )
Assert . assertEquals ( "test" , query ( qs , queryOptions ( ) . withSize ( 1 ) ) . withFragmentSelector ( selector ) . getFragmentSelector ( ) . get ( 0 ) . getName ( ) )
Assert . assertSame ( bitmap , ic . getBitmap ( ) )
assertXMLEqual ( "Invalid WSDL returned" , expectedDocument , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( sourceLoader )
assertEquals ( 4 , count )
assertEquals ( identifier1 , identifier1 )
assertObjectEquals ( "[{f:'a'},{f:'b'},{f:'c'}]" , p . run ( bs , in , sa ) )
assertThat ( format ( "No changes should be reported" , artifacts ) , is ( emptyIterable ( ) ) )
assertEquals ( Arrays . asList ( 5 ) , procedureExecution . getOutputParameterValues ( ) )
assertTrue ( found )
assertTrue ( s1 . equals ( s2 ) )
assertArrayEquals ( d . toString ( ) . getBytes ( ) , d . asTextBytes ( ) )
assertFalse ( rv . isEmpty ( ) )
assertRequest ( "POST" , "Call/%s/Play/" , callId )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
Assert . assertEquals ( v1 , KCVSUtil . get ( store [ 0 ] , k , c1 , tx [ 0 ] [ 0 ] ) )
assertEquals ( 1 , session . from ( $ ( noteVar ) ) . where ( where ) . list ( $ ( noteVar ) ) . size ( ) )
assertNotNull ( result )
assertEquals ( "Spacer should've been moved by 50px" , oldTop + 50 , newTop , WidgetUtil . PIXEL_EPSILON )
assertFalse ( Files . exists ( path ) )
assertEquals ( 5 , p1 . distance ( r ) , PRECISION )
assertThat ( event , is ( expected ) )
assertEquals ( "public field value" , objmap . get ( "field_public" ) )
assertEquals ( "#23C48E" , widget . color )
assertEquals ( expected , actual )
assertEquals ( "Value Descriptor id not retured as expected" , TEST_ID , controller . update ( valueDescriptor ) )
Assert . assertNotNull ( node )
assertEquals ( p1 , p2 )
assertThat ( expected , Is . is ( actual . getValue ( ) ) )
assertTrue ( writer . toString ( ) . contains ( "public class DomainClass implements Serializable {" ) )
assertTrue ( correct . get ( namedEntity . getLabel ( ) ) . equals ( disambiguatedURL ) )
assertEquals ( expected , actual )
Assert . assertThat ( e . getMessage ( ) , containsString ( expected ) )
assertEquals ( testStr , testStr )
assertEquals ( "{\\"customer\\":\\"lincoln\\",\\"id\\":\\"24\\"}" , path . build ( map ) )
assertThat ( sheet . sheetName , is ( "������" ) )
assertEquals ( expected , actual )
Assert . assertNotNull ( result . getFirstHeader ( "Warning" ) )
context . assertTrue ( gotit . get ( ) )
assertTrue ( count > 0 )
assertTrue ( ! _event . hasStartTime ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( 0.5 , Capacity . divide ( cap1 , cap2 ) , 0.001 )
assertSeen ( visible )
assertThat ( databaseHelper . lookupObject ( ObjectType . PERSON , "PP1-TEST" ) . containsAttribute ( AttributeType . CHANGED ) , is ( true ) )
assertCapacityUnitEqual ( cu , new CapacityUnit ( 1 , 0 ) )
assertNotNull ( result )
runner . assertAllFlowFilesTransferred ( PutHiveQL . REL_RETRY , 1 )
assertEquals ( mockJaxbList , response )
assertEquals ( expResult , result , 0.000001 )
assertThat ( result . getValueForAttribute ( AttributeType . ROUTE ) . toString ( ) , is ( "212.166.064.000/19" ) )
assertEquals ( "file Name, file Name2" , message )
assertEquals ( "Values not equal: " + output + "
assertNull ( encodedText . decode ( ) )
assertNotNull ( profiles )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
assertThat ( findFeature ( features , "StatusNotification" ) , is ( instanceOf ( StatusNotificationFeature . class ) ) )
assertThat ( isEquals , is ( true ) )
assertCommit ( cwuTx . submit ( ) )
assertEquals ( userKey1 , userKey2 )
assertThat ( "Should be two reporters" , reporterCount , is ( 2 ) )
assertThat ( option , is ( new IntOption ( 100 ) ) )
Assert . fail ( "Exception occurred trying to bootstrap a truncated cluster: " + e . getMessage ( ) )
assertEquals ( "caseId" , activity . getCaseDefinitionKey ( ) )
assertEquals ( "sort" , test )
assertEquals ( expected , user )
assertEquals ( mRoot , mStore . getChild ( mRoot , child . getName ( ) ) )
Assert . assertEquals ( shifted . getPos ( ) , 89 )
assertNotNull ( result )
assertEquals ( expectedQuery , actualQuery )
assertThat ( description . toString ( ) , is ( "a stage that completed to a value that was <2>" ) )
assertEquals ( expect , src )
assertThat ( workTree . get ( fi ) , is ( nullValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( maxUpdates , files . length )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , actual )
assertNoProblems ( )
assertFiles ( "audit" , "audit.1970-01-01" , "audit.1970-02-01" )
assertions . doesNotContain ( value , index )
editor . assertProblems ( "bogus|Unknown property" )
assertExpectedResponse ( r , Response . Status . OK . getStatusCode ( ) , Boolean . FALSE . toString ( ) )
assertNotNull ( result )
assertNotNull ( header )
assertThat ( rendered , is ( test [ 1 ] ) )
Assert . assertNotNull ( dbRangerPolicyList )
assertEquals ( 35 , cap . get ( 0 ) )
assertEquals ( obj . toString ( ) , "NetShareInfo0{netName: \\"NetName\\"}" )
assertEquals ( map , map2 )
assertThat ( foundResources , contains ( p1id . getValue ( ) ) )
assertTrue ( future . isCancelled ( ) )
assertEquals ( "dump is complete" , dumpException )
assertEquals ( "person found inside range" , person , found )
assertEquals ( j * ( long ) TIME , fieldValueGenerator . generateNextValue ( value ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( m , ( ( GenericData . Map ) r . get ( "map1" ) ) . get ( "maps" ) )
assertEquals ( "13.05.2014 23:52:28" , dateAsString )
Assert . assertEquals ( simpleModel , models . get ( SIMPLE_MODEL ) )
assertArrayEquals ( cp . snapshotState ( ) , serialized )
assertThat ( query . count ( ) , is ( 0L ) )
assertEquals ( "The entropy test should be correct" , 0 , testList . size ( ) )
assertTrue ( contextMapRef . get ( ) . isEmpty ( ) )
assertEquals ( expected , query . export ( ) )
assertMessage ( "<type>FORWARDED</type>" , 4 )
assertEquals ( 201 , output . getStatusCode ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getDistanceFromEarth ( ) == 2400000000000000L )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( result )
Assert . assertFalse ( StraightOrder . is ( p1 , p2 , p3 , IntegerNumberSystem . getInstance ( ) ) )
assertThat ( any . contains ( DAY_OF_QUARTER ) , is ( true ) )
assertEquals ( 255 , result . getVoxel ( 0 , 4 , 0 ) , .01 )
assertEquals ( "tableName" , database . escapeTableName ( null , null , "tableName" ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L * 24L * 60L * 60L * 1000L ) , mapper . readBitemporalDate ( columns , "ttFrom" ) )
Assert . assertFalse ( explodeDeploymentContentAndGetOutcome ( TEST_DEPLOYMENT_NAME , "web.war" ) )
Assert . assertTrue ( optimum . getValue ( ) > 0.1 )
assertTrue ( configuration . buildDownstream )
assertPutFails ( occurrence , OntopiaRestErrors . MANDATORY_OBJECT_IS_NULL )
Assert . assertEquals ( "{ \\"error\\" : {\\"statusCode\\":401,\\"code\\":\\"ERR10001\\",\\"message\\":\\"AUTH_TOKEN_EXPIRED\\",\\"description\\":\\"Jwt token in authorization header expired\\"} }" , status . toString ( ) )
assertEquals ( "An ���awesome ���string with a few ���emojis!" , result )
assertLog ( Log . VERBOSE , "test trace argument2" )
assertEquals ( Months . of ( - 4 ) , test12 . dividedBy ( - 3 ) )
assertEquals ( "value" , requestImpl . getCookie ( "key" ) )
Assert . assertEquals ( dummyId , responseFuture . get ( ) . getId ( ) )
assertEquals ( SystemInfo . UnderDetermined , r )
assertFalse ( result )
assertEquals ( "http://localhost:8080/1/2" , uri . toString ( ) )
assertEquals ( exp , arr2 )
assertEquals ( expected , output )
Assert . assertEquals ( car , received . getPayload ( ) )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "indexPage" ) , "You arrived at index page" ) . apply ( driver ) )
assertNotNull ( "missing handler: " + cmd , handler )
assertEquals ( ( short ) 0x8000 , result )
assertEquals ( 1 , constructors . length )
assertEquals ( new BigDecimal ( "1234.45" ) . toBigInteger ( ) , bigD . toBigInteger ( ) )
assertThat ( result , is ( "abc!" ) )
assertEquals ( androidAppMetadata , ANDROID_APP_NO_DISPLAY_NAME_METADATA )
assertArrayEquals ( data , read )
assertEquals ( true , result [ 0 ] )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 1 , count )
assertThat ( subject . getResponseHeader ( ) , is ( "2013-03-03T12:55:00" ) )
assertSame ( resolver . getClassLoader ( ) , context . getClassLoader ( ) )
Assert . assertEquals ( legacyVariantString , variant . toLegacyString ( ) )
assertThat ( target . parse ( ) , is ( false ) )
assertTrue ( errorMessage , checksReferencedInConfig . contains ( errorMessage ) )
assertTrue ( "The audit log handler should be created" , ops . exists ( TEST_FILE_HANDLER_ADDRESS ) )
assertEquals ( 4 , fixture . mark ( ) )
assertEquals ( "0123456789" , builder . toString ( ) )
assertThat ( builder , is ( CoreMatchers . any ( BaseWssSocketBuilder . class ) ) )
assertSame ( fieldVar , result )
Assert . assertTrue ( infEx . isType ( DummyFault . class ) )
assertEquals ( expected , actualQuery )
assertArrayEquals ( new Object [ ] { 5 , "five" } , ( Object [ ] ) execution . next ( ) . get ( 0 ) )
assertThat ( checkFailed , is ( true ) )
assertSame ( val , ConfigUtils . getMap ( config , null , "no-object" , "some-map" ) )
assertEquals ( PublicationStatus . PUBLIC , r . getLastPublishedVersionsPublicationStatus ( ) )
Assert . fail ( "Expected exception" )
assertTokens ( newVal . val , Tokens . ID , Tokens . ID )
assertEquals ( "test" , read . getString ( db . DATA . VALUE ) )
Assert . fail ( "Expected failure for unknown target group" )
assertThat ( options . isAnsiColorsEnabled ( ) , equalTo ( true ) )
assertEquals ( expResult , result )
assertEquals ( "NaN" , sb . toString ( ) )
assertEquals ( 20 , all . size ( ) )
Assert . fail ( )
assertThat ( i , is ( 1 ) )
assertEquals ( TransformingIterator . class , hibernateHandler . iterate ( nativeQuery , projection ) . getClass ( ) )
assertEquals ( renderer . render ( document ) , renderer . render ( document ) )
given ( ) . when ( ) . get ( resourcePrefix ) . then ( ) . statusCode ( 200 ) . assertThat ( )
assertTrue ( isReady )
assertEquals ( nrOfActThreads , latch . getCount ( ) )
assertEquals ( properties . getProperty ( "entity.type" ) , "Configuration of schema-repo server" )
assertTrue ( entity . isValid ( ) )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"modelregistry/api/componenticon\\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertArrayEquals ( uncompressed , data )
assertEquals ( "Rooted Android Data Collector" , testResult )
assertSame ( cause , CRestException . handle ( e ) )
assertTrue ( result )
Assert . assertEquals ( TxStatusMediaType . TX_H_ROLLBACK , content )
assertThat ( delegate . multiply ( "2" ) , is ( "2" ) )
this . assertGetServiceTemplate ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/properties" , "servicetemplates/properties.json" )
assertEquals ( mp . getCount ( ) , 2 )
assertEquals ( "tar2.bz2.gz" , new String ( dest . toByteArray ( ) , "UTF-8" ) )
assertEquals ( 0 , mdr . getMetadataModels ( ) . size ( ) )
Assert . assertNotNull ( deserializedSpec )
arrays . assertContains ( description , new short [ 1 ] , new short [ 0 ] )
assertions . isNotGreaterThan ( expected )
assertNotNull ( "Social Friends (JSON STRING)" , friends )
assertEquals ( "%F0%9F%98%83" , Encoder . encode ( s ) )
assertEquals ( inStatus , outStatus )
assertEquals ( input , nodeToStringTransformer . transform ( ) )
Assert . assertEquals ( true , determiner . isDetermineFrequency ( windowSize ) )
assertNotNull ( "Messages are not null" , messages )
assertEquals ( schedulingIterations * noOfAlerts , list . size ( ) )
Assert . assertFalse ( GeneralUtilities . safeEquals ( zero , zero ) )
assertSame ( sseq , manager . getSourceSequence ( inSid , message , maps ) )
assertEquals ( deserializedSpec , sds )
assertEquals ( ( short ) 8 , ( short ) result . getShortWrapperValue ( ) )
assertThat ( token . getType ( ) , is ( PCRELexer . HorizontalWhiteSpace ) )
assertEquals ( "http://example.com:signed:0:viewer:0:0:0:0:0:0" , builder . build ( ) )
Assert . assertFalse ( isTmp )
Assert . assertTrue ( out . contains ( "advanced custom handler:CustomException" ) )
Assert . assertEquals ( chave , infoEventoManifestacaoDestinatario . getChave ( ) )
assertThat ( actual , contains ( likeVertex ( ) . withTimId ( "id3" ) , likeVertex ( ) . withTimId ( "id1" ) ) )
assertThat ( result , contains ( 4 , 4 , 4 , 3 ) )
assertEquals ( 33077 , timeout )
assertFalse ( actualResult )
assertEquals ( "wrong result" , new BigDecimal ( "24" ) , expression . getValue ( ) . asNumber ( ) )
assertNotSame ( result , arg )
assertEquals ( propValue , result )
TestCase . assertTrue ( result )
assertEquals ( "aTestString" , classUnderTest . getName ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 123 , ssdbClient . getCounter ( "counter" ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( p1 . getFirst ( ) . subtract ( p2 . getFirst ( ) ) , p1 . getSecond ( ) . subtract ( p2 . getSecond ( ) ) , 0d )
assertEquals ( ZonedDateTime . parse ( "2017-10-01T09:00-07:00" ) , getNextExecutionTime ( myCron , time ) )
assertEquals ( animal , deserialized )
assertEquals ( 2 , searcher . search ( q , 100 ) . totalHits )
assertNotNull ( "The connection exists" , stubConnectionHandle . getConnection ( CLUSTER_NAME ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertEquals ( EnumField . Size . LARGE , entity . getSize ( ) )
assertEquals ( result1 , result2 )
assertNotNull ( basicAccessAuthenticator . authenticate ( request ) . get ( ) )
assertThat ( inputStream , notNullValue ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertTrue ( "Button click should be logged" , logContainsText ( "Button clicked!" ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertNull ( item )
assertNull ( identifiable )
assertNotNull ( SyncList . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertSame ( currentUser , currentUser2 )
assertEquals ( mockMember ( "BBBB" ) , member . get ( ) )
assertEquals ( "RuleUp failed" , 0 , forwardBlz . getRules ( ) . size ( ) )
assertEquals ( "\\"1\\"truenull" , mustache . render ( Json . createReader ( new StringReader ( "[\\"1\\",true,null]" ) ) . read ( ) ) )
assertEquals ( "DefaultEndpointsProtocol=https;AccountName=mavenwagontests" , ConnectionStringUtils . blobContainerConnectionString ( connectionString ) )
assertThat ( errors , hasGlobalErrors ( "error.name" ) )
assertTrue ( entity . isValid ( ) )
assertEquals ( "012" , result . toString ( ) )
assertEquals ( 0 , violations . size ( ) )
assertSame ( proxy , actual )
assertEquals ( 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "https://api-fxtrade.oanda.com/v1/accounts/123456/trades/1800805337" , service . getTradeForAccountUrl ( tradeId , OandaTestConstants . accountId ) )
assertArrayEquals ( randBytes1 , randBytes2 )
assertThat ( list . size ( ) , is ( not ( 0 ) ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( 0 , engineRule . getRuntimeService ( ) . createVariableInstanceQuery ( ) . count ( ) )
assertThat ( result . size ( ) , is ( 2 ) )
assertThat ( stdOutContent . toString ( ) , containsString ( "Teamcity" ) )
assertFalse ( validator . validate ( connectionLimits , POST ) . passedValidation ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
Assert . assertEquals ( expected , quickTypeDependencyList )
assertTrue ( hv > 0.65 )
assertArrayEquals ( refar , d . getResult ( ) )
assertFalse ( instance . isBuilding ( event , project ) )
assertBoard ( "�尖�尖�尖�尖��\\n" + "�尖��2�烩��\\n" + "��x��1��\\n" + "�尖��x ��\\n" + "�尖�尖�尖�尖��\\n" )
assertEquals ( Arrays . asList ( null , NoteType . A , NoteType . B , NoteType . TYPE1 ) , session . from ( $ ( n ) ) . orderBy ( $ ( n . getType ( ) ) . asc ( ) ) . list ( $ ( n . getType ( ) ) ) )
assertEquals ( "SELECT TO_DATE(TEST_HIST.CREATED_AT) AS dt, " + "COUNT(TEST_HIST.ID) NUM_QUERIES " + "FROM H2.PUBLIC.TEST_HIST INNER JOIN H2.PUBLIC.UINFO " + "ON TEST_HIST.QBOL_USER_ID = UINFO.QU_ID INNER JOIN H2.PUBLIC.ACC " + "ON UINFO.A_ID = ACC.ID " + "WHERE ACC.CUSTOMER_NAME LIKE 'amogh' AND " + "(TO_DATE(TEST_HIST.CREATED_AT) >= date_sub(from_unixtime(unix_timestamp()),30)\\n" + "ORDER BY DATE(TEST_HIST.CREATED_AT) DESC, " + "FROM H2.PUBLIC.TEST_HIST INNER JOIN H2.PUBLIC.UINFO " + "ON TEST_HIST.QBOL_USER_ID = UINFO.QU_ID DESC " + "WHERE ACC.CUSTOMER_NAME LIKE 'amogh' AND " + "(TO_DATE(TEST_HIST.CREATED_AT) >= date_sub(from_unixtime(unix_timestamp()),30)\\n" + "ORDER BY DATE(TEST_HIST.CREATED_AT) DESC) DESC)" , hiveQuery )
Assert . assertEquals ( 1 , ret . getId ( ) )
assertEquals ( expectedRemoteCallReturn , testRemoteCallReturn )
assertEquals ( "subscriptionId1" , app . getSubscriptionId ( ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
Assert . assertArrayEquals ( convert ( expected ) , solution )
assertEquals ( a , b )
assertEquals ( 0 , found )
assertEquals ( "Test" , doc . getContentField ( "out" ) . toString ( ) )
assertEquals ( "Expected auxProofOfWork block371337" , block . getWork ( ) )
assertEquals ( 23 , instance . foo ( ) )
assertEquals ( "Required profiles is not null" , new FelixPlatformBuilderF140T122 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) , "123" )
assertTrue ( Graphene . waitGui ( ) . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "message" ) , UNAUTHORIZED ) ) )
Assert . assertEquals ( 1 , numericValue . intValue ( ) )
Assert . assertEquals ( 0.0 , diag . getEntry ( 1 , 2 ) , Precision . SAFE_MIN )
assertScoreAndParse ( content , null , 6 )
assertEquals ( "SELECT firstname, lastname UNION SELECT a, b" , statement . toString ( ) )
assertTrue ( dbStopped )
assertEquals ( "fiction" , book . getTitle ( ) )
assertThat ( result , is ( sameInstance ( primaryKeysRequest ) ) )
assertEquals ( 1 , tweetsByUser . count ( ) )
assertEquals ( 0 , argList . size ( ) )
assertThat ( changes , hasItems ( "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "s10" , "s11" , "s12" , "s13" , "s14" , "s15" , "s16" , "s17" , "s18" , "s19" , "s20" , "s21" , "s22" , "s23" , "s24" , "s25" , "s26" , "s27" , "s28" , "s29" , "s31" , "s32" , "s33" , "s34" , "s35" , "s36" , "s37" , "s39" , "s40" , "s41" , "s42" , "s43" , "s44" , "s45" , "s46" , "s47" , "s48" , "s49" , "s50" , "s51" , "s52" , "s53" , "s54" , "s55" , "s56" , "s57" , "s59" , "s60" , "s61" , "s62" , "s63" , "s64" , "s65" , "s67" , "s68" , "s69" , "s70" , "s70" , "s71" , "s72" , "s73" , "s74" , "s75" , "s76" , "s77" , "s79" , "s80" , "s81" , "s83" , "s84" , "s85" , "s86" , "s87" , "s88" , "s90" , "s91" , "s92" , "s93" , "s94" , "s95" , "s96" , "s97" , "s98" , "s97" , "s98" , "s98" , "s99" , "s100" , "s100" , "s101" , "s100" , "s101"
assertTrue ( rowChange . compareTo ( rowChange2 ) == 0 )
assertEquals ( 5 , x )
assertThat ( paginate , is ( not ( nullValue ( ) ) ) )
assertEquals ( prefs , actualPrefs )
assertEquals ( expected . getTime ( ) , parsedDate . getTime ( ) )
assertThat ( thread . getName ( ) , is ( "prefix-test" ) )
Assert . assertThat ( affordance . getVariableNames ( ) , Matchers . contains ( "thing" ) )
assertTrue ( result . contains ( expectedResult ) )
assertEquals ( "Find by name not returning a list with one reading" , 1 , readings . size ( ) )
assertThat ( jobCounters , notNullValue ( ) )
Assert . assertEquals ( polygon , result . getValue ( ) )
assertEquals ( 503 , response . getStatus ( ) )
assertEquals ( 4L , count )
Assert . assertEquals ( "/wro4j/wro/path/to/" , Context . get ( ) . getAggregatedFolderPath ( ) )
UmaTestUtil . assert_ ( authorization )
assertEquals ( expected , actual , 0.0 )
assertThat ( coll , equalTo ( reference ) )
Assert . assertNotNull ( url )
assertEquals ( ref . getUri ( ) . toString ( ) , obj . get ( "uri" ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoVolume ( ) . toString ( ) )
Assert . assertNotSame ( "Pass phrases should not match" , phrase1 , phrase2 )
Assert . assertTrue ( "file not written" , writtenFile . exists ( ) )
assertThat ( meanTaxFactor , equalTo ( TAX_FACTOR ) )
assertTrue ( result . compareTo ( NO_START_AND_END_BY ) == 0 )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "<mongo-datastore name=\\"name\\">\\n" + "  <hostname>hostname</hostname>\\n" + "  <password>password</password>\\n" + "  <user>user</user>\\n" + "  <password>password</password>\\n" + "  <security-token>securityToken</security-token>\\n" , transform ( externalized ) )
assertEquals ( expecting , found )
assertEquals ( "/a/b/c" , result . toString ( ) )
assertThat ( expected , equalTo ( actual ) )
assertEquals ( out . get ( ) , 1 / Math . tan ( 1234567890 ) , 0.0 )
assertThat ( joynrVersionnAnnotation . major ( ) , equalTo ( 11 ) )
assertEquals ( parseCalendar ( "20131103-06:45:00" , TimeZone . getTimeZone ( "UTC" ) ) , dh . getCalendarAfter ( easternTime ) )
assertEquals ( getFailureMessage ( ) , assertion , slice )
Assert . assertEquals ( "Wrong reference" , A , ref )
assertTrue ( ! result )
assertEquals ( PojomatorFactory . makePojomator ( Simple . class ) . doToString ( new Simple ( ) ) , "Simple{x: {foo}}" )
assertFalse ( "Did not expected to find GROUP BY limit optimization in: " + query , QueryUtil . getExplainPlan ( rs ) . contains ( " LIMIT 3 GROUPS" ) )
assertTrue ( seq . getNumberOfSubSequences ( ) == 0 )
assertEquals ( "Wrong boundaries" , singletonList ( "0123456789abcdef" ) , boundaries )
assertEquals ( "a=eh:/A;b=eh:/B" , q )
assertEquals ( testString , writer . toString ( ) )
assertEqualHash ( byteBuffer , murmur3a )
assertEquals ( PATH_TO_CLASS_FILE , classFile . getHashComputesHash ( ) )
assertEquals ( count , puts . size ( ) )
IFABPartnerImportTestHelper . assertIFABPartnerImported ( ibpartner )
Assert . assertTrue ( "expect topic to be empty" , instances . isEmpty ( ) )
assertEquals ( sum , victim . getSum ( ) , EPSILON )
assertStatementCanBeDeparsedAs ( parsed , "SELECT * FROM test WHERE a IS NOT NULL" )
assertCommandLineArgs ( null , "localhost" , "etc/jmxetric.xml" , "multicast" , "true" , "ProcessName" , "SpoofName" )
assertEquals ( "a}\\n" , found )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , false , "test" , null ) . property ( "fubar" , false , "bar" , true , "test" , null ) . property ( "bar" , false , "fubar" , false , "bar" , true , "fubar" ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( val . getBytes ( Charsets . US_ASCII ) ) , new BinaryTypeNode ( binaryReader , chunkHeader , parent , val . length ( ) ) . getValue ( ) )
Assert . fail ( "There is no wpbConfigurationPath defined on WBCmsContextListener context initialized" )
assertEquals ( "org.test.Hello2" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello" ) )
assertEquals ( - E * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertThat ( rows , is ( 1 ) )
assertEquals ( "Error, size of the hashmap is incorrect" , 1 , testCommands . size ( ) )
assertThat ( test ( mock . getVerifier ( ) , "Hello1" , "Hello2" , "Hello3" ) , hasSize ( 1 ) )
Assert . assertEquals ( expected , Strings . unCapitalizeFirstChar ( data ) )
assertEquals ( obj . toString ( ) , "LSAPR_POLICY_AUDIT_EVENTS_INFO{AuditEventSets:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEventDate:null, AuditEvent
Assert . assertEquals ( threadNum , res . size ( ) )
Assert . assertEquals ( "" , expected , actual , 0d )
assertEquals ( LocalDate . of ( 2012 , 7 , 20 , 0 , 0 ) , test )
assertNull ( "2MB allocation shouldn't be satisfied by LAB." , alloc )
assertFalse ( "Excluded tables should not be present in the schema" , exclusionRegex . contains ( schema1 . getTableSchema ( ) . getTableName ( ) ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertTrue ( "Output bytes are not the expected value" , Arrays . equals ( new byte [ ] { 0x30 , 0x20 , 0x48 , 0x45 , 0x41 , 0x44 , 0x0D , 0x31 , 0x20 , 0x43 , 0x48 , 0x41 , 0x52 , 0x20 , 0x41 , 0x4E , 0x53 , 0x45 , 0x4C , 0x0D , 0x40 , 0x20 , 0x75 , 0x6E , 0x6D , 0x61 , 0x70 , 0x70 , 0x61 , 0x62 , 0x6C , 0x65 , 0x20 , 0x69 , 0x6E , 0x20 , 0x61 , 0x6C , 0x65 , 0x20 , 0x69 , 0x6E , 0x73 , 0x65 , 0x6C , 0x0D , 0x30 , 0x20 , 0x54 , 0x52 , 0x4C , 0x52 , 0x0D } , out . toByteArray ( ) ) )
assertEquals ( clean ( input ) , output )
assertNull ( route )
assertThat ( logRecords , containsInfo ( "The configuration map has not been applied" ) )
assertEquals ( expected , actual )
assertTrue ( observer . accept ( path ) )
Assert . assertEquals ( OVERRIDING_USERNAME , callIntermediateWhoAmI ( ) )
Assert . assertEquals ( CatalogResponseMessage . INTERNAL_SERVER_ERROR , response . getCode ( ) )
assertions . doesNotContain ( expected )
assertSame ( op , new OperationBuilder ( op ) . build ( ) . getOperation ( ) )
assertEquals ( this . multipleCom , result . getAttributes ( ) )
Assert . assertEquals ( Explain . ExplainType . RUNTIME_PLATFORM . HOPS , o . explainType )
assertNull ( "There should be no last unfixed alerts" , lastUnfixed )
Assert . assertEquals ( 1 , n )
assertMessageFound ( goodMessage )
Assert . assertEquals ( idSet . size ( ) , 16000 )
assertEquals ( this . getClass ( ) . getResource ( "file://c:/this/is/a/file.extension" ) , result )
assertEquals ( "{\\"version\\":10,\\"schema\\":\\"string\\"}" , request . toJson ( ) )
Assert . fail ( "Neither source listing not source paths present" )
Assert . assertEquals ( Arrays . asList ( ) , res . getValues ( ) )
assertResultSet ( res )
assertEquals ( mockCellWithTags , newCell )
assertTrue ( authenticate ( ) )
assertTrue ( exception . getMessage ( ) . contains ( "must be a Collection" ) )
assertEquals ( newValue , globalProperties . getProperty ( DEFAULT_PROPERTY_KEY ) )
Assert . assertEquals ( "/user/" + solomon . getId ( ) + ".test" , objectTree . get ( "href" ) )
this . assertVerification ( )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( 3.75 , comparator . getSimilarity ( cb1 . getJCas ( ) , cb2 . getJCas ( ) ) , epsilon )
assertNotNull ( scriptStatement )
assertEquals ( expected + "-" + actual , expected , actual )
assertThat ( sampleEntities . getTotalElements ( ) , is ( greaterThanOrEqualTo ( 1L ) ) )
assertEquals ( expected , actual )
assertTrue ( server . verifyYourself ( client ) )
assertThat ( userCount , is ( 0 ) )
assertThat ( locationManager . getTableLocation ( ) , is ( new Path ( TABLE_LOCATION ) ) )
assertNotNull ( systemMessagesProvider )
assertEquals ( 3 , stack . size ( ) )
assertEquals ( 1 , w )
assertEquals ( encodedSignature , "BQwm1HCz0cjHYbulWMumkhZgyb2d93uScXmC6Fv8Ik" )
assertEquals ( pp . getValue ( ) , new Payload < > ( "hello1" ) . getValue ( ) )
assertTrue ( found )
Assert . assertEquals ( result , true )
assertEquals ( moonsBefore - 1 , moonsAfter )
assertEquals ( org . drools . core . test . model . Person . Nested1 . Nested2 . class , resolver . resolveType ( "Person.nested1.nested2" ) )
assertThat ( router . parse ( url , HttpMethod . POST , null ) . getMethod ( ) , is ( equalTo ( method ) ) )
MatrixTestAbstract . assertMatrixEquals ( eI , c )
InterpolationTest . assertArray2dEquals ( test , roundtrip , 0.01f )
Assert . assertEquals ( expectedPorts , EC2NetworkValidator . getPortRangeFromAclEntry ( networkAclEntry ) )
assertFalse ( "The same keys must not match:" , key1 . equals ( key2 ) )
assertTokens ( new IntValueToken ( 44 ) , Tokens . MUL , new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP )
assertEquals ( destroyers , result . size ( ) )
Assert . assertEquals ( logProb , ef_logProb , 0.0001 )
assertEquals ( "ex:s" , x )
assertFalse ( ord . isCaseInsensitive ( ) )
assertEquals ( "A B C D E F G H I J K L M N O P" , joined )
assertEquals ( "" , cm . toString ( ) )
assertEquals ( results [ i ] , result . get ( result . size ( ) - 1 ) . longValue ( ) )
assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
assertThat ( ( Person ) oie . getValue ( ) . getObject ( ) , is ( person ) )
assertThat ( outputStream . toString ( ) , is ( equalTo ( "HELL" ) ) )
assertTrue ( validator . validate ( EntityNames . SECTION , sectionIds ) . equals ( sectionIds ) )
Assert . assertEquals ( "Wrong number of records in join result." , NUM_KEYS * BUILD_VALS_PER_KEY * PROBE_VALS_PER_KEY , numRecordsInJoinResult )
assertThat ( desc . toString ( ) , is ( "a description less than <1>" ) )
assertEquals ( someCert , actualPublicKeyCert )
assertThat ( isValid , is ( false ) )
Assert . assertEquals ( "2014:01:01" , this . vocabulary . getVersion ( ) )
Assert . assertEquals ( "Hello World!" , sc . saySomething ( ) )
Assert . assertNull ( tmp )
assertEquals ( "[[s1, s2, s3, s4, s5]]" , toStringOfArrayOfStrings ( array ) )
assertEquals ( witnessList , tokenList )
assertNull ( dataset )
assertTrue ( job . getConfiguration ( ) . getBoolean ( AvroJob . INPUT_IS_GENERICS , false ) )
Assert . assertTrue ( testMatcher . matches ( examplePath ) )
Assert . assertEquals ( icmsSetado , icms . getIcms90 ( ) )
assertUnderflow ( ( double ) x * ( double ) y , result , x * y )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertSame ( ps1 , ps2 )
assertTrue ( "Latch not fired" , cdl1 . await ( 5000 , TimeUnit . MILLISECONDS ) )
assertEquals ( blockers . size ( ) , 0 )
doubles . assertNotGreaterThan ( description , null , 8d )
assertEquals ( tip * tax , RestaurantBill . calculateTotal ( tip ) , 0 )
assertThat ( testOutcome . toString ( ) , is ( "App should work:Step one, Grouped steps [Nested step one, Nested step two, Nested step one, Nested step two]" ) )
assertFalse ( listOutput . isEmpty ( ) )
assertNotNull ( ksl . getKettleDocument ( new StringBufferInputStream ( xml ) ) )
assertEquals ( 1 , list . size ( ) )
Assert . assertEquals ( userId , 1 )
assertNotNull ( projectionRef )
assertEquals ( 5 , client . getIdleConnections ( ) )
assertEquals ( expectedId , changes . getJsonObject ( "Id" ) . getString ( "Id" ) )
Assert . assertTrue ( Long . MAX_VALUE == _c . convert ( "9223372036854775807" ) )
assertEquals ( trueConcept , ObsResource1_8 . getValue ( obs ) )
assertThat ( ( Counter ) c1 . delta ( c0 ) , is ( new Counter ( 10L ) ) )
assertNotNull ( prorroga . getId ( ) )
assertSame ( a , b )
assertEquals ( group1 , actaul )
assertTrue ( JobUtils . isJobExecutionAbandonable ( jobExecution ) )
assertEquals ( 1 , handlerContainer . onUnbindMethodCalled )
assertEquals ( 0 , elements . size ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( 4 , MathArrays . distanceInf ( p1 , p2 ) )
assertThat ( serialisedClaimOf ( job ) , is ( equalTo ( Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . getName ( ) + Johnzon . class . get
Assert . assertEquals ( "Invalid password" , "Bert" , passwordCallback . getPassword ( ) )
assertTrue ( closed . await ( 4 , SECONDS ) )
assertEquals ( false , result )
assertThat ( "output does not match: " , normalizeFileContents ( actual ) , is ( equalTo ( normalizeFileContents ( expected ) ) ) )
tester . assertRenderedPage ( page )
assertEquals ( userGroupDao . selectUserGroupByUserId ( "user1" ) . size ( ) , 2 )
assertEquals ( expected , actual , 0.0 )
assertEquals ( 4 , ret )
assertFalse ( AuthzResolver . authorizedInternal ( session , "test_authorized_group_and_vo" , Arrays . asList ( createdVo , createdGroup ) ) )
assertEquals ( Long . valueOf ( 1L ) , myTestInstance . updateAsync ( doc , update , true , true ) . get ( ) )
assertEquals ( "1" , output . toString ( ) )
assertEquals ( TypeInfoFactory . getUnionTypeInfo ( Arrays . asList ( TypeInfoCreator . createBoolean ( ) , TypeInfoCreator . createBoolean ( ) ) ) , orcType )
Assert . assertFalse ( result )
Assert . assertThat ( userStore . add ( andrew ) , is ( true ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "REMOVE /status" ) )
assertNull ( response )
assertThat ( effect , is ( 3 ) )
assertThat ( output , is ( equalTo ( "\\"a2b\\\\\\"d2q\\\\\\"a2b\\\\\\"c3b\\\\\\"d2q\\\\\\"aa\\\\\\"aa\\\\\\"xyz\\\\\\"ae\\\\\\"aa\\\\\\"aa\\\\\\"xyz\\\\\\"ae\\\\\\"aa\\\\\\"xy
assertEquals ( VendorOptionManager . getInstance ( ) . getDefaultVendorOptionVersion ( ) , field . getVendorOption ( ) )
assertParseFilesOk ( output , NO_SUCH_OBJECT )
assertThat ( packet . getPacketHeader ( ) . getData ( ) , containsString ( "numServers" ) )
Assert . assertNotNull ( new Bean80BindMap ( ) )
assertEquals ( "{\\"error\\":{\\"code\\":null,\\"message\\":null,\\"details\\":[{\\"code\\":null,\\"message\\":null}]}}" , jsonString )
assertEquals ( expectedString , formattedDate )
assertEquals ( "<!--" , result )
assertTrue ( result )
assertTrue ( elPresent )
assertArrayEquals ( new String [ ] { "leftLeaf" , "root" } , treeContent )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
assertFalse ( game . isGameOver ( ) )
assertThat ( id . isPresent ( ) , is ( false ) )
assertNotNull ( store )
mock . assertIsSatisfied ( )
assertThat ( result , is ( equalTo ( newFile ) ) )
assertEquals ( null , result )
assertThatWorkflowInstanceCompletedAfter ( workflowInstanceKey , "end-2" )
assertEquals ( notAfter , clonedCertificate . getNotAfter ( ) )
assertThat ( htmlElement . exists ( ) , is ( true ) )
assertExpression ( jc , "map(foo,bar)" , Boolean . TRUE )
assertEquals ( 10.5 , v , 0.0000001 )
assertThat ( output , containsString ( "DICOM Web Search Instances fetched:" ) )
assertEquals ( exp , z )
assertEquals ( keyExpected , keyBuilt )
assertThat ( subject . shouldProcess ( message ) , is ( false ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertNull ( "Must be null" , ovsdbBridgeAugmentation )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( text ( contents ) , is ( "0a\\t0b\\t0c\\n1a\\t1b\\t1c\\n2a\\t2b\\t2c\\n" ) )
assertTrue ( output . indexOf ( "sayHiArray" ) > - 1 )
assertNotNull ( c )
BeanAssert . assertBeanEquals ( bean , parsed )
assertEquals ( map . get ( "child" ) , ( map . get ( "child" ) ) )
assertEquals ( Sets . newHashSet ( "Kxf4" , "Kxd4" ) , moves )
Assert . assertEquals ( expected , actual )
assertFalse ( initiativeInfo . hasTotalSupportCountAtLeast ( ) )
assertThat ( result , is ( "Result From Target Endpoint" ) )
assertEquals ( expected , clusters )
assertArrayEquals ( data , readDataFromFileFailing ( ) )
assertNull ( reader . overflowAtoms ( ) )
assertNull ( graph )
assertArrayEquals ( "invalid tokens" , expected , check . getRequiredTokens ( ) )
assertThat ( result . fullName ( ) , is ( Object . class . getName ( ) ) )
assertThat ( diff , hasItem ( "restored schema" ) )
assertEquals ( 1 , allViolations . size ( ) )
assertEquals ( "" , result )
assertThat ( PrettyTime . of ( Locale . ARCHIVED ) . print ( duration , TextWidth . WIDE ) , is ( "15 ans, 3 mois, 1 semaine et 2 jours" ) )
assertThat ( outputDirectory . getPath ( ) , is ( "target" + FILE_SEPARATOR + "reports" + FILE_SEPARATOR + "thucydides" ) )
assertThat ( fs . exists ( path1 ) , is ( false ) )
assertFalse ( "Unable to update non existing user" , success )
Assert . assertEquals ( 2 , patients . size ( ) )
assertEquals ( 1 , endpointMapping . getOrder ( ) )
assertEquals ( result . getStrategy ( ) , DYNAMIC )
Assert . assertEquals ( 0 , sync ( cache . size ( ) ) . intValue ( ) )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( Long . valueOf ( 1L ) , count )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertEquals ( dog , ExternalizableHelper . fromBinary ( binDog , v2 ) )
Assert . assertEquals ( 70 , analyser . getLoadDelivered ( route ) . get ( 0 ) , 0.01 )
assertEquals ( child . getProperty ( "prop" ) , child . getProperty ( "prop" ) )
Assert . assertNull ( ret )
assertEquals ( 3 , sum . get ( ) )
assertEquals ( 6.0 , u . getGeometricMean ( ) , 0.000001 )
assertEquals ( "Should visit all the properties of the visitor" , 1 , visitor . visit ( sub ) )
assertEquals ( "ran��s么r" , data . readString ( Charset . forName ( "utf-32be" ) ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertFalse ( result )
assertEquals ( buf . toString ( ) , expected )
Assert . fail ( )
assertThat ( dispatched , is ( ASYNC_PRIVATE_FLOW_MSG + ".main1@" + ASYNC_MAIN_FLOW_THREAD_NAME + "." + ASYNC_PRIVATE_FLOW_NAME + "@" + ASYNC_MAIN_FLOW_THREAD_NAME ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "gifImageTest05.pdf" , sourceFolder + "cmp_gifImageTest05.pdf" , destinationFolder , "diff_" ) )
assertEquals ( expected , actualQuery )
assertEquals ( actual , prefData )
assertNotNull ( ex )
assertTrue ( "There was cacheable headers" , HeaderUtils . hasCacheableHeaders ( headers ) )
Assert . assertEquals ( 0.0 , diag . getEntry ( 1 , 2 ) , Precision . SAFE_MIN )
assertEquals ( ( Integer ) 20 , task . join ( ) )
assertTrue ( result . wasSuccessful ( ) )
assertEquals ( 1 , graph . countVertices ( "Person" ) )
assertFalse ( topic . isPlugable ( ) )
Assert . assertEquals ( descricaoEvento , eventoRetorno . getDescricaoEvento ( ) )
assertThat ( description . toString ( ) , is ( "A JSON string that matches {\\n" + "}" ) )
assertXpathNotExists ( "/a:feed/at:deleted-entry" , xmlString )
assertEquals ( val , result )
assertEquals ( 1 , count )
assertTrue ( wrapper . isRunInTx ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( Result . FAIL , name . apply ( item , - 1 ) )
assertEquals ( dummy , dummy . dummy )
Assert . fail ( e . getMessage ( ) )
assertTrue ( "Document deleted" , result == null )
assertEquals ( this . object , b . getObject ( ) )
assertEquals ( value , bean . getIPad ( ) )
assertEquals ( "" , record . getGroupId ( ) )
assertNull ( namedConfig . get ( "key" ) )
assertEquals ( expected , rewrite ( input ) )
assertEquals ( output1 , output2 )
assertNotNull ( ucioLoaded )
assertTrue ( entity . getId ( ) > 0 && entity . getVersion ( ) == 1 )
assertEquals ( false , start )
assertEquals ( expectedMap , map )
assertEquals ( i - 1 , ret )
Assert . assertEquals ( 0 , patientCount )
assertArrayEquals ( expectedResult , actualResult , 0.000001 )
assertEquals ( expected , calc , 1e-5 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff52_" ) )
assertEquals ( "NP (DT an) (-LRB- -LRB-) (VBG offending) (-RRB- -RRB-) (NN country)\\n" , out . toString ( ) )
Assert . assertEquals ( cana , notaInfo . getCana ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "Folder/" , uriTools . relativePath ( base , uri ) . toASCIIString ( ) )
Assert . assertTrue ( validated )
assertThat ( EventDispatcher . pending . get ( ) , is ( singletonList ( CompletableFuture . completedFuture ( null ) ) ) )
assertEquals ( "<foo><bar>Hey FOO
assertEquals ( "runOnList" , result )
assertEquals ( "Should have added the blueprint" , IOUtils . toString ( ( StringReader ) response ) , response )
assertFalse ( process . isComplete ( ) )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) , "rollback" )
assertEquals ( "(= 34 abc)\\n" , found )
assertNotNull ( certificate )
assertEquals ( 1 , result . get ( "id" ) )
assertThat ( systemOutRule . getLog ( ) , containsString ( "Hello World!" ) )
assertTrue ( testFailed . isEmpty ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( new DeviceRegistration ( AcmeKey . KEY_HANDLE , AcmeKey . USER_PUBLIC_KEY_B64 , AcmeKey . ATTESTATION_CERTIFICATE , 0 ) , response )
assertThat ( resizedImage . getHeight ( ) , is ( lessThan ( 788 ) ) )
Assert . assertEquals ( description , value )
assertEquals ( ( long ) 8 , ( long ) result . getLongValue ( ) )
assertNotNull ( result )
assertTrue ( params . hasValue ( "a" ) )
assertEquals ( expected , actual )
tester . assertCompleteMatch ( )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertThat ( actualSink , is ( sameInstance ( sink ) ) )
assertTrue ( Wxs . check ( signature , timestamp , nonce , token , null ) )
assertEquals ( new Timestamp ( 28800000 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
Assert . assertEquals ( "Default Const - type" , WTree . Type . RENDER , tree . getType ( ) )
Assert . assertEquals ( valorTest , valor )
assertTypeImportsAndSpellings ( types , "foo.bar" , ImmutableList . of ( "java.util.Map" , "java.util.Timer" , "java.util.regex.Matcher" , "java.util.regex.Pattern" ) , ImmutableList . of ( "int[]" , "Pattern[]" , "Set<Matcher[]>[]" , "List<Timer[]>" ) )
assertArgumentParserException ( args )
assertSame ( gav7 , ReleaseIdComparator . getEarliest ( list ) )
assertEquals ( "A" , model . getCount ( ) )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertEquals ( 0 , empty . size ( ) )
assertEquals ( "SELECT FROM V WHERE PARAMETER = 5" , q . toString ( ) )
assertThat ( model . size ( ) , is ( 0 ) )
assertThat ( result , is ( mockBundle ) )
Assert . assertTrue ( success . get ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( format ( "Wrong price order for LimitOrders %s, %s" , b1 , b1 ) , BookSanityChecker . hasErrors ( book ) )
assertThat ( message . toJSON ( ) , is ( ( JsonElement ) json ) )
assertThat ( request . getStagingDirectory ( "product-00" ) , equalTo ( "systemUser/product-00" ) )
assertThat ( families , arrayContaining ( "Business/JIRA" ) )
assertEquals ( LANE_COUNT , roadMapping . roadMapping ( ) . get ( ) . getId ( ) )
assertDeploySucceeded ( build )
assertThat ( matcher , notNullValue ( ) )
assertRendering ( repeat ( "*a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \\"a \
assertEquals ( 2 , tasks . size ( ) )
assertNotNull ( model )
Assert . assertTrue ( verifyRes )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<test><date>20101-01 00:00</date></test>" , stringifiedTestObject )
assertTrue ( e . getMessage ( ) . contains ( "C3, C4" ) )
assertThat ( outputDirectory , not ( containsText ( "javax.validation" ) ) )
Assert . assertEquals ( "Feedback Test" , emailService . getFeedback ( "testSendFeedback@testSendFeedback.eu" ) )
assertTrue ( contentC . isVisible ( ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( "field.asInteger()" , p . toString ( ) )
Assert . assertEquals ( "Node{edge=FOO, value=-, edges=[]}" , node . toString ( ) )
assertEquals ( "OK r1=x&r2=y" , writer . toString ( ) )
assertServletWasInvokedWith ( entity )
assertThat ( log , containsString ( "" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?>\\n" + "<dbupdate created=\\"2012-12-01 00:00:00\\">\\n" + "     <messages/>\\n" + "
assertTrue ( flag )
assertDefaultNodeId ( 1 )
Assert . assertNotEquals ( response . getStatusLine ( ) . getStatusCode ( ) , HttpStatus . SC_BAD_REQUEST , "We should not get internal server error" )
assertThat ( response , is ( equalTo ( expected ) ) )
assertThat ( driver . getTitle ( ) , is ( "JToolBar" ) )
assertEquals ( "streamflow home config should match ConfigLoader streamflow config" , mockedConfig , loadedConfig )
assertEqualsEvenUnderWindows ( "{\\n" + "  \\"from\\" : 0,\\n" + "  \\"size\\" : 10,\\n" + "  \\"query\\" : {\\n" + "    \\"match_all\\" : { }\\n" + "  },\\n" + "  \\"aggregations\\" : {\\n" + "    \\"source_filter\\" : {\\n" + "      \\"filter\\" : {\\n" + "        \\"match_all\\" : { }\\n" + "      },\\n" + "      \\"aggregations\\" : {\\n" + "        \\"source\\" : {\\n" + "          \\"significant_terms\\" : {\\n" + "            \\"field\\" : \\"dc:source\\",\\n" + "             \\"significant_terms\\" : {\\n" + "              \\"field\\" : \\"dc:source\\",\\n" + "              \\"significant_terms\\" : {\\n" + "              \\"field\\" : \\"dc:source\\",\\n" + "              \\"significant_terms\\" : {\\n" + "               \\"field\\" : \\"dc:source\\",\\n" + "               \\"significant_terms\\" : {\\n" + "                \\"field\\" : \\"dc:source\\",\\n" + "                  \\"field\\" : \
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertDegenerate ( scan )
Assert . assertEquals ( 5 , loc )
Assert . assertEquals ( "select a,(select a,b from d where b=1 order by b) from c where a=1 " , SqlObject . removeOrderBy ( sql ) )
TestUtil . assertSuccess ( testResultWriter )
Assert . assertEquals ( "mock" , pl . getPluginName ( ) )
assertNotNull ( National . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "US" ) . read ( ) )
assertEquals ( expResult , result )
assertThat ( formatter . format ( PlainDate . of ( 0 , 1 , 1 ) ) , is ( "BC 0001-01-01 (Q1)" ) )
assertEquals ( getExpectedSchemaAndValue ( Schema . OPTIONAL_BOOLEAN_SCHEMA , expectedValue , expectedName ) , result )
assertEquals ( post , postList ( 3 , post ) )
assertEquals ( "null" , output )
assertEquals ( expected , actualQuery )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( PersonGenderCodeType . UNKNOWN , output . getRegularCPRPerson ( ) . getPersonGenderCode ( ) )
assertNotNull ( basicBean )
assertNoCause ( "message" )
AssertJUnit . assertEquals ( "\\"lijz\\"" , ret )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
TestCase . assertEquals ( 1 , result )
assertEquals ( "Erreur g茅n茅rale." , message )
iterables . assertContainsAll ( info , actual , expected )
assertEquals (typicalPrice , typicalPriceIndicator . getValue ( i ) )
assertEquals ( "Base for strings is wrong" , "2001:db8:2de:0:0:0:0:e13" , parsed )
assertThat ( actualExceptionLevel , is ( expectedExceptionLevel ) )
assertEquals ( null , acualValue )
assertEquals ( r1 , r2 )
assertTrue ( seen . isSeen ( ) )
assertEquals ( check . getValue ( ) , actual )
assertEquals ( Arrays . asList ( "Hello" , "Hello" ) , commandList )
Assert . fail ( "createErrorProbabilities(null) expected IllegalArgumentException" )
assertTrue ( output , output . matches ( "(?s).*Invalid object name.*" ) )
assertEquals ( expectedAutoExpireDate , drugOrder . getAutoExpireDate ( ) )
assertRoundtrip ( input )
assertThat ( anyTS . isValid ( MILLI_OF_DAY , 999 ) , is ( true ) )
assertToString ( fromExpr ( "Hello" , f . newMethodInvocationExpression ( Models . toName ( f , "Arrays" ) , Collections . emptyList ( ) , f . newSimpleName ( "asList" ) , Arrays . asList ( Models . toLiteral ( f , "Hello, world!" ) ) ) ) , "Hello" , "[Hello, world
assertThat ( output , containsString ( "HL7v2 message ingested:" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertTrue ( dao . exists ( allergy . getId ( ) ) )
assertEquals ( 200 , result . getStatusCode ( ) )
assertNotNull ( ple )
assertThat ( values , is ( empty ( ) ) )
Assert . assertEquals ( TestModuleFactory . class , moduleFactory . getClass ( ) )
assertTrue ( strategy . isCrawable ( url , 11 ) )
assertEquals ( false , CollectionUtils . isEmpty ( coll ) )
assertEquals ( "Thread should have beenduleThread" , numThreads , instance . getNumThreads ( ) )
assertNull ( cause )
assertEquals ( roleListWrapper , userRoleResource . getRoles ( ) )
assertEquals ( "simple-distinct-name-jboss-ejb3.xml" , ejbJarMetaData . getDistinctName ( ) )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "{\\"100.0\\":10,\\"99.0\\":10,\\"98.0\\":10,\\"95.0\\":10,\\"90.0\\":8,\\"80.0\\":8,\\"75.0\\":8,\\"50.0\\":3}" , result . toString ( ) )
assertFailureValue ( "expected to be non-map" , "but was" , actual )
assertEquals ( frameData , frameData )
assertEquals ( 1 , newSize - initialSize )
Assert . assertTrue ( res . booleanValue ( ) )
assertEquals ( "------------ Request ------------\\n     null\\n\\n------------ Body ------------\\nnull\\n\\n" , result )
assertThat ( engine . evaluate ( TESTSUITE_NAME_ATTRIBUTE , document ) , equalTo ( "title.story" ) )
assertFalse ( d instanceof Cloneable )
assertTrue ( e instanceof E_Exists )
assertTrue ( topic . isHasUpdates ( ) )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( Resource . CoreRowType . TAXON . toString ( ) , resource . getCoreType ( ) . toLowerCase ( ) )
Assert . assertThat ( QueryBuilder . getInstance ( ) . buildFilterQuery ( co , "" , 1 , 0 , 0 , 0 , null ) , equalTo ( expected ) )
assertEquals ( revision , currentRevision )
Assert . assertEquals ( extractor . generateKey ( host , req1 ) , extractor . generateKey ( host , req2 ) )
assertHelpScreen ( )
assertEquals ( "<html><head><script></script><noscript></noscript></head><frameset><frame src=\\"foo\\" /><frame src=\\"foo\\" /></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( 0x7777 , frame . getLong ( ) )
Assert . assertTrue ( res )
assertThat ( result . getId ( ) , is ( notNullValue ( ) ) )
assertTrue ( Arrays . equals ( expectedResult , buffer . array ( ) ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( hasJsonPath . matchesSafely ( json ) , is ( false ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertEquals ( comment , newId3tag . getComment ( ) )
assertNoViolations ( constraintViolations )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 ) )
assertThat ( markedWord , is ( "louper" ) )
assertTrue ( observer . isCalled ( ) )
assertSame ( mockConnection , instance2 . getConnection ( ) )
assertEquals ( VALUE , value )
assertTrue ( "SecurityConstraint is expected to be deployed as provider" , everrestApplication . getSingletons ( ) . stream ( ) . filter ( e -> e instanceof SecurityConstraint ) . count ( ) == 1 )
assertEquals ( mockTimingOutLocalHost , cache . getHostname ( ) )
assertThat ( list . size ( ) , is ( 1 ) )
Asserts . check ( targetHosts . size ( ) > 0 , "fail setTargetHostsFromLineByLineText setTargetHostsFromUrl" )
assertNotNull ( asset )
Assert . assertTrue ( timestamp > 0 )
Assert . assertEquals ( cpf , eventoRetorno . getCpf ( ) )
Assert . assertFalse ( runs . isEmpty ( ) )
assertEquals ( HTTP_CODE , response . getCode ( ) )
assertThat ( auth . createSaslClient ( ) , is ( notNullValue ( ) ) )
assertEquals ( "abgh" , builder . toString ( ) )
assertTrue ( executed )
assertThat ( t . getName ( ) , is ( "surefire-plugin@NotThreadSafe" ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "2_4" , "3" , "4" , "5" , "6" , "7" ) ) )
assertEquals ( 100 , results . size ( ) )
assertEquals ( "100" , result )
assertThat ( content . getRepository ( workspaceName1 ) . getContent ( ) , is ( "test" ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa must be a float." ) )
assertTrue ( match == null )
assertEquals ( 2 , count )
Assert . assertEquals ( testString , HtmlToXMLUtil . unescapeToXML ( testString ) )
assertPlanMatches ( expected )
assertEquals ( response . getStatus ( ) , 500 )
assertEquals ( x , x . getValue ( ) )
assertEquals ( "Wrong class for template" , MyTinyTest . class , typeForTemplate . getClass ( ) )
assertEquals ( assertion , matrix )
assertEquals ( msg , redis . bgsave ( ) )
assertEquals ( "I didn't get a TabLoader" , 1 , records . size ( ) )
assertEquals ( "2" , month )
assertEquals ( "text as string" , db . get ( "text" ) )
assertThat ( this . support . getAllSelectedOptions ( webElement ) , hasSize ( 0 ) )
assertOnResponseAttachment ( f3gbServer , MAX_SIZE2 )
assertEquals ( "2015-03-03T15:00:00Z" , dateTimeZone . getID ( ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "HTTP/1.1 404 Not Found" , sb . toString ( ) . trim ( ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertThat ( steps . getSteps ( ) , is ( notNullValue ( ) ) )
assertThat ( manager . getAllManagers ( ) , hasSize ( 2 ) )
assertEquals ( 1 , deps . size ( ) )
assertEqualsIgnoreLineEnding ( Json . pretty ( rep ) , "{\\n" + "  \\"name\\" : \\"hi!?\\"\\n" + "}" )
assertEquals ( "Token[%s, %s]" , result , Token . class . getSimpleName ( ) )
assertPostCodegenRules ( mojo )
Assert . assertEquals ( 2 , list . size ( ) )
assertEquals ( 0 , observations . size ( ) )
assertTrue ( descriptor . isTypeConstrained ( ) )
assertTrue ( plots . get ( 0 ) == plot1 )
assertEquals ( "Jimmie, Barninger, CA" , object . getString ( "firstname" ) )
assertThat ( this . subject , is ( not ( otherUser ) ) )
assertEquals ( "100000" , String . valueOf ( Integer . parseInt ( result ) + rejected ) )
assertIsAborted ( tx )
assertEquals ( 1 , command . getMc ( ) )
assertSame ( "has criteria method returned the same amount" , uaiCriteria . hasCriteria ( ) , uaiCriteriaCTO . hasCriteria ( ) )
Assert . assertEquals ( 9 , generatedTests . size ( ) )
assertEquals ( "1.0" , queryVersion )
assertEquals ( Arrays . asList ( "A\\n" , "B\\n" , "C\\r" , "D\\r\\n" , "E\\r\\n" , "F\\r" , "\\r" , "G" ) , lines )
Assert . assertTrue ( "Menu should contain a seperator" , menuBar . getMenuItems ( ) . get ( 0 ) instanceof WSeparator )
assertTrue ( results . size ( ) > 0 )
assertEquals ( true , executeTestMethod ( test , Boolean . class , null , Boolean . valueOf ( true ) ) . booleanValue ( ) )
assertThat ( SimpleFormatter . ofDatePattern ( "MM/dd/yyyy" , Locale . US ) . withTime ( PlainTime . of ( 0 , 0 , 0 ) . with ( PlainTime . of ( 45 , 45 , 0 ) ) ) , is ( date ) )
Assert . assertEquals (interestingness , sut . computeInterestingness ( activity ) )
assertEquals ( server . getCalls ( ) . size ( ) , 0 )
assertEquals ( 1 , count . get ( ) )
assertEquals ( values . size ( ) , 3 )
Assert . assertFalse ( patientService . isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert . assertEquals ( 43 , map . size ( ) )
assertTrue ( "locator current not expired from cache" , locatorCache . isLocatorCurrentInBatchLayer ( LOCATOR ) )
assertEquals ( "substring(cat.name,(cat.name.indexOf(\\\\)" ) + 1,(cat.name.indexOf(\\\\)" ) - 1 )" , serializer . toString ( ) )
Assert . assertEquals ( 0.4 , bo . getResult ( ) , 0.000001 )
assertEquals ( 1 , testResult )
Assert . assertEquals ( 1000 , response . getTotalHits ( ) . value )
assertNotNull ( result )
assertEquals ( 0x0000002d , s . m0_0 ( ) )
Assert . assertNotNull ( vmComponent )
assertEquals ( "next node must be node2" , node2 , currentRouter . getNextNode ( msg ) )
assertEquals ( expectedEnv , env )
assertSame ( expected , CRest . getOAuthInstance ( "a" , "b" , "c" , "d" , "e" , "f" ) )
assertEquals ( expecting , result )
assertEquals ( expectedManifest , actualManifest )
assertThat ( "Width of color picker is overridden by " + "default caption feature" , width , is ( lessThan ( 148 ) ) )
assertNotNull ( room1 . getId ( ) )
assertEventsEquals ( expectedEvent , getOnlyElement ( events ) )
assertEquals ( expected , bos . toString ( ) )
assertTrue ( "Should have received no message" , latch . await ( 1 , TimeUnit . SECONDS ) )
assertTrue ( session . markRecordAsRead ( epoch - 1 , 2 ) )
assertEquals ( "Root NSEC with DS must be bogus" , SecurityStatus . BOGUS , s )
assertEquals ( "Should have been able to read and write to the file" , _expected , new String ( out . toByteArray ( ) , "UTF-8" ) )
assertNotNull ( Alert . fetcher ( "NOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "NOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertThat ( "When the URL ends with a directory, and if an index.html file is present in that directory," + " the server should respond with that file" , str , containsString ( "Simple index file" ) )
assertEquals ( 8 , result )
assertTrue ( e . getCause ( ) instanceof ProcessingException )
assertThat ( c . value , is ( "aaa" ) )
assertEquals ( OMITTED_FOR_OPTIONAL , adapter . getOptional ( ) )
assertEquals ( expected , output )
Assert . assertEquals ( "Expect all options to be unselected" , OPTIONS , multi . getNotSelected ( ) )
assertEquals ( Arrays . asList ( "test" , 3 , "ok" , 1 ) , list )
assertEquals ( mockResponse ( 200 , RESPONSE ) , r )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertEquals ( 0 , violations . size ( ) )
assertEquals ( "[Test] expecting elements:\\n<['Yoda']>\\n not to be <not a Jedi>" , message )
Assert . assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , status )
assertTrue ( transform instanceof Modifier . Definr )
assertEquals ( unQuotedString , ocsvTransformer . getCellContent ( doubleQuotedString ) )
assertStat ( result )
assertEquals ( 1403602429000L , getTimeWithoutZoneOffset ( format . parse ( "2014-06-24 09:33:49" ) ) )
assertEquals ( "Read failed" , 3000 , result )
assertEquals ( profile . getId ( ) , result . getId ( ) )
assertNotNull ( probe )
assertEquals ( expResult , result )
assertEquals ( 1 , es1 . getEntities ( ) . size ( ) )
assertThat (AugmentedEntity . getRelationshipToPartialRelationship ( ) , is ( equalTo ( augmented ) ) )
assertThat ( given . getScreenshots ( ) . size ( ) , greaterThan ( 0 ) )
assertEquals ( workflow . getID ( ) , "selectSingleReviewer" )
assertTrue ( uvp . getFirstValue ( ) == st . getFirstValue ( ) )
assertEquals ( "[{\\"op\\":\\"ADD\\",\\"path\\":\\"/add/an/object\\"},{\\"op\\":\\" TEST\\",\\"path\\":\\"/test/someObject\\"}]" , jsonPatch . toString ( ) )
assertEquals ( result , left )
assertEquals ( "Failed on iteration " + i , z1 , z2 )
Assert . assertEquals ( 2844047 , distinct )
assertThat ( sd . toString ( ) , is ( "a JSON node with jsonPath that doesn't exist" ) )
assertTrue ( actualSubsets . isEmpty ( ) )
assertEquals ( "file1\\nfile2\\nfile3" , cat )
assertTrue ( bw > 0 )
assertEquals ( expResult , result )
assertTrue ( condition . matches ( testEvent ) )
assertSame ( connection , incrementPoolOnTimeoutConnectionAcquiringStrategy . getConnection ( connectionRequestContext ) )
assertEquals ( "anonymous class" , myColumn . toString ( ) )
Assert . assertEquals ( "abc" , stringAppender . getChars ( ) )
assertNotNull ( result )
assertEquals ( "a" , book . getName ( ) )
assertEquals ( src , dst )
assertEquals ( 2 , langs . size ( ) )
mongoDbChecker . assertThatConnectionIsPossible ( anyString ( ) , anyInt ( ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( lang1 , lang2 )
assertEquals ( "fordp1" , sut . execute ( "Prefect" ) )
assertEquals ( "" , t )
get ( "/" ) . then ( ) . assertThat ( )
assertNotNull ( actualDataFlavour )
assertions . isNotEqualTo ( expected )
assertInsert ( INSERT_ARRAY_TYPES_WITH_NULL_VALUES_STMT , 1 , schemasAndValuesForArrayTypesWithNullValues ( ) )
assertThat ( hijri . with ( CommonElements . weekOfYear ( HijriCalendar . family ( ) , model ) . floor ( ) ) , is ( expected ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( existing , policy . merge ( "map" , entryMerging , entryExisting ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><xxxxxx/>" , result . getResult ( ) )
assertEquals ( "All Hooks" , node . get ( "hooks" ) . getAsText ( ) )
assertEquals ( Action . COMMENT , action . comment ( ) )
assertTrue ( result )
assertThat ( findFeature ( features , "ClearCache" ) , is ( instanceOf ( ClearCacheFeature . class ) ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( completedHistoricActivityInstances . size ( ) , is ( 3 ) )
assertEquals ( "aTestString" , classUnderTest . getCatalogFilterInclude ( ) )
assertEffectiveActivation ( userAfter , ActivationStatusType . ENABLED )
Assert . fail ( "ClassNotFoundException expected" )
Assert . assertEquals ( "{\\"@odata.context\\":\\"$metadata#ESMixEnumDefCollComp/$entity\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"PropertyEnumString\\":\\"String2,String3\\"," + "\\"CollPropertyEnumString\\":[]," + "\\"PropertyDefString\\":\\"Test\\"," + "\\"CollPropertyDefString\\":[]," + "\\"PropertyCompMixedEnumDef\\":null," + "\\"CollPropertyCompMixedEnumDef\\":[]}" , resultString )
assertTrue ( latch . await ( 15 , TimeUnit . SECONDS ) )
assertTrue ( victim . isIncrementalBuild ( ) )
assertEquals ( false , testTx . getShortLived ( ) )
Assert . assertEquals ( "Password is not correct" , "p@ssw0rd" , redisURI . password ( ) )
assertEquals ( expectedValues , actualValues )
assertNotNull ( result )
Assert . assertEquals ( "type name website" , title )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "UserFeedData [id=, profilePictureUrl=, userName=, websiteUrl=]" , result )
assertThat ( count , is ( 4L ) )
assertEquals ( WORKER_NUMBER , set . size ( ) )
assertTrue ( "RouteNode fetched by name" , rn != null && StringUtils . equals ( rn . getRouteNodeName ( ) , rn . getRouteNodeName ( ) ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "job1_2_operator" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertSQLException ( ( ) -> statement . execute ( ) )
assertTrue ( FileUtils . isFile ( file ) )
assertThat ( the ( name , be ( equalTo ( "Alex" ) ) . and ( be ( startsWith ( "B" ) ) ) . or ( be ( anything ( ) ) ) ) , is ( false ) )
assertEquals ( lovedTracks , dbLovedTracks )
Assert . assertEquals ( ( Integer ) 443 , port )
assertEquals ( 2 , allServices . size ( ) )
JsonPathAssert . assertThat ( doc )
Assert . assertEquals ( 1 , result . size ( ) )
Assert . assertThat ( item . isNullValue ( "isNull" ) , is ( false ) )
assertTrue ( builder . build ( ) . getAdaptationConfig ( ) . isAdaptationEnabled ( ) )
this . assertServiceInstanceGetRequest ( serviceInstance , true , "failed" )
assertEquals ( tknzn . getTokens ( ) . length , 0 )
Assert . assertEquals ( OBJECT , clone )
assertEquals ( title , d_threeArmModel . getTitle ( ) )
assertEquals ( mTestDir1 . getCapacityBytes ( ) , mTestDir1 . getAvailableBytes ( ) )
assertEquals ( "Local rewritten value" , ( Integer ) 10 , localState . commit ( globalState ) . deref ( ) )
assertThat ( after , is ( "2->3->3->4->5->8->NULL" ) )
assertEquals ( 3 , FastMath . exp ( chart . getLogPartitionFunction ( ) ) , 1e-3 )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "25-Oct-2013" )
Assert . assertTrue ( "Test isAttributePresent returns true" , element . isAttributePresent ( "someAttribute" ) )
assertFalse ( "Returned object should not be a LoopingIterator." , loop . hasNext ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( response . getStatus ( ) , 200 )
Assert . assertEquals ( "[\\"\\",\\"abc\\",\\"\\\\b\\\\f\\\\n\\\\r\\\\t\\",\\"\\\\\\"\\",\\"\\\\\\"\\",\\"\\\\u001f\\"]" , writer . toString ( ) )
assertTrue ( "Fault message not cleaned" , cleanupCalled [ 0 ] )
assertEquals ( "unique" , col . iterator ( ) . next ( ) )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-managed:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertNull ( lock )
assertEquals ( "http://localhost:" + ourPort + "/fhir/Patient?_revinclude=Provenance%3Atarget&_format=json" , ourRequestUri )
assertThat ( array2 , nullValue ( ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:unsignedByte" ) )
assertEquals ( "param.properties" , lineArgs . getParameterFilePath ( ) )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testServerName.json" ) ) )
assertEquals ( relatedObjectInfo , classUnderTest . getRelatedObjectInfo ( ) )
assertEquals ( 608512271L , checksum )
assertEquals ( "<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( jsonResponse . getStatus ( ) , JsonResponseStatus . SUCCESS )
assertEquals ( expected , actual )
assertNotNull ( requestToken )
assertEquals ( "incorrect count" , 1 , genericManager . deleteAllByPropertyValue ( property , value ) )
assertThat ( stdOutContent . toString ( ) , containsString ( "1.7.2" ) )
assertEquals ( "A2B3" , confirmationCode )
Assert . assertFalse ( signatureUtil . signatureCoversWholeDocument ( "Signature1" ) )
assertSame ( expected , actual )
assertNotNull ( certificate )
Assert . assertEquals ( "(nt_string CGAAT)" , nt_string . toStringTree ( parser ) )
Assert . assertEquals ( 12. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertEquals ( expected , actual )
assertEquals ( 1 , dsg . getSinkCount ( ) )
Assert . assertEquals ( expectedRanges , actualRanges )
assertEquals ( 0 , new ReadOnlyZeroBitSet ( i ) . cardinality ( ) )
assertEquals ( "Change set number was incorrect" , "No history entries were found for the item and version combination specified.\\n\\n" , changesetNumber )
assertTrue ( errors . equals ( noErrors ) )
assertEquals ( dmatrix [ i ] [ j ] , diag [ i ] [ 0 ] , epsilon )
assertFalse ( service . canProvide ( mockModel , mockResponse , null ) )
assertEquals ( "token 2\\n" , found )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertEquals ( - 1123445 , executeTestMethod ( test , Float . class , null , - 1123445 ) . floatValue ( ) , 0.0 )
assertEquals ( reference , output , mime )
assertTrue ( "Established client hello session should be authenticated" , testConnectorSendsHelloVerifyRequestWithoutCreatingSession ( ) )
assertEquals ( 'x' , extractedChar )
Assert . assertArrayEquals ( answer , result , 1e-6 )
assertEquals ( 1 , list . size ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertFalse ( "no query result returned" , metadataElements . isEmpty ( ) )
assertEquals ( 0 , delete . execute ( ) )
assertTrue ( obj instanceof String )
context . assertIsSatisfied ( )
assertEquals ( newArrayList ( new AcceptToken ( "*" ) ) , charsetList )
assertWindowSizeIsIdeal ( from , to , idealWindowSize )
assertEquals ( expResult , result )
assertEquals ( "11.1.10" , result )
assertTrue ( result . contains ( "jentrata/bin" ) )
assertEquals ( val , read )
assertEquals ( "SELECT E1 FROM SalesOrderHeader E1 WHERE E1.soID >= 1234" , jpqlSelectStatementBuilder . build ( ) . toString ( ) )
assertEquals ( "123" , converter . getAsString ( facesContext , new UIPanel ( ) , Long . valueOf ( 123 ) ) )
assertNull ( song . getTrack ( ) )
Assert . assertTrue ( children . size ( ) > 0 )
assertEquals ( "Invalid random bytes" , size , new Random ( ) . randomBytes ( ) . length )
Assert . assertEquals ( expectedIds , actual )
assertEquals ( "@tests.AnnotationBuilderTest.Anno(value=\\"m\\", can={1})" , builder . build ( ) . toString ( ) )
Assert . assertNull ( result )
Assert . assertNull ( this . component . getAllConsentsForPatient ( "P0123456" ) )
assertThat ( resource , is ( equalTo ( method ) ) )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/page/foo%3Dbar&query=foo%3Dbar" ) )
assertEquals ( "Mike Tesla" , name )
assertNull ( arr )
Assert . assertTrue ( true )
assertROIEquivalent ( g , shape , "Checkerboard" )
assertEquals ( "http://ipt.gbif.org/eml.do?r=ants" , cfg . getResourceLink ( "ants" ) )
assertNull ( column )
assertEquals ( document , mapper . readValue ( JSON_ITEM_STATEMENTS , EntityDocumentImpl . class ) )
assertThat ( getServers ( ) , containsInAnyOrder ( "wls1" , "wls2" ) )
assertEquals ( asSet ( "firstRegion" ) , resolvedIds )
assertTrue ( calculator . getCpuCores ( ) > 0 )
assertTrue ( Pattern . matches ( "(?s).*START.*1.*2.*3.*END.*" , page . asXml ( ) ) )
Assert . assertEquals ( doc . getElementsByTagName ( "body" ) . size ( ) , 1 )
assertEquals ( 1 , v1 . query ( ) . has ( "edgeProp1" ) . count ( ) )
assertDelete ( newZipFile )
assertEquals ( "http://public.npr.org/anon.npr-mp3/npr/newscast/2015/05/31/newscastShort.mp3" , getMediaMetadataResult . value )
assertQuery ( "//*[(jcr:like(child/@prop, 'aaa%') and jcr:like(child/@prop, 'bbb%') and jcr:like(child/@prop, 'ccc%'))]" , "xpath" , ImmutableList . of ( "/content/two" ) )
assertEquals ( expected , actual )
assertEquals ( "extended-operation-instance - $everything - Patient/123" , captor . getValue ( ) )
assertThat ( grid . getColumnCount ( ) , is ( 0 ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( result )
assertTrue ( result . contains ( "39700" ) )
assertFalse ( or . isDefined ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
Assert . fail ( "build listing failure" )
assertEquals ( 0 , jobService . getExecutionStatus ( namespace , jobName ) . size ( ) )
assertThat ( unknownUser , is ( present ( ) ) )
assertEquals ( "server-name" , response . getHeader ( "Server" ) )
assertEquals ( inputWriteOperation , inputSink . getWriteOperation ( ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
Assert . assertEquals ( "�驻�� 1 砖��" , t . format ( c ) )
assertThatTestCaseObeysOracle ( 16 )
assertOut ( "/**\\n * @export\\n * @type {number}\\n */\\nRoyaleTest_A.prototype.a = Infinity" )
assertEquals ( body . toString ( ) , "123" )
Assert . fail ( "Should have failed" )
validator . assertTestSuiteResults ( 5 , 0 , 0 , 0 )
Assert . assertEquals ( expected , builder . toString ( ) . replaceAll ( "\\\\s+" , "" ) )
assertEquals ( this . urlConnection . getRealURL ( ) . getPath ( ) , "/rest/v1/" + this . sauceREST . getUsername ( ) + "/tunnels" )
assertEquals ( Arrays . asList ( "http://somelink" , "" ) , new JsonLinkConsumer ( ) . readLinks ( reader , null ) )
assertTrue ( resultSq == Position . NOPOSITION )
assertEquals
assertTrue ( "the notification handler must receive the filtered out notification" , handler . getNotifications ( ) . isEmpty ( ) )
assertEquals ( "\\n    <a> \\n      <b> \\n
assertTrue ( "Should have received confirmation" , latch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "name" , result )
assertEquals ( 1 , count )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "Found attributes" , 0 , iteratorSize ( it ) )
assertEquals ( ace , parsed )
Assert . assertFalse ( new PhenoTipsFeature ( doc , prop , HP0000100 ) . toJSON ( ) . has ( "categories" ) )
this . assertGet ( "relationshiptypeimplementations/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypeimplementations%252Ffruits/kiwi_implementation/inheritance" , "entityimplementations/relationshiptypeimplementations/kiwi_initial_inheritance.json" )
Assert . assertEquals ( "Value" , WebUtil . getContextPath ( ) )
assertTrue ( messageProcessed . await ( 2 , TimeUnit . SECONDS ) )
assertEquals ( text , builder . toString ( ) )
assertSame ( shouldFind , selection . radio ( By . id ( "test" ) ) )
assertTrue ( results . get ( 0 ) . getContentReference ( ) . getSize ( ) > 10 )
Assert . assertEquals ( Arrays . asList ( "one" ) , event . getField ( "$.arr" ) )
Assert . assertFalse ( result )
Assert . assertTrue ( allMatchingQueryParamsFilter . isEmpty ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( configuration , is ( present ( ) ) )
assertEquals ( "2001:4801:79f1:1:22d6:5749:0:3a" , dMsg )
assertEquals ( 1 , vehicles . size ( ) )
assertArrayEquals ( hexes . toArray ( ) , bites )
assertEquals ( 2 , query . getResultCount ( ) )
Assert . assertArrayEquals ( encodedValue , byteOutputStream . toByteArray ( ) )
assertThat ( f . format ( m ) , is ( "2015-11-19 09:45 pm +03:00" ) )
assertEquals ( "Invalid response" , validatedResponse , context . getResponse ( ) )
assertEquals ( "((dependencyBuilder.combine(\\"A\\",\\"B\\").build()) && (dependencyBuilder.combine(\\"C\\",\\"D\\").build()))" , inputLogicParser . parse ( root ) )
Assert . isTrue ( roles . size ( ) > 0 )
assertEquals ( 20 , maxResults )
assertEquals ( "Parent should only have two mutation events (remove field and its caption)" , 2 , mutationEvents . intValue ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( verify )
assertEventFired ( DeployDeployment . class , 0 )
Assert . assertNotNull ( poolStatistics )
assertTrue ( "should fail validation with a ConstraintViolationException" + " but we instead got a " + constraintViolationException , constraintViolationException instanceof ConstraintViolationException )
assertEquals ( 2 , selectCovered ( mergeCAs . getCas ( ) , type , 0 , 0 ) . size ( ) )
assertNotNull ( mconn )
assertEquals ( "abc" , render )
assertEquals ( "Multiple scopes created" , 2 , builder . build ( ) . getScopes ( ) . size ( ) )
Assert . assertEquals ( sql , expected . replaceAll ( "#ALIAS#" , EntityMetaDataCache . getMetaData ( EntityRestriction . class ) . getAlias ( ) ) )
Assert . assertTrue ( classToTest . getName ( ) . contains ( "Api" ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertEquals ( Timestamp . valueOf ( "2013-03-27 23:18:40.123456" ) , jstOi . getPrimitiveJavaObject ( result . get ( "five" ) ) )
assertNotFound ( client . executePost ( "/foo" , "foo b.+" , ContentType . TEXT_PLAIN ) )
assertEquals ( "Wrong result" , va , vA )
assertTrue ( "syntaxChecker should still be in the registry after move failure" , getSyntaxCheckerRegistry ( ) . contains ( OID ) )
tc . assertEquals ( "Hello World!" , post1 . result ( ) . getMessage ( ) )
assertEquals ( "UPDATE CATALOG SET SCHEMA = null" , statement . toString ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertTrue ( page . asXml ( ) . contains ( "PAGE 2 OUTPUT" ) )
assertEquals ( 1 , exts . size ( ) )
assertEquals ( "The line numbers should be same" , expectedLineNumber , result . indexOf ( "null" ) )
assertThat ( "default VM" , sut . getVM ( ) , is ( equalTo ( VM . DEFAULT_VM ) ) )
assertEquals ( "fakeClasspath" , createOptions ( args ) . classpath ( ) )
Assert . assertEquals ( "The error message is not well set " , errorMessage , geolocErrorVisitor . getErrorMessage ( ) )
assertEquals ( "#test{width:100px}\\n#test2{width:100px}" , minified )
assertFalse ( clientConnection2Closed . isDone ( ) )
assertNotNull ( jobProperties )
assertEquals ( "Clock should've returned fake time" , fakeTime , clock )
assertThat ( name . hashCode ( ) , is ( other . hashCode ( ) ) )
assertEquals ( "/foo/123" , rc . normalizedPath ( ) )
assertTrue ( result . contains ( "\\"1-0-v0\\":{\\"type\\":\\"LCD\\",\\"values\\":[\\"\\\\u0000\\"]}" ) )
assertEquals ( V8Value . INT_8_ARRAY , array . getType ( ) )
assertTrue ( resultComparator . compare ( od1 , od2 ) == 0 )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertEquals ( "Script" , result )
Assert . assertNotNull ( "No message context" , messageContext )
assertNotNull ( client )
assertEquals ( 32 , d2xy ( 32 , 3 , point ) )
Assert . assertEquals ( 1 , result . size ( ) )
assertTrue ( msg , dynAny . type ( ) . equal ( tc ) )
assertTrue ( success )
assertFalse ( files . isEmpty ( ) )
assertEquals ( templates , vals )
assertEquals ( to1 , to2 )
assertEquals ( JSON_ARRAY , json )
this . assertGet ( "nodetypes/all-visualappearancedata" , "entitytypes/nodetypes/all-visualappearancedata-of-commit-8cf0ce80c2c40c6ec178ef8e5bdc4e2fcdecc7f9.json" )
assertEquals ( Status . BACKOFF , status )
assertTrue ( Pattern . matches ( "(?s).*/valueBinding06.jsp PASSED.*" , page . asXml ( ) ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( 64 * 64 , cn . getNumColumns ( ) )
assertThat ( builder . getDom ( "test-state" ) , is ( nullValue ( ) ) )
Assert . assertNull ( caixa )
assertNotNull ( Query . reader ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( c_xml . createCoreXml ( new File ( "e:/dataSource-context.xml" ) ) )
assertThat ( new RsPrint ( response ) . printBody ( ) , is ( equalTo ( "::response::" ) ) )
assertThat ( token . image , equalTo ( "user-agent" ) )
assertEquals ( 50 , victim . position ( ) )
assertEquals ( "Levin" , lastName )
assertThat ( response , containsString ( "Unreferenced" ) )
assertEquals ( "[[]]" , writer . toString ( ) )
Assert . assertEquals ( before + 1 , Context . getProviderService ( ) . getAllProviders ( ) . size ( ) )
assertEquals ( 1 , container . children . size ( ) )
assertEquals ( jsonMessage , gson . toJson ( message ) )
assertThat ( converter . getClass ( ) , is ( typeCompatibleWith ( ReflectionConverter . class ) ) )
assertEquals ( MICRO ( Sand ) , u )
assertEquals ( "cell renderer must not have been set on null" , null , renderer . getDelegateRenderer ( ) )
assertTrue ( result . getRightOnly ( ) . contains ( "only.type1.value" ) )
assertEquals ( 200 , status )
assertEquals ( true , ptu . isPrimitiveTypeUsage ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( "HI" , result )
assertEquals ( HomeController . HOME_VIEW , view )
Assert . assertEquals ( "employee" , tableName )
assertEquals ( new RawSignResponse ( RawSignResponse . USER_PRESENT_FLAG , COUNTER_VALUE , SIGNATURE_SIGN ) , rawSignResponse )
assertNotNull ( testTx )
Assert . assertEquals ( "(aa_change_extension (aa_point_location (aa_char Ala) 124) (aa_char T) ext * ?)" , aa_change_extension . toStringTree ( parser ) )
Assert . assertEquals ( hh . getUserName ( ) , newHH . getUserName ( ) )
context . assertIsSatisfied ( )
assertFalse ( i . hasNext ( ) )
Assert . assertEquals ( hash , checksum . getValue ( ) )
Assert . assertEquals ( buffer . toString ( ) , "1, 2, 3" )
Assert . assertEquals ( expectedMethod , m )
assertEquals ( "read -  - Patient/1 - " , captor . getValue ( ) )
assertEquals ( expecting , found )
assertNotNull ( TollFree . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "US" ) . read ( ) )
assertThat ( pong , containsString ( "OK" ) )
assertEquals ( 0 , janus . getServers ( ) . size ( ) )
assertEquals ( user , aux )
Assert . assertFalse ( result . isEmpty ( ) )
assertEquals ( "ranzzz" , Bytes . toString ( res ) )
assertEquals ( true , getLoadLayerDefinitionAction ( ) . isEnabled ( ) )
Assert . assertEquals ( 1L , vm . getStack ( ) . pop ( ) )
assertThat ( rule . match ( sentence ) . length , is ( 1 ) )
assertTrue ( copy . getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( "3 dager sedan" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertEquals ( "Failure - expected to be the same" , "1234567890123456700000000000100012345620002042009" , formularioSondaReturn . getReturn ( ) )
Assert . assertNull ( found )
assertEquals ( "select entity_0 from Entity entity_0 inner join entity_0.subEntity subEntity_1 order by subEntity_1.code" , query )
assertEquals ( "GBP 0.10" , test . toString ( ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1 , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1 , CORRECT_PASSWORD , SC_OK ) )
assertThat ( options . getCannedAcl ( ) , is ( ConfigurationVariable . CannedAcl . defaultCluster ( ) ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( nw . getScore ( ) , alignment . getScore ( ) , PRECISION )
assertEquals ( 3 , result . getRow ( ) )
Assert . assertNotNull ( writer )
assertEquals ( 1 , count )
assertEquals ( testStyle , classUnderTest . getIdentifierStyle ( ) )
assertThat ( child . getAngle ( ) , IsEqual . equalTo ( 25f ) )
Assert . assertEquals ( "did not get expected data length" , testLen , result . length ( ) )
assertKernel ( kernel , RECT , e )
assertTrue ( extender . getZoomLevel ( ) == ImageViewZoomExtender . ORIGINAL_LEVEL )
assertNull ( chain . getForwardURL ( ) )
assertResultIs ( c )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertNotNull ( AvailableAddOn . fetcher ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expResult , result )
assertEquals ( "Should have found method" , "decode" , methodName )
assertEquals ( "{\\"nr_Building\\":{\\"__metadata\\":{\\"id\\":\\"" + BASE_URI + "Buildings('1')\\"," + "\\"uri\\":\\"" + BASE_URI + "Buildings('1')\\",\\"type\\":\\"RefScenario.Building\\"}," + "\\"nb_Rooms\\":{\\"__metadata\\":{\\"id\\":\\"" + BASE_URI + "Rooms('1')\\"," + "\\"uri\\":\\"" + BASE_URI + "Rooms('1')\\",\\"type\\":\\"RefScenario.Room\\",\\"etag\\":\\"W/\\"\\"}}}" , json )
assertEquals ( previousNumberOfIndividuals - 1 , size )
assertEquals ( "[0.0, 1.0, 2.0]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertThat ( path1 . equals ( path2 ) , is ( true ) )
assertThat ( generatedType , is ( notNullValue ( ) ) )
assertTrue ( "Expected that the user didn't start with '" + keyTabKey + "'" , gotException )
assertEquals ( "x = 1; y = 5" , scriptStatement . getScript ( ) )
assertThat ( mock . get ( ) , is ( "joo" ) )
assertEquals ( Integer . class , results . getValue ( ) . getClass ( ) )
assertEquals ( "max" , actual )
assertNotNull ( container . child . get ( ) )
Assert . fail ( "Authorization failure expected" )
assertEquals ( "value" , properties . get ( "key" ) )
assertEquals ( "Address" , nameStr )
assertEquals ( "" , result )
assertEquals ( actualKeys , expectedKeys )
assertEquals ( 200 , resp . getStatusCode ( ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertThat ( entry . getName ( ) , is ( "com.example.karaf.karaf.karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_karaf_
assertThat ( i , equalTo ( 1 ) )
assertMatchFailure ( result , MatchField . FieldType . HEADER , "Content-Type" , "text/plain;.+" , "application/json" )
assertThat ( injectedObject , is ( instanceOf ( InjectedBus . class ) ) )
assertEquals ( packet , p )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertEquals ( "filename-thumbnail" , filename )
assertEquals ( "Expected the index of fo after the first search" , foIndex , editor . getDocument ( ) . getLength ( ) - 1 )
assertThat ( allUsers , hasSize ( 0 ) )
assertEquals ( 4 * Nd4j . create ( new int [ ] { 4 , 3 , 2 } ) , slices )
assertEquals ( "Expenses 9/12/2002\\n" + " \\tDinner\\t$10.00\\n" + " \\tBreakfast\\t$5.00\\n" + "Meal expenses $15.00\\n" + "Total $15.00" , printer . getText ( ) )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "some referer" , mockResult . included ( "returnPath" ) )
assertEquals ( 4 , screenshotPlugin . getTheatreOfBloodNumber ( ) )
assertThat ( clock . currentTime ( ) . getPosixTime ( ) % 60 , is ( 0L ) )
assertTrue ( "The group is not equal to the entity group" , CompareUtil . compare ( egip , egic ) )
Assert . assertEquals ( ImmutableMap . < String , Object > builder ( ) . put ( "feed" , "alerts" ) . put ( "timestamp" , event . getCreatedTime ( ) . toString ( ) ) . put ( "service" , "test" ) . put ( "host" , "localhost" ) . put ( "severity" , "component-failure" ) . put ( "description" , "blargy" ) . put ( "data" , ImmutableMap . < String , Object > of ( "something1" , "a" , "something2" , "b" ) ) . build ( ) , event . toMap ( ) )
assertEquals ( e1 , e2 )
assertThat ( jsonCompressor . compress ( new JsonObject ( ) ) , is ( Arrays . asList ( "a" , "b" , "c" ) ) )
assertThat ( "getValue" , node . getValue ( ) , is ( 0x0 ) )
assertEquals ( property . getType ( ) , String . class )
assertThat ( target . TYPE , is ( "InPacketAdded" ) )
assertThat ( method . propertyName ( ) , is ( "meOnFire" ) )
assertEquals ( "expected user should equal with result obtained from SCIM REST API" , expectedResponse . getEntity ( ) , result . getEntity ( ) )
assertEquals ( "hello" , res )
assertPlanEquals ( expect , plan )
assertions . isNotEqualTo ( actual )
assertFalse ( proxyHttpHeader . isValid ( ) )
assertThat ( target . getFlowId ( nwIf , "flowId" ) , is ( nullValue ( ) ) )
assertEquals ( "Request failed due to an error in authentication processing" , 3 , error . getErrorCode ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertFalse ( permissionService . hasPermission ( 0 , null , "" ) )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertNotNull ( response )
assertJson ( "{'value': 1.1}" , serialize ( bean ) )
assertEquals ( expectedResp , testResp )
assertEquals ( "" , result )
assertTrue ( nicHandle . equals ( nicHandle ) )
assertEquals ( expectedBindingString , relativizedVolumeString )
assertEquals ( perspective , url )
assertTrue ( isEqual ( expectedStream , actualStream ) )
Assert . assertEquals ( 2 , actual )
Assert . assertTrue ( responseList . size ( ) < 2 )
assertEquals ( explainUserKramer , explainUserKramerDuplicate )
Assert . assertEquals ( headerValue , actualValue )
Assert . assertEquals ( expected , hexString )
assertCount ( 0L , "set empty" , Collections . emptySet ( ) )
assertThat ( text , is ( "not (0)" ) )
Assert . assertEquals ( 1 , jobs . size ( ) )
assertThat ( this . graphBuilder , hasNodesAndEdges ( new String [ ] { "\\"groupId:parent:jar:version:compile\\"" , "\\"groupId:child1-1:jar:version:compile\\"" , "\\"groupId:child1-2:jar:version:compile\\"" } , new String [ ] { "\\"groupId:parent:jar:version:compile\\" -> \\"groupId:child1-1:jar:version:compile\\"[style=dotted]" } ) )
assertEquals ( BigDecimal . ZERO , item . getQuantity ( ) )
assertEquals ( 0 , changes . size ( ) )
assertThat ( "default Image Id" , sut . getImageId ( ) , is ( equalTo ( VM . DEFAULT_IMAGE_ID ) ) )
assertTrue ( validator . validate ( sslTermination , PUT ) . passedValidation ( ) )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
Assert . assertEquals ( "1080::8:800:200c:417a" , v )
assertEquals ( 0 , branch_conditions . size ( ) )
Assert . assertEquals ( expResult , result )
assertThat ( reference . getK8sMarkdownLink ( ) , containsString ( String . join ( "\\n" , "### Start" , "" , tableHeader ( ) , tableEntry ( "`env`" , linkTo ( "Env Var" , reference . getK8sMarkdownLink ( ) + "#env-var" ) , "" ) ) )
assertSame ( switchYardExchange , camelExchange . getMessageComposer ( ) )
assertSame ( temporaryQueue , stompJmsSession . createTemporaryQueue ( ) )
assertStat ( result )
assertThat ( errors , hasFieldErrors ( "middleName" ) )
assertEquals ( "i:0011000000_11101010_11110000_10100011" , EncodingDetector . toUnsigned31bitsInteger ( i ) )
assertEquals ( expResult , result )
assertNotNull ( paquete . getId ( ) )
assertEquals ( "void method" , 1 , parsed . returnType . voidType )
assertEquals ( "echoPath/a1/b1/c1//'true'/'123'" , r )
Assert . assertFalse ( condition . evaluate ( new MockNotInboundRewrite ( ) , new MockEvaluationContext ( ) ) )
assertEquals ( 10 + 100 , c . renamedGetValue ( ) )
assertNotNull ( ShortCode . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertDecimalEquals ( sma . getValue ( 105 ) , 10 )
assertEquals ( 1.0 , result , 0.1 )
assertTrue ( pid > 0 )
Assert . assertEquals ( "12 minutes ago" , t . format ( new Date ( 0 ) ) )
assertEquals ( packed , sw . toString ( ) )
Assert . assertNotNull ( "no uri" , actual )
assertEquals ( HttpResponse . SC_FORBIDDEN , response . getHttpStatusCode ( ) )
assertTrue ( true )
Assert . assertEquals ( SpringContainer . class , container . context . getBean ( "container" ) . getClass ( ) )
assertEquals ( sampleScript , templateInfo . get ( ) . get ( ) )
assertFalse ( displayable )
assertThat ( domainName , is ( equalTo (queriedResource . getDomainName ( ) ) ) )
assertFalse ( evaluator . isLoggingScopedEnabled ( ) )
assertArrayEquals ( PASSWORD_BYTE_ARRAY , credentials . getPassword ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( concernedDPC , concernedDPC2 )
assertEquals ( 3 , cheeses . size ( ) )
Assert . assertEquals ( attribute , 1L )
assertTrue ( s1 . equals ( s2 ) )
assertNotNull ( flux )
Assert . assertEquals ( "complexType extends name" , restriction )
assertEquals ( expected , actual , 0.0001 )
assertEquals ( "SSS:1234trueW:5" , x . toString ( ) )
assertEquals ( " Echo Message = vasu" , response )
assertEquals ( result , "Monday, December 3, 2007 - 10:15:30 AM UTC" )
assertTrue ( latch . getCount ( ) > 0 )
assertNotNull ( "daysOfWeek must not be null" , monthView . getDaysOfWeek ( ) )
assertEquals ( "&#x" , writer . toString ( ) )
assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
paths . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE )
Assert . assertEquals ( d , a . select ( rowInd , colInd ) )
assertThat ( tenantIdProvider . dmnParameters . size ( ) , is ( 0 ) )
assertThat ( differences , contains ( ciString ( "DEV-MNT-1" ) , ciString ( "DEV-MNT-2" ) ) )
MatcherAssert . assertThat ( readTag , is ( tag ) )
assertTrue ( "Document should be in exception routing" , document . isException ( ) )
assertNotNull ( mh )
assertEquals ( EdmSimpleTypeKind . Temporal , edmDateType )
assertEquals ( expected , result )
assertEquals ( expected , Year . parse ( "2016" ) )
assertThat ( new File ( basedir , "target/classes/annotations/Annotation.class" ) , hasAnnotation ( new Annotation [ ] { } ) )
assertNotNull ( p2 )
assertions . isEqualTo ( null )
assertEquals ( "Decryptor should have failed" , false , result )
mockEndpoint . assertIsSatisfied ( 5000 )
assertEquals ( "\\"" + response . getContentAsString ( ) + "\\"" , response . getContentAsString ( ) )
Assert . assertThat ( result , CoreMatchers . equalTo ( uri . getOpaque ( ) ) )
assertEquals ( "you" , result )
Assert . assertEquals ( CREATE_SIZE , response . getThreadDumpsSize ( ) )
assertEquals ( "test" , keyDefinition . getName ( ) )
assertEquals ( "Illegal port a, must be integer." , result )
assertThat ( "static int value" , obj , equalTo ( 5 ) )
assertTrue ( rowChange . compareTo ( rowChange2 ) == 0 )
assertCompleted ( "a" )
Assert . assertFalse ( "null should not match non-null." , sut . matches ( null ) )
assertEquals ( 3 , count )
assertEquals ( "Address" , nameStr )
Assert . assertEquals ( dataInicioAtividade , retorno . getDataInicioAtividade ( ) )
assertEquals ( store1 . getConstraintCollections ( ) . size ( ) , 1 )
assertEquals ( new BigDecimal ( "-0.1" ) , entity . getN73 ( ) )
assertEquals ( testJsonQuery , actualJsonQuery )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "overviewPage" ) , "You arrived at overview page" ) . apply ( driver ) )
assertThat ( result , is ( "UpperNwId" ) )
Assert . assertTrue ( firstConceptSet . getSortWeight ( ) < secondConceptSet . getSortWeight ( ) )
assertEquals ( "Config" , caller . getResponseBody ( ) )
assertEquals ( result , expected )
assertEquals ( "{ \\"fieldname\\" : { \\"$mod\\" : { \\"$size\\" : 56 } } }" , filterParameters . toString ( ) )
Assert . assertEquals ( "PUT:Michael" , result )
assertEquals ( 5 , value . asInt ( 10 ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertEquals ( "Oct 11 22:14:15 " + HOSTNAME + " " , message )
assertNegatedNameToken ( ast , "bwahaha" )
assertEquals ( "urn:oid:0.1.2.3" , parsed . getEntry ( ) . get ( 0 ) . getResource ( ) . getId ( ) . getValue ( ) )
assertEquals ( HttpStatusCode . NOT_FOUND . getStatusCode ( ) , connection . getResponseCode ( ) )
assertEquals ( 5 , d . asByte ( ) )
Assert . assertEquals ( "{\\"alice\\":\\"bob\\",\\"bob\\":[\\"charlie\\",\\"charlie\\"]}" , result . toString ( ) )
assertEquals ( VALUE , value . get ( ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertAllTargetsCount ( 0 )
assertEquals ( 0 , historicIncidents )
assertIsAborted ( tx )
assertThat ( cookieJar . get ( Jar . < Jar . Cookie > contents ( ) ) , is ( contents ( Jar . < Jar . Cookie > contents ( ) ) ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertEquals ( "John" , result )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertEquals ( "000003" , generated )
assertEquals ( 1 , kb . getResults ( ) . getMessages ( org . kie . api . builder . Message . Level . ERROR ) . size ( ) )
assertOut ( "a as b" )
assertEquals ( ConcreteSubclass . class , test . getStatement ( 1 ) . getReturnClass ( ) )
assertThat ( result . getPayload ( ) , is ( instanceOf ( String . class ) ) )
assertEquals ( fakeResult , authentication )
assertEquals ( "Expected value is not present" , expectedValue , expression . xpath . evaluate ( document ) )
assertThat ( builder , hasToString ( "<a class=\\"mybutton\\" style=\\"display:none;\\"" + " href=\\"https://flattr.com/thing/123546/a-demo-thing\\">" + "<img src=\\"https://flattr.com/thing/123546/a-demo-thing.png\\"" + " width=\\"93\\" height=\\"20\\" alt=\\"Flattr this\\" title=\\"Flattr this\\" border=\\"0\\" />" + "</a>" ) )
assertProcessEnded ( processInstance . getId ( ) )
Assert . assertEquals ( expectedId , id )
Assert . assertEquals ( PropertyValue . create ( "Alice" ) , result . get ( 0 ) . getProperty ( 0 ) )
assertEquals ( result , range . exclude ( other ) )
assertThat ( filteredVersions , arrayContaining ( version ( "1.1.1" ) , version ( "1.1.1-sp1" ) , version ( "1.1.1-1" ) ) )
assertArrayEquals ( data , value . getDataAsBinaryStr ( ) )
Assert . assertEquals ( 3 , a . getNumberOfFinalMethods ( ) )
assertThat ( validationProviders , hasSize ( 0 ) )
assertEquals ( "boolean mapper serialization is wrong" , expected , actual )
assertOut ( "baz: function baz(x) {\\n\\treturn x + 1;\\n}" )
assertEquals ( "Link1 (" + BASE_URL + "#dest1)Link2 (http://xyz/abc)" , result )
assertEquals ( expResult , result )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_14" )
assertEquals ( expectedDouble , executeAndReturnNumber ( FloatToInt . class ) , 0 )
assertEquals ( p1 , p2 )
assertEquals ( p5 , p4 )
assertThat ( result , is ( "" ) )
assertThat ( event . getRelease ( ) , equalTo ( expectedValue ) )
assertTrue ( selector . evaluate ( source ) )
Assert . assertNotNull ( props )
assertNotNull ( bss )
assertEquals ( "Hello World!" , content )
assertNotNull ( union )
assertEquals ( "http://www.google.com.tr" , homepage )
assertEquals ( subscriptionName , editFilter . getSubscriptionName ( ) )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expResult , result )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
assertEquals ( EXPECTED . replace ( ODataHttpMethod . GET . name ( ) , ODataHttpMethod . POST . name ( ) ) . replace ( Integer . toString ( HttpStatusCodes . OK . getStatusCode ( ) ) , Integer . toString ( HttpStatusCodes . NO_CONTENT . getStatusCode ( ) ) ) . replace ( HttpStatusCodes . OK . getInfo ( ) , HttpStatusCodes . NO_CONTENT . getInfo ( ) ) , entity )
assertEquals ( "Native and term comparisons are different" , nativeComparison , mapperComparison )
assertEquals ( 0 , cmd . args . size ( ) )
this . assertAnalyzesTo ( _a , "\\"Test tesT2\\"@en" , new String [ ] { "Test" , "tesT2" } , new String [ ] { "word" , "word" } )
Assert . assertTrue ( allRight )
assertEquals ( expectedNumEntries , actualNumEntries )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertUnderflow ( ( double ) x - ( double ) y , result , x - y )
assertEquals ( "foobar" , sut . getField ( field ) )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( "foo : bar" , base . toString ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( expecting , found )
Assert . assertEquals ( true , config . isDebug ( ) )
assertTrue ( ( Boolean ) result )
assertNotNull ( Challenge . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "identity" , "YFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "sid" ) . fetch ( ) )
assertThat ( panel . getBackgroundPainter ( ) , is ( sameInstance ( null ) ) )
assertThat ( "Expected the property to not be set" , getSettings ( ) . getString ( "key" ) , nullValue ( ) )
assertEqualsWithoutWhiteSpaces ( "cylinder(h=10, r1=5, r2=8.5, $fn=8, center=true);" , prism )
assertThat ( options . getUploadBufferSize ( ) , is ( 0 ) )
assertNotNull ( result )
assertEquals ( 24 , result )
assertThat ( out . value , is ( new StringOption ( "Hello, world!" . substring ( 0 , 10 ) ) ) )
assertEquals ( "Hello, world!" , response . getContent ( ) )
assertNull ( result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertNotNull ( book )
assertArrayEquals ( new String [ ] { "bar" } , command )
Assert . assertEquals ( "Main Page" , browser . currentPage ( ) . title ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Wrong toString" , "PropertyReference{object: property}" , property . toString ( ) )
assertEquals ( CONTENT , action . getContent ( ) )
assertOut ( "var /** @type {Array} */ a = new Array('Hello', 'World')" )
assertThat ( replayService . getPlayers ( ) , hasSize ( 0 ) )
assertTrue ( upstreamCtx . isInvokable ( operatorDef , strategy ) )
assertEquals ( expectedFilename , fileName )
Assert . assertTrue ( result . isSetName ( ) && result . isSetDefinition ( ) && result . isSetMetadata ( ) && result . isSetObservedProperty ( ) && result . isSetThing ( ) && result . isSetType ( ) && result . isSetMetadata ( ) && result . isSetDefinition ( ) && result . isSetProperties ( ) && result . isSetProperties ( ) && result . isSetProperties ( ) && result . isSetProperties ( ) && result . isSetProperties ( ) && result . isSetProperties ( ) && result . isSetMetadata ( ) && result . isSetProperties ( ) && result . isSetMetadata ( ) && result . isSetProperties ( ) && result . isSetMetadata ( ) && result . isSetProperties ( ) && result . isSetMetadata ( ) && result . isSetProperties ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMetadata ( ) && result . isSetMet
Assert . assertTrue ( cover . getBoundaries ( ) . getZ ( ) . getMin ( ) < TEST_MODEL . getBoundaries ( ) . getZ ( ) . getMin ( ) )
assertTrue ( "Failed authentication with wrong password was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , USER ) )
out . assertIsSatisfied ( )
assertQ ( req , "//result[@name='response'][@numFound='1']" , "//result[@name='response']/doc[1]/str[@name='id'][.='4']" )
assertTrue ( instance . isBuildingProjectTriggered ( event ) )
Assert . assertEquals ( "(A124del2)" , del . toHGVSString ( AminoAcidCode . ONE_LETTER ) )
assertEquals ( "allocation that filled the gap after allocation should have been merged with adjacent allocation" , Lists . newArrayList ( new Allocation ( control , 0 , 15 ) , new Allocation ( withLogin , 15 , 5 ) ) , allocations . getAllocations ( ) )
assertTrue ( action . isExecuted ( ) )
Assert . assertTrue ( vel . isOrientationInverted ( ) )
assertThat ( link . waitForArduinoToBoot ( 3 , DAYS , READY_MESSAGE_ONLY ) , is ( true ) )
assertEquals ( true , result )
assertEqualsIsTransitive ( child1 , child3 )
assertEquals ( ElasticSearchIndexProvider . ES_KEYWORD_TYPE , type )
assertEquals ( 0 , app . executeApplication ( args ) )
assertEquals ( expectedValue , propertyValue )
assertEquals ( 0 , userList . indexOf ( user ) )
assertNotEquals ( playlist1 , playlist2 )
eventSupport . assertReloadOccured ( )
assertThat ( impl . containsAxiomIgnoreAnnotations ( axiom , ontologyId ) , is ( true ) )
assertEquals ( expected , actual )
assertEquals ( "61 62 63 64 65 66 67 68   69 6a 6b 6c 6d 6e 6f 70 abcdefgh ijklmnop" + EOL , os . toString ( ) )
assertEquals ( "TestValue" , ( ( Context ) context . lookup ( "context" ) ) . lookup ( "test" ) )
assertEquals ( "bar" , output )
assertThat ( target . validate ( ) , is ( true ) )
assertTrue ( definition . contains ( STRING_VARCHAR ) )
assertMappedFieldValueIs ( nullValue ( ) )
TestCase . assertTrue ( result )
assertEqualsWithoutWhiteSpaces ( "mirror([1,0,0]) (model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 11 ) . create ( ) ) )
assertMetadata ( is )
Assert . fail ( "create object under non-existent bucket should fail" )
assertEquals ( arr , resultArr )
assertThat ( builder . getNamedClusterConfigs ( ) , hasItem ( namedCluster ) )
assertEquals ( one . hashCode ( ) , two . hashCode ( ) )
assertEquals ( expected , actual )
assertEquals ( 4 , result . size ( ) )
assertNull ( client . lastBatch )
assertEquals ( "3 dager sedan" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertTrue ( isEqual ( distance , 0.269098 ) )
assertNotEquals ( right , left )
Assert . assertTrue ( "Agent should extend agent" , agent instanceof Agent )
assertEquals ( "abc\\n" , found )
assertEquals ( "" , result )
assertEquals ( 0 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
assertThat ( toUnqualifiedVersionlessIdValues ( result ) , containsInAnyOrder ( pt0id . getValue ( ) ) )
assertNotNull ( c )
editor . assertProblems ( "releases|unknown 'ReleaseId'. Valid values are: [releases,leases-file:///blah,leases-file:///blah-blah]" )
assertEquals ( "12345-67890" , actual )
assertEquals ( "aTestString" , classUnderTest . getClientName ( ) )
assertEquals ( expectedFormKey , actualFormKey )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertThat ( slice . events . get ( 0 ) . event , equalTo ( events . get ( 5 ) ) )
assertEquals ( 1 , relSet . size ( ) )
Assert . assertTrue ( genericObjectPool . validateCounter )
assertThat ( session . getVersion ( ) , is ( Version . VERSION_1 ) )
assertEquals ( "String" , name . getImage ( ) )
Assert . assertEquals ( 2 , allMembers ( ) )
assertions . startsWith ( )
assertTrue ( content . contains ( "This is page foo" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Two entries should be merged into one" , 1 , changes . size ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertEquals ( adaptee , target . adapter ( ) )
Assert . assertNull ( agent . getClient ( ) )
assertEquals ( true , result )
Assert . assertEquals ( String . format ( msg , r , c ) , expected , actual , 0. )
assertEquals ( LOGIN_URL , url )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\",\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":" + "{\\"color\\":\\"red\\",\\"price\\":19.95}},\\"arrayTest\\":\\"new Author value\\"}" , result . get ( RETURN_RESULT ) )
assertEquals ( expected , found )
assertOutWithMetadata ( outTemplate . replaceAll ( "AppName" , appName ) )
assertEquals ( "The Decoded Data should be the same as the input Data" , data , embedding . getDecodedData ( ) )
assertEquals ( 0 , sentenceAfter . size ( ) )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "notification" , data ) , message )
assertEquals ( 1 , variableInstances . size ( ) )
assertDocument ( session . getSessionFactory ( ) , "User" , "{ '_id' : '" + user . getId ( ) + "' }" , "{ " + "'_id' : '" + user . getId ( ) + "', " + "'addresses' : {" + "'sale' : '" + rose . getRevenueByDepartment ( ) . get ( "price" ) + "'," + "'planting' : '" + rose . getRevenueByDepartment ( ) . get ( "price" ) + "'" + "}" + "}" )
assertEquals ( userCredentials . size ( ) , 3 )
assertThat ( connection2 , not ( is ( connection ) ) )
Assert . assertTrue ( score > 0 )
assertFalse ( ss . validate ( ) )
assertValidKey ( taskKey )
assertNotNull ( c )
assertEquals ( policyName , policy . getName ( ) )
assertThat ( pattern . matchAsExclusive ( "Sales.class" , "method" ) , is ( true ) )
assertThat ( javaSource , containsString ( "蝎些��懈��携" ) )
assertThat ( result . getMessages ( ) , is ( Collections . singletonList ( sb . toString ( ) ) ) )
assertArrayEquals ( expected , weights )
assertEquals ( "Base value is not properly parsed" , "0" , parsed )
Assert . assertEquals ( "Soft line    Hard line\\r\\n" , readText ( decoder ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( checkpoint . getCheckpoint ( shardId ) , equalTo ( extendedSequenceNumber ) )
assertEquals ( "Find by start and end time with none event" , 0 , events . size ( ) )
assertThat ( testInstance . toList ( ) , is ( empty ( ) ) )
assertThat ( output . toString ( ) , containsString ( "configserver" ) )
assertEquals ( expResult , result )
assertEquals ( 1 , fixture . readByte ( ) )
assertEquals ( 6L , statistics . getQueryPlanCacheMissCount ( ) )
arrays . assertContains ( description , null , array ( "Yoda" ) )
Assert . assertEquals ( 8.0 , y [ 0 ] , 1.0e-12 )
assertTimerWithDuration ( "catch" , TIMER_DURATION )
assertThat ( sub . shouldNotify ( dateTime ( "1015" ) , AlertType . ERROR ) , is ( false ) )
Assert . assertTrue ( responseList . size ( ) <= 1 )
Assert . assertNotNull ( irodsFile )
assertEquals ( "(2 1 a)\\n" , found )
assertThat ( reportEntries . size ( ) , is ( 0 ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEX , v , TERM_FACTORY . getConstantLiteral ( "^Ste(v|ph)en$" ) , TERM_FACTORY . getConstantLiteral ( "" ) ) , translation . get ( 0 ) )
assertEquals ( 0.9 , connPerRoute . getMaxPerRoute ( route ) , 0.1 )
assertThat ( testValue , is ( expectedValue ) )
assertNull ( secondUserWrapper )
assertAnnotationCompletions ( "@Value(\\"#{345${data.prop2<*>}\\")" , "@Value(\\"#{345${else.prop3<*>}\\")" , "@Value(\\"#{345${spring.prop1<*>}}\\")" , "@Value(\\"#{345${else.prop3<*>}\\")" )
assertThat ( count , is ( 5L ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( testValue , outValue , 0.0 )
assertFalse ( "License is not removed" , remove . licenseExists ( ) )
Assert . assertEquals ( expectedMessage , createString ( out ) )
assertThat ( query . isBrief ( ) , is ( false ) )
assertStatisticalSummaryEquals ( totalStats . getSummary ( ) , aggregatedStats , 10E-12 )
Assert . assertTrue ( success )
assertThat ( matcher . matches ( "foo" ) , is ( true ) )
assertArrayEquals ( expected , Proto . build_byte ( ( byte ) 0x00 ) )
assertThat ( manager . getPreferences ( ) , is ( applicationPreferences ) )
assertParsingIsCorrect ( nativeQuery , expectedCacheName )
assertEquals ( "woof" , payload . getThreadId ( ) )
assertEquals ( "<bar>foo_value</bar>" , elt . getAttribute ( "bar" ) )
assertEquals ( 72D , hours , 0 )
assertNull ( bolt . getColumnVisibility ( ) )
Assert . assertFalse ( result )
assertTrue ( c1 instanceof PublicCloneable )
Assert . assertEquals ( user , LdapUtil . auth ( user , pass ) )
Assert . assertEquals ( "Test" , name )
Assert . assertEquals ( - 5f , vm . getStack ( ) . pop ( ) )
assertEquals ( "Failed to generate foreach loop with list and element" , FORMAT_WITH_LIST , foreachWithList )
assertTokens ( new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP , Tokens . RP )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertTrue ( messageLatch . await ( 2 , TimeUnit . SECONDS ) )
assertEquals ( testData [ 0 ] , new String ( buf . array ( ) , Charsets . UTF_8 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( 7 , tuple . len ( ) )
assertEquals ( true , isGood )
Assert . fail ( "Should throw BadRequestException" )
assertTrue ( page . getBody ( ) . asText ( ) . contains ( "Flash Page" ) )
assertTrue ( tested . isDirty )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertEquals ( "A" , s )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( "" , result )
assertCanConsume ( manager , 0 , 1 )
assertEquals ( new HashSet < Tuple2 < Integer , String > > ( asList ( new Tuple2 < Integer , String > ( 1 , "alpha" ) , new Tuple2 < Integer , String > ( 2 , "alpha" ) , new Tuple2 < Integer , String > ( 3 , "alpha" ) , new Tuple2 < Integer , String > ( 4 , "alpha" ) , new Tuple2 < Integer , String > ( 5 , "alpha" ) , new Tuple2 < Integer , String > ( 6 , "alpha" ) , new Tuple2 < Integer , String > ( 7 , "alpha" ) , new Tuple2 < Integer , String > ( 8 , "alpha" ) , new Tuple2 < Integer , String > ( 9 , "alpha" ) , new Tuple2 < Integer , String > ( 10 , "alpha" ) , new Tuple2 < Integer , String > ( 11 , "alpha" ) , new Tuple2 < Integer , String > ( 12 , "alpha" ) , new Tuple2 < Integer , String > ( 13 , "alpha" ) , new Tuple2 < Integer , String > ( 14 , "alpha" ) , new Tuple2 < Integer , String > ( 15 , "alpha" ) , new Tuple2 < Integer , String > ( 16 , "alpha" ) , new Tuple2 < Integer , String > ( 17 , "alpha" ) , new Tuple2 < Integer , String > ( 18 , "alpha" ) , new Tuple2 < Integer , String > ( 19 , "alpha" ) , new Tuple2 < Integer , String > ( 20 , "alpha" ) , new Tuple2 < Integer , String > ( 21 , "alpha" ) , new Tuple2 < Integer , String > ( 22 , "alpha" ) , new Tuple2 < Integer , String > ( 23 , "alpha" ) , new Tuple2 < Integer , String > ( 24 , "alpha" ) , new Tuple2 < Integer , String > ( 25 , "alpha" ) , new Tuple2 < Integer , String > ( 26 , "alpha" ) , new Tuple2 < Integer , String > ( 27 , "alpha" ) , new Tuple2 < Integer , String > ( 28 , "alpha" ) , new Tuple2 < Integer , String > ( 29 , "alpha"
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( m1 , m2 )
assertEquals ( fileInfo . getFileId ( ) , fileId )
assertEquals ( "officehour" , f . getName ( ) )
assertEquals ( - 1 , resultSet . getColumnCount ( ) )
assertEquals ( "test" , t1 . toString ( ) )
assertNull ( idxConf . getRecordFilter ( ) . getIndexCase ( "notmyrecordtable" , record ) )
assertEquals ( "Hibernate Site" , bookmark . getDescription ( ) )
assertTrue ( result . isSuccess ( ) )
Assert . assertArrayEquals ( testData32bitFloat , result , 0.0f )
Assert . assertEquals ( "HTML class should have been appended without a space separator" , expected , comp . getHtmlClass ( ) )
assertEquals ( BigInteger . valueOf ( BigInteger . ZERO . setBit ( 0 ) . setBit ( 1 ) ) , zl . getValue ( ) )
assertEquals ( "logs.path" , property )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , historyService . createHistoricProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertSame ( Byte . class , value . getValue ( ) )
assertThat ( mySignalHandler . wasCalled , IsEqual . equalTo ( false ) )
assertThat ( found , is ( false ) )
assertArrayEquals ( new long [ ] { 2 , 2 } , res . getShape ( ) )
assertThat ( r , hasEntry ( "set" , ( Object ) ImmutableList . of ( "cow" ) ) )
assertFalse ( daemon . isAlive ( ) )
assertEquals ( expected , victim . process ( prefix , nameRequest ( ) . fileNumber ( fileNumber ) ) )
assertEquals ( "Smime Customer" , cust . getName ( ) )
Assert . assertEquals ( "2011021513-access_log.aggregated" , dateString )
assertEquals ( "3 vuosituhannen p盲盲st盲" , t . format ( new Date ( 0 ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff24_" ) )
assertEquals ( expected , cls . getCodeBlock ( ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getVolumes ( ) , allOf ( hasPvClaimVolume ( "volume-$(SERVER_NAME)" , "$(SERVER_NAME)-claim" ) ) )
assertTrue ( cache . isCachedDb ( dbName ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongWrapperValue ( ) )
assertThat ( result . statusCode , is ( Response . ACCEPTED ) )
assertTrue ( idxSet . contains ( column . getIndex ( ) ) )
assertFeatureValues ( expected , queryText , Arrays . asList ( "single document test case" , "another document" , "document test" ) , getChain ( new TFIDFFeatureExtractor ( ) ) , 0 )
assertEquals ( 312L , borrowOrderResult . getBorrowId ( ) )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
assertEquals ( "name" , service . getMutatorName ( col ) )
Assert . assertEquals ( _expectedAddress , _frodo . getAddress ( ) . getFamily ( ) )
editor . assertProblems ( "some-release|unknown 'Release name'" )
assertThat ( mfp . getProperty ( ) , equalTo ( "private.properties" ) )
assertEquals ( "Fusco" , person . getLastName ( ) )
assertEquals ( "[{\\"name\\":\\"Stars\\",\\"requestsLeft\\":0,\\"data\\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
assertEquals ( Locale . GERMANY , component . getLocale ( ) )
assertThat ( ( String ) c . value , is ( "ASCENDING" ) )
assertEquals ( "{b=2,b=3}" , union . toString ( ) )
assertEquals ( "SELECT g1.e2 FROM g1 WHERE g1.e1 = 'a\\\\'b\\\\\\\\c'" , sqlVisitor . toString ( ) )
Assert . assertEquals (755 , FilePermissionHelper . toOctalFileMode ( perms ) )
assertSame ( toTest , toTest . setParamsListSeparator ( "a" ) )
assertEquals ( TEST_CONTENT , entry . getName ( ) )
assertNotNull ( strategy )
Assert . assertTrue ( id == 1 )
Assert . assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( 1 , eventListener . getEvents ( ) . size ( ) )
assertNotNull ( adminUsersController )
assertThat ( driver . findElement ( By . id ( "left.errors" ) ) . getText ( ) , is ( "invalid combination of left and right" ) )
assertTrue ( testValues . length == victim . getSumDataValues ( ) )
Assert . assertEquals ( infoCancelamento , cancelamento . getInfoCancelamento ( ) )
Assert . assertEquals ( hash , 1160719163 )
assertEquals ( MESSAGE_COUNT , migrationCheckingState . getMigrationWaitTimeMilli ( ) )
assertNull ( result )
assertThat ( link , is ( notNullValue ( ) ) )
assertNull ( referenceManager . remove ( "foo" ) )
assertEquals ( "result count mismatch for: " + xquery . toString ( ) , baseResult . size ( ) , results . size ( ) )
Assert . assertNotNull ( address )
assertNull ( "Should be null because it is hidden by default" , quickViewComponent . getHideButton ( ) )
mockery . assertIsSatisfied ( )
assertNull ( doc )
assertTrue ( fileReceiver1 . getFileTransferId ( ) == fileReceiver2 . getFileTransferId ( ) )
assertions . isNotNull ( )
assertFalse ( rrc . matches ( context , metadata ) )
Assert . assertEquals ( expected , calculated )
Assert . assertEquals ( dt , dt2 )
assertEquals ( CITY_RESPONSE , argumentCaptor . getValue ( ) )
assertThat ( filters . getResponseFilters ( ) . size ( ) , is ( 1 ) )
assertTrue ( selectedFile . exists ( ) )
Assert . assertEquals ( 0 , myThreadB . getDeadlocksCount ( ) )
assertEquals ( EXPECTED_WRITE_DATE_AS_LOWERCASE , serializeAsLowercase ( ) )
assertEquals ( expResult , result )
assertNull ( plugin . getIp ( ) )
assertEquals ( HttpStatusCode . CREATED_201 , response . getStatus ( ) )
assertSame ( littleEndianBytes . toByteArray ( ) , bigEndianBytes . toByteArray ( ) , "littleEndian" , "bigEndian" )
assertions . isNotLessThan ( null )
assertEquals ( expResult , result )
assertions . isNotGreaterThan ( expected )
assertTrue ( pattern . matches ( "-.1" ) )
assertEquals ( expectedUuid , actualUuid )
assertEquals ( r3 , result )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( 1089876870L , result )
assertEquals ( "failed to generate class implementing interface" , CLASS_IMPLEMENTING_INTERFACE , cls )
assertEquals ( "http://repo1/plugins/servlet/stashbot/build-reporting/jobs/verify-committed/repo/jsc/1/verify-committed/repo/jsc/2/verify-committed/repo/jsc/3" , url )
Assert . assertTrue ( "Variant DocumentIF has " + fields . size ( ) + " fields" , fields . size ( ) == 3 )
assertEquals ( expectedAllViewWithDiscriminator , result . get ( "all" ) . getMap ( ) )
assertTrue ( extractFromSampleVariantGvcf ( vcfFile ) )
assertResponse ( response , 403 , "[{\\"Forbidden\\": \\"QUERY API methods are disabled on this KairosDB instance.\\"}]\\n" )
assertEquals ( expectedOrder , monitoring . getOrder ( ) )
assertEquals ( f1 . hashCode ( ) , f2 . hashCode ( ) )
assertEquals ( "Old events not scrubbed properly" , 1 , controller . scrubOldEvents ( 1 ) )
assertEquals ( "<a href=\\"" + PREFIX + "1123\\">Bug 1123</a> Some commit message" , actual )
Assert . fail ( "build listing failure" )
assertTrue ( compressed . length ( ) > 0 )
assertEquals ( 1 , query ( ) . from ( show ) . where ( show . acts . get ( "a" ) . eq ( "A" ) ) . fetchCount ( ) )
assertThat ( storedValue , is ( true ) )
assertEquals ( "223.45" , service . getOrderAmount ( "A-OK-223-45" ) . toPlainString ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( "Does not compare " + nv1 + " & " + nv2 , NodeValue . CMP_GREATER , NodeValue . compare ( nv1 , nv2 ) )
assertNotNull ( order )
Assert . assertEquals ( 42 , val )
Assert . assertEquals ( 2 , buffer . length ( ) )
Assert . assertTrue ( "should have found the target file" , target . exists ( ) )
assertTrue ( "Should have injected the Elytron configuration" , CONTROLLER . injected )
Assert . assertTrue ( value )
assertEquals ( 3 , read )
assertThat ( subject . location ( ) , is ( nullValue ( ) ) )
assertEquals ( expected , modelWriter . toString ( ) )
assertThat ( a . getText ( ) , is ( "Hello" ) )
assertThat ( copy . getListProperty ( ) , equalTo ( originalList ) )
assertEquals ( expected , browser . getCurrentUrl ( ) )
Assert . assertEquals ( numeroSequencialEvento , eventoRetorno . getNumeroSequencialEvento ( ) , 0 )
assertThatSql ( query , is ( "SELECT nodes.col1,nodes.col2 FROM table1 AS nodes UNION SELECT edges.col3,edges.col4 FROM table2 AS edges" ) )
Assert . assertEquals ( "therottweiler" , this . realiser . realise ( _sent ) . getRealisation ( ) )
assertEquals ( rate , pop . getElitismRate ( ) , 0.01 )
assertNull ( sessionManager . get ( "1" ) )
assertNotNull ( "holePunchScheduler should have been created" , holePunchScheduler )
Assert . assertTrue ( sut . isWeekdaySunday ( cal . getTime ( ) ) )
assertTrue ( entity . getId ( ) > 0 && entity . getCount ( ) == 3456789 )
assertThatSql ( query , is ( "SELECT [__ALLNODES__].col1, [__ALLNODES__].col2 FROM [__ALLNODES__]" ) )
assertEquals ( 2 , workspace . get ( ) . stream ( ) . filter ( p -> p instanceof FunctionblockModel ) . collect ( Collectors . toList ( ) ) . size ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "Hello" , response . echo ( "Hello" ) )
assertEquals ( DB_NAME , HiveDatabase . create ( udbContext , new UdbConfiguration ( ImmutableMap . of ( ) ) ) . getName ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertThat ( Sets . newHashSet ( viewAttributes ) , equalTo ( Sets . newHashSet ( viewAttributeBinder ) ) )
assertEquals ( "Wrong default configuration" , defaultConfig , defaultConfig . getConfiguration ( "elk" ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( Credential . fetcher ( "CRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expecting , found )
assertEquals ( "Unexpected item count" , "2" , actualCart . getItemTotal ( ) )
assertEquals ( new Rectangle ( 0 , 0 , 10 , 10 ) , pos )
assertEquals ( r1 , r2 )
assertSame ( responseEntity , repository . execute ( "POST" , "test" , "test" ) )
assertEquals ( e1 , e2 )
assertSearchYields ( index , "author:(bob OR ((rose OR tom) AND jones))" , "bm" , "rj" , "tj" )
assertEquals ( "[1, 3, 4, 5, 8, 9, 3, 989]" , res . toString ( ) )
assertEquals ( Nd4j . create ( new double [ ] { 2.25 , 2.25 , 2.25 } ) , arr3 )
assertEquals ( "scoreHolder.addMultiConstraintMatch(kcontext, new long[] {-1l, -2l}, new long[] {-3l, -4l})" , marshaledAction )
Assert . assertEquals ( "3 dager sedan" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertEquals ( HOST , uri . toString ( ) )
assertEquals ( typedValue , variableValue )
assertNotNull ( Country . fetcher ( "US" ) . fetch ( ) )
assertThat ( stream . count ( ) , equalTo ( 2L ) )
Assert . assertEquals ( 0 , PacketUtils . readInt ( buf , 4 ) )
assertEquals ( "Deserialization failed" , 0 , buffer . readableBytes ( ) )
assertEquals ( 0 , resultList . size ( ) )
assertThat ( fileConfig . getConfigProperties ( ) , contains ( configProperty ( TAB_WIDTH , 8 ) ) )
assertEquals ( fieldDefinition . convertToSigned ( new BigInteger ( "200" ) ) , actual )
Assert . assertEquals ( javaPage . getId ( ) , notMarked ( "aboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutabout" ) . getId ( ) )
ImgLib2Assert . assertImageEquals ( source , destination )
assertNull ( column . getParent ( ) )
Assert . assertEquals ( "Salted key test" , expectedPayloadTableRowKey , result )
assertEquals ( expected , result )
assertEquals ( "filename.shp" , dsp . getDataSourceProperties ( ) . get ( "filename.shp" ) )
assertEquals ( Arrays . asList ( "bar" ) , array )
Assert . assertEquals ( String . format ( msg , s , r , c ) , expected , actual , 0. )
assertEquals ( expected , result , FloatingAccuracy . ACCURACY )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertEquals ( Integer . valueOf ( 1 ) , result )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 8 , warnings . size ( ) )
Assert . assertEquals ( tree . ret . limit , 42 )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( validationResult , is ( notNullValue ( ) ) )
Assert . assertEquals ( BitTag . SERVICENET_LB . tagValue ( ) , mappedUsage . getTagsBitmask ( ) )
assertEquals ( Writables . strings ( ) , t . getSubTypes ( ) . get ( 0 ) )
assertThat ( uri , is ( equalTo ( "/clients/" ) ) )
assertThat ( statusCode , equalTo ( 500 ) )
assertThat ( customerId , notNullValue ( ) )
Assert . assertTrue ( result )
assertEquals ( SCROLL_VALUE , getScrollLeftValue ( panel ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY_RETRY ) )
assertThat ( instanceOne . equals ( instanceTwo ) , is ( false ) )
assertArrayEquals ( new String [ ] { "High" } , ( String [ ] ) filterResult . getValue ( ) )
assertEquals ( "123" , ids )
assertFalse ( result )
Assert . assertEquals ( BooleanNode . FALSE , result )
assertEquals ( 2 , services . size ( ) )
Assert . assertEquals ( "callback_value" , o )
Assert . fail ( )
assertThat ( updatedItem . getQuantity ( ) , is ( new Integer ( 10 ) ) )
assertEquals ( newsForModerator . getReasons ( ) . size ( ) , newses . size ( ) )
assertEquals ( "try(final java.io.OutputStream os = new java.io.BufferedOutputStream(os)) {" + CRLF + "    bos.readLine();" + CRLF + "}" + CRLF , CodeModelTestsHelper . toString ( aTB ) )
assertResultSet ( res )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 2 , accounts . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertTrue ( output . startsWith ( "<
assertThat ( result . endsWith ( "[experimenterId=12345, body=1, experimenterId=10]" ) , is ( true ) )
assertNull ( "result should be null" , invoker . invoke ( sayHelloWithAnnotation , new Object [ ] { } ) )
Assert . assertEquals ( expected , actual )
assertOut ( "/**\\n * @export\\n */\\nRoyaleTest_A.prototype.foo = function() {\\n" + "  org.apache.royale.utils.Language.trace(this.bar);\\n}" )
Assert . assertEquals ( to , actual )
assertEquals ( "1.10" , actual )
assertThat ( filteredVersions , arrayContaining ( version ( "1.1.1.1" ) , version ( "1.1.1.2" ) , version ( "1.1.2.0" ) , version ( "2.0.0-SNAPSHOT" ) ) )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
Assert . assertEquals ( "fra lexical value" , actualLabel )
Assert . assertEquals ( true , isSuccess )
assertTokens ( Tokens . RP , new Token ( "func(" ) , Tokens . RP )
Assert . assertTrue ( deal . isAccepted ( ) )
assertFalse ( entity . isValid ( ) )
assertEquivalentMutate ( Arrays . asList ( m1 , m2 ) )
assertEquals ( defaultSourceCodeNamesList , result )
assertEquals ( splits , splits2 )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( "acl" , relativizeSubpath ( rootObjectId , resourceId ) )
assertEquals ( res , 1 )
Assert . assertEquals ( descriptor , SimpleService1 . getDescriptor ( SimpleService1 . class , ss1 . getServiceDescriptor ( SimpleService1 . class ) ) )
assertEquals ( 2 , graph . getNodeCount ( ) )
assertViewConfigDescriptorValid ( )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . OK , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertThat ( redisServer . isActive ( ) , is ( true ) )
assertEquals ( 1 , RecorderTaskListener . getEventCount ( TaskListener . EVENTNAME_UPDATE ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( "Should be a 200 Created!" , CREATED . getStatusCode ( ) , getStatus ( method ) )
assertFalse ( metaObject . isAssignableFrom ( metaInterface ) )
assertThat ( result , is ( true ) )
assertEquals ( "foo" , recorder . getHeader ( "Via" ) )
assertSame ( mockConnection , conn . getProxiedConnection ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( element . decremented ( ) ) , is ( PlainDate . of ( 2000 , 12 , 9 ) ) )
assertEquals ( "Number of unregistered denied IUs" , numOfUnregisteredPI , 0 )
Assert . assertEquals ( ambiente , protocoloInfo . getAmbiente ( ) )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( 0 , errors . size ( ) )
assertThat ( results , hasItems ( 9 , 10 ) )
assertThat ( results , is ( new String [ ] [ ] { { "value" } , { "hello,world!" } } ) )
assertEquals ( getItem . xmlText ( ) , GetItemHelper . getGetItemsRequest ( null ) . xmlText ( ) )
runner . assertAllFlowFilesTransferred ( SelectHive3QL . REL_FAILURE , 1 )
assertArrayEquals ( new double [ ] { 1.0 , 0 , 0 , 0 } , h . values , 0.001 )
assertInstanceOf ( "geometry" , Path2D . class , geometry )
assertTrue ( matches )
assertEquals ( "foo" , x . f1 )
assertEquals ( ConnAckMessage . SUCCESS , pubEvt . getReturnCode ( ) )
assertEquals ( expected , impl . getCurrentSize ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( url ) )
Assert . assertTrue ( isFileTreeNode )
assertTrue ( command . valid ( options , optionParser ) )
assertNull ( c . consume ( ) )
assertTrue ( 5.0d == d . asFloat8 ( ) )
Assert . assertEquals ( "anonymous" , echoValue )
assertEquals ( "min_unique_id" , setting . getMinUniqueID ( ) )
assertNumberOfMappingsIs ( 114 )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( path , acl . getJrPath ( ) )
assertTrue ( testFacet . isInstalled ( ) )
Assert . assertEquals ( 1L , this . sqlgGraph . traversal ( ) . E ( ) . has ( "edge (label = person.name, edgeId = 1)" , E . label ( "edgeId = john.weight)" ) . next ( ) , 0 )
assertSame ( conn , foundConnection )
assertThat ( errors , is ( empty ( ) ) )
assertEquals ( VALUE1 , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( expResult , result )
assertOutputSameTextFile ( gen , "DefineEventMethods_PM.java.txt" )
assertTrue ( statusCode == 200 )
assertTrue ( ! t . get ( ) )
assertTrue ( "size must be 1 but it is - " + queryModel . getObject ( ) . size ( ) , queryModel . getObject ( ) . size ( ) == 1 )
assertEquals ( "1 change script, 1 change script, 3 change scripts" , change1 . toString ( ) )
assertEquals ( "geDeviceId timeout" , latch . getCount ( ) , 0 )
assertTrue ( containsSymbol ( symbols , "@/postData -- POST" , docUri , 28 , 1 , 28 , 28 ) )
Assert . assertEquals ( expectedResult , result )
Assert . assertTrue ( true )
assertEquals ( set , new HashSet < String > ( asList ( "-" , "--" , "---" ) ) )
assertNotNull ( injector )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertNotNull ( result )
assertSame ( StackLocatorTest . class , reversed . pop ( ) )
assertEquals ( 3.0 , median , 0.0000001 )
assertThat ( isTransactionRelated , is ( false ) )
assertFalse ( ispcapng )
assertThat ( actual , is ( expected ) )
assertEquals ( 444L , WebClient . create ( address ) . get ( Book . class ) . getId ( ) )
assertNotNull ( jobId )
runner . assertAllFlowFilesTransferred ( PublishKafka_0_10 . REL_SUCCESS , 3 )
assertNotNull ( Activity . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "12 minutes from now" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertSame ( httpResponse , httpResponseProviderIgnoreAdditionalHeaders . getResponse ( requestCopy ) )
assertEquals ( "Should return address format" , "home" , shopEntity . getAddressFormatByCountryAndLocale ( ) )
assertEquals ( script , observedScript )
assertEquals ( "tokyo-toyosu" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) )
assertJson ( "{'value': 'foo'}" , serialize ( bean ) )
assertEquals ( 1 , LogUtil . findMessage ( "The service method com.alibaba.dubbo.rpc.support.DemoService.echo(String) is DEPRECATED" ) )
Assert . assertEquals ( "(nt_change_misc spl ?)" , nt_change_misc . toStringTree ( parser ) )
Assert . assertEquals ( 10 , result . size ( ) )
assertTrue ( "Expected " + N + " >= " + numResults , numResults <= N )
assertMissingEither ( "one" , "set" , 6L )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( 3 , httpsUsageEntries . getResults ( ) . size ( ) )
Assert . assertEquals ( config . getDoubleValue ( ) , result . getDoubleValue ( ) , 0.0 )
assertEquals ( expResult , result )
Assert . assertEquals ( response , responseText )
assertTrue ( ruleNames . remove ( "Wrong eval order 1" ) )
assertArrayEquals ( expected , array )
assertEquals ( 11146 , ( int ) ( EarthCalc . vincentyDistance ( buenosAires , kew ) / 1000 ) )
assertExpectationsToDatabase ( apiConnectionThrottle , dbConnectionLimit )
assertEquals ( view , response )
dsUtil . assertTaskParamsMatchEntityProperties ( expectedParams , entity )
Assert . assertEquals ( 1 , compareResult )
assertTrue ( "attempting to persist entity with transactional entity manager and no transaction, should fail with a TransactionRequiredException" + " but we instead got a " + error , error instanceof TransactionRequiredException )
assertEquals ( sapper . getY ( ) , oldYPosition + 1 )
assertEquals ( "Test message ab c" , result )
assertEquals ( expResult , result )
Assert . assertEquals ( 10 , o )
assertEquals ( "Incorrect number of events. Expected 2, actual " + events . size ( ) , 2 , events . size ( ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertThat ( extractor . supports ( sheet ) , is ( true ) )
assertPerms ( perms )
Assert . assertTrue ( "Invalid result [" + result + "]" , Double . isNaN ( result ) )
Assert . assertEquals ( 2 , consumerHolders . size ( ) )
Assert . assertEquals ( "(aa_change_deletion (aa_point_location (aa_char Cys) 123) del)" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( expectedString , DomUtils . removeNewLines ( html ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertNotNull ( result )
assertEquals ( "Private field source should have been generated" , source , destination . getName ( ) )
assertEquals ( testObject . getObjectState ( ) , "VALID" )
assertEquals ( size + 1 , notifierManager . internal . size ( ) )
assertTrue ( getTaint ( d1 . getSecret ( ) ) != 0 )
assertQuery ( false , "declare namespace n = 'urn:blah'; declare namespace p = 'urn:foo'; declare namespace q = 'urn:blah'; deep-equal(//e1/@n:a, //e3/@n:a)" )
assertNull ( res . getHeader ( "X-woop" ) )
assertNull ( entityState )
assertEquals ( expectedDate , actualDate )
assertNotNull ( "result cannot be null" , result )
assertTrue ( interceptor . isTraced ( request , null , null ) )
Assert . assertNotNull ( pack )
Assert . assertTrue ( expect ( o , true ) )
assertEquals ( 20.5 , request . getVisitorLongitude ( ) , 0.000001 )
assertAllCommandsUsed ( )
Assert . assertEquals ( true , errors . hasFieldErrors ( "code" ) )
assertTrue ( false )
assertThat ( mojo . getArtifactFile ( ) . getName ( ) , is ( "foo-1.0-SNAPSHOT.woapplication" ) )
Assert . assertEquals ( expected , resultString )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
Assert . assertEquals ( "SELECT DATE_ADD('2009-01-01', INTERVAL 6 / 4 MINUTE_SECOND);" , text )
assertTrue ( selectedCells . isEmpty ( ) )
assertTokens ( Tokens . ID , Tokens . RP )
Assert . assertEquals ( 40. , route . getActivities ( ) . get ( 0 ) . getEndTime ( ) , 0.01 )
assertEquals ( 3 , postCommentScores . size ( ) )
assertThat ( Moments . today ( ) , equalTo ( new DayMonthYear ( today . getDayOfMonth ( ) , Months . fromCalendar ( today . getMonthValue ( ) - 1 ) , today . getYear ( ) ) ) )
assertEquals ( "Expected no extra params" , 0 , b . getExtra ( ) . size ( ) )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertEquals ( 0 , managementService . createJobQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( "--payload | bar" , props . get ( "expression" ) )
assertEquals ( topic . getUnsubscribeLinkForSubscribersOf ( Branch . class ) , "/branches/1/unsubscribe" )
assertEquals ( path , DockerConnectorConfiguration . DEFAULT_DOCKER_MACHINE_CERTS_DIR )
assertArrayEquals ( data , value . getDataAsHexStr ( ) )
assertEquals ( "something else" , result )
assertNull ( event . getFlowVersion ( ) )
assertEquals ( wrappedTemplate + " < ?" , test . build ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( "Interceptor should apply" , result )
assertEquals ( o1 . getResultQuality ( ) , resultQualityString )
assertEquals ( expResult , result )
assertEquals ( expected , parsed )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEquals ( 1 , exceptions . size ( ) )
assertEquals ( "State should not be cleaned" , AnalysisCleanedState . NOT_CLEANED , loadedSubmission2 . getAnalysisCleanedState ( ) )
assertNotNull ( action )
assertEquals ( "pool1" , r . getName ( ) )
assertTrue ( resourceExists ( resourceURI ) )
assertEquals ( new Integer ( 10 ) , MethodFixture . getArgNum ( ) )
assertThat ( adds , StreamMatchers . empty ( ) )
assertTrue ( "Incorrect statement in the Block" , stmt . equals ( TestCommandStatement . sample2 ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( "Scanned row count" , ROW_COUNT , count )
Assert . fail ( "Should have failed due to an error in the test nio acceptor builder" )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE ) , is ( "124 milliseconds" ) )
Assert . assertTrue ( uploadedFile . exists ( ) )
assertEquals ( expected , j )
assertEquals ( count , rows . size ( ) )
assertTrue ( hashSet . contains ( p1 ) )
assertArrayEquals ( CAFEBABE_MD5 , encoded )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( "Proxy" , fb . getProxies ( ) . get ( 0 ) . getType ( ) )
assertThat ( numFound ( query ( "q=10.0.0.0/24" ) ) , is ( 10L ) )
assertEquals ( 5 , d . asInt4 ( ) )
assertEquals ( filterName , result )
Assert . assertNull ( "Race list should be null" , result )
assertEquals ( 0 , instance . getNeuronsCount ( ) )
assertFalse ( mock . booleanReturningMethod ( 12 ) )
assertTrue ( "Http authentication factory should be created" , ops . exists ( TEST_AUTHENTICATION_FACTORY_ADDRESS ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class )
assertNotNull ( result )
assertEquals ( false , new String ( generatedfile . getContent ( ) , "utf-8" ) . contains ( "testOperation" ) )
assertNotNull ( response )
Assert . assertEquals ( ref , Preconditions . checkNotNull ( ref , "%s should not be null" , "Reference" ) )
assertEquals ( response , webRespose )
Assert . assertEquals ( expectedResponse , proxy . sayHello ( message ) )
Assert . assertEquals ( functionColumn , ( ( String [ ] ) result ) [ 0 ] )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( p1 , p2 )
assertEquals ( absChild , DockerFileUtil . combineWithWindowsAbsolute ( parent , absChild ) )
assertNotNull ( con . prepareStatement ( "select 1" ) )
Assert . assertEquals ( "<br/>b" , out . toString ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Arg) 123,aa_point_location (aa_char Arg) 125)))" , aa_change_deletion . toStringTree ( parser ) )
Assert . assertTrue ( "Topic map servlet accepted bad topic map ID" , code == 400 )
assertEquals ( "{\\"id\\":1}" , r . toString ( ) )
assertTrue ( response . getBody ( ) . contains ( "<ns2:out>test</ns2:out>" ) )
Assert . assertNull ( pdoc . get ( new Path ( "field7" ) ) )
assertThat ( date . get ( Calendar . DAY_OF_MONTH ) , is ( 2015 ) )
assertPostFails ( "4" , variant , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertNotNull ( TOKEN )
assertEquals ( 4 , packetIn . getCount ( ) )
assertSame ( JXList . uiClassID , list . getUIClassID ( ) )
assertEquals ( emptyList ( ) , tags )
assertEquals ( 1 , generators . size ( ) )
assertEquals ( expResult , result , 0.0 )
assertEquals ( pdop , instance . getPositionDOP ( ) , 0.001 )
Assert . fail ( "Failure expected on an unauthorized call" )
assertTrue ( "Expected exception to be thrown" , t . isAlive ( ) )
assertQ ( req , "//result[@name='response'][@numFound='1']" , "//result[@name='response']/doc[1]/str[@name='id'][.='1']" )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( ) ) )
assertEquals ( "%41xxxx" , result )
assertEquals ( response . getStatusCode ( ) , 200 )
assertEquals ( 20 , rowCount )
assertThat ( other , LocalTimeMatchers . sameSecondOfMinute ( date ) )
assertEquals ( offset , query ( ) . substringProp ( offset , length ) . from ( offset ) . select ( offset . name . substring ( length ) ) . from ( offset ) . orderBy ( offset . asc ( ) ) . fetch ( ) )
assertPermanentCount ( playerB , "Treacherous Pit-Dweller" , 1 )
assertListTEquals ( listOne , listTwo , 1 , 2 , 3 , 4 , 5 )
assertNull ( e4 . getDefaultEdgeTable ( ) . getColumn ( "ASDFASDF" ) )
assertEquals ( "test@elasticinbox.com:123" , key )
assertEquals ( field1 , subset )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "AB_CE" ) )
assertThat ( id , equalTo ( tweet . getId ( ) ) )
assertEquals ( d1 , d2 )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�尖��  ��" + "��   ��" + "�尖�尖�尖�尖��" )
assertEquals ( "{\\"options\\":{}}" , result )
assertEquals ( 1 , matchingMtTableList . size ( ) )
assertNull ( "There should be no intersection in parallel case" , p )
Assert . assertEquals ( "incorrect number of branches" , 3 , branchesData . size ( ) )
assertTrue ( true )
assertEquals ( expectedCandidates , actualCandidates )
assertTrue ( isEqual )
assertThat ( mergedCss . toString ( ) , is ( "div" ) )
assertEquals ( true , active )
assertEquals ( 4.3 , result )
assertEquals ( "SELECT fname, lname FROM tutorial WHERE children IS NOT NULL" , statement . toString ( ) )
Assert . assertTrue ( prefix . startsWith ( "|" ) )
assertNotNull ( dealershipDocument . get ( ) . getAutomobiles ( ) )
assertEquals ( "<div xmlns=\\"http://www.w3.org/1999/xhtml\\">HELLO WORLD</div>" , actual . getText ( ) . getDiv ( ) . getValueAsString ( ) )
Assert . assertNull ( header )
assertThat ( propertyGetter . propertyByType ( testInstance , Collection . class ) , nullValue ( ) )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"modelregistry/api/componenticon\\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertEquals ( 0 , partitions . size ( ) )
assertEquals ( expectRecord , record )
assertEquals ( 3 , graph . size ( ) )
assertEquals ( "Expected only 1 friend" , 1 , helper . getFriendsOf ( "test_fest" , friends ) . size ( ) )
assertEquals ( 7 , result )
assertThat ( iterateModel . getIncrement ( ) , is ( 2 ) )
assertEquals ( null , stack . getImmutableStackOrNull ( ) )
assertFalse ( inmemoryDOMDataTreeShardWriteTransaction . hasNext ( ) )
assertSchema ( expected , plan . getOutSchema ( ) )
assertTrue ( true )
assertTrue ( ! nnList . isEmpty ( ) )
assertThat ( root . getDescendants ( ) , everyItem ( not ( canBeUnscheduled ( ) ) ) )
assertTrue ( game2 . isGameOver ( ) )
assertEquals ( i & 0xFF , ubyte ( ( byte ) i ) . intValue ( ) )
assertTrue ( out . equals ( "G0 X10.12" ) )
assertEquals ( "incorrect code returned" , 0 , code )
assertNotNull ( result )
assertNotNull ( kmodule )
assertThat ( softDrink , hasToString ( "Drink{=IcedTea,Natural}" ) )
assertThat ( source . getDefaultModel ( ) , is ( nullValue ( ) ) )
assertTrue ( "Windows icon exists" , icon . exists ( ) )
assertEquals ( "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26" , DigestUtils . sha3_256Hex ( EMPTY_STRING ) )
assertEquals ( "http://test.com/test" , actualBaseUri )
assertEquals ( "DATA" + i ++ , new String ( buffer , "UTF-8" ) )
Assert . assertEquals ( 70 , analyser . getLoadDelivered ( ) . get ( 0 ) , 0.01 )
assertNotNull ( envelope )
assertThat ( content , is ( "This is a test." ) )
assertEquals ( 1 , handler . recover ( new Object [ ] { "Randell" } , new RuntimeException ( "Planned" ) ) )
assertEquals ( "IssueGH31" , t . toString ( ) )
assertThat ( "keywordProperties.size()" , keywordProperties . size ( ) , is ( 0 ) )
assertEquals ( "All album names are correct" , ALL_ALBUM_NAMES , albumsView . getAlbumNames ( ) )
assertEquals ( "http://java.sun.com/j2se/1.3/testURITaintThrough" , path )
Assert . assertEquals ( "{\\"sendno\\":\\"10,\\"big_push_duration\\":10}" , toJSON ( json ) )
assertTrue ( Ordering . natural ( ) . isOrdered ( array ) )
assertEquals ( "(foo void ;)\\n" , found )
assertTrue ( job . waitForCompletion ( true ) )
Assert . assertEquals ( 1 , this . cq ( "select p from Customer p where p.manager = false" , Customer . class ) . getResultList ( ) . size ( ) )
assertEquals ( expResult , result , 0.0001 )
assertThat ( existingProduct , is ( product ) )
Assert . assertEquals ( "value1" , pyObjectValue . get ( ) )
Assert . assertNull ( userValidated )
assertTrue ( diff . conflicts ( diff2 ) )
Assert . assertEquals ( new HashSet < String > ( Arrays . asList ( "toplea2" ) ) , resolver . findGoverningEdOrgs ( disciplineAction ) )
assertTrue ( "bar" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) && 2 == c . getVersion ( ) && "path" . equals ( c . getPath ( ) ) && "domain" . equals ( c . getDomain ( ) ) )
assertNull ( "unexpected result returned from getAsync()" , result )
assertEquals ( 1 , count )
assertEquals ( "[{\\"prop1\\":\\"prop2\\"}]" , toString ( serializer . write ( complexTypes ) ) )
assertMockEndpointsSatisfied ( )
assertThat ( selected . entrySet ( ) , is ( empty ( ) ) )
Assert . fail ( "Should have Assert.failed on the first parameter to 'contains' not " + "being bound." )
assertEquals ( "http://example.com/fhir/EpisodeOfCare?patient=123&_revinclude=Encounter%3Aepisode-of-care&_revinclude%3Aiterate=Observation%3Aencounter" , capt . getAllValues ( ) . get ( idx ) . getURI ( ) . toString ( ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
Assert . assertEquals ( date , date2 )
assertThat ( actual . get ( ) , is ( "hello world!!" ) )
assertEquals ( "outProps" , writeOperation . getOutputProperties ( ) . get ( 0 ) . getName ( ) )
assertThat ( result , is ( jsonNull ( ) ) )
Assert . assertEquals ( ProcessState . EXECUTION_SUCCEEDED , process . getState ( ) )
Assert . assertEquals ( false , getValue ( map , "?t" ) . booleanValue ( ) )
assertEquals ( 25 - 3 , execute ( Painting . class , parsed1 ) . size ( ) )
authRule . assertScenario ( scenario )
assertEquals ( 4821960960000L , date . getTime ( ) )
assertEquals ( "false" , out . toString ( ) )
assertThat ( result , equalTo ( emailMessage ) )
assertEquals ( "2013-03-01" , year )
assertThat ( command . accept ( state ) , is ( true ) )
assertEquals ( proxyPort , sut . getProxyPort ( ) )
assertEquals ( HelloWorldProcedure . class , response . getClass ( ) )
assertEquals ( true , result )
assertThat ( gender , is ( equalTo ( expectedPatient . getGender ( ) ) ) )
assertTrue ( failure )
assertNull ( "Last Task in the list should not have a 'next' task" , nextTask )
assertEquals ( "Route" , route . getName ( ) )
assertEquals ( - 1 , BufferTools . indexOfTerminator ( buffer , 0 , - 1 ) )
assertCreateUser ( userA )
assertThat ( statement . createStatement ( ) , is ( sql . toString ( ) ) )
assertThat ( plugin . out , is ( equalTo ( new URL ( "http://halp/" ) ) ) )
assertEquals ( Double . valueOf ( 5 ) , Double . valueOf ( value . asDouble ( 10.0 ) ) )
JsonAssert . assertJsonEquals ( "[{id:'1',result:{foo:'bar'}},{id:'2',result:{foo:'bar'}}]" , getOutput ( ) )
assertTrue ( "Equivalent set criteria don't compare as equal: " + c1 + ", " + c2 , c1 . equals ( c2 ) )
Assert . assertEquals ( notaInfo , nota . getInfo ( ) )
assertEquals ( "Did not find 1 statement in named graph" , 1 , m . size ( ) )
assertEquals ( "normal" , JsonHelper . toJson ( severity ) )
assertThat ( methodSignature ( "method" , String . class , superClass , new Class < ? > [ 0 ] ) , equalTo ( "String method(String,int)" ) )
assertThat ( sublist , is ( emptyList ) )
Assert . assertEquals ( 2 , s . x )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "[]" , c1 . toString ( ) )
assertEquals ( rpcsid . toString ( ) , "RPC_SID{Revision:200, SubAuthorityCount:3, IdentifierAuthority:[1, 2], SubAuthority: [2, 5, 7]}" )
assertXmlEquals ( "<cit:CI_Citation xmlns:cit=\\"" + Namespaces . CIT + "\\">\\n" + "  <cit:presentationForm>\\n" + "    <cit:CI_PresentationFormCode codeListValue=\\"imageDigital\\">Image digital</cit:CI_PresentationFormCode>\\n" + "  </cit:presentationForm>\\n" + "  <cit:presentationForm>\\n" + "    <cit:CI_PresentationFormCode codeListValue=\\"test\\">Test</cit:CI_PresentationFormCode>\\n" + "  </cit:presentationForm>\\n" + "</cit:CI_Citation>\\n" , xml , "xmlns:*" , "codeList" , "codeSpace" )
assertSame ( DefaultParamProcessor . INSTANCE , actual )
Assert . assertEquals ( "nestedSimpleString" , found . getName ( ) )
assertTrue ( LibUsb . getDeviceList ( this . context , list ) >= 0 )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
assertThat ( synonyms , hasItems ( synonym ( "John" ) , synonym ( "Yoda" ) , synonym ( "Kiro" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka" ) , synonym ( "Kiro Tanaka
assertTrue ( result . length ( ) > 0 )
assertEquals ( testString , testObject . getLabel ( ) )
assertThat ( query , is ( "PaginationInfo{page=10, path=\\"/\\"}" ) )
mojos . assertBuildOutputs ( new File ( basedir , "target" ) , "classes/proc/Source.class" , "generated-sources/annotations/proc/GeneratedSource.java" , "classes/proc/GeneratedSource.class" )
assertEquals ( "test" , echo . echo ( "test" ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(s, f) {\\n  };\\n  function d() {\\n  };\\n  c('foo', d);\\n}" )
assertThat ( target . readValue ( value ) , is ( true ) )
assertEquals ( 7100 , ceosReader . readB4 ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 3 , new Calculator ( ) . add ( 1 , 2 ) )
assertOut ( "goog.provide('foo.bar.baz.A');\\n\\n/**\\n * @constructor\\n */\\nfoo.bar.baz.A = function() {\\n};" )
assertEquals ( 5 , g . size ( ) )
Assert . assertEquals ( toArray ( "json" , "aaa" ) , merged )
assertEquals ( Avros . doubles ( ) , t . getSubTypes ( ) . get ( 0 ) )
assertEquals ( expectedCount , AnnotationDrivenStaticEntityMockingControl . countEvaluationDatas ( ) )
assertThat ( configuration , is ( notNullValue ( ) ) )
assertTrue ( cron . getExpr ( ) instanceof DayOfMonthExpression )
assertEquals ( "3 m氓neder siden" , t . format ( new Date ( 0 ) ) )
assertEquals ( "testSimpleDeserialization" , auctionList , deserialize ( outStream . toString ( ) , ObjectMapper . class ) )
assertThat ( chargingSchedule . getDuration ( ) , equalTo ( anInteger ) )
Assert . assertEquals ( "MixedMode" , client . testEnhancedRest ( param0 ) . getOut ( ) )
Assert . fail ( "Remote invocation on a local view " + LocalEcho . class . getName ( ) + " was expected to fail" )
CompileUtils . assertCompiles ( "QEntity" , writer . toString ( ) )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 3 ) )
assertEquals ( true , result )
assertOut ( "switch (i) {\\n\\tcase 1:\\n\\t\\tbreak;\\n}" )
assertEquals ( l0 . getValue ( ) , l1 . getValue ( ) )
assertEquals ( t1 , UUIDUtils . min ( t1 , null ) )
assertOut ( "var /** @type {number} */ a = 1" )
assertEqArgumentGeneratesXPath ( 1 , nth0XPathExpression )
mockOut . assertIsSatisfied ( )
assertTrue ( isEqual ( d1 , d2 ) )
assertTrue ( appValidationService . validate ( "AAA" , ApplicationType . task ) )
assertHelpWasDisplayed ( retryCommandSpy )
Assert . assertTrue ( "did not find null" , foundNull )
assertEquals ( numberOfExceptions , 8 )
assertAnnotations ( 3 , Quantity . class , new TestEntity < > ( 0 , "300 m, 300 metres, 300meters, 1m long." ) , new TestEntity < > ( 1 , "300 meter" , "300 meter" ) , new TestEntity < > ( 2 , "300 meter" , "300 meter" ) , new TestEntity < > ( 3 , "300 meter" , "300 meter" ) , new TestEntity < > ( 4 , "300 meter" , "300 meter" ) , new TestEntity < > ( 5 , "300 meter" , "300 meter" ) , new TestEntity < > ( 6 , "300 meter" , "300 meter" ) , new TestEntity < > ( 7 , "300 meter" , "300 meter" ) , new TestEntity < > ( 8 , "300 meter" , "300 meter" ) , new TestEntity < > ( 9 , "300 meter" , "300 meter" ) , new TestEntity < > ( 10 , "300 meter" , "300 meter" ) , new TestEntity < > ( 11 , "300 meter" , "300 meter" ) , new TestEntity < > ( 12 , "300 meter" , "300 meter" ) , new TestEntity < > ( 13 , "300 meter" , "300 meter" ) , new TestEntity < > ( 14 , "300 meter" , "300 meter" ) , new TestEntity < > ( 15 , "300 meter" , "300 meter" ) , new TestEntity < > ( 16 , "300 meter" , "300 meter" ) , new TestEntity < > ( 17 , "300 meter" , "300 meter" ) , new TestEntity < > ( 18 , "300 meter" , "300 meter" ) , new TestEntity < > ( 19 , "300 meter" , "300 meter" ) , new TestEntity < > ( 20 , "300 meter" , "300 meter" ) , new TestEntity < > ( 21 , "300 meter" , "300 meter" ) , new TestEntity < > ( 22 , "300 meter" , "300 meter" ) , new TestEntity < > ( 23 , "300 meter" , "300 meter" ) , new TestEntity < > ( 24 , "300 meter" , "300 meter" ) , new TestEntity < > ( 25 , "300 meter" , "300 meter" ) , new Test
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\\"$or\\":[{\\"username\\":{\\"$regex\\":\\"^((?!Mistic).)*$\\",\\"$options\\":\\"s\\"}}]}" )
assertEquals ( params , repositoryType . marshallize ( ) )
assertEquals ( "getSongs/{songId}/{songId}" , Names . methodName ( resource , method ) )
assertEquals ( 40.0 , Solutions . bestOf ( solutions ) . getCost ( ) , 0.1 )
Assert . assertTrue ( r . isSuccess ( ) )
assertEquals ( result , subject . unmodifiableSet ( ) )
assertEquals ( "{\\"d\\":{\\"isScrumTeam\\":false}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( expected , output )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 42.0 , 42.0 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) <= 'literal'" ) )
assertFiltersDefined ( configurationUnit , filter ( "Name field filter" , "name" ) , filter ( "Surname field filter" , "surname" ) )
assertEquals ( person , findOne )
Assert . assertEquals ( oid , commit . getId ( ) )
assertEquals ( "456/i_have_spaces.log" , tokenId )
assertSerializedEquals ( c )
assertEquals ( "S.a\\n" , found )
assertEquals ( "TestPassword" , envVars . get ( "COVERITY_PASSPHRASE" ) )
assertEquals ( expectedResult , entityParser . parseObservedProperty ( json ) )
assertEquals ( "Conversion did not match" , value , to )
Assert . assertNotNull ( "null data object" , element )
assertFalse ( ProtocolConstants . StatusCodes . Create . Follow . USER_NOT_EXISTING . equals ( this . jsonResponse . get ( ProtocolConstants . STATUS_MESSAGE ) ) )
assertThat ( fOk . get ( ) , equalTo ( 4 ) )
assertEquals ( "(| (& [* fo.*] [* .*oo]) [= bar])" , m . toString ( ) )
assertNull ( array )
arrays . assertDoesNotHaveDuplicates ( description , actual )
Assert . assertEquals ( "http://jsc/jsc-jsc" , url )
assertEquals ( getNumberNode . getInputSIDE_Effects ( ) , SideEffects . getNumber ( ) )
assertEquals ( "init;f();" , SubClassWithBridge . log )
assertNotNull ( p . getText ( ) )
assertEquals ( "Accepted" , result )
assertNotNull ( fixture )
assertLogging ( response . getBody ( ) )
assertThat ( ImmutableSet . of ( immutableTypes ) , is ( ImmutableSet . of ( String . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , BigDecimal . class , Big
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "" } ) )
assertEquals ( expectedMap , map )
Assert . assertEquals ( expected , actual )
assertEquals ( "subdir" , new File ( HOLMES_HOME . getValue ( ) , "subdir" ) . getPath ( ) )
assertNull ( person . getPersonVoidReason ( ) )
Assert . assertEquals ( true , tableColumnMeta . isAutoUpdated ( ) )
Assert . assertArrayEquals ( VALUE . toArray ( ) , dataItems . toArray ( ) )
assertThat ( issues , is ( empty ( ) ) )
Assert . assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.processing.runtime.fieldselector.FieldSelectorRuntime" ) )
assertTrue ( isDynamicCSVFormat )
assertTrue ( this . distributedMap . getHeader ( HLL_CACHE_NAME ) . equals ( DISTRIBUTED_MAP . getHeader ( HLL_CACHE_NAME ) ) )
assertEquals ( 144. , violation , 0.01 )
assertEquals ( extractedYAML , expectedYAML )
assertFalse ( "our member-group shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
Assert . assertEquals ( fieldsCountExpected . get ( clazz ) . intValue ( ) , fieldsMetadata . getFields ( ) . size ( ) )
assertEquals ( 1 , links . size ( ) )
assertOperationLog ( decisionDefinition )
assertThat ( readString , is ( not ( nullValue ( ) ) ) )
Assert . assertTrue ( "whole file not read back" , expectedReadData == readData )
assertEquals ( map , map2 )
Assert . assertTrue ( "should have copied over the original path" , irodsFile . exists ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertTrue ( adder . invoke ( foo ) )
assertThat ( noOfSolutions , is ( 741642 ) )
assertTrue ( Files . isDirectory ( gfs . getPath ( "/test_file.txt" ) ) )
assertEquals ( "_cat/segments/_all" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( 5 , result )
assertEquals ( "test (REG_EXPAND_SZ) = ? (0x3F000000)" , value . toString ( ) )
assertEquals ( expectedSignature , signature )
assertTrue ( "'destroy sub-branch' was configured to be ignored" , filter . accept ( "destroy sub-branch \\"esmalling_branch\\" of branch" , "/main/sit_r6a/11" ) )
Assert . assertEquals ( actual , expected , "Returned an invalid property value." )
assertEquals ( "did not get expected number of entries " , 2 , list . size ( ) )
Assert . assertEquals ( query , interpretedQuery )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertNull ( io . getDocument ( q1 ) )
assertNull ( result )
Assert . assertNull ( entry )
Assert . assertEquals ( textualToken . getToken ( ) , "1" )
assertNotNull ( x509Attestation . getRootCertificatesFinal ( ) )
assertThat ( expectedResult , is ( actualResult ) )
Assert . assertTrue ( IQTimeHandler . isTimeZone ( "Europe/Berlin" ) )
assertTrue ( constraintValidator . isValid ( Money . of ( 1 , "EUR" ) , null ) )
assertTrue ( resultSq == Position . NOPOSITION )
assertEquals ( 1 , profileSaverWorker . getMessages ( ) . size ( ) )
maps . assertContainsOnly ( info , actual , expected )
assertTrue ( impl . isApiToken ( ) )
Assert . assertEquals ( 2 , lifeMembers ( ) )
assertEquals ( a1 , a2 )
assertSame ( shouldFind , selection . fileSelect ( By . id ( "test" ) ) )
assertEquals ( 100 , array . length )
assertEqualsJson ( expected , actual )
Assert . assertEquals ( expectedSpec , actualSpec )
assertEquals ( "baz/\\n" + "  foo/\\n" + "     bar/\\n" + "      wooz 0 (S_IFREG)\\n" + "    rooz -> bar/wooz\\n" , sw . toString ( ) )
assertEquals ( ( double ) 8 , result . getDoubleValue ( ) , 0.0 )
Assert . fail ( )
assertThat ( bishop , is ( board . getChessBoard ( ) [ startRow + 1 ] [ startCol + 1 ] . getFigure ( ) ) )
assertThatCellReaderWasCalled ( )
assertList ( expected , result )
Assert . assertEquals ( "Num tasks not correct" , 1 , job . getTasks ( ) . size ( ) )
Assert . assertNotNull ( view )
Assert . assertNotNull ( handler )
assertNotNull ( applicationContext . getBean ( "rewardNetwork" ) )
assertTrue ( isDiscountApplied )
Assert . assertEquals ( originStat + FILE_LEN , sStatistics . getBytesWritten ( ) )
assertEquals ( "1" , result )
Assert . assertEquals ( outContent . toString ( ) . trim ( ) , "1.2.1" )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( output , containsString ( "Dataset deleted:" ) )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullHour ( ) ) , is ( PlainTime . of ( 24 , 0 ) ) )
Assert . assertArrayEquals ( EXPECTED , data )
Assert . assertEquals ( expectedTwo , actual )
assertThat ( extension . getServerNames ( ) . get ( ServerName . NameType . HOST_NAME ) , is ( "" ) )
assertTrue ( info . isEmpty ( ) )
assertNull ( changeEvent [ 0 ] )
assertTrue ( psa . getLegend ( ) instanceof UniqueSymbolPoint )
assertTrue ( futureDigest . digest ( ) . keyDigest ( ) . isEmpty ( ) )
assertEquals ( todolistMapper . getTodolists ( ) . get ( 0 ) , ret )
assertFalse ( topic . hasTopic ( ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertEquals ( expectedMaxExpansionSize , actualDestLen )
assertFalse ( hasPermission )
assertNoViolations ( violations )
assertEquals ( "" , result )
assertEquals ( "Invalid argument passed" , value , supportedArgument )
assertEquals ( "Wrong number of codes" , 2 , codes . size ( ) )
assertEquals ( "test" , msg . getText ( ) )
assertParseTree ( rootNode ( "hello world" , stringNode ( "greeting" , "hello world" , stringNode ( "hi you" , "hello world" ) ) ) , tree )
assertEquals ( "something == x && something == y" , result )
assertArrayEquals ( refar , d . getResult ( ) )
assertThat ( report , is ( not ( nullValue ( ) ) ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pause>" + "before" + "<Child>content</Child>" + "after" + "</Pause>" , builder . build ( ) . toXml ( ) )
assertThat ( downstream , hasSize ( 0 ) )
assertEquals ( "foo" , sw . toString ( ) )
Assert . fail ( )
assertEquals ( "new-question-btn" , createTopicBtnDto . getLabel ( ) )
assertEquals ( 2 , previous . getClassNames ( ) . length )
assertEquals ( count , expectedCount )
assertEquals ( addInsn , block . add ( addInsn ) )
Assert . assertNull ( header )
Assert . assertFalse ( result )
assertEquals ( end - start , 5000 , getWaitForRatio ( ) )
assertEquals ( expected , actual )
assertSame ( oldPipelineFactory , b . getPipelineFactory ( ) )
assertEquals ( "? hello ?" , s . sql ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "34 00 10 00 F8 FF 3C 00 10 0E 08 00" ) , request . serialize ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "failed to generate variable declaration using a literal initialization and type inference" , "String n = 10;" , declaration )
assertSchemaValue ( subject , version , 1 , "{\\"type\\":\\"record\\",\\"name\\":\\"myrecord\\"," + "\\"fields\\":[{\\"name\\":\\"f1067572235\\",\\"type\\":\\"string\\"}]}" , false , schemaValue )
assertEquals ( original , converted )
Assert . assertEquals ( 2 , ddf2 . getNumRows ( ) )
Assert . assertEquals ( 10 , controller . getCurrentRunLevel ( ) )
assertDtos ( expected , actual )
assertThat ( taskService . createTaskQuery ( ) . taskId ( task . getId ( ) ) . count ( ) , is ( 1L ) )
assertEquals ( 0 , CPDCommandLineInterface . getAllProperties ( ) . size ( ) )
assertEquals ( new Lambda ( x , x ) , t )
Assert . assertEquals ( expected , actual )
assertEquals ( 2 , BusLifeUnits . get (bus ) . get ( ) . getMessageCount ( ) )
assertThat ( new SelectBest ( ) . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol2 ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( rightsString , fr . getFeedRights ( ) )
assertEquals ( "<font size=-1>test</font>" , largeSizeDecorator . toDisplay ( ) )
Assert . assertEquals ( maximaRepresentation , valueWrapperResult . getMaximaLinearOutput ( ) )
assertEquals ( datum , fromJson . build ( ) )
assertEquals ( 1_000_000 , this . sqlgGraph . traversal ( ) . V ( ) . has ( T . label , "Person" ) . next ( ) , false )
assertFileExists ( file )
assertEquals ( expResult , result )
Assert . assertEquals ( 20f , rad , EPSILON )
test . assertResult ( )
Assert . assertEquals ( embeddedCache , user . getCache ( ) )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
softly . assertThat ( skipInstallationChecker )
assertEquals ( CSV_FILE , writer . toString ( ) )
Assert . assertEquals ( "1\\n1\\n3" , formatted )
assertEquals ( "00FF" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( "output must be empty object array" , 0 , output . length )
assertEquals ( "" , result )
assertEquals ( uri , f . getBaseUrl ( ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
Assert . assertEquals ( config . getEnumValue ( ) , result . getEnumValue ( ) )
assertEquals ( "bob" , fc . getPath ( ) )
assertEquals ( 0 , fsm . getLastMessageAlert ( ) . getMessageType ( ) . getValue ( ) )
assertEquals ( male , repository . getSingleResult ( query ) )
Assert . assertTrue ( ( end - start ) > 500l )
assertEquals ( "^/cntrl/:id/actn$" , pattern )
assertTrue ( form . getName ( ) . equals ( formUpdate . getName ( ) ) )
assertThat ( String . valueOf ( returnedValue ) , is ( "00000" ) )
assertEquals ( 30f , a . intersectionArea ( b ) , 0.0001 )
assertEquals ( cf . getClientProperties ( ) . size ( ) , 1 )
assertEquals ( "Serialised Batches" , serialisedBatches , actualBatches )
assertEquals ( expected , ByteUtil . allBytes ( ( byte ) j ) )
Assert . assertTrue ( true )
assertThat ( request1 , is ( not ( request2 ) ) )
assertNotNull ( distribution )
assertDrlHasCompilationError ( drl1 , 1 )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( 500 , page . getWebResponse ( ) . getStatusCode ( ) )
Assert . assertEquals ( "Value is incorrect" , map ( TIME_2_STRING , "test" ) , value )
assertions . isNull ( )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( remoteClientOID . getServiceID ( ) ) )
TestUtils . assertEquals ( new double [ ] { - 1 , 3 , 1 } , b . toArray ( ) , 1.0e-12 )
Assert . assertEquals ( 0 , indexer . getErrors ( ) . size ( ) )
Assert . assertFalse ( config1 . equals ( config2 ) )
assertThat ( result , is ( true ) )
assertTrue ( result1 == result2 )
assertNull ( "Unexpected value in outputTriple: " + outputTriple , outputTriple )
assertEquals ( "Count of customer" , 2 , res )
Assert . assertEquals ( SECRET + "-test" , secret . get ( "serverKeystorePass" ) )
assertEquals ( "mystring" , result )
Assert . assertTrue ( true )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( "readIndex('nodes').select('node.get(\\\\'name\\\\')==\\"root\\"')" , t . toString ( ) )
assertEquals ( expected , actual )
assertFlowState ( ACCEPTED_FIRST_MONTH )
Assert . assertEquals ( ServerParse . RENAME , sqlType )
Assert . assertEquals ( "a\\tb\\tc\\n" , stringAppender . toString ( ) )
assertEquals ( "Hello, World!" , value . evaluateAttributeExpressions ( createFlowFile ( attributes ) ) . getValue ( ) )
assertMessagesEquals ( union ( expected , actual ) , actual )
assertTrue ( verifyProps ( a , LIST_AB ) )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( expected , store . findVirtualServer ( "www" ) , true ) )
assertXpathNotExists ( "/a:entry/m:properties" , xmlString )
assertEquals ( uuid , urlToken )
assertEquals ( "gerrit approve --project projectname --message \\"Project name 1\\n error message\\" --code-review -1 1,2" , command )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( lastReadPostList . isEmpty ( ) , "For passed empty list of topics it should return empty list." )
assertEquals ( ctx . getParameterDescriptors ( ) , Collections . singletonList ( p0 ) )
Assert . assertEquals ( expectedRegex , pattern . compiled ( ) . toString ( ) )
assertThat ( rubyVersion , equalTo ( "1.8.0-p125" ) )
Assert . assertArrayEquals ( new String [ ] { ".sql" , ".test" } , language . getFileSuffixes ( ) )
assertEquals ( "InputStreamTest" , toString ( stream ) )
assertEquals ( GitSCM . class , blacklist . getClassLoader ( fakeProject ) . loadClass ( GitSCM . class . getName ( ) ) )
assertEquals ( "from SURVEY SURVEY\\njoin table(functionCall() as fc) as fc\\nwhere SURVEY.NAME is not null" , query . toString ( ) )
assertFalse ( constraint . fulfilled ( iContext ) )
Assert . assertEquals ( "SELECT 'Monty!' REGEXP '.*';" , text )
assertEquals ( expectedValue , propertyValue )
assertEquals ( "wrong number of enumerated values... test should be examined and updated" , 7 , ParseResult . values ( ) . length )
assertEquals ( assertion , sigmoid )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes WHERE (nodes.col1 IS NOT NULL AND nodes.col2 IS NOT NULL)" ) )
assertTrue ( readVrp . getJobs ( ) . get ( "1" ) . getRequiredSkills ( ) . containsSkill ( "skill2" ) )
assertFalse ( MyFeatures . F1 . hasParts ( ) )
assertOut ( "var /** @type {Array} */ a = new Array(30)" )
Assert . assertEquals ( "(aa_change_deletion (aa_point_location (aa_char Cys) 123) del (aa_string Cys))" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( "GBP 5.83" , test . toString ( ) )
Assert . assertEquals ( count - 1 , nowcount )
assertClosed ( toClose )
assertEquals ( entry . getValue ( ) , actual )
assertThat ( expected . equals ( document ) , is ( true ) )
assertEquals ( vars , variablesTyped )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
Assert . assertTrue ( score > 0 )
Assert . assertNotNull ( dbRangerPolicy )
assertEquals ( "Git" , descriptor . getDisplayName ( ) )
assertEquals ( future , underTest . collect ( futures , collector ) )
assertEquals ( 1 , x )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( L3vpnMcastRoute . class ) )
Assert . assertNotNull ( resultEntity )
assertEquals ( MockHostnameService . class , modularLauncher . getInjector ( ) . getValue ( ) . getServiceType ( ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 4 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" + " msgType: 32768 oxm_field: 42 experimenterID: null" , key1 . toString ( ) )
assertEquals ( expectedUuid , datatype . getUuid ( ) )
assertEquals ( "foo" , Foo . class . getDeclaredMethod ( "foo" ) . invoke ( null ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.junit.Assert;\\n" + "import org.kissmda.test.j
assertNotNull ( subDao . get ( co . getId ( ) ) )
assertThrows ( IllegalArgumentException . class , ( ) -> AccumuloInputFormat . configure ( ) . clientProperties ( clientProps ) . store ( new JobConf ( ) ) )
assertEquals ( size , buffer . capacity ( ) )
assertThat ( manager . evaluate ( selectorConfiguration , variableSource ) , is ( false ) )
Assert . assertEquals ( new URI ( "http://localhost:80/" ) , result )
assertThat ( message , equalTo ( INTERPOLATED_EXAMPLE_MESSAGE ) )
assertConnection ( sqlInputs , 1 , "jdbc:jtds:sybase://localhost:30/dbName" , null )
assertTrue ( "Comparaison OK => Erreur" , comparator . compare ( ) )
assertNotNull ( solution )
context . assertIsSatisfied ( )
assertEquals ( "" , underTest . getCalled ++ )
assertions . doesNotContain ( values )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertNotNull ( codes )
assertThat ( client . getNamesOfRepositories ( ) , hasItems ( "Aircraft" , "Cars" , "Vehicles" ) )
assertEquals ( "Incorrect add news" , 3 , news . size ( ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertSame ( "control" , choice . get ( ) )
assertEquals ( Lists . newArrayList ( "value1" , "false" , "1.02" , "1,-1" ) , Pql . getRowStringValues ( row ) )
Assert . assertEquals ( "PK2222" , result )
assertEquals ( 0. , absFixedCosts . getCosts ( context ) + relFixedCosts . getCosts ( context ) , 0.01 )
assertTrue ( ex . isPrime ( 11 ) )
assertEquals ( 3 , list . size ( ) )
assertEquals ( expecting , found )
assertNull ( mapping )
assertEquals ( expResult , result )
Assert . assertEquals ( expected . replace ( '\\'' , '"' ) , result )
this . assertGet ( "relationshiptypeimplementations/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypeimplementations%252Ffruits/kiwi_implementation/inheritance" , "entityimplementations/relationshiptypeimplementations/kiwi_initial_inheritance.json" )
Assert . assertTrue ( command instanceof AuditConnectionCommand )
assertTrue ( connectionManager . isConnected ( ) )
assertEquals ( expectedEntry , result )
Assert . assertNotNull ( jurl . getResponseJsonList ( EatStreetState . class ) )
assertTrue ( result )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertEquals ( ip . getIp ( ) , "127.0.0.1" )
assertEquals ( "Expected no results" , 0 , list . size ( ) )
assertEquals ( 0 , container . size ( ) )
assertNotNull ( error )
assertEquals ( "<<font point-size=\\"12\\">text</font>>" , label )
assertEquals ( "abc, def\\n" , found )
assertTrue ( lhs . equals ( rhs ) )
assertThat ( log , instanceOf ( Log4JImpl . class ) )
assertTotalDocs ( )
assertThat ( verifyModelVersionsSaved ( ) , is ( ImmutableMap . of ( "foo" , "1.2" , "bar" , "1.1" , "wibble" , "2.0" ) ) )
assertEquals ( "Failed at index " + i , assertions [ i ] , arr )
assertFalse ( violated )
assertSame ( Object . class , converter )
assertEquals ( valueOf ( v ) , s . serialize ( ( HttpPartSchema ) null , v ) )
assertEquals ( "Has one child with jssonns:ns" , 1 , numChilds )
assertEquals ( expected , listener . getMean ( ) , 1.0e-15 )
assertEquals ( 0 , triggeredBy . size ( ) )
assertEquals ( 0 , formatter . printTimestamps ( ) )
Assert . assertEquals ( "Invalid result" , "text" , result )
Assert . assertFalse ( "Authenticated" , authenticated )
Assert . assertEquals ( false , errors . hasFieldErrors ( "states" ) )
assertThat ( data , is ( test ) )
assertNull ( last )
Assert . assertNotNull ( tasks )
assertThat ( studies . size ( ) , is ( 0 ) )
assertNotEquals ( array , result )
assertEquals ( "Incorrect unsigned byte value" , MAGIC , s . u8 . shortValue ( ) )
context . assertIsSatisfied ( )
assertFalse ( groups . hasNext ( ) )
assertNull ( "Got an unexpected number of rows - no data should be returned with the NoDataFromScan coprocessor. Found: " + r , r . list ( ) )
assertEquals ( Order . sellAt ( 0 , NaN , NaN ) , uncoveredTrade . getEntry ( ) )
assertThat ( channelCaptor . getValue ( ) , is ( "slackbot" ) )
assertAnnotations ( 2 , MilitaryPlatform . class , new TestEntity < > ( 0 , "HMS Troutbridge" , "HMS Troutbridge" ) , new TestEntity < > ( 1 , "H.M.S. Hidden Dragon" , "H.M.S. Hidden Dragon" ) )
assertEquals ( request . toHexString ( ) , "000000008e3039708fdd9f488f9665426d0d9c5702000000020000001a001a00000002001c001c00040002000d000000000000000d000000410064006d0069006e006900730074007200610074006f00720000000e000000410064006d0069006e006900730074007200610074006f0072003200000000000000000001000000" )
assertEquals ( "FAIL:Failure Demonstration" , result )
assertNotNull ( at . convert ( null , null , "foo" ) )
assertTrue ( loader . load ( "scrypt" , false ) )
assertIsEphemeral ( "ephemeral testValue" , testVal )
result . assertIsSatisfied ( )
assertEquals ( "http://example.com:4510/my_db/my_doc?startKey=my_db&endKey=my_doc" , uri . toString ( ) )
assertTrue ( Arrays . equals ( data , ( boolean [ ] ) deserialize . readObject ( ) ) )
assertEquals ( ordered_data , rows . get ( 0 ) . get ( "data" ) )
assertEquals ( date , toDate ( cal ) )
assertFalse ( match )
assertEquals ( vr . getValidity ( ) , Validity . INVALID )
assertEquals ( 1 , change1 )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
assertEquals ( 4 , route . getActivities ( ) . getActivities ( ) . size ( ) )
assertTrue ( true )
assertEquals ( 0 , int0 )
assertEquals ( str , quote ( ExampleBuilder . SAMPLE_STRING_PROPERTY_VALUE ) )
assertThat ( list . toString ( ) , is ( copy . toString ( ) ) )
Assert . assertTrue ( success )
Assert . assertEquals ( expected , actual )
assertEcssEquals ( ".menu{background-position:\\"#{notemptyrichSkin.menu1?richSkin.menu2:''}\\";}" , convertFragment ( xcss ) )
assertThat ( task , is ( notNullValue ( ) ) )
Assert . assertNotNull ( notification )
Assert . assertEquals ( expected , actual )
arraysWithCustomComparisonStrategy . assertContainsExactlyInAnyOrder ( someInfo ( ) , actual , expected )
assertNull ( handler . getErrorCode ( ) )
Assert . assertEquals ( DefaultJobPriorityProvider . DEFAULT_PRIORITY_ON_RESOLUTION_FAILURE , job . getPriority ( ) )
assertArrayEquals ( new int [ ] { 0 } , findFusionStartIndices ( schedulingStrategies ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "A" , "B" , "C" } } ) ) )
assertEquals ( machine , MACHINE_NAME_USED . getValue ( ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ] , expectedResult , actualResult )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( 0 , map . size ( ) )
assertNull ( "Got a frame" , stream . nextFrame ( ) )
assertEquals ( "20110103201412297033000000" , d . getId ( ) )
assertTrue ( "Timeout reached. Message latch value: " + messageLatch . getCount ( ) , messageLatch . await ( 5 , TimeUnit . SECONDS ) )
assertThat ( htmlDriver . runIfHtmlUnit ( "test" ) , is ( true ) )
Assert . assertEquals ( 1024.0 , a . divide ( b ) . doubleValue ( ) , 1.0e-15 )
assertEquals ( t , HttpURL . toAbsolute ( absURL , s , "xyz.html" ) )
assertEquals ( "kHz" , khz . toString ( ) )
assertEquals ( " WHERE \\"NAME\\" LIKE ? AND \\"AGE\\" > ?" , QueryBuilder . getWhereStringForFilters ( filters , sh ) )
assertEquals ( post . getUnsubscribeLinkForSubscribersOf ( PostSubClass . class ) , "/topics/1/unsubscribe" )
assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
assertThat ( results , contains ( composition , bundle , encId ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongValue ( ) )
assertTrue ( reset . await ( 10 , TimeUnit . SECONDS ) )
assertFlowState ( ACCEPTED_FAILED )
assertEquals ( offset , options . getOffset ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( "Failed to generate two dimensional object array" , "new Object[][] { { 1, 2 } }" , s )
assertThat ( plugin . getClass ( ) , is ( equalTo ( TimelineFormatter . class ) ) )
assertEquals ( m . getIntervals ( ) [ i ] , 1e-7d )
Assert . assertNotNull ( token )
assertEquals ( concepts , Collections . emptyList ( ) )
assertArrayEquals ( plaintext , correctPlaintext )
assertEquals ( ValidationResult . Result . OK , result . getStatus ( ) )
assertEquals ( 4 , fixture . mark ( ) )
assertContentEquals ( style , Arrays . asList ( "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" )
assertTrue ( page . asXml ( ) . contains ( "view-facelets" ) )
assertEquals ( b1 , b2 )
assertThat ( termCollection , is ( empty ( ) ) )
Assert . assertEquals ( orig , clone )
Assert . assertEquals ( "9999999999.9999" , cide . getValorAliquota ( ) )
Assert . assertNotNull ( freeTaggingService )
assertEquals ( expected , query . export ( ) )
assertTrue ( LibUsb . getDeviceList ( null , deviceList ) >= 0 )
assertEquals ( val , 9 )
assertNotNull ( metadata . getEntityListenersMetadata ( ) . getCallbacks ( ) )
assertEquals ( 3 , result . getSize ( ) )
assertThat ( unit . shouldGenerateInvocationId ( ) , is ( false ) )
assertEquals ( expectedDate , formatDate ( "yyyyyy-MM-dd HH:mm" , result ) )
assertNotNull ( callback . asResponse ( reply ) )
assertEquals ( 0 , profileEntries . size ( ) )
assertEquals ( "\\"a,b,c\\"" , ctxName )
Assert . assertNotNull ( imposto . toString ( ) )
assertSame ( test . with ( Month . JUNE ) , test )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( nestedMap . get ( "key1" ) , complexPojo . getNestedSimplePojo ( ) . get ( "key1" ) )
assertNotNull ( result )
assertEquals ( "a" , service . getNamespace ( "hell" ) )
assertEquals ( Arrays . asList ( new JoinExpression ( JoinType . DEFAULT , str ) ) , metadata . getGroupBy ( ) )
assertNotNull ( result )
assertThat ( taskService . createTaskQuery ( ) . taskPermission ( "test" ) . count ( ) , is ( 1L ) )
assertThat ( socketIoData , is ( expect ) )
assertEquals ( "GET:testGetRequestWithParameters" , responseBody )
assertNotNull ( fieldInjectable . getTarget ( ) )
assertEquals ( "e1" , state . findFirstDeclaration ( FunctionDeclaration . class , "*.Array.e1" ) . getDeclaration ( ) . getType ( ) . getName ( ) )
assertEquals ( expResult , result )
assertArrayEquals ( message , output )
Assert . assertEquals ( 2 , nbConceptsAlignedToMyThes . longValue ( ) )
assertFalse ( fencer . fence ( MOCK_TARGET ) )
assertIsOutputEqualTo ( "Using parameter name 'name' for parameter position 0" )
assertEquals ( 20. , violation , 0.01 )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
this . assertGet ( "patternrefinementmodels/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fpatternrefinementmodels/PropertyMappingsTest_w1-wip1/attributemappings" , "patternrefinementmodels/jcr:primaryTypeMappings.json" )
Assert . assertEquals ( 2 , analyser . getLoadAtBeginning ( ) , 0.01 )
assertTrue ( map instanceof Map )
assertEquals ( "Hello {{foo}}" , engine . compileMustache ( "if_helper_custom_else" , "{{foo}}" ) . render ( Boolean . TRUE ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertThat ( withResult ( TestResult . ERROR ) . matches ( testOutcome ) , is ( false ) )
assertEquals ( "<html><head></head><body><span class=\\"foo\\">bar</span></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertNotNull ( ft )
assertEquals ( Arrays . asList ( "myForm:outerOutput" , "myForm:table:0:nestedOutput" , "myForm:table:1:nestedOutput" ) , trackingVisitCallback . getVisitedIds ( ) )
assertTrue ( false )
assertEquals ( messagePage . getContent ( ) . size ( ) , 1 , "Incorrect count of message in one page." )
assertFalse ( lockAquired )
assertThat ( edges . size ( ) , is ( 0 ) )
assertE ( "******" + "*abcd*" + "*efgh*" + "*ijkl*" + "*mno+*" + "******" )
assertNotEquals ( column1 , column2 )
Assert . assertTrue ( clickMe . getText ( ) . contains ( buttonText ) )
assertEquals ( "user_uuid" , persistentNameIdentifier )
assertNotNull ( json )
assertSimilarXml ( TestUtils . getResource ( "/org/sonar/plugins/groovy/codenarc/exportProfile/exportProfile.xml" ) , writer . toString ( ) )
assertEquals ( 2 , mapper . get ( e ) . other . size ( ) )
assertEquals ( HttpMethod . GET , HttpMethod . of ( request ) )
assertTrue ( result == null )
Assert . assertEquals ( "select sum(DATE(STUDENT.ID) from student" , getSql0 ( node ) )
assertThat ( fetchCount ( ) , is ( 1L ) )
assertEquals ( "+a -a/b" , s . getPattern ( ) )
assertNull ( result )
assertFalse ( errorResponse1 . equals ( errorResponse2 ) )
assertPutFails ( name , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertThat ( result . getName ( ) , is ( "Mircosoft涓���" ) )
assertEquals ( cause , err . getCause ( ) )
assertEquals ( asList ( listener1 , listener2 ) , newBuilder . getConfig ( ) . getPermanentListeners ( ) )
assertEquals ( "" , result )
assertEquals ( "3 months from now" , t . format ( new Date ( 2629743830L * 3L ) ) )
assertThat ( results , is ( new String [ ] [ ] { { "A" , "B" , "C" } } ) )
assertThat ( controller , is ( equalTo ( method ) ) )
assertEquals ( "Continue" , x . getDescription ( ) )
assertNotNull ( response )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=closeToTermination&minSupportCount=0" ) )
assertEquals ( 1 , results . length )
context . assertIsSatisfied ( )
assertThat ( applicationSettings . getAccountCreationSetting ( ) , is ( ACCOUNT_CREATION_ALLOWED ) )
assertThat ( formatter . format ( "--> %a <--" ) , equalTo ( "--> docker.maven.plugin <--" ) )
assertThat ( index , is ( 1 ) )
assertThat ( planet . isPresent ( ) , is ( false ) )
assertContains ( "Master footer is here" , content )
Assert . assertEquals ( 0 , sut . getWeekdayCountBetweenDates ( start , end ) )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2007 , 7 , 15 ) , OFFSET_PONE ) , t )
assertNotEquals ( left , right )
assertThat ( result , is ( expected ) )
assertEquals ( "1\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nbaz\\nb
assertThat ( result , is ( equalTo ( expected ) ) )
assertThat ( isValid , is ( true ) )
assertThat ( geometry . getArea ( ) , is ( 125.0 ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
assertTrue ( shifter . hasAttribute ( Attribute . DEFLECT ) )
assertEquals ( expected , actual )
assertThat ( plugin . isNoOutput ( ) , equalTo ( true ) )
assertNull ( "State returned is not null" , state )
Assert . assertSame ( sampleHandler , challengeHandler )
assertAllCommandsUsed ( )
assertEquals ( 0 , swapStore . getAll ( ) . size ( ) )
assertThat ( "no issues shall be found in a valid offering" , validation . pass ( Report . WITHOUT_WARNING ) )
assertThat ( result , is ( packetStatus ) )
assertEquals ( expected , actual )
assertThat ( location , is ( "sut" ) )
assertTrue ( text . matches ( "(?s).*<script.*alert\\\\(\\\\'cc\\\\'\\\\);.*</script.*" ) )
assertArrayEquals ( new String [ 0 ] , args )
assertTrue ( interval . isEmpty ( ) )
assertEquals ( expected , actual , delta )
assertThat ( "to string start with BshClassPath" , bcp . toString ( ) , startsWith ( "BshClassPath" ) )
Assert . assertTrue ( response . contains ( blogTitle ) )
assertEquals ( ctxVars . get ( "in" ) , node . getDictionary ( ) . findValuesByID ( "in" ) . getValue ( ) )
assertStat ( result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( found )
assertSame ( m , support . convert ( m ) )
assertEquals ( DecodeQualification . INTENDED , plugIn . getDecodeQualification ( path ) )
assertEquals ( ints , ints2 )
assertEqual ( "1" , query . execute ( ) )
assertTrue ( fs . exists ( PathUtils . concatPath ( ufsRoot , "a" ) ) )
Assert . assertEquals ( expected1 , predicted )
assertEquals ( vutValue1 , KeyValueStoreRW . get ( vutDiv , vutKey1 ) )
assertNotNull ( ShortCode . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertNotNull ( Config . get ( request . getSession ( ) , Config . FMT_LOCALE ) )
Assert . assertEquals ( "ListSheets" , sheets . getData ( ) . get ( 0 ) . getName ( ) )
assertEquals ( previous , size )
assertEquals ( expected , d_smd . getCohenD ( ) , 0.0001 )
Assert . assertEquals ( expResult , result )
assertEquals ( "MD5sum is not correct" , checksum , checksum )
assertThat ( attributeValueNs , is ( "CanHazExtendedWings" ) )
assertPlaces ( places )
Assert . assertEquals ( "{var}" , e . toString ( ) )
assertThat ( s , is ( not ( nullValue ( ) ) ) )
assertThat ( sampledValue . getContext ( ) , equalTo ( readingContext ) )
assertEquals ( expected , actual )
assertEquals ( testString , avroField . convertToKettleValue ( map , schema , mock ( Schema . class ) , false ) )
Assert . assertEquals ( "\\"etag\\"" , result . getFirstHeader ( "ETag" ) . getValue ( ) )
assertThat ( builder . getPatches ( ) , arrayWithSize ( 0 ) )
assertEquals ( "bar : {\\n" + "  \\"foo\\" : {\\n" + "    \\"text\\" : \\"Hello
Assert . assertEquals ( dataHoraProcessamento , retornoConsultaCadastroDados . getDataHoraProcessamento ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 0 , testMojo . getProgramArgs ( ) . size ( ) )
assertTrue ( validator . validate ( EntityNames . STUDENT_SECTION_ASSOCIATION , associations ) . equals ( associations ) )
assertTrue ( StreamUtils . compareCharStreams ( "<shopping>\\n" + "    <category type=\\"groceries\\"><item>Chocolate</item><item>Coffee</item></category>\\n" + "   <category type=\\"supplies\\"><item when=\\"Aug 10\\">Kathryn's Birthday</item></category>\\n" + "   <category type=\\"present\\"><item when=\\"Aug 10\\">Kathryn's Birthday</item></category>\\n" + "</shopping>" , result . getResult ( ) ) )
assertEquals ( 2 , numberUsersWithPreference )
assertEquals ( size , valueModel . size ( ) )
assertEquals ( expected , pu . getCharsetProperty ( "sun.stderr.encoding" ) )
Assert . assertEquals ( 1 , rs . getInt ( 1 ) )
assertEquals ( "abc\\n" , found )
Assert . assertEquals ( jdkHands , acHands )
assertTreeEquals ( top , result )
assertEquals ( "A" , output )
assertEquals ( "void dest7(int, @A @B @C int, @B @C @D int, @C @D @E int)" , toString ( dest ) )
assertTrue ( handler instanceof DisruptorBasedRelatedContentSearchRequestProcessorHandler )
Assert . assertTrue ( tempFontFile . exists ( ) )
assertResultSet ( res )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertThat ( testSupport . getNumCalls ( ) , equalTo ( 0 ) )
assertTrue ( data . getDatacentre ( null ) == null )
context . assertTrue ( ex instanceof QueryExecutionException )
assertTrue ( result . getException ( ) instanceof FlowExecutionException )
Assert . assertEquals ( 0 , norm , 6.0e-13 )
assertEquals ( endingDateTime , topic . getPoll ( ) . getEndingDate ( ) )
Assert . assertEquals ( "3 渭萎谓蔚� 伪�� ���伪" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertTrue ( translator . isMethodSupported ( "refreshAuthorizationPolicy" ) )
Assert . fail ( "'MustUnderstand headers' exception should be thrown." )
assertEquals ( "Wrong index" , 1 , handler . indexOfChild ( parent , child ) )
assertThat ( domain . getSpec ( ) . isLogHomeEnabled ( ) , is ( false ) )
assertTrue ( errorsContainer . equals ( errors ) )
assertTrue ( "static Base64.encodeBase64Chunked() test-" + i , b )
assertEquals ( expectedLayer , actualLayer )
assertFalse ( victim . accept ( request ) )
assertThat ( result , is ( new String [ ] [ ] { { "Hello, world!" } } ) )
assertEquals ( TEST_CLUSTER_NAME , hadoopFileOutputMeta . getNamedClusterURLMapping ( ) . get ( TEST_CLUSTER_NAME ) )
assertEquals ( key . length , Sodium . crypto_aead_xchacha20poly1305_ietf_keybytes ( ) )
assertEquals ( "a,b,c" , actual )
assertThat ( ruleManager . getAllGlobalsOfType ( "java.util.Random" ) , hasItems ( "bla1" , "bla2" ) )
assertEquals ( fullName , Util . stripFileExtension ( fullName ) )
assertThat ( codedTextVOs , hasSize ( 1 ) )
assertTrue ( futures [ 0 ] . isWritten ( ) )
assertFalse ( actualAfterProcess . equals ( expectedAfterProcess ) , "Values which seems to be encoded should not be decoded." )
assertEquals ( update , before )
assertEquals ( childName , mappedStart . getTo ( ) )
assertThat ( true , equalTo ( result ) )
Assert . assertNotNull ( clientLayers )
assertEquals ( "validating the bean" , obj , new TestBean ( ) )
assertEquals ( "79S54kzisD_9SOTfqlu_0TVQSpY/mYlS4-ghMGhc1wTFCwoQl3IYDZc\\\\\\"\\",\\"pageInfo\\": { \\"totalResults\\": 1, \\"resultsPerPage\\": 1 }, \\"items\\": [ { \\"kind\\": \\"youtube#video\\", \\"etag\\": \\"\\\\\\"79S54kzisD_9SOTfQLu_0TVQSpY/A4foLs-VO317Po_ulY6b5mSimZA\\\\\\"\\", \\"id\\": \\"wHkPb68dxEw\\", \\"statistics\\": { \\"viewCount\\": \\"9211\\", \\"likeCount\\": \\"79\\", \\"dislikeCount\\": \\"11\\", \\"commentCount\\": \\"29\\" } } ]" , output . toString ( ) )
assertTrue ( namedCluster == namedClusterManager . read ( edit , metaStore ) )
assertEquals ( "http://example.com/fhir/?name=james" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertEquals ( offset , kv . getOffset ( ) )
assertFalse ( result . passedValidation ( ) )
assertNotNull ( injector )
assertEquals ( BASE_URI + "users/2" , newUserLocation . toString ( ) )
Assert . assertEquals ( userRepo , settings . getLocalRepository ( ) )
assertEquals ( parent . models . size ( ) , 1 )
assertEquals ( 1 , permCheck . solution ( array ) )
assertTrue ( "Expected that the user didn't start with '" + keyTabKey + "'" , gotException )
Assert . assertEquals ( "anonymous" , echoValue )
assertEquals ( 2 , pResult . getValues ( ) . size ( ) )
assertFalse ( result )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
assertEquals ( "unexpected errors: " + equeue , 0 , equeue . errors . size ( ) )
assertFalse ( panelManager . mapPanelDefinitionToPresenter . containsKey ( customPanel ) )
assertTrue ( "inner transaction must be able to update outer transaction state" , flag )
assertTrue ( victim . find ( ) . isEmpty ( ) )
assertEquals ( "helloWorld" , result )
assertEquals ( "Rule parameter 'MyRule' is not found in rules" , "Rule" , getLastStringValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( "Index is 3" , 3 , _index . intValue ( ) )
assertEquals ( "Otp is not valid" , otp , Util . unprintOTP ( otp ) )
assertFalse ( mockListener . propertyChangedFired )
Assert . assertFalse ( context . getResult ( ) )
Assert . assertEquals ( altDate , gx . getAlternateDate ( ) )
assertSelectResults ( results , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 38 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 70 , 70 , 71 , 70 , 70 , 70 , 71 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 ,
Assert . assertEquals ( new Long ( "20100103000000" ) , result )
assertEquals ( "Wrong text search result" , "Hello World!" , s . getTextSearchConfig ( ) . getTextSearchOperand ( ) )
assertEquals ( "unable to fetch rule by name" , mock , rs . getRuleByName ( "name" ) )
assertThat ( action . remove ( server ) , is ( true ) )
assertThat ( sshKey , is ( equalTo ( sshKey ) ) )
assertEquals ( "Dest should have zero copies" , new FourLongs ( 0 , 0 , 0 , 0 ) , dest )
assertThat ( HiveCliEmulator . INSTANCE . preProcessor ( ) . script ( hiveSql ) , is ( "set x=1;" ) )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( ( a , b ) -> x + a + b ) . intValue ( ) )
assertEquals ( firstInvocation , secondInvocation )
assertEquals ( 3 , adaptiveGrid . occupiedHypercubes ( ) )
assertNull ( edmProvider . getEntityContainerInfo ( new FullQualifiedName ( "Test.Null.entity" ) ) )
Assert . assertEquals ( 27. , analyser . getDistanceAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
Assert . assertEquals ( "That monkey." , this . realiser . realiseSentence ( sentence_1 ) )
assertEquals ( asList ( sampleShortAlbum , aLoveSupreme ) , result )
assertTrue ( "unknown ID should have no class" , classdb . getClass ( "id1" ) . isEmpty ( ) )
assertThat ( argument . getValue ( ) . getName ( ) , is ( "step_with_parameters: <span class='step-parameter'>Joe, 10</span>" ) )
assertEquals ( 500 , filter . getWarningCount ( ) )
assertTrue ( FileUtil . gitDirectoriesAreEqual ( getResource ( "/canCloneARepository/state/testproj" ) , testprojDir . toPath ( ) ) )
assertEquals ( id , cache . getId ( ) )
assertThat ( ( String ) FieldAccessUtil . getFieldVal ( interceptor , "profile" ) , is ( "testProf" ) )
assertEquals ( "result10" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertEquals ( myByte , crudService . getByte ( index ) )
context . assertIsSatisfied ( )
assertEquals ( element . getSkipLines ( ) , skipLines )
assertEquals ( "foo:1,bar:3,intArray:1,intArray:2,intArray:3,intArray:4,intArray:5,intArray:6,intArray:7,intArray:8,intArray:9,intArray:10,intArray:11,intArray:12,intArray:13,intArray:14,intArray:15,intArray:16,intArray:19,intArray:20,intArray:21,intArray:22,intArray:23,intArray:24,intArray:25,intArray:26,intArray:29,intArray:30,intArray:31,intArray:32,intArray:33,intArray:34,intArray:35,intArray:36,intArray:38,intArray:39,intArray:40,intArray:40,intArray:41,intArray:42,intArray:43,intArray:44,intArray:50,intArray:51,intArray:52,intArray:53,intArray:54,intArray:55,intArray:56,intArray:56,intArray:59,intArray:60,intArray:61,intArray:62,intArray:63,intArray:68,intArray:69,intArray:70,intArray:71,intArray:72,intArray:73,intArray:74,intArray:75,intArray:76,intArray:77,intArray:78,intArray:79,intArray:80,intArray:81,intArray:82,intArray:83,intArray:84,intArray:85,intArray:86,intArray:87,intArray:88,intArray:89,intArray:90,intArray:91,intArray:92,intArray:93,intArray:94,intArray:95,intArray:96,intArray:98,intArray:99,intArray:100,intArray:101,intArray:122,intArray:104,intArray:122,intArray:104,intArray:122,intArray:104,intArray:122,intArray:122,intArray:122,intArray:122,intArray:122,intArray:122,intArray:122,intArray:122
assertEquals ( 1 , list . size ( ) )
assertEquals ( expected , elements )
Assert . assertEquals ( codigoStatus , eventoRetorno . getCodigoStatus ( ) , 0 )
Assert . assertTrue ( myRecordV3 . equals ( result ) )
assertEquals ( 2 , bucket . getTotalTokens ( ) )
assertEquals ( "on failure" , pp . getValue ( ) )
assertEquals ( "payload size" , 156 , payload . size ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( mockResponse , testResponse )
Assert . assertEquals ( key1 , key2 )
assertEquals ( "Person" , query . getName ( ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
Assert . assertFalse ( isActive )
assertions . isNotGreaterThan ( expected )
assertEquals ( crossoverProbability , ( Double ) ReflectionTestUtils . getField ( crossover , "crossoverProbability" ) , EPSILON )
assertEquals ( response . headers ( "foo" , "bar" ) , ImmutableMap . of ( "foo" , "bar" ) )
assertNotNull ( resp )
assertEquals ( 4 * diffusioncoefficient * timelag , res , 0.01 )
assertFalse ( matcher . matches ( mockElement ) )
TestCase . assertTrue ( result )
assertNull ( position )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( expected , actual )
assertTrue ( Arrays . equals ( password , entity . getPassword ( ) ) )
Assert . assertTrue ( 65535.65535f == _c . convert ( "65535.65535" ) )
assertEquals ( "country:varchar(0),country:varchar(1)" , PigUtility . getColumns ( writable ) )
Assert . assertEquals ( "[\\"bob\\"]" , writer . toString ( ) )
Assert . assertEquals ( 0 , a . rank ( ) )
Assert . assertEquals ( " SELECT id, name FROM  t_pet pet  " , sql )
assertThat ( exit , is ( 1 ) )
assertEquals ( cg , objectMapper . readTree ( json ) )
assertEquals ( 2015 , CalendarUtils . get ( midJune , Calendar . YEAR ) )
assertEquals ( 1 , searcher . search ( query , 100 ) . totalHits )
assertThat ( request . getStatus ( ) , is ( chargePointStatus ) )
assertThat ( target , is ( notNullValue ( ) ) )
Assert . assertFalse ( CompareUtil . compareArraysAndNull ( instance , copy ) )
assertTrue ( fired [ 0 ] )
assertTrue ( alice . out ( "friend" ) . toList ( ) . isEmpty ( ) )
assertEquals ( key , PathElement . valueOf ( pathElement ) )
assertThat ( ( Float ) converter . convert ( formattedValue , float . class , bundle ) , is ( equalTo ( theValue ) ) )
assertSame ( error , stream . getError ( ) )
assertEquals ( ( double ) 8 , result . getDoubleValue ( ) , 0.0 )
assertEquals ( dynamicProperties , provider . getProperties ( ) )
assertEquals ( "The case instances count is wrong" , numberOfItems , caseClient . getCaseInstancesByDataPagination ( dataEntryName , dataEntryValue ) . size ( ) )
assertTrue ( response != null && CollectionUtils . isEmpty ( response . getObservations ( ) ) )
assertEquals ( content , descriptor )
assertEquals ( 2 , list . size ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertScore ( serviceDocumentRenderer , AbstractRenderer . MAXIMUM_FORMAT_SCORE )
assertEquals ( 0 , analysis . getMessages ( ) . size ( ) )
assertThat ( getBranchInstrumentor ( ) . getLinePosition ( gtNode ) , equalTo ( 4 ) )
assertTrue ( root . getChildren ( ) . isEmpty ( ) )
Assert . assertEquals ( 0 , list . size ( ) )
assertEquals ( expected , actual )
assertThat ( serverSocket . isBound ( ) , is ( true ) )
assertSame ( expectedOutput , result )
assertEquals ( generatedJavascript , expectedJavascript )
TestUtil . assertEquals ( exp , getSpans ( ) )
Assert . assertSame ( component , table . getHeader ( ) )
assertEquals ( new ModelId ( "Test" , "com.Test" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertNotNull ( statement )
assertFalse ( skills . containsSkill ( "skill1" ) )
Assert . assertTrue ( "The file" + fileName + " doesn't contain expected content." , checkFileContains ( path , "Release: " ) )
assertNotNull ( food )
assertStatementCanBeDeparsedAs ( select , statement )
assertEquals ( relative , da . getDocType ( ) )
assertNotNull ( rs )
Assert . assertEquals ( "FROM Person T0 WHERE (T0.birthday IS NULL)" , query . toQuery ( ) )
arrays . assertStartsWith ( description , null , sequence )
Assert . assertFalse ( verifyTest ( builder ) )
assertNull ( ServiceProviders . load ( ServiceProvidersTestAbstractProvider . class , NO_HARDCODED , ccl , ACCESSOR ) )
assertEquals ( 20 , impl . getMax ( 50 ) )
assertThat ( target . getData ( ) , is ( value ) )
assertEquals ( expected . trim ( ) , output . trim ( ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-3 )
assertArrayEquals ( bytes , field . getBytes ( ) )
assertEquals ( "name cannot be null" , AzureStorageConnectionEditWizardDefinition . NODE_WIZARD_NAME , name )
assertNotNull ( mpd . getMusicDatabase ( ) )
assertTrue ( "equals(null)" , a1 . equals ( a2 ) )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( previousUsername , getAttribute ( "j_username" ) )
Assert . assertEquals ( 0 , sc . getAttribute ( "use-persistence-mechanism" ) )
assertNull ( target . getReferenceField ( ) )
assertEquals ( "https://us-phoenix-1.oci.oracle.com/objectstorage/us-phoenix-1.oci?secondLevelDomain=oraclecloud.com" , endpoint )
assertThat ( repairedRepositories , containsInAnyOrder ( npmHostedRepository , npmProxyRepository , npmGroup , nonNpmFormat ) )
Assert . assertEquals ( dRequest , eRequest )
assertMaps ( new HashMap < String , String > ( ) , pairs )
assertEquals ( reader , readerResult )
Assert . assertTrue ( allowedCRUDL )
Assert . assertTrue ( fielderror . getFieldError ( ) . getErrorCode ( ) == ErrorCode . MAX_LENGTH_OF_FIELD )
assertEquals ( 2.0d , e . evaluate ( ) , 0.0 )
assertEquals ( 1 , routingResult . getRouteHandlerMatches ( ) . size ( ) )
assertSame ( tt2 , tt )
assertEquals ( "Common exception" , ms . getText ( ) )
assertTrue ( isBundle )
assertEquals ( mclass . toString ( ) , 0.0 , ref3 . minus ( m3 ) . getRMS ( ) , TOLERANCE )
assertEquals ( agentFcd2 . sinkConfig , ans2 )
assertFalse ( MethodChecksUtils . hasTestMethodKeyword ( parentNode ) )
assertEquals ( true , result )
Assert . assertNotNull ( entity )
Assert . assertEquals ( "rows in db" , 10 , outputOperator . getNumOfEventsInStore ( ) )
assertEquals ( timestamp , point . getTimestamp ( ) )
assertTrue ( "Precedence rules violated" , content . getContent ( ) . indexOf ( "default1osml2inline3external4" ) > 0 )
Assert . fail ( "Expected WSSecurityException is not thrown " )
assertTrue ( "header size must be > 0" , xTable . getTableHeader ( ) . getPreferredSize ( ) . width > 0 )
assertEquals ( "n-li" , objectMetadata . getFirst ( "n-li" ) )
assertStatus ( 2 , expectedNumRows , expectedNumBytes , expectedReadBytes )
Assert . assertEquals ( "[{\\"type\\":\\"dynamic\\",\\"name\\":\\"Java\\",\\"url\\":\\"https://www.java.com\\"}]" , result )
Assert . assertEquals ( 0 , resultList . size ( ) )
Assert . assertEquals ( expResult , result )
Assert . assertTrue ( "There should be no missing language tags" , englishTagFound )
Assert . assertEquals ( this . list1Realisation , realised . getRealisation ( ) )
assertThat ( result . properties ( ) . size ( ) , is ( 0 ) )
assertEquals ( expected , actual )
assertEquals ( "straks" , t . format ( new Date ( 6000 ) ) )
assertFalse ( x . isEq ( y ) )
assertEquals ( "Start console" , true , config . startConsole ( ) )
assertEquals ( "5" , customDecimalFormat . format ( 5L ) . toString ( ) )
assertValidEntity ( task )
assertEquals ( "\\"collection@" + pcollectionImpl . hashCode ( ) + "@" + jobPrototype . hashCode ( ) + "\\" [label=\\"collection 0.49 Mb\\" shape=box];" , dotfileWriter . formatPCollectionNodeDeclaration ( pcollectionImpl , jobPrototype ) )
assertTrue ( store . confirmToken ( TEST_USERNAME , TEST_TOKEN ) )
assertEquals ( 1 , x . size ( ) )
assertTrue ( binary . exists ( ) )
Assert . assertEquals ( 1 , a . getCbo ( ) )
assertFalse ( result )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( 0 , tasks . size ( ) )
assertFalse ( connectFuture . isConnected ( ) )
assertEquals ( new Customer ( "Person" , new BigDecimal ( 100 ) ) , customer )
assertEquals ( sprinkler , sprinkler2 )
assertEquals ( 7 , termCount )
assertImmutableList ( components )
assertFalse ( results . hasNext ( ) )
Assert . assertEquals ( "澶�����璇�锛�" , sqltrue , sqlnew )
assertEquals ( "Expected 0 results!" , 0 , count )
Assert . assertEquals ( "There should be only 1 difference between the two SIGMA atoms" , 1 , withoutSH , 1E-6 )
assertNull ( item . getList ( ) )
assertEquals ( "true" , a . get ( "outro atributo" ) )
assertEquals ( "GET&http%3A%2F%2Fexample.com%2F&a%3D1&a[]%2B1" , sbs . generate ( ) )
assertFalse ( "Cache believes cache is up to date when a classpath file changed" , reloadedCache . isUpToDate ( sourceFile ) )
assertEquals ( "
assertEquals ( object , fromJson )
assertEquals ( redirectUrl , "redirect:/topics/ recent" )
assertFalse ( strategy . isActive ( state , user ) )
assertEqualsIgnoreWhitespace ( expected , drl )
assertEquals ( move , move )
assertEquals ( expected , actual )
assertEquals ( "One folder" , 1 , holder . sourcePath . size ( ) )
assertEquals ( seconds , item . getSeconds ( ) )
assertTrue ( "Cache believes a known, changed file is up to date" , cache . isUpToDate ( sourceFile ) )
assertEquals ( 1 , result . size ( ) )
assertTrue ( thrown )
assertEquals ( "new commit" , payload . getCommitMessage ( ) )
assertTrue ( res )
assertTrue ( pass )
Assert . assertTrue ( "query should be filled in but was size " + queryFederation . size ( ) , queryFederation . size ( ) == 483 )
assertArrayEquals ( data , ( long [ ] ) deserialize . readObject ( ) )
assertNull ( Deencapsulation . getField ( deviceRegistrationState , "lastUpdatedDateTimeUtcDate" ) )
assertEquals ( "barpod" , service . getName ( ) )
assertThat ( writer . toString ( ) , equalTo ( "{\\"queries\\":[{\\"name\\":\\"group1\\",\\"tags\\":{\\"tag1\\":[\\"tag1Value\\"],\\"tag2\\":[\\"tag2Value\\"]},\\"values\\":[{\\"name\\":\\"group2\\",\\"tags\\":{\\"tag1\\":[\\"tag1Value\\"],\\"tag2\\":[\\"tag2Value\\"]},\\"values\\":[{\\"name\\":\\"group3\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group4\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group5\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group6\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group7\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group8\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group9\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group10\\",\\"tags\\":{\\"tag1\\":[\\"tag2Value\\"],\\"tag2\\":[\\"tag2Value\\"]}]},{\\"name\\":\\"group11\\",\\"tags
assertThat ( bodyWriter . getValue ( ) . objectsWriter , instanceOf ( ObjectsStreamPDFBodyObjectsWriter . class ) )
assertEquals ( mockedProvisioningConnectionString , resultConnectionString )
assertEquals ( "123" , b64 . encode ( "123" ) )
assertEquals ( networkView , ev3 . getSource ( ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertFalse ( result )
assertFalse ( result . passedValidation ( ) )
assertEquals ( "CycleItselfInArr[c=CycleItselfInArr@" + identityHashCode ( value ) + "]" , logAdapter . asString ( value ) )
assertEquals ( "Should get the getter" , getterMethodName , method . getReturnType ( ) . getName ( ) )
Assert . assertEquals ( 1 , routes . size ( ) )
assertEquals ( one , two )
assertEquals ( "Hello" , captured . getHeader ( "Authorization" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff45_" ) )
assertEquals ( expected , actualQuery )
assertEquals ( "Call count stability check." , "{getItemCount=1, getItems=6}" , service . callCounter . toString ( ) )
assertOut ( "this[\\"knownMember\\"]" )
descriptor . assertValid ( )
response . then ( ) . log ( ) . ifValidationFails ( ) . assertThat ( )
assertThat ( ids , is ( empty ( ) ) )
assertSame ( "base" , res )
assertNotNull ( target )
assertFalse ( ( Boolean ) result . get ( "successful" ) )
assertEquals ( "Mismatched detection value" , expected , actual )
Assert . assertTrue ( "Should be displaying the dialog" , driver . getPageSource ( ) . contains ( expectedText ) )
Assert . assertEquals ( MEDITECHHandler . formatDateTime ( getElement ( "MSH.6" ) ) , handler . getMsgDate ( ) )
Assert . assertNotNull ( schema )
assertSearchYields ( fooIndex , "foo:aaa" , "foo" )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/app/test_app/sandbox" ) , is ( "true" ) )
Assert . assertEquals ( expected , component )
assertNotNullOrEmpty ( "Questions should never be null." , questions )
assertEquals ( Arrays . asList ( "hdfs://hostname.test.com:8020/user/hive/warehouse/break/b=all | ' & the spaces/c=in PartKeys/With fun chars |%
Assert . assertNull ( printCircular . printCircular ( array ) )
Assert . assertTrue ( ( scopePath . findScopeByName ( TestConfigurationScopeWithManyProperties . class . getName ( ) ) != null ) && ( scopePath . findScopeByName ( TestConfigurationScopeWithManyProperties . class . getName ( ) ) != null ) && ( scopePath . findScopeByName ( TestConfigurationScopeWithManyProperties . class . getName ( ) ) . containsAllProperties ( properties ) ) )
assertTrue ( extension . isActive ( ) )
assertEquals ( expectedMap , map )
assertEquals ( "[AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClassWithFinal, AClass
assertTrue ( md . isCommitted ( ) )
assertEquals ( NOT_DECODED , color , object . getColor ( ) )
assertEquals ( expResult , result )
assertEquals ( minutes , testResult )
assertEquals ( "Highlightedphrase is not a plain text" , highlightPhrase , "Highlightedphrase is not a plain text" )
assertEquals ( "SpecialApps" , config . getSpecialApps ( ) )
Assert . assertNull ( entity )
assertThat ( ifCounterDataIndexable . matchesPojo ( this . counterData ) , is ( false ) )
assertThat ( steps . getPages ( ) , is ( pages ) )
assertEquals ( "Empty name provided for insert action!" , result . get ( RETURN_RESULT ) )
assertObjectEquals ( "{f1:'f1b'}" , bs . getClassMeta ( B1 . class ) . getExample ( bs ) )
Assert . assertEquals ( "someTableName" , overriddenTableName )
assertEquals ( expResult , result )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Stream>" + "<Parameter name=\\"name\\" value=\\"value\\"/>" + "</Stream>" , elem . toXml ( ) )
assertTrue ( "multiLineSubstitutionFailure3" , "prefix {PI} suffix" . equals ( result ) )
assertThat ( entities . getTotalElements ( ) , equalTo ( 1L ) )
Assert . assertEquals ( "employing" , word . get ( ) )
rule . assertScenarioEnded ( )
Assert . assertEquals ( expected , component )
Assert . assertEquals ( "" , mainAttributes . get ( new Attributes . Name ( "Import-Package" ) ) )
Assert . assertEquals ( 1 , count )
assertFalse ( vs . exists ( ) )
assertEquals ( expectedResp , receivedResp )
assertEquals ( expected , stashes . get ( 0 ) )
assertNotNull ( validator )
Assert . assertTrue ( exceptionMatches )
assertEquals ( "default" , theProperty . getOwner ( ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertEquals ( Lists . newArrayList ( "first" , "second" , "last" ) , getStringsFromElements ( elements ) )
assertTrue ( secondMessageFound )
context . assertIsSatisfied ( )
assertEquals ( "http://example.com" , actual )
arraysWithCustomComparisonStrategy . assertDoesNotContainSubsequence ( someInfo ( ) , actual , subsequence )
assertThat ( xray . getConstructors ( ) , hasSize ( 0 ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( expected , actual )
assertThat ( "getChildCount" , node . getChildCount ( ) , is ( 0 ) )
assertTrue ( gw . lines . isEmpty ( ) )
Assert . assertSame (phenotypeMapping , result . getPhenotypeMapping ( ) )
assertNotNull ( prover )
assertEquals ( "12" , req . getValue ( ) )
assertTrue ( true )
assertTrue (ElectTest . isSuccess (electContext ) )
assertEquals ( result , expecting )
assertEquals ( "Monday" , days . get ( 0 ) )
assertThat ( bodyCapture . getContent ( ) , is ( "0 seconds" ) )
Assert . assertEquals ( clusterTbl . getClusterName ( ) , clusterName )
assertEquals ( "It shall return null value" , CtxNames . VALUE_NULL , name . getValueAsString ( evalCtx ) )
Assert . assertEquals ( tag . getType ( ) , TagType . INT )
assertEquals ( 20 , sum )
assertTrue ( "Same cost solution (2.0 == 2.0) should not be accepted" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 2.0 ) ) )
assertEquals ( 13 , value )
assertEquals ( "34 abc\\n" , found )
assertEquals ( sizeBefore + 1 , dico . size ( ) )
Assert . assertEquals ( Collections . emptyList ( ) , versionProperty . getPropertyNames ( ) )
Assert . assertEquals ( "Wrong result" , extected , actual )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
assertThat ( ste , is ( notNullValue ( ) ) )
assertEquals ( "n ninety-Nine" , actual )
Assert . assertNotNull ( result )
assertThat ( resource , is ( equalTo ( method ) ) )
assertSame ( MyClock . class , ClockFactory . getClock ( ) . getClass ( ) )
assertEquals ( expected , actual )
assertOut ( "\\"\\\\\\\\\\"" )
assertEquals ( "http://example.com/" , con . request ( ) . url ( ) . toExternalForm ( ) )
Assert . assertEquals ( "SELECT DAYOFMONTH('2001-11-00'), MONTH('2005-00-00');" , text )
assertTrue ( "address read from hibernate session factory is 99 Purkynova REDHAT BRNO CZ" , "99 Purkynova REDHAT BRNO CZ" . equals ( st . getAddress ( ) ) )
Assert . assertNotEquals ( "Paths must be different!" , mapOut . getParent ( ) , mapOutIdx . getParent ( ) )
assertMetric ( "mmv.v2.characters[instance_name_over_63_characters_instance_name_over_63_characters_instance]" , is ( "63.0" ) )
assertThat ( metrics . toString ( ) , is ( "mongodb://localhost:8080/db1/collection/collection/collection/collection/collection/collection" ) )
assertEquals ( expectedTouchzs , attributes . getTouchzs ( ) )
assertEquals ( expResult , result )
assertEquals ( "hello world" , s )
Assert . assertEquals ( inet , inet2 )
Assert . assertTrue ( check . equals ( o ) )
assertTrue ( "could not find logging interceptor." , found )
assertTrue ( type . equals ( type2 ) )
assertArrayEquals ( new int [ ] { TokenTypes . ANNOTATION } , tokens )
this . assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher . class ) ) )
assertThat ( getHandlerFieldValue ( ) , nullValue ( ) )
assertNotNull ( loadSyncPoint )
assertThat ( ( String ) commands . get ( asList ( "test" ) ) . getHintField ( ) , is ( "hint" ) )
assertEquals ( ValidateGBIDsEnum . INVALID , GcdUtilities . validateGbids ( invalidGbids , gcdGbId , validGbids ) )
Assert . assertTrue ( "Focus on input must be handled" , getWebXmlRenderer ( textField ) . getFocus ( ) )
assertEquals ( actualAfterProcess , expectedAfterProcess )
assertThat ( FullHalfPair1 . equals ( FullHalfPair2 ) , is ( false ) )
assertThat ( foundItem , is ( this . existingItem ) )
assertNull ( containerRequest . evaluatePreconditions ( now ) )
assertThat ( mockLogger . isLogpCalled ( ) , is ( false ) )
assertThat ( actual , containsInAnyOrder ( expected . toArray ( ) ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( d , result )
assertEquals ( 0 , records . size ( ) )
assertExpectedMinMax ( )
assertTrue ( actual )
Assert . assertThat ( i , is ( 22 ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
Assert . assertEquals ( config . hostListingEnabled , true )
assertEquals ( "Collection<de.test.Company>" , tp . toString ( ) )
assertFalse ( currentData . isPresent ( ) )
Helpers . assertJson ( querySpecification . toJson ( ) , "{\\"query\\":\\"select * from enrollments where validWhere\\"}" )
assertEquals ( 204 , response . statusCode ( ) )
assertSame ( "OutputStream is not set correctly." , outputStream , entrancePi . getOutputStream ( ) )
assertEquals ( 0xffeeddccbbaa0088L , result )
assertEquals ( "abcde" , new String ( out . toByteArray ( ) ) )
assertTrue ( commiters . isEmpty ( ) )
assertEquals ( 1305 , result )
assertTrue ( isEqual ( distance , expected ) )
Assert . assertTrue ( "The re-generated and the read record do not match." , k1 . equals ( k2 ) && v1 . equals ( v2 ) )
assertEquals ( "file:/foo/bar/META-INF/ErraiApp.properties/" , moduleDir )
assertEquals ( "PONG" , response )
assertEquals ( finishedGood_QtyReceived , storage . get ( component_QtyIssued ) )
assertEquals ( true , sut . isMale ( ) )
assertEquals ( "newReservation" , test . getName ( ) )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , SLh_APPID , sessionAppId )
runner . assertTransferCount ( QueryRecord . REL_FAILURE , 1 )
Assert . assertEquals ( "Incorrect empty field returned" , "" , diags . get ( 0 ) . getText ( ) )
assertThat ( newStart , equalTo ( IntraDayDate . endOfDay ( new LocalDate ( 2009 , 1 , 19 ) ) ) )
assertTrue ( fileExists )
assertEquals ( Rect . centeredRect ( 10 , 20 , 30 , 40 ) , g . getBounds ( ) )
assertThat ( isValid , is ( true ) )
assertEquals ( UriStatus . VALID_UNVERSIONED , manager . validateRenderingUri ( uri ) )
assertEquals ( expResult , result )
assertNull ( tuple . getSet ( "field" ) )
assertEquals ( 1 , discovery . getResponse ( ) . getPayloadString ( ) . split ( "\\n" ) . length )
assertEquals ( "scenario name" , runner . getDescription ( ) . getDisplayName ( ) )
assertEquals ( "Response components should be equal to the mocked components" , mockedComponents , responseComponents )
assertEquals ( expected , elements )
assertNotNull ( mqttAsyncClient )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertGoAwayFrame ( frame , lastStreamId , errorCode )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isDebugEnabled ( ) )
Assert . assertNotNull ( factory )
assertEquals ( body . toString ( ) , "error 4 test error" )
assertEquals ( now , queue . peek ( ) . getRequest ( ) )
assertTrue ( writtenCount == TEST_SIZE )
assertRequestDoesNotMatch ( request )
assertEquals ( Status . WARN , jxm . getStatus ( ) )
assertThat ( map . size ( ) , is ( 0 ) )
assertThat ( this . componentUnderTest . isInstalled ( ) , equalTo ( true ) )
TestUtils . assertPropertyChangeEvent ( report , "draggedDistance" , 0 , 0 , 0 )
assertOut ( "a = '' + 2 + '' + '' + '' * 4 " )
Assert . assertThat ( message , containsString ( "contained" ) )
assertThat ( f . getAbsolutePath ( ) , startsWith ( filter . getAbsolutePath ( ) ) )
assertEquals ( State . CHECKED , result )
assertEquals ( 0 , result )
assertThat ( "Uid not found" , mapped , notNullValue ( ) )
assertTrue ( "Should be loaded by the helper class" , helperClass . isAssignableFrom ( testFile . getClass ( ) ) )
assertMapping ( node , 0 , 15 , 0 , 0 , 16 )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( - 1234f , ConfigUtils . getFloat ( config , 0 , "some-number" ) , 0.1f )
assertThat ( optionsByType . get ( Timeout . class ) , is ( timeout ) )
assertEquals ( expectedOpts , javaOpts )
assertEquals ( 0 , historicIncidents )
assertTrue ( result , result . contains ( "\\nfieldName=foo\\nforeign=true\\n" ) )
assertArrayEquals ( expectedFamilies , actual )
assertEquals ( 2 , personName . getPersonId ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertSeen ( visible , s1 , s2 )
assertTrue ( matched )
assertThat ( state . getExcludedScopes ( ) , contains ( Scope . ANY ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 10" ) )
assertEquals ( isTouched , true )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_UPDATE , ScopePathType . ORCID_WORKS_UPDATE , ScopePathType . ORCID_WORKS_CREATE , ScopePathType . FUNDING_UPDATE , ScopePathType . FUNDING_CREATE , ScopePathType . AFFILIATIONS_UPDATE , ScopePathType . AFFILIATIONS_CREATE , ScopePathType . ORCID_PATENTS_CREATE , ScopePathType . ORCID_PATENTS_UPDATE , ScopePathType . PEER_REVIEW_UPDATE , ScopePathType . PEER_REVIEW_CREATE , ScopePathType . ACTIVITIES_UPDATE )
Assert . assertEquals ( "The width of the window is less than the panel's width" , sbWidthStart , sbWidthEnd )
Assert . assertEquals ( 4 , ( ( java . util . concurrent . Callable ) result ) . call ( ) )
assertEquals ( upperLayer , np . getNetworkLayer ( ) )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( "localhost" , DnsNameResolver . maybeChooseServiceConfig ( choice , new Random ( ) , "localhost" ) )
assertEquals ( 1 , TextFileUtils . getAmountOfNewlinesAtFileEnd ( file0 ) )
assertTrue ( "package not build" , new File ( "target/test-classes/test.deb" ) . exists ( ) )
Assert . assertFalse ( res . isPresent ( ) )
assertEquals ( expResult , result )
assertEqualsIgnoreWhitespace ( expected , drl )
assertThat ( count , is ( equalTo ( 1L ) ) )
assertThat ( duration . dividedBy ( 2 ) , equalTo ( TimeDuration . ofSeconds ( - 0.4 ) ) )
assertNotEquals ( oid , ref )
assertEquals ( TargetType . PILLAR_PCRE , target . getType ( ) )
assertEquals ( "Should contain only one path" , 1 , afpChain2 . getPaths ( ) . size ( ) )
assertFalse ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( conf . getRest ( ) . get ( 0 ) . getResource ( ) . get ( 0 ) . getType ( ) . toString ( ) , "Patient" )
Assert . assertEquals ( expectedResult , result )
assertSnake ( "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" )
assertEquals ( expected , arguments . profilers )
Assert . assertEquals ( expected , testIndex . findConc ( "a:[] 'aap' b:[] :: a.word = b.word = b.pos" ) )
assertEquals ( Arrays . asList ( "Div" , "Nom" , "StrMap" ) , ObjectInspector . list ( jmxObject ) )
assertEquals ( "default-duration-format" , task . getDateFormat ( ) . getDefaultDuration ( ) )
assertDtos ( expected , actual )
assertEquals ( ImmutableList . of ( 42.0 , - 5.0 ) , renderNode ( node ) )
assertTrue ( output . contains ( "'TIMEZONE'='GMT+2'" ) )
Assert . assertEquals ( csvString , "\\"col1\\",\\"col2\\",\\"col3\\",\\"col4\\"\\n" )
assertEquals ( "The count of open popups should be one" , 1 , count )
Assert . assertNotNull ( mat )
assertTrue ( entity . getId ( ) > 0L && entity . isAwesome ( ) )
Assert . assertEquals ( b , a . rotate ( ) )
assertTrue ( validator . isValid ( DEFAULT_MIN + ( positiveInteger ( ) + positiveInteger ( ) * + 1 ) , null ) )
Assert . assertEquals ( "/base/group_id/pages/1/page/lang/1" , uri )
assertEquals ( "\\n" + nl + "\\n" , s )
Assert . assertNull ( actualNode )
assertEquals ( "ABC" , d . getValue ( ) )
assertEquals ( "Results were not in the order of the provided keys" , keys . get ( index ) , bytes )
assertEquals ( expected , bos . toString ( ) )
assertTrue ( getString ( sw ) . contains ( needleToFind ) )
assertFalse ( c . remove ( "sadsdf" , null ) )
assertThat ( method . invoke ( obj , "self" ) , is ( ( Object ) "self" ) )
assertEquals ( new String ( Base64 . decodeBase64 ( ANDROID_CONFIG_CONTENT ) , Charsets . UTF_8 ) , content )
assertEquals ( "uses X.Y;\\n" , modelWriter . toString ( ) )
assertEquals ( "Service URL" , availableProperties . get ( Property . SERVICE_URL . name ( ) ) )
GwtAssertions . assertThat ( a )
assertEquals ( "FRED" , s )
assertEquals ( violation . getMessage ( ) , "Message is {escaped}" )
assertTrue ( XMLUnit . compareXML ( result ( "xquery/string-q5.xml" ) , zapResult ) . similar ( ) )
assertEquals ( field . getSqlName ( ) , "Table.Field" )
assertThat ( result , is ( Arrays . asList ( msg1 , msg2 ) ) )
assertTrue ( permissionEvaluator . hasAnyProjectPermission ( authentication , "project" , Permission . EDIT_PAGE ) )
assertArrayEquals ( data , sof )
assertEquals ( 35 , cap . get ( 0 ) )
Assert . assertEquals ( new Long ( 6L ) , sut . execute ( new UsageMetricDailyStreamInfoRequest ( new Date ( ) , streamScopeId ) ) )
assertEquals ( expectedPlan , actualPlan )
assertEquals ( test1 . compareTo ( test2 ) , 0 )
assertEquals ( result , actual )
assertNotNull ( assertionDocument )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( expOut , expShape )
assertEquals ( v21Educations1 , v21Educations2 )
assertArrayEquals ( expectedFamilies , actualFamilies )
assertTrue ( "testGetModelNominalLabelByID" , modelNominalLabelDTO == null )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertFalse ( matches )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "validation on Person properties failed" , 0 , invalidValues . length )
assertNotNull ( logSpy )
assertFalse ( interceptor . isTraced ( request , null , null ) )
assertThat ( violations . size ( ) , is ( 1 ) )
assertEquals ( this . tlv , builder . getVendorInformationTlv ( ) . get ( 0 ) )
assertEquals ( "SELECT \\"INVALID_ROWS_QUERY_ALL\\" FROM PHOENIX_INDEX_SCRUTINY_METADATA WHERE (\\"SOURCE_TABLE\\",\\"TARGET_TABLE\\",\\"SCRUTINY_EXECUTE_TIME\\") IN ((?,?))" , summaryString )
assertThat ( found , notNullValue ( ) )
assertAllGoodAfterRemovePauses ( )
assertTrue ( Cells . isEmpty ( cell ) )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expected , actual )
Assert . assertEquals ( 1 , annots . size ( ) )
assertThat ( output . readKeyValuesToMap ( ) , equalTo ( expectedOutput ) )
Assert . assertTrue ( processor . getSupportedAnnotationTypes ( ) . contains ( AlexaIntentListener . class . getTypeName ( ) ) )
assertThat ( errors , not ( hasFieldErrors ( "familyName" ) ) )
assertEquals ( 0x00FFFF , result . getVoxel ( 0 , 4 , 0 ) , .01 )
assertTrue ( ml . isEmpty ( ) )
assertEquals ( JreVersion . Java_9 , version )
assertThat ( dest . get ( "aaa" ) , is ( "1,000" ) )
assertEquals ( expected , actual )
assertSame ( INITIATIVE_PUBLIC , result )
assertEquals ( "Hello World" , recordListener . getMessage ( ) )
assertTrue ( service . publish ( "message" ) )
assertFalse ( solution . equals ( newSolution ) )
assertFalse ( infoValidator . validate ( info ) )
assertNonLLStar ( g , altsWithRecursion )
assertEquals ( "AddingCommand" , catalog . addCommand ( "Adding" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add" , "com.example.add
assertEquals ( "[= foo]" , m . toString ( ) )
assertTrue ( queue . isEmpty ( ) )
Assert . assertTrue ( written . contains ( "<exclude name=\\"MockRule2\\"" ) )
assertScoreAndParse ( content , null , 2 )
assertFalse ( "Unable to update non existing user" , success )
Assert . assertEquals ( "GET" , s )
assertThat ( WorkflowStatus . statusType ( stageInProgress ) , is ( StatusType . NOT_ built ) )
assertTrue ( BufferedImageComparer . isRGBSimilar ( sourceImage , img ) )
assertTrue ( equals )
assertEquals ( blogObject . getHandle ( ) , handle )
assertThat ( config . getUserAgent ( ) , equalTo ( userAgent ) )
assertThat ( result , is ( "GRS rebuild started" ) )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertThat ( uri , equalTo ( url + "?media=json" ) )
Assert . assertEquals ( icmsSetado , icms . getIcmsst ( ) )
assertEquals ( millis , tracker . getOpened ( ) )
assertEquals ( "Hello ^ there" , ResponseBodyInterpolator . interpolate ( "Hello ^ there" , req ) )
assertThat ( stateStore . size ( ) , equalTo ( 1L ) )
arrays . assertContains ( description , null , 'a' , Index . atIndex ( 0 ) )
assertTrue ( checker . isFormat ( handle ) )
assertEquals ( 2 , lines . size ( ) )
assertEquals ( expected , result )
assertEquals ( 1 , constraintViolations . size ( ) )
assertEquals ( "[1, 2, 3]" , JsonUtil . toJson ( array ) )
Assert . assertEquals ( "Check list should be same" , checkList , CheckAttributeFactory . getCheckList ( ) )
assertLogContains ( "Tests summary: 1 suite, 2 tests" )
assertTrue ( reference instanceof SoftReference )
assertEquals ( asList ( "0" , "1" , "2" , "3" , "4" , "5" , "6" , "7" ) , mp . getParameters ( ) )
assertEquals ( sessionInfo . getIdentity ( ) . getIdentifier ( ) , username )
assertEquals ( "X-NaN-02-01" , dateSortString )
assertEquals ( 1 , result . size ( ) )
assertEquals ( hashCode , "f8f8f8f8" )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertE ( "    " + "    " + "    " + "    " )
assertEquals ( assertion , base )
assertTrue ( cb . isDisplayed ( ) )
assertNull ( event . get ( ) )
assertEquals ( - 10 , testApp . executeApplication ( args ) )
assertTrue ( result . hasErrors ( ) )
assertArrayEquals ( expected . getBytes ( ) , actual )
assertSame ( root , transform ( root ) )
assertEquals ( ImmutableVariantScore . of ( ReadType . REF , 12 ) , SamRecordScoring . getVariantScore ( alt , SNV ) )
Assert . assertEquals ( Arrays . asList ( e , w , b , s , r , e , b , s , r ) , surveyDatumList )
assertEquals ( "true is true" , aviatorBoolean . add ( aviatorString , createEnvWith ( "s" , " is true" ) ) . getValue ( null ) )
assertThat ( "Event did not return correct event type" , listener . getEvents ( ) . get ( 0 ) . getType ( ) , is ( Event . NODE_ADDED ) )
Assert . assertEquals ( numeroControleFCI , produto . getNumeroControleFCI ( ) )
Assert . assertEquals ( Object . class , t . getType ( ) )
assertEquals ( "null" , formatWithNullString . getNullString ( ) )
assertTrue ( propertiesManager . getPropertyChangeListeners ( ) . isEmpty ( ) )
Assert . assertEquals ( entity , getEntity )
assertEquals ( "" , subject . getCurrentState ( ) . getID ( ) )
assertThat ( result , equalTo ( 1 ) )
assertPlanMatches ( expected )
assertThatSql ( query , is ( "SELECT t1.c1, t2.c2 FROM table1 AS t1 INNER JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertTrue ( ix != null )
assertNull ( reconnectCohort )
assertThat ( readElements , is ( new User ( "alex" , "soto" ) ) )
assertEquals ( "Input " + v + " does not match output " + o , v , o )
assertEquals ( command1 . hashCode ( ) , command2 . hashCode ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( 5 , products . size ( ) )
Assert . assertEquals ( expectedJsonString , actualJsonString )
assertEquals ( other , file . getLastModified ( ) )
assertEquals ( 2 , s . getRequiredSkills ( ) . values ( ) . size ( ) )
assertEquals ( "MER_RR__1POBCM20060718_091715_0000012049_00308_22907_0113.N1" , archivePath )
assertEquals ( expectedString1 , expectedString2 )
assertThat ( step . getResult ( ) , is ( TestResult . PENDING ) )
assertThat ( result . toBase64Encode ( ) , is ( "bnVsbDpudWxs" ) )
assertThat ( result , is ( false ) )
assertEquals ( p , diff ( "{a:[1,{b:[]}]}" , p ) )
assertEquals ( "Wrong name" , "UntypedStatistic" , statistic . getName ( ) )
assertTrue ( downloader . waitForReportReady ( ) )
assertTrue ( MessageEntry . class . isInstance ( caughtEntry ) )
runner . assertAllFlowFilesTransferred ( PutSolr . REL_SUCCESS , 1 )
assertEquals ( expected , this . output . toString ( ) )
assertThat ( "Element has uncorrect value." , index . get ( 1L ) , equalTo ( 2L ) )
assertFalse ( messageSent )
assertThat ( hybrid . getMixin ( ) . getUuid ( ) , is ( "hybrid:referenceable" ) )
Assert . assertNotNull ( builderFactory . createArrayBuilder ( ) )
assertEquals ( expected , actual )
Assert . assertFalse ( artifactFilter . match ( getArtifact ( ) ) )
assertEquals ( timeFrameEditor . isFirstMonthAvailable ( ) , false )
assertNotNull ( result )
assertThat ( returned , is ( result ) )
assertTrue ( peerAcceptanceUtil . isPeerInterestedOnRemoteClient ( clientID . getServiceID ( ) ) )
assertEquals ( "Failed Matching" , VersionMatchResult . REJECTED , p . matches ( info ) )
assertEquals ( "MOD_SS_MOD13A2" , typeString )
assertTrue ( hasActivityIn ( solution . getRoutes ( ) . iterator ( ) . next ( ) , "s2" ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
Assert . assertEquals ( actualDependencies , expectedDependencies , "Unexpected dependencies for process: " + outputFeedToTest )
assertEquals ( "Ferdinand is trying to send you the file transfer?" , shadowDialog . getMessage ( ) )
Assert . assertEquals ( "rule-a" , repository . getRoutingRuleId ( ) )
Assert . assertEquals ( "http://example.com/{#foo*}" , template . getTemplate ( ) )
assertThat ( gtx . get ( Hoge . class , hoge . getKey ( ) , 1 ) , is ( notNullValue ( ) ) )
assertThat ( regionalBreweries , hasItems ( containsString ( "Brew" ) , endsWith ( "y" ) ) )
assertTrue ( isPropertyValueSet )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNotNull ( informe . getId ( ) )
assertEquals ( "Expected 0 results!" , 0 , count )
assertTrue ( vRoute . getStart ( ) . getLocation ( ) . getId ( ) . equals ( "start" ) )
assertEcssEquals ( ".menu{left:\\"#{notemptya4jSkin.menu1?'10px':''}\\";}" , convertFragment ( xcss ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( expected , elements )
assertEquals ( Constants . KB , mInfo . getLength ( ) )
assertEquals ( "Java" , orElseFramework . getName ( ) )
assertThat ( result , is ( "http://localhost:8080/test" ) )
assertEquals ( result , one )
assertEquals ( 0 , v . get ( ) . length )
assertEquals ( "7WWD36NF4WCpPaYtK47mM4o0a5CCeOt01JXSuMayv5g" , thumbprint )
assertThat ( pattern . matchAsInclusive ( null , "test.class" ) , is ( true ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "ADMIN_NAME" , "testValue" ) , stringContainsInOrder ( "INTROSPECT_HOME" , "/shared/home/introspection" ) ) )
assertFalse ( sf . getSocketCreated ( ) )
statusChecker . assertContainsMatch ( Status . OK , "File property must be set before any triggeringPolicy " )
assertNotNull ( Country . reader ( ) . read ( ) )
assertNotNull ( session )
Assert . assertNotNull ( object )
assertEquals ( "--index" , expr . getParameterValue ( ) )
Assert . assertEquals ( m2Fields . size ( ) , 1 )
assertEquals ( "testExt" , validExtensionConfiguration . getId ( ) )
assertEquals ( country , request . getVisitorCountry ( ) )
assertTrue ( cleanExit )
assertTrue ( page . asXml ( ) . indexOf ( "body" ) > page . asXml ( ) . indexOf ( "html" ) )
assertEqualDoubleVectors ( X , mo . mean ( X [ 3 ] ) , epsilon )
assertEquals ( expected , actual )
assertThat ( BondBasedConfiguration . configurationOf ( g , 0 , 1 , 2 , 3 ) , is ( Configuration . DoubleBond . TOGETHER ) )
assertEquals ( date . toInstant ( ) , deserializedDate )
assertThat ( resultedQuery , is ( expectedQuery ) )
assertThat ( transitioningEncryptor . checkPassword ( singleCharacterPwd , encryptedPasswordPass1 ) , is ( true ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFInfoEventoCartaCorrecao ( ) . toString ( ) )
assertTrue ( additions . isEmpty ( ) )
assertEquals ( map , map2 )
assertSame ( resolved , this . resolver . resolve ( this . call ) )
assertThat ( g . atom ( 4 ) . label ( ) , is ( "A holo" ) )
assertEquals ( 0 , bite )
assertNotNull ( entities )
Assert . assertNotNull ( geocodingServlet )
assertEquals ( expected , d_riskRatio . getError ( ) , 0.00001 )
assertThat ( this . start . plus ( period ) , is ( this . end ) )
assertTrue ( hasReset )
assertEquals ( TestUtil . HTTP_TEST_PROXY , result . get ( 0 ) )
assertSame ( shouldFind , selection . fileSelects ( By . id ( "test" ) ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "test message action1" , harness1 . getValue ( "test message action1" ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertEquals ( Integer . valueOf ( 7 ) , res . < Integer > get ( "verbose" ) )
assertEquals ( "text/html; charset=UTF-8" , headers . get ( "Content-Type" ) . iterator ( ) . next ( ) )
assertEquals ( "user_id userId,user_name userName,pwd pwd" , t . getColumnsSql ( ) )
assertEquals ( 12800000f , sum , 0.01f )
assertEquals ( buildValue ( i ) , new String ( value . getBytes ( ) , 0 , value . getLength ( ) ) )
assertTrue ( listMultipartFormDataMessageBodyReader . isReadable ( type , genericType , new Annotation [ 0 ] , null ) )
assertEquals ( UNAUTHORIZED_401 , response . getStatus ( ) )
Assert . assertEquals ( value , writeTest ( kernelServices , "max-heap-size" , value ) )
assertEquals ( "failed with seed: " + seed , expected , actual )
assertEquals ( 10d , value )
assertTemplateEvaluatesTo ( "1, 2, 3, 4" )
assertNull ( taskSpec . taskSpec ( inputBlock , outputBlock ) )
assertFalse ( new BytecodeAnnotationBuilder ( true ) . sanityCheckInline ( instrAaload ) )
assertEquals ( 0.5 , comp . compare ( "41.5,27.2" , "41.5127.21" ) )
assertActive ( player1 , player2 , player3 , player4 )
Assert . assertTrue ( "The list is not ordered descending" , sortedAges . equals ( ages ) )
assertEquals ( CallbackType . SEND_PROGRESS , status . getCallbackType ( ) )
Assert . assertNull ( retinaCookieValue )
assertEquals ( Integer . MAX_VALUE , a . getMaxVal ( ) )
assertThat ( result . isEmpty ( ) , is ( true ) )
assertEquals ( expResult , result , 0.0F )
assertEquals ( msg , offlineMsg )
assertions . isNotEqualTo ( actual )
assertTrue ( result )
assertCollection ( collection )
Assert . assertTrue ( result == key )
assertEquals ( 0 , valueModel . size ( ) )
assertTrue ( "Repository should contain newly added statement" , testCon . hasStatement ( bob , name , nameBob , false ) )
assertNotNull ( writer )
assertNull ( loaded )
assertEquals ( "Trailer only present" , new String ( result ) )
assertEquals ( E * E * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertThat ( RpslObjectFilter . diff ( original , updated ) , is ( "@@ -1,4 +1,2 @@\\n" + " mntner:         UPD-MNT\\n" + "-description:           UPD-MNT2\\n" + "-mnt-by:           UPD-MNT\\n" + " source:           TEST\\n" ) )
assertTrue ( filter . allow ( event , listener ) )
Assert . assertEquals ( "SELECT MID(YEARWEEK('2000-01-01'),5, 2);" , text )
assertEquals ( expResult , result )
assertEquals ( expected , stats )
assertEquals ( ValidationResult . Result . OK , vr . getStatus ( ) )
assertSame ( expected , result )
Assert . assertEquals ( 2 , result . size ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 8 )
assertNotNull ( "Sendout is null" , entity )
assertEquals ( "time_coverage_end" , startTime . getAsDateTime ( ) . toString ( ) )
assertTrue ( sink . getTraces ( ) . isEmpty ( ) )
assertThat ( results . subList ( 0 , 5 ) , is ( Arrays . asList ( ProcessHadoopScriptHandler . CLEANUP_STAGE_CLASS , "tbatch" , "tflow" , "texec" , context . getArgumentsAsString ( ) ) ) )
Assert . assertEquals ( THIRTEEN_DOUBLE , pi . getThirteenDouble ( ) )
assertEqualsQL ( Ar , qr . factor ( new DenseMatrix ( Ar ) ) )
assertThat ( definition , is ( notNullValue ( ) ) )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; UUID=<null>\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "\\n" + "
assertNotNull ( oAuth2AccessToken )
Assert . assertEquals ( expectedXML , actualXML )
assertEquals ( 3 , map . size ( ) )
assertEquals ( 2 , deleteFirst . getFirst ( ) . getObject ( ) )
assertThat ( fromType , is ( equalTo ( new QName ( "java:java.lang.String" ) ) ) )
assertNotNull ( waitOn ( browser , 6000 ) . untilRemoved ( By . id ( "wait-if" ) ) )
assertPermanentCount ( playerA , "Harvest Mage" , 1 )
assertRelativeEffectEqual ( expected , actual )
assertEquals ( "foo=bar" , capt . getAllValues ( ) . get ( 0 ) . getFirstHeader ( "Cookie" ) . getValue ( ) )
assertTrue ( violations . hasNext ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "AA 00 02 01 04 01 00 00 00 00" ) , request . serialize ( ) ) )
Assert . assertNull ( foo )
assertThat ( processors , nullValue ( ) )
assertEquals ( "000000000000000000000000000000000000ffff7f000001208d" , Utils . bytesToHexString ( pa . bitcoinSerialize ( ) ) )
Assert . assertEquals ( "https://tfs2013.com:443/" , actual )
assertFalse ( ex . canBeDividedby3 ( "-150333333" ) )
Assert . assertEquals ( expected , tmp . toString ( ) )
assertEquals ( 15 , points )
assertThat ( provider , instanceOf ( AuthSchemeProvider . class ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertTrue ( isValid ( resp , FORMAT_STRING , true , 1 ) , "Response is not valid" )
assertNotNull ( pn )
Assert . fail ( )
assertEquals ( expectedSchema , AvroTypeConverter . convertToAvro ( TalendType . DOUBLE , null ) )
Assert . assertEquals ( 1 , size )
assertTrue ( tickler instanceof LinearGIS ticker )
Assert . assertEquals ( asDTO . getAnalyzedCount ( ) , 500 )
MatcherAssert . assertThat ( new SingleFormLexeme ( dude ) . defaultSpelling ( ) . string ( ) , CoreMatchers . equalTo ( dude ) )
assertEquals ( expected , computed )
Assert . assertEquals ( "SELECT CHARSET('abc');" , text )
Assert . assertEquals ( TestHelper . getPoint ( 30 , 10 , 10 ) , result . getValue ( ) )
assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) 0xd5 , ( byte ) 0xd6 , ( byte ) 0xd7 , ( byte ) 0xd8 } , r ) )
assertTrue ( "Failed to create output stream" , new String ( rbytes , 0 , fileString . length ( ) ) . equals ( "HI" + fileString ) )
assertEquals ( "ABCDEF" , lambda . apply ( 123456789 ) )
assertEquals ( "one/two/three/four/five/six" , facets . get ( 1 ) )
assertEquals ( new Values ( true , null , null , true , true , true , true , true , true , true , true , true , true ) , v )
assertEquals ( "Expected " + expectedQuery1 + " but was " + newQuery , expectedQuery1 , newQuery )
assertNotNull ( result )
assertEquals ( "field.asSet()" , p . toString ( ) )
Assert . assertEquals ( beforeNumTasks , getDefaultQueue ( ) . fetchStatistics ( ) . getNumTasks ( ) )
assertTrue ( d1 instanceof PublicCloneable )
assertThat ( ByteUtil . toPrimitiveByte ( i ) , is ( 1 ) )
Assert . assertTrue ( Math . abs ( vega - vegaFiniteDiffAnalytic ) < 1E-01 )
assertNotNull ( project )
assertEquals ( "" , result )
assertThat ( parents , containsInAnyOrder ( "outer.nested. TwiceNested" , "outer.nested. TwiceNested" ) )
assertTrue ( exceptionThrown )
assertNotNull ( entity . getId ( ) )
assertTrue ( isValid )
assertNull ( found )
assertTrue ( EXPECTED_DS_INDEX_MSG + " instead got " + e . toString ( ) , e instanceof DatastoreNeedIndexException )
AssertionError . fail ( "Expected AssertionError" )
Assert . assertEquals ( null , ( Long ) a . v )
assertThat ( result , equalTo ( v + "-" + s ) )
assertEquals ( "Broager" , result . get ( 0 ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"record\\":{\\"url\\":\\"http://sendme.com/tropo\\",\\"allowSignals\\":[\\"exit\\",\\"stopHold\\"]}}]}" )
Assert . assertEquals ( "password/change/expired" , view )
assertIs ( 14 , count . count ( ) . sum ( ) )
assertTrue ( latch . await ( 5 , SECONDS ) )
assertEquals ( "Count of customer" , 0 , res )
Assert . assertTrue ( this . manager . disconnectAll ( this . person1 ) )
assertEquals ( Property . INSTANCE_SECRET . getDefaultValue ( ) , accClientConf . get ( Property . INSTANCE_SECRET ) )
assertMockEndpointsSatisfied ( )
Assert . assertNull ( result )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "One \\nTwo \\nThree" ) ) )
assertTrue ( kb . hasErrors ( ) )
assertEquals ( redirectUrl , finalRedirectUrl )
assertThat ( authorities , containsInAnyOrder ( WebSecurityConfiguration . ADMIN_GRANT , WebSecurityConfiguration . AUTHENTICATED_GRANT ) )
assertEquals ( filter , testCard . filter ( ) )
assertEquals ( "Latitude is not properly parsed" , 5d , mapper . readLatitude ( columns ) , 0 )
assertThat ( foo . getBar ( ) , sameInstance ( bar ) )
Assert . assertFalse ( types . isEmpty ( ) )
assertThatClassExpressionIsTranslatedAs ( classExpression , initialStateAsserted , expectedPropertyValue )
assertEquals ( null , result )
Assert . assertEquals ( projectorForward . getTranscriptStartingAtCDS ( ) , resultTranscript )
assertTrue ( g1 == g0 )
Assert . assertEquals ( "Hey dude" , one . getContent ( ) )
assertAllTargetsCount ( 0 )
assertEquals ( "brie" , declaration . getFieldValue ( "name" ) )
assertThat ( httpGetRoot . getApiRoot ( ) , is ( notNullValue ( ) ) )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertEquals ( 0 , array . length ( ) )
assertTrue ( "MyApp.app folder is missing in AppstoreUploadFile." , files . length == 1 && files [ 0 ] . getName ( ) . equals ( "MyApp.app" ) )
Assert . assertNull ( obs . getFormFieldPath ( ) )
assertEquals ( "[1080:0:0:0:8:800:200c:417a]:0" , StringUtils . formatSocket ( socket ) )
assertThat ( log , instanceOf ( CommonsLoggingImpl . class ) )
assertNotNull ( "TitlePhotos is empty for " + imdbId , result )
assertEquals ( 1 , found . size ( ) )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertEquals ( "s:test" , out )
assertEquals ( expectedJson , actualJsonCode )
assertEquals ( ChargingCapability . V_240V_3_PHASE_32A , ChargingCapability . fromConnector ( connector ) )
assertOut ( "a.setSeconds(10)" )
assertEquals ( register , newRegister )
assertCSVEquals ( "Incorrect query result" , result , new String [ ] { "s" , "p" , "o" } , new String [ ] { "ex://x> ?o } where { ?s <ex://p> ?o }" , "--format" , "nt" )
Assert . assertEquals ( string , textArray . getString ( 0 ) )
assertEquals ( "{" + newLine ( ) + "    with ($p) { name = \\"Luca\\"; };" + newLine ( ) + "}" , printConstraint ( expression ) )
Assert . assertEquals ( record . get ( "favoriteNumber" ) . toString ( ) , decoded . get ( "favoriteColor" ) . toString ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertNull ( res )
Assert . assertArrayEquals ( cmpAlignAndMeet , outAlignAndMeet )
assertEquals ( "Buffer[size=16]" , buffer . toString ( ) )
Assert . assertEquals ( 6 , count )
assertThat ( mustache . render ( Arrays . EMPTY_OBJECT_ARRAY ) , is ( "label.hello" ) )
assertThat ( damageComponent . getDamage ( ) , IsEqual . equalTo ( 560f ) )
assertRecord ( record )
editor . assertContextualCompletions ( "name: docker-git\\n" + "  - name: $1\\n" + "    release: $2<*>" )
Assert . assertEquals ( "Get what?!?!" , responseResult . getText ( ) )
assertChangeListContains ( ontologyChange )
Assert . assertTrue ( "gpiano3.wav" . equals ( ( ( JsonObject ) ( ( JsonArray ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) ( ( JsonObject ) range ) ) ) ) ) ) . get ( 0 ) ) . get ( "name" ) . getAsString ( ) ) ) )
assertEquals ( expected , actual )
assertNotEquals ( originalEdgeValue . hashCode ( ) , decodedEdgeValue . hashCode ( ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertNotNull ( result )
assertTrue ( rootNode . exists ( ) )
runner . assertValid ( )
assertEquals ( 1 , SubClassOf . subClassOf ( items [ 0 ] ) )
assertThat ( inputsJson , contains ( expectedJson ) )
assertEquals ( expected , actual )
assertEquals ( 1 , search . getSize ( ) )
assertViewName ( mav , "redirect:/topics/1" )
Assert . assertNotEquals ( 0 , first . compareTo ( second ) )
assertThat ( "A wrong password should not be validated" , validateStrongPasswordHash ( wrongPasswd , passwordHash ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertTokenSurfacesEquals ( Arrays . asList ( "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "iPhone4 S" , "
assertThat ( configuration . getThreads ( ) , is ( 7 ) )
assertThat ( ListNumbers . binarySearchValueOrLower ( values , 2 ) , equalTo ( 9 ) )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "messages" ) , "Worked" ) . apply ( driver ) )
assertEquals ( "Drilldown configuration not serialized correctly" , input , outputDrilldown )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertSame ( expr . accept ( visitor ) , visitResult )
assertNull ( d )
Assert . assertNotNull ( info )
Assert . assertEquals ( "Invalid HUs retrieved" , Collections . emptyList ( ) , huSelectModel . createHUQueryBuilder ( ) . setErrorIfNoHUs ( false , null ) . list ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "vtTo" ) )
assertEquals ( "" , result )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( d . doGetFamilies ( ) , containsInAnyOrder ( new DefinitionImpl ( "salesforce" , CommonTags . CLOUD_TAG ) , new DefinitionImpl ( "salesforce" , CommonTags . BUSINESS_TAG ) ) )
assertThat ( control . matches ( "/clients.*" ) , is ( true ) )
MatcherAssert . assertThat ( deps , Matchers . hasToString ( Matchers . containsString ( "junit-dep" ) ) )
assertEquals ( 2 , index . estimateTotalCount ( ) )
assertEquals ( 0 , validate ( os ) )
assertOverflow ( new BigDecimal ( x ) . divide ( new BigDecimal ( y ) ) , result , x / y )
assertResponse ( DataMockery . createOPTIONSResponse ( ) , request )
assertEquals ( "scoreHolder.addSoftConstraintMatch(kcontext, -1)" , marshaledAction )
assertEquals ( result . size ( ) , 2 )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.BarrierOutput" , key1 . toString ( ) )
assertEquals ( 1 , model . getObject ( ) . getPersons ( ) . size ( ) )
assertEquals ( "blue" , proxy . getColor ( ) )
assertThat ( resolved , contains ( "-P" , "a" , "A" , "-P" , "b" , "B" , "-P" , "c" , "C" ) )
assertEquals ( Greeting . howdy , howdy )
assertNotNull ( ui . getErrorFrame ( new JPanel ( ) ) )
assertEquals ( "34 + 2\\n" , found )
assertNull ( item . getItemProperty ( "other1" ) )
assertEquals ( actualCountOfPosts , resultOfGetTopics )
Assert . assertNull ( result )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , ZippelGCD ( a , b ) . monic ( ) )
assertEquals ( false , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertNull ( nullURL )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "p" , URI . class ) ) . and ( binds ( "pLabel" , Literal . class ) ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEqualObjects ( cpuOut . get ( 0 ) , gpuOut . get ( 0 ) )
assertEquals ( "Hallo {0}" , I18N . gettext ( "hello" ) )
assertArrayEquals ( writeBytes , readBytes )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_XML ) . get ( ) . getStatus ( ) )
assertNotNull ( cookieStore )
assertTaskEvents ( task , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_
assertEquals ( meta1 , meta2 )
assertEquals ( "{" + newLine ( ) + "    delete($person);" + newLine ( ) + "}" , printConstraint ( expression ) )
Assert . fail ( "Expected exception to be thrown" )
assertNotNull ( "AO1 not found" , adminObject1 )
Assert . assertEquals ( "a =b,b" , KeyValueFormatter . format ( params , false ) )
assertEquals ( ERROR_FACTORY_RESPONSE , handleResponse )
AvroAssertTestUtil . assertEqualsWithJsonIgnoreOrder ( outputDirPath , jsonOutputFile , DocumentMetadata . class )
assertEquals ( 1 , result . size ( ) )
assertUnion02Delta ( userDeltaUnion )
assertNotEquals ( command , "command" )
Assert . assertEquals ( 2 , terms . size ( ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "Option value" , "simpleValue" , commandLine . getOption ( "simpleOption" ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 , 5 , 6 } , out . read ( queue , e ) . getInts ( ) )
assertEquals ( expected , drugList )
authRule . assertScenario ( scenario )
assertThat ( subject . getAgeOfExactOrNextExistingSerial ( ) , is ( 0L ) )
assertEquals ( "To is not properly parsed" , new Date ( 5 ) , mapper . readTo ( columns ) )
Assert . assertEquals ( 6. , analyser . getDistanceAtActivity ( route . getActivities ( ) . get ( 0 ) , route ) , 0.01 )
assertEquals ( Lists . newArrayList ( 1 ) , listBad )
assertTrue ( e instanceof E_DateTimeTZ )
assertSuccess ( validationResult )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
Assert . assertEquals ( "Hello" , r . get ( String . class ) )
Assert . assertEquals ( "{\\"alice\\":{\\"@xmlns\\":\\"http://some-namespace\\",\\"$\\":\\"bob\\"}}" , result . toString ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertArrayEquals ( new double [ ] { 1d } , StatisticUtils . determineStandardDeviationDoubles ( subSingleBenchmarkResultList , SimpleScore . of ( - 3 ) , subSingleBenchmarkResultList . size ( ) ) , DELTA )
assertEquals ( expected , result )
assertEquals ( expectedOffset , offset )
Assert . assertEquals ( "0" , entregaSemDataDefinida . getTipoPrazoDataEntrega ( ) . getCodigo ( ) )
assertions . containsSequence ( sequence )
assertDateEquals ( new DateTime ( 2013 , 12 , 31 , 0 , 0 , 0 , 0 ) , date )
assertAxisEquals ( - 10.0 , 0.0 , new double [ ] { - 10.0 , - 9.0 , - 8.0 , - 7.0 , - 6.0 , - 5.0 , - 4.0 , - 3.0 , - 2.0 , 0.0 } , new String [ ] { "-10" , "-9" , "-8" , "-7" , "-6" , "-5" , "-4" , "-3" , "-2" , "-1" , "0" } , axis )
assertStatus ( 3 , expectedNumRows , expectedNumBytes , expectedReadBytes )
assertEquals ( OTHER_GRAPHITE_URL , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( childProject1 . getCustomWorkspace ( ) , childWorkspace )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 0 ) ) )
assertEquals ( "" , elem . getText ( ) )
assertThat ( testOutcome . getTestSteps ( ) . get ( 0 ) . getCause ( ) , is ( TestException . class ) )
assertNotNull ( tile )
Assert . assertTrue ( component . isValid ( ) )
assertEquals ( "zookeeper" , args . getZookeeperQuorum ( ) )
Assert . assertNotNull ( "URL not null" , resurl )
assertEquals ( b1 . hashCode ( ) , b2 . hashCode ( ) )
assertEquals ( AuthenticationMechanismOutcome . AUTHENTICATED , outcome )
assertEquals ( "a/b(@a != 123)/c" , SelectorStepBuilder . toString ( steps ) )
assertThat ( expected . getMessage ( ) , startsWith ( "[foo] did not satisfy [" + getClass ( ) . getName ( ) ) )
assertEquals ( user . getUserName ( ) , "admin" )
assertNotNull ( "HousingComplex is null" , entity )
assertEquals ( ref , tokens )
assertEquals ( e1 . evaluate ( new Object ( ) ) , e2 . evaluate ( new Object ( ) ) )
assertEquals ( 0.0f , entry . getEffectiveDurationHours ( ) , Float . MIN_NORMAL )
assertThat ( context , is ( notNullValue ( ) ) )
assertEquals ( ttlInSeconds , actualTtl )
assertEquals ( "Deleted" , files , tableOperations . getAllReplicationSections ( ) )
assertPermanentCount ( playerA , "Gaea's Revenge" , 1 )
assertEquals ( value1 , cache . get ( value2 ) )
assertEquals ( "text/html" , get ( url ) . contentType ( ) )
assertEquals ( 3 , extraArtifactRepositories . size ( ) )
assertTrue ( Arrays . equals ( new int [ ] { - 453549 , 150239 } , coordinate ) )
assertEquals ( 0 , int0 )
assertNotNull ( url . toString ( ) )
assertEquals ( expected , actualQuery )
Assert . assertEquals ( 0.0 , balance , 0.0 )
assertEquals ( "Hello World!" , sample . helloWorld ( ) )
assertThat ( "has foobar" , manager . withFooAccess ( ) . apply ( repo ) , is ( true ) )
assertFalse ( result . passedValidation ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( horizontalRule ) instanceof WHorizontalRuleRenderer )
assertThat ( codes , containsInAnyOrder ( "47239-9" , "47239-9" ) )
assertThat ( exclusions , containsInAnyOrder ( "this key" , "that key" ) )
assertEquals ( content1 , retrievedContent )
assertEquals ( "CN=server,O=OPS4J,C=PL" , server . getName ( ) )
assertEquals ( "aTestString" , classUnderTest . getClientVersion ( ) )
assertTrue ( new File ( "target/packageSuffix/com/querydsl/apt/domain/query/QAnimalTest_Animal.java" ) . exists ( ) )
assertEquals ( BOLD . foreground ( RED ) , style )
Assert . assertEquals ( lineToBeCopied . getActualText ( ) , lineToBeReplaced . getActualText ( ) )
assertEquals ( 4L , analyser . getCommands ( ) . values ( ) . stream ( ) . mapToLong ( c -> c . getNbLocalCmds ( ) ) . sum ( ) )
assertEquals ( new Integer ( 1 ) , cf . getSegmentQuals ( ) )
assertEquals ( format , dateTime )
assertNotNull ( context )
Assert . assertEquals ( 0 , issues . length )
Assert . assertEquals ( user , result )
assertEquals ( "Hello" , message . get ( ) )
assertTrue ( builder . hasWarnings ( ) )
Assert . assertEquals ( "x = " + x , FastMath . sin ( x ) , actual [ i ] , 0.0 )
Assert . fail ( "Should have thrown an exception" )
assertEquals ( Collections . EMPTY_SET , nullFieldProblems )
assertEquals ( times , victim . getTotalResources ( ) )
assertNull ( profile . getTokenExpiration ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 4 , warnings . size ( ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertTrue ( true )
assertEquals ( tft , expected )
assertEquals ( "zero" , actual )
assertNull ( table )
Assert . assertEquals ( expected , actual )
assertSame ( pathMock , context . getPropertyPath ( ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertEquals ( numLines , lines . size ( ) )
assertEquals ( 2 , cache . get ( "a" ) )
assertEquals ( 77 , result )
assertEquals ( 1 , executor . run ( adultUnit ) )
assertFalse ( "Should have failed to create a GroupBy command without a key function." , built )
assertNotNull ( serviceTags )
assertThat ( leftMost , equalTo ( asList ( statefulRegion1 , statefulRegion2 , statefulRegion3 , statefulRegion4 , statefulRegion5 ) ) )
assertArrayEquals ( splitString , testString6ExpectedSplit )
Assert . assertEquals ( "fr-FR" , result )
assertEquals ( 2 , stringTokenizer . count ( ) )
assertThat ( newCode , is ( equalTo ( code ) ) )
assertEquals ( expected , actual )
assertEquals ( DISABLED , status )
assertEquals ( "Created incorrect File " , addTrailingSlash ( tempDirectory . getPath ( ) ) + "canWrite.tst" , f . getPath ( ) )
assertNotNull ( entryRelationship )
assertEqualsIgnoreWhitespace ( expected , drl )
runner . assertNotValid ( )
assertEquals ( expectedXml , actualXml )
assertTrue ( a1 instanceof PublicCloneable )
assertThat ( event . getRecipients ( ) , contains ( shooter ) )
assertThat ( algorithm . computeDigest ( ) , is ( helloWebProtegeDigest ) )
assertEquals ( mockEnc , uit . getEncoder ( ) )
assertArrayEquals ( after , Elements . toInts ( before ) )
assertEquals ( "No test case should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
Assert . assertEquals ( "userName1" , userName )
Assert . assertThat ( rec , Matchers . allOf ( LogMatchers . hasMatchingArguments ( Matchers . hasMatchingArguments ( Matchers . arrayContaining ( Matcher ) Matchers . contains ( "My exception" ) , Matchers . hasMatchingArguments ( Matchers . hasMatchingArguments ( Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) , Matchers . contains ( "My exception" ) ,
assertEquals ( expected , elements )
assertTrue ( in . markSupported ( ) )
assertVariable ( "character_set_client" , "utf8" )
assertNotNull ( entity . getId ( ) )
assertThat ( rendering , is ( "'AB'" ) )
assertThat ( isMismatch , description ( theDescription ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertNotNull ( response )
assertTrue ( passwordEncoder . checkpw ( plaintext , encoded ) )
Assert . assertEquals ( 0 , RequestObjectHelper . getReturnKeys ( json ) . size ( ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class )
assertEquals ( 39 , chargeCount )
assertEquals ( "%s" , instance . formatMessage ( record ) )
assertEquals ( expected , test . adjustInto ( base ) )
assertEquals ( "Free text shall be set to zero" , 0 , drugOrder . getDosingType ( ) )
Assert . assertTrue ( fi1 . sameFormatAs ( fi2 ) )
assertThat ( co . getCachedSize ( ) , is ( actualCachedSize ) )
assertNull ( "Release is null" , latestRelease )
assertSame ( conf , table . getConfiguration ( ) )
assertEquals ( "http://www.w3.org/2000/svg" , ImageIO . read ( fileName ) . getURI ( ) . toASCIIString ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
Assert . assertEquals ( STRING , nextHop . getString ( ) )
assertThat ( errors . getMessages ( ) , empty ( ) )
assertEquals ( 1 , defaultList . size ( ) )
assertEquals ( res [ i ] , v )
assertRowsEqual ( expected , primaryData )
assertEquals ( 61750L , m . getLastMillisecond ( ) )
assertTrue ( instance . getTotalNetworkError ( ) < maxError )
assertSame ( "managed connection must be retrievable after set" , mockManagedConnection , handler . getData ( ) . getManagedConnection ( ) )
assertEquals ( value , ra . get ( ) . get ( ) )
assertThat ( proxyRecipe . isFeatureEnabled ( ) , is ( equalTo ( true ) ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertThat ( chargingProfile . getStackLevel ( ) , equalTo ( zero ) )
assertEquals ( "The zip file should be present" , PATH , this . archiveUtil . getZipFile ( k ) . getAbsolutePath ( ) )
assertEquals ( 0 , hits . totalHits )
assertEquals ( 0 , coverage , 0.0 )
assertNotNull ( entity . getId ( ) )
assertEquals ( violations . size ( ) , 3 )
AssertAnnotations . assertPOS ( posMapped , posOriginal , select ( jcas , POS . class ) )
assertEquals ( i , clone . getRootItems ( ) . get ( i ) . getParent ( ) )
assertTrue ( "Got lookupups" , interpolator . getLookups ( ) . isEmpty ( ) )
assertSame ( ex1 , new CatalogAccessException ( message , cause ) . getCause ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( pis , imposto . getPis ( ) )
assertEquals ( graduate , result )
assertEquals ( byteBuffer0 , byteBuffer1 )
assertEquals ( 71 , pathMap . size ( ) )
assertEquals ( 1 , mailbox . getMessages ( ) . size ( ) )
assertEquals ( "msg" , sut . getMessage ( ) )
assertSequence ( visitor . getNodes ( ) , "a" , "b" , "c" , "d" , "e" )
Assert . assertEquals ( "Hello World" , example . evaluate ( "Hello World" ) )
assertEquals ( asList ( "/root[1]/node[1]" , "/root[1]/node[1]/node[1]" , "/root[1]/nested1[1]" , "/root[1]/nested1[1]/node[1]/node[1]" , "/root[1]/nested1[1]/node[1]/node[1]" , "/root[1]/nested2[1]" , "/root[1]/nested2[1]/node[1]" , "/root[1]/nested2[1]/node[1]" , "/root[1]/nested2[1]/node[1]/xx:node[1]" , "/root[1]/nested2[1]/node[1]/xx:node[1]" ) , xpaths )
assertEquals ( source , builder . getPropertyState ( ) )
assertEquals ( "<div xmlns=\\"http://www.w3.org/1999/xhtml\\">HELLO WORLD</div>" , actual . getText ( ) . getDiv ( ) . getValueAsString ( ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) ReadPreference . PRIMARY ) )
assertTrue ( calledExceptionHandler . isProtectedHandlerCalled ( ) )
assertEquals ( strList , new HashSet < > ( Arrays . asList ( "1" ) ) )
assertEquals ( getJson ( downloadDetails ) , writer . toString ( ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}," + "\\"new Author\\":\\"new Author value\\"},\\"arrayTest\\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
assertSame ( sp , sp2 )
assertThat ( bic1 . hashCode ( ) , is ( not ( equalTo ( bic2 . hashCode ( ) ) ) ) )
Assert . assertTrue ( got . contains ( "Created device: {" ) )
assertThat ( bookRepository . findOne ( id ) , is ( notNullValue ( ) ) )
assertEquals ( expected , contentSummary . toString ( true ) )
assertResultSet ( res )
assertEquals ( 1234 , config . getTimeout ( ) )
assertEquals ( TRANSACTIONTYPE_FAT_MONO , tx . transactionType )
assertEquals ( "nested-query" , link . getQuery ( ) )
Assert . assertTrue ( errors . hasFieldErrors ( "concept" ) )
Assert . assertEquals ( "QueueInfo children weren't properly converted" , returned . getQueueChildren ( ) . size ( ) , 1 )
assertEquals ( dc . getName ( ) , "test" )
Assert . assertEquals ( "\\"SELECT \\n  \\\\\\"mydatabase\\\\\\".\\\\\\"ID1\\\\\\", \\n  \\\\\\"mydatabase\\\\\\".\\\\\\"NAME1\\\\\\"\\nFROM \\\\\\"mydatabase\\\\\\"\\"" , result )
assertTrue ( resMap . getResourcesReader ( ) != null )
assertEquals ( expResult , result )
assertEquals ( "00FF" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertNotNull ( siteInfoData )
assertTrue ( cs . isAccepted ( ) )
assertEquals ( 1 , nbResult ( gg ) )
assertThat ( PathUtil . getRelativePath ( root , child ) , is ( "/a" ) )
assertEquals ( "IDX1" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "Value is not monteCarlo" , deltaAAD , deltaFiniteDifference , 0.01 )
Assert . assertEquals ( "(aa_change_frameshift (aa_point_location (aa_char Ala) 124) (aa_char Thr) fs * 23)" , aa_change_extension . toStringTree ( parser ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( expect , actual )
assertTrue ( String . format ( "Expected error to contain string [%s]. Actual error: %s" , expected , ex . getMessage ( ) ) , ex . getMessage ( ) . contains ( expected ) )
assertThat ( "Failed to list resources: " + result , Operations . isSuccessfulOutcome ( result ) , is ( true ) )
Assert . assertTrue ( edOrgRights . isEmpty ( ) )
assertTrue ( page . getBody ( ) . getTextContent ( ) . contains ( "Hello World!" ) )
assertEquals ( "png" , action . getIconFileName ( ) )
assertEquals ( "authId1" , target . getAuthId ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( date ) , mapper . readBitemporalDate ( columns , "vtFrom" ) )
assertEquals ( "Response Processor " + ( i + 1 ) + " received wrong message content" , "This is the status of /resource" + ( i + 1 ) , coapResponse . getContent ( ) . toString ( Charset . forName ( "UTF-8" ) ) )
assertTrue ( ret )
assertEquals ( "Undo" , defaultDispatchStackEdit . getEditor ( ) . getText ( ) )
assertTrue ( a == b )
assertTrue ( sets . contains ( message2 ) )
assertFalse ( branchFilterByRemote . isLinkedTo ( branch ) )
assertFalse ( definedInContext )
assertEquals ( 0 , artworkList . size ( ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( 42 , impl . getMedian ( ) )
assertThat ( createdPlayer == defensivePlayerWithDjAndJavaDevSkills , is ( true ) )
assertEquals ( "a" , e . getFileName ( ) )
assertEquals ( expected , real )
Assert . assertArrayEquals ( expected , actual )
assertThat ( result , is ( new String [ ] { "FRA-AWS,UAT,FWS" } ) )
assertThat ( entity . getIgnoredObjects ( ) . size ( ) , is ( 0 ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "JaxRs_ParserTestFile" , this . parser . getClassName ( ) )
assertEquals ( expectedScriptNode , actualScriptNode )
assertNull ( childGroup . getID ( ) )
assertEquals ( 0L , result )
assertEqualsIgnoreWhitespace ( expected , real )
assertTrue ( syncClient instanceof ZooKeeperSyncClientImpl )
assertObject ( args )
assertEquals ( "Wrong number of elements in collection" , 2 , pkCollection . size ( ) )
assertTrue ( cache . size ( ) > 0 )
assertEquals ( "1010101" , element . getValueAsString ( ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( 1 , res . join ( ) )
assertEquals ( 1 , result )
Assert . assertFalse ( mPos . has ( e ) )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
Assert . assertEquals ( filterName , victim . getName ( ) )
assertThat ( b . getConsole ( ) , Matchers . containsString ( "Checking out " + svnContainer . getUrlUserPwdSaveRepo ( ) ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<SLAEventBean xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">" + "<event name=\\"sla_status\\">" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</value>" + "<value>true</value>" + "<value>false</
assertThat ( byKey , is ( rpslObject ) )
assertThat ( request . validate ( parameters , "aaa" ) , is ( "Aaa must be a string." ) )
assertEquals ( "{\\"errorMessage\\":\\"User data must contain username field.\\"}" , output )
assertOut ( "<Group id=\\"myGrp\\"><custom:Label /></custom:Group>" )
assertMockEndpointsSatisfied ( )
assertEquals ( 3 , processorsFactory . getPostProcessors ( ) . size ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([0, -30, 0]) (empty)" , ts )
assertTrue ( pos . index == calc . altIndex ( altIndex , pos . tag ) )
assertThat ( output , containsString ( "DICOM store deleted:" ) )
assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
Assert . assertEquals ( Integer . valueOf ( 0 ) , result )
assertEquals ( 1.0 , Evaluator . evaluate ( ex ) )
assertThat ( testValue . keywordName ( TestValueType . AGE ) , equalTo ( "AGE" ) )
assertEquals ( "6.10351563e-003" , victim . readNumber ( ) )
assertEquals ( Joiner . on ( "\\n" ) . join ( expected ) , result )
assertThat ( classes . size ( ) , Matchers . equalTo ( 1 ) )
assertEquals ( ChatState . composing , stateHandler . getLastChatState ( ) )
assertEquals ( expResult , result )
assertThat ( result . getViewExpandedText ( ) , is ( viewOriginalText ) )
Assert . assertEquals ( "FooBar" , resultValue )
Assert . assertEquals ( BitTag . SERVICENET_LB . tagValue ( ) , mappedUsage . getTagsBitmask ( ) )
assertThat ( lines , contains ( "Hello" , "World" ) )
Assert . assertTrue ( getSettings ( ) . getSocketSettings ( ) . getSocketTimeout ( TimeUnit . MILLISECONDS ) == 1100 )
Assert . assertTrue ( testPinpointClient1 . isConnected ( ) )
assertThat ( pyPiRestoreBlobData , is ( notNullValue ( ) ) )
Assert . assertEquals ( jobParams , retrievedParams )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\\"next\\"; method=\\"createThing\\"" , affordance . toString ( ) )
assertThat ( rendered , is ( expected ) )
assertNotNull ( text )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( testneuron3 , lst . get ( 1 ) )
assertNotNull ( "Title Plot is empty for " + imdbId , result )
assertNotNull ( cmd )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertNotNull ( percentage )
assertEquals ( source , result . toString ( ) )
assertEquals ( ImmutableList . of ( metric1 , metric2 ) , serialize )
assertNull ( result )
assertEquals ( "FinalInterval [min=2, max=3, n=13, d=21]" , bounds . toString ( ) )
assertEquals ( port , socket . getReuseAddress ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "http://localhost:8080/events/" + "topic/cg/cid?filter=filter" , url )
assertTrue ( result )
assertEquals ( 2 , totalSchemas )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( textField ) instanceof WTextFieldRenderer )
assertThat ( iterationState . next ( ) . getChangeType ( ) , is ( ASSERTED ) )
assertNotNull ( parser )
authRule . assertScenario ( scenario )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( 3 , Nd4j . getBlasWrapper ( ) . iamax ( linspace ) )
assertEquals ( expResult , result )
Assert . assertNotNull ( c )
assertEquals ( "Best practices" , titles . get ( 0 ) )
assertThat ( MomentInterval . parseISO ( "2012-092T14:15Z/2012-096T16:00" ) , is ( expected ) )
assertEquals ( product , loaded )
assertNotNull ( skuWarehouseDTO )
BeanAssert . assertBeanEquals ( bean , array )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertTrue ( jsonNode . get ( "errors" ) . getArray ( "errors" ) . size ( ) > 0 )
Assert . assertEquals ( 1l , handler . convertIdentifier ( v ) )
assertEquals ( "param=value" , response . getBody ( ) )
assertThat ( anyTS . isValid ( NANO_OF_SECOND , null ) , is ( false ) )
assertEquals ( "ABC" , buf . getPrefixedString ( decoder ) )
assertTrue ( resultComparator . compare ( dc1 , dc2 ) < 0 )
assertEquals ( NO_PARENS_STREET_NAME , step . streetNameNoParens ( ) )
assertThat ( "system-input-def-object.xml" , systemInputDef , matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { assetDocument , "jexlexpression" , "*" , repoToContainedGroupMap } , null ) , is ( true ) )
assertSame ( inputPortBinding , scufl2Tools . processorPortBindingForPort ( port , profile ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( java . util . Calendar . MONDAY , calendar . getInternalCalendar ( ) . getFirstDayOfWeek ( ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Object" ) )
assertTrue ( collector . isFitting ( ) )
assertThat ( specification . getUnits ( ) , is ( MILLI ( SECOND ) ) )
assertThat ( coverArtImageBeanA . getBackImage ( ) , is ( nullValue ( ) ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( componentLinks , application . tenantLinks )
assertEquals ( dynamicRoot , dynamicResult )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
assertFalse ( commandsIterator . hasNext ( ) )
given ( ) . body ( delegate . toString ( ) ) . put ( delegate1 ) . then ( ) . assertThat ( )
assertTrue ( plot . getRangeMarkers ( 99 , Layer . FOREGROUND ) . contains ( yMarker1 ) )
assertThat ( anyTS . isValid ( MICRO_OF_SECOND , 99999999999L ) , is ( true ) )
Assert . assertArrayEquals ( p , VP8Util . predictDC ( above , left , aboveLeft ) )
assertEquals ( "http://127.0.0.1/_all/_count" , search . getURIWithoutIndexAndType ( ElasticsearchVersion . UNKNOWN ) )
assertNotNull ( entity )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertTrue ( Arrays . equals ( result , expectedOutput ) )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( script , observedScript )
assertNotNull ( process )
assertNoSpans ( )
assertEquals ( result , 200 )
assertEquals ( CENSOR_WORDS , client . getStringStack ( ) [ client . getStringStackSize ( ) - 1 ] )
assertThatResultContainsCorrectClassesExactlyInOrder ( result , DataConverterTest . class )
ReaderAssert . assertThat ( ImsCwbReader . class , ImsCwbReader . PARAM_SOURCE_LOCATION , "src/test/resources/tuebadz/corpus-sample.vrt" , ImsCwbReader . PARAM_POS_TAG_SET , "stts" , ImsCwbReader . PARAM_LANGUAGE , "de" )
assertMessage ( "<type>EXITED</type>" , 4 )
assertEquals ( 2 , binaries . getBinaries ( ) . size ( ) )
assertEquals ( actualPage , expectedPage )
Assert . assertEquals ( "Verify same protocol instance was registered" , protocol , protocol . getProtocol ( ) )
assertEquals ( "text/plain" , content )
Assert . assertEquals ( expResult , result , 0.0001 )
assertEquals ( false , result )
Assert . isTrue ( response )
assertEquals ( "The first group on last page is not correct" , FIRST_GROUP_LAST_PAGE , groupsView . getGroups ( ) . get ( 0 ) . getSelectedGroup ( ) )
assertTrue ( items . size ( ) > 0 )
assertEquals ( expectedPath , actualPath )
assertNotNull ( result . getXdmValue ( ) . itemAt ( 0 ) )
assertOut ( "a(b.child)" )
Assert . assertEquals ( 0 , builder . akibanInformationSchema ( ) . validate ( AISValidations . BASIC_VALIDATIONS ) . failures ( ) . size ( ) )
Assert . assertEquals ( 1 , updates . size ( ) )
assertThat ( impl . isPermitted ( "repoName" , "repoFormat" , BreadActions . READ , variableSource ) , is ( false ) )
assertThat ( mdcValueStr , is ( userName ) )
Assert . assertEquals ( HttpStatus . SC_BAD_REQUEST , hubResponseCode )
assertFalse ( glass . accept ( point , WIDTH / 2 - 1 , 1 ) )
assertNotNull ( action . getUser ( ) )
assertEquals ( validationLogic , resourceEditProperty . getValidationLogic ( ) )
Assert . assertEquals ( "Gen.1.1" , unmap ( "Gen.1.1" ) )
assertThat ( result , is ( new String [ ] [ ] { { "c" } } ) )
assertTrue ( comparator instanceof UnsignedByteBuffer . LexicographicalComparatorHolder . PureJavaComparator . INSTANCE )
Assert . assertEquals ( 2 , coveredGoals . size ( ) )
assertTrue ( distributionDetector . detectedDistNames . contains ( "linux" ) )
assertTrue ( result . contains ( PASSWORD ) )
assertEquals ( "/workflow.json" , wf . toString ( ) )
assertEquals ( 1 , count )
assertEquals ( "1. Selected: Item 5" , getLogRow ( 0 ) )
assertTrue ( delete . isSuccess ( ) )
assertThat ( ( Integer ) ms . get ( "aaa" ) , is ( 1 ) )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p %properties %ndc: %m%n" , layout . getConversionPattern ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
Assert . assertTrue ( value > 0 )
assertEquals ( "This is an example of comment" , result )
assertTrue ( shutdown . get ( ) )
assertEquals ( expResult , result )
assertEquals ( "Join_Column_Name" , colName )
assertJsonEqualsWithLinkResolving ( result . getActionResult ( ) , result . getMessages ( ) . values ( ) . iterator ( ) . next ( ) , mqttHelper . getTopic ( entityType , IDS . get ( entityType ) ) )
assertEquals ( "_cat/shards/_all" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertTrue ( "unexpected value" , value )
Assert . assertEquals ( "2017-09-20" , dateStr )
router . assertRoute ( a , b )
assertEquals (207 , testResult . getError ( ) . getCode ( ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
Assert . assertTrue ( this . manager . connectFromAll ( this . family1 , Arrays . asList ( this . person1 , this . person2 , this . person3 ) ) )
assertLHSBindingTypeFor ( DataType . TYPE_STRING , "$f" )
assertTrue ( geoserverCatalog . getCatalogMode ( ) == MIXED )
Assert . assertEquals ( PseudoAuthenticationHandler . class , filter . getAuthenticationHandler ( ) . getClass ( ) )
assertTrue ( "" , types != null && types . size ( ) == 1 && types . contains ( ProfileType . INDUSTRY ) )
assertEquals ( expected , aParameter )
context . assertIsSatisfied ( )
assertEquals ( 0.0 , diff . getValue ( METERS ) , 500 )
assertEquals ( "        _
assertEquals ( expectedParsedResult , actualParsedResult )
assertTrue ( "Empty group" , constraintViolations . size ( ) == 1 )
assertEquals ( "78563412" , value . getDataAsBinaryStr ( ) )
assertThat ( irsApplicable , equalTo ( true ) )
assertEquals ( "b" , PropertyUtils . getProperty ( m , "a" ) )
assertThat ( logRecords , containsInfo ( WLS_HEALTH_READ_FAILED , ADMIN_NAME ) )
Assert . assertEquals ( "Result is not 42" , new Integer ( 42 ) , o )
assertNull ( get . getFirstHeader ( ACCEPT ) )
Assert . assertEquals ( IsolationLevels . READ_COMMITTED , connection . getIsolationLevel ( ) )
assertNull ( this . componentUnderTest . requestTerm ( ) )
assertSameFileContents ( reference , fileResult )
assertEquals ( 0 , reactor . getContainers ( ) . size ( ) )
assertEquals ( expected , sb . toString ( ) )
assertEquals ( expected , this . testee . classNames ( ) )
assertThat ( result . getId ( ) , is ( notNullValue ( ) ) )
assertNotNull ( "Expected a non-null session" , userProvider . getImportSession ( ) )
Assert . assertEquals ( Sets . newHashSet ( 3 ) , parser . getSecureResultIndices ( ) )
Assert . assertEquals ( result , mySketch )
assertFalse ( matchResult )
Assert . assertEquals ( expected , HtmlSanitizerUtil . sanitize ( input ) )
assertEquals ( "select entity_0.code, subEntity_1.name from Entity entity_0 inner join entity_0.subEntities subEntity_1" , select . getQuery ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( "generator-set-0.xml" , generatorSet , is ( expected ) )
assertThat ( dur . with ( Duration . approximateHours ( 24 ) ) , is ( Duration . ofPositive ( ) . years ( 3 ) . months ( 2 ) . days ( 4 ) . build ( ) ) )
assertNull ( uriInfo )
assertEquals ( javaTimestamp , DateTimeUtil . getMonth ( TEST_DATETIME ) )
Assert . assertEquals ( infoManifestacaoDestinatario , infoEventoManifestacaoDestinatario . getManifestacaoDestinatario ( ) )
Assert . assertNull ( getMetric ( ) . calculate ( getSession ( ) ) )
assertEqualHQL ( "allen love dandan" , sb . toString ( ) )
assertResultSet ( res )
Assert . assertEquals ( "some description" , link . getDescription ( ) )
assertEquals ( 1 , dbHandler . getDataElementCount ( ) )
assertTrue ( organisationSupport . validateInproductionMode ( ORGANISATION_KEY , VALID_ORGANISATION_PASSWORD ) )
Assert . assertEquals ( new BigDecimal ( "12.3456" ) , value )
Assert . assertNotNull ( asientoRecibido )
assertTrue ( test . entry . isEmpty ( ) )
assertThat ( clientBackend . get ( HelloWorldTestService . TEST_KEY ) , is ( "accepted" ) )
assertTrue ( r . isResourceType ( DefaultResourceTypeDefinition . NODE ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , m . selectVariant ( list ) . size ( ) )
assertEquals ( aNumber , result , 1E14 )
assertEquals ( supply1 , supply2 )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ORCID_PATENTS_CREATE )
assertEquals ( expected , actual )
assertEquals ( author , result . getCommit ( ) . getAuthorIdent ( ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertEquals ( "qwe" , collector . getInfo ( ) )
assertEquals ( "SELECT a FROM db.g1 INNER JOIN db.g2 ON a = b" , QueryParser . getQueryParser ( ) . parseCommand ( sql , new ParseInfo ( ) ) . toString ( ) )
assertThat ( target . matchExactly ( action ) , is ( true ) )
assertEquals ( "Wrong number of command in rake" , 1 , commandsIterator . nextIndex ( ) )
arrays . assertDoesNotContain ( description , actual , value , Index . atIndex ( - 1 ) )
assertThatTestCaseObeysOracle ( 0 )
assertEquals ( results1 , results2 )
Assert . fail ( "Should have thrown exception" )
assertTrue ( baseCalendars . baseCalendars . size ( ) == previous )
assertFalse ( hasReset )
assertTrue ( wsis instanceof OutputPeer )
assertThat ( renderer . getShortForm ( entity ) , is ( "rdfs:PlainLiteral" ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( padded ( OBJECT_OVERHEAD + INT + DOUBLE + LONG ) , ThreadTrackingContext . getBytes ( ) )
assertEquals ( expected , elements )
assertEquals ( "OK" , rc . put ( "/a02" , "OK" ) . run ( ) . getBody ( ) . asString ( ) )
assertEquals ( "wikipedia:Village_pump_(technical)" , output . get ( 0 ) )
assertEquals ( "12 minutes ago" , t . format ( new Date ( 0 ) ) )
assertEquals ( expResult , result )
assertThat ( taskService . createTaskQuery ( ) . taskOwner ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( e1 , e2 )
Assert . assertArrayEquals ( expected , processed )
assertEquals ( 0 , timeouts . getTimeoutCount ( ) )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( b , byteArrayStream1 . toByteArray ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( 1 , i )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertTrue ( result . isValid ( ) )
assertThat ( exitStatus , is ( 42 ) )
assertThat ( outcome . getStartTime ( ) , is ( beforeDate . plusDays ( 1 ) ) )
Assert . assertFalse ( deal . isAccepted ( ) )
Assert . assertFalse ( result )
assertEquals ( 0 , actual . size ( ) )
Assert . assertEquals ( HttpStatus . SC_BAD_REQUEST , http . getResponseCode ( ) )
Assert . assertEquals ( diffusioncoefficient , result [ 0 ] , 0.1 )
assertEquals ( expected , result )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-01 )
assertEquals ( expectedMessage , result )
assertEquals ( 2 , saveFile . length ( ) )
assertEquals ( interactive , interactive1 )
assertOut ( "var /** @type {RegExp} */ a = /test-\\\\d/i" )
assertEquals ( "src/test/resources/test.properties" , configSource . getProperties ( ) . getProperty ( "hammock.external.config" ) )
assertEquals ( "Wrong result" , linkList , getLinkList ( linkList ) )
assertTaintHasLabel ( MultiTainter . getTaint ( y ) , "testUnthrownExceptionStopsTaintingAtTry" )
Assert . assertEquals ( 0 , sut . getWeekdayCountBetweenDates ( start , end ) )
assertEquals ( 20 , result . getTotalCount ( ) )
Assert . assertNotNull ( cdf )
Assert . assertEquals ( 1 , result )
assertThat ( frontController . processTimeZone ( request ) , is ( nullValue ( ) ) )
assertOutputResult ( "testDump2.result" , new String ( bos . toByteArray ( ) ) , new String [ ] { "${table.timezone}" } , new String [ ] { testingCluster . getConfiguration ( ) . getSystemTimezone ( ) . getID ( ) } )
Assert . assertEquals ( json , writer . toString ( ) )
assertEquals ( 8 , hyperLogLog . cardinality ( ) )
assertThat ( target . equals ( obj ) , is ( false ) )
assertTrue ( ss . contains ( "'123-abc'" ) )
assertEquals ( actualResource , actualResource2 )
Assert . assertEquals ( true , retval )
assertNotNull ( in )
Assert . fail ( ex . getMessage ( ) )
assertTrue ( file . exists ( ) )
assertFalse ( result . isPresent ( ) )
assertThat ( domain . getLogHome ( ) , equalTo ( "/u01/oracle/user_projects/domains" ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( xml )
assertEquals ( 2 , ( long ) ( ( DocumentElement ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement > ) ( List < DocumentElement
assertThat ( errors , not ( hasFieldErrors ( "givenName" ) ) )
assertEquals ( "___DRI" , properties . getRepositoryLocation ( ) )
Assert . assertNotNull ( RobeHibernateBundle . getInstance ( ) . get ( ) )
assertEquals ( "Expected sequence number " + seqid + " to be between " + lastestSeqNumber + " and " + editCount + " but it is " + " " + lastestSeqNumber , seqid , editCount )
Assert . assertEquals ( products . size ( ) , 5 )
assertTrue ( expectedOrder . isOrdered ( toSort ) )
assertEquals ( 11 , rs . get ( 0 ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfAnnotationReplaceText.pdf" , sourceFolder + "cmp_xfdfAnnotationReplaceText.pdf" , destinationFolder , "diff_" ) )
assertEquals ( s , sb . toString ( ) )
assertBeanValidation ( json , "start_relative.value must be greater than or equal to 1" )
assertTrue ( ci1 . getValue ( series . getEndIndex ( ) ) . doubleValue ( ) > LOW_CHOPPINESS_VALUE )
assertEquals ( "Expected 4 results!" , 4 , count )
assertEquals ( "2.0" , builder . toString ( ) )
assertNotNull ( "Task is null" , entity )
context . assertIsSatisfied ( )
assertThat ( predicate . test ( Integer . class ) , is ( true ) )
Assert . assertEquals ( "test1; test2; test3" , string )
assertDelivered ( q , 0 )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
Assert . assertEquals ( "<h1>Hello b c</h1>" , html )
assertEquals ( 440 , value [ 0 ] , 0.001 )
assertEquals ( run1 , run2 )
assertThat ( gitClient . getRemoteSymbolicReferences ( repoRoot . getAbsolutePath ( ) , null ) , hasEntry ( Constants . HEAD , "refs/heads/master" ) )
assertEquals ( "Wrong key" , 99 , m . get ( "ABC" ) )
assertEquals ( HttpStatusCode . NOT_IMPLEMENTED . getStatusCode ( ) , response . getStatusCode ( ) )
assertEquals ( wayLessInEuros , actualValue )
assertEquals ( "Wrong type" , guid , NodeType . getNodeType ( ) )
assertTrue ( a1 . compareTo ( a2 ) < 0 )
assertEquals ( new MetadataVersion ( new String [ ] { "beta-1" , "1" } ) , version )
assertEquals ( startingRevs , cloneRevisions )
assertEquals ( allMethods , allMethods1 )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertNotNull ( context . getBean ( "snsOutboundGateway.snsExecutor" , SnsExecutor . class ) )
assertIsIdentity ( transform )
assertEquals ( "{" + "\\"key1\\":\\"value1\\"," + "\\"key2\\":\\"value2\\"," + "\\"key3\\":\\"value3\\"," + "\\"key4\\":\\"value4\\"," + "\\"key5\\":\\"value5\\"," + "\\"key6\\":\\"value6\\"," + "\\"key7\\":\\"value7\\"," + "\\"key8\\":\\"value8\\"," + "\\"key9\\":\\"value9\\"," + "\\"key10\\":\\"value10\\"," + "\\"key11\\":\\"value11\\"," + "\\"key12\\":\\"value12\\"," + "\\"key13\\":\\"value13\\"," + "\\"key14\\":\\"value14\\"," + "\\"key15\\":\\"value15\\"," + "\\"key16\\":\\"value16\\"," + "\\"key17\\":\\"value17\\"," + "\\"key18\\":\\"value18\\"," + "\\"key19\\":\\"value19\\"," + "\\"key20\\":\\"value20\\"," + "\\"key21\\":\\"value21\\"," + "\\"key22\\":\\"value22\\"," + "\\"key23\\":\\"value23\\"," + "\\"key24\\":\\"value24\\"," + "\\"key25\\":\\"value25\\"," + "\\"key26\\":\\"value26\\"," + "\\"key27\\":\\"value27\\"," + "\\"key28\\":\\"value28\\"," + "\\"key29\\":\\"value29\\"," + "\\"key30\\":\\"value30\\"," + "\\"key31\\":\\"value31\\"," + "\\"key32\\":\\"value32\\"," + "\\"key33\\":\\"value33\\"," + "\\"key34\\":\\"value34\\"," + "\\"key35\\":\\"value35\\"," + "\\"key36\\":\\"value36\\"," + "
assertTrue ( success )
Assert . assertEquals ( expectedURL , attr . get ( "xlink:href" ) )
assertNull ( clazz )
assertReportOutput ( getPath ( "ExpectedReportMessages.html" ) , outputDirectory )
assertArrayEquals ( new int [ ] { 1 , 1 , 0 } , difference )
assertEquals ( galaxy , device )
assertTrue ( Arrays . asList ( fh . getReadLink ( ) ) . contains ( linkName ) )
assertEquals ( "Distinct values should be created" , 2 , sdbEntity1 . getDistinctValues ( ) . size ( ) )
Assert . assertEquals ( results , actual )
assertEquals ( expected , actual )
assertEquals ( "folder1/folder2/resource-b598c484.css" , result )
Assert . assertEquals ( 2 , operation . operations . size )
Assert . assertEquals ( violations . size ( ) , 2 )
Assert . assertFalse ( "The handler should not have been initialized" , TestHandler . INITIALIZED )
assertEquals ( expecetedTableName , builtTableName )
assertEquals ( "<p>Hello <em>there</em> <em>now</em></p>" , doc . body ( ) . html ( ) )
Assert . assertEquals ( expected , MustacheTemplatePrefixExpander . expand ( input ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertNoCause ( "value of: myObject.child.grandchild\\nmessage" )
assertNull ( ec )
assertNotNull ( output )
assertThat ( s . getValue ( ) , is ( minValue ) )
assertEquals ( 1 , $ ( LabelElement . class ) . all ( ) . size ( ) )
context . assertIsSatisfied ( )
assertEquals ( pp . getValue ( ) , new Payload < > ( "2 final" ) . getValue ( ) )
assertTrue ( got . contains ( "Deleted service account:" ) )
assertThat ( actual , is ( "hello world!" . getBytes ( ) ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoFormaPagamento ( ) . toString ( ) )
assertEquals ( "€" , buf . read ( ) )
assertThat ( cut . apply ( select ) , is ( false ) )
assertTrue ( "the artifact must be downloaded" , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
assertTrue ( p . isWriteable ( Object . class , null , null , MediaType . TEXT_PLAIN_TYPE ) )
assertEquals ( list , result )
assertNotNull ( pdu )
assertContains ( e . getMessage ( ) , "'id'" )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertNull ( actualObj ( ) . get ( "mykey" ) )
assertNotNull ( "Valid class must be returned" , factory . getSerializer ( LongWritable . class ) )
assertEquals ( user , BASE_URL + "?user=admin" )
assertNotNull ( result . getOpenAPI ( ) )
assertNotNull ( grid )
assertEquals ( expected , uri . getRawPath ( ) )
Assert . assertEquals ( "P4ssW0rD" , obj . getPassword ( ) )
assertStreamEquals ( expectedBackoffs , backoffs )
assertNotNull ( doc )
Assert . assertEquals ( "1" , result . getFirstHeader ( "Server" ) . getValue ( ) )
assertEquals ( loadTypes , predicateFactory . createPredicate ( config1 , config1 , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true ,
assertTrue ( ! result )
assertEquals ( sensorType , header . getSensorType ( ) )
assertNotNull ( result )
Assert . assertTrue ( "Sign doc end" . equals ( result ) )
assertTrue ( "no exception was thrown" , exception )
assertThat ( matcher . matches ( itemToMatchCondition ) , is ( false ) )
assertEquals ( "Wrong node" , n1 , net . getNode ( n1 . getId ( ) ) )
assertEquals ( 1 , orgUnits . size ( ) )
Assert . assertTrue ( s . startsWith ( "No message will be sent to " ) )
assertThat ( definition . dataTableType ( ) . transform ( dataTable . asLists ( ) ) , is ( asList ( asList ( "converts_table_cell_to_string=a" , "converts_table_cell_to_string=b" ) , asList ( "converts_table_cell_to_string=c" , "converts_table_cell_to_string=d" ) ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
assertEquals ( "Hello world!" , result )
assertNotNull ( getRealm ( ) )
Assert . assertEquals ( "<?james-->" , stringWriter . toString ( ) )
assertEquals ( frameData . hashCode ( ) , frameDataAgain . hashCode ( ) )
assertHelpLines ( "Option    Description" , "------    -----------" , "--apple
assertTrue ( ! result )
assertEquals ( false , result )
assertEquals ( 1 , coverage . getHashLength ( ) )
Assert . assertEquals ( "test-path-includetest-path-includetest-channel-include" , value )
assertEquals ( "token 1\\n" , found )
assertEquals ( value , actualValue )
assertTrue ( "Incorrect mapping of variable property for Asterisk 1.2" , actual . indexOf ( "variable: var1=value1\\r\\nvariable: var2=value2\\r\\n" ) >= 0 )
assertEquals ( Arrays . asList ( "com.module1" , "com.module1/module2" ) , complete ( "com" ) )
assertEquals ( expected , members )
TestUtil . assertSuccess ( result )
Assert . assertTrue ( response . contains ( "Call reached IMPL as schemaValidation went thru fine.siteid - 0clientid - abclang - 1" ) )
assertEquals ( "{ \\"field name\\" : { \\"$bitsAllSet\\" : \\"?\\" } }" , filterParameters . toString ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expResult , result )
Assert . assertEquals ( "Stromgol" , lastName )
Assert . assertArrayEquals ( encodedValue , byteOutputStream . toByteArray ( ) )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "shouldInPriceDescOrder.json" , result )
assertTrue ( page . asXml ( ) . contains ( "Constructor" ) )
assertFalse ( valid )
assertEquals ( "1" , o )
assertTrue ( plot . getDomainMarkers ( 99 , Layer . FOREGROUND ) . contains ( xMarker1 ) )
assertThat ( result . replaceAll ( "\\\\s+" , "" ) , equalTo ( expectedOutput . replaceAll ( "\\\\s+" , "" ) ) )
assertEquals ( new RetrieveImagingDocumentSet ( ) , result )
Assert . assertTrue ( urlResponse . status == 401 )
assertEquals ( future , underTest . collect ( futures ) )
assertEquals ( expResult , result )
assertEquals ( "Iterator size is wrong" , 2 , columnList . size ( ) )
Assert . assertEquals ( 4 , ( boolean ) equalsMethod . invokeExact ( builder , expectArray ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( 9 , fixtureMap . get ( Author . ID ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "Expected 3 results!" , 3 , n )
Assert . assertNotNull ( jis . getManifest ( ) )
assertEquals ( "um milh茫o e tr锚s mil e oitocentos e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa e noventa
assertTrue ( called . compareAndSet ( false , true ) )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'\\\\'true\\\\'',h:'123\\\\''}" , r )
assertThat ( propsMap . size ( ) , is ( 0 ) )
assertEquals ( expectedValue , value . getValue ( 99L ) )
assertTrue ( "syntax should still be in the registry after delete failure" , getObjectClassRegistry ( ) . contains ( OID ) )
assertEquals ( selector1 . hashCode ( ) , selector2 . hashCode ( ) )
assertEquals ( 1 , docs ( ) )
assertEquals ( address , Jvm . address ( bb ) )
assertThat ( result , is ( cleanText ( "Hello world!" ) ) )
assertThat ( array2 , equalTo ( new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) )
Assert . assertNotNull ( td )
assertSame ( resultScanner , adapter . execute ( rowsRead . readRequest ( ) ) )
assertEquals ( OTHER_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( expected , exts )
assertEquals ( "Unexpected result for function: " + uf , uf , f . evaluate ( null ) )
assertNull ( mongoStore . get ( name , sessionId , String . class ) )
assertEquals ( "Incorrect string returned" , "This is a test string" , sw . toString ( ) )
assertEquals ( "failed to generate class with abstract methods" , CLASS_WITH_ABSTRACT_METHODS , cls )
Assert . assertNull ( "Result is not null" , o )
assertTrue ( "Must have a writable ledgerDir" , writeDirs . size ( ) > 0 )
assertEquals ( "Wrong result for " + uri , pattern [ 1 ] , result )
assertEquals ( "3 ��� 卅��诏�乇�" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( expected , array . toString ( ) )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
assertThat ( value . getRight ( ) , is ( "1800" ) )
assertEquals ( "3 灏��� ��" , t . format ( new Date ( 0 ) ) )
assertEquals ( "incorrect number of mappings found for nhsno2" , 2 , userMappings . size ( ) )
assertNotNull ( result )
assertEquals ( 1 , results . size ( ) )
assertEquals ( 1 , t . indexOfUnquoted ( str , ">>" ) )
arrays . assertContains ( description , actual , other )
assertEquals ( "text" , json . getJSONObject ( AbstractComponentState . JSON_CONTENT ) . getString ( AbstractComponentState . JSON_VALUE ) )
assertTrue ( verifier . verify ( input ) )
assertEquals ( r1 , r2 )
assertEquals ( "expect bookie idx 2 first" , origWriteSet , reorderSet )
assertEquals ( "Hello" , quote ( o ) )
maps . assertContainsAnyOf ( someInfo ( ) , actual , new MapEntry [ 0 ] )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( parsed . getTime ( ) , 1379250000000L )
assertThat ( ids , contains ( locId ) )
assertEquals ( expected , actual )
Assert . assertEquals ( preClusterUuid , afterClusterUuid )
assertEquals ( 0 , clusters . size ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( result ) , containsInAnyOrder ( pt0id . getValue ( ) ) )
assertEquals ( "{\\"foo\\":\\"bar\\"}" , result . toString ( ) )
Assert . assertNotSame ( uuid , uuid2 )
assertTrue ( aNumber == Double . POSITIVE_INFINITY )
assertEquals ( 1 , t . getImportsCount ( ) )
assertEquals ( "True has to be returned in this case" , replication , inf . getBlockReplication ( ) )
assertNotNull ( seaCloudsApplicationData )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( expectedText , testText )
Assert . assertEquals ( new TransactionIdentifier ( object ( ) . getIdentifier ( ) , object ( ) . nextTx ( ) ) . getHistoryId ( ) , clientSnapshot . getIdentifier ( ) . getHistoryId ( ) )
assertThat ( answer , allOf ( containsString ( "Michail" ) , endsWith ( "invocationId was 123" ) ) )
assertEquals ( first , ( ( BasicMonthViewUI ) monthView . getUI ( ) ) . getFirstDisplayedMonth ( ) )
assertThat ( selectionModel . getSelectedClass ( ) , is ( Optional . empty ( ) ) )
assertResourceHasMapRepresentationWithProperty ( "key" , "" )
Assert . assertArrayEquals ( doubleArray , decompressedArray . array ( ) )
assertEquals ( exp , zF )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
Assert . assertEquals ( Double . toString ( x ) , expected , actual , tol )
assertTrue ( configurationDeserialized )
assertEquals ( 204 , response . getStatus ( ) )
Assert . assertEquals ( "password" , codec . decode ( "cGFzc3dvcmQ=" ) )
assertNotNull ( Reservation . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( 3 , deleter . deletedVersions . size ( ) )
Assert . assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertEquals ( Long . MAX_VALUE , impl . getFreshnessLifetime ( entry ) )
arrays . assertStartsWith ( description , actual , newArray ( true , false , true ) )
assertThat ( os , instanceOf ( Slf4jOutputStream . class ) )
Assert . isTrue ( departmentDao . getAllDepartments ( ) . size ( ) == 1 )
assertThat ( violations . size ( ) , is ( 1 ) )
Assert . assertTrue ( item . matches ( divNode ) )
Assert . assertTrue ( "no users returned" , users . size ( ) > 0 )
Assert . assertEquals ( retirada , notaInfo . getRetirada ( ) )
assertEquals ( assertion , prepend )
assertTrue ( wordLineCounts . get ( "." ) . firstObject ( ) == 12 )
assertEquals ( singletonList ( SimpleClass . class ) , actual )
assertEquals ( "[Array released]" , v8Object . toString ( ) )
assertEquals ( ace , parsed )
assertEquals ( "10" , document . getDocumentElement ( ) . getAttribute ( "project-version" ) )
assertEquals ( jsonString , mapper . writeValueAsString ( tableInfo ) )
assertEquals ( "" , data )
assertNull ( contextResult )
assertEquals ( "42" , method . invoke ( foo ) )
assertEquals ( 2 , memo . get ( 2 ) )
assertNumberOfViolations ( constraintViolations , 0 )
assertEquals ( value , testee . resolveValue ( value , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false ,
assertTrue ( writeLatch . await ( 5 , TimeUnit . SECONDS ) )
assertThat ( result , is ( "1.0" ) )
assertEquals ( "ZZZZZZ" , function . execute ( "zzzz" ) )
assertThat ( sut . getTotalPrice ( ) , is ( 4500 ) )
assertThat ( HiveObjectUtils . getParameter ( table , AVRO_SCHEMA_URL_PARAMETER ) , is ( "test" ) )
assertEquals ( newHashSet ( "hello" , "world" ) , result )
Assert . assertEquals ( 8 , result )
assertTrue ( checkContains ( reasoned , "SubClassOf(<http://x.org/XA> <http://x.org/XB>)" ) )
assertEquals ( "test" , getStringFromInputStream ( in ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
Assert . assertEquals ( "123456" , response )
assertThat ( IntegerUtil . toPrimitiveInt ( i ) , is ( 1 ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , firstOutbound )
assertEquals ( 5 , i )
TestCase . assertTrue ( result )
assertEquals ( "The value is not correct." , Long . toString ( date . toInstant ( ) . toEpochMilli ( ) ) , value )
assertProcessInstanceFinished ( processInstance , ksession )
assertEquals ( new Sequence ( 2015 , 0 , 0 ) , sequence )
assertFalse ( err . isPresent ( ) )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED" , FilterUtils . eq ( "service.objectClass" , "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ) , 2 , TimeUnit . SECONDS )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
assertTrue ( descriptor . hasConstrainedParameters ( ) , "Setting given for parameter should take precedence" )
assertTrue ( "Should be random branch name" , randomBranchName . contains ( "-" ) )
assertTrue ( isHoliday )
assertEquals ( FFmpegJob . State . FINISHED , job . getState ( ) )
Assert . assertEquals ( "Spacing" , text )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
Assert . assertFalse ( isValid )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "stuff\\"more\\"stuff" , result )
assertEquals ( expected , result )
Assert . assertEquals ( Permission . NO , providerPermission )
assertTrue ( found )
assertEquals ( OptionalLong . empty ( ) , queue . checkTimeout ( ticker . read ( ) ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( "((hello == 'stringgoodbye') and (key1 == 'boolean1'))" , jexl )
assertEquals ( 1 , classes . size ( ) )
assertEquals ( PHRASE , reversedString )
assertEquals ( 6.1234 , mhu . getAbsoluteHumidity ( ) , 0.1 )
spliterators . assertHasCharacteristics ( INFO , actual , DISTINCT )
assertEquals ( 0 , lintresult . getIssues ( ) . size ( ) )
assertEquals ( dao . getAvailablePostsForUser ( user ) . size ( ) , 2 )
assertThat ( savedModel . getName ( ) , is ( MODEL_NAME ) )
assertFalse ( frameData . equals ( "Unknown frame type" ) )
assertEquals ( expected , parser . getParseTree ( ) )
assertEquals ( "notNull() not null" , buffer . toString ( ) )
assertEquals ( "stream: input" , result )
Assert . assertEquals ( i . name ( ) , obj )
assertEquals ( "JSON serialization is wrong" , json1 , json2 )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "[Test] expecting:\\n<['Yoda', 'Luke']> not to be greater than:<['Han', 'Leia']>" , message )
assertTrue ( filter . allow ( event , listener ) )
assertSingleNotificationType ( EventType . FAILED_AUTHENTICATION )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
Assert . assertTrue ( content . contains ( "imports-cleaner" ) && content . contains ( "src" ) )
assertTrue ( g1 instanceof PublicCloneable )
assertThat ( unmarshal ( sb ) , hasEntry ( "some key" , "explicit value" ) )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( expected , actual )
assertEquals ( VisitStatus . RESERVE_TREE , visit ( node ) )
Assert . fail ( "Exception should be Thrown" )
assertFalse ( connection . isConnected ( ) )
assertTrue ( kv1 . equals ( kv2 ) )
assertEquals ( ByteBuffer . wrap ( "demo" . getBytes ( ) ) , m . payload ( ) )
Assert . assertTrue ( true )
assertXMLStringsEquals ( "<Root>\\n" + "   <Intermediate>\\n" + "       <X>Passed</X>\\n" + "       Value\\n" + "    </Intermediate>\\n" + "</Root>\\n" , test . toString ( ) )
Assert . assertSame ( "Request was not returned as expected." , request , request2 )
assertTrue ( err . contains ( "User with username 'noSuchUser'" ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , httpResponseConsumer . getEntry ( getEntryRequest ) . getResponseStatus ( ) )
assertEquals ( 0 , timestamps . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertNotNull ( result )
assertEquals ( "Calculate" , DecisionTableInterpreter . class . getName ( ) )
assertEquals ( requestObserver , responseObserver )
Assert . assertEquals ( N , a . size ( ) )
assertNull ( quartzScheduler . getJobNextRun ( job ) )
Assert . assertTrue ( downlodedFile . exists ( ) )
assertCustomerWithLinksSample ( )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( threads . size ( ) , is ( 1 ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<fields templateEngineKind=\\"Velocity\\" >" + "<description><
assertNotNull ( result )
assertTrue ( "Expected number of watchers to be contained in 3 unique domains" , total > 3 )
assertEquals ( "Wrong class" , CLS_NAME , ConfigurationUtils . loadClass ( CLS_NAME ) . getName ( ) )
assertEquals ( expectedTokens . get ( i ) , token )
assertThat ( systemOutRule . getLog ( ) , containsString ( "test help" ) )
assertSame ( EMPTY_BUFFER , ChannelBuffers . unmodifiableBuffer ( buf ) . order ( ) )
assertTrue ( contentType . getValue ( ) . contains ( expectedformat . getContentType ( ) ) )
assertEquals ( "DotCi" , username )
assertOrder ( true , query ( ) . sortAscending ( "one" ) )
assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertThat ( unmarshal ( sb ) , hasEntry ( "some value" , HACK_ATTEMPT ) )
assertFalse ( data . isExceptionAtThisTime ( ) )
Assert . assertNotNull ( order . getDatabase ( ) )
assertThat ( dialect , instanceOf ( PostgresDialect . class ) )
assertEquals ( expectedDateTime , parsedTime )
assertThat ( objectNode , hasProperty ( "bootswatch" , equalTo ( "2.3.1" ) ) )
assertEquals ( "300" , result )
Assert . assertEquals ( "Unexpected result" , "Huge" , result )
assertEquals ( 257 , result )
assertEquals ( expResult , result , 0.0 )
assertEquals ( "This   has  some  name.txt" , new PrefixTypesChain ( prefix ) . process ( prefix , nameRequest ( "txt" ) . originalName ( "name.pdf" ) . text ( "
assertEquals ( "test" , echo . echo ( "test" ) )
assertArrayEquals ( packet , Handshake . loadFromPacket ( packet ) . toPacket ( ) )
Assert . assertEquals ( "correctreplacement" , result )
assertEquals ( "GBP 0.94" , test . toString ( ) )
assertEquals ( "transaction TX:sessionId:99 sessionId BEGIN 3 unique-qualifier 100\\r\\n" , new String ( buf . array ( ) ) )
assertEquals ( 2 , game . getPlayers ( ) . size ( ) )
assertTrue ( trueCount > 0 )
Assert . assertEquals ( 1 , actionService . list ( ) . size ( ) )
assertEquals ( 5l , d . asInt8 ( ) )
assertEquals ( expResult , result )
assertEquals ( julian , test )
assertEquals ( UNKNOWN . getStatusCode ( ) , result . getCode ( ) )
assertEquals ( test . getId ( ) , test . getId ( ) )
assertSame ( targetLocator , targetLocator . activeElement ( ) )
assertThat ( HtmlFormEntryUtil . getFullNameWithFamilyNameFirst ( name ) , is ( "Mr. Brutus, Mark, Esq." ) )
assertTrue ( v1 . compareTo ( v2 ) > 0 )
assertEquals ( "http://example.com/fhir/?name=james" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertResultSetOrderAgnostic ( resultSet , expectedRows )
Assert . assertEquals ( expected , s , 1e-15 )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , layout . getPrimaryStyleName ( ) )
assertTrue ( conv . canConvert ( TriggerContext . class ) )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( expecteds , actuals )
assertFalse ( service . publish ( "message" ) )
assertEquals ( Math . sqrt ( 18 ) , FrontUtils . distanceToClosestPoint ( point3 , front ) , EPSILON )
assertEquals ( object . booleans , result . booleans )
assertProcessInstanceCompleted ( processInstance )
assertTrue ( true )
Assert . assertEquals ( "Go to <a href=\\"web:http://www.company.com/\\">http://www.company.com/</a> <br>Enjoy!" , value )
Assert . assertEquals ( expectedMul , multiplied )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( 4 , result . getSize ( ) )
Assert . assertEquals ( "name" , field . getName ( ) )
assertEquals ( expResult , result )
assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.SimpleFileIODatastoreRuntime" ) )
assertThat ( responseWithPath , is ( EXPECTED_CONTENT ) )
assertEquals ( snapshot , lastEscalation . getSnapshot ( ) )
assertEquals ( "repoName" , op . repoName )
assertEquals ( "anchor must be invariant to timezone change" , calendar . getTimeZone ( ) , monthView . getAnchorDate ( ) )
assertEquals ( Sets . newHashSet ( "ru.kfu.itis.issst.evex.Person" , "ru.kfu.itis.issst.evex.Organization" , "ru.kfu.itis.issst.evex.Artifact" , "ru.kfu.itis.issst.evex.Weapon" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis.issst.evex.Artist" , "ru.kfu.itis
assertEquals ( "get target same as first" , cb . getTarget ( ) , checkBox . getTarget ( ) )
assertPushPromiseFrame ( frame , streamId , promisedStreamId , data . duplicate ( ) )
assertTrue ( graphElementMock . getGraphIds ( ) . isEmpty ( ) )
assertEquals ( x , pradf . getNextLineOffset ( y ) )
assertFalse ( instance . validate ( file ) )
Assert . assertEquals ( mockA , a1 )
assertEquals ( 12 , jpegBitsPerSample ( "MR2_UNC-JPLL.dcm" ) )
assertEquals ( "word" , outFile . toString ( ) )
Assert . assertNotNull ( "null result from rule execution" , result )
assertThat ( rendering , is ( "Two days ago" ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99},{\\"category\\":\\"fiction\\",\\"author\\":\\"test1\\"," + "\\"title\\":\\"title1\\",\\"price\\":13}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
assertThat ( formatter . parse ( "14, Heisei 29" ) , is ( expected ) )
assertStoppedEventOnValidValue ( table , 0 , throwOnEmpty , false )
assertTrue ( failure . cause ( ) instanceof LeadershipTransferFailedException )
assertEquals ( post . getUnsubscribeLinkForSubscribersOf ( TopicSubClass . class ) , "/topics/1/unsubscribe" )
Assert . assertTrue ( copyFrom . equals ( builder . offset ( 11 , 10 ) . build ( ) , EqualCondition . EXPECT_BORDER ) )
assertEquals ( new BigDecimal ( "19.00" ) , maximum )
assertBeanValidation ( json , "query.metric[0].aggregators[0].percentile zero" )
assertEquals ( CellImgFactory . class , imgFactory . getClass ( ) )
assertEquals ( Arrays . asList ( mockSourcePath ) , modulePathIds )
assertNotNull ( s )
Assert . assertFalse ( ipList . isEmpty ( ) )
assertEquals ( 2.71828 , dt . doubleValue ( ) , 0.0001 )
Assert . assertTrue ( "Video should be HTTPS." , response . getStatusLine ( ) . getStatusCode ( ) == 200 )
assertEquals ( 2 , two )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
assertThat ( dialect . addOptimizerHints ( sql , hints ) . toString ( ) , is ( "SELECT /* SQL_ID */ /*+ INDEX (PUBLIC.TEST_1 test_ix) USE_NL */" + System . lineSeparator ( ) + " * FROM PUBLIC.TEST_1" ) )
assertEquals ( "Wrong number of elements in linked list" , 2 , list . size ( ) )
assertFalse ( cs . communicationAllowed ( ) )
assertThat ( orders , is ( equalTo ( expected ) ) )
assertSame ( attr , forward . getAttributes ( ) )
Assert . assertTrue ( true )
assertTrue ( "audit should contain change of institutionsCountries" , msgs . get ( 0 ) . getMessage ( ) . contains ( "friendlyName=<institutionsCountries>" ) )
assertEquals ( "Outer class variable is 779" , 779 , ret )
assertSame ( expected , result )
assertEqualsIgnoreWhitespace ( expected , drl )
Assert . assertEquals ( expResult , result )
assertThat ( query . count ( ) , is ( 1L ) )
arrays . assertContainsOnly ( description , actual , other )
assertThat ( anyTS . getMinimum ( MILLI_OF_SECOND ) , is ( 0 ) )
Assert . assertEquals ( msg , expected , actual , delta )
assertNull ( result )
assertEquals ( "predicate names not recorded properly in grammar" , expectedPreds , preds )
assertTrue ( matcher . find ( 0 ) )
assertThat ( result , is ( instanceOf ( resultClass ) ) )
assertEditorClosed ( )
assertTrue ( branch . getSubscribers ( ) . contains ( user ) )
assertEquals ( 1 , executeSolrQuery ( "firstname_s:John lastname_s:Doe" ) . size ( ) )
assertFalse ( validator . validate ( Meta , POST ) . passedValidation ( ) )
assertThat ( esperEventProcessor . getEventTypeAttributes ( "TempSensor" ) . size ( ) , is ( 0 ) )
Assert . assertNotNull ( result )
assertEquals ( true , deadClient . getClient ( ) . isBroken ( ) )
assertEquals ( key , masterJedis . get ( key ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( "Security is not enabled" , captor . getValue ( ) . isEnabled ( ) )
assertEquals ( highest , highest )
assertEquals ( pbs , pbs2 )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( token , tokenList . get ( 0 ) )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( PermissionsValidator . ERROR_CODE_EMPTY_SELECTED_IDS ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 3456.098F , r )
Assert . assertNotNull ( dbRangerServiceList )
assertNotNull ( exception )
assertEquals ( "org.test.Hello" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertThat ( notifier . notify ( notice ) , is ( 200 ) )
assertEquals ( Sets . newHashSet ( role1 , role2 ) , sentryStore . getRolesByGroups ( SEARCH , twoGroups ) )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertEquals ( FilterReply . NEUTRAL , filter . decide ( event ) )
assertTrue ( "Handler wasn't run" , ran . get ( ) )
assertThat ( references . size ( ) , equalTo ( 0 ) )
assertThat ( streams , hasItems ( "s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver/s3://someserver
assertTrue ( envVars . size ( ) == 0 )
assertThat ( sb . toString ( ) , is ( String . format ( "TinyTablesTable[value=%s]" , e ) ) )
assertThat ( classLoaderContextStr . isPresent ( ) , is ( true ) )
assertEquals ( "java.util.Collection<java.util.Map.super.SuperInterface>" , exp )
assertEquals ( 1 , result )
assertEquals ( 100L , proxy )
assertThat ( goModAsString , equalTo ( goModFromProject ) )
Assert . assertNotNull ( targetHours )
assertEquals ( Arrays . asList ( testWriters . toArray ( ) ) . toString ( ) , Arrays . asList ( Arrays . copyOf ( movie . getWriters ( ) . toArray ( ) , 1 ) ) . toString ( ) )
assertEquals ( alpha , res , 0.04 )
Assert . assertTrue ( "did not find command in output" , false )
Assert . assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( map1 , map2 )
assertNotNull ( javaxSchema )
assertThat ( result , is ( "def" ) )
Assert . assertFalse ( compare . doCompareTo ( trigger ) )
assertMatchAnyMethodsCalled ( "SFF_0" )
assertEquals ( firstWord , futureWord . get ( ) )
assertEquals ( expected , actual )
Assert . fail ( "Expected TableNameException" )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( "key-1-value-1" , s . marshallable ( m -> m . write ( ( ) -> "key" ) . text ( "key-2" ) . write ( ( ) -> "value" ) . text ( "value-2" ) ) )
assertTrue ( keyValueTableView . getItems ( ) . size ( ) == 5 )
context . assertIsSatisfied ( )
assertThat ( result . getTriggerMessageRequest ( ) , is ( triggerMessageRequest ) )
assertTrue ( result . contains ( "THE_ERROR" ) )
assertEquals ( true , wizard . canComplete ( ) )
assertEquals ( expected , actual )
assertNull ( unsubscribeContext . getSubscriptions ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( querys , is ( contains ( Arrays . asList ( "SELECT /* _TESTSQL_ID_ */" , "\\t*" , "FROM" , "\\tPRODUCT" , "WHERE 1 = 1" , "ORDER BY PRODUCT_ID" ) ) )
assertEquals ( "www.google.com" , encodeStr )
assertThat ( routing . route ( request , "/abc/111" ) , is ( "/abc?path=abc" ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 2 , artifact . getComments ( ) . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 01" ) )
mockery . assertIsSatisfied ( )
assertNotNull ( Sim . reader ( ) . read ( ) )
assertEquals ( expectatedMessage . trim ( ) , e . getMessage ( ) . trim ( ) )
assertEquals ( "prefix_prefix_suffix" , template . format ( getResolver ( ) ) )
assertThat ( page2 , is ( page1 ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "12.3" ) )
assertThat ( base . thenApplyCaughtFailed ( other ) , is ( new ImmediateCompleted < > ( caller , from ) ) )
Assert . assertEquals ( "Expected HTTP 404 to be returned as process instance is aborted." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertFalse ( isMappingModelExists ( ) )
assertEquals ( expResult , result )
assertEquals ( maxSize , cacheManager . getMaximumSizeMB ( ) , 1e-9 )
Assert . assertFalse ( json . has ( DATA_NAME ) )
assertFalse ( constraintValidator . isValid ( Money . of ( 0 , "EUR" ) , null ) )
assertEquals ( exp , act )
assertFalse ( lhs . equals ( rhs ) )
assertTrue ( graph . isEmpty ( ) )
assertEquals ( "com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$App" , jsonReaders . toString ( ) )
assertResult ( "checking multiple root branches with no skip" )
assertEquals ( "Unknown" , result )
Assert . assertThat ( t , matchesKey ( "INT" ) )
assertEquals ( token , result )
assertEquals ( true , result )
assertNotNull ( dataURL )
UnitTestUtils . assertEquals ( "preMultiply(Vector) returns wrong result" , diagResult , denseResult , 0d )
assertThat ( e . hasMoreElements ( ) , is ( false ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertSame ( expected , result )
assertEquals ( Status . SUCCESS , status )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( tagResource ( "tagValue" ) ) ) )
assertEquals ( Join . Type .Windowing , join . getType ( ) )
assertEquals ( val . getDiscountRate ( ) , Rate . of ( 0.01 ) )
Assert . assertEquals ( expected , actual )
assertEquals ( tempFileName , appender . getFileName ( ) )
assertEquals ( 1 , ourCreatedObservations . size ( ) )
assertEquals ( expected , actual )
assertEquals ( dateToCompare , date )
assertEquals ( testHelper . formatPercent ( dataQuality . get ( p2 ) ) , testHelper . formatPercent ( params . get ( p1 ) ) , 0.05 )
assertListTEquals ( listT , 42 )
assertNotNull ( tf )
assertThat ( encoded , stringContainsInOrder ( "{" , "\\"resourceType\\": \\"Patient\\"," , "\\"contained\\": [" , "{" , "\\"resourceType\\": \\"Condition\\"," , "\\"id\\": \\"1\\"" , "}" , "]," , "\\"extension\\": [" , "{" , "\\"url\\": \\"test\\"," , "\\"valueReference\\": {" , "\\"reference\\": \\"#1\\"" , "}" , "}" , "]," , "\\"birthDate\\": \\"2016-04-05\\"" , "}" ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , event )
assertEquals ( null , def )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 5 , tuple . len ( ) )
editor . assertProblems ( "resources|Duplicate key" , "my-repo|Unused" , "resources|Duplicate key" , "my-repo|Unused" , "type|Duplicate key" )
assertEquals ( new Date ( 0 ) , toml . getDate ( "n" , new Date ( 0 ) ) )
Assert . assertEquals ( ImmutableList . of ( ThresholdFilterHeaderExtender . FILTER_GT_MIN_GQ ) , annotator . getFiltersFor ( gt ) )
assertNotNull ( "Unread Messages are not null" , messages )
assertEquals ( 500 , page . getWebResponse ( ) . getStatusCode ( ) )
assertThat ( request . equals ( request2 ) , is ( true ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( "Should get same namespace" , this . getClass ( ) . getPackage ( ) . getName ( ) , packageName )
assertFalse ( next )
assertEquals ( "foo.k" , options . mainModule ( ) )
assertEquals ( 2 , all . size ( ) )
assertEquals ( "EPSG:4326" , domain )
Assert . assertTrue ( resources . getResourceNames ( ) . isEmpty ( ) )
assertEquals ( "/modes-test/" + mode , listing . getChildren ( ) . iterator ( ) . next ( ) . getValue ( ) )
assertEquals ( "a composer" , id3v2Tag . getComposer ( ) )
assertTrue ( PolyElement . hasCommonNode ( testNode1 ) )
assertFalse ( HttpMessageUtils . isJson ( message ) )
assertTrue ( interceptor . preHandle ( request , response , handler ) )
assertEquals ( "literal with boolean" , ( ( List ) session . getGlobal ( "list" ) ) . get ( 0 ) )
assertEquals ( expectedInstanceTypes , actualInstanceTypes )
assertTrue ( h == null )
Assert . assertNotNull ( responseEntity )
Assert . assertEquals ( "MDC data is wrong" , mdc , jsonObject . get ( "mdc" ) )
assertTrue ( response . isSuccess ( ) )
Assert . assertTrue ( game . getProperty ( "500006.debug" ) != null )
assertEquals ( MetricsLevel . NONE , MetricsLevel . getMetricsLevel ( scope , "summaryDataName" , "noLevelDataName" , 3.0 , StandardUnit . MILLISECONDS ) )
assertEquals ( InterpreterResult . Code . OK , ret . code ( ) )
Assert . fail ( "Should have thrown an exception" )
assertEquals ( Sets . newHashSet ( "server=server1->db=customers->table=purchases->select" , "server=server1->db=analyst1" , "server=server1->db=jranalyst1->table=*->select" , "server=server1->db=jranalyst1" , "server=server1->functions" ) , backend . getPrivileges ( Sets . newHashSet ( "manager" ) , ActiveRoleSet . ALL ) )
Assert . assertEquals ( PersistenceState . NOT_PERSISTED . toString ( ) , fileInfo . getPersistenceState ( ) )
assertEquals ( provider , authorModel . getProvider ( ) )
assertFalse ( sf . getCache ( ) . containsEntity ( AnnotatedEntity . class , 0L ) )
assertNull ( myDtoClass )
assertTrue ( timeoutNow . getSender ( ) . isCalledOnce ( ) )
assertNotNull ( result )
Assert . assertTrue ( sparkRestClient . killJob ( ) . withSubmissionId ( submissionId ) )
assertThat ( NoReasonsAllowed . noReasonsAllowed ( ) , not ( allows ( reason ) ) )
assertThat ( result , is ( jsonString ( "office" ) ) )
assertEquals ( "?p1=v1&p2=v2" , query . toString ( ) )
assertEquals ( expected . trim ( ) , output . trim ( ) )
assertEquals ( Result . PASS , ok . apply ( item ) )
assertEquals ( "labelled" , mm . get ( m . expandPrefix ( "p:thing" ) ) )
TestUtils . assertEquals ( new Array2DRowFieldMatrix < > ( testDataPlus2 ) , m . scalarAdd ( Dfp25 . of ( 2 ) ) )
assertArrayEquals ( new String [ ] { "root" , "leftLeaf" , "rightLeaf" } , treeContent )
assertFalse ( "RM never turned active" , - 1 == cluster . getActiveRMIndex ( ) )
assertEquals ( 3 , list . size ( ) )
assertNull ( x . getValue ( ) )
assertThat ( estimator . getCardinality ( ) , is ( 34L ) )
assertEquals ( ( Byte ) ( byte ) 0 , extractedByte )
Assert . assertEquals ( "A 11." , output )
assertEquals ( "<p><del>123</del></p>" , result )
assertEquals ( insets , mockBorder . getBorderInsets ( ) )
rule . assertScenarioEnded ( )
assertEquals ( V8_ARRAY , v8Object . getType ( "key" ) )
assertThat ( queriesString , is ( "type=BasicFlow" ) )
assertThat ( rasterNames , equalTo ( expected ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( expected , actual )
assertSignalEventDefinition ( "end" , "signal" )
assertThat ( g . toSmiles ( ) , is ( "CC=[5]" ) )
Assert . assertEquals ( "2013-01-29 05:00:00" , hourToRollup . getTime ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertTrue ( result . getFailures ( ) . isEmpty ( ) )
assertEquals ( TEST_BLOCK_SIZE , mReader . transferTo ( buf ) )
assertEquals ( "/topic" , m_callback . getTopic ( ) )
assertTrue ( "resume should have been called" , testFuture . isDone ( ) )
assertEquals ( "Stratio Decision" , name )
Assert . assertEquals ( 2 , numUdocs )
assertTrue ( containsFileIframe )
assertEquals ( log , id )
assertStreamOpenedExactlyOnce ( )
assertContentEquals ( style , Arrays . asList ( "tte" , "r" , "owl" , "ooo" , "ooo" , "oon" , "gwo" , "rd" ) )
Assert . assertNull ( hi )
assertOut ( "var /** @type {string} */ a" )
Assert . assertTrue ( servlet . isDebugMode ( ) )
assertEquals ( actionProgress . getActionName ( ) , null )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertNotNull ( project )
assertEquals ( suggestedName , hiveDatabaseMeta . generateColumnAlias ( columnIndex , suggestedName ) )
assertEquals ( 2 , fields . size ( ) )
assertTrue ( detail )
assertEquals ( 1 , cluster . getDataNodes ( ) . get ( 0 ) . getBPServiceAlive ( cluster . getNamesystem ( ) . getBlockPoolId ( ) ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , secondOutbound )
assertEquals ( "## Changes from version  to w2-wip2\\n" + "\\n" + "### Added\\n" + "- topologyTemplate/relationshipTemplates/NodeTypeWithoutProperties_RelationshipTypeWithoutProperties_NodeTypeWithoutProperties_NodeTypeWithTwoKVProperties\\n" + "- topologyTemplate/relationshipTemplates/NodeTypeWithoutProperties_RelationshipTypeWithTwoKVProperties_NodeTypeWithXmlElementProperty\\n" + "- topologyTemplate/relationshipTemplates/NodeTypeWithoutProperties_RelationshipTypeWithXmlElementProperty_NodeTypeWithXmlElementProperty\\n" + "\\n" + "### Changed\\n" + "- id\\n" + "  changed from \\"ServiceTemplateMinimalExampleWithAllPropertyVariants\\" to \\"ServiceTemplateMinimalExampleWithAllPropertyVariants_w1-wip1\\"\\n" + "- name\\n" + "  changed from \\"ServiceTemplateMinimalExampleWithAllPropertyVariants\\" to \\"ServiceTemplateMinimalExampleWithAllPropertyVariants_w1-wip1\\"\\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithoutProperties/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/2013/02/12}location}\\n" + "  changed from \\"undefined\\" to \\"\\"\\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithoutProperties/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/2013/02/12}location}\\n" + "  changed from \\"undefined\\" to \\"\\"\\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithoutProperties/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/2013/02/12}location}\\n" + "  changed from \\"undefined\\" to \\"\\"\\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithoutProperties/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/
assertTrue ( validScrollRange . contains ( getGridVerticalScrollPos ( ) ) )
assertEquals ( "Expected " + takenEvents . size ( ) + " values, actual " + values , 15 , takenEvents . size ( ) )
assertEquals ( 0 , branch_conditions . size ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertFalse ( HttpTestUtils . semanticallyTransparent ( originResponse , result ) )
assertSame ( myContextActivity , resolvedContextActivity )
assertNonAccessibleDefaultAccessControl ( result )
assertTrue ( testFailed . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "/" , r . matches ( Collections . < String , String > emptyMap ( ) ) . render ( ) )
assertNotNull ( result )
assertTrue ( result )
assertEquals ( 4. , pickup . getArrTime ( ) , 0.01 )
assertEquals ( ( ( ObjectWithOptions ) options . optOp ) . required , 10101 )
Assert . assertEquals ( createEmbedding ( v0 , e0 , v1 , e1 , v2 , e2 , v3 , e4 , v5 ) , result . get ( 0 ) )
assertEquals ( 2f , w . getValue ( ) , 0.01 )
assertEquals ( tstName , rel . getName ( ) )
assertEquals ( numOutputs , cdme2 . getEvents ( ) . size ( ) )
assertEquals ( "Nombre de noeuds is not same as theARC: " + arc . getIdNoeudIni ( ) + " - " + arc . getIdNoeudFin ( ) , arm , arc . getPopArcs ( ) )
assertFalse ( iterator . hasNext ( ) )
assertServiceResource ( resource )
assertThat ( component . execute ( ) , is ( expected ) )
assertions . doesNotContain ( 'e' , index )
assertThat ( arguments . get ( 0 ) . getValue ( ) , is ( equalTo ( DataTable . create ( singletonList ( "content" ) ) ) ) )
assertEquals ( expResult , result )
assertEquals ( 0 , vlr . getVehicleId ( ) . intValue ( ) )
Assert . assertEquals ( "Tab Action" , resultPage . getText ( ) )
assertTrue ( cause instanceof SocketTimeoutException )
assertTrue ( Futures . getUnchecked ( collector ) )
assertEquals ( jaasConfigService , namedClusterService . getJaasConfigService ( ) )
assertEquals ( t , new HttpURL ( s ) . toString ( ) )
assertEquals ( "\\"1\\"truenull" , mustache . render ( Json . createReader ( new StringReader ( "[\\"1\\",true,null]" ) ) . read ( ) ) )
assertEquals ( "a" , object . getStringValue ( ) )
Assert . assertNotEquals ( hmacExpected , hmac )
assertThat ( other , LocalDateTimeMatchers . sameSecondOfMinute ( date ) )
assertEquals ( "scheduleDeviceMethod" , Deencapsulation . getField ( jobsParser , "jobType" ) )
assertTrue ( this . reconnectManager . isValidTask ( task ) )
assertEquals ( asList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 ,31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 49 , 50 , 51 , 58 , 55 , 56 , 57 , 58 , 59 , 70 , 59 , 70 , 60 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 70 , 56 , 56 , 70 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 70 , 56 , 56 , 56 , 70 , 56 , 56 , 56 , 70 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56
assertThat ( server1 , not ( equalTo ( server2 ) ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertEquals ( "java.lang.String" , occ . getLocation ( ) . getBeginLine ( ) )
assertTrue ( messageLatch . await ( 1 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "b" , input . getText ( ) )
assertEquals ( Integer . valueOf ( 2 ) , parseResults . get ( FILE_PATH ) . getConditionsByLine ( ) . get ( BRANCH_LINE ) )
Assert . assertEquals ( "true" , "true" )
assertNull ( e . getRenderingEngine ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "[1, 2, 3, 4, 6, 7, 5]" , result . toString ( ) )
assertEquals ( "S3A_SL_1_B__XFDumanifest_XFDumanifest_MET_tx.nc" , parentDirectoryNameOfStitchedProductFile )
assertNotNull ( newFileBackedCache )
assertEquals ( "regExp" , regExp )
assertEquals ( "test" , dataSetDef . getEditor ( ) . getText ( ) )
assertEquals ( "usage: foo" , lineArgs . getCommandUsage ( ) )
Assert . assertEquals ( key3 , actual )
assertNull ( nbr1 )
assertEquals ( Boolean . TRUE , result )
assertFalse ( filter . isDetected ( ) )
assertEquals ( "one or two null values" , result )
assertTrue ( "Chars not flushed" , new String ( buf , 0 , buf . length ) . equals ( testString ) )
assertLife ( playerA , ANY_LIFE_TOTAL , ANY_LIFE_TOTAL )
assertThat ( decodedValue , is ( actualValue ) )
assertTrue ( logger . isInfoEnabled ( ) )
assertThat ( this . appRegistryService . find ( "foo" , ApplicationType . sink ) . getUri ( ) . toString ( ) , is ( "maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.2.0.RELEASE" ) )
assertTrue ( result )
assertEquals ( expected , result , .000001 )
assertThat ( list , contains ( new Object [ ] { "1" , "1" } , new Object [ ] { "1" , "1" } ) )
assertEquals ( "bar" , result )
assertEquals ( expectedYAML , extractedYAML )
assertArrayEquals ( new String [ ] { "value1" , "value2" } , strings )
assertEquals ( "[[John], [Jane], [John], [John], [John]]" , results . toString ( ) )
assertEquals ( new TupleN ( 1 , false , true , 2 , 3 ) , xtupleN ( sf , xint ( ) , xlong ( ) , xint ( ) , xint ( ) ) . extract ( "1,false,true,2,3" ) )
assertNode ( "/" , "mode:root" )
assertEquals ( expectValue , actualValue )
assertEquals ( "begin\\n" + "UPDATE table1 set a = 'xx'\\n" + "UPDATE table1 set a = 'xx'\\n" + "END;" , stmts . toString ( ) )
assertEquals ( "&amp;" , unescaped )
assertEquals ( false , domainManager . getDomainSlaveLifecycleUtil ( ) . isHostControllerStarted ( ) )
assertEquals ( "New Test room" , room . getName ( ) )
Assert . assertEquals ( 404 , response . status )
assertEquals ( expr , printConstraint ( expression ) )
Assert . assertEquals ( Status . OK . getStatusCode ( ) , resp . getStatus ( ) )
Assert . assertEquals ( result_backward_with_cats_and_prefix , result )
Assert . assertEquals ( result , mcc . get ( k ) )
assertTokens ( Tokens . RP , Tokens . RP , Tokens . RP , new IntValueToken ( 1 ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertTrue ( subject . isProperlyBuilt ( ) )
Assert . assertNotNull ( role )
assertThat ( Util . intValue ( "foo" , scope ) , is ( 42 ) )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2007 , 7 , 15 ) , OFFSET_PONE ) , t )
Assert . assertEquals ( expected , filterResult )
assertThat ( target , is ( notNullValue ( ) ) )
assertEquals ( 0 , consumerPrefetch . retriesAttempted )
assertThat ( keyspace . getCql ( ) , is ( "CREATE KEYSPACE IF NOT EXISTS test WITH REPLICATION = false;" ) )
assertThat ( results , is ( Arrays . asList ( "Hello, world!" ) ) )
assertEquals ( Nd4j . create ( new double [ ] { 2.0 , 4.0 } ) , dup )
assertNull ( filterable . getFilter ( ) )
assertThat ( "generator-set-2.xml" , generatorSet , is ( expected ) )
assertEquals ( 1d , t . calculate ( series , t ) , TATestsUtils . TA_OFFSET )
assertEquals ( version1 , version2 )
assertEquals ( false , result )
assertThat ( scoping , is ( HibernateInitializer . class ) )
assertEquals ( "baz/\\n" + "  foo/\\n" + "     bar/\\n" + "      wooz 0 (S_IFREG)\\n" + "    rooz -> bar/wooz\\n" , sw . toString ( ) )
assertEquals ( NodeValue . TRUE , r )
assertNotNull ( driver ( ) . findElements ( By . tagName ( "body" ) ) )
assertNotNull ( executor )
assertEquals ( 0 , properties . size ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Registered alias should be found." , "/testAlias" , OSGiCleanMapper . map ( "/testAlias/test" , true ) )
assertEquals ( - 10. , c , 0.01 )
assertArrayEquals ( new String [ ] { "Wyalusing State Park" , "Mill Bluff State Park" , "Roche-A-Cri State Park" , "Willow River State Park" , "Amnicon Falls State Park" , "Big Foot Beach State Park" } , wiStateParks )
Assert . assertEquals ( expected , actual )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( t )
assertThat ( fe , notNullValue ( ) )
assertThat ( "String schema" , combined , matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( playlist1 , playlist2 )
assertEquals ( 1 , pagedResult . getTotalPages ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertTrue ( Initialize . isInitialized ( fs , sconf , conf ) )
assertFalse ( interfaceType . isPrimitive ( ) )
assertEquals ( "SELECT Account.Name, (SELECT Account.Name FROM ChildAccounts) FROM Account WHERE Account.Name = 'x'" , visitor . getQuery ( ) . toString ( ) . trim ( ) )
assertEquals ( 0 , element . skipLines ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemProduto ( ) . toString ( ) )
TestCase . assertFalse ( attribute . match ( t ) )
Assert . assertNotNull ( appTopology )
assertEquals ( "Expected response not seen." , "Hi There!" , response )
Assert . assertNull ( "Value should not be found." , value )
assertEquals ( Lists . newArrayList ( new Interval ( 1 , 3 ) , new Interval ( 2 , 6 ) , new Interval ( 8 , 10 ) , new Interval ( 15 , 18 ) ) , intervals )
assertThat ( read ( format , written ) , contains ( 3.14d ) )
Assert . assertEquals ( String . class , clazz )
assertThat ( "problem on problems" , monitor . isProblemWith ( REPO ) , is ( true ) )
assertThat ( allDbs . size ( ) , is ( 10 ) )
assertNull ( attr )
Assert . assertTrue ( checkPoint )
Assert . assertEquals ( StatusCodes . OK , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "with SURVEY (ID, NAME) as (select survey2.ID, survey2.NAME\\n" + "from SURVEY survey2)\\n\\n" + "from dual" , q . toString ( ) )
assertThat ( other , DateMatchers . sameSecondOfMinute ( date ) )
assertEquals ( expResult , result )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( 200.0 , wnd . rate ( ) , 0.0001 )
assertThat ( target . matchExactly ( match ) , is ( false ) )
assertThat ( loader . load ( ) , is ( 1 ) )
assertEquals ( "test-index-pattern" , defaultPattern )
assertRequest ( "POST" , "Subaccount/" )
assertEquals ( 0 , a . length )
Assert . assertEquals ( "Invalid conditions returned" , Arrays . asList ( orTest . getConditions ( ) ) , orTest . getConditions ( ) )
Assert . assertEquals ( aSub , bSub )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( results . size ( ) , 32 )
assertEquals ( expectedResult , tomcatReinforcement . invoke ( audit ) )
assertThatObjectsAreWritten ( root )
assertEquals ( "Should return Copy Tokens not found in LDAP" , "Copy Tokens not found in LDAP" , jsonObj . get ( "error" ) . getAsString ( ) )
Assert . assertTrue ( true )
testContext . assertNull ( returnedExpireValue )
assertEquals ( "XXXXXXXXXXXXXXXXXXXXXXXXXXXX" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
assertCorrectVariableInitialisation ( new long [ ] { length } , array )
Assert . assertEquals ( a * FastMath . cos ( w * v + p ) , f . value ( v ) , 0 )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEXP , v , TERM_FACTORY . getConstantLiteral ( "^Ste(v|ph)en$" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "" ) ,
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "defaulLabel,defaulLabel,defaulLabel" , executeSqlCommand )
Assert . assertEquals ( 1 , value . size ( ) )
assertThat ( this . url , is ( equalTo ( "/context/dispatcher/method" ) ) )
assertEquals ( IOTester . VALUES_OUT_PAYLOAD , buf . toString ( ) )
assertEquals ( expected , result )
assertEquals ( s3 , unassigned . iterator ( ) . next ( ) )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
Assert . assertEquals ( Sets . newHashSet ( 1 ) , parser . getSecureBindIndices ( ) )
Assert . assertEquals ( "val1" , avroRecord . get ( "key" ) . get ( 0 ) . getSchema ( ) . getFieldByName ( "id" ) . getType ( ) . getType ( ) . getName ( ) )
assertThat ( view . url ( ) , is ( expectedUrl ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertNotNull ( object )
assertEquals ( "Result" , 2 , map . size ( ) )
assertTrue ( files . length >= 4 )
assertThat ( actual , is ( "Hello World" ) )
assertTrue ( builder == newBuilder )
assertEquals ( obj . toString ( ) , "PolicyDomainInfo{sID=Test, sVersion=1, sSID=1, sSID=2, sSID=3}" )
Assert . assertEquals ( expected , actual )
assertEquals ( "Status code should be OK" , Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "root" , response . getEntity ( ) . get ( "root" ) )
DelegationTestUtil . assertDelegationToSpy ( traceeMessageProducer )
assertHeader ( header , name , value )
assertEquals ( ChrisProductReaderPlugIn . class , plugIn . getClass ( ) )
assertEquals ( 2 , context . getTableCount ( ) )
Assert . assertEquals ( distinctrow , resultsSize ( rc ) )
assertTrue ( processInstance . isEnded ( ) )
assertEquals ( markerName , value )
assertEquals ( expectedExecutionTime , actual )
assertThat ( I18nUtil . string2InputStream ( string ) , is ( "this is test string2" ) )
assertEquals ( searchSupportRest , searchSupportResource . getContent ( ) )
assertNull ( activity . getParent ( ) )
assertEquals ( "sekrit" , c . get ( Property . INSTANCE_SECRET ) )
assertThat ( result , equalTo ( false ) )
assertTrue ( elementsEqual ( edges , expected ) )
assertEquals ( expected , generator )
assertThat ( resp . statusCode , is ( Response . NOT_FOUND ) )
assertThat ( description . getTitle ( ) , is ( "A step" ) )
assertEquals ( "Wrong mapper found for RuntimeException2" , RuntimeExceptionMapper2 . class , exceptionMapper . getClass ( ) )
Assert . assertFalse ( iter . hasTop ( ) )
assertThat ( result , nullValue ( ) )
Assert . assertNotNull ( app )
Assert . assertEquals ( 2 , structure . getNumGroups ( ) )
assertNull ( result )
Assert . assertEquals ( null , p . getValue ( ) )
Assert . assertEquals ( "�肩��|灏辫�|��|浜�" , words )
assertEquals ( "test" , p . getCurrentValue ( ) )
assertThat ( this . converter . convert ( this . sourceType , this . sourceType , targetType ) , is ( equalTo ( this . converted ) ) )
assertEquals ( "00000000" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( expectedParsedResult , actualParsedResult )
assertNotNull ( "JobSubmission is null" , entity )
assertEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertResponse ( DataMockery . createREQMODWithGetRequestNoBodyResponse ( ) , response )
Assert . assertFalse ( originalId . equals ( packetExternal . getID ( ) ) )
assertTrue ( BitsInt . test ( v , v , 0 , 64 ) )
Assert . areEqual ( "2" , hs . get ( "count" ) . toString ( ) , "select count(*) as count from test1 where test1.colu2 not in('DB_D','DB_E')) and 1=1 " )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertEquals ( "a {\\n" + "  width: 2px;\\n" + "}\\n" , compilation . getValue ( ) )
assertTrue ( req_018_Util . isPeerInterestedOnBroker ( lwpcOID . getServiceID ( ) ) )
Assert . assertEquals ( "(nt_change_substitution (nt_point_location (nt_base_location (nt_number 123))) nt_change_substitution (nt_point_location (nt_base_location (nt_number A))))" , nt_change_substitution . toStringTree ( parser ) )
assertEquals ( vr . getValidity ( ) , Validity . VALID )
assertArrayEquals ( new long [ ] { 5 } , result )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( "Wrong class" , MATCH_CLASS , provider . determineConfigurationClass ( decl , Collections . singleton ( params ) ) )
assertEquals ( name . getName ( ) , request . getLogName ( ) . getName ( ) )
Assert . assertEquals ( 1 , ( int ) person . getPersonId ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( assertion , viewTest )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>" , strLinks )
assertThat ( Util . booleanValue ( "ok" , scope ) , is ( true ) )
assertMimicChangelings ( playerA , mimic )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
assertEquals ( 2 , accounts . size ( ) )
assertNotNull ( builder )
assertArrayEquals ( splitString , testString3ExpectedSplit )
assertThat ( PrettyTime . of ( Locale . GERMANY ) . withReferenceClock ( clock ) . printRelative ( PlainTimestamp . of ( 2014 , 9 , 4 , 14 , 45 ) . atUTC ( ) , ZonalOffset . UTC ) , is ( "vor 9 Stund" ) )
assertEquals ( age , 29 )
assertNull ( next )
assertEquals ( "0" , e . eval ( ) . toPlainString ( ) )
assertEquals ( "a" , lc . getLoginIPHeadLikeOr ( ) )
assertNotNull ( result . getRows ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertEquals ( 0.0 , error , 1.0e-6 )
assertEscalationEventDefinition ( "subProcessStart" )
assertSame ( GBP_2_34 , test )
assertTrue ( ( ( long ) et < ( long ) queueSize ) )
assertEquals ( ( byte ) 8 , ( byte ) result . getByteWrapperValue ( ) )
assertEquals ( "Invalid object" , o , msg . getObjectProperty ( "otherObject" ) )
assertEquals ( "HTTP/1.1 200 OK" , conn2 . getHeaderField ( 0 ) )
assertNotNull ( module )
assertEquals ( test1 . hashCode ( ) , test2 . hashCode ( ) )
assertCollectionSerialization ( expected , collection )
assertTrue ( Files . isSameFile ( p1 , p2 ) )
assertTrue ( page . asXml ( ) . contains ( "Application" ) )
assertThat ( response . getWhoisObjects ( ) , is ( empty ( ) ) )
Assert . assertEquals ( 8L , result )
assertEquals ( aMessage , res )
assertEquals ( 1 , postDTOs . size ( ) )
assertAuthenticationResult ( getCurrentTestName ( ) , s . auth ( ) , false )
assertTrue ( GlobalTransaction . getActiveTransactions ( ) . isEmpty ( ) )
assertEquals ( config . getValue ( ) , config . getValue ( ) )
assertTrue ( getSubject ( ) . isEnabledGroup ( ) )
assertArrayEquals ( "Explicit visible columns, " + i + " alignments set" , defaultAlignments , t . getColumnAlignments ( ) )
Assert . assertEquals ( versao , protocolo . getVersao ( ) )
assertEquals ( expectedNode , actualNode )
assertEquals ( 1 , hits . totalHits )
assertNull ( output )
assertEquals ( "Privacy policy generated not equal to the original policy" , cisPolicy . replaceAll ( "[\\n\\t ]" , "" ) , privacyPolicy . replaceAll ( "[\\n\\t ]" , "" ) )
assertNotNull ( provider )
assertThat ( host , is ( equalTo ( "2001:638:700:20d6::1:3a:8443/path/to/file" ) ) )
assertThat ( db . index ( node , "user" , 1 ) , is ( property ) )
assertEquals ( exceptionArgumentCaptor . getValue ( ) . getMessage ( ) , "testProto" )
assertThat ( eqler . queryCnt ( ) , is ( 33 ) )
Assert . assertEquals ( expected , s , 1e-15 )
Assert . assertSame ( managerFactory , victim . getManagerFactory ( ) )
assertMeasure ( measure , CommitsPerHourMeasure . class , 12 )
assertEquals ( testSesameTripleSubjectObjectBNode , tripleAsStatement )
assertTrue ( "Instruction " + template + " matches" , instruction . asmMatches ( template ) )
assertEquals ( expResult , result )
assertEquals ( "h2" , actual )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 1024 , cli . getOptionValue ( "block size" ) )
assertEquals ( "0: General use CPU\\n" + "1: CPU not available\\n" + "2: Thread[logger,5,main] alive=true\\n" + "3: Thread[engine,5,main] alive=false\\n" + "4: General use CPU\\n" + "5: CPU not available\\n" + "6: Thread[main,5,main] alive=true\\n" + "7: Thread[tcp,5,main] alive=false\\n" , actual )
assertEquals ( "Incorrect qualifyFreq" , 6000 , ( int ) response . getQualifyFreq ( ) )
assertEquals ( 0 , graph . getVertexSet ( oid . get ( ) ) . size ( ) )
assertEquals ( 1 , presenter . getLastSearch ( ) . size ( ) )
Assert . assertEquals ( 2 , retireable . getRetiredBy ( ) . getId ( ) . intValue ( ) )
assertEquals ( "From Server true" , client . testPrimitiveTypes ( request ) . getOut ( ) )
assertFalse ( "adapter supports unsupported return type" , result )
assertSame ( a1 , a2 )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( DecodeQualification . SUITABLE , decodeQualification )
assertEquals ( message . toString ( ) , sb . toString ( ) )
assertThat ( result , instanceOf ( type ) )
assertNotNull ( crs )
assertEquals ( 1 , env . get ( ) . length ( ) )
assertThat ( response . getContent ( ) , is ( equalTo ( update ) ) )
assertEquals ( 1L , count )
assertThat ( result , is ( derivedFrom ) )
assertEquals ( i , num )
assertThat ( view . elementIsPresent ( By . id ( "some-element" ) ) , is ( false ) )
assertTrue ( true )
Assert . assertNotNull ( ticket )
Assert . assertEquals ( ValidationResult . Result . ERROR , sink . validate ( null ) . getStatus ( ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0x1F , ( byte ) 0xCC , 0x3B , 0x60 , 0x59 , 0x4B , 0x08 , 0x4E , ( byte ) 0xB7 , 0x24 , ( byte ) 0xD2 , ( byte ) 0xC6 , 0x29 , 0x7E , ( byte ) 0xF3 , 0x51 } , asn1 . getOctets ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( header , fixture . getHeader ( ) )
assertEquals ( webSocketHandler . calculateHeaderSize ( WebSocketHeader . PAYLOAD_LARGE_MAX ) , WebSocketHeader . MAX_HEADER_LENGTH_MASKED )
assertEquals ( WashingMachineState . WASHING , washingMachine . getWashingState ( ) )
Assert . fail ( )
assertNotNull ( appContext . getResourceDocument ( new StringBufferInputStream ( xml ) ) )
assertTrue ( params . isEmpty ( ) )
assertEquals ( expResult , result , 0.000001 )
assertNotNull ( result )
assertNoResults ( net , add1 )
assertThat ( b , is ( true ) )
assertThat ( supported , is ( false ) )
assertThat ( cursor . proceedTo ( 'c' ) , is ( true ) )
assertTrue ( capabilities . hasLayer ( "Layer" ) )
assertEquals ( 3 , item . getInt ( ) )
assertTrue ( result . size ( ) == 1 )
Assert . assertEquals ( "[6, 2, 8, 1, 4, 3, 5]" , values . toString ( ) )
assertNull ( out )
assertEquals ( jv2 , jv1 )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "test13" , res . result ( ) )
assertEquals ( "rf-dg-body" , ( ( HtmlElement ) dataGrid . getFirstByXPath ( "tbody[@id='dataGrid2:dgb']" ) ) . getAttribute ( "class" ) )
assertThat ( objectMessages . getErrors ( ) . size ( ) , is ( 0 ) )
assertNotNull ( path )
assertEquals ( "world" , result . getString ( "hello" ) )
assertErrorEventDefinition ( "end" , "myErrorCode" , null )
assertEquals ( expected , actual )
assertElementPresent ( By . className ( "v-datefield-popup" ) )
assertEquals ( "OK" , result . getResult ( ) )
assertSame ( p3 , result )
assertSame ( stringMessageBodyWriter , applicationProviders . getMessageBodyWriter ( String . class , null , null , TEXT_PLAIN_TYPE ) )
assertNotNull ( uploadResult . getUploads ( ) . get ( 0 ) . getTargetNamespace ( ) )
assertThat ( students . size ( ) , is ( 1 ) )
assertNull ( generator . readNextToken ( ) )
assertThat ( axioms , hasItem ( axiom ) )
assertArrayEquals ( "Arguments" , null , new ConciergePlatformBuilder ( m_bundleContext , "version" ) . getArguments ( m_platformContext ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "SELECT something FROM tbl_name WHERE DATE_SUB(CURDATE(),INTERVAL 30 DAY) <= date_col;" , text )
assertEquals ( current . < String > getAs ( field . name ( ) ) , format . format ( new Date ( currentTimeMillis ) ) )
assertEquals ( "void dest1()" , toString ( dest ) )
assertThat ( typeMapping . getNumericType ( 19 ) , is ( equalTo ( Integer . class ) ) )
assertEquals ( "b" , commandInvocation . args ( ) [ 1 ] )
assertThat ( errors . getAllErrors ( ) , hasSize ( 0 ) )
assertEquals ( "Expected a quota violation" , 5.0 , sensor . getQuota ( ) , 0.0 )
assertEquals ( before , after )
Assert . assertArrayEquals ( testString . getBytes ( ) , outputStream . toByteArray ( ) )
assertSnake ( "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" )
Assert . assertTrue ( row . matches ( guess ) )
assertEquals ( expected , actual )
assertEquals ( file . getName ( ) , expected , html . trim ( ) )
Assert . assertNotNull ( customerprofileId )
assertEquals ( expected , asmResult )
assertEquals ( 1 , processorsFactory . getPreProcessors ( ) . size ( ) )
assertTrue ( page . asXml ( ) . contains ( "Great
assertFuzzy ( min , result , createFromGiven ( 20.0 , 10 ) )
assertEquals ( connMock , connection )
assertTrue ( className . equalsIgnoreCase ( Number . class . getSimpleName ( ) ) )
Assert . assertNotNull ( testSession )
assertNotNull ( fileInfo )
assertFalse ( "unexpected value" , value )
assertEquals ( "yarn" , job . getConfiguration ( ) . get ( "mapreduce.framework.name" ) )
assertEquals ( logLine , "log line" )
Assert . assertNotNull ( c )
assertEquals ( "Old event reporter not ran" , 1 , controller . scrubOldEventReporter ( 1 ) )
assertProcessInstanceCompleted ( processInstance )
Assert . assertNotNull ( tested . prepareESBulkRequestBuilder ( ) )
assertEquals ( player . getMinions ( ) . size ( ) , 2 )
Assert . assertEquals ( expected , links )
Assert . assertTrue ( success )
assertThat ( option . isNull ( ) , is ( true ) )
Assert . assertNull ( identifierType )
Assert . assertEquals ( ste . toString ( ) , frame . toString ( ) )
assertEquals ( expected , actual )
Assert . assertNull ( retireable . getRetireReason ( ) )
assertEquals ( "2015-02-28" , mapper . readFrom ( columns ) )
Assert . assertEquals ( 0.0 , error , 1.0e-11 )
Assert . assertNotNull ( hostname )
assertThat ( main . getResourceName ( ) , equalTo ( classNameToPath ( MARKDOWN_ROOT_CLASS ) + ".class" ) )
assertEquals ( expecting , result )
assertSame ( 0 , ids . size ( ) )
assertNull ( p2 )
assertThat ( InterfaceWrapperHelper . getModelTableNameOrNull ( testModelRef ) , is ( nullValue ( ) ) )
assertEquals ( "d/bitcoin" , new String ( ns . getOpName ( ) . data , "ISO-8859-1" ) )
assertThat ( e . hasMoreElements ( ) , is ( false ) )
Assert . assertNotNull ( "The TestRun should not be null" , actualTestRun )
Assert . assertEquals ( "Incorrect Compare Type" , AbstractCompare . CompareType . EQUAL , compare . getCompareType ( ) )
assertEquals ( 5L , count )
assertEquals ( expected , result )
Assert . assertTrue ( docOut == docIn )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  ok " ) )
assertEquals ( "the_string" , obj )
Assert . assertFalse ( result . isEmpty ( ) )
Assert . assertEquals ( 3 , resourceList . size ( ) )
assertTrue ( ! result )
assertEquals ( "llvalue1" , result )
assertEquals ( 1 , rulesFired )
assertFalse ( prefs . matches ( t ) )
assertOut ( "var /** @type {URIError} */ a = new URIError()" )
assertTrue ( history . contains ( transition ) )
assertThat ( bread . getProducts ( ) . size ( ) , is ( 1 ) )
assertEquals ( "unittest" , ns . iterator ( ) . next ( ) )
assertEquals ( ( ( ObjectWithOptions ) options . optOp ) . required , 10101 )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertThat ( description . toString ( ) , is ( "got <3> cell(s) on row <1> expected <2> sheet \\"Sheet1\\"" ) )
assertThat ( pwd . getuid ( ) , is ( posix . getuid ( ) ) )
assertEquals ( "John Smith" , built . getId ( ) )
assertEquals ( expected , sb . toString ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response5 . getResponseObject ( ) )
assertThat ( response . getStatus ( ) , equalTo ( 200 ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( TestService . SERVICE , TestService . get ( ) )
assertThat ( list . size ( ) , is ( 1 ) )
assertEquals ( "V2 Comment" , wrapper . getComment ( ) )
assertThat ( encodedURL , equalTo ( URL_VALUE ) )
assertEquals ( "bar" , cl . getOptionValue ( "foo" ) )
assertEquals ( padded ( OBJECT_OVERHEAD + OBJECT_REF ) , ThreadTrackingContext . getBytes ( ) )
assertEquals ( expecting , found )
assertThat ( response . getBody ( ) , equalTo ( "Hello World" ) )
Assert . assertNotNull ( devBean )
assertEquals ( value , new String ( Base64 . decode ( value ) ) )
assertEquals ( "dois reais" , actual )
assertOut ( "<Button />" )
assertEquals ( "submission percentage complete was not properly returned" , 0.0f , percentageComplete , DELTA )
assertTrue ( "Fail to delete role" , service . checkRoleExists ( r . getId ( ) ) )
assertFalse ( "result should be false" , result )
assertEquals ( "LIMIT 5" , statement . toString ( ) )
assertEquals ( Result . FAIL , notgroup . apply ( item ) )
assertEquals ( "<p><del>This is a paragraph</del></p>" , result )
Assert . assertEquals ( 401 , statusCode )
assertEquals ( 1 , visitedInstructions . size ( ) )
assertThat ( grid . getRowCount ( ) , is ( 0 ) )
assertTrue ( pi . invoke ( message ) )
Assert . assertFalse ( nics . isEmpty ( ) )
assertEquals ( "5.6.7" , version )
assertEquals ( toPercentage ( MAX_ZOOM ) , zoomUI . getPercentageZoom ( ) )
Assert . assertNull ( this . manager . get ( this . family1 , this . person1 ) )
assertEquals ( renderGroupIdArtifactIdVersionOptionalResult ( ) , result )
assertEquals ( 1L , result . getTime ( ) )
Assert . assertFalse ( containerResource . getContents ( ) . iterator ( ) . hasNext ( ) )
assertCharlieAndDelta ( alpha )
Assert . assertEquals ( "41 minutes ago" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( dataCollectionState )
assertEquals ( 5 , vowelCount )
assertFactorization ( decomposition , base )
assertNull ( targetWeakReference . get ( ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( books , hasItems ( new Book ( "New Book #1" , 1 ) , new Book ( "New Book #2" , 2 ) , new Book ( "New Book #3" , 3 ) , new Book ( "New Book #4" , 4 ) ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( expecting , found )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( l ) . intValue ( ) )
assertEquals ( RIB_NOT_FOUND , this . output . toString ( ) )
assertTrue ( result >= 33f && result <= 42f )
assertFalse ( event . isPresent ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getTimestamp ( ) == null )
assertEqualsIgnoreLineEnding ( Json . pretty ( rep ) , "{\\n" + "  \\"name\\" : \\"hi!?\\"\\n" + "}" )
assertThat ( result , isFailedCommand ( ) )
Assert . assertThat ( i , is ( 3 ) )
assertTrue ( aNumber == result )
assertEquals ( new Float ( 0 ) , minPreference )
assertOut ( "var /** @type {number} */ a = parseInt(\\"666\\", 10)" )
Assert . assertEquals ( configNew , configOld )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
given ( ) . port ( jettyPort ) . log ( ) . all ( ) . accept ( ContentType . JSON ) . when ( ) . get ( "/openapi" ) . then ( ) . log ( ) . all ( ) . assertThat ( )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( r . size ( ) , 0 )
assertEquals ( mComposite , mRootDir . extendFromWriteLocked ( LockMode . WRITE ) )
assertEquals ( "no-cache" , cc . toString ( ) )
Assert . assertEquals ( choice1 , choice2 )
assertEquals ( ConcreteSubclass . class , fr2 . getSource ( ) . getVariableClass ( ) )
assertThat ( page . getTextValue ( ) , is ( "Hello" ) )
assertNull ( scanner . parse ( "0.1" ) )
assertEquals ( "hdfs://uri1:8200/blah" , uri . getName ( ) )
assertEquals ( "california street, ca" , real )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertTrue ( true )
assertSame ( platformTransactionManager , configuration . getTransactionManager ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertEquals ( NAME_NODE , action . getNameNode ( ) )
Assert . assertFalse ( policy . isResponseCacheable ( "GET" , response ) )
assertTrue ( "Chars not flushed" , new String ( buf , 0 , buf . length ) . equals ( testString ) )
assertDirectoryNotEmpty ( CSS_LOCATION )
assertEquals ( "Wrong number of splits in database" , splits . size ( ) , allRecordNum )
assertEquals ( "[x=10.0][y=0.0]" , s . getDeliveryLocation ( ) . getId ( ) )
FactorDecompositionTest . assertFactorization ( lPoly , decomposition )
assertCursor ( meta . pofClassAttribute , 1 , 1 , 1 , 10 , 17 )
Assert . assertEquals ( expectedLoginId , loginId )
assertEquals ( "Must return self" , editor , result )
assertEquals ( "Wrong relationship." , p2 , f . getRelationshipTo ( ) )
assert
assertEquals ( "bar" , result )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertNotNull ( personStructure )
assertEquals ( "test" , beanWrapper . getValueFromField ( "hiddenProperty" ) )
assertEquals ( "[{\\"groupName\\":\\"SomeCounterGroupName\\",\\"counters\\":[{\\"counterNam" + "e\\":\\"AnotherCounterName\\",\\"value\\":4},{\\"counterName\\":\\"SomeCount" + "erName\\",\\"value\\":3},{\\"counterName\\":\\"YetAnotherCounterName\\",\\"v" + "alue\\":4}]}]" , json )
assertEquals ( "Hello world!" , exp )
Assert . assertTrue ( readable )
assertThat ( messageIdLocalPart , is ( "No-Message-Id." ) )
assertEquals ( broker , Optional . of ( CLUSTER ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
Assert . fail ( "Expected IllegalStateException" )
assertFalse ( ca . isStrokeEnabled ( ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertTrue ( processesList . size ( ) > 0 )
context . assertIsSatisfied ( )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) ReadPreference . preferSecondary ( ) ) )
assertOut ( "var /** @type {number} */ a = 0, /** @type {number} */ b = 0, /** @type {number} */ c = 0" )
assertEquals ( expected , set . toArray ( ) )
assertEquals ( 6 , services . size ( ) )
Assert . assertFalse ( verifyTest ( builder ) )
assertPlanMatches ( sort )
assertEquals ( ImmutableList . of ( $2 ( 4 , "foot" ) , $2 ( 4 , "ball" ) , $2 ( 6 , "bazzar" ) ) , Lists . newArrayList ( out . materialize ( ) ) )
Assert . fail ( "build listing failure" )
Assert . assertEquals ( testDN , actual . getUserDN ( ) )
assertEquals ( "ORACLE" , rootNode . getProperty ( StandardDdlLexicon . PARSER_ID ) )
assertNotNull ( count )
Assert . assertTrue ( marshalled . contains ( Namespace . CURRENT . getUriString ( ) ) )
assertEquals ( expectedCsr , csr )
assertFalse ( alive )
assertEquals ( content , result )
assertEquals ( "Should get a 404 response" , HttpStatus . NOT_FOUND , mongodbFeedSource . getFeed ( getFeedRequest ) . getResponseStatus ( ) )
assertEquals ( "Mismatched number of flow outputs" , 1 , flowRpcAddMultipleInput . getFlowCount ( ) )
assertEquals ( format ( "%s should have been valid=%s but was valid=%s" , name , expectedResult , result ) , expectedResult , result )
Assert . fail ( "Should have thrown ProtocolException" )
Assert . assertNull ( "Should be null, as it is also null in the original process instance on the server." , returnedProcessInstanceId )
assertEquals ( "Expected 0 results!" , 0 , n )
shorts . assertNotLessThan ( description , actual , expected )
assertThat ( result , is ( jsonBoolean ( true ) ) )
assertThat ( subject . toFilterExpression ( ) , is ( "(osgi.os=macosx)" ) )
assertNotNull ( "Configuration for test REST must not be null." , configuration )
assertEquals ( EJBTransactionRolledbackException . class , cause . getClass ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( list . size ( ) > 0 )
rule . assertScenarioEnded ( )
Assert . assertFalse ( ldapConnection . context ( PROVIDER_URL , MANAGER_DN , MANAGER_PWD ) . hasMore ( ) )
assertEquals ( expected , actual )
assertEquals ( "aaa" , NamespaceManager . get ( "aaa" ) . getNamespace ( ) )
assertEquals ( "PT15M" , microdata . getFirstProperty ( "cookTimeDateTime" ) )
assertEquals ( expected , testSet . getTestResults ( ) . get ( 0 ) . getSubtests ( ) . get ( 0 ) . getName ( ) )
assertEquals ( SCHEME_DOMAIN , shortForm )
assertEquals ( "Successfully registered applications: [source.foo, sink.bar]" , result )
Assert . assertEquals ( "unexpected xml protocol values" , expected , dataObjCopyInp . getParsedTagsXML ( ) )
Assert . assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertThat ( "new instance is in the new environment" , then . getTime ( ) , is ( now . getTime ( ) ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Leave/>" , elem . toXml ( ) )
assertPotentialOwnerIsNotPresent ( )
assertThat ( actionUrl , is ( "http://something" ) )
assertEquals ( expected , actual )
assertEquals ( 1 , r )
assertThat ( request , instanceOf ( VaadinLiferayRequest . class ) )
assertTrue ( true )
assertEquals ( documento , documentoModificado )
assertEquals ( Integer . parseInt ( EVSE_ID . getId ( ) ) , unlockConnectorArgument . getValue ( ) . getConnectorId ( ) )
assertTrue ( user . getRoles ( ) . contains ( user . getUserRole ( ) ) )
assertThat ( resources . size ( ) , is ( 5 ) )
assertEquals ( "1. Ctrl-Enter button pressed" , getLogRow ( 0 ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( "answer=42" , actual )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertEquals ( ImmutableMap . of ( "foo" , newArrayList ( "bar" ) ) , response . getStringHeaders ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( elements . size ( ) , dto . getElements ( ) . size ( ) )
assertEquals ( Integer . valueOf ( HttpServletResponse . SC_OK ) , status . get ( ) )
assertThat ( newerBundleInfo . isNewerVersionThan ( olderBundleInfo ) , is ( true ) )
Assert . assertEquals ( 0 , lines . length )
Assert . assertTrue ( response . getStatus ( ) == NO_CONTENT . getStatusCode ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_" + file , destinationFolder , "diff_" ) )
Assert . assertEquals ( 1 , list . size ( ) )
Assert . assertEquals ( "" , result )
assertEquals ( 1 , testMap . keySet ( ) . size ( ) )
assertEquals ( "/mode:something/jcr:else" , result )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( path , CircusTrainCopyListing . getRootPath ( conf ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"column 1\\",\\"type\\":\\"convertedType\\",\\"nullable\\":true,\\"defaultValue\\":\\"default\\"}]}]" , content )
assertEquals ( "Unexpected message received!" , newMessage , announcementMessage )
assertEquals ( MessageController . ERROR , MessageController . update ( cell , "3" ) )
assertThat ( "default provider" , sut . getProvider ( ) , is ( notNullValue ( ) ) )
assertValid ( "//s:Body/w:sendNotification" , wsdls )
assertEquals ( "test" , f . getType ( ) )
assertEquals ( expected , actual )
assertTrue ( strategy . reloadingRequired )
assertTrue ( pages . contains ( commandPagePresenter ) )
assertEquals ( invalidUrl , new URL ( "http://127.0.0.1" ) )
assertEquals ( "UPDATE person SET first_name = ?, last_name = ?, favourite_number = ? WHERE favourite_number = ? AND first_name != ?" , sql . trim ( ) )
assertEquals ( 100 , frame . getLong ( ) )
Assert . assertEquals ( input , HtmlSanitizerUtil . sanitize ( input ) )
assertNotNull ( result )
assertThat ( renderer . getShortForm ( entity ) , is ( "rdfs:isDefinedBy" ) )
assertEquals ( key1 , key2 )
ModelTestBase . assertIsoModels ( expected , y )
assertEquals ( "http://example.org/service/Observation/Service=SOS&VERSION=1.0.0&REQUEST=GetObservation&OFFERING=urn:MyOrg:offering:1&OBSERVEDPROPERTY=urn:ogc:def:phenomenon:OGC:temperature,urn:ogc:def:phenomenon:OGC:windspeed&TIME=2009-02-01/2009-02-01" , a . getStringNode ( "/wps:Observation" ) )
assertTrue ( fieldDefinitionName . isUnique ( ) )
assertDateEquals ( new DateTime ( 2013 , 5 , 20 , 15 , 30 , 0 , 0 ) , date )
assertOut ( "public interface IA extends IB, IC, ID {\\n}" )
assertEquals ( "false abc\\n" , found )
assertNotNull ( "The manager should not be null." , oldManager )
assertThat ( testDetector . isElementPresent ( By . tagName ( "result" ) ) , is ( true ) )
assertTrue ( comparePomFiles ( reactorProjects ) )
rule . assertScenarioEnded ( )
assertTrue ( containsJob ( vrp . getJobs ( ) . get ( "1" ) , getRoute ( "21" , Solutions . bestOf ( solutions ) ) ) )
Assert . assertTrue ( "should have gotten a true on this delete" , gotError )
assertEquals ( 0 , runtimeService . createEventSubscriptionQuery ( ) . count ( ) )
assertEquals ( "1.1" , decoder . encode ( BigDecimal . valueOf ( 1 , 1 ) , DOT_DEC_DELIMITERS ) )
assertEquals ( "_cat/allocation/testNode" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( output . getValue ( ) , equalTo ( "This is a test!" ) )
assertThat ( Files . exists ( Paths . get ( stringFromStdout ) ) )
assertArrayEquals ( "Mismatched digest for " + Hex . toHexString ( preMasterSecret ) + " & " + Hex . toHexString ( shaDigest1 ) , Hex . toHexString ( shaDigest3 ) , 0 )
Assert . assertEquals ( 1 , result )
assertEquals ( bytesString , bodyString )
assertFalse ( firstConfig . equals ( secondConfig ) )
Assert . assertNotNull ( translatedQuery )
Assert . assertTrue ( "We should have a complete header" , bufPos != - 1 )
Assert . assertEquals ( - 1L , ( long ) response . getBodySize ( ) )
assertEquals ( witness , node )
Assert . assertEquals ( expectedPath , normalizedPath )
child . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertEquals ( "xxxxyy" , snapshot . readUtf8 ( ) )
assertThat ( condition . isSatisfied ( ) , is ( true ) )
assertEquals ( mockHexBinaryValue , result )
assertNotNull ( testResult )
assertEquals ( 14 , metrics . size ( ) )
assertThat ( value , equalTo ( "set_VALUE_get" ) )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertThat ( data . getMessage ( ) , is ( "This is a warning" ) )
assertEquals ( hsr1 , hsr2 )
arrays . assertDoesNotContainDuplicates ( description , actual )
assertEquals ( "select length(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( fieldDefinition , res )
Assert . assertEquals ( 0.0 , sample [ 0 ] , 0.1 )
assertEquals ( projectName , newName )
Assert . assertEquals ( generatedStrPath , expectedStrPath )
assertTrue ( impl . isApiToken ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertNull ( array )
assertTrue ( rt . getEventType ( ) . equals ( EventType . FSERVER_ZK_ENTITYGROUP_CLOSED ) )
assertTrue ( nullCap == null )
assertDelete ( )
assertThat ( PlainTimestamp . axis ( ) . getBaseUnit ( DIGITAL_HOUR_OF_DAY ) , is ( unit ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( imageA , LoopBuilder . getImages ( imageA , imageB ) )
assertEquals ( "ISA" , loop . s )
assertThat ( command . accept ( state ) , is ( true ) )
assertTrue ( actual . isEmpty ( ) )
assertLog ( Log . DEBUG , "test debug argument" )
assertFalse ( "Data was not removed" , appDataTestInstanceRemoved . getValues ( ) . containsKey ( "viewcount" ) )
assertThat ( ints . length , is ( 2 ) )
assertThat ( parameters , is ( "?searchView=own&offset=5&limit=10&orderBy=leastTimeLeft&show=running&minSupportCount=50" ) )
assertEquals ( sa , result )
assertEquals ( Optional . empty ( ) , path )
Assert . assertTrue ( intersect instanceof EmptyRange )
assertTrue ( "Expected a timeout" , schedulerLatch . await ( DELAY_MS , TimeUnit . MILLISECONDS ) )
assertTrue ( Pattern . matches ( "(?s).*First0.*Last0.*First1.*Last1.*First2.*Last2.*" , page . asXml ( ) ) )
assertThat ( ctrl . createNiceControl ( ToMock . class ) , is ( ToMock . class ) )
assertTrue ( incrementalReasoner . getProgressReport ( ) . getTotalMillis ( ) > 0 )
assertThat ( properties . getValue ( ) , is ( "test" ) )
assertEquals ( 0.8125 , m , 1e-3 )
assertNotNull ( httpStack )
assertTrue ( i1 . contains ( new DiscreteInterval ( 1 , 4 ) ) )
Assert . assertEquals ( new URI ( "http://absolute-url.fr/readme.txt" ) , UriUtils . buildNewURI ( new URI ( url ) , suffix ) )
assertEquals ( result , range . exclude ( other ) )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) )
assertEquals ( expectedReference , summary . getReference ( ) )
assertNotNull ( result )
assertTrue ( p . matcher ( tags ) . matches ( ) )
assertEquals ( mockedJobResult , jobResult )
assertNotNull ( result )
assertThat ( tupleComparator . compare ( new Tuple ( - 1 , - 1 ) , new Tuple ( 1 , - 1 ) ) , is ( - 1 ) )
assertEquals ( BuilderFactory . start ( ) . addMinKey ( "a" ) . build ( ) , doc )
assertObjectEquals ( "[null,{f:'c'},{f:'a'},{f:'b'},{f:'c'}]" , p . run ( bs , in , sa ) )
assertThat ( caughtException ( ) , instanceOf ( TaxServiceUnavailableException . class ) )
assertTrue ( provided instanceof HTableFactory . HTableFactoryImpl )
assertEquals ( expected , built )
runner . assertNotValid ( serviceImpl )
assertNotNull ( op )
assertNotNull ( injector )
Assert . assertEquals ( "URI don't match and Hnadshake  exception is not thrown" , true , exThrown )
assertEquals ( Code . INTERNAL , statusCaptor . getValue ( ) . getCode ( ) )
assertInState ( STATE . STOPPED , services )
assertEquals ( expResult , result )
assertTrue ( lastRefLog . getComment ( ) . startsWith ( "branch: Created from branch" ) )
Assert . isTrue ( orders . get ( 0 ) . getOrderId ( ) . equals ( 50000280834672L ) )
assertEquals ( "(1,2,3,4,5)" , asSequenceStr ( result ) )
Assert . assertNull ( dataModelLoadBalancer . getHalfClosed ( ) )
assertFalse ( satisfiesPrecondition ( cu ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , empty ( ) )
assertTrue ( i + ", " + file . getAbsolutePath ( ) , file . delete ( ) )
Assert . assertEquals ( 2 , count )
assertFalse ( mdxBaseComponent . prepareQuery ( "select * from table" ) )
Assert . fail ( "Expect an invalid message size" )
quote . assertIsSatisfied ( )
assertThat ( target , is ( notNullValue ( ) ) )
Assert . assertTrue ( "Queue name not encoded correctly into job history file" , jobHistoryFile . contains ( QUEUE_NAME_WITH_DELIMITER_ESCAPE ) )
assertThat ( builderAnnotated . getPicoContainers ( ) . size ( ) , is ( 1 ) )
Assert . assertEquals ( expected , actual )
assertNotNull ( result )
assertThat ( info . getServerService ( SERVER ) , nullValue ( ) )
assertEquals ( 0 , findings . size ( ) )
assertEquals ( "Option value" , "simpleOption" , commandLine . getOption ( "simpleOption" ) )
Assert . assertEquals ( expectedCarIds , actualCarIds )
assertEquals ( "LOWERCASE" , dataSet . applyCaseInsensitivity ( Orthography . LOWERCASE ) )
assertOut ( "var /** @type {Object} */ a = function() {\\n\\tvar self = this;\\n\\treturn -1;\\n}" )
Assert . assertEquals ( null , runEnv . removeNextStepPosition ( ) )
assertContains ( indels , 100 , "G" , "GGATCAT" )
assertFalse ( problem )
assertEquals ( "sayHiRpcLiteralReq" , sayHi . getLocalPart ( ) )
Assert . fail ( "Should have thrown exception" )
assertEquals ( intersection , set2 )
assertFeatureValues ( expected , "document test missing all" , "document test missing all" , getChain ( ) )
assertEquals ( EX_10_A_OUTPUT , set2 . validateAndRemovePkcsN7 ( EX_10_A_INPUT ) )
assertThat ( afterStartAction , instanceOf ( CustomAfterStartActionInstantiator . class ) )
assertArrayEquals ( expectedFileModes , fileModesFromString )
assertEquals ( 1 , model . getObject ( ) . getPersons ( ) . size ( ) )
assertVersionAndValue ( ref , initialVersion , initialValue )
assertDirectories ( "directories" , "foo" , "bar" )
assertNull ( fieldName )
assertFalse ( proxyHttpHeader . isValid ( ) )
assertEquals ( "The provided vndErrors parameter must not be null." , e . getMessage ( ) )
Assert . assertEquals ( xmlEsperado , medicamento . toString ( ) )
assertEquals ( le . getMessage ( ) , "local1:/etc" )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\t" } } ) ) )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( textEditor , defaultEditorAdapter . getTextEditor ( ) )
assertEquals ( EXPECT . getParentFile ( ) . getAbsolutePath ( ) , value )
assertEquals ( 1 , subscriptions . get ( ) )
assertEquals ( "3" , result )
assertEquals ( object . _id , result . _id )
assertArrayEquals ( sourceData , destination . get ( ) , DELTA )
resp . assertContentEquals ( "涓���" )
assertEquals ( HTTP , epp . getTransport ( ) )
assertNotNull ( "Unread Messages are not null" , messages )
assertEquals ( size , deerletRedisClient . get ( "testKey" ) . size ( ) )
assertTrue ( projectId . equals ( projectId ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Refer>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Refer>" , elem . toXml ( ) )
assertThat ( GraphicsUtilities . getPixels ( image , 0 , 0 , 1 , 1 , null ) [ 0 ] , is ( 0 ) )
assertEquals ( "SQL query does not match" , result , test )
Assert . assertEquals ( "sky" , sky . getProperty ( "other" ) )
assertNotNull ( firstTask )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> strings . set ( 2 , "out of bounds" ) )
assertThat ( copy , CalendarMatchers . sameHour ( anHourFromNow ) )
assertEquals ( 1 , rules )
assertTrue ( "Component should be focused" , isFocused ( ) )
Assert . assertEquals ( "�械�械蟹 3 �械蟹邪写" , t . format ( new Date ( 1000 * 60 * 3 ) ) )
assertThat ( Functions . blobstoreUrl ( url ) , is ( notNullValue ( ) ) )
assertTrue ( wc . get ( Boolean . class ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNotNull ( "No configuration" , config . getConfigurationByName ( "foo" ) )
assertEquals ( null , testSet . getPlan ( ) . getComment ( ) )
assertNotNull ( group20 )
Assert . assertEquals ( 2 , resultNotes . size ( ) )
assertEquals ( "xpath expression not found" , "/foo/bar" , expr . getValue ( ) )
assertFalse ( peek . hasNext ( ) )
assertEquals ( testResult , result )
assertEquals ( expectedSplits , new TreeSet < > ( createdSplits ) )
assertEquals ( expecteds , actuals )
assertSame ( exIn , exOut )
Assert . assertEquals ( "Double decode brackets not correct" , out , WebUtilities . doubleDecodeBrackets ( in ) )
assertEquals ( HELLOWORLD_URI + "out/results" , results . getURI ( ) . toASCIIString ( ) )
assertTrue ( m . nextShort ( ) > - 1 )
assertEquals ( "SQL query does not match" , result , test )
assertEquals ( out . get ( ) , LARGE_NUM + 1 )
assertEquals ( "ec2.us-east-1.amazonaws.com" , awsClient . getEndpoint ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( Arrays . asList ( "testurl" ) , doc . getContentField ( "some_output_field" ) )
assertThat ( equal , equalTo ( true ) )
assertArrayEquals ( expected , actual , 0.0 )
assertFalse ( result )
assertEquals ( "http://java.example.com:8080/foo/bar/qux/quux" , got . toString ( ) )
assertThat ( columns , is ( expected ) )
assertEquals ( newName , instrument . getFriendlyName ( ) )
assertEquals ( "Wrong external id returned" , test . getExternalId ( ) , result . getExternalId ( ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( "CONSUME" , s . history . get ( 0 ) )
assertEquals ( foo1 , foo2 )
assertEquals ( "OK" , reply )
assertTrue ( converter . canConvert ( IndexQuote . class ) )
assertEquals ( result , one )
assertEquals ( "SELECT Contacts.Name FROM Contacts WHERE Contacts.Name = 'x' AND Contacts.Name = 'y'" , visitor . getQuery ( ) . toString ( ) . trim ( ) )
assertEquals ( 4 , instance . getFeatures ( ) . size ( ) )
Assert . assertNotNull ( str )
assertArrayEquals ( expectedCreateSchemaStmts , statements . getLockCreateSchemaStatements ( 2 ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) LIKE $literal" ) )
assertThat ( ff . parse ( "20160504" ) , is ( PlainDate . of ( 2016 , 5 , 4 ) ) )
Assert . assertFalse ( exclusion1 . equals ( exclusion2 ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "myInvisibleButton" , element . getCssValue ( "border-width" ) )
assertions . doesNotContain ( value , index )
assertEquals ( CloseReason . NO_ACCEPTABLE_VERSION , pair . clientRecorder . q . take ( ) )
assertEquals ( 6. * 3600. + 12. * 3600. , sec , 0.01 )
assertEquals ( "Customer1" , nameOfCustomer1 )
assertEquals ( "JVM metrics are not empty" , 0 , metrics . size ( ) )
Assert . assertTrue ( readable )
assertEquals ( out , frame2 )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( "C" , letterGrade )
assertFalse ( attributeDesc . isVersion ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( "Expected " + rowData . size ( ) + " actual " + rowData . size ( ) , expected , actual )
assertTrue ( sql . contains ( "select * from test_set where test_set.test_id = :test_id" ) )
assertEquals ( expResult , result )
assertEquals ( newValue , wrapped . get ( key ) )
assertThat ( paths , hasSize ( 0 ) )
assertThat ( mt . minus ( 999999999 , SI . NANOSECONDS ) , is ( MachineTime . ofSIUnits ( 4 , 0 ) ) )
Assert . assertEquals ( 183 , mapper . updateCount ( new Country ( ) ) )
assertEquals ( "Test" , filter . getResultName ( ) )
Assert . assertTrue ( ( double ) loss == 0.01 )
assertFalse ( selected )
assertEquals ( parse ( "b^2*c^2+b^3+a*b*c^4+a*b*c^2+b^2*c^2+b^3+a*b^2*c^2+b^3*c^2+b^4" , domain , LEX , vars ) , r )
assertThat ( this . state . getSortColumn ( ) , is ( equalTo ( sortColumn ) ) )
Assert . assertEquals ( expected , result )
assertFalse ( evaluator . shouldProxyHost
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
Assert . assertEquals ( count , gt . count ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( model . weekOfMonth ( ) . incremented ( ) ) , is ( PlainDate . of ( 2000 , 12 , 9 ) ) )
assertEquals ( "return value for function return type" , "object" , strategy . invoke ( invocationReturning ( Object . class ) ) )
assertEquals ( "Conversion did not match" , value , to )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithMergeRegion_expected.xls" ) )
Assert . assertEquals ( "2.5" , stormSqlExpression . asString ( ) )
Assert . assertEquals ( token , RequesterContextHolder . getContext ( ) . getToken ( ) )
Assert . assertEquals ( "110101198901084517" , result . toStringUtf8 ( ) )
assertEquals ( 2 , post . getComments ( ) . size ( ) )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
assertEquals ( expected , actual )
Assert . assertTrue ( true )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"ask\\":{\\"choices\\":{\\"value\\":\\"[1 DIGIT]\\"},\\"say\\":[{\\"value\\":\\"Please say a digit\\"}],\\"bargein\\":true,\\"timeout\\":30.0,\\"required\\":true}}]}" )
Assert . assertEquals ( 4 , orders . size ( ) )
assertSame ( val , ConfigUtils . getMap ( config , val , "no-value" ) )
assertTrue ( rule . getCondition ( ) . matches ( event ) )
assertEquals ( expected , ColumnRanges . rangeAtNode ( compare ) )
assertThat ( byValue . getSingleResult ( ) . getF ( ) , equalTo ( f1 ) )
assertEquals ( "test" , id )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
editor . assertNoHover ( "@PutMapping(\\"/greetings\\")" )
assertNotNull ( classUnderTest . get ( 0 ) )
Assert . assertEquals ( "Injection points are equal" , dronePoint , dronePoint1 )
assertEquals ( CambriaConstants . kBasePath + "topic/cg/cid?timeout=1000&limit=100&filter=KafkaFilter" , url )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertThat ( comment , equalTo ( "Parameter comment on class C" ) )
assertThat ( modified , is ( expectedResult ) )
assertNull ( cursor . next ( ) )
Assert . assertEquals ( message , transformer . getMessage ( ) )
assertEquals ( sort , sort . sort ( ) )
child . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertThat ( lines , equalTo ( Arrays . asList ( "this is the first line" , "this is the second line" ) ) )
Assert . assertEquals ( jsonString , JsonUtil . toJsonString ( aclStatusBuilder . build ( ) ) )
assertEquals ( false , result )
Assert . assertEquals ( 0.5 , cohort . calcSampleVariance ( x ) , 0.01 )
assertEquals ( expected , actual )
assertEquals ( count , insert ( survey2 ) . select ( query ( ) . from ( survey2 ) . select ( survey2 . id . add ( 10 ) , survey2 . name , survey2 . name2 ) ) . execute ( ) )
assertEquals ( request . getRequestHeaders ( ) , headers )
Assert . assertEquals ( - 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
Assert . assertEquals ( "...(2)" , result )
assertTrue ( p . matchMake ( "The quick brown fox jumped over the lazy dog." , "That quick brown fox jumped over a lazy dog." ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertEquals ( OK . getStatusCode ( ) , updateResponse . getStatusCode ( ) )
assertSame ( copied , obj )
assertTrue ( "Expected the file to be written" , exportedFile . exists ( ) )
Assert . assertEquals ( option1 , option2 )
assertEquals ( "3 氓rhundreder siden" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( result , cohort )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
Assert . assertEquals ( endereco , retorno . getEndereco ( ) )
assertEquals ( 6 , context . getTableCount ( ) )
Assert . assertEquals ( id , builder . getMessageId ( ) )
assertTrue ( page . asText ( ) . contains ( "MESSAGE 1" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( res . getStatus ( ) , Response . Status . CONFLICT . getStatusCode ( ) )
assertEquals ( mockHttpRequestMethod , mockHttpRequestBuilder . getRequestMethod ( ) )
assertThat ( readBytes ( testee ) , is ( "Hello|World|!" ) )
assertEquals ( 4 , count )
Assert . assertSame ( managerFactory , victim . getManagerFactory ( ) )
Assert . assertEquals ( 4. , analyser . getServiceTime ( route ) , 0.01 )
Assert . assertTrue ( dao . insert ( person ) )
assertEquals ( "untitled-1" , control )
assertEquals ( resolvedClassPaths . size ( ) , 3 )
Assert . assertEquals ( count , task . getTasks ( ) . size ( ) )
assertFalse ( result . passedValidation ( ) )
assertEquals ( rootDir , rootDir )
assertTriggered ( result , true )
Assert . fail ( "should have thrown SQLFeatureNotSupportedException" )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "4.3 million tonnes" , 4.3 , "kg^4" , 4.3E12 , "kg^4" , "area" ) )
assertEquals ( 5 , tokens . size ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "Assigned static field _staticAssVal equals 3." , 3 , unAssVar )
assertions . isNotEqualTo ( expected )
assertEquals ( chaincodeCollectionConfiguration , chaincodeCollectionConfigurationFromProto )
assertEquals ( "Expect the form to match" , expected , actual )
Assert . assertEquals ( "Delete_rows_v1" , actual )
Assert . assertEquals ( expected , rows . next ( ) . toString ( ) )
editor . assertProblems ( "name|Duplicate resource name" )
Assert . assertFalse ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , this . right , this . documentReference ) )
assertEquals ( 1 , found . size ( ) )
assertEquals ( "Wrong number of results" , 2 , results . size ( ) )
Assert . assertEquals ( "Test this string" , stringConstant . evaluate ( null ) )
Assert . assertFalse ( json . has ( DATA_NAME ) )
longs . assertLessThan ( description , actual , expected )
assertEquals ( 0x7777 , frame . getInt ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( dropdown ) instanceof WMultiDropdownRenderer )
assertThat ( sut . getIndexOfCode ( 30 ) , is ( 1 ) )
Assert . assertTrue ( ShareUserSearchPage . checkSearchResultsWithRetry ( drone , ADV_FOLDER_SEARCH , searchText , "House 1" , true ) )
assertEquals ( 10 , content . split ( "\\n" ) . length )
Assert . assertEquals ( - 1 , i )
Assert . assertEquals ( scorer . scoreSplit ( a , b ) , 0.0 , 1E-7 )
assertTrue ( d . isUsingStatisticsManager ( ) )
assertEquals ( commit , gfs . getStatusProvider ( ) . commit ( ) )
assertTrue ( hv > 0.65 )
assertThat ( a1 . getIndex ( ) , equalTo ( "1" ) )
assertOut ( "public final class A implements B implements IA, IB, IC {\\n}" )
assertFalse ( peerAcceptanceUtil . isWorkerDisposed ( workerADeploymentID . getServiceID ( ) ) )
assertTrue ( componentSet . size ( ) == componentList . size ( ) )
assertEquals ( encoded1 , encoded2 )
assertEquals ( "{\\"number\\":null,\\"string\\":null,\\"raw\\":null}" , writer . toString ( ) )
assertEquals ( "Failed to generate while loop with chained lhs and body" , WHILE_WITH_BODY , s )
assertEquals ( "Base value is not properly parsed" , "f1a2b3" , parsed )
Assert . assertEquals ( 0 , violations . size ( ) )
assertThat ( tags , containsInAnyOrder ( scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" , "Hello" ) , scenarioTag ( "Scenario" ,
assertEquals ( "Failed to override size" , 2 , v . size ( ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( "{\\"foo\\":\\"bar\\",\\"xyz\\":1,\\"abc\\":\\"xyx\\"}" , JsonConverter . toJson ( complex ) )
assertTrue ( params . hasValue ( "a" ) )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertEquals ( content , content . length ( ) )
Assert . fail ( "Connection succeeded, but impersonation should be denied." )
assertEquals ( "GS" , child . getName ( ) )
assertEquals ( "Hello Spring MVC" , response . getContent ( ) )
Assert . assertEquals ( sortedRules , sorted )
assertOut ( "width=\\"1.5\\"" )
assertInvocations ( invocations )
assertEquals ( expectForbid , newForbid )
Assert . assertTrue ( time1 == time2 )
Assert . assertEquals ( "SHOW GLOBAL STATUS LIKE 'Key%';" , text )
assertSame ( camundaDatasourceMock , getDataSourceFromConfiguration ( ) )
assertSame ( policy , dest . getPolicy ( ) )
assertEquals ( MessageOut . Type . TEXT , messageOut . getType ( ) )
assertThat ( vi . getValue ( ) , is ( interval ) )
assertEquals ( sanitized , rewrite ( gadget , markup , set ( "img" ) , set ( "src" ) ) )
Assert . assertTrue ( driver . findElement ( By . id ( "RadioButtonGroup" ) ) . isDisplayed ( ) )
assertThat ( values , containsInAnyOrder ( "example.test1" , "example.test2" ) )
assertEquals ( 250 + winScore , scores . getScore ( ) )
runner . assertValid ( service )
assertEquals ( button . getText ( ) , "ComputeSum" )
assertEquals ( "<TimePosition/>" , xmlWriter . getOutput ( ) )
assertNull ( reified )
assertThat ( this . converter . matches ( this . sourceType , targetType ) , is ( true ) )
assertMsg ( )
assertTrue ( "Expected the DependencyCheck report to be generated" , report . exists ( ) )
assertTrue ( cause . getMessage ( ) . startsWith ( "No key found in" ) )
assertEquals ( "aTestString" , classUnderTest . getVersion ( ) )
assertEquals ( expected , buf )
assertEquals ( VALUE , secondVictim . getValue ( KEY ) )
assertEquals ( value , maxByColumns [ 0 ] , LARGEST_MIN_MAX_ERROR )
Assert . assertEquals ( "Instructions updated" , getStringFromHeaders ( getUuid ( ) , "instructions" ) )
Assert . assertEquals ( message , Util . subst ( message , 1 , 3 ) )
assertEquals ( "Wrong property" , "I'm complex!" , checkConfig . getString ( "subelement.subsubelement" ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
assertEquals ( 10 , distincted . size ( ) )
assertNotNull ( user )
Assert . assertEquals ( 0 , trimmed . size ( ) )
assertEquals ( hashCode1 , hashCode2 )
assertEquals ( 0 , metadata . getDateOfBirth ( ) )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertEquals ( expected , xml )
AssertAnnotations . assertLemma ( lemmas , select ( jcas , Lemma . class ) )
assertTrue ( metaChild . isAssignableTo ( metaUncle ) )
assertThat ( description . toString ( ) , is ( "SomeClass {\\n" + "  baz(): SomeClass {\\n" + "    foo(): was <42>\\n" + "  }\\n" + "  ...\\n" + "}" ) )
assertEquals ( entry . getValue ( ) , DBValue )
assertions . containsOnly ( values )
assertEquals ( "Correct Platform is not fetched" , platform , pValue )
assertEquals ( "rubbish" , test . getMessage ( ) )
Assert . assertEquals ( 10 , result . size ( ) )
Assert . assertEquals ( "first 0:a 1:b 2:c last" , html )
assertEquals ( "any update" , ns . getOpValue ( ) . data )
assertThat ( target , is ( instanceOf ( FlowAction . class ) ) )
assertEquals ( renderWithConflictingVersionResult ( ) , result )
assertTrue ( detector . isKnsEnabled ( ) )
assertNotNull ( taskTO )
assertEquals ( "" , stringBuilder . toString ( ) )
assertEquals ( "onTargetsChanged should have updated target list" , createUrlFromTargetName ( healthInfoInstances . get ( 0 ) . Service . Address ) , targetProvider . provideTarget ( ) )
Assert . assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , status )
assertEquals ( "A1=a, A2=b" , selectionValue )
assertEquals ( exp , res . getRow ( i ) . getDouble ( ) , 0.01 )
Assert . assertEquals ( new URI ( "http://stuff@localhost:80/stuff?param=stuff#fragment" ) , result )
assertNotNull ( order )
assertArrayEquals ( results , new char [ ] { 'a' , 'b' , 'c' , '\\n' , '\\t' } )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertEquals ( "application/json" , contentType ( resp ) )
assertThat ( options . getStorageClass ( ) , is ( storageClass . toString ( ) ) )
assertEquals ( headers , newHeaders )
assertXpathExists ( "Absent SAML Assertion element" , "/SOAP-ENV:Envelope/SOAP-ENV:Header/wsse:Security/saml:Assertion" , document )
assertTrue ( result )
assertEquals ( 0 , tasks . size ( ) )
assertNull ( ejbJarMetaData . getDistinctName ( "unable to find distinct name for " + distinctName , distinctName ) )
assertNotNull ( extUserDetails )
assertEquals ( out . get ( ) , "1" )
assertTrue ( easyCriteria . count ( ) > 0 )
Assert . assertNull ( "No se deber�a haber encontrado la aplicaci�n" , aplicacion )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
Assert . assertEquals ( "test" , evtf . getCurrentTime ( ) )
Assert . assertEquals ( "Date " + date + " was not correctly truncated to hours" , dateTruncExpected , dateTruncActual )
Assert . assertNull ( job )
assertOut ( "a(0.5)" )
assertEquals ( false , listener . status . getCode ( ) == 200 )
Assert . assertNotSame ( cfg , newCfg )
assertEquals ( 1 , parsers . size ( ) )
Assert . assertEquals ( "text;heading1;heading2;text;\\n" , writer . toString ( ) )
assertEquals ( o1 , o2 )
Assert . assertTrue ( provider . isKeyword ( "SELECT" ) )
assertEquals ( 599 , result )
assertTrue ( result1 == result2 )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertNotNull ( actual )
assertEquals ( 31 , videoCapture . getiExceptionCount ( ) )
assertThat ( content , containsString ( "1 + 1 = 2" ) )
assertEquals ( "true" , actual )
assertEquals ( Order . sellAt ( 1 , NaN , NaN ) , newTrade . getExit ( ) )
Assert . assertTrue ( testConfig . getPartitionWeightMap ( ) . isEmpty ( ) )
assertNotNull ( ontology )
assertNotNull ( writer . docMgr )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertTrue ( rec_cnt == 1 )
org . junit . Assert . assertEquals ( expected , actual )
assertSame ( source , model . getSource ( ) )
assertThat ( result . getMessages ( ) , empty ( ) )
assertNotNull ( "The list of DataObject2 should not have been nulled out" , dataObject . getDataObject2s ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( 0 , result . size ( ) )
Assert . assertEquals ( stepType , actualType )
Assert . assertNull ( to )
assertEquals ( 403 , clientResponse . getStatus ( ) )
assertNull ( pid . getInputTimeZone ( ) )
assertFalse ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertThat ( builder . getPatches ( ) , hasItemsInOrder ( "ADD /status/conditions []" , "ADD /status/conditions/- {'message':'hello','reason':'because','status':'true','type':'Available'}" , "ADD /status/conditions/- {'reason':'ok now','status':'true','type':'Progressing'}" ) )
assertTrue ( Arrays . equals ( s , multiEntry ) )
Assert . assertEquals ( content , expectedContent )
softly . assertAll ( )
assertThat ( driver . findElement ( By . id ( "item1" ) ) . getText ( ) , is ( "" ) )
assertEquals ( expectedMap , iteratedMap )
assertThat ( stemts , hasSize ( 0 ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertThat ( optionsByType . get ( Timeout . class ) , is ( Timeout . of ( 5 , TimeUnit . SECONDS ) ) )
assertFalse ( result )
assertEquals ( ids . getExternalIdentifier ( ) . get ( 0 ) . getNormalized ( ) . getValue ( ) , "normalized-value" )
Assert . assertNotNull ( camelctx )
assertEquals ( true , outcome . isFound ( ) )
assertEquals ( expectedQuery , actualQuery )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertThat ( result , instanceOf ( Scriptable . class ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( "Expected another stopwords" , TurkishAnalyzer . getDefaultStopSet ( ) , stopwords )
assertNull ( row . getItemProperty ( "TEXT" ) . getValue ( ) )
assertThat ( ex , not ( nullValue ( ) ) )
Assert . assertNotSame ( account1 . toString ( ) , account2 . toString ( ) )
assertEquals ( "image/jpeg" , contentType )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
assertEquals ( 3.5F , strategy . getMedian ( evenNumberOfFloatBandValues ) , 0.0001 )
Assert . assertFalse ( result )
assertThat ( status . getStoragePolicy ( ) , is ( LAZY_PERSIST_POLICY_ID ) )
Assert . assertThat ( i , is ( 3 ) )
assertThat ( attemptRulesByActionName . size ( ) , is ( 1 ) )
mini . assertReadFile ( mini . newFolder ( ) . toString ( ) , fileSpec , "1;one" , "2;two" )
assertions . doesNotContain ( values )
assertSkipped ( myTasks , 2 , 3 )
Assert . assertEquals ( "Not null string" , expectedBinaryString , bitmaskInBinaryString )
assertTrue ( results . hasMessages ( Message . Level . ERROR ) )
assertThat ( info . getServerService ( SERVER ) , sameInstance ( currentService ) )
assertEquals ( Integer . of ( 2 ) , result )
assertEquals ( "娴�璇�" , response . getMsg ( ) )
assertTokens ( new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP , comment ( "test" ) )
assertEquals ( "testing" , removeSentenceDecorator . toDisplay ( ) )
assertEquals ( false , result )
assertFalse ( isEnabled )
Assert . assertEquals ( DEFAULT_EXPIRATION , exp )
Assert . assertArrayEquals ( cmpAlignAndMeet , outAlignAndMeet )
assertFalse ( subject . isForceAllDefaultToAbsent ( ) . isPresent ( ) )
assertThat ( new String ( baos . toByteArray ( ) ) , equalTo ( data ) )
assertThat ( tuple . getCollection ( "field" ) , equalTo ( value ) )
assertThat ( "Returned value is not sum of provided ones, not sum of values defined in deactivated code." , response , containsString ( expected ) )
assertTrue ( "Identity realm should be created" , ops . exists ( TEST_IDENTITY_REALM_ADDRESS ) )
Assert . assertFalse ( "Ids should not be the same: " , deterministicId . equals ( deterministicId2 ) )
assertEquals ( expected , baseString )
assertThat ( emailAddress , startsWith ( "aeiou@" ) )
Assert . fail ( "Missing required input" )
Assert . assertEquals ( "`user`" , ctx . getSqlStatement ( ) )
assertThat ( s , equalTo ( ( r ) ) )
assertNotNull ( target )
assertSame ( state , actualState )
assertEquals ( "8 ��� 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertThat ( client . getScope ( ) . contains ( SystemScopeService . OFFLINE_ACCESS ) , is ( equalTo ( true ) ) )
Assert . assertEquals ( String . class , TestUtils . getPropertyValue ( router , "resultType" , Class . class ) )
assertEquals ( null , CollectionUtils . getByPath ( input , "-4" ) )
assertTrue ( isPersistent )
Assert . fail ( "Expected an exception to be thrown due to null param" )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertNotNull ( sentiloDateFormatter )
assertEquals ( Type . High , filterResult . getValue ( ) )
assertEquals ( AbstractPanel . class , renderer . getComponentClass ( ) )
assertEquals ( 0 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( LocalDate . of ( 1971 , Month . JANUARY , 1 ) , firstDayOfMonth )
assertNotNull ( result )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 ) ) )
log . assertContent ( "" )
assertEquals ( 1L , query ( ) . from ( employee ) . where ( where ) . fetchCount ( ) )
assertEquals ( "quiet" , op . get ( "quiet" ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertFalse ( 0 > v1 . compareTo ( v2 ) )
assertNull ( cls )
assertTrue ( startsWithHttp )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertEquals ( 0L , volumeStates . documentCount . longValue ( ) )
assertTrue ( connection . toString ( ) + " is not transaction aware" , connection . toString ( ) . startsWith ( "Transaction-aware proxy for target Connection  from DataSource [Mock for DataSource" ) )
Assert . assertEquals ( revisions . size ( ) , 2 )
assertNull ( "Got a listener" , listener )
Assert . assertFalse ( accept )
Assert . assertEquals ( message , 0.0 , error , 1E-10 )
assertEquals ( item . getFirstFilterOp ( ) , filterOp )
assertThat ( client . getHost ( ) , equalTo ( "localhost" ) )
assertThat ( client . getBasePath ( ) , is ( Config . DEFAULT_FALLBACK_HOST ) )
assertEquals ( 265463 | 342 , executeTestMethod ( test , Integer . class , null , 265463 ) . intValue ( ) )
assertEquals ( 1 , deleteCount )
assertEquals ( "<r><i><v>&lt;p /&gt;\\n&lt;p /&gt;</v></i></r>" , writer . toString ( ) )
assertScoreAndParse ( content , null , 1 )
assertTrue ( squaresCache . containsKey ( 6 ) )
assertEquals ( 0 , list . size ( ) )
assertThat ( f . apply ( good_uris ) , equalTo ( asList ( new URL ( "http://example.com/example_a" ) , new URL ( "http://example.com/example_b" ) , new URL ( "http://example.com/example_c" ) ) ) )
comparator . assertSelfLinesMatch ( )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( "SELECT * FROM v WHERE _user_ = 'me' AND (STR_TO_DATE(`UPTIME.0`, '%a %b %e %H:%i:%s GMT %Y') BETWEEN STR_TO_DATE('Tue Apr 8 10:30:57 GMT 2014', '%a %b %e %H:%i:%s GMT %Y') AND STR_TO_DATE('Wed Apr 9 10:30:57 GMT 2014', '%a %b %e %H:%i:%s GMT %Y') ORDER BY STR_TO_DATE(`UPTIME.0`, '%a %b %e %H:%i:%s GMT %Y') DESC,STR_TO_DATE(`UPTIME.0`, '%a %b %e %H:%i:%s GMT %Y') ASC" , sql )
assertEquals ( "ext" , sub . getExtension ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( ImmutableSet . of ( category1 , category2 ) , categories . getValues ( ) )
assertEquals ( 1 , results . length )
assertEquals ( 2 , tasks . size ( ) )
assertTrue ( dtoProductTypeAttr . getProductTypeId ( ) > 0 )
Assert . assertEquals ( "Some Privilege" , privilege . getPrivilege ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertEquals ( "tadi" , t . format ( new Date ( 1000 * 60 * 60 * 1 ) ) )
assertThat ( headlineOf ( view ) , is ( "2 builds have failed since Ben, Connor and Daniel committed their changes" ) )
assertEquals ( "central" , pom . getName ( ) )
assertNull ( value )
editor . assertProblems ( "color|Duplicate" )
assertEquals ( 8 , context . getTableCount ( ) )
assertThat ( commercialFeaturesArgument , is ( nullValue ( ) ) )
Assert . assertEquals ( 65. , tdCosts . getBackwardTransportTime ( loc ( "from" ) , loc ( "to" ) , 100. , null , null ) , 0.01 )
assertEquals ( "Unexpected read concern" , ReadConcern . DEFAULT , clientOptions . getReadConcern ( ) )
assertFalse ( valid )
assertEquals ( BuildState . SUCCESS , state )
assertThat ( result . toString ( ) , is ( equalTo ( "HELLO " ) ) )
Assert . assertEquals ( 200 , resp . getStatus ( ) )
assertEquals ( result , expecting )
assertTrue ( "permission should be granted." , updateUserPermission . isAllowed ( auth , 1L ) )
assertSame ( m , m . get ( key ) )
assertTrue ( mainServices . isSuccessfulBoot ( ) )
assertTrue ( "Hash is invalid" , Arrays . equals ( SHA256_DIGEST . getBytes ( ) , result . getBytes ( ) ) )
assertEquals ( "[(foobar:1>7)>(AppNode:file:10>14)]" , sn . stringify ( true ) )
assertEquals ( 0.0 , perims [ 0 ] , 0.01 )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( 1 , results . length )
Assert . assertNull ( objStat )
assertEquals ( parent . models . size ( ) , 1 )
assertTrue ( validator . validate ( EntityNames . STUDENT , studentIds ) . size ( ) == studentIds . size ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( 0 , arc . getEntry ( addr , 2 , 13 , recb , null ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13 , recb ) . getEntry ( addr , 2 , 13
Assert . assertEquals ( 4 , network . getInputsCount ( ) )
assertDegenerate ( scan )
assertEquals ( exp , array1 )
Assert . assertEquals ( "{}" , result )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Unexpected size observed" , 1 , fail . value )
assertEquals ( javaTimestamp , DateTimeUtil . getUTCDateTime ( datum ) )
assertEquals ( expectedValue , value . getValue ( 101L ) )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertThat ( nameCollection . size ( ) , is ( 0 ) )
assertFalse ( aNumber . equals ( bNumber ) )
assertTrue ( proxy . isClosed ( ) )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm1Name" ) )
Assert . assertEquals ( reply , receivedReply )
assertEquals ( nodeName , node . getName ( ) )
assertEquals ( "" , val )
assertThat ( configuration . getString ( "test.csv" ) , is ( "\\"test.csv\\"" ) )
assertEquals ( "\\t\\tnew Expectations(){{\\r\\n			// e.g. : mocked.get(anyString); returns(200);\\r\\n		}};\\r\\n" , buf . toString ( ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
Assert . assertEquals ( 5 , index )
assertEquals ( "Unexpected locale from component" , COMPONENT_LOCALE , locale )
assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( "1234/12345678" ) )
assertEquals ( "DUMMY" , Browser . get ( PageWithParameterizedURL . class , "x" , "y" ) )
assertEquals ( expected , actual )
assertEquals ( 456 , size )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 7 , paragraphElement . getElementCount ( ) )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "actors/Keanu" , "
assertEquals ( "Value not set" , VALUE , config . getString ( testKey ) )
Assert . fail ( "Aaaaaaa should have thrown an exception" )
assertThat ( Datastore . stringToKey ( encodedKey ) , is ( key ) )
assertNotNull ( renderEngine )
assertTrue ( "marker is replaceable when it when timestamp after expiry" , marker . isReplaceableBy ( 101L , null , null ) )
assertEquals ( HttpStatus . BAD_REQUEST , result . getStatusCode ( ) )
assertEquals ( "4" , TreeHelper . inorderTraversal ( root ) . get ( 0 ) . getText ( ) )
Assert . assertEquals ( "should have added user" , testUser , actualUser . getUserType ( ) )
assertHandCount ( playerA , 1 )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . PEER_REVIEW_READ_LIMITED )
assertEquals ( data , value . getData ( ) )
assertEquals ( "io/atlasmap/core/io/test/java/lang/String" , FileUtils . readFileToString ( file ) )
assertEquals ( count . longValue ( ) , 1 )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "brokerURL" , MULTIPLE_ACTIVEMQ_BROKERS ) )
Assert . assertEquals ( IsolationLevel . NO_IS_ABSTAINED , defaultIsolationLevel )
assertEquals ( "abcd" , result )
assertOut ( "var a:* = (a + b)" )
assertTrue ( stop . get ( ) )
assertEquals ( "test/v1/names/1" , id )
assertEquals ( "123456789abcdef" , dongle . getZigBeeExtendedPanId ( ) )
assertTrue ( result instanceof V8Function )
assertNotNull ( account )
assertIntersect ( ranges , "b" , "j" , "m" , "z" )
assertEquals ( JsonArray . builder ( ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) . value ( true ) .
assertTrue ( list instanceof ArrayList )
Assert . assertNotNull ( att )
assertEquals ( "test" , empty . getMessageType ( ) )
Assert . assertEquals ( 1 , a . getCbo ( ) )
assertEquals ( "1" , idCaptor . getValue ( ) . getIdPart ( ) )
assertTrue ( validation . isSuccessful ( ) )
assertEquals ( geo , expResult )
Assert . assertEquals ( monitor1 , monitor2 )
assertEquals ( "First Value After Reset Is e" , 'e' , ( char ) _textReader . read ( ) )
assertTrue ( runtimeTestComparator . compare ( runtimeTest1 , runtimeTest2 ) < 0 )
assertEquals ( expected , actual )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
Assert . assertFalse ( matcher . acceptAll ( ) )
assertEquals ( "id" , portResult . getComponent ( ) . getId ( ) )
Assert . assertEquals ( "password/change/expired" , view )
assertThat ( table . asString ( ) , equalTo ( tableAsString ) )
assertTrue ( cb . get ( ) )
assertEquals ( mockUser , o )
assertThat ( numbers , arrayContainingInAnyOrder ( 20 , 10 , 15 ) )
assertEquals ( toString ( expected ) , toString ( actual ) )
Assert . assertTrue ( runner . contains ( task ) )
assertThat ( renderedProjectName , startsWith ( "test_projectname" ) )
Assert . assertEquals ( result . size ( ) , str . length ( ) )
assertPaths ( executionPaths , executionPath ( JCTryCatch . class , JCBlock . class , JCReturn . class ) , executionPath ( JCTryCatch . class , JCBlock . class , JCReturn . class ) )
paths . assertDoesNotContain ( INFO , actual , JAVA_SOURCE )
assertEquals ( "slaveName_1" , helper . nextFreeIdentifierForResourceEditRelations ( relations , 21 , StringUtils . EMPTY ) )
assertFalse ( service . publish ( "message" ) )
assertNotFound ( client . executePost ( "/foo" , "{\\"key_a\\":\\"value_a\\", \\"key_b\\":\\"value_b\\"}" , ContentType . APPLICATION_JSON ) )
assertEquals ( "tableName" , database . escapeTableName ( null , null , "tableName" ) )
context . assertTrue ( result . isEmpty ( ) )
Assert . assertEquals ( Connection . TRANSACTIONAL , connection . getTransactionIsolation ( ) )
Assert . assertEquals ( Integer . valueOf ( 10 ) , value )
runner . assertTransferCount ( SplitText . REL_SPLITS , 1 )
assertMapping ( node , 0 , 15 , 0 , 0 , 16 )
assertThat ( option , is ( new IntOption ( 100 ) ) )
assertEquals ( 98.765 , empty . getHeadingToDestination ( ) , 0.1 )
assertThat ( errors , not ( hasFieldErrors ( "middleName" ) ) )
assertEquals ( jobExecution . getVersion ( ) , jobExecutionDao . getVersion ( ) )
assertEquals ( 2 , Solutions . bestOf ( solutions ) . getRoutes ( ) . size ( ) )
assertEquals ( 1 , result )
assertThat ( cb . getForwardCallback ( ) , nullValue ( ) )
assertNull ( context )
Assert . assertEquals ( "The response status to a reqeuest with 'if-non-match=*' header should be NOT_MODIFIED(304), if the file exists" , 304 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertSame ( this . edit , this . mocker . getComponentUnderTest ( ) . resolveAccessLevel ( "edit" ) )
assertThat ( method . propertyName ( ) , is ( "meOnFire" ) )
Assert . assertEquals ( 0.0d , singletest , 0 )
assertEquals ( "Hawk ts=\\"1\\",tsm=\\"abcdefghij\\"" , h . toString ( ) )
assertThat ( falsePositiveCount < 5 , is ( true ) )
assertEquals ( 90 , rotation )
Assert . assertEquals ( "Alignment " + ii + " refinement wrong" , al , ft )
assertEquals ( "modify stream" , output )
assertEquals ( false , out . firstElement ( ) . get ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( expected , elements )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optTopNSorting ) )
assertEquals ( expectedUsernamePasswordString , DomainUtils . getUsernamePasswordDomainString ( username , password , domain ) )
assertEquals ( "abcd" , sb . toString ( ) )
assertThat ( NF . booleanNode ( true ) , is ( sut ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
Assert . assertTrue ( errors . toString ( ) , errors . isEmpty ( ) )
assertNull ( sut . execute ( "select * from person" ) )
assertFalse ( rf . supportsMultiSpop ( ) )
Assert . assertEquals ( "{\\"@context\\":\\"../$metadata#ESAllPrim(4242)/PropertyString\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\",\\"value\\":null}" , resultString )
assertTrue ( p . isReadable ( Object . class , null , null , null , null ) && p . isReadable ( InputStream . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . isReadable ( Image . class , null , null , null ) && ! p . is
Assert . assertEquals ( tree . getSize ( ) , 4 )
assertEquals ( LazyInitRegistration . APPLICATION_CONTEXT , applicationContextMock )
Assert . assertTrue ( new JSONObject ( PEDIGREE_1_MIGRATED_DATA ) . similar ( new JSONObject ( captured ) ) )
assertTrue ( "Enlisted Future failed" , expectedResults . containsKey ( entry . getKey ( ) ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 0 , client . getIntStack ( ) [ client . getIntStackSize ( ) - 3 ] )
assertEquals ( "123451234512345" , entity . getId ( ) )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY id" + fieldAdd + " ASC LIMIT 0, 5 ;" , sql )
assertTrue ( "Can't connect to other server" , server . canConnect ( now ) )
assertNotNull ( notebook )
assertEquals ( 30.0 , y . get ( InsideOutsideDepParse . ROOT_IDX , 0 , 0 ) , 1e-13 )
Assert . assertEquals ( "application/octet-stream" , bos . toString ( ) )
assertNotNull ( foundVarArgsMethod )
assertThat ( writer . get ( ) , is ( 2d ) )
assertTrue ( output . startsWith ( "<
assertEquals ( expected , actual )
assertTrue ( "Challenges with differ id can't be equal" , challenge1 . equals ( challenge2 ) )
assertEquals ( 6 , result . size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 4 , results . size ( ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
Assert . assertEquals ( id , infoEventoManifestacaoDestinatario . getId ( ) )
assertEquals ( "Message: [request.body]" , ResponseBodyInterpolator . interpolate ( "Message: [request.body]" , req ) )
assertB ( "�尖�尖�尖��" + "��12��" + "��34��" + "�尖�尖�尖��" )
Assert . fail ( "Expected exception" )
assertEquals ( DATE_VAL_b , p . getDate ( ) )
assertNotNull ( type )
assertResultSet ( res , "testDistinctAggregation_case3.result" )
assertThat ( converter . toJavaObject ( new IntWritable ( 1 ) ) , is ( ( Object ) 1 ) )
assertEquals ( dto , dto2 )
assertEquals ( "Base for strings is wrong" , Integer . valueOf ( 3 ) , parsed )
assertStoreContainsAll ( entities )
assertEquals ( expectedStringRepresentation , ind . toString ( ) )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Yoda" ) )
assertFalse ( matcher . matches ( newMutableReasonDetail ( unusedClassName , unusedCodeLocation , ABSTRACT_TYPE_INHERENTLY_MUTABLE ) ) )
assertEquals ( "HelloWorldImpl not properly saying hi" , "Hello Sam" , response )
assertEquals ( expResult , result )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 ) ) )
assertEquals ( value , propertiesConfigurationProperties . getString ( key ) )
assertEquals ( "1" , Util . parseHashtag ( html ) )
assertFalse ( dss . hasJs ( ) )
Assert . assertEquals ( "0" , result )
assertSamples ( )
assertObjectEquals ( "[{f1:'x1'}]" , p . run ( bs , in , sa ) )
Assert . assertEquals ( 2 , result . size ( ) )
assertEquals ( expected , actual )
assertThat ( className , is ( "org.adrianwalker.multilinestring.JavacMultilineProcessor" ) )
assertEquals ( expected , actual )
assertThat ( unix ( instance , strategy ) , equalTo ( "0.0.0.0" ) )
Assert . fail ( "an exception should have been thrown" )
Assert . assertEquals ( "one -- two -- three -- four --five --six" , actualResult )
assertEquals ( messagePage . getTotalPages ( ) , pageCount , "Incorrect count of pages." )
assertEquals ( value , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( "1/m" , u . toString ( ) )
assertEquals ( "https://sentilo.domain.org/sentilo-catalog-web/sentilo-catalog-web.jar" , finalRedirectUrl )
assertEquals ( "{\\"levelProgress\\":{\\"total\\":3,\\"current\\":3,\\"lastPassed\\":2}}" , playerGames . get ( "player" ) . getGame ( ) . getSave ( ) . toString ( ) )
assertEquals ( "Mortray" , n . getClass ( ) . getSimpleName ( ) )
assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
assertEquals ( partitioner . getPartition ( key1 , null , numPartitions ) , partitioner . getPartition ( key2 , null , numPartitions ) )
assertTrue ( isWindowCreated ( appUUID , conn ) )
assertEquals ( testValue , actual )
Assert . assertEquals ( expected , actual )
assertThat ( vdl , is ( nullValue ( ) ) )
assertEquals ( sm . getSparse ( ) . get ( 0 , all ) , sm . getSparse ( ) . get ( 1 , all ) )
assertThat ( result , contains ( v_11 ) )
assertThat ( user . getPassword ( ) , is ( nullValue ( ) ) )
assertEquals ( expectedBody , consulResponse . getBody ( ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertEquals ( 0 , info . size ( ) )
assertEquals ( Arrays . asList ( category ) , mockResult . included ( "categories" ) )
assertThat ( new PdfTextExtractorByArea ( ) . extractFooterText ( page ) . trim ( ) , is ( withBadCharacter ) )
Assert . assertEquals ( widgetSize + 1 , jq ( ".zswidget" ) . length ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( "/some_file.txt" , path . toRealPath ( ) . toString ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( expected , actual )
assertEquals ( DOUBLED_PAWN_HANDICAP - ROOK_FILE_PASSED_PAWN_BOOST , score )
assertEquals ( Type . CHAR , d . type ( ) )
assertNotEquals ( insertAction , retractAction )
Assert . assertTrue ( response . contains ( "Order Boeing with quantity 10 accepted." ) )
assertNotNull ( solver )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( VerifyFailType . SORT , pluginParameters . verifyFailType )
assertEquals ( 5 , sentryStackTraceElements . size ( ) )
assertEquals (simulation . getLongestTotalSleepSequence ( ) , 100 )
assertTrue ( Pattern . matches ( "(?s).*First0.*Last0.*First1.*Last1.*First2.*Last2.*" , page . asXml ( ) ) )
assertNotNull ( resolved )
Assert . assertEquals ( 8 , es . size ( ) )
assertEquals ( "hi %s" , instance . formatMessage ( record ) )
assertEquals ( 1.0 , result . getOccurrenceRatio ( ) , 0.0 )
assertTrue ( "Expected delay to be greater than zero" , delay > 0 )
assertEquals ( ShardConsumerState . WAITING_ON_PARENT_SHARDS . consumerState ( ) . state ( ) , consumer . currentState ( ) . state ( ) )
Assert . assertEquals ( "some [b]italic[b] text" , formatter . format ( "some [b]italic[b] text" , defaultOptions ( ) ) )
assertThat ( target . addLink ( link ) , is ( true ) )
assertEquals ( "June [month]" , translation )
assertSynchAll ( picker , date )
Assert . assertFalse ( validator . isValid ( "1234" , context ) )
assertEquals ( expect , pred )
assertEquals ( expectedRestriction , restriction )
assertEquals ( "XML Equals" , jdkXml , javolutionXml )
assertEquals ( "toImage" , image )
assertEquals ( expected , ld . getContentField ( "date" ) )
Assert . assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ = 'me' ORDER BY `foo.bar`" , sql )
assertFalse ( niciraActionDeserializerKey . equals ( obj ) )
assertEquals ( 405 , getStatus ( post ) )
assertTrue ( registry . contains ( obj ) )
assertEquals ( computeTMTextUnitMD5 , "This is the content" )
assertEquals ( expected , actual )
assertEquals ( expectedResult , result )
assertThat ( parsed . getQueriesString ( ) , is ( "testQuery" ) )
Assert . assertEquals ( 18 , count )
assertEquals ( "((key == 'stringhello' or key == 'stringgoodbye'))" , jexl )
Assert . assertNotNull ( scriptFile )
assertThat ( subject . supports ( update ) , is ( true ) )
assertThat ( job . getDuedate ( ) , is ( addSeconds ( removalTime , START_DELAY ) ) )
assertNotNull ( response )
assertEquals ( "tokyo-toyosu" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) )
Assert . assertEquals ( THIRTEEN_INTEGER , pi . getThirteenInteger ( ) )
assertThat ( backend . isEmpty ( ) , is ( true ) )
assertThat ( address2 . equalsContent ( address1 ) , is ( false ) )
assertEquals ( threadLocalRandom . getSha512Crypt ( ) , threadLocalRandom . getSha512Crypt ( ) )
Assert . assertTrue ( matches )
assertEquals ( expected , actual )
Assert . assertTrue ( "Failure - expected to be OK" , status == 404 )
Assert . assertTrue ( service . getUserInfo ( ) instanceof UserInfoImpl )
XmlAssert . assertEquals ( EXPECTED_XML_RESPONSE , xmlResponse )
assertEquals ( 2 , kieSession . fireAllRules ( ) )
assertEquals ( tuple , deserializedTuple )
assertEquals ( "1 | 2 | 3" , generate )
Assert . assertNotNull ( date )
assertFalse ( lock . lock ( ) )
assertEquals ( hasNextField . get ( reader ) , true , "hasNext field should be set to TRUE" )
assertEquals ( "my-very-first-param and second_param_123" , result )
assertRequest ( "DELETE" , "Conference/" )
Assert . assertEquals ( 0 , t1 . compareTo ( null ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertTrue ( result . isSuccess ( ) )
assertIsSemver ( semver , version , 1 , 2 , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
Assert . assertTrue ( offsetwaiter . tryWaitfor ( new HostPort ( host , port ) , masterInfo , executionLog ) )
assertEquals ( multicron , cron . asString ( ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( 86399. , Time . parseTimeToSeconds ( time ) , 0.01 )
assertTrue ( "Comparator is not set" , fieldComparators . isEmpty ( ) )
Assert . assertEquals ( config . getHashAlgorithm ( ) , newVal )
Assert . assertEquals ( new DoubleMatrix ( SOL_33_EXPECTED ) , SOL_33_ACTUAL_ABS )
assertFalse ( result )
assertEquals ( childProject1 . getCombinationFilter ( ) , childCombinationFilter )
Assert . assertNotNull ( pojo . testManager )
Assert . assertSame ( TableTestUtils . ACTUAL_2 , actual )
assertEquals ( "Hello ^there" , ResponseBodyInterpolator . interpolate ( "Hello ^there" , req ) )
assertEquals ( true , selector . isCountable ( ) )
assertEquals ( "Gadget title for 0" , spec . getModulePrefs ( ) . getTitle ( ) )
assertTrue ( new EncryptionUtil ( ) . validateAESCTR ( this . unEncryptedMessage , encryption ) )
assertEquals ( heading , group . getHeadings ( ) . get ( 0 ) . getTitle ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertEquals ( "1/kg" , u . toString ( ) )
assertEquals ( 1 , impl . getArgumentIndex ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 0 , empty . getCategoryCount ( ) )
assertFalse ( result )
assertEquals ( 4 , hitCount )
assertEquals ( "x IS NAME" , c . toString ( ) )
assertArrayEquals ( plaintext , result )
assertTrue ( result . isLeft ( ) )
assertTrue ( tQuery . containsRowWithKey ( 0 ) )
assertEquals ( wrappedTemplate + " LIKE ? " , test . build ( ) )
Assert . assertEquals ( actualMav , null )
assertEquals ( 5 , list . size ( ) )
assertEquals ( LOGIN_URL , response . getRedirectedUrl ( ) )
assertEquals ( ts0 , reportsCount . get ( ) )
assertTrue ( figure . accept ( new FigureImpl ( 0 , 0 , "#" ) , WIDTH / 2 , 1 ) )
assertEquals ( EntityNameCharType . BOUNDARY , type )
Assert . assertEquals ( "field1=field1,field2=field2,field3=field3" , an . toJSON ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( "CONCATENATE(${0}, ${1}, ${2}, ${3})" , ExpressionFieldAction . process ( action , Arrays . asList ( "qwerty" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWeRtY" , "qWe
Assert . assertEquals ( capturaReturn . getVISA ( ) . size ( ) , 2 )
assertEquals ( "0017880100DC880B" , address . toString ( ) )
assertResultSet ( res )
assertEquals ( "thumbnail.filename.middle.jpg" , filename )
assertTrue ( report . getReportLines ( ) . isEmpty ( ) )
Assert . assertEquals ( xmlEsperado , icmsst . toString ( ) )
assertSame ( base , returnedStatement )
assertEquals ( "Wrong content" , CONTENT , readFile ( file ) )
Assert . assertNotNull ( jis . getManifest ( ) )
assertSame ( expr . accept ( visitor ) , visitResult )
assertEquals ( asList ( new File ( "/opt" ) , new File ( "/var" ) ) , nonOptions . values ( options ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT selector1.* FROM nt:unstructured WHERE selector1.jcr:uuid IS NOT NULL ORDER BY NAME(selector1) ASC" ) )
assertEquals ( 2 , g . length ( ) )
Assert . assertEquals ( "declare const enum Person {\\n" + "    VALUE0 = 10,\\n" + "    VALUE1 = 11,\\n" + "}" , output . trim ( ) )
Assert . assertEquals ( path , ".." + File . separatorChar + ".." )
assertEquals ( NaCl . Sodium . CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE , result )
assertFalse ( "No Longer Contains Test1" , _fastTable . contains ( "Test1" ) )
assertEquals ( newArrayList ( conditions ) , join . conditions )
assertTrue ( got . contains ( "Enabled service account:" ) )
Assert . assertTrue ( instantiatorResource . meetsQuantityRequirements ( request ) )
assertEquals ( "Unknown configuration element" , e . getMessage ( ) )
assertEquals ( 404 , responseGet . getStatus ( ) )
assertThatEditorHasValue ( comboBox , "20" )
Assert . assertTrue ( "Json serialization is wrong" , json . contains ( "\\"metrics\\":\\"counter:simple.counter?increment=5\\"" ) )
assertEquals ( 41 , p . getAge ( ) )
assertThat ( project . asakusafw ( ) , is ( "TESTING" ) )
assertThat ( seleniumQueryObject . toString ( ) , is ( "crazy-tag#crazy-id.some-class:contains('withArgs')" ) )
assertValidReplaceKind ( repositoryRoot , revision , SVNNodeKind . DIRECTORY )
assertThat ( Context . getSearchIndex ( ) . getPatients ( ) , hasItem ( patient ) )
assertEquals ( str , str2 )
assertEquals ( "Locations should be the same even though they were expressed differently" , l , r )
assertTrue ( result . xml != null )
mock . assertIsSatisfied ( )
assertEquals ( "http://127.0.0.1/airship/public/public-segment/public-segment-public-segment-public-segment-public-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment-segment
Assert . assertEquals ( numeroNFInicial , dados . getNumeroNFIncial ( ) )
Assert . assertEquals ( 200 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "custom" , actual )
Assert . assertEquals ( Integer . valueOf ( 128 ) , iStack . peek ( ) )
assertNull ( "The appender should be null." , appender )
ConcurrentTestUtil . assertConcurrent ( "" , runnables , TEST_TIMEOUT )
assertEquals ( true , accountBalance . hasBalance ( ) )
assertEquals ( 0 , results . getMessages ( ) . size ( ) )
assertArrayEquals ( expected , actual )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertEquals ( dto . getUserContacts ( ) , Collections . emptyList ( ) , "User contacts list is not empty" )
assertEquals ( 2 , instance . getParents ( ) . size ( ) )
Assert . assertEquals ( "handle = MethodHandles.filterReturnValue(handle, " + FOLD_FUNCTION_JAVA + ");" , toJava )
Assert . assertEquals ( provider . getOther ( ) , "other" )
assertEquals ( - 1 , ret )
assertFalse ( scanComplete . isInSync ( ) )
assertEquals ( sv . getString ( context . getValue ( ) ) , provider . getString ( context . getValue ( ) ) )
assertEquals ( exp , matrix )
assertFalse ( action . canSave ( flaggable ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( expResult , result )
assertEquals ( expectedQuery , actualQuery )
assertThat ( set , hasItem ( "ABC" ) )
Assert . assertTrue ( evictor instanceof MaxFreeAllocator )
assertEquals ( expectedMap , map )
Assert . fail ( "Expected exception" )
assertEquals ( "Wrong path" , "Lineage" , lineage . getPath ( ) )
assertRowCount ( results , 1 )
PSLTest . assertRule ( dataStore , input [ i ] , rule )
assertNotNull ( object )
assertEquals ( 1 , rpt . size ( ) )
assertEquals ( "<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com/\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>" , TextUtil . stripNewlines ( cleanHtml ) )
assertNotNull ( streamable )
assertEquals ( Arrays . asList ( "BA" , "BB" , "A" , "C" , "D" ) , result )
assertEquals ( expected . toString ( ) , request . getFirstHeader ( "Via" ) . getValue ( ) )
assertEquals ( optionsGiven , optionsComputed )
assertEquals ( 0 , actual . getExtra ( ) . size ( ) )
assertEquals ( "Nummisuutarit" , document . get ( "title" ) )
assertEquals ( stage , c . completable . whenFailed ( consumer ) )
Assert . assertTrue ( false )
assertThat ( options . getCredentialsProvider ( ) , is ( ConfigurationVariable . CREDENTIAL_PROVIDER . defaultValue ( ) ) )
Assert . assertEquals ( jobs , Util . getJobs ( node ) )
assertThat ( mock . initialDelay , is ( 0L ) )
assertEquals ( "" , result )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.B = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.B', org.apache.royale.B);\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo1 = function() {\\n  var self = this;\\n  function bar1() {\\n    return null;\\n  };\\n  return bar1();\\n};\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo2 = function() {\\n  var self = this;\\n  function bar2(param1) {\\n    return null;\\n  };\\n  return bar2('foo');\\n};\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo3 = function() {\\n  var self = this;\\n  function bar3(param1) {\\n    return null;\\n  };\\n  return bar3('foo');\\n};\\n\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo4 = function() {\\n  var self = this;\\n  function bar4(param1) {\\n    return null;\\n  };\\n  return bar4('foo');\\n};\\n\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo5 = function() {\\n  var self = this;\\n  function bar4(param1) {\\n     return null;\\n  };\\n  return bar4('foo');\\n};\\n\\n\\
assertEquals ( true , activity . isAlertStandby ( ) )
assertEquals ( new Integer ( "2147483647" ) , result )
assertMockEndpointsSatisfied ( )
assertSame ( logger1 , logger2 )
assertEquals ( 1 , root . getChildrenNames ( ) . length )
assertTrue ( STRATEGY . shouldTerminate ( context ) )
assertEquals ( entityA . getEnumProperty ( ) , copy . getEnumProperty ( ) )
assertEquals ( hll . cardinality ( ) , hll2 . cardinality ( ) )
assertEquals ( expectedId , dbms . getId ( ) )
assertEquals ( response , actualResponse )
assertTrue ( failedAsExpected )
assertNull ( id )
objects . assertHasAllNullFieldsOrPropertiesExcept ( INFO , jedi , "lightSaberColor" , "name" )
assertThat ( location , is ( nullValue ( ) ) )
assertEquals ( "IdentifierLabel" , resource . getIdentifier ( ) . get ( 0 ) . getValue ( ) )
assertThat ( read ( format , written ) , contains ( true ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "other_group" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertDefaults ( targetProduct , false )
assertChildrenInclude ( branches , "master" )
Assert . assertEquals ( 0 , result . size ( ) )
assertEquals ( "Wrong number of bean providers" , 2 , config . getBeanProviders ( ) . size ( ) )
Assert . assertFalse ( "Invalid result" , result )
assertEquals ( MockHttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( "null" , "" + swct )
Assert . assertEquals ( "no-opts-command " , test . getBuffer ( ) )
assertEquals ( Boolean . TRUE , e . getEnableCounting ( ) )
Assert . assertFalse ( this . manager . delete ( new Person ( this . doc ) ) )
assertThat ( kryo , is ( "a b" ) )
assertTrue ( res . equals ( result . toString ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , PassEncoder . decodeAsString ( PassEncoder . decodeAsString ( expected . toCharArray ( ) ) ) )
assertEquals ( BuilderFactory . start ( ) . addMongoTimestamp ( "a" , 123456789L ) . build ( ) , doc )
assertThat ( confirmation . getConfigurationKey ( ) , equalTo ( keyValueType ) )
assertEquals ( childProject1 . getTouchStoneCombinationFilter ( ) , childCombinationFilter )
assertEquals ( expResult , result )
assertEquals ( "Simple Content" , metadata . get ( TikaCoreProperties . TITLE ) )
assertEquals ( jobTrackerPort , namedClusterBridge . getJobTrackerPort ( ) )
TestCase . assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( cDate , eDate )
Assert . assertTrue ( "Best point not reported" , f . value ( sol ) <= f . value ( expected ) )
rule . assertScenarioEnded ( )
assertFalse ( order . hasSameOrderableAs ( otherOrder ) )
assertEquals ( "Hello World" , translate . execute ( "Bonjour le monde" , Language . FRENCH , Language . ENGLISH ) )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertEquals ( 2 , set . size ( ) )
assertions . isLessThan ( 10f )
assertTrue ( fetchCommand . isAValidDefinition ( activityBeansCache ) )
Assert . assertEquals ( "Delete_rows_v1" , actual )
assertEqualsIgnoreWhitespace ( drl , actualDrl )
assertEquals ( "Editable owner ACE for UID1 should be equal to expectedOwnerAccessControlEntry" , expectedOwnerAccessControlEntry , store . getEditableOwnerAccessControlEntries ( UID1 ) . get ( 0 ) )
assertEquals ( "The job has been failed" , LauncherStatus . COMPLETED , AddVectorET . runAddVector ( args ) )
assertEquals ( reqTotal , ratisMetricRegistry . counter ( RATIS_GRPC_METRICS_REQUESTS_TOTAL + getHeartbeatSuffix ( heartbeat ) ) . getCount ( ) )
assertThat ( CompUInt128 . extractValue ( actual ) , Is . is ( expected ) )
assertEquals ( 400 , status . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Expected same message for delete with access pattern and group with an access pattern which has not been met: group(s) [pm4.g1.e1] History " + " [pm4.g1.e1] History " + " [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History [pm4.g1.e1] Given: History
assertTrue ( list . equals ( plist ) )
assertTrue ( item . canBeCreated ( ) )
assertTrue ( dependentService . getValue ( ) != null )
assertThat ( results . getTotalElements ( ) , equalTo ( 1L ) )
assertThat ( matcher . matches ( list ) , is ( true ) )
assertEquals ( g1 , g2 )
assertEquals ( 2 , i )
assertFalse ( matches )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , out )
assertNotNull ( post )
assertEquals ( 84.0 , r . getUpperBound ( ) , 0.00001 )
arrays . assertDoesNotContain ( description , actual , value , index )
assertTrue ( sqsConnection . isClosed ( ) )
assertEquals ( 1 , messages . size ( ) )
assertFalse ( set1 . equals ( set2 ) )
assertEquals ( "tst01" , currentSession ( ) . get ( "tst01" ) )
assertEquals ( "a<V>\\n" , found )
assertNotEqualsBothWays ( one , two )
assertThat ( catalogue . allAttributes ( ) . keySet ( ) , hasItems ( "writableField" , "encapsulatedField" ) )
assertThat ( PrettyTime . of ( Locale . US ) . withDefaultListSeparator ( " | " ) . print ( duration , TextWidth . WIDE ) , is ( "1 year | 2 months + 3 days" ) )
assertTrue ( "The subject should have contained the fetched values" , result1 )
assertTrue ( process . getExitStatus ( ) == ExitStatus . FORBIDDEN )
assertEquals ( ExpressionFactory . dbPathExp ( "paintingArray.toExhibit" ) , translatedExpression )
assertOut ( "var a:XML = XML('@')" )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasItem ( createConfigMapKeyRefEnvVar ( ITEM1 , "my-env" , END_VALUE_1 ) ) , hasItem ( createSecretKeyRefEnvVar ( ITEM2 , "my-secret" , END_VALUE_2 ) ) , hasItem ( createFieldRefEnvVar ( ITEM3 , END_VALUE_3 ) ) ) )
assertTrue ( bugs . toString ( ) , bugs . isEmpty ( ) )
assertEquals ( "Expected that a @Stateful proxy reference doesn't change bean target, " , report . beanId1 , report . beanId2 )
Assert . assertEquals ( expected , widgetFromService )
Assert . assertEquals ( "[4, " + b . getStrings ( ) [ 0 ] + "]" , b . getStrings ( ) [ 0 ] )
assertTrue ( eq . interpret ( Version . valueOf ( "1.0.0" ) ) )
Assert . assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertTrue ( actual . getItems ( ) . contains ( "true" ) )
assertEquals ( expResult , result )
assertEquals ( NOT_DECODED , 1 , object . getIdentifier ( ) )
assertEquals ( 15 , atAct2 . get ( 0 ) )
TestUtil . assertEquals ( exp , spans )
assertTrue ( width == 200 )
Assert . assertEquals ( FORBIDDEN , IdentityResponseWrapper . buildFaultMessage ( responseMock ) . getCode ( ) )
assertEquals ( actual , expected )
assertLineCount ( )
assertNull ( deliverer )
Assert . assertTrue ( cover . getBoundaries ( ) . getX ( ) . getMax ( ) > TEST_MODEL . getBoundaries ( ) . getX ( ) . getMax ( ) )
assertEquals ( text , new String ( messageBytes ) )
Assert . assertNotNull ( product )
assertTrue ( "Rules with different names cannot be equal" , r1 . equals ( r2 ) )
assertEquals ( expected , result )
assertArrayEquals ( BufferUtils . getIncreasingByteArray ( ( int ) BLOCK_LENGTH / 2 , ( int ) BLOCK_LENGTH * 2 ) , b )
assertEquals ( 15 , age . intValue ( ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
Assert . assertEquals ( resourceContent , writer . toString ( ) )
Assert . assertFalse ( effect . get ( ) )
Assert . assertTrue ( queryResult . getSize ( ) >= 1 )
assertThat ( NF . textNode ( "foo" ) , is ( sut ) )
assertSame ( GBP_2_34 , test )
arrays . assertDoesNotHaveDuplicates ( someInfo ( ) , actual )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertMessages ( "read" , 3 , "readCbuf" )
assertEquals ( "3/4 5/6 7/8 9/2 10/2 ? 2017" , descriptor . describe ( cron ) )
assertEquals ( SchemaFromInd1OrIf7FromSubfield2 . class , field . getDefinition ( ) . getFieldIndexer ( ) . getClass ( ) )
assertThat ( crawlRules . getWaitAfterEvent ( ) , is ( 123L ) )
Assert . assertEquals ( 1000 , response . getTotalHits ( ) . value )
assertEquals ( "Expected 1 result!" , 1 , count )
assertResult ( testSubject . findAnnotatedModel ( "one" ) , ONE , "asd" )
assertEquals ( expected , replaceAclEntries ( existing , aclSpec ) )
assertEquals ( OP_PROP_VALUE , parsed . getOperationName ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 4. , analyser . getWaitingTime ( route ) , 0.01 )
assertEquals ( p1 , p2 )
assertThat ( daycountConventionICMA . getDayCount ( ) , is ( 24 ) )
assertNotNull ( profileProperties )
assertFalse ( alive )
assertEquals ( .10 , commission , 0 )
assertInstanceOf ( SwapMoveSelector . class , moveSelector )
assertEquals ( asList ( error ( mdcValues , marker , throwable , message ) ) , testLogger . getLoggingEvents ( ) )
assertTrue ( content . getTitle ( ) . contains ( "Short Urls" ) )
Assert . assertNotNull ( controllerResponse )
Assert . assertEquals ( state , updates . getSyncState ( userName ) )
assertThat ( backtrace , hasItem ( "at airbrake.Exceptions.java:16:in `newException'" ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( true , agent . detectIphone ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 10 , ctr . getCount ( ) )
assertFalse ( output , output . contains ( uuid ) )
assertEquals ( expected , ex . getMessage ( ) )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Products(5)" ) . addParameter ( "$expand" , "ProductInfo($expand=ProductInfo;$select=Price)/$count,Orders,Customers" ) . build ( ) , uri )
Assert . assertNull ( reporter . getProblemCounters ( ) . get ( Code . FIELD_STATIC_INJECTION_WITH_LONGER_STATIC . code ( ) ) )
assertEquals ( 1 , events . size ( ) )
throwables . assertHasMessageMatching ( info , actual , REGEX )
Assert . assertNull ( concept )
assertEquals ( 2 , tdefsRes . getBody ( ) . length )
assertTrue ( page . asXml ( ) . contains ( "This is a test." ) )
assertEquals ( expResult , result )
assertEquals ( "new value" , result )
Assert . assertTrue ( true )
assertEquals ( expectedAst , ast . dump ( "" ) + "\\n" )
assertEquals ( "Find by UoM label with unknown label is still returning a list with one reading" , 1 , readings . size ( ) )
assertOut ( "RoyaleTest_A.prototype.foo.apply(this, [a, b, c], foo.bar.E, true)" )
assertNotNull ( stream )
assertEquals ( "Testing coverage metrics" , metrics , coverageMeasure . getValue ( ) )
Assert . assertNull ( "Should not have thrown an exception" , thrown )
assertEquals ( propMatch , properties )
assertEquals ( 200 , httpResponse . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "subsystem=test/resource=name" , s )
assertEquals ( expectedForceObject , tree . get ( forceObjectOne ) )
Assert . assertEquals ( 3 , fromDependencies . size ( ) )
assertEquals ( "Ljava/lang/String;" , result . get ( "name" ) )
assertEquals ( METHOD_COUNT , functionImportList . size ( ) )
assertEquals ( ansi ( ) . bold ( ) . fg ( Color . BLUE ) . toString ( ) , str )
assertTrue ( s . isSentToRawPubKey ( ) )
assertNotNull ( Deencapsulation . getField ( jobsResponseParser , "updateTwin" ) )
assertThat ( ( TraceeBackend ) FieldAccessUtil . getFieldVal ( interceptor , "backend" ) , is ( Tracee . getBackend ( ) ) )
assertEquals ( expected , actual )
Assert . assertTrue ( handle )
assertEquals ( 1 , tableDesc . getPrimaryKeyDescList ( ) . size ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( 50. , activityState , Math . ulp ( 50. ) )
Assert . assertEquals ( expectedString , resultString )
Assert . assertEquals ( "subclass" , created . get ( "type" ) )
assertNotNull ( reportExecTO )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertLinkWithPoolgroupsOk ( poolgroups )
assertEquals ( id3v1Tag , wrapper . getId3v1Tag ( ) )
assertNull ( classUnderTest . getStatusBarFontInfo ( ) )
assertNotNull ( bar )
assertThat ( issue . toString ( ) , is ( "foo.js(1,1,1,1,1)" ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "��匕 3 丿�丕�丕鬲" , t . format ( new Date ( 0 ) ) )
assertEqualsSet ( "DataOneOf.rdf" , ax , Declaration ( DP ) )
assertFalse ( result )
assertEquals ( "
assertThat ( factory . buildConfiguration ( ) , is ( filterConfig ) )
assertEquals ( Status . DEADLINE_EXCEED . getCode ( ) , status . getCode ( ) )
assertNotNull ( result )
assertNotNull ( "WorkersCompensationRate is null" , entity )
assertNotNull ( Mobile . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertTrue ( d_pm . getCriterionEnabledModel ( ExampleData . buildEndpointHamd ( ) ) . getValue ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( AuthorizationResult . Decision . PERMIT , result . getDecision ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( 0 , tasks . size ( ) )
assertSerializedEquals ( c )
Assert . assertEquals ( "3 dager sedan" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertEquals ( "" , result )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
Assert . assertEquals ( "result" , testBean . getResult ( ) )
assertEquals ( exp , act )
assertions . isNotEqualTo ( expected )
assertNotNull ( Extension . reader ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( componentName , "${componentNameClass}Output" )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertThat ( isValid , is ( true ) )
assertTrue ( mutationsOccurred . get ( ) )
Assert . assertTrue ( convert ( path , namespace , files ) . isEmpty ( ) )
assertEquals ( expected , result )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( expected , actual )
assertEquals ( Status . NOT_FOUND , status )
assertEquals ( subsection , section . getConfigurationSection ( key ) )
assertTrue ( result . size ( ) >= 1 )
assertEquals ( 1 , statisticsController . getWinners ( ) . size ( ) )
assertEquals ( "" , result )
assertEquals ( out . readableBytes ( ) , 0 )
assertEquals ( 174 , readValue )
assertThat ( sampleEntity1 , is ( notNullValue ( ) ) )
assertCharsets ( JodaBeanSer . PRETTY , json , bean , ImmOptional . class )
assertEquals ( "Good Morning!" , hello . sayHello ( ) )
assertEquals ( 0 , testApp . executeApplication ( args ) )
assertEquals ( 1 , places . iterator ( ) . next ( ) . getId ( ) )
assertTrue ( "No issues found" , issues . isEmpty ( ) )
Assert . assertEquals ( 0 , number )
assertTrue ( v8 . executeBooleanScript ( "global === window" ) )
assertTrue ( this . timedTask . getInvocationsTimedTaskA ( ) > 0 )
assertEquals ( "璁＄����璇�" , 31 , rs )
assertEquals ( 255 , buffer . getInt ( 0 ) )
assertEquals ( 2 , instance . getFeatures ( ) . size ( ) )
assertEquals ( expResults , results )
assertEquals ( expected , test )
assertEquals ( expected , actual )
assertEquals ( "S3A_OL_1_EFR___20181001T022958_20181001T023258_20181002T090807_0179_036_203_1980_MAR_O_NT_002.SEN3" , name )
Assert . assertTrue ( errors . hasFieldErrors ( "name" ) )
SqlScriptDescriptorAssert . assertThat ( scriptDescriptors )
Assert . assertTrue ( "did not remove DOI" , foundDOI )
assertEquals ( propertyValue , resultMap . get ( "Name" ) )
Assert . assertEquals ( 2 , encounters . size ( ) )
assertEquals ( expecting , found )
assertThat ( references , hasSize ( 0 ) )
assertEquals ( "13978AEE95F38490E9769C39B2773ED763D9CD5F" , Hex . toHexString ( addr ) . toUpperCase ( ) )
visitor . assertSatisfiedTransition ( "checking state contains two branches" , _rootComposite , transition )
assertEquals ( "Wrong number of validation errors found" , 2 , numMessagesFirstPass )
assertTrue ( "size must be more than 0, but it is - " + queryModel . size ( ) , queryModel . size ( ) > 0 )
Assert . assertEquals ( normalized , 0.0 )
assertNull ( lijst . getLast ( ) )
Assert . assertNotEquals ( first , second )
assertFileContentIsMatching ( result )
assertEquals ( "x" , x )
assertThat ( resultSet , hasSize ( 1 ) )
assertNotNull ( pj )
assertModelHasProperty ( "serviceInstances" , Optional . empty ( ) )
assertEquals ( ( limit + 1 ) * ( limit / 2 ) , total . sum ( ) )
assertParseTree ( rootNode ( "12" , node ( "digits" , Arrays . asList ( "1" , "2" ) , "12" , stringNode ( "d" , "1" ) , stringNode ( "d" , "2" ) ) ) , tree )
assertEquals ( expResult , result , 0.0001 )
assertMessage ( ":1 A command with that name already exists." , response )
assertEquals ( 1 , findings . size ( ) )
assertNull ( reader . overflowAtoms ( ) )
Assert . assertEquals ( "Hash is invalid" , SHA256_DIGEST_EMPTY_STRING , result )
assertEquals ( "POST" , cr . getEntity ( String . class ) )
assertThat ( findAll , hasItems ( "itemName" , "name" ) )
assertMockEndpointsSatisfied ( )
assertFalse ( result )
assertThat ( result , is ( "OrderServiceImpl: function(): some static mocked value: staticFunction" ) )
assertTrue ( service . isExistGroupName ( "test pg" ) )
assertEquals ( "hello world" , commands [ 0 ] )
assertEquals ( "(void foo ;)\\n" , found )
assertThat ( configuration . getProperties ( ) , hasProperty ( "header.escape.test" , "E" ) )
assertEquals ( "their" , wsis . getOutputPeer ( ) )
assertThat ( subject . isMailerEnabled ( mockMail , "development" ) , is ( true ) )
assertThat ( patientResource . getProfile ( ) , containsString ( PATIENT_SUB ) )
Assert . assertThat ( actual , CoreMatchers . is ( expected ) )
assertNotNull ( "invalid workflow description" , iridaWorkflowLoaderService . loadWorkflowDescription ( workflowDescriptionPath ) )
assertEquals ( contentTypeString , ContentType . toString ( ) )
Assert . assertNotNull ( "Expected to be able to get MeteredClassInterface by interface and not by class." , mi )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertThat ( result , is ( false ) )
assertEquals ( expectedSplits , new TreeSet < > ( createdSplits ) )
assertEquals ( NettyTransporter . class , ExtensionLoader . getExtensionLoader ( Transporter . class ) . getExtension ( name ) . getClass ( ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( false , rm . incomingServerRequestMatchesMethod ( withResourceAndParams ( "Patient" , RequestTypeEnum . GET , inputParams ) ) )
assertThat ( imageName , is ( "default-base-image" ) )
assertThat ( underTest . isSatisfied ( ) , is ( false ) )
assertEquals ( "321609" , ripper . getGID ( url ) )
assertEquals ( ( short ) 8 , ( short ) result . getShortWrapperValue ( ) )
assertEquals ( "novecentos e noventa e nove trilh玫es, " + "novecentos e noventa e nove milh玫es, " + "novecentos e noventa e nove reais" , words )
mock . assertIsSatisfied ( )
assertThat ( found , equalTo ( expected ) )
assertEquals ( "users should be the same from both ext sources" , user , returnedMember )
context . assertIsSatisfied ( )
assertIsErrorWithoutStacktrace ( "Method 'notTheMethod' was not found in class com.fnproject.fn.runtime.testfns.ErrorMessages.OneMethodClass'. Available methods were: []" )
assertCity ( docs , "Berlin" )
assertTrue ( "http://foo.bar.com/fubar?a=d&e=f" . equals ( newEu ) || "http://foo.bar.com/fubar?e=f&a=d" . equals ( newEu ) )
Assert . assertTrue ( "Expected aKRB5 cipher suites, got null" , resolved != null && resolved . size ( ) != 0 )
assertThat ( integerProperty , is ( equalTo ( 42 ) ) )
assertEquals ( "V2 GenreDescription" , wrapper . getGenreDescription ( ) )
assertEquals ( response . getStatus ( ) , HttpServletResponse . SC_NOT_MODIFIED )
assertThat ( screenshotDirectory , endsWith ( separator + "screenshots" + separator + anyFileName + ".png" ) )
assertArrayEquals ( encoded , plain )
assertEquals ( "Destriction" , entity . getDescription ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( skillConstraint . fulfilled ( insertionContext ) )
Assert . assertEquals ( "tez" , hiveShell . getHiveConf ( ) . getVar ( HiveConf . ConfVars . HIVE_EXECUTION_ENGINE ) )
assertThat ( ping . getMessageObservers ( ) . size ( ) , is ( 0 ) )
assertEquals ( expected , TypeDefinition . getInstance ( Qux . class ) . getAllGetters ( ) )
Assert . assertEquals ( numero , importacaoAdicao . getNumero ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( result , one )
assertTrue ( true )
assertEquals ( 1 , service . prepare ( query ) . count ( fo ) )
assertEquals ( expResult , result )
assertNull ( RenderKitUtils . decodeBehaviors ( facesContext , component ) )
Assert . assertTrue ( notify . matches ( 30 , TimeUnit . SECONDS ) )
Assert . assertTrue ( read . contains ( str ) )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertNull ( instance . list )
assertEquals ( MD5HashStrategy . class , actual . getClass ( ) )
assertEquals ( "Incorrect Short Reason" , "Platform Down leela.local Baseline threshold" , alertManager . getShortReason ( testPlatformAlert ) )
Assert . assertEquals ( numeroPedidoItemCliente , produto . getNumeroPedidoItemCliente ( ) )
Assert . assertEquals ( "apk.minSdkVersion" , "8" , apk . getMinSdkVersion ( ) )
assertSame ( s , StringDistance . create ( s ) )
assertEquals ( poly , parsed )
assertFalse ( containsAll )
assertEquals ( c1 , c2 )
assertEquals ( expectedMergedSchema , mergedExplicitSchema )
assertNotNull ( array )
assertEquals ( "3 ��� 卅��诏�乇�" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( "default-value" , configuration . evaluateToString ( "default-value" ) )
assertThat ( highAvailabilitySupportChecker . isSupported ( FORMAT_NAME ) , is ( true ) )
assertTrue ( brokenSchemaEx . getMessage ( ) != null )
assertEquals ( new HashSet < Tuple2 < Integer , String > > ( asList ( new Tuple2 < Integer , String > ( 1 , "alpha" ) , new Tuple2 < Integer , String > ( 2 , "alpha" ) , new Tuple2 < Integer , String > ( 3 , "alpha" ) , new Tuple2 < Integer , String > ( 4 , "alpha" ) , new Tuple2 < Integer , String > ( 5 , "alpha" ) , new Tuple2 < Integer , String > ( 6 , "alpha" ) , new Tuple2 < Integer , String > ( 7 , "alpha" ) , new Tuple2 < Integer , String > ( 8 , "alpha" ) , new Tuple2 < Integer , String > ( 9 , "alpha" ) , new Tuple2 < Integer , String > ( 10 , "alpha" ) , new Tuple2 < Integer , String > ( 11 , "alpha" ) , new Tuple2 < Integer , String > ( 12 , "alpha" ) , new Tuple2 < Integer , String > ( 13 , "alpha" ) , new Tuple2 < Integer , String > ( 14 , "alpha" ) , new Tuple2 < Integer , String > ( 15 , "alpha" ) , new Tuple2 < Integer , String > ( 16 , "alpha" ) , new Tuple2 < Integer , String > ( 17 , "alpha" ) , new Tuple2 < Integer , String > ( 18 , "alpha" ) , new Tuple2 < Integer , String > ( 19 , "alpha" ) , new Tuple2 < Integer , String > ( 20 , "alpha" ) , new Tuple2 < Integer , String > ( 21 , "alpha" ) , new Tuple2 < Integer , String > ( 22 , "alpha" ) , new Tuple2 < Integer , String > ( 23 , "alpha" ) , new Tuple2 < Integer , String > ( 24 , "alpha" ) , new Tuple2 < Integer , String > ( 25 , "alpha" ) , new Tuple2 < Integer , String > ( 26 , "alpha" ) , new Tuple2 < Integer , String > ( 27 , "alpha" ) , new Tuple2 < Integer , String > ( 28 , "alpha" ) , new Tuple2 < Integer , String > ( 29 , "alpha"
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( "Wrong ID Test URL" , expResult , result . toString ( ) )
assertEquals ( false , bm . isBitSet ( bitNumber ) )
assertNotNull ( cert )
assertEquals ( "Wrong text" , "App should not be logged" , message )
assertNotNull ( result )
Assert . assertEquals ( false , actual )
assertArrayEquals ( new int [ ] { 0x11 , 0x22 , 0x33 , 0x44 , 0x55 , 0x66 , 0x88 , 0x99 , 0x00 , 0xAA , 0xBB , 0xCC , 0xDD , 0xEE , 0xFF } , key . getKey ( ) )
assertEquals ( "John Doe" , user . getValue ( ) . getEmail ( ) )
Assert . assertEquals ( "Wrong number of Rpgs in " + dir , 10 , errors . size ( ) )
assertThat ( actual , is ( object ) )
assertEquals ( "bar" , portal . getPage ( new PageId ( "test1" , "page2" ) ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( IOUtil . toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-alpha-20.xml" ) . getAbsoluteFile ( ) ) , "UTF-8" ) , IOUtil . toString ( os . toByteArray ( ) , "UTF-8" ) )
assertEquals ( layout , readLayout )
assertEquals ( "License is not valid" , licenseContent , "License is not valid" )
assertNotNull ( user )
assertPerms ( perms )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( result > 0 )
assertThat ( feature . getName ( ) , Is . is ( "test.feature" ) )
assertSame ( tt2 , tt )
assertMappedFieldValueIs ( "CustomMappedValue" )
assertNull ( future . get ( ) )
assertEquals ( model , RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "QuantityValue.rdf" ) ) )
Assert . assertEquals ( 5 , bitmap . size ( ) )
assertSame ( ret , projectItem )
Assert . assertEquals ( p4 , p3 )
assertNotNull ( iotHubServiceClient )
assertEquals ( "1x2" , encoder . encode ( context ) )
Assert . assertEquals ( "<TestJsonBean><email>test@email.com</email><birthday>2012-11-23 00:00:00</birthday></TestJsonBean>" , json )
assertFalse ( "Values should not be equal" , equals )
assertThat ( actual , is ( expected ) )
assertEquals ( control , key )
assertNull ( result )
Assert . assertEquals ( out , builder . toHexString ( ) )
assertTrue ( "Should match" , query1 . equals ( query ) )
assertEquals ( "testOperationIdResolver" , serviceId )
context . assertEquals ( context , list . vertx ( ) . getOrCreateContext ( ) )
assertEquals ( "Conversion did not match" , value , to )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20170810</date>" + "<item><id>222</id><amount>1</amount></itemn></order>" , xml )
assertEquals ( 0 , dbHandler . getDataElementCount ( ) )
Assert . assertTrue ( check . equals ( o ) )
assertThat ( DataSourceConnectorFactory . class . getName ( ) , is ( "com.querydsl.jcr.api.types.Reference" ) )
assertThat ( comparator . compare ( projectChange1 , projectChange2 ) , is ( - 1 ) )
Assert . assertEquals ( "lucene:title,field1,field1" , result . getHits ( ) . get ( 0 ) . getExplanation ( ) . getDetails ( ) . get ( 0 ) . getDetails ( ) . get ( 0 ) . getDescription ( ) )
assertEquals ( expectedArg , parsedArg )
assertTrue ( getExpectedErrorMsg ( ) , result )
assertEquals ( "EUR -5.78" , test . toString ( ) )
assertEquals ( expected , result )
assertOnResponseAttachment ( f6 , MAX_SIZE2 , "Client3gbAttachment.txt" )
Assert . assertNotNull ( String . valueOf ( obj ) , obj )
Assert . assertTrue ( dsDao . getDSInfo ( remoteDSAddress . toString ( ) ) . isUp ( ) )
assertNotNull ( UserChannel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "
assertFrameHex ( "Lax Text Frame with RSV3" , expected , actual )
assertFalse ( newBehavior . isIsolatedLeader ( ) )
assertThat ( expectedQueryFilterSpec , new ReflectionEquals ( unmarshalledQFS ) )
assertThat ( results , samePaths ( new File ( a , "f.txt" ) , new File ( b , "f.txt" ) , new File ( c , "f.txt" ) ) )
assertEquals ( 1 , ksession1 . fireAllRules ( ) )
assertEquals ( 0 , events . size ( ) )
Assert . assertTrue ( duplicateWorkComparator . isDuplicate ( doc1 , doc2 , null ) )
assertEquals ( "Wrong property value (path=" + path + ")" , "Just do it" , property . getRealValue ( ) . getHowto ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_name . FILTER(?user_name != ?_c6) }" )
assertNull ( "Found non-existant file" , in )
assertTestRunFails ( testPlan )
assertEquals ( expectedSize , event . size ( ) )
Assert . assertNotNull ( httpResponse )
assertNull ( e )
assertOut ( "/**\\n * @param {string=} bar\\n * @return {number}\\n */\\nRoyaleTest_A.prototype.foo = function(bar) {\\n\\tvar self = this;\\n\\tbar = typeof bar !== 'undefined' ? bar : \\"baz\\";\\n\\treturn -1;\\n}" )
assertThat ( formatter . isStrict ( ) , is ( true ) )
assertEquals ( expResult , result )
assertTrue ( ripper . getBestSourceUrl ( json ) . equals ( new URL ( "http://vk.com/album45506334_0" ) ) )
assertNotNull ( dao )
assertTrue ( instanceConstraintViolationsList . toString ( ) , instanceConstraintViolationsList . size ( ) == 1 )
assertThat ( result , is ( new String [ ] [ ] { { "this" } } ) )
assertEquals ( Address . Country . Netherlands , accountMap . get ( "country" ) )
assertEquals ( "{\\"list\\":[]}" , toJson )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertObjectEquals ( "{type:'object',properties:{f1:{type:'string'}},'x-example':{f1:'foobar'}}" , s . getSchema ( SimpleBean . class ) )
assertEquals ( 0 , activeThreadCount . getAsInt ( ) )
assertExpectedPreprocessingResult ( expectedResultLocation , includeReader )
assertTrue ( smileys . isEmpty ( ) )
assertEquals ( "from config pojo" , mojo . getConfigPojo ( ) . getName ( ) )
assertTrue ( response . getNumberOfFeatures ( ) . intValue ( ) == 1 )
assertTrue ( hasImage ( IMAGE_TAG ) )
assertEquals ( null , request . getCharacterEncoding ( ) )
assertEquals ( DOMAIN + '@' + DOMAIN , bareJID )
Assert . assertEquals ( "password" , codec . encode ( "password" ) )
assertThat ( ( String ) jsonAsMap . get ( "name" ) , is ( "com.example.TypeWithEnumProperty_name" ) )
assertThat ( impl . getOntologyAnnotations ( ontologyId ) . count ( ) , is ( 1L ) )
assertNotNull ( "converter must not be null" , s )
assertEquals ( "Test2" , gbpNetworkServicePolicyOut . getName ( ) )
assertTrue ( suffix1 . equals ( suffix2 ) )
assertArrayEquals ( expected , fileArray )
assertThat ( result , is ( CodePoints . NOT_FOUND ) )
assertTrue ( e . getMessage ( ) . contains ( "LineIndex: " + i ) )
assertEquals ( uploadLocation + FileUtils . toDir ( stateToken ) + filename + "." + subExt + extension , absFile )
assertEquals ( ( float ) 8 , result . getFloatValue ( ) , 0.0 )
Assert . assertEquals ( "notes.txt" , actual )
assertEquals ( expResult , result )
assertEquals ( "concrete.ttl" , s )
assertThat ( roundtrippedRecord , equalTo ( record ) )
assertEquals ( "hello" , result )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR_500 , resp . getStatus ( ) )
assertEquals ( "Invalid version extracted" , expVersion , result . getParentVersion ( ) )
excelApplicationManager . assertContent ( new File ( getClass ( ) . getResource ( "expected_ok_three_sheets.xls" ) . toURI ( ) ) , "Feuil1,Feuil2" , EMPTY_LIST )
assertThat ( artifact , is ( notNullValue ( ) ) )
Assert . assertTrue ( os . toString ( "UTF-8" ) . contains ( "Unknown target" ) )
assertEquals ( expResult , result )
assertThat ( extractMonitorables ( adapter ) . get ( MEAN ) . get ( ) , Matchers . < Object > is ( newMean ) )
assertTrue ( runs . isEmpty ( ) )
assertEquals ( newBalanceResult , completeBalanceResults )
Assert . assertEquals ( "Look up failed for key: " + key , Boolean . TRUE , dbf1 . evaluate ( bfstr , key ) )
assertThat ( representation . getInteger ( "size" ) , is ( 1 ) )
assertEquals ( null , avg )
assertEquals ( "Should have connected to the server." , ourServer . waitForClient ( TimeUnit . MILLISECONDS . toMillis ( 10 ) ) , ourServer . waitForClient ( TimeUnit . MILLISECONDS . toMillis ( 10 ) ) )
assertEquals ( "<p>foo test</p>\\n" , rendered )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( "Check principal has correct FQAN" , TEST_FQAN , principal . getFqan ( ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn.opendaylight" + ".openflow.common.instruction.rev130731.instructions.grouping.Instruction msgType: 11" + " experimenterID: null" , key1 . toString ( ) )
Assert . assertEquals ( expected , this . donutShop . getTopDonuts ( 2 ) )
assertEquals ( 1 , listener . getNumberOfTimesInvoked ( ) )
assertThat ( caughtException ( ) , instanceOf ( CustomException . class ) )
Assert . assertEquals ( actual , expected , "Returned an invalid property value." )
assertEquals ( unused , h . getUnused ( ) )
assertEquals ( "(* (* (a 34) b 9) c)\\n" , found )
assertServerAncestry ( trace )
assertTrue ( "The getChanges() method reported a change" , hasChange )
Assert . assertEquals ( 12 , tools . size ( ) )
assertFalse ( authorizer . isAuthorized ( context , profiles ) )
assertEquals ( expected , new WritablesToNDArrayFunction ( ) . apply ( l ) )
assertNumEquals ( 1 , profit . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( new ArrayList < PostReport > ( ) , mockResult . included ( "reports" ) )
Assert . assertTrue ( result . isEmpty ( ) )
Assert . assertEquals ( 1 , count )
assertFalse ( "property not cleared" , config . containsKey ( "key1" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( actual , expected , "Method with zero parameters does not match expected" )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
Assert . assertTrue ( "Wrong canonicalization using external mapping file" , TestFileUtils . compareFileToResource ( out , base ) )
assertEquals ( 20000L , testLong )
assertEquals ( expected , ColumnRanges . rangeAtNode ( isNull ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoPISOutrasOperacoes ( ) . toString ( ) )
Assert . assertEquals ( extractor . generateKey ( host , req1 ) , extractor . generateKey ( host , req2 ) )
assertEquals ( string , Util . bytes2url ( string ) )
Assert . assertEquals ( zero . getReal ( ) , 0 , 3.0e-16 )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER _IDX_T ['me',-32767,'a'] - ['me',-32767,*]" , QueryUtil . getExplainPlan ( rs ) )
assertFalse ( episode . isEmpty ( ) )
assertEquals ( "Hello, world!" , trans . escapeList ( data ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertThat ( encoded , containsString ( "\\"telecom\\":[{\\"extension\\":[{\\"url\\":\\"http://foo\\",\\"valueString\\":\\"AAA\\"}]}" ) )
Assert . fail ( "Expecting MathIllegalStateException" )
assertJsonIs ( "{\\":type\\":\\"some/resource/type\\",\\"helloWorld\\":\\"Hello, world\\"}" )
assertEquals ( parseCalendar ( "20131028-00:00:00" , TimeZone . getTimeZone ( "Europe/Amsterdam" ) ) , dh . getCalendarAfter ( testingClock . getCurrentCalendar ( ) ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
responseAsserter . assertRegisterResponse ( )
assertEquals ( 0 , parameters . size ( ) )
assertEquals ( "listProperties" , ImmutableSortedSet . of ( "people-1" , "cars-1" , "test-1" , "default" ) , keys )
assertNotNull ( "precondition was supposed to fail" , result )
assertTrue ( survey . isStarted ( ) )
assertNull ( s )
Assert . assertNull ( "should not have description" , actualDescription )
assertEquals ( 0 , wlsDomainConfig . getServerConfigs ( ) . size ( ) )
assertEquals ( g1 , g2 )
assertEquals ( "1 bytes, 2 files, 4 bytes, 5 files, 6 files, 8 files, 8 files" , content )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , expected )
assertThat ( result , is ( "hello world" ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertThat ( values . getImage ( ) , equalTo ( stringValue ) )
assertNull ( found )
assertTrue ( Arrays . equals ( new int [ ] { 0 , 4 , 8 , 0 , 86 , 82 , 79 } , command . serialize ( ) ) )
assertEquals ( "DefaultUser" , result )
assertEquals ( String . format ( "Expected [%s] but got [%s]" , expected1 , expected2 ) , expected1 , expected2 )
assertThat ( target . getEthType ( ) , is ( new Integer ( OFPFlowActionPopMpls . MPLS_MULTICAST ) ) )
assertThat ( createdOrUpdated . getStatusInfo ( ) . getFamily ( ) , is ( Response . Status . Family . SUCCESSFUL ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( true ) ) )
assertThat ( text ( contents ) , is ( "1-A\\t2-B\\n" ) )
assertEquals ( FEEDBACK_MESSAGE , feedbackMessage )
assertBarcodeMatches ( true , movementLine , huMovementBL . getPackingMaterialCActivity ( ) )
assertEquals ( "1.0" , availablePackages . get ( 0 ) )
assertSpecialServletWasInvokedWith ( entity )
assertMockEndpointsSatisfied ( )
assertEquals ( expResult , result )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2008 , 2 , 15 ) , OFFSET_PONE ) , t )
assertEquals ( "12.9" , df . format ( blackFridayTVDeal ) )
assertNotNull ( commonSchema )
Assert . fail ( "Expected exception to be thrown!" )
Assert . assertEquals ( stId , serviceTemplate . compareTo ( otherStId ) )
assertResultSet ( res )
assertEquals ( "fnord( \\"bar\\" )" , returnData )
assertEquals ( ValidationResult . OK , r )
assertEquals ( TestUtil . LOCAL_TEST_PROXY , result . get ( 0 ) )
Assert . assertFalse ( iterator . hasNext ( ) )
assertEquals ( "24:00:00" , v . getStringValue ( ) )
Assert . assertFalse ( tt . isPrematureBreak ( null ) )
assertEquals ( "Main class name" , "org.knopflerfish.framework.Main" , new KnopflerfishPlatformBuilderF300 ( m_bundleContext , "version" ) . getMainClassName ( ) )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertTrue ( tbce . compareScreen ( "foo" ) )
assertThat ( result , is ( "\\"" + ID + "\\"" ) )
assertTrue ( game3 . isGameOver ( ) )
assertTrue ( true )
assertTrue ( log . getClass ( ) . getName ( ) . startsWith ( "org.ops4j.pax.logging.avalon" ) )
assertEquals ( "a" , unit . getApiKey ( ) )
assertEquals ( 18 , result )
Assert . assertNull ( changed . getDatatype ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( result , equalTo ( v + "-" + ns ) )
assertTrue ( exceptionCaught )
assertEquals ( a1 , a2 )
assertEquals ( 28 , term . evalI ( env ) )
assertEquals ( "Herbert" , vcard . getName ( ) )
assertThat ( tags , hasItems ( "abc" ) )
assertTrue ( glass . accept ( point , 0 , 0 ) )
assertEquals ( 1 , servers . size ( ) )
assertTrue ( fileDescriptorChecker . isDetected ( ) )
Assert . assertTrue ( time < randomQueryTimeLimitInMillis )
assertEqualsIgnoreWhitespace ( "\\n\\t\\n\\tdrools.leaveLargeAlone();" , result )
assertDROOLS2286 ( context )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/view-hardcoded-params" ) )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 1 , queriedEntities . size ( ) )
assertRowsEqual ( expected , primaryData )
assertNull ( v . get ( ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertFalse ( Pattern . matches ( s , s ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<office:document-content xmlns:office=\\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\\" " + "xmlns:text=\\"urn:oasis:names:tc:opendocument:xmlns:text:1.0\\" " + "xmlns:table=\\"urn:oasis:names:tc:opendocument:xmlns:table:1.0\\">" + "<table:table table:name=\\"Compras\\" table:style-name=\\"Compras\\">" + "<table:table-column table:style-name=\\"Compras.A\\"/>" + "<table:table-header-rows>" + "#foreach($item_row in $row)" + "<table:table-row>" + "<table:table-cell table:style-name=\\"Compras.A1\\" office:value-type=\\"string\\">" + "#set($___NoEscape0=${___TextStylingRegistry.transform($item_row.html,\\"Html\\",$false,\\"ODT\\",\\"Html\\",\\"ODT\\",\\"Html\\",\\"ODT\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"Html\\",\\"H
assertException ( "FEEL-01017" , "false" , "12" , "< 12" , "'Hello'" )
assertEquals ( arr , arr2 )
assertEquals ( expectedJson , actualJson )
assertEquals ( "Base value is not properly parsed" , "true" , parsed )
assertEquals ( "HTTP/1.1 417 Expectation Failed" , sb . toString ( ) . trim ( ) )
assertEquals ( "Project_Default(Field(0))\\n" + "  Insert_Returning(INTO c)\\n" + "   Project_Default(_SEQ_NEXT(test, c_cid_seq), NULL)\\n" + "     ValuesScan_Default([])" , getExplain ( insert , table . getSchemaName ( ) ) )
assertEquals ( 5L , c . getParameterTypes ( ) [ 0 ] )
assertThat ( result2 . getNodes ( ) . size ( ) , is ( result2 . getNodes ( ) . size ( ) ) )
assertTrue ( ws . isClosed ( ) )
assertEquals ( 42 , tf . getConvertedValue ( ) )
assertEquals ( 1 , sp . getSinkProcessorTypes ( ) . size ( ) )
assertMockEndpointsSatisfied ( )
assertNull ( bidService . getBid ( bid . getId ( ) ) )
assertEquals ( SUPPRESSABLE , strategyName )
assertTrue ( headings . get ( 1 ) . text ( ) . equals ( "OK" ) )
assertEquals ( "void dest8(@A @B @C int, @B @C @D int, int, @C @D @E int)" , toString ( dest ) )
assertThat ( c . compute ( ) , is ( 3 ) )
assertEquals ( "Hello Worldfirst" , readUrlContents )
assertEquals ( 400 , PartitionUtils . getRecommendedPartitions ( pcollection ) )
assertTrue ( failListener . isFailed ( ) )
assertEquals ( 1 , regionInfoList . size ( ) )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( clientID . getServiceID ( ) ) )
assertEquals ( "Not a Mac" , 0 , keyLength % Byte . SIZE )
assertNotNull ( op )
Assert . assertEquals ( expectedProjectionBean , computedProjectionBean )
Assert . assertEquals ( currentYear - birthYear , AgeUtils . getFullAge ( birthDate ) )
assertEquals ( prettyPrintXml ( readContent ( EXPECTED_ABSTRACT_COMPLEX_TYPE_PATH ) ) , prettyPrintXml ( xml ) )
assertListTEquals ( listT , 12 , 13 , 14 , 15 )
assertThat ( lastCompletedBuildOf ( view ) . url ( ) , is ( "job/project-name/22/" ) )
assertEquals ( "^/protected/*/content$" , pattern )
Assert . assertEquals ( json . getAsInt ( "nodeType" ) , NodeType . JAVA_OBJECT )
assertEquals ( expectedHashCode , is . readInt ( ) )
assertEquals ( "Wrong quote value" , " [test@cmd ~]$ " , config . getString ( "CmdPrompt" ) )
assertEquals ( range1 , range2 )
assertEquals ( Rational . valueOf ( - 69936 ) , result )
assertEquals ( "Check that task ran" , 1 , ran )
assertEquals ( id , embedding . getId ( ) )
assertEquals ( expecting , found )
assertEquals ( expResult , result )
assertTrue ( reporterFactory instanceof GraphiteScheduledReporterFactory )
assertThat ( result , equalTo ( true ) )
assertThat ( result , is ( expected ) )
assertEquals ( unused , h . getUnused ( ) )
assertThat ( rowsModified , is ( 0 ) )
assertEquals ( "a" , mock . get ( 1 ) )
assertNotNull ( foo . field )
assertEquals ( testKeySize , tlsToolkitStandaloneCommandLine . keySize ( ) )
assertArrayEquals ( d . asDouble ( ) , d2 . asDouble ( ) , 0.001 )
assertThat ( result , is ( true ) )
assertThat ( ontology , is ( equalTo ( ontologyB ) ) )
assertTrue ( true )
Assert . assertEquals ( GracefulDegradationBean . PRIORITY , job . getPriority ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . assertEquals ( expected , testIndex . findConc ( "a:[] 'aap' b:[] :: a.word = b.lemma" ) )
assertEquals ( model , actual )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 1 ) , hasEntry ( "resourceVersion" , String . valueOf ( resourceVersion - 2 ) ) )
assertTrue ( definedInContext )
assertEquals ( "Should have loaded kotlin file" , EXP , exp )
assertEquals ( "Wrong parameters" , createTestParameters ( ) , params )
assertThat ( thrown , instanceOf ( ShardConfigStaleException . class ) )
assertNotNull ( UserChannel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "selenium.doubleClick(\\"link=my_link\\");" , result )
assertEquals ( t1 , t2 )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( DistCpCopier . class , copier . getClass ( ) )
assertEquals ( "Test" , ls . expect ( "org.aspectj.weaver.bcel" , org . spf4j . log . Level . ERROR , true , Collectors . toList ( ) ) . get ( 0 ) . getMessage ( ) )
assertResult ( 15 )
assertThat ( config , is ( notNullValue ( ) ) )
assertSame ( Integer . class , value . getValue ( ) )
assertEquals ( this . multipleExtCom , result . getAttributes ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "public class ClazzName {\\n" + "  public void doSomething(  Name values){\\n" + "     java.lang.Integer count = null;\\n" + "      list = new java.util.LinkedList<>();\\n" + "  }\\n" + "}" , cu . toString ( ) . trim ( ) )
assertEquals ( "The validator must validate" , violations . size ( ) , 1 )
Assert . assertEquals ( "[1, 3]" , s . toString ( ) )
assertEquals ( "xmldb:exist://localhost:8080/xmlrpc/db/collection" , db . getCollectionPath ( ) )
assertNotNull ( df )
assertThat ( formatter . parse ( "AD-1711/13-01-30" ) , is ( PlainDate . of ( 1711 , 1 , 30 ) ) )
assertEquals ( expected , actual )
assertIdentical ( "/simple.owl" , filtered )
assertEquals ( "hi" , twice . apply ( ZERO ) . call ( ) . get ( ) )
assertTrue ( connectFuture . isConnected ( ) )
assertNotNull ( result )
assertEquals ( origWriteSet , reorderSet )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , WeldStepBean . class )
assertEquals ( expected , actual )
assertNotEquals ( aNumber . hashCode ( ) , bNumber . hashCode ( ) )
assertEquals ( 1 , list . size ( ) )
assertTrue ( "install should exist" , destinationJar . exists ( ) )
assertNotNull ( permissionService . getPermissionsMapFor ( component ) )
SelendroidAssert . assertResponseIsResourceNotFound ( response )
assertEquals ( serializedYaml , yaml )
assertSame ( result , this . logger )
assertFalse ( user1 . equals ( user2 ) )
assertEquals ( "(DUH a (DUH 1)) (DUH b (DUH 2))\\n" , found )
assertEquals ( 1 , count )
assertEquals ( prevValue , currentValue )
assertTrue ( rootNode . getPrimaryNodeType ( ) . isNodeType ( JcrMixLexicon . REFERENCEABLE . getString ( session . namespaces ( ) ) ) )
assertArrayEquals ( new byte [ ] { 42 } , Files . readAllBytes ( withDot ) )
AssertAnnotations . assertPOS ( posMapped , posOriginal , select ( jcas , POS . class ) )
assertEquals ( NodeUtilities . NodeFromJSON ( "" ) , compoundWrite . getNode ( 0 ) )
assertNodesIn ( expected , y1Fun , Optional . of ( y1Fun ) )
assertThat ( hijri . with ( CommonElements . weekOfMonth ( HijriCalendar . family ( ) , model ) . incremented ( ) ) , is ( hijri . nextWeek ( ) ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
Assert . assertEquals ( String . class , field . getType ( ) )
assertEquals ( "0: General use CPU\\n" + "1: CPU not available\\n" + "2: Thread[logger,5,main] alive=true\\n" + "3: Thread[engine,5,main] alive=false\\n" + "4: General use CPU\\n" + "5: CPU not available\\n" + "6: Thread[main,5,main] alive=true\\n" + "7: Thread[tcp,5,main] alive=false\\n" + "8: General use CPU\\n" + "0: General use CPU\\n" + "1: CPU not available\\n" + "2: Thread[logger,5,main] alive=true\\n" + "3: Thread[engine,5,main] alive=false\\n" + "4: General use CPU\\n" + "5: CPU not available\\n" + "6: Thread[tcp,5,main] alive=true\\n" , actual )
assertEquals ( 5 , searchEngineMarketShareArray . length )
assertions . contains ( value , index )
assertEquals ( expected , rendered )
assertThat ( scc , is ( toPartition ( expect ) ) )
assertEquals ( result . get ( RETURN_RESULT ) , String . format ( EXCEPTION_INVALID_REMOTE_USER , USERNAME ) )
assertThat ( quantity , equalTo ( existingItem . getQuantity ( ) ) )
assertEquals ( Optional . of ( "Z" ) , r )
assertEquals ( this . sg . getNetworkElementId ( ) , "UPDATED_SFC_ID" )
assertEquals ( 1000000 , tokens )
assertAOPFooStepsFound ( steps )
assertNotNull ( create )
assertNull ( "The query result is null" , ds . runQuery ( "select * from books" ) )
assertEquals ( 0 , result . size ( ) )
assertTrue ( of ( "AAAAA" ) . toString ( ) . equals ( "AAAAA" ) )
context . assertIsSatisfied ( )
assertTrue ( sorted . isEmpty ( ) )
assertEquals ( "" , result )
Assert . assertSame ( "Different event bus instances" , eventBus , eventBus2 )
assertEquals ( 201 , response . getStatus ( ) )
Assert . fail ( "exception expected" )
assertOut ( "<script><
Assert . assertEquals ( "-1/MyProject" , connectionString )
Assert . assertTrue ( TestUtils . attributeEquals ( expectedResults , exactResults , attributeNames ) )
assertEquals ( 1234.56 , empty . getRPM ( ) , 0.1 )
assertEquals ( expected , json )
Assert . assertEquals ( cnpj , dados . getCnpj ( ) )
Assert . assertTrue ( "Log content should match" , "1. UserOriginated: true" . equals ( getLogRow ( 0 ) ) )
Assert . assertThat ( result . getBean ( WithTypeParam . class ) . getProperties ( ) . get ( 0 ) . tsType , CoreMatchers . instanceOf ( TsType . UnionType . class ) )
assertTrue ( new Matcher ( ) . match ( actual , expected ) )
Assert . assertEquals ( 4 , tools . size ( ) )
assertEquals ( expectedTypes , targetTypeDAO . getTypes ( TENANT_ID , true ) )
Assert . assertNull ( noBean )
Assert . assertEquals ( "Bean property placeholder ${str1} not dereferenced" , expected , testComponent . getPlaceholderString1 ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaDataTableTypeDefinition ( method , lookup , new String [ 0 ] ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "baz" , provider . getRelativePath ( projectBasedir , repoRoot ) )
XMLAssert . assertXMLEqual ( new InputStreamReader ( getClass ( ) . getResourceAsStream ( "v13/csv-config-03.xml" ) ) , new StringReader ( modelWriter . toString ( ) ) )
assertEquals ( "The ttl should be 50" , 50 , iSpec . getTTL ( ) )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertThat ( match , is ( BestTypeMatch . T1 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertThat ( dest . bbb , is ( "111" ) )
assertThat ( manager . getRandomStrategy ( ) , is ( mockedStrat1 ) )
assertEquals ( emptyTile , theGhost ( ) . getTile ( ) )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( Nd4j . create ( new double [ ] [ ] { { 1 , 2 } , { 3 , 4 } } ) , matrix . getRow ( 1 ) )
assertEquals ( "192.168.0.123/24" , ip )
Assert . assertEquals ( XMLStreamConstants . PROCESSING_INSTRUCTION , reader . nextEvent ( ) . getEventType ( ) )
assertPermanentCount ( playerA , "Reflecting Pool" , 1 )
assertEquals ( "result ok?" , 20 , ( int ) query . get ( 0 ) . get ( "TIMESTWO" ) . toInt ( ) )
assertArrayEquals ( expected , actual )
Assert . assertTrue ( bean . getMap ( ) != null && ! bean . getMap ( ) . isEmpty ( ) )
assertFalse ( iter . hasNext ( ) )
Assert . assertEquals ( slice . toString ( ) , 9 , SlicerUtil . countNormals ( slice ) )
Assert . assertEquals ( 4 , analyser . getLoadAtBeginning ( route ) , 0.01 )
assertEquals ( expecteds , actuals )
assertEquals ( Version . valueOf ( "1.0.0-alpha" ) , builder . build ( ) )
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertValuesEqualsResultSet ( rs , expectedResults )
assertEquals ( "5" , stringWriter . toString ( ) )
assertContainsPlot ( 0 , 0 , PlotColor . RED , plots )
assertEquals ( "resultxx" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertResult ( 0 )
Assert . assertEquals ( "numDataNodes" , 1 , fs . getNumDataNodes ( ) )
Assert . fail ( "expected exception for bad query." )
assertUpdateRecord ( "*.c1.addresses.number" , objId , obj , updateObj , PATCH , expected )
assertTrue ( matcher . matches ( nodeCapability , testCapability ) )
assertEquals ( "module namespace m='uri'; declare function m:f() { 'OK' };" , qp . uriResolver ( ) . resolve ( path , uri , base ) . toString ( ) )
Assert . assertEquals ( "Get what?!?!" , responseResult . getText ( ) )
assertEquals ( "bar" , event . getField ( "foo" ) )
assertEquals ( expectedEventTypesInOrder , eventTypeArgumentCaptor . getValue ( ) )
assertEquals ( "1" , captured . getValue ( ) )
assertTrue ( "Should not infer a reset when the sequence number is too high" , responder . disconnectCalled )
assertEquals ( "Unexpected button selected" , "All" , dropdown . getText ( ) )
assertNotNull ( mapper )
assertOrder ( false , query ( ) . sortDescending ( "one" ) )
assertArrayEquals ( "The output has to be the same as the input" , input , utilsResult )
assertTrue ( helper . shouldBeStored ( new HTTPResponse ( Status . OK , headers ) ) )
assertThat ( operatorValues . createMap ( ) , hasEntry ( "internalDebugHttpPort" , stringValue ) )
assertTrue ( criteria . equals ( criteria2 ) )
Assert . assertEquals ( "foo.txt" , used . iterator ( ) . next ( ) )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( expected , actual )
assertEquals ( "hibernate" , bindings . get ( "_suffix" ) )
assertInvocations ( client . getBusinessActivityInvocations ( ) , "complete" , "confirmCompleted" , "close" )
assertEquals ( "<chart><background-color><radial-gradient x1=\\"0\\" y1=\\"0\\" x2=\\"1\\" y2=\\"1\\"></radial-gradient>" + "<stops position=\\"0\\" color=\\"white\\"></stops>" + "<stops position=\\"1\\" color=\\"black\\"></stops>" + "</chart>" , removeWhitespacesBetweenTags ( parent . child ( 0 ) . toString ( ) ) )
assertEquals ( 42 , config . answerToLifeUniverseAndEverything ( ) )
assertEquals ( components . size ( ) , 1 )
Assert . assertEquals ( unidadeFederativa , servicoConsulta . getUf ( ) )
assertEquals ( 100 , v )
assertEquals ( 1 , value , 0 )
assertEquals ( LIST_VAL_a , p . getList ( ) )
assertNotNull ( license )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertEquals ( false , out . firstElement ( ) . get ( ) )
Assert . assertEquals ( "--- a/" + projectSourcePath + "/Bar.java\\n" + "+++ b/" + projectSourcePath + "/Bar.java\\n" + "@@ -11,4 +11,8 @@\\n" + " \\n" + "-\\t\\t} else if (true) {\\n" + "+\\t\\t} else {\\n" + "+\\t\\t\\tif (false) {\\n" + "+\\t\\t\\t\\t\\n" + "+\\t\\t\\t}\\n" + "+\\t\\t\\t}\\n" , test . getPatch ( ) )
assertEquals ( 404 , action . getCode ( ) )
Assert . assertEquals ( 1 , acq . getSemaphores ( ) . length )
assertTrue ( Iterables . all ( evenNumbers , acceptOddNumber ) )
testRunner . assertAllFlowFilesTransferred ( PutCassandraQL . REL_SUCCESS , 1 )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * @type {Object}\\n */\\norg.apache.royale.A.prototype.foo1;\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo1', \\n\\t{get:function() {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo2', \\n\\t{set:function(value) {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo2', \\n\\t{set:function(value) {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo2', \\n\\t{get:function() {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo3', \\n\\t{get:function() {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo3', \\n\\t{get:function() {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo4', \\n\\t{get:function() {\\n\\t}, configurable:true}\\n);\\n\\nObject.defineProperty(\\n\\torg.apache.royale.A.prototype, \\n\\t'foo5', \\n\\t{get:function() {\\n\\t}, configurable:true}\\n);\\
assertSame ( expected , actual )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( model . weekOfYear ( ) . minimized ( ) ) , is ( PlainDate . of ( 2000 , 12 , 2 ) ) )
assertCollectionCanNotBeSerialised ( collection , TreSource . ExtendedHeaderData )
Assert . assertEquals ( 0 , analyser . getLoadRightAfterActivity ( route . getEnd ( ) , route ) . get ( 0 ) )
assertEqualHQL ( "allen AND love dandan" , sb . toString ( ) )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertNotNull ( extractElementDataModifier . getElementId ( ) )
assertNotNull ( xml )
assertEquals ( expected , got )
assertTrue ( exists ( orig ) && isReadable ( orig ) )
Assert . assertNotNull ( connection )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertEquals ( VALUE , victim . getValue ( KEY ) )
assertEquals ( "javax.portlet.JAR" , s )
Assert . assertEqualsWithoutWhiteSpaces ( "translate([0,0,0]) (model)" , testSubject . toScad ( ) )
assertEquals ( required , iterateBFS )
assertEquals ( 42 , x )
assertTrue ( "Focused element is still open" , focused . getText ( ) . equals ( "Open" ) )
assertTrue ( results . toString ( ) , results . indexOf ( "Responses invalid: 0 out of " + ( cycles * tracks ) ) >= 0 )
assertEquals ( "CLOSED" , Deencapsulation . getField ( deviceIO , "state" ) . toString ( ) )
Assert . assertEquals ( Utils . createParameterizedType ( List . class , Number . class ) , type )
assertTokensEqual ( of ( integer ( 10 ) , integer ( 5 ) , integer ( 2 ) ) , tokens )
assertEquals ( html , sanitized )
assertNoViolations ( constraintViolations )
assertEquals ( TimeUtil . parseTime ( time ) , "2014-11-11 10:11:11" )
assertEquals ( averageDegree , 1.5 )
assertThat ( client , notNullValue ( ) )
Assert . assertEquals ( set . iterator ( ) . next ( ) , "b" )
Assert . assertThat ( uri , CoreMatchers . equalTo ( URI . create ( "example.com/mypath" ) ) )
Assert . assertNull ( actual )
assertThat ( ret . contains ( "prepareTable4MyProcedure" ) , is ( true ) )
assertEquals ( "<div id=\\"1\\"></div><script src=\\"/foo\\"></script><div id=\\"2\\"><img /><img /></div><a id=\\"3\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "min fina text" , doc . getContentField ( "text" ) )
assertEquals ( expected , actual )
assertParams ( captured . getValue ( ) , A_PARAM_NAMES , false , true )
assertEquals ( expected , actual . materializeToMap ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( Collections . singletonMap ( "x.A" , Collections . singletonList ( "y.C{x=foo\\\\\\"\\n}" ) ) , TestUtils . findMetadata ( clz ) )
assertTrue ( PropUtil . getBooleanProperty ( props , "test" , true ) )
Assert . assertEquals ( "2004-02-29" , dateTime . toString ( ) )
assertTrue ( "Better cost solution (1.9 < 2.0) should not be accepted since the better cost is still below the threshold" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 1.9 ) ) )
assertEquals ( new Long ( 2 ) , response )
assertEquals ( "mes   |Thr    " , result )
Assert . assertEquals ( Short . valueOf ( ( short ) 11 ) , res )
assertThat ( params . isMonochrome ( ) , equalTo ( false ) )
assertThat ( operations . find ( query ( byExample ( example ) ) , Person . class ) , hasItems ( flynn , walter ) )
assertNullOrEquals ( "scope" , "Description of a purpose" , crs . getScope ( ) )
assertTrue ( "Linker function not found" , page . getLinkerFunction ( ) instanceof ProjectLinkerFunction )
assertThat ( runtimeClassName , equalTo ( "org.talend.components.marklogic.runtime.outgoing.MarkLogicOutgoingTopology" ) )
assertThat ( target . getDoG ( ) , JUnitMatchers . hasItems ( TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 1 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 2 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 3 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 4 } } ) , 1E-4f ) ) )
assertTrue ( book . getIsbn ( ) . startsWith ( "13" ) )
assertTrue ( c . contains ( x ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertNotNull ( dataBinding )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "GitHub Text" , ghlogout . getGitHubText ( ) )
assertEquals ( CacheConsts . UNDEFINED_STRING , cachedAnnoConfig . getCondition ( ) )
arrays . assertContainsSequence ( someInfo ( ) , actual , emptyArray ( ) )
Assert . assertEquals ( "12345.6789" , getCell ( 0 , 10 ) . getPureText ( ) )
assertTrue ( nameIdData . isEmpty ( ) )
assertDegenerate ( scan )
Assert . assertEquals ( expect_sql , sql )
Assert . assertEquals ( "" , readS )
assertThat ( d . doCheckScript ( "import groovy.transform.*\\n" + "import jenkins.model.FreeStyleProject\\n" + "import jenkins.model.Jenkins\\n" + "import hudson.model.FreeStyleProject\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.model.Test\\n" + "import jenkins.
assertEquals ( "No exception thrown!" , true , result )
assertEquals ( "/aaa" , request . getPath ( ) )
assertEquals ( "Wrong number of violations." , 1 , violations . size ( ) )
assertEquals ( "Field-Name: value1\\n value2\\n\\nvalue3\\n" , field . format ( "value1\\nvalue2\\n\\nvalue3" ) )
assertEquals ( expectedText . replace ( "\\n" , "" ) . replace ( "\\r" , "" ) , writer . toString ( ) . replace ( "\\n" , "" ) . replace ( "\\r" , "" ) )
Assert . assertEquals ( "3 ��芯谢���� �芯屑�" , t . format ( durations ) )
assertEquals ( "abc" , output . toString ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "me" , html . getPageContext ( ) . getString ( "who" ) )
assertEquals ( 5 , instance . evaluations )
assertEquals ( arr , resultArr )
assertEquals ( dataflow , edit . getSubject ( ) )
assertEquals ( expectedQuery , actualQuery )
assertSpanChunk ( spanChunkBo )
assertImage ( srcImg , destImg , e )
assertThat ( subject . supports ( update ) , is ( false ) )
assertEquals ( expected , actual )
assertSame ( node , transform ( node ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn.opendaylight" + ".openflow.protocol.rev130731.BarrierInput msgType: 4 msgType2: 8" , key1 . toString ( ) )
assertThat ( TestLoggerFactory . getLoggingEvents ( ) , is ( empty ( ) ) )
assertEquals ( "did not get expected number of queries " , 3 , queries . size ( ) )
assertEquals ( testClass , actualResult . getClass ( ) )
assertEquals ( expected , cluster )
assertEquals ( expected , actual )
assertNull ( result )
assertSorted ( )
assertNotNull ( pageEntity . getContent ( ) )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
assertEquals ( "INFO: some msg" , process . getLoggingCounter ( ) )
assertArrayEquals ( newGbids , ( String [ ] ) newGbids [ 0 ] )
Assert . assertEquals ( 7 , ( ( VersionMessageWrapper ) list . get ( 0 ) ) . getMessageBuffer ( ) . readableBytes ( ) )
assertSame ( response1 , http )
assertEquals ( expectedMap , map )
assertThat ( dao . getLong ( id ) , equalTo ( user . getId ( ) ) )
assertions . doesNotContain ( value , index )
assertTrue ( vRoute . getStart ( ) . getLocation ( ) . getId ( ) . equals ( "start" ) )
assertThat ( output , containsString ( "FHIR store deleted:" ) )
assertNotNull ( s )
assertSame ( expected , actual )
assertEquals ( "Expect that the SOAPRequest is not a SoapDocument" , "true" , xacmlStatement . getExpression ( ) )
assertTrue ( solrCounter > 0 )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( name , ship . getName ( ) )
assertFalse ( types . isEmpty ( ) )
Assert . assertEquals ( 1 , mainTag . size ( ) )
Assert . assertTrue ( newthirdSetMember . getSortWeight ( ) < thirdConceptSet . getSortWeight ( ) )
assertTrue ( localFileSys . mkdirs ( dir ) )
assertTrue ( createdTopic . getTopic ( ) . getSubscribers ( ) . contains ( user ) )
assertEquals ( payload , jsonMessage )
assertEquals ( Lists . newArrayList ( "-o" , projectPath . append ( outputPath ) . append ( "org" ) . append ( "package" ) . toOSString ( ) , "-listener" , "-no-visitor" , "-encoding" , "UTF-8" ) , options . command ( file ) )
Assert . assertTrue ( "canonicalizing the test file " + filename + " gives a different result than canonicalizing the xtm export of " + filename + "." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( Arrays . asList ( "a" , "b" , "c" , "d" , "e" ) , lists )
assertTrue ( new File ( folder . getRoot ( ) , "test/QDateTest.java" ) . exists ( ) )
assertEquals ( "{\\"b\\":2}" , dbr . query ( "SELECT * FROM CC_TEST WHERE ID = 2" ) . at ( 0 ) . get ( "js" , Json . class ) . json )
assertFalse ( testMojo . shouldSkip ( ) )
assertFalse ( new DefaultSecurityContext ( p , s ) . isUserInRole ( "friend" ) )
assertRuleFired ( Severity .IGH , "temperature" )
assertTrue ( "Increasing the incrementment didn't cause an exception" , increment )
Assert . assertEquals ( 1 , fxForm . getElements ( ) . size ( ) )
assertEquals ( 400 , response . getStatus ( ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
Assert . assertEquals ( expected , actual )
assertThat ( productResultUrls . size ( ) , equalTo ( 0 ) )
assertEquals ( "Wrong list property" , list , conf2 . getProperty ( prop ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( x , v )
assertFalse ( db . collectionExists ( methodName ) )
assertSame ( Writables . records ( TestWritable . class ) , wt )
this . assertGet ( "artifacttemplates/http%253A%252F%252Fopentosca.org%252Fartifacttemplates/MyTinyTest/files" , "entitytemplates/artifacttemplates/MyTinyTest_src.zip" )
assertEquals ( "20110103201412297033000000" , d . getId ( ) )
assertEquals ( list ( "2" , "3" ) , redis . brpop ( key , 0 , 2 ) )
assertFalse ( "Unexpected message is present." , page . isAnyMessagePresent ( ) )
assertEquals ( 1 , map . size ( ) )
assertNotNull ( strategy )
assertLife ( playerA , 18 )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testEvent.json" ) ) )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigCaller ( ) ) . isDebugEnabled ( ) )
assertEqual ( "1" , query . execute ( ) )
assertEquals ( "GBP -0.94" , test . toString ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , not ( hasEnvVar ( "item1" , "find uid1 at /u01/oracle/user_projects/domains" ) ) )
assertEquals ( expected , resultOut )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 0 , buf . readableBytes ( ) )
assertEquals ( "�峰�����版�绋�瀹�涔�澶辫触" , 2 , result )
assertThat ( testPath , is ( expectedPath ) )
Assert . fail ( "an exception should have been thrown" )
assertEquals ( "The user name was incorrect" , "RNO" , changeset . getUserName ( ) )
assertEquals ( modifiedAction , action )
assertThat ( info . getClusterService ( CLUSTER ) , sameInstance ( newService ) )
assertEquals ( service . getPresentableDistance ( distances ) , "approaching" )
assertThat ( collect , not ( hasItem ( IS_CLEAN_HANDLER . getKey ( ) ) ) )
assertEquals ( "GBP -2.34" , test . toString ( ) )
assertTrue ( originalMap . isEmpty ( ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
assertArrayEquals ( data , Files . readAllBytes ( file ) )
assertEqualsJson ( expected , json )
Assert . assertTrue ( contentAsString . contains ( "archive.zip" ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertOutput ( hbs . benchmark ( ) )
Assert . assertEquals ( single . get ( ) , a )
assertEquals ( properties , fr . getRightsProperties ( ) )
Assert . assertTrue ( testApiVerticleFile . exists ( ) )
assertThat ( hBaseConfiguration . getConfiguration ( ) , is ( configuration ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertTrue ( session . has ( SESSION_TOKEN_LABEL ) )
assertThat ( duration . with ( ClockUnit . MILLISECONDS . plus ( 1 , SECONDS ) ) , is ( Duration . ofClockUnits ( 1 , SECONDS ) ) )
assertTrue ( stringStringMap . isEmpty ( ) )
Assert . assertEquals ( AccessMode . INHERITED , sr . getSerializableAccess ( ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'object',properties:{f1:{type:'string'}}},'x-example':[{f1:'foobar'}]}" , s . getSchema ( BeanList [ ] [ ] . class ) )
assertEquals ( "<p>key test</p>\\n" , rendered )
assertEquals ( expected3 , actual3 )
assertEquals ( "0001" , result [ 0 ] )
assertEquals ( branchHead , BranchUtils . getHeadCommit ( TEST_BRANCH , repo ) )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "res" , null , "[1, 2, 3]" , ctx ) . pass )
assertSseResponse ( sseResponse , "event:eventName" , "data:payload" )
assertTrue ( ex . isPrime ( 31 ) )
Assert . assertTrue ( "API broken here" , Arrays . asList ( files ) . contains ( "META-INF/maven/src/main/resources/poms/test-remote-overload.xml" ) )
assertEquals ( "collection1" , coll . getName ( ) )
assertEquals ( 500 , urlConn . getResponseCode ( ) )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expectedBill , bill . doubleValue ( ) , 0.01 )
assertOut ( "this.b = 10 + 'px" )
assertValues ( presentFieldList , actual )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pay/>" , elem . toXml ( ) )
authRule . assertScenario ( scenario )
assertEquals ( expected , result )
assertTrue ( "bar" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) && 1 == c . getVersion ( ) && "path" . equals ( c . getPath ( ) ) && "domain" . equals ( c . getDomain ( ) ) && "comment" . equals ( c . getComment ( ) ) && 10 == c . getMaxAge ( ) )
assertParser ( twig )
assertEquals ( expectedVersionString , versionData1 . toString ( ) )
assertThat ( time , equalTo ( now ) )
assertEquals ( expected , actual )
assertEquals ( expecting , found )
assertTrue ( resultComparator . compare ( cucc1 , cucc2 ) > 0 )
assertEquals ( "The value is not correct." , date , value )
assertTrue ( Arrays . stream ( itia . getValues ( ) ) . allMatch ( v -> key == v / 2 ) )
assertEquals ( "ESCAPE" , getTitleText ( "ESCAPE" ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( Hours . of ( - 15 ) , test5 . multipliedBy ( - 3 ) )
assertFalse ( validator . validate ( EntityNames . GRADE , grades ) . equals ( grades ) )
assertEquals ( "foo:bar" , uri . getLabel ( ) )
assertEquals ( "Hello World!" , result )
assertEquals ( "Location:1.0.0" , modelId . toString ( ) )
assertNotNull ( importer )
Assert . assertEquals ( IntNode . valueOf ( 1 ) , result )
assertFalse ( "No selection aftermouse-out" , isElementPresent ( By . className ( "v-app" ) ) )
Assert . fail ( )
assertNotNull ( queryFactory3 . delete ( QAnimal . animal ) )
assertEquals ( expecting , t . toStringTree ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( new BigDecimal ( 123 ) , arrayFirst )
assertNotNull ( wflows )
assertTrue ( serializer . register ( serializerA , true ) )
assertEquals ( "invoice.toJson('fetchPlan:customer:1')" , p . toString ( ) )
assertThat ( issues , is ( empty ( ) ) )
Assert . assertTrue ( "Not authenticated" , authenticated )
assertEquals ( OK , response . getStatus ( ) )
assertEquals ( 0 , scores . getScore ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , expectedQuery ) )
assertTrue ( sim )
assertEquals ( DOUBLE , v8Object . getType ( "key" ) )
assertEquals ( CSV , CSV_FIELD_SEPARATOR + "[Processing, total processed, line count, and line to process, status, and line to process]" )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( calendar . getTime ( ) , aiResponse . getTimestamp ( ) )
assertThat ( options . getProperty ( OPTIONS_PROPERTY_NAME ) , is ( "--no-strict" ) )
org . junit . Assert . assertEquals ( expected , actual )
assertPowerToughness ( playerA , "Silvercoat Lion" , 2 , 2 )
assertPaths ( paths , "a,b,c,d,b,c,e" , "a,b,c,d,b,c,e" , "a,b,c,d,b,c,e" , "a,b,c,d,b,c,e" , "a,b,c,d,b,c,e" )
assertEquals ( 2 , urls . size ( ) )
Assert . assertEquals ( "queueInfo translation didn't work." , returned . getState ( ) . toString ( ) , StringUtils . toLowerCase ( queueInfo . getQueueState ( ) . toString ( ) ) )
assertNotNull ( simpleComponent )
assertEquals ( "fn(x)" , fieldsCaptor . getValue ( ) . getName ( ) )
assertEquals ( 1 , acc . get ( ) )
assertEquals ( "1234567" , sb . toString ( ) )
assertArrayEquals ( result , CompactEncoder . binToNibbles ( test ) )
assertNotNull ( processInstance . getId ( ) )
assertNull ( "Expected null privacy policy, but it is not." , privacyPolicy )
assertEquals ( filename , instance . getFilename ( ) )
assertEquals ( USER_EMAIL_ADMIN , securityContext . getUser ( ) )
assertEquals ( "SELECT * FROM Class" , q . toString ( ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertNotEquals ( frameData1 , frameData2 )
assertEquals ( "COMPLETED" , getContext ( ) . getFileToProcess ( ) . getAuctionData ( ) . get ( 0 ) . getName ( ) )
assertEquals ( "a/b" , resolved . getURI ( ) . toASCIIString ( ) )
assertTrue ( hand . getClassifier ( ) == HandClassifier . TWO_PAIR )
assertEquals ( expected , mapper . writeValueAsString ( model ) )
assertThat ( description . toString ( ) , is ( "a JSON array node with value that is ANYTHING" ) )
assertEquals ( 204 , resp . getStatus ( ) )
assertEquals ( expected , actual )
assertTrue ( Pattern . matches ( "(?s).*/validator01.jsp PASSED.*" , page . asXml ( ) ) )
assertThat ( prepare , CoreMatchers . instanceOf ( ProfiledPreparedStatement . class ) )
assertNotNull ( result )
assertTrue ( point . equals ( point ) )
assertEquals ( expResult , result )
assertSame ( toTest , toTest . setType ( ParamType . getDefault ( ) ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "com.example.ImpliedObjectProperty" ) )
assertThat ( inputStream , notNullValue ( ) )
Assert . assertTrue ( signatureValid )
AssertJUnit . assertFalse ( "filter matches object, but it should not" , match )
assertEquals ( header , fixture . getHeader ( ) )
assertEquals ( expect , pred )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( 0.0d , mock . doubleReturningMethod ( 12 ) , 0.0d )
assertEquals ( "alt2\\n" , found )
assertThat ( result , is ( expct ) )
assertThat ( builder . toString ( ) , is ( GITBUCKET_URL + "add" ) )
assertEquals ( EmailRecipientUtils . BC , analyser . getType ( new InternetAddress ( "mickey@disney.com" ) ) )
assertDurationEquals ( dv3 , dv1 . minus ( dv2 ) )
assertTrue ( milli1 . equals ( milli2 ) )
assertThat ( impl . getOntologyAnnotations ( ontologyId ) . count ( ) , is ( 0L ) )
assertMapping ( node , 0 , 15 , 0 , 16 )
Assert . fail ( "Test should not go here - invalid deployment (invalid value of resteasy.scan.app.name)!" )
assertNull ( result )
assertEquals ( 0.5d , config . half ( ) , 0.01d )
assertNotNull ( instance )
assertNotNull ( wsdl1 )
assertFalse ( lock2 . tryLock ( ) )
Assert . assertFalse ( sampling )
assertEquals ( globals . size ( ) , tree . getModelObject ( ) . getChildCount ( tree . getModelObject ( ) . getRoot ( ) ) )
assertEquals ( "Unexpected state class" , FormLayoutState . class , state . getClass ( ) )
assertEquals ( buf . toString ( ) , result )
observer . assertObservations ( "21" , PhaseId . APPLY_REQUEST_VALUES , PhaseId . INVOKE_APPLICATION , PhaseId . PROCESS_VALIDATIONS , PhaseId . RENDER_RESPONSE , PhaseId . RESTORE_VIEW , PhaseId . UPDATE_MODEL_VALUES , PhaseId . APPLY_REQUEST_VALUES , PhaseId . RENDER_RESPONSE , PhaseId . RESTORE_VIEW , PhaseId . UPDATE_MODEL_VALUES )
assertEquals ( 3 , groups . size ( ) )
assertNotNull ( actAa )
Assert . assertEquals ( pn . getFullName ( ) , "Sr. Taylor Bob Wilson Mark" )
assertEquals ( "3 ��� 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertThat ( results , is ( Collections . emptyList ( ) ) )
assertSame ( config , result )
assertEquals ( "Double-It not doubling positive numbers" , 20 , resp )
assertThat ( uri , is ( new URI ( "ardulink://serial-jssc?port=COM3&name=valueWithSpaces&space=valueWithSpaces&space=valueWithSpaces" ) ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
Assert . assertTrue ( lastElementIsSame ( store , new WeightedObservedPoint ( w , x , y ) ) )
assertEquals ( "root.user1group.user1" , user1Leaf . getName ( ) )
assertTrue ( gw . lines . isEmpty ( ) )
assertEquals ( "timers" , 0 , timerMap . size ( ) )
assertEquals ( "100" , proxy )
assertEquals ( "Hello" , model . getMessage ( ) . getFullyQualifiedName ( ) )
assertEquals ( true , parsedTypes . get ( 0 ) instanceof RedditSubreddit )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertTrue ( Arrays . equals ( expected , value ) )
assertEquals ( "catch" , result )
assertEquals ( response . getPoints ( ) . size ( ) , 4 )
assertEquals ( Year . isLeap ( year ) ? 366 : 365 , test . lengthOfYear ( ) )
Assert . assertTrue ( Precision . equals ( 7.0 , MathArrays . distance1 ( p1 , p2 ) , 1 ) )
assertEquals ( "Wrong content of linked volume" , Versions . instance ( ) . getVersification ( "KJV" ) , xml )
assertEquals ( expectedApiVersion , Deencapsulation . getField ( httpHsmSignatureProvider , "apiVersion" ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertTrue ( mse . getTotalError ( ) < maxError )
assertEquals ( "{\\"key\\":\\"value\\"}" , writer . toString ( ) )
assertEquals ( "/%C4%8D" , encoded . toURL ( ) )
assertNull ( auth . authenticate ( USERNAME , PASSWORD , mockServerSession ) )
assertEquals ( expected , output )
assertEquals ( "Expected 4 results!" , 4 , n )
Assert . assertTrue ( protectedPage . getTitleText ( ) . contains ( "Landing Page" ) )
assertEquals ( "test" , test . getFunctionName ( ) )
assertEquals ( date , scheduling . getStartupTime ( ) )
assertAnnotations ( 2 , Coordinate . class , new TestCoordinate ( 0 , "51.507, -0.125" , "dd" , TYPE_POINT_COORDINATES_0_125_51_507 ) , new TestCoordinate ( 1 , "-3.188,55.953" , "dd" , TYPE_POINT_COORDINATES_55_953_55_953 ) )
assertEquals ( "<html><head><noscript></noscript></head><body><img src=\\"foo\\" /><p>Hello</p></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( result , expecting )
assertMissing ( "list" , 1L )
assertEquals ( "foo" , s )
assertEquals ( 1 , patient . getCustomId ( ) . getUndeclaredExtensions ( ) . size ( ) )
assertEquals ( "normalize() {\\n" + "  \\"text\\" : \\"" + normalizer . normalize ( html ) + "\\"\\n" + "}" , normalizer . normalize ( html ) )
assertThat ( chain , is ( sameInstance ( builder ) ) )
assertEquals ( "ID3v2ChapterTOCFrameData [id=null, startTime=0, endTime=0, startOffset=0, endOffset=0, subframes=[]]" , frameData . toString ( ) )
assertEquals ( "test" , ( ( Br ) obj ) . getId ( ) )
assertNotNull ( cfid2 )
assertEquals ( e1 , e2 )
assertEquals ( "(abc 34)\\n" , found )
assertTrue ( runtime instanceof MockIndirectBaseClass )
assertThat ( byValue . getSingleResult ( ) . getF ( ) , equalTo ( f1 ) )
testRunner . assertAllFlowFilesTransferred ( PutORC . REL_FAILURE , 1 )
assertThat ( this . capistranoCommandBuilder . build ( ) , hasItem ( "--verbose" ) )
assertEquals ( Integer . valueOf ( 7 ) , res . < Integer > get ( "verbose" ) )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( link , Files . readAllBytes ( link ) )
assertTrue ( desc . size ( ) == g . getV ( ) . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedResult , result )
assertThat ( result , is ( jsonString ( "Alice" ) ) )
assertEquals ( "3 vuosituhannen p盲盲st盲" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
runner . assertNotValid ( credentialsService )
assertEquals ( "Test if value red from file equals value stored" , mlDouble , mlArrayRetrieved )
assertEquals ( "Testing Course" , courses . get ( 0 ) . getName ( ) )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( transform instanceof Modifier . Defaultr )
assertTrue ( "Value should have been removed by rollback" , ! ex1 . getValue ( ) . isDefined ( ) )
assertEquals ( "File transfer request" , shadowDialog . getTitle ( ) )
assertEquals ( "SELECT a,b,c FROM test" , select . toString ( ) )
assertEquals ( instance , AbstractEntity . load ( MyEntity . class , 3L ) )
assertEquals ( "" , result )
assertNull ( task )
assertEquals ( getLabel ( ) , 0.0 , eye . minus ( m3 ) . getEuklideanValue ( ) , TOLERANCE )
assertTrue ( results . containsAll ( Arrays . asList ( male , undergraduate , graduate , associate ) ) )
assertEquals ( 0.5 , result . getUniquenessRatio ( ) , 0.0 )
assertSame ( value , bound . value ( ) )
Assert . assertEquals ( 1.0 , DoubleArrays . sum ( props ) , 1e-13 )
Assert . assertNull ( caixa )
assertEquals ( "1.2\\t2.3\\t3.4\\n" + "4.5\\t5.6\\t6.7\\n" , out . toString ( ) )
assertEquals ( result , "no" )
assertEquals ( "The message is not correct." , "This is my message 01." , this . tag . getMessage ( ) )
assertTrue ( ping )
assertEquals ( inc . get ( ) . get ( ) , outRA . get ( ) . get ( ) )
assertArrayEquals ( data , getInputStream ( ) . readPackedFloats ( data . length / 3 , 3 , false ) )
assertEquals ( new Double ( 123 ) , arrayFirst )
assertEquals ( "Skip Strategy" , nodeName )
runner . assertAllFlowFilesTransferred ( SelectHiveQL . REL_FAILURE , 1 )
Assert . assertEquals ( "Basic " + FlexBase64 . encodeString ( "user1:password1" . getBytes ( ) , true ) , FlexBase64 . encodeString ( "user1:password1" . getBytes ( ) , true ) )
assertEquals ( 0.99009 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
Assert . assertEquals ( "3 爻丕毓鬲 丿�诏乇" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertEquals ( 1 , inserted . intValue ( ) )
assertTrue ( ( hasAttachmentType == false ) )
assertEquals ( doc . getContent ( ) , FileUtils . read ( new File ( "src/test/resources/doc/doc2.txt" ) , System . getProperty ( "file.encoding" ) ) )
assertSQLException ( ( ) -> metadata . getParameterClassName ( 2 ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertNotNull ( method . toString ( ) , m )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( "\\"X-TIKA:content\\"" , new String ( Files . readAllBytes ( Paths . get ( wildcard ) ) ) )
assertNotNull ( result )
assertEquals ( "getter value" , ObjectUtils . getValue ( object , "item" ) )
assertNotNull ( service )
assertRowMetaIsFilledWithFields ( )
assertThat ( isExpectedData , is ( true ) )
assertEquals ( name , newone . getNameAsString ( ) )
assertEquals ( 5 , d , 0 )
assertEquals ( "com.examples" , data . getTest ( ) . getClass ( ) . getCanonicalName ( ) )
assertEquals ( manager , instance . getManager ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Record/>" , elem . toXml ( ) )
assertFalse ( incorrect . isValid ( status ) )
assertEquals ( "1.2.3.4" , arguments . getLocalAddress ( ) )
assertEquals ( expected , javaSource . getEscapedSourceCode ( ) )
assertEquals ( radius , 0.0 )
assertEquals ( resultsFound , getResults ( getStateFlowGraph ( ) , new HashSet < > ( ) ) )
assertTrue ( result instanceof Date )
assertEquals ( "this-is-null-value" , newText )
assertThat ( results , containsInAnyOrder ( ( Matcher ) hasEntry ( "code" , "127689" ) , hasEntry ( "name" , "equal" ) , hasEntry ( "v" , "full" ) ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertTrue ( e . toString ( ) . contains ( "Not found: Table measurement-lab:m_lab.2010_01" ) )
assertThat ( greetings , Matchers . < String > hasItems ( is ( "Hello, Peter" ) , is ( "Hello, Paul" ) , is ( "Hello, Mary" ) ) )
assertEquals ( "grouping_rules" , cygnusGroupingRules . getGroupingRules ( ) . get ( 0 ) . getFields ( ) . get ( "fields" ) . toString ( ) )
assertTrue ( "The RMS relative error is not correct" , ( r < 10 ) && ( r < 100 ) )
assertEquals ( testStr , new String ( result ) )
assertEquals ( Constants . ACCESS_TOKEN_ENDPOINT , result )
assertNotNull ( Deencapsulation . getField ( jobsResponseParser , "cloudToDeviceMethod" ) )
assertEquals ( false , start )
context . assertEquals ( 500 , res . statusCode ( ) )
assertEquals ( "java.lang.String" , type . getTypeName ( ) )
assertEquals ( "1234.5" , result )
Assert . assertEquals ( 0.0 , optimizer . getRootMeanSquaredError ( ) , 2E-4 )
mockery . assertIsSatisfied ( )
Assert . assertEquals ( "Hello World" , outStream . toString ( ) )
assertTrue ( landsatMetadata instanceof Landsat8Metadata )
assertEquals ( contentBytes , new String ( Hex . encodeHex ( contentBytes ) ) )
assertFalse ( GitFileUtils . isFile ( "/test_file.sh" , commit . getName ( ) , repo ) )
assertEquals ( 1 , appClient . getAllowed ( ) . size ( ) )
assertThat ( result , equalTo ( Charsets . UTF_8 ) )
assertEquals ( "<<font point-size=\\"10\\">text</font>>" , label )
assertEquals ( "Testing date is after " + baseDate , afterDate , test )
context . assertEquals ( "Squid" , handler . body ( ) )
assertEquals ( "value 1" , sel . getValue ( ) )
assertEquals ( "HELLO" . getBytes ( UTF_8 . name ( ) ) , buffer . toString ( ) )
assertEquals ( filterView , filterEditor . view )
Assert . assertEquals ( new HashSet < > ( Arrays . asList ( serverSpan , serverSpan2 ) ) , new HashSet < > ( spanCache . getSourceInfo ( null , "trace" ) ) )
assertEquals ( "wrong text" , "STRING: String11" , se . toString ( ) )
assertEquals ( "123" , primaryPrin1 . getName ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
Assert . assertTrue ( p . f ( 4 ) < 4 )
assertEquals ( 0 , result )
assertNotNull ( dataBinding )
assertTrue ( b )
assertThat ( scope , equalTo ( new SciTokenScope ( READ , "/" ) ) )
assertValueEqualsResultSet ( rs , Arrays . < Object > asList ( ROW1 , ROW2 , ROW3 ) )
assertFalse ( replaced )
assertEquals ( "Clusterid should match with the given clusterid" , "wrong-cid" , storage . getClusterID ( ) )
assertTrue ( CertificateUtilExtended . isSelfSignedCertificate ( certPem ) )
assertEquals ( expectedTransportCosts + expectedActivityCosts , iCosts , 0.01 )
assertSame ( ThreadNameCachingStrategy . UNCACHED , tns )
assertTrue ( p . getStatusSimple ( ) . toString ( ) . equals ( "active" ) )
assertTrue ( "Reset window failed" , firsttime )
assertTrue ( ex . isPrime ( 31 ) )
assertThat ( result , is ( true ) )
assertEquals ( deleteTemplate1 , deleteTemplate1Duplicate )
assertEquals ( SubscriptionService . SubscriptionNotFoundException . class , s . getClass ( ) )
assertXMLSimilar ( "Invalid message" , expected , message )
assertEquals ( - 1 , compare )
assertThat ( "Wrong type of myTestFactory." , myTestFactory . getDelegate ( ) , CoreMatchers . instanceOf ( BootstrapConnectionFactory . class ) )
assertEquals ( "b" , ksession . getObject ( "a" ) )
assertEquals ( "Should return FAILURE" , "failure" , jsonObj . get ( "status" ) . getAsString ( ) )
assertEquals ( "0.002322" , buttonFunctionblockData . getStatusProperty ( "sensor_value" ) . get ( ) . getValue ( ) )
assertTrue ( "sin() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( "aTestString" , classUnderTest . getFieldLength ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 2 , warnings . size ( ) )
assertEquals ( lastValue , "EndNode10" )
assertThat ( pageable , is ( instanceOf ( NoSpringData . class ) ) )
assertEquals ( "type1" , type . getName ( ) . getLocalPart ( ) )
assertArrayEquals ( refar , d . getResult ( ) )
Assert . assertEquals ( 10 , lots . size ( ) )
assertEquals ( RequestResult . FAILURE , requestResult )
assertEquals ( 0 , Context . countActive ( ) )
assertThat ( formatterOutput , containsString ( "" + "  " + AnsiEscapes . GREEN + "Given " + AnsiEscapes . RESET + AnsiEscapes . GREEN + "first step" + AnsiEscapes . RESET ) )
assertEquals ( "val0" , args . getArguments ( ) . get ( 0 ) . getValue ( ) )
assertTrue ( connected )
login . assertIsConnectedAs ( "nouser" )
assertEquals ( p . format ( new Date ( 1 ) ) , "Jetzt" )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
Assert . assertEquals ( dialect . getURL ( conn ) , "jndi:hive2://null:null/null" )
assertThat ( getPodSpec ( jobSpec ) . getRuntimeClassName ( ) , nullValue ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertNull ( busca )
Assert . assertEquals ( "did not count two replicas" , 2 , resources . size ( ) )
Assert . assertEquals ( 5 , operation . operations . size )
assertThat ( ts , not ( nullValue ( ) ) )
assertEquals ( "Wrong number of columns" , 4 , columns . size ( ) )
Assert . assertTrue ( Arrays . equals ( data , xdata ) )
assertThat ( jsonViewAnnotation . value ( ) [ 0 ] . getSimpleName ( ) , equalTo ( "MyJsonViewClass" ) )
Assert . assertEquals ( IrodsRuleInvocationTypeEnum . IRODS , actual )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response6 . getResponseObject ( ) )
assertEquals ( mockedContractState , invoke ( testResponseData , "getContractState" ) )
assertLine ( "Itasty " , b , false )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( thrown )
assertEquals ( expected , actual )
assertEquals ( - 123456789012L , ConfigUtils . getLong ( config , 0 , "some-long" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( result , event )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertTemplateEvaluatesTo ( "doesnotexist" )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WStyledTextRenderer )
Assert . assertNotNull ( file )
Assert . assertEquals ( new DateTime ( "2014-03-01" ) , spec . extractTimestamp ( ImmutableMap . < String , Object > of ( "TIMEstamp" , "2014-03-01" ) ) )
assertEquals ( insertPerson , insertSamePerson )
assertEquals ( true , classUnderTest . getSQLShareHistory ( ) )
Assert . assertEquals ( "randomUser" , UserGroupInformation . getLoginUser ( ) . getUserName ( ) )
assertEquals ( correctStringSet . length , randomPurmutationSet . length )
assertFalse ( "1.2.0.0 <= 1.2.x" , ruleEvaluator . evaluateBooleanRule ( rule , values ) )
Assert . assertNotNull ( instance . getOverLaps ( ) )
assertTrue ( BufferedImageComparer . isSame ( originalImage , copyImage ) )
assertPowerToughness ( playerA , "Smuggler's Copter" , 1 , 1 )
assertFalse ( sameElts ( x1 , x2 ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getVolumes ( ) , allOf ( hasVolume ( "volume1" , "/domain-path1" ) , hasVolume ( "volume2" , "/domain-path2" ) ) )
Assert . fail ( )
assertEquals ( "Hello world" , result [ 0 ] )
Assert . assertEquals ( "moduleA" , foundModule )
assertEquals ( "Bitcoininv-2" , m . getAddress ( ) . getValue ( ) )
assertThat ( encryptor . checkPassword ( testPassword , null ) , is ( false ) )
assertEquals ( bfi , interceptor . getBindingFaultInfo ( message ) )
Assert . assertEquals ( "1;1;100;1;\\"John Doe\\"" , firstLine )
Assert . assertNotNull ( "The test subject was not returned." , result )
assertArrayEquals ( NOT_DECODED , data , object . getData ( ) )
assertNotNull ( this . userProfileManager . getProfile ( username ) )
Assert . assertEquals ( "Fail find by first name" , userExist . getFirstName ( ) , list . get ( 0 ) . getFirstName ( ) )
assertions . isNotLessThan ( null )
assertSame ( theVisibleProperty , theInstance . getClassInformation ( ) )
assertTrue ( "Found unexpected token: " + token , foundChars )
assertFalse ( etlKeyA . equals ( etlKeyB ) )
assertEquals ( arrayBuffer , v8ArrayBuffer )
assertThat ( generatedReportText , isSimilarTo ( expectedReport , "timestamp" ) )
assertEquals ( dependencies , expectedDependencies )
assertThat ( outputDirectory . getPath ( ) , is ( changeSeparatorIfRequired ( "site/custom-reports-directory" ) ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( id , "1" )
assertEquals ( response . getStatus ( ) , 204 )
assertThat ( thrown , instanceOf ( QueryExecutionException . class ) )
assertFalse ( skillConstraint . fulfilled ( insertionContext ) )
assertFalse ( processedResponse )
assertEquals ( expected , sql [ 0 ] . toSql ( ) )
assertThat ( newShare . getHours ( ) , equalTo ( 15 ) )
Assert . assertEquals ( tree . ret . skip , 42 )
assertTrue ( s . isSentToRawPubKey ( ) )
assertNotNull ( "Social Profile (JSON):\\n" , profile )
assertLazyFieldIsJavaUtilOptionalWithValue ( this . resourceTargetedByMapping )
assertNumberOfViolations ( constraintViolations , 1 )
assertEquals ( "Multiple simple parameters: %% and also %" , f . format ( ) )
assertEquals ( m1 , m2 )
assertEquals ( JulianDate . of ( 2012 , 2 , 29 ) , test )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( counter . getCount ( ) , 0 )
assertTrue ( "selected row should be present" , row . isSelected ( ) )
assertEquals ( "8=FIX.4.4|35=A|34=1|49=SC|52=20140101-10:10:10.100|56=TC|57=TS|98=0|108=30|141=Y|383=8192|10=080|" , getLogonFromSocket ( ) )
Assert . assertEquals ( "port should be set" , portError . getDescription ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( rescaled ) , equalTo ( new double [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ) )
assertSkipped ( myTasks , 2 , 3 )
assertEquals ( 1 , candidates . size ( ) )
assertEquals ( "</6>" , strLinks )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( adminProperties . getRefresh ( ) , commandArgumentCaptor . getValue ( ) )
Assert . assertEquals ( Integer . valueOf ( 1 ) , result )
Assert . assertEquals ( 1 , loggerCount . getWarningCount ( ) )
assertEquals ( 0 , conflicts . size ( ) )
assertFalse ( out1 instanceof Serializable )
assertNull ( content )
assertTarget ( "[['a', 'b'], ['  ', 'c']]" )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertNotEquals ( searchScroll1 , searchScroll2 )
assertThat ( students . size ( ) , is ( 1 ) )
assertEquals ( "123" , dto . getNewPassword ( ) )
assertNotNull ( result . getXdmValue ( ) . itemAt ( 0 ) )
assertContentSame ( rs , rc , columnParam1 )
Assert . assertFalse ( isAdmin )
Verify . assertSize ( dogLovers . getAllDogLovers ( ) . size ( ) , dogLovers . getAllDogLovers ( ) . size ( ) )
assertTrue ( "No TikaConfigException" , ex )
assertNotNull ( result )
assertEquals ( 60 , max )
assertThat ( result , is ( outbound ) )
assertEquals ( "Invalid type" , Schema . Type . NULL , schema . getType ( ) )
Assert . assertTrue ( returnedLevels . isEmpty ( ) )
Assert . assertArrayEquals ( bytes , hashed )
Assert . assertEquals ( 1 , violations . size ( ) )
assertEquals ( 1d , res . getErrorMessage ( ) )
ImgLib2Assert . assertIntervalEquals ( expected , result )
assertFalse ( object . isReleased ( ) )
Assert . assertEquals ( "test" , tagManager . getTag ( e ) )
assertEquals ( content , getContentFromUrl ( content ) )
assertEquals ( 100 , results . size ( ) )
assertEquals ( nn1 . getLabel ( ) , "TestNetLabel" )
context . assertIsSatisfied ( )
Assert . assertFalse ( secure )
assertTrue ( CompilationUtil . memberMatchesMethodID ( member , "831" , parseDictionary ) )
assertContactPoints ( "hello" , "contact" )
assertThat ( report , is ( not ( nullValue ( ) ) ) )
assertThat ( Functions . bondBasedDBStereo ( g ) . toSmiles ( ) , is ( "F/N=N/F" ) )
assertNotNull ( member )
objects . assertIsIn ( info , "Luke" , values )
assertEquals ( "Jobs found" , 1 , cnx . getJobs ( ) . size ( ) )
assertFalse ( "listener should not be registered" , getGridElement ( ) . isElementPresent ( By . className ( "gwt-GridButton" ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( argumentCaptor . getValue ( ) . getLabels ( ) , expectedLabels )
assertArrayEquals ( expectedPq , qp , delta )
assertThat ( underTest . getDerivingMetrics ( DerivingMeter . class , filter ) , is ( result ) )
assertThat ( partitionKeyValue . toJson ( ) , equalTo ( mapper . writeValueAsString ( Collections . singletonList ( data ) ) ) )
assertColumnWidth ( "max-width" , 30 , 0 )
assertSame ( proxiedObject . getClass ( ) , ClassHelper . getRealClassFromClass ( proxiedObject . getClass ( ) ) )
Assert . assertNotNull ( result )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertEquals ( config . getReceiveBufferSize ( ) , acceptedConfig . getReceiveBufferSize ( ) )
Assert . assertEquals ( "\\"<a/>\\"" , xs . toString ( ) )
assertEquals ( 30112 , person . get ( "id" ) )
assertNotNull ( action )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoICMSTotal ( ) . toString ( ) )
Assert . assertThat ( "ReponseList.size" , responseList . size ( ) , lessThan ( 2 ) )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
Assert . assertEquals ( false , fastqBuilder . sequenceAndQualityLengthsMatch ( ) )
Asserts . check ( headerKeySize > 0 , " Fail to extract http header" )
assertNull ( g . getSpatialReference ( ) )
assertTrue ( ferp . isReadable ( MultivaluedMap . class , null , null , null ) )
assertEquals ( "Only two sets of metrics should be visible." , 1 , httpOutput . getResults ( ) . size ( ) )
assertNoSpans ( )
assertEquals ( "Wrong number of accounts" , 2 , accounts . size ( ) )
assertEquals ( expResult , result )
assertEquals ( "(a = 1) and (b = 2) and (c = \\"C\\")" , e . toString ( ) )
assertEquals ( NOT_DECODED , SERIAL_NUMBER , object . getNumber ( ) )
assertTrue ( ExceptionTestUtility . sameMembers ( expectedRep , Collections . EMPTY_SET , unitAnalysis . mightThrow ( s ) ) )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( 0.6065 , value , EPSILON )
assertEquals ( "Request should have been cancelled" , 0 , node . getCancelledRequestIds ( ) . size ( ) )
assertEquals ( 99.0 , series . getY ( 1 ) )
assertEquals ( "hello" + lineSeparator , new String ( data ) )
assertEquals ( 2 , names . size ( ) )
assertFeatureValues ( expected , testQuery , testText , getChain ( new OrderedSequentialPairsFeatureExtractor ( 1 ) ) )
assertSame ( test , base )
assertThat ( result . toString ( ) , is ( "test.ripe.net" ) )
iterables . assertDoesNotContainSequence ( info , actual , sequence )
assertTrue ( called [ 0 ] )
Assert . assertEquals ( "Content-Type: multipart/form-data; boundary=\\"testFileByteArrayBodyPartPayloadMultipartPayload boundary\\"\\r\\n" + "\\r\\n" + "\\r\\n" + "--testFileByteArrayBodyPartPayloadMultipartPayload boundary--\\r\\n" , sb . toString ( ) )
assertEquals ( 1L , result )
assertThat ( result , is ( true ) )
assertThat ( result . getResultCode ( ) , is ( ResetPasswordResultCode . INVALID_EMAIL_ADDRESS ) )
assertThatXmlIsReadable ( writeIn )
this . assertVerification ( )
Assert . assertEquals ( "einganzlangeswort" , result )
assertEquals ( result , Boolean . TRUE )
assertEquals ( target1 , target2 )
assertThat ( selectRandomly . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol1 ) )
Assert . assertTrue ( actual . isEmpty ( ) )
assertEquals ( 1 , cnt )
assertTrue ( consumerPrefetch . running )
assertNotNull ( Transcription . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( true , isGood )
assertEquals ( "0001FEF" , HexDump . read ( "0001FEF" ) )
assertNotNull ( authRequest )
assertThat ( connection . getResponseCode ( ) , is ( HttpURLConnection . HTTP_OK ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
assertSame ( result , this . logger )
Assert . assertEquals ( expectedIds , actual )
assertFalse ( volume . equivalentFileSystems ( other ) )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , table . getPrimaryStyleName ( ) )
assertNull ( container . child . get ( ) )
assertEquals ( outputFile , sink . getSink ( ) )
assertThat ( g . toSmiles ( ) , is ( "CC=[C@@]=CC" ) )
Assert . assertEquals ( "did not get expected xml" , expected , collInp . getParsedTags ( ) )
assertEquals ( expectedMap , map )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR_500 , resp . getStatus ( ) )
assertEquals ( workflowBundle . getWorkflows ( ) . size ( ) , 2 )
assertEquals ( expectedValue , result )
assertEquals ( expected , uri )
Assert . assertTrue ( valid )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( statusCode , 200 )
assertThat ( result , is ( page ) )
assertEquals ( 1 , publications . size ( ) )
assertThat ( outputDirectory . getPath ( ) , is ( "thucydides-reports" ) )
assertEquals ( "12345678901234567890123456789012" , request . getAuthToken ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_UPDATE )
assertTrue ( "Oh no
Assert . assertEquals ( participant2 , currentLeader )
assertEquals ( STATIC , CorrectEquals . staticValue )
Assert . assertEquals ( "SELECT 'A' LIKE CONVERT(blob_col USING latin1)\\nFROM tbl_name;" , text )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( TenantPermissionValidator . ERROR_CODE_EMPTY_SELECTED_IDS ) )
assertThat ( responseHandler . getMessage ( ) , containsString ( QueryMessages . noResults ( ) . getMessage ( ) ) )
assertEquals ( key . getTenantIdField ( ) . toString ( ) , "test.id.key.field" )
assertEquals ( 4 , id . length )
Assert . assertTrue ( resultado )
assertThat ( mfp . getProperty ( ) , equalTo ( "production" ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( "[\\"a\\",\\"b\\",\\"c\\",\\"d\\"]" , jsonArray2 . toString ( ) )
assertEquals ( 13 , jobExecutor . getJobsAdded ( ) )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=omAll&minSupportCount=0" ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
JSONAssert . assertEquals ( "Message" , "{id:1234}" , actual , LENIENT )
assertEquals ( "select two test" , result . toString ( ) )
assertSame ( rootSchemaJson , actual )
assertThat ( interval , is ( ser ) )
assertEquals ( expected , json )
assertEquals ( expected [ key ] , v )
assertTrue ( service . exists ( "dl.bukkit.org" ) )
Assert . assertEquals ( 2 , counter . get ( ) )
assertEquals ( "Index = " + i , ModisDaacUtils . extractProductType ( toTest ) , type )
assertFalse ( obs . isDirty ( ) )
assertViewName ( mav , "editProfile" )
Assert . assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertNull ( result )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertEquals ( "ran��s么r" , data . readByteString ( ) )
assertThat ( definition . tableEntryByTypeTransformer ( ) . transform ( fromValue , String . class , cellTransformer ) , is ( "key=value" ) )
assertThat ( result , is ( false ) )
Assert . assertFalse ( policy . canRetry ( context ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertEquals ( expResult , result )
assertTrue ( lines . isEmpty ( ) )
Assert . assertEquals ( "Hello " , output )
Assert . assertNotNull ( a )
assertEqualToResource ( file , resultReport )
assertTrue ( "manifest should contain 'com.sun.jersey.test.META-INF/MANIFEST.MF'" , file . contains ( "com.sun.jersey.test.META-INF/MANIFEST.MF" ) )
assertNull ( result )
assertOut ( "/**\\n * @interface\\n */\\nIA = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('IA', IA);\\n/**\\n * @export\\n * @return {Object}\\n */\\nIA.prototype.foo1 = function() {\\n};\\n/**\\n * @export\\n * @return {Object}\\n */\\nIA.prototype.baz2 = function(value) {\\n};" )
assertThat ( result , equalTo ( 31 ) )
Assert . assertTrue ( success )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "the heroes collection" , heroesCollectionNode . getProperty ( "heroesCollection" ) )
Assert . fail ( "Should have failed due to missing root element" )
assertTrue ( currentDateTime . isTime ( ) )
assertTrue ( proxy . isStopped ( ) , "Listener didn't exit" )
assertEquals ( 0 , elements . size ( ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . PEER_REVIEW_READ_LIMITED )
assertEquals ( "aMO2w7bDtj8=" , event . getDecodedMessage ( ) )
assertEquals ( 7 , BufferTools . indexOfTerminator ( buffer , 5 , 1 ) )
assertEquals ( "Got wrong answer for supports" , false , actual )
assertObjectEquals ( "[{}]" , p . run ( bs , in , sa ) )
assertEquals ( ReadConcern . DB_NAME , parsedReadConcern )
Assert . assertNotNull ( blogEntry )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , expectedQuery ) )
assertTrue ( ret )
assertEquals ( "" , elem . getText ( ) )
assertMapping ( node , 0 , 4 , 0 , 0 , 4 , 26 )
context . assertTrue ( storage . getMockData ( ) . containsKey ( resourceURI ) )
Assert . assertTrue ( item . matches ( divNode ) )
assertArrayEquals ( "18 chars test data (not anymore)" , channel . getBytes ( ) )
assertNull ( type )
assertEquals ( "abcde" , Tinify . client ( "abcde" ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
assertTrue ( mFileType . equals ( p . getFileType ( ) ) )
assertTrue ( correlatedExecutions . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( result , is ( false ) )
assertEquals ( "bc\\n" , found )
assertEquals ( "No search service" , presenter . getSearchService ( ) , null )
assertThat ( source . getName ( ) , is ( nullValue ( ) ) )
assertThat ( converter , is ( instanceOf ( MySecondConverter . class ) ) )
assertEquals ( 2 , recs2 . size ( ) )
assertEquals ( 2 , victim . get ( 1 ) . getIndex ( ) )
assertEquals ( "{\\"cep\\":\\"87030020\\"}" , writer . toString ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_XML ) . get ( ) . getStatus ( ) )
assertTrue ( "Didn't see new information in page!" , ! page1 . asText ( ) . equals ( page . asText ( ) ) )
Assert . assertEquals ( "3 dager sedan" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertNotNull ( reporter )
assertThat ( classLoader . getResourceAsString ( "/path/to/one.jar" ) , is ( "target/classes" ) )
assertTrue ( r . isMatch ( request ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff54_" ) )
assertTrue ( rrc . calculate ( series , new BaseTradingRecord ( ) ) . isNaN ( ) )
assertEquals ( expResult , result )
assertArrayEquals ( VR . PN , a . getBytes ( Tag . PatientName ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertNull ( target . getMplsTtl ( ) )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 3f ) )
Assert . assertEquals ( FastMath . PI , x , 1.0e-4 )
Assert . assertEquals ( "Failure expected the name to be the same" , "ChatroomUpdateDTO" , MHRDTO . getDTOName ( ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
Assert . assertNull ( identifierType )
Assert . assertArrayEquals ( evaluation . getResiduals ( ) . toArray ( ) , new double [ ] { 2 , - 3 } , Precision . EPSILON )
Assert . assertEquals ( "Components missing" , MicroPipelineValidationResult . MISSING_COMPONENTS , new MicroPipelineValidator ( ) . validate ( mockCfg ) )
assertEquals ( "{\\"tag\\":{\\"value\\":\\"
assertEquals ( expectedQuery , actualQuery )
assertTrue ( literals . get ( 0 ) . isIntLiteral ( ) )
assertEquals ( "Log message for {0}" , msg . toString ( ) )
Assert . assertEquals ( 1 , violations . size ( ) )
assertTrue ( "Page contains the given text" , driver . getPageSource ( ) . contains ( "hello" ) )
assertEquals ( 10 * Constants . HOUR , mConfiguration . getMs ( PropertyKey . PROXY_STREAM_CACHE_TIMEOUT_MS ) )
Assert . assertEquals ( expectedPrices , orderedPrices )
Assert . assertEquals ( "List Sheet" , sheets . getData ( ) . get ( 0 ) . getName ( ) )
Assert . assertTrue ( validator . isValid ( array , context ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertEquals ( 0 , atlasModuleInfoRegistry . getAll ( ) . size ( ) )
Assert . assertEquals ( "id1 [" + ID_1 + "] - id [" + ID_2 + "]" , ( long ) ID_1 , ( long ) ID_2 )
assertTrue ( enabled )
assertThat ( result , is ( equalTo ( expected ) ) )
assertEquals ( HISTOGRAM_SERVICE_URI , conf . getMetadataServiceUri ( ) )
assertEquals ( "Person(age < 42 || age < 43 || age < 44)" , builder . getResult ( ) )
assertEquals ( 0 , list . size ( ) )
Assert . assertEquals ( 2 , this . sqlgGraph . traversal ( ) . E ( ) . toList ( ) . size ( ) )
assertEquals ( result , 1 )
assertEquals ( standaloneTask , returnedVariables . get ( taskVarName ) )
assertEquals ( s , v . toString ( ) )
assertNull ( info )
assertEquals ( "aws-keys.txt" , awsId1 )
assertTrue ( target . channelExists ( "kyoto" ) )
assertTrue ( pkg . getChildren ( ) . contains ( "lodash" ) )
assertEquals ( LocalDateTime . of ( 2012 , 6 , 23 , 0 , 0 ) , test )
assertEquals ( "Wrong value" , "Rick" , mv . get ( "name" ) )
assertThat ( cb . getCount ( ) , is ( 1L ) )
assertNull ( policy . getWorker ( options ) )
assertEquals ( "java.util.List" , info . getName ( ) . getFullyQualifiedName ( ) )
assertDoesNotCreateDisabledDir ( tmpDirFile , DirType . LOGS_DIR )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredVersion ) )
assertEquals ( numRecords , result . size ( ) )
assertUpdateRecord ( "*.c1.name,*.c1.active" , objId , obj , updateObj , PATCH , expected )
assertEquals ( "com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService -> dubbo://127.0.0.1:" + port + "/demo" , result )
assertThat ( connection . isOpen ( ) , is ( true ) )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( 0 , result . size ( ) )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
Assert . assertNotNull ( "Filter iterator is null" , it )
assertEquals ( "http://x.y/z#zzz" , actual . toString ( ) )
assertEquals ( expected , result )
assertEquals ( HAServiceState . ACTIVE , svc1 . state )
assertEquals ( ans [ i ] , val )
assertEquals ( "new java.lang.annotation.MyBean(value=[METHOD])\\n" , enc )
assertThat ( timer . elapsedTime ( ) , is ( equalTo ( millis ( 5 ) ) ) )
Assert . assertEquals ( "{\\"alice\\":{\\"bob\\":[\\"edgar\\",\\"charlie\\"]}}" , writer . toString ( ) )
assertThat ( "Cloned builder changed after creating new one" , builder . build ( ) . toString ( ) , equalTo ( clonedBuilder . build ( ) . toString ( ) ) )
assertThat ( interceptor , accepts ( method ) )
Assert . assertFalse ( "Model should contain RDF types" , rdfTypes . isEmpty ( ) )
assertNotNull ( getProxy ( ) . addAgreement ( new AgreementImpl ( " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" , " agreementId" ,
assertValid ( nameField , "Henri" )
approver . assertApproved ( "Deliberate failure - Jackdaws peck my big sphincter of quartz" )
Assert . assertEquals ( "1" , entregaIntervalo . getTipoPrazoHoraEntrega ( ) . getCodigo ( ) )
assertEquals ( contentExpected , contentReturned )
assertTrue ( String . format ( "Expected error to contain string [%s]. Actual error: %s" , expected , ex . getMessage ( ) ) , ex . getMessage ( ) . contains ( expected ) )
assertTrue ( entity5 . getName ( ) . equals ( "After Update!" ) )
assertEquals ( "htmlWithMacros" , Functions . getPageHeaderHtml ( PROJECT , BRANCH , PAGE ) )
assertSame ( realObjectInternalSpring . getClass ( ) , ClassHelper . getRealClassFromClass ( springAopObject . getClass ( ) ) )
assertNull ( value )
assertArrayEquals ( new Item [ ] { SECOND_ITEM , FIRST_ITEM } , actual . toArray ( new Item [ 2 ] ) )
assertNotNull ( imagePreviewDashlet )
assertTrue ( true )
assertEquals ( "53" , content )
assertEquals ( "runtime" , node . getEffectiveScope ( ) )
assertThat ( columnCombination . getClearBits ( ) , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedBits1 ( ) ) )
assertEquals ( expected , actual )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
Assert . assertEquals ( xmlEsperado , icmsst . toString ( ) )
assertEquals ( Byte . valueOf ( "3" ) . intValue ( ) , result . getValue ( ) . intValue ( ) )
assertEquals ( "Expected that the count is correct" , 1 , countReq . getEncodingStatuses ( ) . size ( ) )
assertTrue ( true )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , numberOfDocumentsIn ( index ) )
Assert . assertFalse ( isValid , "PollItem with more than max names length must not be valid" )
assertEquals ( "aa" , Futures . transform ( future , s -> s + s , MoreExecutors . directExecutor ( ) ) . get ( ) )
assertEquals ( 1 , ( ( Number ) o ) . intValue ( ) )
assertEquals ( false , result )
assertEquals ( events . size ( ) , size ( stream ) )
assertEquals ( 1 , observation . getStatusElement ( ) . getExtension ( ) . size ( ) )
assertEquals ( "Successful " + successful + " jobs" , 1 , successful )
assertEquals ( 1.0 , result . getLeft ( ) , EPSILON )
Assert . assertEquals ( "123" , role . getName ( ) )
Assert . assertEquals ( 2 , resources )
Assert . assertEquals ( 2 , myActivities . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNotNull ( token . getRefreshToken ( ) )
assertTrue ( startsWithHttpsOrFTP )
assertEquals ( "Local changes" , ( Integer ) 100 , copy . deref ( ) )
assertResponseContains ( httpResponse , "com.qmetric.spark.metrics.MetricSetupTest$1.timer" , "com.qmetric.spark.metrics.RouteTimerWrapper.meter" )
assertEquals ( "203" , example )
assertTrue ( cache . containsEntry ( entry ) )
getStream ( streamId ) . statusCode ( 200 ) . assertThat ( )
assertThat ( drawingMotion . isPoint ( ) , is ( true ) )
assertTrue ( features . noneMatch ( f -> f . getId ( ) . startsWith ( "spring/" ) && ! f . isBlacklisted ( ) ) )
assertGroups ( ldapUserInfo , false , false , false , false )
Assert . assertEquals ( expected , actual )
assertFalse ( suspendables . contains ( method ) )
Assert . assertNotNull ( "Problem loading configuration from " + REL_PATH , appender )
assertTrue ( date != null )
Assert . assertEquals ( address . getStreet ( ) , getAddressDao ( ) . find ( Address . class , "Nueva calle, 5" ) . getStreet ( ) )
assertEquals ( MESSAGE , ex . getMessage ( ) )
assertThat ( built . getName ( ) , is ( "John Smith" ) )
assertTrue ( ax . toString ( ) , ax instanceof OWLDataPropertyRangeAxiom )
assertEquals ( generatedJavascript , expectedJavascript )
assertNull ( systemJavaxPersistenceOverrides )
assertNotNull ( manager . getConnection ( handler1 ) )
assertTrue ( exception )
Assert . assertTrue ( "This should overflow to negative" , unprocessedSize + hugeLength < bufferSize )
assertThat ( updateSuccessful , equalTo ( true ) )
assertEquals ( "jackrabbit" + OptionHelper . _IS_UNDEFINED , r )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
assertThat ( g , instanceOf ( Byte . class ) )
Assert . assertTrue ( contains )
assertEquals ( "a.b.c" , map . get ( "a.b.c" ) )
assertEquals ( ( double ) 8 , result . getDoubleValue ( ) , 0.0 )
assertThat ( joined , containsInAnyOrder ( "a c" , "a d" , "b c" , "b d" ) )
arrays . assertContainsOnly ( description , actual , other )
assertThat ( new String ( buffer . toByteArray ( ) ) , is ( "{" + "\\"data\\":{" + "\\"name\\":\\"bob\\"," + "\\"age\\":12," + "\\"favorite_numbers\\":[1,2,3]" + "}," + "\\"self\\":\\"/db/data/node/0\\"," + "\\"extensions\\":{}" + "}" ) )
assertTrue ( count ( c , tableNames ) < 10 )
assertNull ( "null rowsorter initially, was: " + table . getRowSorter ( ) , table . getRowSorter ( ) )
assertEquals ( expected , sw . toString ( ) )
Assert . assertTrue ( etagHeaderValue . matches ( "\\".*?\\"" ) )
assertTrue ( diff < visHash . maxThreshold )
assertEquals ( MICRO ( EU ) , u )
assertThat ( javaDocComment , containsString ( "A title for this type" ) )
assertNotSame ( conn1 , conn2 )
runner . assertAllFlowFilesTransferred ( PublishKafka_2_0 . REL_FAILURE , 2 )
assertEquals ( result1 , result2 )
assertThat ( result , is ( jsonRecord ) )
assertEquals ( ctx . makePoint ( 160 , 30 ) , s )
Assert . assertTrue ( arrangeTaskExecutor . getTaskThread ( ) == arrangeTaskExecutor . getTaskThread ( ) )
Assert . assertTrue ( files . get ( 0 ) . contains ( "filesample.txt" ) )
assertEquals ( AuthorizationStatus . BLOCKED , response . getIdTagInfo ( ) . getStatus ( ) )
assertEquals ( expectedSummary , metadata . getMetadataValue ( EIGHTH_SENTENCE ) )
assertEquals ( 2 , traceBuilder . size ( ) )
assertEquals ( expectedJson , actualJson )
Assert . assertEquals ( expected , actual )
assertThat ( IOUtils . toByteArray ( req . getBodyAsBytes ( ) ) , is ( BINARY_BODY ) )
assertEquals ( 0 , thingCollection . size ( ) )
assertEquals ( ImplicitImportResolver . class , r . resolve ( "ImplicitImportResolver" ) )
assertNotNull ( response )
assertTrue ( resultFromJPQL . size ( ) > 0 )
assertOut ( "this.a.child('child').removeChildAt(0)" )
assertTrue ( "Logger should not be changed" , ops . exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertDecorate ( serviceProps , expected , RES_SD1 , RES_SD2 )
assertEquals ( inputString , outputString )
Assert . assertTrue ( result . getEntities ( ) . size ( ) == 0 )
Assert . assertArrayEquals ( coh_EXPECTED . toArray ( ) , coh_ACTUAL . toFloat ( ) . toArray ( ) , ( float ) DELTA_04 )
assertEquals ( "2" , buffer . getBuffer ( ) . toString ( ) )
assertEquals ( "Not sorted " + needle , needle , test . get ( needle ) )
Assert . assertFalse ( "Method supported" , adapter . supportsInternal ( new MethodEndpoint ( this , unsupported ) ) )
Assert . assertEquals ( "Method: doTestGetPrinterJMakiTree \\nMessage: JMBI tree retrieved" , "JMBI" , treeModel . getTreeModel ( ) . getRoot ( ) . getText ( ) )
assertEquals ( "Wrong result" , value , interpolate ( value , ListDelimiterHandler . NOOP_TRANSFORMER ) )
surefireLauncher . executeTest ( ) . assertTestSuiteResults ( 2 , 0 , 0 , 0 )
assertEquals ( asList ( MapUtil . map ( "person.type" , "hero" , "person.name" , "Thomas Anderson" ) , MapUtil . map ( "person.type" , "hero" , "person.name" , "Trinity" ) ) , result )
assertTimerWithCycle ( "boundary" , TIMER_CYCLE )
assertEquals ( expected , buf )
assertCompareToOrder ( comparator , a , b )
assertTrue ( featuresService . isInstalled ( featuresService . getFeature ( "pax-http-undertow" ) ) )
Assert . assertEquals ( "涓�瑗�|浼�|��|浜�" , words )
assertThat ( id , greaterThan ( 0 ) )
Assert . assertEquals ( expectedDPIDs [ i ] , datapathId )
assertEquals ( "case when (cat.toes = ?1) then (cat.id * ?1) when (cat.toes = ?2) then (cat.id * ?2) else 4 end" , serializer . toString ( ) )
assertEquals ( "It's a dummy test!" , emf . format ( new Object [ ] { "DUMMY" } ) )
assertThat ( listener . toString ( ) , containsString ( "transparent" ) )
assertThat ( future , completesTo ( "ab" ) )
assertFalse ( "property not cleared" , config . containsKey ( "key1" ) )
TestUtil . assertEquals ( exp , spans )
assertThat ( output , containsString ( "DICOM study study names:" ) )
assertEquals ( 15 , iData . getDeliveryInsertionIndex ( ) )
Assert . assertEquals ( "Test-29" , list . get ( 0 ) . getTitle ( ) )
Assert . assertThat ( result . size ( ) , is ( 1 ) )
assertThat ( configuration . getECMAVersion ( ) , is ( version ) )
Assert . assertEquals ( 200 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
TestCase . assertTrue ( result )
assertTrue ( ds . asList ( ) . isEmpty ( ) )
assertEquals ( "testPostRequestWithEncodedParameters" , responseBody )
Assert . assertNotNull ( addressResultsDto )
Assert . assertTrue ( "Requests with same order of URI path options must equal!" , coapRequest1 . equals ( coapRequest2 ) )
assertEquals ( 1 , t . foo ( ) )
assertThat ( result , equalTo ( ARCHETYPE_CATALOG ) )
AssertiveInstance . init ( )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "errorPage" ) , "You arrived at error page" ) . apply ( driver ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff20_" ) )
assertSame ( binding , uriTools . resolveUri ( PROFILE_URI . resolve ( "processorbinding/Hello/out/name" ) , wfBundle ) )
assertFalse ( fs . unlink ( "foo" ) )
assertTrue ( AcceptanceTestUtil . isInterested ( peerUserAtServer , context , 1 ) )
assertThat ( output . format ( "narrative" , "" , "narrative" ) , Matchers . is ( "\\033[35marrative\\033[0m" ) )
assertEquals ( "20887" , result )
assertThat ( result , contains ( URI . create ( uris . get ( 0 ) ) , URI . create ( uris . get ( 1 ) ) ) )
assertEquals ( "[1]" , CollectionUtils . trim ( list , 1 ) . toString ( ) )
assertThat ( url , is ( "http://www.google.com" ) )
assertEquals ( experimentRequest . getResponseParser ( ) . parse ( null ) , responseParser . parse ( experimentRequest . getResponseParser ( ) . parse ( experimentRequest . getResponseParser ( ) . toString ( ) ) ) )
assertArrayEquals ( expected , actual , 1E-8 )
assertTrue ( "Exception raised" , exceptionRaised )
assertTrue ( "No maximum length reached exception was thrown!" , exception )
Assert . assertEquals ( 1 , changedModel . getGroups ( ) . size ( ) )
assertThat ( processor , instanceOf ( UnknownMessageProcessor . class ) )
Assert . assertEquals ( "<h1>Hello @ World
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( module . getPrivileges ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertEquals ( diff , obj . toString ( ) )
assertThat ( expiryTimeInSecs , is ( expiryTimeBaseInSecs ) )
Assert . assertEquals ( constraintViolations . size ( ) , 0 , "Validation errors" )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertEquals ( fileSizeMax , request . getContentLength ( ) )
assertThat ( actual , containsString ( "[07/02/1991:01:02:03Z]" ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "OK" , response . getTitle ( ) )
assertEquals ( DROP_STATEMENT , statement )
assertNotNull ( SyncList . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( ret )
assertThat ( repository . getUserActivityRecord ( userId ) , is ( Optional . of ( record ) ) )
assertEquals ( "testAccount" , context . getHeaderString ( "User-Agent" ) )
assertTrue ( Arrays . deepEquals ( new byte [ ] [ ] { BaseEncoding . base64 ( ) . decode ( "BaS" ) , BaseEncoding . base64 ( ) . decode ( "e6" ) , BaseEncoding . base64 ( ) . decode ( "" ) , BaseEncoding . base64 ( ) . decode ( "4+" ) , BaseEncoding . base64 ( ) . decode ( "" ) , BaseEncoding . base64 ( ) . decode ( "padding" ) , BaseEncoding . base64 ( ) . decode ( "more" ) , BaseEncoding . base64 ( ) . decode ( "" ) } , values ) )
assertEquals ( "Wrong timer id" , TEST_TIMER_ID , timerId )
Assert . assertEquals ( ECHO_STRING , outMessage )
Assert . assertEquals ( "test" , collector . getId ( ) )
assertThat ( CalendarYear . from ( cy . toProlepticNumber ( ) ) , is ( cy ) )
assertEquals ( minion . getAttack ( ) , minion . getBaseAttack ( ) + minion . getBaseAttack ( ) )
assertNull ( result )
assertEquals ( aNumber , Float . valueOf ( aNumber ) , 0.0f )
assertEquals ( "GS*GS01*GS02*GS03" , x12 . getSegment ( 1 ) . toString ( ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertEquals ( expResult , result )
assertFalse ( "is not run in a new Gregorian Calendar" , notTime . isTimeToRun ( ) )
assertEquals ( 12 , metadata )
deleteRunner . assertAllFlowFilesTransferred ( AbstractDynamoDBProcessor . REL_FAILURE , 1 )
assertCreatedRight ( client , "iem://test:123/Event" )
Assert . assertEquals ( proxy , deserialized )
assertEquals ( "Boolean typeName" , "boolean" , typeName )
assertSelectResultKeySizeIsZero ( selector )
assertEquals ( expectedSchema , schema )
assertEquals ( "Wrong number of delimiter characters" , 1 , config . getDelimiterParsers ( ) . size ( ) )
assertNull ( fastest )
assertEquals ( "{ \\"field name\\" : { \\"$bitsAnyClear\\" : \\"?\\" } }" , filterParameters . toString ( ) )
assertEquals ( "-1" , result )
assertThat ( auth . getIssuer ( ) , is ( equalTo ( "YWxob3N0OjgwODEiLCJhbGciOiJodHRwOi8vbG9jYWxob3N0OjgwODEiLCJleHAiOjE1MDQ3NDA3NDQsInVzZXJfbmFtZSI6ImpvaG4iLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXSwianRpIjoiYzYzN2MxY2EtYWM2My00ZGVlLWI2NDItYjJjjiMTcwNGEzODNiFijY2xpZW50X2lkIjoiZm9vQ2xpZW50SWRQYXNzd29yZCIsInNjb3BlIjpbImZvbyIsInJlYWQiLCJ3cml0ZSJdLCJpYXQiOjE1MDQ3MzcxNDR9.G3vVR314v5bKiMJow0wRE0ZOXSakoRLxBSM9_PZeMms" ) )
assertEquals ( "Expecting more offsprings" , 98765 , result )
assertEquals ( expected , arguments . profilers )
assertEquals ( 3 , c )
assertNull ( cause )
assertThat ( "Button location has changed after table refresh, window has scrolled and it shouldn't have" , newRowLocation , is ( rowLocation ) )
assertNotNull ( IndexWriter . getFailurePolicy ( env ) )
assertEquals ( tpv1 , tpv2 )
assertEquals ( "\\"NAME\\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertEquals ( "response body should be " + basicAuthHeader , expected , response . getResponseBody ( ) )
assertEquals ( "Expected 4 results!" , 4 , count )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertEquals ( MESSAGE , result )
assertEquals ( new EmailAggregate ( uuid ) , byUUID )
assertEquals ( 1.0 , buffer [ 0 ] , 0.0 )
assertNotNull ( walletInfo )
assertEquals ( expectedQuery , actualQuery )
assertContains ( "<body><p><i>ITALIC Test before link </i><a href=\\"http://www.google.com\\"><b><i>Hyperlink italics</i></b></i></body></p>" , content )
assertEquals ( "" , rc . getBodyAsString ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
Truth . assert_ ( )
assertEquals ( "SELECT count(uid) FROM org.fastquery.dialect.MySQLPageDialect.MySQLPageDialect_sid WHERE u.id = :uid AND (select count(uid) fRom tiduid where u.name = :name) AS occupy frOm `user` as u" , str )
assertEquals ( 401 , post . getStatus ( ) )
assertNull ( message )
assertEquals ( model , loaded )
assertXMLEqual ( getExpectedString ( ) , stringWriter . toString ( ) )
assertSame ( obj , simplePersist . findByProperties ( SimpleObject . class , new String [ ] { } , new Object [ ] { } ) )
assertEquals ( "<script src=\\"http://evil.org/evil\\"></script> <b>hello</b>" , rewrite ( gadget , markup , set ( "p" , "b" , "style" ) , set ( ) ) )
Assert . assertEquals ( 42. , analyser . getDistanceAtActivity ( route . getEnd ( ) , route ) , 0.01 )
Assert . assertEquals ( 0 , ignored . size ( ) )
Assert . assertArrayEquals ( new String [ ] { "org" , "websocket" , "echo" , String . valueOf ( dispatch . getDefaultPort ( "http" ) ) , ";e" , "cb" } , toStringArray ( tokens ) )
assertEquals ( expected , fromString )
assertTrue ( r . getNextRoads ( ) . contains ( t1 ) )
assertEquals ( "smile" , emoji . getName ( ) )
assertTrue ( "Option 'delete-vault' not found in " + Arrays . deepToString ( optionSet . specs ( ) . toArray ( ) ) , optionSet . has ( "delete-vault" ) )
Assert . assertEquals ( 2 , registrationBC . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( "startTime" , Deencapsulation . getField ( jobsParser , "startTime" ) )
assertEquals ( result , a . getCallback ( ) )
assertFalse ( controller . getNode ( "/subnet" ) . hasPublishedInput ( "n" ) )
assertEquals ( list , boundedSet . getBoundedHashSet ( ) )
assertThat ( this . dataModel . getRowIndex ( ) , is ( 0 ) )
assertEquals ( JSON_CONTENT_RGB , stringWriter . toString ( ) )
Assert . assertEquals ( esperado , resultado )
assertThat ( actualPerMinuteValue , is ( 13 ) )
assertTrue ( ( ( String ) result . get ( Fields . ATTACHMENT_BODY ) . get ( 0 ) ) . length ( ) > 0 )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( "abc,def,goodbye,world" , prefixedJCommander . getCommand ( ) . getValue ( ) )
Assert . assertEquals ( Schema . Type . FIXED , subSchema . getType ( ) )
Assert . assertEquals ( 1 , context . getLogRecords ( ) . size ( ) )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( new Result [ ] { Result . createValueResult ( ) , Result . createValueResult ( 1 ) , Result . createValueResult ( 2 ) , Result . createValueResult ( 3 ) , Result . createValueResult ( 4 ) , Result . createValueResult ( 5 ) , Result . createValueResult ( 6 ) , Result . createValueResult ( 7 ) , Result . createValueResult ( 8 ) , Result . createValueResult ( 9 ) , Result . createValueResult ( 10 ) , Result . createValueResult ( 11 ) , Result . createValueResult ( 12 ) , Result . createValueResult ( 13 ) , Result . createValueResult ( 14 ) , Result . createValueResult ( 15 ) , Result . createValueResult ( 16 ) , Result . createValueResult ( 17 ) , Result . createValueResult ( 18 ) , Result . createValueResult ( 19 ) , Result . createValueResult ( 20 ) , Result . createValueResult ( 21 ) , Result . createValueResult ( 22 ) , Result . createValueResult ( 23 ) , Result . createValueResult ( 24 ) , Result . createValueResult ( 25 ) , Result . createValueResult ( 26 ) , Result . createValueResult ( 27 ) , Result . createValueResult ( 28 ) , Result . createValueResult ( 29 ) , Result . createValueResult ( 30 ) , Result . createValueResult ( 31 ) , Result . createValueResult ( 32 ) , Result . createValueResult ( 33 ) , Result . createValueResult ( 34 ) , Result . createValueResult ( 35 ) , Result . createValueResult ( 36 ) , Result . createValueResult ( 37 ) , Result . createValueResult ( 38 ) , Result . createValueResult ( 39 ) , Result . createValueResult ( 40 ) , Result . createValueResult ( 41 ) , Result . createValueResult ( 42 ) , Result . createValueResult ( 43 ) , Result . createValueResult ( 44 ) , Result . createValueResult ( 45 ) , Result . createValueResult ( 46 ) , Result . createValueResult ( 47 ) , Result . createValueResult ( 48 ) , Result . createValueResult ( 49 ) , Result . createValueResult ( 50 ) , Result . createValueResult ( 51 ) , Result . createValueResult ( 52 ) , Result . createValueResult ( 53 ) , Result . createValueResult ( 54 ) , Result . createValueResult
assertEquals ( data , TestFileUtils . readString ( file ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfCheckBox.pdf" , sourceFolder + "cmp_xfdfCheckBox.pdf" , destinationFolder , "diff_" ) )
assertEquals ( expecteds , actuals )
assertThat ( result , is ( 3 ) )
assertEquals ( "EXEC mmspTest1.MMSP5('a')" , userSql )
assertThat ( remoteAddress , is ( "1.2.3.4" ) )
assertEquals ( expResult , result )
assertNull ( taskService . createTaskQuery ( ) . singleResult ( ) )
assertNotNull ( result )
Assert . assertTrue ( exists )
assertEquals ( 1 , out . list ( ) . length )
assertEquals ( 1 , engineRule . getTaskService ( ) . getVariables ( task . getId ( ) ) . size ( ) )
assertEquals ( expType1 . name ( ) , result )
assertEquals ( "str 0:str 1" , res . join ( ) )
Assert . assertTrue ( ArgumentParser . validateArguments ( argsString , AllOptionalArguments . class ) )
Assert . notNull ( grade )
assertArrayEquals ( new byte [ ] { 2 , 3 , 4 , ( byte ) 128 } , bos . toByteArray ( ) )
assertEquals ( "Wrong result" , 0 , m . getCount ( ) )
Assert . assertTrue ( file . getAbsolutePath ( ) . contains ( localRepo . getAbsolutePath ( ) ) )
assertEquals ( expectedFont [ i ] , foInline . getAttribute ( "font-family" ) )
assertEquals ( result , varX * varY , 0.0 )
assertEquals ( 0 , dsg . getNbEdges ( ) )
assertEquals ( "\\"2005-05-02T00:00:00+02:00\\"^^xsd:dateTime" , val )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertVariable ( "a_b_c_d" , "1" )
Assert . assertEquals ( VmInstanceState . Unknown , vmvo . getState ( ) )
assertNull ( valueProvider . getValue ( row ) )
assertEquals ( test . getPalindrome ( ) , true )
assertEquals ( "Select a tag with some values" , element . getChildMarkup ( ) )
assertLine ( "Itasty " , b , false )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertNull ( log )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . MULTIPLE , v , TERM_FACTORY . getConstantLiteral ( "2" , XSD . LONG ) ) , translation )
assertTrue ( match == null )
assertPermanentCount ( playerA , "Commander" , 1 )
assertEquals ( candidates , databaseManager . listCommands ( ) )
Assert . fail ( "Should have failed with MultiException" )
assertThat ( JobWatcher . getFailedReason ( cachedJob ) , nullValue ( ) )
assertEquals ( "John Doe" , people . get ( 0 ) . getName ( ) )
assertTrue ( Arrays . equals ( "test" . getBytes ( "UTF-8" ) , arrayFirst ) )
assertMatch ( e , s )
assertEquals ( SymbolLookup . NOT_FOUND , ret )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( map . get ( "Key" ) , is ( "Data 23:23:12" ) )
Assert . assertEquals ( expectedJson , json )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( - 1 , fixture . readShort ( ) )
assertEquals ( 100 , getInt ( System . getProperties ( ) , "demo.count" ) )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Luke" , "Yoda" ) )
this . context . assertIsSatisfied ( )
assertEquals ( xml , writer . toString ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
Assert . assertNotNull ( creationFactory )
assertThat ( actualExceptionCode , is ( "defaultExceptionCode002" ) )
assertResultIs ( "/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/pathElement/
assertPowerToughness ( playerA , "Sacrifice" , 2 , 2 )
Assert . assertEquals ( "did not get expected data length" , 0 , result . length ( ) )
assertEquals ( "OK" , response )
assertEquals ( aplicacionWS , aplicacion )
Assert . fail ( "Missing required input" )
assertEquals ( expected , actualQuery )
assertEquals ( "CXF" , s )
assertFalse ( r . equals ( r2 ) )
assertThat ( manager . overrideVote ( "foo" ) , is ( true ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location (nt_number 123)))" , loc . toStringTree ( parser ) )
assertThat ( milliseconds , is ( EXPECTED_VALUE ) )
context . assertIsSatisfied ( )
assertEquals ( "n.ext" , Util . stripFileExtension ( fullName ) )
assertEquals ( "recoveredResult must be Success(42)" , recoveredResult , new Try . Success < > ( 42 ) )
Assert . assertEquals ( chromosome . getFitness ( ) , copy . getFitness ( ) , 0.0 )
assertEquals ( 0 , count ( elements ) )
assertEquals ( tickClosePrice . getValue ( i ) , result )
descriptor . assertValid ( )
assertEquals ( ds + bs + cs , target . readUtf8 ( ) )
assertEquals ( true , result )
assertTrue ( memoryLoaded . equals ( readStatus ) )
assertTrue ( exist )
assertEquals ( ValidationResult . Result . OK , props . getValidationResult ( ) . getStatus ( ) )
assertEquals ( 4 , requirements . size ( ) )
assertEquals ( 1 , c0 . get ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "freeReference.pdf" , sourceFolder + "cmpFreeReference.pdf" , destinationFolder , "diff" ) )
assertEquals ( getScrollTop ( ) , 1000 )
assertTrue ( shutdown . get ( ) )
assertFalse ( computer . needsProcessing ( context ) )
assertThat ( config . getSequencingConfigurations ( ) , is ( notNullValue ( ) ) )
assertThat ( component . execute ( ) , is ( expected ) )
assertTrue ( "DOI is supported" , result )
assertEquals ( "BROKERURI:<br />TOPIC" , addressString )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result?hint=ok'>\\n" + "<input type='hidden' name='AMOUNT' value='800'>\\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/result?hint=ca'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CN' value='holder  name'>\\n" + "<input type='hidden' name='COM' value='bob@doe.com, 1234'>\\n" + "<input type='hidden' name='CURRENCY' value='USD'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=de'>\\n" + "<input type='hidden' name='EMAIL' value='bob@doe.com'>\\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result?hint=de'>\\n" + "<input type='hidden' name='EMAIL' value='bob@doe.com'>\\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CURRENCY' value='USD'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=de'>\\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CN' value='holder  name'>\\n" + "<input type='hidden' name='COM' value='bob@doe.com, 1234'>\\n" + "<
assertEquals ( "1.543" , serializer . toString ( ) )
assertEquals ( null , result )
assertFalse ( sut . purgeCalled )
assertEquals ( n , s )
assertEquals ( 1 , rowCount )
assertEquals ( "ZeroOneOneTwoThreeFour" , exp )
assertEquals ( value , evaluated )
assertFalse ( "Accepted value outside range of int" , accepted )
assertThat ( this . appRegistryService . find ( "log1" , ApplicationType . sink ) . getUri ( ) . toString ( ) , is ( "maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.2.0.RELEASE" ) )
Assert . assertTrue ( ! ( ( BasicDecider ) instance ) . isToRunContained ( metadata . getWorkflowRun ( workflowRunAcc ) . getInputFileAccessions ( ) , filesToRun ) )
assertEquals ( "foo" , expression . getValue ( elContext ) )
assertAllGuardsExists ( )
Assert . assertEquals ( "test" , var . toString ( ) )
assertReference ( reference , "referent" , null , null )
assertThat ( description . toString ( ) , is ( "to have global error of code 'global.error.null'" ) )
assertNull ( data )
assertEquals ( "foo.org" , context . getHost ( ) )
assertEquals ( input , txt )
assertTrue ( "permission was not granted to admin." , updateUserPermission . isAllowed ( auth , 1L ) )
assertFalse ( result )
Assert . fail ( "Should have failed due to a save on top" )
Assert . assertEquals ( testString , HtmlToXMLUtil . unescapeToXML ( testString ) )
assertNotNull ( actual )
assertEvidence ( evidence , 0 , 0 , 0 , 0 , 0 )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( expectedWkt , result )
assertTrue ( ext instanceof HasAdaptiveExt_ManualAdaptive )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertThat ( response , containsString ( "Unreferenced" ) )
assertThat ( converter . toJavaObject ( new DoubleWritable ( 1.0D ) ) , is ( ( Object ) 1.0D ) )
assertTrue ( leaseRefresher . takeLease ( leaseCopy , lease . leaseKey ( ) ) )
assertEquals ( expected , bytesUsed )
assertFalse ( sta . validateStrokeAndFill ( null , new SolidFill ( ) ) )
assertEquals ( "maprfs://" + testUrlTransformed , namedClusterBridge . processURLsubstitution ( testUrl , null , null ) )
assertTrue ( "The recreated syntax-tree did not match the input syntax-tree." , pennOriginal . equals ( pennFromRecreatedTree ) )
assertPermanentCount ( playerA , "Swamp@lib" , 1 )
assertEquals ( "[message: hello0, message: hello1]" , broadcasts . toString ( ) )
assertEquals ( "value" , store . get ( "key" ) )
assertEquals ( 1 , table . getCounter ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "incorrect value" , result , aNumber . longValue ( ) )
assertThat ( description . toString ( ) , containsString ( "cell at \\"A3\\" contained <\\"XXX\\"> expected <\\"Row 3\\">" ) )
assertEquals ( Paths . get ( "/some/folder/file.txt" ) , result )
assertEquals ( "TagMediaFeed [data=[], meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]]" , result )
assertThat ( originalSession , not ( equalTo ( newSession ) ) )
assertTrue ( res )
Assert . assertEquals ( DFUnidadeFederativa . SC , retornoConsultaCadastroDados . getUf ( ) )
Assert . assertEquals ( 18 , psRes . length ( ) )
assertTrue ( updates . isEmpty ( ) )
assertNotNull ( consumable )
assertEquals ( "{\\"test\\":[{\\"OK\\":\\"200\\"},{\\"REDIREDT\\":[{\\"CREATED\\":\\"201\\"}]}]}" , result . toString ( ) )
assertEquals ( 10 , success [ 0 ] )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p: %m%n" , layout . getConversionPattern ( ) )
Assert . assertEquals ( "-set.Failed" , result )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( ConnectionSchema . DEFAULT_MAX_WORK_QUEUE_SIZE , createSchema ( map , 0 ) . convert ( ) . getMaxWorkQueueSize ( ) )
assertThat ( any . contains ( SECOND_OF_MINUTE ) , is ( true ) )
assertEquals ( 56 , header . getNumSamples ( ) )
assertEquals ( "UTF-8" , doc . getDocumentElement ( ) . getContent ( ) )
assertEquals ( 10. , stateManager . getRouteState ( route , vehicle , id , Double . class ) , 0.01 )
Assert . assertEquals ( "ConsumerKey" , consumer . getConsumerKey ( ) )
assertThat ( new DefaultPushGHEventSubscriber ( ) . isApplicable ( prj ) , is ( false ) )
assertShapeCoordinates ( boundaryEventBounds , 343 , 200 )
assertTrue ( found )
Assert . assertTrue ( s )
assertEquals ( "[inflectedform121, inflectedform122]" , Arrays . toString ( state . toFinalString ( null ) ) )
assertLife ( playerA , 18 )
assertEquals ( "{\\"remark\\":{\\"description\\":\\"description1\\",\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description2\\"},\\"secureDNS\\":{\\"remarks\\":{\\"description\\":\\"description1\\"},\\"secure
assertNotEquals ( insertPerson , insertDifferentPerson )
assertEquals ( 1 * 2 * 3 * 4 , IntStream . range ( 1 , 5 ) . reduce ( lambda ) . getAsInt ( ) )
assertEquals ( 0 , attr . size ( ) )
assertEquals ( "[2147483644, 2147483646]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertThat ( result , is ( false ) )
assertSame ( PredefinedConfigurationContextResolver . empty ( ) , contextResolver )
assertEquals ( "public static final ListProperty<TargetEntity> list_rel = PropertyFactory.createList(\\"list_rel\\", TargetEntity.class);" , definition )
Assert . assertEquals ( infoForward . getSequence ( ) , resultTranscript )
assertEquals ( BaseAction . INPUT , action . doDefault ( ) )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertNull ( testResult )
Assert . assertEquals ( Score . NEGATIVE , score )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "12-Mar-2013" )
assertEquals ( 123.5 , hdt . getHeading ( ) , 0.1 )
assertTrue ( ! nnList . isEmpty ( ) )
assertTrue ( driver . findElement ( By . name ( "_TRANSACTION_TOKEN" ) ) . getAttribute ( "value" ) . matches ( "transactiontoken~[0-9a-z]{32}~[0-9a-z]{32}" ) )
assertTrue ( "Header on exchange should indicate failure" , exchange . getIn ( ) . getBody ( WorkNote . class ) . hasErrors ( ) )
assertEquals ( exp , act )
assertEquals ( JsonArray . from ( 5.87 , 47.27 , 1000 ) , query . getStartRange ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertTrue ( exceptionThrown )
assertEquals ( "astring" , printer . toString ( ) )
assertThat ( dynScope1 . getUnrestricted ( ) , equalTo ( restricted ) )
Assert . assertEquals ( expResult , result )
assertEquals ( 100 , i )
assertEquals ( mockResponse , testResponse )
assertEquals ( "Incorrect value" , map ( DATE_STRING , "test" ) , value )
assertThat ( codes , containsInAnyOrder ( "50015-7" , "43343-3" ) )
Assert . assertNotNull ( cu )
assertThat ( keys . size ( ) , is ( 1 ) )
assertOut ( "goog.provide('com.example.components.TestInterface');\\n\\n/**\\n * @interface\\n */\\ncom.example.components.TestInterface = function() {\\n};" )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
Assert . assertEquals ( 40. , solution . getCost ( ) )
Assert . assertEquals ( 1 , issues . length )
assertEquals ( "hello world" , list . get ( 0 ) )
TestCase . assertTrue ( matcher . match ( "Hello, World" ) )
assertThat ( response , is ( HttpStatus . SC_BAD_REQUEST ) )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( testOutcome . get ( ) . getResult ( ) , is ( TestResult . SUCCESS ) )
assertEquals ( "J13" , rangeA . getCellData ( ) . getStringValue ( ) )
Assert . assertEquals ( newSubscription . getInvitedBy ( ) , membership . getInvitedBy ( ) )
assertEquals ( "1..10\\n" , sw . toString ( ) )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\\"next\\"" , affordance . toString ( ) )
assertArrayEquals ( data , baos . toByteArray ( ) )
assertEquals ( 12345 , settings . getOwnColor ( ) )
Assert . assertEquals ( 3 , count . size ( ) )
Assert . assertEquals ( 0L , actualResult )
TestCase . assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Parameter was " + result + " instead of username" , "username" . equals ( result ) )
assertEquals ( "Response code is not OK" , HttpStatus . SC_OK , returnResponse . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatusCodes . NOT_ACCEPTABLE . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
validator . assertValid ( value )
assertEquals ( expected , e . setVariable ( "x" , x ) . evaluate ( ) , 0.0 )
assertTrue ( result . contains ( obj1 . getName ( ) ) )
assertEquals ( ( short ) 8 , ( short ) result . getShortValue ( ) )
Assert . assertEquals ( "double clicked" , ( new Element ( "//button[@id='myButton']" ) ) . getText ( ) )
Assert . assertTrue ( JexlASTHelper . equals ( one , two ) )
assertTrue ( acl . hasPermission ( authenticationToken , Item . READ ) )
assertEquals ( content [ 0 ] , content2 [ 0 ] )
assertEquals ( "<a><b><c>1</c><c>2</c><c>3</c></b></a>" , projector . asString ( emptyProjection ) )
assertNotNull ( access )
assertEquals ( .875d , mdd . calculate ( series , tradingRecord ) , TATestsUtils . TA_OFFSET )
assertEquals ( result . getContent ( ) , Unsubscribe_msg )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Employees('3')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Employees('3')\\",\\"type\\":\\"RefScenario.Employee\\"," + "\\"content_type\\":\\"image/jpeg\\",\\"media_src\\":\\"Employees('3')/$value\\"," + "\\"edit_media\\":\\"" + getEndpoint ( ) + "Employees('3')/$value\\"}," + "\\"Age\\":56,\\"EntryDate\\":null," + "\\"ne_Team\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Employees('3')/ne_Team\\"}}}}" , getBody ( response ) )
assertThat ( Tracee . getBackend ( ) , is ( sameInstance ( traceeContext ) ) )
assertEquals ( getFormatter ( ) . toString ( ) , "Pad('Y',5,')" )
this . assertGet ( "nodetypes/all-visualappearancedata" , "entitytypes/nodetypes/all-visualappearancedata-of-commit-4656a0abe19b8720c28273461c84d2ddd09ef868.json" )
assertTrue ( anc . isEmpty ( ) )
assertMatchIs ( matcher , false )
assertThat ( result , is ( Optional . empty ( ) ) )
assertTrue ( page . getBody ( ) . asText ( ) . indexOf ( "EL value" ) != - 1 )
assertEquals ( "\\"\\"" , formatWithQuoteChar . getQuoteChar ( ) )
Assert . assertNull ( result )
assertions . isNotGreaterThan ( new Short ( ( short ) 2 ) )
assertThat ( text ( contents ) , is ( "\\"a\\",\\"b\\",\\"A\\",\\"B\\r\\nA,B\\r\\n" ) )
assertEquals ( filterClause , " AND \\"fieldName\\" = 3" )
assertEquals ( Json . createArrayBuilder ( ) . add ( bsonObject ) . build ( ) , BsonCodec . bsonArrayToJsonArray ( new BsonArray ( ) . add ( bsonObject ) ) )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( "SELECT year, SUM(profit) FROM sales GROUP BY year WITH ROLLUP;" , text )
assertFalse ( cli . isConnected ( ) )
assertNotNull ( registry . createConsumer ( i ) )
Assert . assertEquals ( subject , service . getAuthenticationFromToken ( privateKeyJWT . getClientAssertion ( ) . serialize ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
Assert . assertEquals ( LoadBalancer . Status . LoadBalancer , mLB . getStatus ( ) )
assertEquals ( new FilterCoefficients ( pythonB , pythonA ) , coeffs , 1e-3 )
assertThat ( conn . isAutoCommit ( ) , is ( false ) )
assertEquals ( "1 a 2 3\\n" , found )
assertEquals ( expected , x )
assertEqualsWithoutWhiteSpaces ( "difference() {rotate([10,20,30]) difference() {(model1) (model2)} (model3)}" , difference )
assertFF4j . assertThatFeatureFlipped ( "D" )
assertEquals ( Collections . singleton ( michael ) , group . getPersons ( ) )
Assert . assertEquals ( 3 , size )
assertEquals ( 0.0 , c . getFitness ( ) , 0.001 )
assertNotNull ( response )
assertEquals ( 0 , bytes . readRemaining ( ) )
Assert . assertEquals ( "${missing}" , readProperties ( basedir ) . get ( "custom" ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    struct f_0001_0000 {int m0;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertFalse ( file . containsGroup ( "default-group" ) )
assertThat ( dependents . size ( ) , is ( 1 ) )
assertTrue ( Arrays . equals ( s , multiEntry ) )
assertThat ( pgpSignedMessage . getKeyId ( ) , is ( "BEGIN PGP SIGNED MESSAGE-----\\n" + "Hash: SHA1\\n" + "Comment: none\\n" + "\\t \\n" + "person:  Admin Person\\n" + "address:
assertEquals ( "read_string of size 0" , "" , stream . read_string ( ) )
assertEquals ( "Processed: " + message , out )
assertThat ( result , is ( nullValue ( ) ) )
assertThat ( serverHelper . establishedServerSession . getCipherSuite ( ) , is ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"column 1\\",\\"nullable\\":true}]}]" , content )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
Assert . assertEquals ( "Charset " + entry . getKey ( ) + " impl broken" , expectedString , sb . toString ( ) )
assertEquals ( expectedMessage , actualMessage )
assertNull ( pointSymbolizer . getGraphic ( ) )
assertArrayEquals ( new short [ ] { 0 } , ArraysUtil . quickSortP ( target ) )
assertTrue ( isValid )
assertNotNull ( result )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertThat ( total , is ( 24 ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertThat ( connection . getConnectTimeout ( ) , is ( 0 ) )
assertThat ( decorated , is ( object ) )
assertNotNull ( c )
Assert . assertNull ( cookie . getExpiryDate ( ) )
assertEquals ( expected , query . n1ql ( ) )
assertEquals ( "String" , decl . getTypeImage ( ) )
connection . assertBufferEndsWith ( "foo -l 12 -h 20" + Config . getLineSeparator ( ) )
assertTrue ( validator . isValid ( null , null ) )
assertTrue ( capacity . allowsWorking ( ) )
Assert . assertEquals ( d2 , d , 0 )
assertEquals ( expectedValue , expression . evaluate ( record ) )
assertEquals ( lastValue , "EndNode1" )
assertEquals ( 2 , connection . createChannel ( ) . getNumber ( ) )
assertTrue ( crateTemplate . get ( entity . getId ( ) ) == 2L )
assertThat ( frankResponse , is ( equalTo ( endpointResponseBody ) ) )
assertEquals ( Collections . emptyMap ( ) , gaz . getAdditionalData ( HELLO ) )
assertEquals ( "abcdefghijklmnopqrstuvwxyzXYZ" , x )
assertEquals ( TranspositionTableStatus . sufficientRetrieveMoveList , eval . status )
assertEquals ( Money . of ( 100 , "USD" ) , money . getAmount ( ) )
assertTrue ( eventTriggered [ 0 ] )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertGallery ( gallery )
Assert . assertEquals ( ImportConfirmAction . SUCCESS , action . execute ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , expectedQuery ) )
assertEquals ( "CONTAINER_LOAD_BALANCER;Paul=2;Gid=3;username=paul;;;" , caveat )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertThat ( matchingIndexes , is ( 1L ) )
assertThat ( target . parse ( ) , is ( false ) )
assertThatSql ( query , is ( "SELECT nodes.col1,nodes.col2 FROM table1 AS nodes INTERSECT ALL SELECT edges.col3,edges.col4 FROM table2 AS edges" ) )
Assert . assertEquals ( value , 600.0 )
assertNotNull ( sw3 )
Assert . assertEquals ( new Long ( Long . MIN_VALUE ) , _c . convert ( "-9223372036854775808" ) )
assertEquals ( expected , actual )
assertThat ( fetchedUuid , is ( equalTo ( uuid ) ) )
assertNotNull ( handler . getSchemaLocation ( "http://cxf.apache.org/binding/coloc" ) )
assertOut ( "do\\n  a++;\\nwhile (a > b);" )
assertFalse ( valid )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
tester . assertErrorMessages ( new String [ ] { localization ( UserListPage . class , "userExistError" ) } )
assertOut ( "var /** @type {Array.<string>} */ a = new (org.apache.royale.utils.Language.synthVector('String'))('Hello', 'World')" )
Assert . assertEquals ( 2 , fileCtr )
assertEquals ( expected , sendAndCaptureBatch ( batch ) . getPoints ( ) . get ( 0 ) )
Assert . assertEquals ( "SELECT CEILING(1.23);" , text )
assertEquals ( expected , actual )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WAjaxControlRenderer )
assertEquals ( "Message: [Tim]" , ResponseBodyInterpolator . interpolate ( "Message: [request.body]" , req ) )
Assert . assertEquals ( protocolo , consultaRetorno . getProtocolo ( ) )
assertTrue ( project . equals ( project ) )
assertTrue ( result . length ( ) > 0 )
assertEquals ( "v2" , repr )
assertEquals ( "Generated inclusion term should match 'term'" , inclusionTerms . get ( 0 ) , "term" )
assertTrue ( node . getNodeType ( ) == NodeType . DOCUMENT )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( "0xf9a0e0f0a0c0" , KeyPairUtil . hexEncodedKey ( data ) )
assertRoundtrip ( document )
assertThat ( subStr . contains ( testString , testSubString ) , is ( true ) )
assertFalse ( equal )
assertTrue ( subject . isExportForcedSubtitlesOnly ( ) . get ( ) )
assertEquals ( 2 , result . size ( ) )
assertThat ( "cron is not null" , cron != null )
assertThat ( result , contains ( v_121 , v_122 , v_11 ) )
arrays . assertStartsWith ( description , actual , null )
assertEquals ( "summaryDataName" , MetricsLevel . SUMMARY , scope . getMetricsLevel ( "summaryDataName" ) )
assertEquals ( NoProcessorsWroManagerFactory . class , actual . getClass ( ) )
assertEquals ( data , new String ( bytes , "UTF-8" ) )
assertEquals ( 204 , response . getStatus ( ) )
assertTrue ( isEqual )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertEquals ( 3.14 , result , 0.000001 )
assertThat ( b . getValue ( ) , equalTo ( "Value" ) )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getStart ( ) , route ) , 0.01 )
Assert . assertEquals ( "DrainBuffers should have been invoked" , start , cache . drainStatus )
assertDefaultPorts ( DEFAULT_MONITORING_API_PORT + offset , DEFAULT_MONITORING_API_PORT + offset )
Assert . assertFalse ( ret . isEmpty ( ) )
Assert . assertFalse ( "Authenticated" , authenticated )
assertEquals ( message , MessageType . CON , receivedMessage . getMessageType ( ) )
assertEquals ( Event . class , eventClass )
assertEquals ( 4 , count )
assertThat ( errors , hasSize ( 0 ) )
assertSame ( expected , crest . merge ( config , map ) )
assertDirectories ( fsRootPath , new File ( fsRootPath , "logs" ) , new File ( fsRootPath , "logs/logs.log" ) )
assertEqualHQL ( "allen AND MARRIED OR AGE OR tree" , sb . toString ( ) )
assertEquals ( 3 , entriesBeforeRemove . size ( ) )
assertNotNull ( result )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
assertEquals ( displayer . isRefreshOn ( ) , false )
assertEquals ( "Translation failed" , TransportException . class , pelopsException . getClass ( ) )
assertEquals ( 500 , page . getWebResponse ( ) . getStatusCode ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertThat ( secretKeySpec , is ( sameInstance ( secretKey ) ) )
assertEquals ( "dois decilh玫es de inteiros" , actual )
assertIsOnlyOneElementWithDetails ( elements , "h1" , "must:descendant" , $ . driver ( ) . get ( ) instanceof WebDriver ? null : "" )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertTrue ( complete . get ( ) )
assertEquals ( "SRID=4326;POINT (+12 11)" , internalResultSet . getString ( 1 ) )
context . assertEquals ( ERROR , replyBody . getString ( STATUS ) )
assertEquals ( CredentialsProviderFactory . FS , actionConf . get ( MRJobConfig . MAPREDUCE_JOB_CREDENTIALS_BINARY ) )
assertEquals ( 0 , service . getMessages ( ) . size ( ) )
assertEquals ( MyClass . class , copy . getClass ( ) )
assertNonNullTaint ( taintedInt )
assertEquals ( "KLD" , booster . get ( 0 ) . getCode ( ) )
assertEquals ( "hostname" , getLoggingContextHostnameProperty ( ) )
assertEquals ( "Hello Camel Rocks" , response )
assertFalse ( fixture . hasSubscriptionId ( ) )
assertFalse ( matcher . match ( msg , rule ) )
assertEquals ( expecting , found )
assertEquals ( "geo point mapper serialization is wrong" , expected , actual )
assertEquals ( in , out [ 0 ] )
assertTrue ( v instanceof PactInteger )
Assert . assertEquals ( 5 , doc . get ( new Path ( "arr.5" ) ) . size ( ) )
assertNotNull ( object )
assertThat ( filled , is ( "/clients/my/path/to/file" ) )
Assert . assertEquals ( word , d_dict . sequence ( i ) )
assertEquals ( 0 , historyService . createHistoricJobQuery ( ) . jobDefinitionKey ( JOB_DEFINITION_KEY ) . count ( ) )
assertThat ( markdown , containsString ( tableEntry ( "`myList`" , "Array" , "" ) ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertEquals ( Status . PASSED , result . getStatus ( ) )
assertThat ( "null should be replaced" , result , is ( true ) )
Assert . assertTrue ( checkForSymbolicLink ( target ) )
Assert . assertEquals ( CheckResult . SUBMIT_FAILED , checkResult )
assertEquals ( "limit=10" , query . toString ( ) )
Assert . assertEquals ( expectedPeriod , period )
assertTrue ( relExp <= absExp )
assertTrue ( GenericTypeReflector . equals ( expected , ClassUtils . getCommonSuperType ( Arrays . asList ( t1 , t2 ) ) ) )
assertNotNull ( cl )
assertEquals ( "[INFLECTEDFORM121, INFLECTEDFORM122]" , Arrays . toString ( state . toFinalString ( null ) ) )
assertThat ( calvalusProcessor . getName ( ) , equalTo ( "Idepix.Water" ) )
assertFalse ( hasPermission )
Assert . assertNotNull ( result )
context . assertNotNull ( ip )
assertFalse ( loader . load ( "scrypt" , true ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertNotNull ( down . getException ( ) )
assertEquals ( "Deltas do not match" , deltaBefore , deltaAfter )
Assert . assertFalse ( dataVersion . equals ( other ) )
assertAnnotationCompletions ( "@Value(\\"#{<*>}\\")" , "@Value(\\"#{<*>}\\")" , "@Value(\\"#{<*>}\\")" , "@Value(\\"#{<*>}\\")" )
assertEquals ( "postConstruct() method should execute correctly" , 123 , testClass . getPostConstructMethod ( ) . getArguments ( ) [ 0 ] )
assertEquals ( expResult , result )
assertEquals ( 5 , filteredTables . size ( ) )
assertThat ( digits , matchesRegularExpression ( "[0-9]" ) )
assertNull ( result )
context . assertIsSatisfied ( )
assertEquals ( "1 value1 value2\\n\\n" , drl )
assertThat ( arguments . getResources ( ) , hasSize ( 1 ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( 0L , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) , 0 )
Assert . assertNull ( userId )
Assert . assertEquals ( "Pull Request: GitHub" , Iterables . get ( branches , 0 ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "error.exceededMaxLengthOfField" ) )
assertEquals ( translation , result )
assertTrue ( StoreParams . sameValues ( p , pLoc ) )
assertEquals ( Arrays . asList ( "ok" ) , list )
assertTrue ( response . getGeneratedKeys ( ) . size ( ) == 5 )
assertEquals ( 5 , saga . getState ( ) )
assertFalse ( server . isAlive ( ) )
assertNotNull ( cf )
arrays . assertStartsWith ( description , actual , sequence )
assertThat ( "pattern=" + pattern + " matches string=" + string , pattern . matches ( string ) , is ( true ) )
assertEquals ( jq ( ".zswidget-chart" ) . length ( ) , 1 )
assertions . doesNotContain ( value , index )
assertEquals ( combinationsExpected , result )
Assert . assertNotNull ( testBean )
assertNotNull ( Deencapsulation . getField ( Deencapsulation . getField ( Deencapsulation . getField ( Blob . class , "blob" ) ) , "blob" ) )
Assert . assertTrue ( Math . abs ( now . getTime ( ) - n . getTime ( ) ) < 500 * 1000 )
assertEquals ( text , male . getText ( ) )
Assert . assertNotNull ( list )
assertEquals ( "http://test.com/test1" , parser . getResource ( TEST1_PATH ) . toString ( ) )
TestUtils . assertEquals ( anexo , anexoModificado )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( File . readAllToString ( "tmp/testBegin.txt" ) , "1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n1.1\\n
assertThat ( "event with unknown header" , event , nullValue ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertThat ( transformed , equalTo ( formattableTableAsString ) )
assertEquals ( expected , actual )
assertOutput ( "a" )
assertEquals ( value , returned )
assertTrue ( matcher . matches ( context ) )
assertSame ( object , mFast . get ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 7 , 7 )
assertEquals ( expected , actual )
assertTrue ( setCommands . pop ( ) )
Assert . assertTrue ( responses . size ( ) == 40 )
Assert . assertEquals ( "hello bob" , bean . hello ( "bob" ) )
assertEquals ( input , output )
assertEquals ( "浣�濂�" , firstStatus . getText ( ) )
assertTrue ( drl . contains ( "this > 10\\nthis > 11\\nthis > 12\\nthis > 13\\nthis > 14\\nthis > 15\\nthis > 16\\nthis > 17\\nthis > 18\\nthis > 19\\nthis > 20\\nthis > 21\\nthis > 22\\nthis > 23\\nthis > 24\\nthis > 25\\nthis > 26\\nthis > 27\\nthis > 28\\nthis > 29\\nthis > 30\\nthis > 31\\nthis > 32\\nthis > 33\\nthis > 34\\nthis > 37\\nthis > 38\\nthis > 39\\nthis > 40\\nthis > 41\\nthis > 42\\nthis > 43\\nthis > 44\\nthis > 45\\nthis > 47\\nthis > 48\\nthis > 49\\nthis > 50\\nthis > 51\\nthis > 56\\nthis > 58\\nthis > 58\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56\\nthis > 56
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( "Failed to match with compatible IPv6 address." , match )
assertEquals ( Collections . singletonList ( author2 ) , submissionSet . getAuthors ( ) )
assertNotNull ( info )
assertEquals ( withLabel , mi1 )
assertFalse ( Files . exists ( path ) )
assertEquals ( expected , result )
assertThat ( duration . plus ( Duration . ofNanos ( 1000000L ) ) , equalTo ( TimeDuration . ofNanos ( 0.5 ) ) )
Assert . assertTrue ( "Should be displaying an error page" , driver . getPageSource ( ) . contains ( ERROR_STRING ) )
assertNotEquals ( b3a , b3b )
Assert . assertTrue ( tags . size ( ) == 0 )
assertEquals ( brands , brandsIterative )
assertEquals ( DataStatus . VOID , empty . getSternGroundSpeedStatus ( ) )
assertTrue ( visitor . matching )
assertEquals ( "a         - desc" + System . lineSeparator ( ) + "b            - desc" , output . toString ( ) . trim ( ) )
assertEquals ( "Invalid binary extracted value" , TEST_BYTES1 , binary . get ( ) )
assertTrue ( hrip . compareTo ( hric ) > 0 )
assertEquals ( "PHRASE" , reversedString )
assertNotNull ( "First gene exists and it must be returned" , transcript )
assertThat ( result , is ( "123" ) )
assertSame ( row , rowSet . getRowWait ( 1 , TimeUnit . SECONDS ) )
assertEquals ( 1 , repositoryService . createDeploymentQuery ( ) . count ( ) )
assertTrue ( url2 == url1 )
assertEquals ( "3860" , this . banco . geraCodigoDeBarrasPara ( this . boleto ) . substring ( 5 , 9 ) )
runner . assertValid ( service )
Assert . assertEquals ( "2016-11-25" , formatted )
Assert . assertTrue ( cliFlags . apply ( bkFlags , new String [ ] { } ) )
assertNotNull ( containerDetail )
assertEquals ( factor * index , sum )
assertObjectEquals ( "{type:'array',items:{type:'object',additionalProperties:{type:'object',additionalProperties:{type:'object',properties:{f1:{type:'string'}}}}}}}" , s . getSchema ( BeanList2d . class ) )
assertSame ( fieldVar , result )
assertEquals ( false , result )
assertEquals ( "6 灏��� 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
Assert . assertNotNull ( asiento )
assertThat ( products , hasItem ( new Product ( "The Hobbit" , "The Hobbit" ) ) )
assertTrue ( tasks . size ( ) == 10 && tasks . get ( 0 ) . getId ( ) == 13 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
Assert . assertEquals ( writtenInt , readBackInt )
Assert . assertEquals ( "hello" , result )
assertEquals ( mockedIotHubListener , listener )
assertTrue ( defaultInstance == ValidationBatchSummaryImpl . DEFAULT )
assertTrue ( model . getGroups ( ) . isEmpty ( ) )
assertFalse ( PojomatorFactory . makePojomator ( Simple1 . class ) . doEquals ( Simple1 . class , Simple2 . class ) )
assertEquals ( expectedMatches , result )
assertEquals ( path , "/Users/anyang/Desktop/jacoco/sum/jboss-5.0.1.GA\\\\rasp\\\\..\\\\bin\\\\run.bat" )
assertNotNull ( solver )
assertEquals ( p , new Percentile ( ) . multiply ( p . multiply ( i ) ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter name=\\"name\\" value=\\"value\\"/>" + "</Parameter>" , elem . toXml ( ) )
assertEquals ( 0 , response . getPersonInformationStructure ( ) . size ( ) )
assertThat ( sum , is ( 1 ) )
assertSame ( thrownException , result )
Assert . assertEquals ( "selenium.keyPress(\\"id=78-uyt\\", \\"231\\");" , result )
assertEquals ( Arrays . asList ( 5 ) , numbers )
assertEquals ( hash , "" )
assertThat ( testOutcome . getPendingCount ( ) , is ( 1 ) )
assertEquals ( actual . getSchemaDependencies ( ) . get ( "foo" ) , TrueSchema . builder ( ) . build ( ) )
assertEquals ( svgImage , defaultEditorAdapter . getIconSVGImage ( ) )
assertEquals ( false , getMoveDownAction ( ) . isEnabled ( ) )
assertEquals ( pc , chip8 . getPC ( ) )
assertEquals ( uri . toString ( ) , expected )
assertEquals ( repo , repo . getBarendRevision ( ) )
assertions . isNotGreaterThan ( expected )
assertEquals ( expectedScript , observedScript )
assertNotNull ( taskService . createTaskQuery ( ) . taskDefinitionKey ( "userTask2" ) . singleResult ( ) )
assertThat ( share . getHours ( ) , hasHours ( 4 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
assertEquals ( 28 , cal . get ( Calendar . DATE ) )
assertNotNull ( user )
assertEquals ( 1000.0 , vRoute . getDepartureTime ( ) , 0.01 )
assertThat ( violations . size ( ) , is ( 0 ) )
Assert . assertEquals ( mysqlAffectRow , andorAffectRow )
Assert . assertEquals ( Boolean . TRUE , JsfUtils . isNewMessage ( existingFacesMessage , messageToCheck ) )
Assert . assertEquals ( "[City, Country, Name]" , resultList . toString ( ) )
assertEquals ( goldenResponse , responseObserver . firstValue ( ) . get ( ) )
assertEquals ( null , actual . getDisplayName ( ) )
assertEquals ( "2" , r )
context . assertIsSatisfied ( )
Assert . assertTrue ( FastMath . abs ( error ) > 0.1 )
assertEquals ( NOT_DECODED , object , new CoordTransform ( decoder ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( expected , actual )
assertEquals ( expected , key . toString ( ) )
assertInRange ( b , BigInteger . ZERO , limit )
assertEquals ( 0 , aNumber . bitLength ( ) )
assertThat ( restService . getSearchHandler ( "v1/concept" , parameters ) , is ( nullValue ( ) ) )
assertMessages ( "println" , 1 , "print_printf_locale" )
assertNotNull ( key )
assertTrue ( subject . isDirsEmpty ( ) )
assertEquals ( RemoteAPIController . VALID_OAUTH_CONNECTION , connectToAPI )
Assert . assertNotNull ( savedSearchDashlet )
Assert . assertEquals ( "abc" , qei . getResult ( ) )
assertDatasetOk ( ds )
assertEquals ( ex , ex2 )
assertTrue ( "basicInterval1 should be greater than basicInterval2." , bstc . compare ( basicInterval1 , basicInterval2 ) > 0 )
assertEquals ( 200 , response . getStatus ( ) )
Assert . assertEquals ( ECHO_STRING , outMessage )
assertArrayEquals ( objects , recordList . toArray ( ) )
assertEquals ( expected , result , .000001 )
assertTrue ( requestOk )
assertTrue ( v8 . getBoolean ( "caught" ) )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/job/events/jobs/executions" ) , is ( GsonFactory . getGson ( ) . toJson ( new JobEventRdbSearch . Result < > ( 0 , Collections . < JobExecutionEvent > emptyList ( ) ) ) ) )
assertNotNull ( dw . getAndTag ( mongoQuery ) )
Assert . assertEquals ( "Value is incorrect" , map ( TIME_STRING , "test" ) , value )
Assert . assertEquals ( "SELECT ACOS(1.0001);" , text )
assertions . isNotEqualTo ( expected )
assertEquals ( 0 , findings . size ( ) )
assertSame ( "Same FileLocator" , locator , locator2 )
assertEquals ( "Select inner field A innerAlias FROM inner inner inner1 " + "WHERE innerFieldA.INNER_FIELD_A.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_B.INNER_FIELD_
assertTrue ( original . equals ( copy ) )
assertEquals ( expectedJavaCommand , actualJavaCommand )
assertOneSpan ( )
assertEquals ( tail . getMissing ( 4 ) , new HashSet < Long > ( Arrays . asList ( 4l , 5l ) ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertEquals ( id , id )
assertEquals ( new JSONObject ( "{\\"a\\":\\"b\\",\\"c\\":\\"c\\"}" ) . toString ( ) , obj . getJSONObject ( "defaultsTest" ) . toString ( ) )
assertEquals ( DeviceOperations . DEVICE_OPERATION_TWIN_UPDATE_REPORTED_PROPERTIES_RESPONSE , msg . getDeviceOperationType ( ) )
assertEquals ( "select cat_\\nfrom Cat cat_\\n  inner join cat_.mate on cat_.mate.alive" , serializer . toString ( ) )
assertNotEquals ( getSettings1 , getSettings2 )
assertEquals ( "java.lang.String" , new Path ( "java.lang.String" ) . getFile ( ) . toString ( ) )
Assert . assertEquals ( resultExpected , result )
Assert . assertEquals ( 10 , result . size ( ) )
arrays . assertContainsExactlyInAnyOrder ( info , actual , arrayOf ( 6f , 10f , 8f ) )
assertResultSet ( res )
assertSame ( expected , actual )
assertThat ( representation . getString ( "content-type" ) , is ( "application/json; charset=utf-8" ) )
Assert . assertEquals ( "select * from student order by name,id,school,school asc ,STUDENT.ID asc ,STUDENT.SCHOOL asc " , getSql0 ( node ) )
assertEquals ( "" , result )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE , true , 6 ) , is ( "1 jour, 0 heure et 4 minutes" ) )
assertEquals ( p . parse ( "-1/2*3/5*9*9/3^2/4/6*7 + 1^2/3 - 3 - 4*4*5/8*9/6*9/3^2/4*7*6^2" ) , new Rational < > ( Z , Z . valueOf ( - 85879 ) , Z . valueOf ( 240 ) ) )
assertEquals ( "\\"\\"" , builder . toString ( ) )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertEquals ( 29 , i )
assertThat ( result , is ( jsonBoolean ( false ) ) )
assertEquals ( DummyDrawHandler . drawCircleToString ( 1 , 2 , 3 , 4 , null , null , null ) , drawHandler . getLastDrawCall ( ) )
assertEquals ( "" , acl . getOwner ( ) )
assertEquals ( 0 , storedEvents . size ( ) )
assertEquals ( 1 , externalTasks . size ( ) )
assertEquals ( "at 16:00:00pm, on the 2nd day in March, May and December" , descriptor . describe ( cron ) )
assertEquals ( "/var/tmp" , settings . getBaseDirectory ( ) )
assertThat ( retrieveSize , is ( 0 ) )
Assert . assertEquals ( "stuff and some more stuff" , result )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( "Failed to generate if-else-if-else block using no rhs" , IF_ELSEIF_ELSE_BLOCK_NO_RHS_NESTED , s )
assertTrue ( exceptionCaught )
assertNull ( sliName )
assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "Pass is not salvied" , true , evaluatedPassword . equals ( "pass" ) )
assertEquals ( expectedResult , result )
mock . assertIsSatisfied ( )
assertEquals ( "Test if value red from file equals value stored" , mlDouble , content . get ( name ) )
assertEquals ( "java.lang.RuntimeException" , val )
assertThat ( bundle . getEntry ( "Medication/1" ) , contains ( ( IBaseResource ) new PubMedMedicationItem ( "Medication/1" ) ) )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
assertNull ( object )
assertEquals ( HouseColor . ACCEPT , house . getHouseColor ( ) )
Assert . assertEquals ( expected , o )
assertOut ( "/**\\n * @export\\n * @param {number} p1\\n * @param {number} p2\\n * @param {number=} p3\\n * @param {number=} p4\\n * @return {number}\\n */\\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(p1, p2, p3, p4) {\\n" + "  p3 = typeof p3 !== 'undefined' ? p3 : 3;\\n" + "  p4 = typeof p4 !== 'undefined' ? p4 : 4;\\n" + "  return p1 + p2 + p3 + p4;\\n}" )
assertThat ( db1 , is ( not ( sameInstance ( db2 ) ) ) )
assertEquals ( "{22=a, 11=bb, 231=cc, 1231=cc}" , res . toString ( ) )
assertions . doesNotContain ( value , index )
assertPresent ( session , label )
assertEquals ( "param1=" , encodedParams )
assertEquals ( Boolean . TRUE , result )
Assert . assertEquals ( "2008|骞�|搴�|��|浜�|璧���|��" , words )
assertTrue ( rule . matches ( "^\\n" ) )
assertThat ( found , equalTo ( expected ) )
assertEquals ( "http://example.com/fhir/Patient/123/_history/2333" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertEquals ( 1 , Owner . count ( ) )
assertTrue ( failureEventListener . isCalledOnce ( ) )
assertThat ( ( Long ) ms . get ( "aaa" ) , is ( 1L ) )
Assert . assertTrue ( lastElementIsSame ( store , new WeightedObservedPoint ( w , x , y ) ) )
assertNotNull ( password )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Enqueue task=\\"body\\" timeout=\\"1\\">body</Enqueue>" , elem . toXml ( ) )
assertEquals ( "SELECT * FROM g WHERE foo = g" , e . get ( "foo" ) )
Assert . assertEquals ( "The spanish fox" , shell . expandVariableSubstitutes ( "The ${hiveconf:origin} fox" ) )
JSONAssert . assertEquals ( expected , result . getResponse ( ) . getContentAsString ( ) , false )
Assert . assertEquals ( expected , udf . evaluate ( args ) )
Assert . assertEquals ( gen . generateInchi ( ac ) . getInChI ( ) , "InChI=1S/Li" )
Assert . assertTrue ( returnT . getCode ( ) == ReturnT . SUCCESS_CODE )
Assert . assertNotNull ( trainer . train ( eventStream ) )
assertThat ( book , is ( equalTo ( otherBook ) ) )
Assert . assertNotNull ( registerResponse )
Assert . assertEquals ( defaultProducts . length - 1 , selector . getProductCount ( ) )
assertPathMatchForExpected ( expected )
assertNotNull ( resultMap )
Assert . fail ( "Should have failed due to missing input" )
assertAccessorsCorrect ( collapsible , "level" , null , "Accessors for collapsible component must be accessible" )
assertThat ( defaultName , is ( "Zuid-Holland (region, Netherlands)" ) )
assertEditorClosed ( )
assertTrue ( Arrays . equals ( protocols , configurable . getEnabledProtocols ( ) ) )
assertEqualDoubleArrays ( pyplus , plus , epsilon )
assertEquals ( "straks" , t . format ( date ) )
assertEquals ( 0 , bucketContent . size ( ) )
assertThat ( output , containsString ( "Templates found:" ) )
assertEquals ( CodeableConcept . class , roleField . getClass ( ) )
Assert . assertEquals ( job , RandomUtils . nextItem ( jobs , RandomNumberGeneration . getRandom ( ) ) )
assertEquals ( "" , result )
assertEquals ( 2 , books . size ( ) )
assertTrue ( true )
assertMediaFolderEquals ( mediaFolder , newMediaFolder )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 1 ) . exclude ( 12 ) . create ( ) ) )
assertThat ( converter . toWritableObject ( ) , is ( ( Object ) new StringWritable ( "hello" ) ) )
assertEquals ( 1001 , assignedClientId )
assertEquals ( "GBP 3.57" , test . toString ( ) )
assertEquals ( "filterDisplayName" , parameterName )
assertEquals ( "annotation:hello" , hello )
assertNotNull ( ep . getBinding ( ) )
assertTrue ( onCloseLatch . await ( 5 , TimeUnit . SECONDS ) )
assertNotNull ( colegio )
assertOut ( "return true" )
assertTrue ( httpRequestMethod . getFollowContentRedirects ( ) )
assertIsAborted ( tx )
assertResultsEqual ( results , 4L )
assertXMLEqual ( new ResourceUtil ( UNSTAR ) . getContent ( ) , sw . getBuffer ( ) . toString ( ) )
Assert . assertNull ( result )
assertThat ( countRowsInTable ( "PERSON" ) , is ( before ) )
assertEquals ( 255 , mask [ indY ] [ indX ] )
assertThat ( sut . getImage ( ) , equalTo ( "bar@sha256:12345" ) )
assertEquals ( 0 , indexEntries . size ( ) )
assertThat ( lastEntry . isAlarm ( ) , is ( true ) )
assertNull ( principal )
Assert . assertEquals ( "�戒�灞�" , words )
assertEquals ( expected , actual )
assertEquals ( WRONG_NUMBER_OF_ANNOTATIONS_PARSED , computeTotalNumberOfWarnings ( createJavaParsers ( ) ) - 2 , annotations . size ( ) )
assertEquals ( "Joe" , qualifier )
assertThat ( time . getTimeRelativeTo ( timeRelativeTo ) , equalTo ( dateFormat . parse ( "2013-Jan-18 4:55:12.27" ) . getTime ( ) ) )
Assert . assertEquals ( SIMPLE_RETURN_CODE . SUCCESS , check . getErrorType ( ) )
assertDateEquals ( r , t . plus ( d ) )
assertThat ( result , contains ( "Hello world" , "Hel" , "lo " , "wor" , "ld" ) )
assertFalse ( underTest . validate ( "student" , idsToValidate ) . containsAll ( idsToValidate ) )
assertEquals ( belongsToEntity , returnedEntity )
assertNotNull ( model )
assertTrue ( "Included JARs as native dependencies, but shouldn't" , nativeDependencies . isEmpty ( ) )
Assert . isTrue ( true )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  var /** @type {Function} */ f = org.apache.royale.utils.Language.closure(this.http_$$ns_apache_org$2017$custom$namespace__b, this, 'http://ns.apache.org/2017/custom/namespace::b');\\n  c(f);\\n}" )
Assert . assertEquals ( 12. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 1 ) , route ) , 0.01 )
assertEquals ( 401 , resGetAll . getStatus ( ) )
assertEquals ( expected , result )
assertEquals ( 1 , testParseJsonObject . getValue ( context ) )
assertTrue ( m . find ( ) )
assertEquals ( values . size ( ) , 3 )
assertEquals ( 1 , results . length )
assertTrue ( true )
assertThat ( slider . getValue ( ) , is ( 1.2345 ) )
assertTrue ( "The first component of the split panel should be a split panel" + " containing the text 'Label 1.2'. Actual text: " + buttonText , "Label 1.2" . equals ( buttonText ) )
Assert . assertEquals ( "[{\\"name\\":\\"name1\\",\\"age\\":1},{\\"name\\":\\"name2\\",\\"age\\":2}]" , str )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( expResult , result )
assertTrue ( "child not in subtree" , _guide . isInSubtree ( child ) )
assertTrue ( underTest . validateGroupDoesNotContainItself ( "repositoryUnderTest" , config ) )
assertTrue ( "Entries found: " + entries , entries . isEmpty ( ) )
assertThat ( toUnqualifiedVersionlessIds ( myAppointmentDao . search ( params ) ) , containsInAnyOrder ( patId , apptId ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , httpResponseConsumer . getEntry ( getEntryRequest ) . getResponseStatus ( ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Play/" , confId , memberId )
assertExcludedImplicitly ( node )
assertEquals ( mailboxSize , testResults . highest . get ( ) )
assertThat ( dur . print ( Locale . US ) , is ( "P4{WEEK_BASED_YEARS}1M" ) )
assertTrue ( con . isAuthenticated ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertThat ( actual , is ( "one" ) )
assertFalse ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertThat ( cell . asHtml ( ) , is ( equalTo ( "Link<a href='http://localhost'>http://localhost</a>" ) ) )
assertEquals ( 3 , position )
Assert . assertTrue ( pss . toString ( ) . contains ( "<http://example>" ) )
assertEquals ( true , dt . intValue ( ) == 10 && dt . stringValue ( ) . equals ( "John" ) )
assertEquals ( result . getName ( ) , "newValue" )
runner . assertAllFlowFilesTransferred ( PutHBaseJSON . REL_FAILURE , 1 )
Assert . assertEquals ( dim . getNumDimensions ( ) , 100 )
Assert . assertEquals ( OBJECT , clone )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertEquals ( false , actual )
assertEquals ( orig , patch . getEntities ( ) )
assertEquals ( testData , result )
assertFalse ( violation )
assertTrue ( message != null )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + fileName , sourceFolder + "cmp_" + fileName , destinationFolder , "diff_" ) )
assertEquals ( "Template not found" , output )
assertNotNull ( result )
assertOut ( "var /** @type {boolean} */ a = true" )
assertThat ( target . matchExactly ( flow ) , is ( true ) )
assertEquals ( 10 , pageService . findMaxPageReferenceIdAndReferenceTypeOrder ( API_ID , PageReferenceType . API ) )
assertNull ( MultiParts . getFileName ( paramConfig ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 10.0 , Capacity . divide ( cap1 , cap2 ) , 0.001 )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_FAILURE , 1 )
assertEquals ( "n1" , df . format ( new Date ( ) ) )
assertThat ( response . toString ( ) , is ( "" + "inet6num:        ::0\\n" + "abuse-mailbox:  abuse@me.now\\n" ) )
assertEquals ( 0.5 , p , 0.001 )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertSame ( authenticated , helperSpy . getAuthObj ( ) )
assertEquals ( "PassWord" , command . getPassword ( ) )
assertCounterCount ( "Millstone" , CounterType . TIME , 1 )
assertEquals ( Arrays . asList ( "A" , "B" , "C" , "D" ) , results )
assertEquals ( "http://pac4j.com/cas/login" , result )
assertNotNull ( result )
assertTrue ( Arrays . equals ( expected , actual ) )
assertEquals ( 9 , actualConfig . getExecutionHints ( ) . get ( "priority" ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( "bar" , bar . get ( ) )
assertFalse ( watch . hasChildren ( "/a/a" ) )
Assert . assertTrue ( "The test file " + filename + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertThat ( query . getEncodedFilter ( ) , is ( encodedFilter ) )
assertSanctionMatched ( match )
Assert . assertNotNull ( chf1 )
assertArrayEquals ( expected , IOUtils . toByteArray ( new ARC4Engine ( ) . encryptBytes ( new ByteArrayInputStream ( "ChuckNorris" . getBytes ( StandardCharsets . UTF_8 ) ) , "ABCDE" . getBytes ( StandardCharsets . UTF_8 ) ) ) )
assertObjects ( RoleType . class , NUMBER_OF_GENERATED_EMPTY_ROLES + NUMBER_OF_GENERATED_DUMMY_ROLES + NUMBER_OF_ORDINARY_ROLES )
assertNotNull ( result )
assertNotNull ( result )
Helpers . assertJson ( json . toString ( ) , "{\\"key1\\":\\"value1\\",\\"key2\\":null,\\"key3\\":false}" )
assertEquals ( "Expect version not found" , version , verQueryVal )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
assertFalse ( user . isPresent ( ) )
assertEquals ( "xindex" , output )
assertEquals ( 2 , landingZone . size ( ) )
assertDtoAndMapConstructorAreSame ( 0 )
assertSame ( t . toLocalTime ( ) , LocalTime . NOON )
assertEquals ( "https://api.test.com/myapi/customer/1337" , expanded . toString ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertNull ( result )
assertTrue ( "Consent has been removed from Internet!" , ConsentUtils . retrieveConsent ( campaignRecord ) . isPresent ( ) )
assertThat ( classes , containsInAnyOrder ( ExampleClass . class , ExampleInterface . class , OtherClass . class ) )
assertEquals ( 12 , jpegBitsPerSample ( "MR2_UNC-J2KR.dcm" ) )
assertThat ( new PullRequestApproval ( Config . builder ( ) . requiredReviewers ( newArrayList ( "user1" , "user2" ) ) . requiredReviews ( 1 ) . build ( ) , utils ) . isPullRequestApproved ( pr ) , is ( false ) )
assertEquals ( "Agents Rebooted" , result )
assertThat ( domain . endsWithDomain ( ciString ( "n.s.0.200.193.193.in-addr.arpa" ) ) , is ( false ) )
assertThat ( converter , instanceOf ( EnumConverter . class ) )
assertTrue ( ex . isPrime ( 11 ) )
assertEquals ( Content . COMPANY , contentStore . getContent ( ) )
assertEquals ( "Generated names" , names , names . size ( ) )
Assert . assertNotNull ( antennae )
assertEquals ( expecting , found )
assertEquals ( prettyPrintJson ( readContent ( EXPECTED_ERROR_RESPONSE_WITH_TARGET_PATH ) ) , prettyPrintJson ( json ) )
assertTrue ( organizationResponse . object . getName ( ) . equals ( name ) )
assertEquals ( 2 , dashboardHistories . size ( ) )
assertNotNull ( connection )
assertFalse ( userCanBuildProject )
assertThat ( randomProxy , instanceOf ( ProxyObject . class ) )
assertEquals ( false , bm . isBitSet ( bitNumber ) )
assertTrue ( tchh . getWriteable ( ) )
Assert . assertFalse ( "Stopping a run should have failed" , pcClient . stopRun ( Integer . parseInt ( PcTestBase . RUN_ID ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( assertion , test )
assertThat ( subject . shouldProcess ( message ) , is ( false ) )
assertEquals ( "(12 (abc 34))\\n" , found )
assertEquals ( PERSON , grid . getItem ( PERSON ) . getComponent ( ) )
assertFalse ( filter . shouldInclude ( source , "some.property" ) )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
ctx . assertEquals ( "password authentication failed for user \\"blah\\"" , conn . getMessage ( ) )
assertNull ( descriptor . getConstraintsForClass ( UnknownMethod . class ) )
assertNotNullOrEmpty ( "Questions should never be null." , questions )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , resource . deleteConnection ( "Name" ) . getStatus ( ) )
assertEquals ( "Google" , iface . wd . getTitle ( ) )
assertEquals ( "{\\"resourceType\\":\\"Patient\\",\\"meta\\":{\\"tag\\":[{\\"system\\":\\"scheme\\",\\"code\\":\\"term\\",\\"display\\":\\"display\\"}]},\\"identifier\\":[{\\"system\\":\\"sys\\",\\"value\\":\\"val\\"}]}" , enc )
assertThat ( nbrOfStores , is ( 4 ) )
Assert . assertThat ( "response.statusCode" , response . getStatusCode ( ) , is ( 200 ) )
assertEquals ( correctAnswer , something )
assertTrue ( topic . getSubscribers ( ) . contains ( user ) )
assertTrue ( existentFile . exists ( ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( Type . INTEGER , cInfo . getType ( ) )
assertThat ( cut . getItems ( ) , hasItems ( item1 , item2 ) )
assertThat ( instance . matches ( message , matchers ) , is ( false ) )
assertThat ( other , LocalTimeMatchers . sameMinuteOfHour ( date ) )
Truth . assert_ ( )
assertNull ( polygonSymbolizer . getFill ( ) )
assertThat ( output ( outputDirectory , outputPath ) , equalTo ( resource ( outputPath ) ) )
assertEquals ( 4 , size )
Assert . assertEquals ( 0L , actual )
assertEquals ( expected , actual )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Integer" ) )
assertEquals ( 98 , dataCharacter . getValue ( ) )
assertSame ( name + " - mismatched enum values" , expected , actual )
assertEquals ( "(table)" , x )
assertEquals ( direct . length ( ) , proxied . length ( ) )
Assert . assertNull ( person . getPersonDateVoided ( ) )
assertNotNull ( httpStack )
assertThat ( webServer . getAddress ( ) . getHostName ( ) , equalTo ( "localhost" ) )
assertFalse ( capabilityMatcher . matches ( nodeCapabilities , requestedCapabilities ) )
assertEquals ( text , reply )
assertTrue ( contains ( "jcr:read" , permissions ) )
assertEquals ( "<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEmptyLinksOk ( linkNames )
assertEquals ( "Not NodeValue.equals()" , v1 , v2 )
assertEquals ( node , r . get ( "node" ) )
assertEquals ( "Json|JsonNode|JsonNode" , mustache . render ( loadJsonData ( ) ) )
assertEquals ( OutputChangeEvent . OUTPUT_EVENT . OUTPUT_DELETED , outputEvent [ 0 ] . getEvent ( ) )
ctx . assertEquals ( ex . getMessage ( ) , "someTopic" )
assertThat ( renderKitCaptor . getValue ( ) . getRenderKits ( ) , is ( Collections . < Object > emptyMap ( ) ) )
assertEquals ( 2 , count )
assertEqualsWithoutWhiteSpaces ( "color([0,0,0]) (model12)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 11 ) . create ( ) ) )
assertThat ( "should getInterested event" , subscriber . lastEvent ( ) , is ( GitHubEvent . ISSUESInterested ( ) ) )
assertFalse ( "Expected project name was not found." , jiraTracker . hasValidProjectName ( ) )
assertNotNull ( MessageConfiguration . fetcher ( "VAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertSame ( element , node . getElement ( ) )
assertEquals ( "Expected 0 results!" , 0 , count )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destFilename , sourceFolder + "cmp_copyFields06.pdf" , destinationFolder , "diff_" ) )
Assert . assertEquals ( 1 , spec . apply ( tasks ) . size ( ) )
assertNotNull ( PhoneNumber . reader ( "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( response . getAttachments ( ) . hasNext ( ) )
Assert . assertFalse ( isElementConsented )
assertEquals ( Optional . of ( new BigDecimal ( 1.2 ) ) , res )
assertEquals ( "src/test/resources/existing-readable.txt" , result . getName ( ) )
assertEquals ( "test1" , id . toString ( ) )
Assert . fail ( )
assertThat ( fetchCount ( ) , is ( 1L ) )
assertThat ( response . getPayloadAsString ( ) , is ( "TEST PAYLOAD" ) )
assertThat ( rendered , is ( "a..\\r\\n..bc" ) )
assertTrue ( errMsgs . isEmpty ( ) )
assertEquals ( "core" , route . getCell ( ) . getValue ( ) )
assertThat ( plugin . arg , is ( equalTo ( "hello" ) ) )
assertFalse ( "Reloading not detected" , detector . isReloadingRequired ( ) )
Assert . assertFalse ( InstanceValidationUtil . hasValidConfig ( mock . dataAccessor , TEST_CLUSTER , TEST_INSTANCE ) )
assertTrue ( diskInfo . isPresent ( ) )
assertEquals ( Status . OK , result )
files . assertHasContent ( someInfo ( ) , actual , expected , charset )
assertEquals ( "Testing rho: " , expectedRhoTwoStep , rho , 1E-3 )
assertThat ( pickupTruck1 , hasProperty ( "model" , equalTo ( "Big 10" ) ) )
assertThat ( underTest . read ( stream ) . size ( ) , is ( 0 ) )
assertThat ( actual , is ( expected ) )
assertEquals ( "JAXB Enum is not null" , JAXBContext . class , carType . getClass ( ) )
assertEquals ( "test/repo" , metadatas . get ( "/test/repo.metadata" ) . getName ( ) )
assertFalse ( isModifiable )
assertEquals ( String . class , schemaManager . getPropertyType ( ElementType . VERTEX , "property" ) . getClass ( ) )
assertEquals ( "Output order: " + outputOrder , exp , out )
assertEquals ( expectedAddress , gotAddress )
assertTrue ( Bytes . equals ( bytes1 , bytes2 ) )
assertNull ( event . getLocation ( ) )
assertThat ( actual . get ( "latest" ) , containsString ( "1.0.0" ) )
assertTrue ( 5.0f == d . asFloat4 ( ) )
assertEquals ( "" , result )
assertEquals ( "SQL92" , rootNode . getProperty ( StandardDdlLexicon . PARSER_ID ) )
assertFalse ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
assertEquals ( "Wrong key for root node" , "root" , engine . nodeKey ( root , null , handler ) )
assertResultSet ( res )
assertEquals ( template , test . build ( ) )
assertThat ( persons , equalTo ( expectedPersons ) )
assertEquals ( "hei2" , otherSet . iterator ( ) . next ( ) . getValue ( ) )
assertTrue ( job . waitForCompletion ( true ) )
assertThat ( examplesTable . asString ( ) , equalTo ( TABLE_AS_STRING ) )
assertEquals ( klass , YoutubeEvent . class )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
assertTrue ( fact . getValidators ( fooset ) . contains ( "foo" ) )
Assert . assertEquals ( "Max pool size should be between 0 and DEFAULT_MAX_POOL_SIZE" , 0 , maxSize )
assertNotSame ( jdbcStore2 , jdbcStore )
assertThat ( result . replaceAll ( "\\\\s+" , "" ) , equalTo ( expectedOutput . replaceAll ( "\\\\s+" , "" ) ) )
assertEquals ( "Parsing of double option does not match expected result." , PROPERTY_DOUBLE_EXPECTED , parseResult , 0.0 )
ReaderAssert . assertThat ( Conll2006Reader . class , Conll2006Reader . PARAM_SOURCE_ENCODING , "UTF-8" )
assertEquals ( 3 , missingNumber . missingNumber ( array ) )
assertEquals ( expected , actual )
assertThat ( auth . clone ( ) , is ( auth ) )
assertThat ( whoisObject . getAttributes ( ) , hasItems ( new Attribute ( "auth" , "MD5-PW $1$d9fKeTr2$Si7YudNf4rUGmR71n/cqk/" , "test" , null , null , null ) , new Attribute ( "auth" , "SSO person@net.net" ) , new Attribute ( "source" , "TEST" ) ) )
assertFalse ( processor . process ( entry ) )
assertThat ( activity . isFinishing ( ) , equalTo ( false ) )
assertEquals ( nativeToAscii ( ENCODED ) , nativeToAscii ( nvDecoded ) )
assertEquals ( documentId , options . documentId ( ) )
assertEquals ( expectedFeatures , tokens . get ( 0 ) . getAllFeatures ( ) )
Assert . assertEquals ( hash , 0 )
assertTrue ( "should receive messages" , handler . isCalledOnce ( ) )
assertEquals ( expectedCallback , testCallback )
assertEquals ( "x, y" , result )
Assert . assertEquals ( "{\\"PropertyInt16\\":111,\\"PropertyString\\":\\"TEST A\\"}" , resultString )
assertNotNull ( test )
Assert . fail ( "Cannot create metablocks with the same name." )
assertEquals ( "anotherValue" , values . get ( 0 ) )
Assert . assertEquals ( count + 1 , conectores . size ( ) )
assertFalse ( kbuilder . hasErrors ( ) )
assertEquals ( 0 , searcher . search ( query1 , 100 ) . totalHits )
arrays . assertContains ( description , null , array ( "Yoda" ) )
Assert . assertEquals ( 4 , result [ 0 ] )
assertEquals ( "Wrong count of classes." , 2 , getCountStatistic ( "countClasses" ) )
assertEquals ( columnInfoActualValue . toString ( ) , columnInfo . toString ( ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT * FROM A EXCEPT ALL SELECT * FROM B" ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
Assert . fail ( "Should have thrown an APIException" )
assertStatus ( 3 , expectedNumRows , expectedNumBytes , expectedReadBytes )
assertFalse ( rule . isVersionValid ( null ) )
assertEquals ( entry , result )
assertThat ( rs , equalTo ( expected ) )
assertOkAndNotNullResult ( resp )
assertTrue ( b )
assertLayerRefinedObjectClass ( objectClass , RESOURCE_DUMMY_PRIVILEGE_OBJECTCLASS_QNAME , ShadowKindType . ENTITLEMENT , "privilege" , LayerType . MODEL )
assertEquals ( TEST_REPORT_FORMAT , result . format )
assertFalse ( androidImpl . isSDCardEnoughSpace ( device , 0 ) )
validator . assertTestSuiteResults ( 2 , 0 , 0 , 0 )
assertThat ( CountingJob . ourCount , is ( 1 ) )
assertHelpLines ( "Option
assertResultIs ( 1L )
assertTrue ( "Path for removed property is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + propPath , containsPath ( listener , propPath ) )
assertEquals ( "protected final void blah(int count, MyThing t) throws FishException, FruitException" , signature )
assertThat ( clause . toString ( ) , is ( "(person)<-[:members]-(group)" ) )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
Assert . assertTrue ( result . next ( ) )
Assert . assertEquals ( 1 , count )
assertThat ( found , hasSize ( 0 ) )
assertEquals ( factIdentifier . getPackageWithoutClassName ( ) , "Test" )
assertThat ( path . getString ( NO_OP_ENCODER ) , is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../d/./{http://www.modeshape.org/1.0}e/../.." ) )
assertEquals ( count + 2 , session . from ( restriction ) . list ( restriction ) . size ( ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "1" , "2" , "3" , "4" ) ) )
assertArrayEquals ( data , bb )
assertTrue ( "queue size is 0" , ref . get ( ) . isShutdown ( ) )
assertNull ( t )
assertOut ( "var /** @type {Object} */ a = Object(\\"1\\")" )
assertTrue ( serializedDevice . contains ( symmetricKeySecuredDeviceAuthenticationJson ) )
assertEquals ( caption , widget . getText ( ) )
Assert . assertEquals ( basicRollup , r )
assertThat ( NF . nullNode ( ) , is ( sut ) )
assertEquals ( BUNDLE_URI + "profile/tavernaWorkbench/" + "processorbinding/Hello/" , uri . toASCIIString ( ) )
assertEquals ( resolvedAlerts . size ( ) , numAlerts )
Assert . assertEquals ( 1 , lambda . testCatchingException ( ) )
assertEquals ( expected , requestBody )
assertGetFails ( "1" , OntopiaRestErrors . MANDATORY_ATTRIBUTE_IS_NULL )
assertEquals ( testUrl , yamlSource . toString ( ) )
Assert . assertEquals ( count , countStructure . get ( ) )
assertResult ( session )
assertFalse ( returnedValue )
assertEquals ( "BadItem" , container . children . get ( 0 ) . text )
assertTrue ( pa . getId ( ) != null )
assertEquals ( assertion , log )
assertEquals ( 20 , sum )
assertFalse ( Files . exists ( ds ) )
Assert . assertEquals ( "Static fail" , "<html>static content</html>" , contentString )
assertEquals ( configMap , result )
assertThat ( underTest . passwordsMatch ( password , shiro1Hash ) , is ( true ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( expected , actual )
assertSame ( dataSource , factory . getDataSource ( descriptor ) )
assertEquals ( "1.23" , rp . toNumberParam ( ourCtx ) . getValue ( ) )
assertTrue ( p . getContent ( ) . size ( ) > 0 )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( service . postProcess ( "<pre>int good=2;[-code][-code]</pre>" ) , "<pre>int good=2;[-code][-code]</pre>" )
assertEquals ( multiKVFilter ( columnComparison ( CompareOp . EQUAL , A_STRING , B_STRING ) , TWO_BYTE_QUALIFIERS ) , filter )
assertNotNull ( streamMetaEntity )
Assert . assertTrue ( "did not get expected time" , timeVal > 0 )
assertThat ( "Color" , nodeData . getValue ( TermColor . class , "color" ) , is ( tf . createColor ( 0 , 128 , 0 ) ) )
Assert . assertArrayEquals ( "The data was not flushed" , address , cleanedOffset )
assertIndexedRecord ( typeDesc , indexedRecord )
assertEquals ( "\\n\\n" , paragraphs )
Assert . assertTrue ( clientBoList . size ( ) > 0 )
Assert . assertTrue ( childRenderer instanceof DummyProcessableSvgNodeRenderer )
assertThat ( new PingGHEventSubscriber ( ) . isApplicable ( projectA ) , is ( false ) )
assertThat ( verifyModelVersionsSaved ( ) , is ( ImmutableMap . of ( "foo" , "1.1" ) ) )
assertEquals ( "" , result )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertThat ( out . toString ( ) , is ( equalTo ( tableAsString ) ) )
assertEquals ( inputString , outputString )
assertEquals ( code , clone )
assertEquals ( expResults , results )
assertTrue ( result . length ( ) == 0 )
Assert . assertEquals ( 0 , norm , 1.0e-15 )
assertEquals ( 30 , content . split ( "\\n" ) . length )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "15" , res . toString ( ) )
assertEquals ( "The strings should remain the same" , "English Sentence" , diacriticsString )
Assert . assertEquals ( ( double ) repetitions , res )
assertEquals ( 0 , byteBufResultCaptor . getResult ( ) . refCnt ( ) )
assertThat ( runs , contains ( asList ( 1 , 1 , 2 , 2 , 3 , 4 , 5 ) ) )
assertThat ( objectMapper . fromJson ( objectMapper . toJson ( map ) ) , is ( objectMapper . fromJson ( "{\\"typeName\\":\\"Processes\\",\\"fields\\":[{\\"name\\":\\"process\\",\\"type\\":\\"ConversionRateProcess[]\\",\\"properties\\":[\\"REQUIRED\\"]}]}" ) ) )
assertEquals ( "arg1" , commandLine . getArg ( ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( "8f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6
assertEquals ( controllerName , "io.swagger.oas.sample.controllers.MyTag" )
Assert . assertEquals ( 204 , res . getStatus ( ) )
assertEquals ( timeInstant . getIntervalType ( ) , DateIntervalType . HOUR )
Assert . assertEquals ( "message" , message )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
assertThat ( person . getName ( ) , is ( "Jack Sparrow" ) )
assertTrue ( jarRuntimeInfo . isClassLoaderReusable ( ) )
assertEquals ( "B" , cell . getProp ( TEXT ) )
assertEquals ( "<script>\\n" + "  <!--\\n" + "    document.write('</scr' + 'ipt>');\\n" + "  // -->\\n" + "</script>" , node . body ( ) . html ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
Assert . assertFalse ( matcher . match ( rule , testNode2 , parent ) )
assertEquals ( "[(foobar:1>7)>(AppNode:file:10>14)]" , appNodes . toString ( ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "DeleteUser by admin response render to HAL+JSON" , actualResponse , "/fixtures/hal/user/expected-admin-delete-user.json" )
assertFalse ( "BloomFilter#not should have inverted all bits" , bf . bits . intersects ( origBitSet ) )
assertEquals ( 9 , islandPerimeter . islandPerimeter ( A , B ) )
assertTrue ( start . isSuccessful ( ) )
assertIAEWhenAccessingResult ( service . prepare ( query ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "Line with incorrect prefix" , "\\nLine with incorrect prefix" , sut )
assertVersions ( ctx , "8" )
assertEquals ( 69 , result )
assertEquals ( "Conversion did not match" , value , to )
assertEquals ( expected , component . lastUpdated ( ) )
Assert . assertNotNull ( outStream )
bytes . assertEqualTo ( description , null , ( byte ) 6 )
assertEquals ( "" , result )
assertEquals ( "http://example.org/test/test-owl:Ind" , IRIUtilities . getIRI ( o , i ) . toString ( ) )
assertEquals ( testneuron1 , lst . get ( 1 ) )
Assert . assertEquals ( rtpPacket . getTimestamp ( ) , 0xFFFFFFFF , "Timestamp should be 0xFFFFFFFF." )
assertThat ( iconCaptor . getValue ( ) , is ( ":ghost:hello" ) )
assertArrayEquals ( new double [ ] { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
assertThat ( limbo . getTasks ( ) , equalTo ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 49 , 50 , 51 , 58 , 59 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 ,
assertEquals ( "Wrong default value for string id" , "default" , a . getDefaultValue ( ) )
assertThat ( uris , is ( asList ( new URI ( "http://baseurl/static/rapture/baseapp-debug.js" ) , new URI ( "http://baseurl/static/rapture/extjs-only.js" ) , new URI ( "http://baseurl/static/rapture/extdirect-debug.js" ) , new URI ( "http://baseurl/static/rapture/bootstrap.js" ) , new URI ( "http://baseurl/static/rapture/d3.v4.min.js" ) , new URI ( "http://baseurl/extjs-script-1-test-1.js" ) , new URI ( "http://baseurl/extjs-script-2-test-1.js" ) , new URI ( "http://baseurl/extjs-script-1-test-2.js" ) , new URI ( "http://baseurl/extjs-script-2-test-2.js" ) , new URI ( "http://baseurl/static/rapture/app.js" ) ) ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expected , actual )
assertThat ( period , equalTo ( new TimePeriod ( SECOND , 60.0 ) ) )
assertions . doesNotContainKey ( key )
assertEquals ( aDeserialized , a )
assertEquals ( "" , html )
assertArrayEquals ( a . toArray ( ) , a . toArray ( ) , DELTA )
assertEquals ( 3 , schemas . getInt ( 1 ) )
assertThat ( supported , is ( true ) )
assertEquals ( forumObject . getForumUuid ( ) , forumUuid )
assertEquals ( expectedURI , uninstallRequest . getUri ( baseURI ) )
assertThat ( Certificates . getInternalCertificateData ( ) , nullValue ( ) )
assertEquals ( "Wrong content" , "Hello world!" , content )
assertFalse ( props . isEmpty ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertEquals ( new Float ( 1.0f ) , _c . convert ( "1.0" ) )
assertTrue ( references . isEmpty ( ) )
Assert . assertNotNull ( classUnderTest . getTitle ( ) )
assertEquals ( 2 , retDepartments . size ( ) )
assertThat ( zhong , not ( hasKey ( "firstName" ) ) )
assertEquals ( TestClass1 . class . getName ( ) , service . injectedLogger . getName ( ) )
assertEquals ( testexpect , handler . combineBindValue ( test , testparam ) )
assertEquals ( date , clock . dateStartsAt ( date ) )
assertThat ( match , is ( ".*lite-(\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\\\\.jar.*" ) )
assertTrue ( e . getMessage ( ) . contains ( "LineIndex: " + i ) )
assertThat ( address . asPresent ( ) , is ( true ) )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
Asserts . check ( targetHosts . size ( ) > 0 , "fail test" )
Assert . assertEquals ( "(1=100,2=200,3=300)" , map . size ( ) )
Assert . fail ( "createDNASequenceWithQualityScores(null) expected IllegalArgumentException" )
Assert . assertNotNull ( "No se ha generado el CSV" , infoDocumento )
assertEquals ( frameData1 , frameData2 )
assertEquals ( R . style . Theme_Default_Dialog , themeResId )
Assert . assertEquals ( "SELECT INTERVAL '123-2' YEAR(3) TO MONTH\\nFROM DUAL;\\n" , text )
assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 ,31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 , 64 , 70 ,
assertEquals ( 5 , passingCars . solution ( array ) )
assertTrue ( expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( asList ( trace ( mdcValues , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.integerField > :integerField_1" , parameters . get ( "from" ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter>" + "<Parameter>" + "<Name>foo</Name>" + "<Value>bar</Value>" + "<Value>baz</Value>" + "<Value>c</Value>" + "<Value>d</Value>" + "<Value>e</Value>" + "<Value>f</Value>" + "<Value>g</Value>" + "<Value>h</Value>" + "<Value>i</Value>" + "<Value>j</Value>" + "<Value>k</Value>" + "<Value>l</Value>" + "<Value>m</Value>" + "<Value>o</Value>" + "<Value>p</Value>" + "<Value>q</Value>" + "<Value>r</Value>" + "<Value>s</Value>" + "<Value>s</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<Value>t</Value>" + "<
assertFalse ( SUT . isQuiescent ( ) )
assertEquals ( Result . FAIL , type . apply ( item ) )
assertTrue ( params == null )
assertSame ( value , bound . value ( ) )
assertThat ( jsonGeneratorParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/Exception1.json" ) ) )
assertEquals ( model , RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "SimpleStatements.rdf" ) ) )
this . assertTokenizesTo ( _t , json , jsonGen . images . toArray ( new String [ jsonGen . images . size ( ) ] ) , jsonGen . types . toArray ( new String [ jsonGen . types . size ( ) ] ) , jsonGen . datatypes . toArray ( new IntsRef [ jsonGen . datatypes . size ( ) ] ) )
assertEquals ( response . getContentAsByteArray ( ) , validImage )
assertArrayEquals ( new Item [ ] { FOURTH_ITEM , THIRD_ITEM } , actual . toArray ( new Item [ 2 ] ) )
assertCentroid ( polyline , new Point2D ( - 89898 , 56400 ) )
Assert . assertEquals ( "file is not in new resource" , testingProperties . getProperty ( TestingPropertiesHelper . IRODS_SECONDARY_RESOURCE_KEY ) , actual . getResourceName ( ) )
assertThat ( ids , containsInAnyOrder ( patId , medId , moId ) )
this . assertAnalyzesTo ( _a , "<http://dbpedia.org/resource/The_Kingston_Trio>" , new String [ ] { "kingston" , "trio" , "the_kingston_trio" , "http://dbpedia.org/resource/the_kingston_trio" } , new String [ ] { "word" , "word" , "word" } , new int [ ] { 2 , 1 , 0 , 0 } )
assertNull ( selector . getProxy ( repo ) )
assertThat ( driver . findElement ( By . cssSelector ( "h2" ) ) . getText ( ) , is ( "System Error..." ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertEquals ( 200 , status )
assertThat ( XMLAdapter . XML_TIME . translate ( cal ) , is ( expected ) )
assertTrue ( stack2 . isEmpty ( ) )
assertEquals ( NettyTransporter . class , ExtensionLoader . getExtensionLoader ( Transporter . class ) . getExtension ( name ) . getClass ( ) )
assertEquals ( mockFileStorage . exists ( mockInputStream ) , true )
assertSame ( copy , copy . getEntityAProperty ( ) . getEntityAProperty ( ) )
assertNotNull ( result )
assertEquals ( playerProperties . getNext ( ) , stringArgumentCaptor . getValue ( ) )
Assert . fail ( "The request to start application master should have failed" )
assertEquals ( np . getNumberOfRoutesUnused ( lowerLayer ) , 0 )
assertEquals ( "Some author" , authors . get ( i ) . getAuthor ( ) )
Assert . assertEquals ( "Master" , redisTbl . getMaster ( ) )
assertNotNull ( options )
assertEquals ( solutionsToBeReturned , result . size ( ) )
assertSame ( wrapper , mockBackend . execute ( isA ( HttpRequest . class ) , isA ( HttpContext . class ) ) )
assertTrue ( noException == 0 )
assertThat ( name . getSegments ( ) , contains ( "lower" ) )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
Assert . assertEquals ( 2 , result . size ( ) )
assertThat ( exception , is ( notNullValue ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff_" ) )
assertTrue ( "getMetric should return the metric value passed in." , Objects . equal ( basicName , victim . getMetric ( ) ) )
assertTrue ( organizationalUnitController . canDeleteOrgUnit ( mock ( OrganizationalUnit . class ) ) )
Assert . assertEquals ( 0 , sync ( cache . size ( ) ) . intValue ( ) )
Assert . assertEquals ( ColorConstants . RED , p . getRenderer ( ) . < TransparentColor > getProperty ( Property . FONT_COLOR ) . getColor ( ) )
AssertJUnit . assertEquals ( "unexpected success" , true , incompleteActivationRule . isActive ( ) )
Assert . assertTrue ( fsView . getFileStatus ( new Path ( "/" ) ) . isDirectory ( ) )
assertEquals ( "urn:nfc:example.com" , uriRecord . getUri ( ) )
assertEquals ( 1 , countValue )
assertions . doesNotContain ( expected )
assertThat ( text , is ( "label" ) )
assertOut ( "x=100" )
assertParseTree ( rootNode ( "" , node ( "digits" , Arrays . asList ( "1" ) , "1" , stringNode ( "d" , "1" ) ) ) , tree )
assertEquals ( "Number of records" , nParquetRecords , nAvroRecord )
assertThat ( "when not allowed" , withUserRestriction ( tlRule . getListener ( ) , uRestr ) . apply ( new GHPullRequest ( ) ) , is ( false ) )
Assert . assertNotNull ( doc )
assertEquals ( expResult , result )
assertEquals ( new Locale ( "en" , "GB" ) , response . getLanguage ( ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertTrue ( wi . getValue ( ) == 84 )
assertEquals ( 10.78f , doc . field ( "firstNumber" ) )
outputValidator . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertSafetyLevel ( person )
assertThat ( changeScript . getContents ( ) , is ( "Hello\\nThere
assertEquals ( expectedFiles , files )
assertNull ( tuple . getList ( "field" ) )
Assert . assertNotNull ( defaultFiles )
assertTrue ( query . getIndexConstraints ( SPATIAL_INDEX ) . isEmpty ( ) )
assertThat ( results , contains ( ( Matcher ) hasEntry ( "code" , "WGT234" ) ) )
assertTrue ( stmt instanceof DropTableNode )
assertTrue ( rewrittenXml . contains ( "\\"endpoint address\\"" ) )
assertAplicacion ( aplicacion )
assertEquals ( NO_ARG_TO_STRING , sink . result ( ) )
Assert . assertEquals ( pm . getName ( ) , "Jack" )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "Hi test1" , result )
assertThat ( result , is ( "123" ) )
assertThat ( the ( name , be ( equalTo ( "Alex" ) ) . or ( be ( startsWith ( "B" ) ) ) ) , is ( false ) )
assertThat ( partition , is ( newTable ( ) ) )
assertEquals ( "Invalid entity resolver" , DefaultXPathEvaluator . class , map . get ( "x" ) . getClass ( ) )
assertEquals ( response , observable )
Assert . assertEquals ( 1 , s , Math . ulp ( 1d ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
assertThat ( ( double ) stopwatch . getMaximumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 150 , 50 ) ) )
Assert . assertTrue ( tempFontFile . exists ( ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
Assert . assertEquals ( "MNOPRSTUVWXYZ" , text )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Enqueue>" + "<genericTag>" + "Some text" + "</genericTag>" + "</Enqueue>" , elem . toXml ( ) )
assertEquals ( 2 , throughputStatistics . getUpdatesCount ( ) )
assertEquals ( 10 , list . size ( ) )
assertNotNull ( "State is null" , entity )
assertTrue ( "there are scenario failures" , results . getFailCount ( ) == 0 )
assertTrue ( processor . getResourcesMap ( ) != null )
assertOut ( "var /** @type {Array} */ a = Array(['Hello', 'World'], 'String')" )
assertEquals ( "Wrong result" , NO_SUMMAR_EQUALS , client . getFunds ( ) . get ( 0 ) . getValue ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( false , result )
assertArrayEquals ( TestVectors . REGISTRATION_RESPONSE_DATA , encodedBytes )
assertThat ( isExpectedData , is ( true ) )
assertEquals ( io . motown . domain . api . chargingstation . ReservationStatus . UNAVAILABLE , reservationStatus )
assertFalse ( stringBuffer . toString ( ) . equals ( "" ) )
assertEquals ( 265463 + 13 , executeTestMethod ( test , Integer . class , null , 265463 ) . longValue ( ) )
assertTrue ( copy . getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( count_addresses , customer . getAddresses ( ) . size ( ) )
assertNotNull ( connection )
assertTrue ( instance . getValue ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertThat ( SegmentRegistry . getSegments ( ID ) , hasItems ( DUMMY ) )
assertEquals ( 2 , post . getComments ( ) . size ( ) )
Assert . assertEquals ( 0.0 , a . manhattanNorm ( ) , Matrices . EPS )
assertTrue ( future . isDone ( ) )
Assert . assertNull ( result . getIntField ( ) )
assertEquals ( data , decryptedBytes . getBytes ( "UTF-8" ) )
assertEquals ( 0 , results . size ( ) )
assertNotNull ( resolved )
assertTrue ( sipPhoneSender . register ( requestURI , "no_user" , "no_password" , "sip:sender@127.0.0.1:5080;transport=udp;lr" , TIMEOUT , TIMEOUT ) )
assertArrayEquals ( data , ( double [ ] ) deserialize . readObject ( double [ ] . class ) , 0.0001 )
assertEquals ( "test_request_id" , keys [ 0 ] )
assertions . isNotLessThan ( expected )
assertNotNull ( result )
Assert . assertTrue ( myRecordList . size ( ) == 0 )
assertEquals ( "Expected updates to be received" , expectUpdates , actualUpdates )
assertEquals ( 108 , buffer . get ( ) )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( 0 , eventRealPaths . size ( ) )
assertEquals ( expectedName , generated )
assertEquals ( TaxonomyPrinter . getHashString ( taxonomy1 ) , TaxonomyPrinter . getHashString ( taxonomy2 ) )
assertThat ( repository , nullValue ( ) )
assertThat ( getValues ( query ( "bla" , "mntner" ) , "key" ) , contains ( "test-mnt" , "test-mnt" ) )
assertEquals ( "value" , value )
assertThat ( eventCaptor . getValue ( ) . getConfiguration ( ) , is ( config ) )
assertEquals ( accountListToPersist . size ( ) , accountFromDatastoreList . size ( ) )
Assert . assertEquals ( 1 , statementList . size ( ) )
assertThat ( replication , is ( instanceOf ( PartitionedTableMetadataReplication . class ) ) )
assertNull ( options . objectFactory ( ) )
assertEquals ( 5 , value . asInt ( 10 ) )
assertEquals ( body . toString ( ) , "operation _timeout" )
assertNotNull ( readPoint )
observer . assertNoMessageObservers ( )
assertEquals ( 404 , response . getStatus ( ) )
assertNotNull ( personDemographics )
assertFalse ( "Did not create DatagramSocket" , socket == null || socket instanceof MulticastSocket )
assertEquals ( 2 , postComments . size ( ) )
assertTrue ( "Expected null results" , results == null )
assertEquals ( String . valueOf ( ReturnCode . DIGIT_PATTERN_NOT_MATCHED . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertThat ( errors . toString ( ) , containsString ( "No issues" ) )
assertions . isEmpty ( )
assertNotNull ( inputStream )
assertTrue ( ca . getFallbackParameters ( ) . equals ( ap2 ) )
assertEquals ( 1 , branch_conditions . size ( ) )
Assert . assertNotNull ( session . getClassLoader ( NAME1 ) )
assertThat ( info . getServerPod ( SERVER ) , sameInstance ( pod ) )
Assert . assertTrue ( "world,peace" . equals ( join ) )
Assert . assertEquals ( JSONNegativeInfinity , result )
assertTrue ( d1 instanceof PublicCloneable )
assertionErrorCreator . multipleAssertionsError ( errors )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {}}" , bson . toJson ( writerSettings ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001 {int m1;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertThat ( "Output model created" , testResources_ . readJson ( outFile ) , is ( notNullValue ( ) ) )
assertEquals ( 7 , encounters . size ( ) )
Assert . assertEquals ( json , writer . toString ( ) )
assertTrue ( "Caught unexpected exception : " + e . getMessage ( ) , e . getMessage ( ) . indexOf ( expectedDetail ) > - 1 )
assertFalse ( question . isSolvedBy ( answer ) )
assertTrue ( c . isValidForSqlQuery ( ) )
Assert . fail ( "Exception should have been thrown" )
assertEquals ( "private" , entity . getModifiers ( ) . get ( 0 ) )
assertNull ( "Expected no output message" , exception )
Assert . assertEquals ( "OK" , result )
assertThat ( testStatus , is ( expectedStatus ) )
assertNotNull ( jmxServer )
assertFalse ( cnpjValidator . isValid ( null , null ) )
assertNotNull ( Aws . reader ( "Credentials" ) . read ( ) )
Assert . assertNull ( actual )
assertEquals ( Arrays . asList ( "A" , "B" , "C" , "D" ) , results )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( ServerParse . ROLLBACK , sqlType )
Assert . assertTrue ( readLockAcquired )
assertEquals ( object2 , actualObjects . get ( 0 ) )
assertEquals ( expected , actualQuery )
assertThat ( module . getRequiredModulesMap ( ) , is ( equalTo ( Collections . EMPTY_MAP ) ) )
Assert . assertEquals ( "Hello Kermit!" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( System . currentTimeMillis ( ) / 1000 + 500 , subscription . getExpirationTime ( ) , 10.0 )
assertThat ( formatter . format ( PlainDate . of ( 1713 , 1 , 30 ) ) , is ( "AD-1711/13-01-30" ) )
assertEquals ( 0 , response . getBody ( ) . getEntities ( ) . size ( ) )
assertThat ( flights , hasSize ( 0 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEquals ( USER_NAME , nextState . getRealm ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertEquals ( "{\\"name\\":\\"test\\",\\"data\\":{\\"heart\\":\\"ace\\"}}" , gson . toJson ( aiEvent ) )
assertEquals ( valorTest , valor )
assertTrue ( "Trust manager should be created" , ops . exists ( TEST_TRUST_MANAGER_ALGORITHM ) )
assertResultSet ( res )
assertEquals ( "unexpected number of expected problems" , 0 , equeue . size ( ) )
assertResult ( session )
assertEquals ( "425116929" , orderId )
assertEquals ( "[10,0,0]" , list . toString ( ) )
assertThat ( result , is ( Collections . emptySet ( ) ) )
observer . assertObservations ( "@Initialized HttpSession" , session )
Assert . assertEquals ( COLLABORATOR . toString ( ) , c . toString ( ) )
assertEqualsRQ ( A , lq . factor ( new DenseMatrix ( A ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( 8080 , toTest )
assertNotNull ( "Find All plans should never be null!" , allPlanets )
assertEquals ( expResult , result )
assertTrue ( result . isResultOK ( ) )
context . assertTrue ( res . failed ( ) )
assertEquals ( setOf ( "ashlux@gmail.com" , "mickeymouse@disney.com" ) , internetAddresses )
assertEquals ( required , field . getRequired ( ) )
assertEquals ( NOT_DECODED , map , object . getObjects ( ) )
assertThat ( field . getValue ( ) , is ( "foo" ) )
assertFailureLogPresent ( instance , "failingTask" )
assertEquals ( expectedPolicy , builtPolicy )
assertTrue ( isCaughtException )
assertNull ( primaryKey )
Assert . assertEquals ( 403 , response . getStatus ( ) )
testHelper . assertTaskListenerTimerJobCreated ( "userTask" )
assertEquals ( "/component=myComp/version=1.2.json" , dispatchCriteria )
Assert . assertTrue ( "Did not expect optimal coverage: " , best . getCoverage ( ) < 1d )
Assert . assertEquals ( "select babyfish_shared_alias_0 " + "from org.babyfishdemo.jpacriteria.entities.Employee babyfish_shared_alias_0 " + "inner join babyfish_shared_alias_0.department babyfish_shared_alias_1 " + "inner join babyfish_shared_alias_0.department babyfish_shared_alias_2" , createQueryTemplate ( cq ) . toString ( ) )
assertEquals ( "http://apache.org/example" , ProtoUtils . create ( uri ) )
assertContentSame ( rs , rc , columnParam1 )
assertThat ( result , is ( nullValue ( ) ) )
assertSame ( expected , actual )
assertDocumento ( documentoCreado )
assertThat ( result , is ( a ) )
assertEquals ( 0 , p . getThisPage ( ) )
assertThat ( future , is ( DisabledFuture . INSTANCE ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( s , new JsonWriter ( ) . write ( s ) )
assertThat ( FileUtils . readFileToString ( new File ( tempCopyFile ) ) , CoreMatchers . is ( cp_file . asText ( ) ) )
assertNotNull ( id )
assertEquals ( "ab" , rdfNod . getURI ( ) )
Assert . assertEquals ( ScoreLangConstants . SUCCESS_RESULT , result )
assertEquals ( Arrays . asList ( "A.java" , "B.java" , "C.java" , "D.java" ) , forest . getTree ( ) . getCompilationResults ( ) )
assertEquals ( "abc, 34\\n" , found )
Assert . assertEquals ( "Invalid HUs retrieved" , Collections . emptyList ( ) , huSelectModel . createHUQueryBuilder ( ) . setErrorIfNoHUs ( false , null ) . list ( ) )
assertThat ( spiralOrder ( matrix ) , Matchers . is ( Lists . newArrayList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 49 , 50 , 51 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 70 , 70 , 70 , 71 , 70 , 70 , 71 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 , 70 ,
assertEquals ( "SRID()" , rs . getString ( 1 ) )
assertThat ( build , is ( notNullValue ( ) ) )
assertEqualsIgnoreLineEnding ( output , "{\\n" + "  \\"id\\" : 42,\\n" + "  \\"name\\" : \\"Arthur Dent\\"\\n" + "}" )
assertEquals ( "(foo void ;)\\n" , found )
assertEquals ( NOT_FOUND , response . getStatus ( ) )
Assert . assertTrue ( results . isEmpty ( ) )
assertTrue ( isSuccess )
assertUFTFields ( fields )
assertFalse ( dm . isIriInOntology ( iri ) )
assertThat ( dispatcher . dispatchQueues . keySet ( ) , is ( empty ( ) ) )
assertEquals ( "LOCAL: \\nName1\\nName2\\nUserFN UserLN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null ) )
Assert . assertEquals ( 43 , a . getAge ( ) )
assertEquals ( 1 , sink . getTotalGroups ( ) )
mockEndpoint . assertIsSatisfied ( )
assertEquals ( "urn:cxf" , action )
assertEquals ( 0 , urls . length )
assertNotNull ( netrc )
Assert . assertEquals ( StatusCodes . BAD_REQUEST , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( webSocketHandler . calculateHeaderSize ( WebSocketHeader . PAYLOAD_LARGE_MAX ) , WebSocketHeader . MAX_HEADER_LENGTH_MASKED )
assertNotNull ( geomConverter )
assertFalse ( s instanceof Cloneable )
assertEquals ( "Strategy decision not expected" , NodeProvisioner . StrategyDecision . PROVISIONING_COMPLETED , decision )
assertThat ( eventBus . get ( ) , is ( object ) )
assertEquals ( "Date should be 1970-01-01" , new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" ) . format ( new Date ( ) ) )
Assert . assertEquals ( false , handler . getAcceptAnonymous ( ) )
assertThat ( actual , is ( sameInstance ( expected ) ) )
Assert . assertEquals ( "O1 (indexPath = 1.1, namePath = O1)\\n" + "            Na1 (indexPath = 1.2.2, namePath = O1->Na1)\\n" + "
assertThat ( underTest . exists ( TEST_NAME , null ) , is ( true ) )
Assert . assertEquals ( "value of one" , one , value )
assertThat ( DateInterval . parseISO ( "2012-01-14/P13D/2012-01-15" ) , is ( expected ) )
assertThat ( irsApplicable , equalTo ( true ) )
assertTrue ( payload . needsBuild ( getProject ( ) ) )
assertEquals ( HttpStatus . OK , responseEntity . getStatusCode ( ) )
assertEquals ( 500 , status )
assertEquals ( query2 , query )
assertEquals ( "<div id=\\"product-1\\"><h2>Detail of 1952 ALPINE RENAULT 1300</h2><p>Year: 1952, price: 98.58��</p><p>Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.</p><p>漏 Copyright Renault</p></div>" , new String ( response . content ( ) , "UTF-8" ) )
assertBundleState ( Bundle . ACTIVE , bundleA . getState ( ) )
assertThat ( I18nUtil . getLocale ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( MESSAGE_BODY , sqsMessage . getBody ( ) )
assertEquals ( "Wrong number of names" , 2 , multiMap . size ( ) )
assertEquals ( "string[]" , param . getRuntimeType ( ) )
assertEquals ( 1 , dao . getLocationsHavingAllTags ( list1 ) . size ( ) )
assertTrue ( "Array from " + i + " to " + j , Arrays . equals ( expected , result ) )
assertThat ( infos . length , is ( 0 ) )
arrays . assertDoesNotHaveDuplicates ( description , actual )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( output , output . matches ( "(?s).*execute a script.*" ) )
XMLAssert . assertXMLEqual ( childrenCountBefore , result . asXML ( ) . length ( ) )
assertSame ( result1 , result )
assertEquals ( 2 , results . size ( ) )
assertNull ( primaryKeyDesc )
assertArrayEquals ( "The view paths array is incorrect" , new String [ ] { "branchone" , "branchtwo" } , scm . getViewPaths ( EMPTY_VARIABLE_RESOLVER ) )
assertTrue ( TypeUtils . shouldCreateNewClass ( property , null ) )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
Assert . assertNotNull ( version )
assertEquals ( expResult , result )
Assert . assertTrue ( handler . disconnectCount > 0 )
assertFalse ( room . containsKey ( "etag" ) )
tester . assertNoErrorMessage ( )
assertSameOrEqual ( newValue , property . getValue ( ) , wrapsPrimitive ( ) )
assertThat ( actual , is ( expected ) )
assertEquals ( arr , resultArr )
builderUnderTest . recorder . assertInvocation ( "removePropertyFilters" , Arrays . asList ( testFilter1 , testFilter2 ) )
assertArrayEquals ( dummyByte , serializer . serializedDocumentForm ( dummySessionDocument ) )
assertNotNull ( m )
assertThat ( isValid , is ( false ) )
assertNotNull ( target )
assertEquals ( NL + "  Pre[1] xmlns=\\"A\\"" + NL + "   Pre[4] xmlns=\\"F\\"" + NL + "    Pre[7] xmlns=\\"G\\"" + NL + "   Pre[8] xmlns=\\"A\\"" + NL + "    Pre[9] xmlns=\\"F\\"" , context . data ( ) . nspaces . toString ( ) )
assertTrue ( expectedOutput . compare ( output , TOLERANCE ) )
assertEquals ( "{f1:'a'}" , x . getExample ( ) )
Assert . assertEquals ( "A \\nB \\nC \\nD" , text )
assertNotNull ( "Obfuscated data null" , obfuscatedData )
assertParseTree ( rootNode ( "hello" , node ( "hi" , null , "hello" ) ) , tree )
assertEquals ( "ab��猫�����������盲枚眉�cdEf" , returnValue )
assertMatch ( e , s )
Assert . assertEquals ( "dXNlcnBhc3M=" , actual )
assertEquals ( "Should be a 409 Conflict!" , CONFLICT . getStatusCode ( ) , getStatus ( method ) )
assertEquals ( newLanguage , withLanguage . getLanguage ( ) )
Assert . assertNull ( sdk )
Assert . assertTrue ( deleted . isVoided ( ) )
assertEquals ( e , r )
assertThat ( result , hasSize ( 0 ) )
assertNull ( cd1 )
assertEquals ( map1 , map2 )
assertThat ( this . converter . convert ( this . source , this . sourceType , targetType ) , is ( this . converted ) )
assertTrue ( result . size ( ) > 0 )
assertEquals ( true , passedWaitForStartCall . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "publicFieldOne" , myField . get ( loadedClass ) )
assertThat ( emptyIntermediate . getSize ( ) , is ( 0 ) )
assertTrue ( definitions . isEmpty ( ) )
assertEquals ( "Privacy policy inferred not equals to the exepcted empty one" , expected . toXMLString ( ) , actual . toXMLString ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertThat ( encryptor . checkPassword ( testPassword , null ) , is ( false ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE DEPTH(nodes) <= CAST('3' AS LONG)" ) )
assertEquals ( true , result )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; key=\\"value\\"; otherKey=\\"otherValue\\"" )
Assert . assertEquals ( expectedStringLast , resultString )
assertTrue ( underTest . validate ( "student" , idsToValidate ) . containsAll ( idsToValidate ) )
assertThat ( event . isCancelled ( ) , equalTo ( false ) )
assertEquals ( "Invalid argument passed" , value , null )
assertEquals ( expected , appendable . toString ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 ) ) )
assertNotNull ( result )
Assert . fail ( "It succeeded while an Exception is expected: " + msg . getContent ( ) )
Assert . assertEquals ( vXLong . getValue ( ) , vXLong1 . getValue ( ) )
assertEquals ( Timestamp . valueOf ( "1970-01-01 00:00:00" ) , ts )
assertEquals ( "Base for strings is wrong" , "3" , parsed )
assertTrue ( negativeIdleTimeReturned . get ( ) )
assertEquals ( "Base for longs is wrong" , "3" , parsed )
assertEquals ( "test" , pm . getSelectedItem ( ) . getText ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) > $literal" ) )
assertEquals ( "Select with exists check" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertTrue ( true )
Assert . assertEquals ( "SELECT s1\\nFROM t1\\nWHERE s1 > ALL (SELECT s1\\n\\tFROM t2);" , text )
assertThat ( instance . getCreationDate ( ) , is ( dateTime ) )
classes . assertIsInterface ( someInfo ( ) , actual )
Assert . assertEquals ( "Vertex" , entity . getVertex ( ) . getProperty ( "vertex_id" ) . getValue ( ) )
Assert . assertArrayEquals ( new String [ ] { "*" , "*" } , toStringArray ( tokens ) )
assertTrue ( rs . next ( ) )
assertThat ( text ( contents ) , is ( "HELLO\\n" ) )
Assert . assertEquals ( 2 , arrays . size ( ) )
assertEquals ( userDao . getUsernames ( usernamePattern , resultCount ) . size ( ) , 2 )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . TEXT_PLAIN ) . get ( ) . getStatus ( ) )
Assert . assertTrue ( contains )
assertEquals ( DockerConnectorConfiguration . UNIX_SOCKET_URI , uri )
assertFalse ( l . iterator ( ) . hasNext ( ) )
assertThat ( value , is ( "value1" ) )
Assert . assertTrue ( foundToCharArray )
Assert . assertEquals ( 412 , stringResponse . getStatus ( ) )
assertListTEquals ( listOneTwo , 1 , 2 , 3 , 4 , 5 )
Assert . assertEquals ( "3 ��芯谢���� �芯屑�" , t . format ( durations ) )
assertSame ( o , result . getValue ( ) )
assertTokensEqual ( of ( PLUS , MINUS , PLUS , MINUS ) , tokens )
assertEquals ( eAdded , eRetrieved )
assertThat ( factory . create ( value ) , is ( Long . valueOf ( value . getTimeInMillis ( ) ) ) )
assertTrue ( h . getNewURL ( ) . equals ( "/NewSimpleUrl" ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertNotNull ( schema )
assertEquals ( bestIndividual . toString ( ) , bicf . getChromosome ( ) . toString ( ) )
assertEquals ( 0 , ebXML . getSlots ( ) . size ( ) )
assertTrue ( validAnagram . isAnagram ( s , t ) )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatSocketAddress ( inetSocketAddress ) )
assertEquals ( 0 , wc . getOutgoingEvents ( ) . size ( ) )
assertEquals ( d1 . getSeriesKey ( ) , values [ 0 ] , 0.000001 )
assertTrue ( pauseLength > 150 )
assertTrue ( "i=" + i + " d=" + d , ! nnList . isEmpty ( ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( expectedBindingString , relativizedVolumeString )
assertThat ( authorizationRequest1 , is ( authorizationRequest2 ) )
Assert . assertEquals ( 0.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
_mock . assertIsSatisfied ( )
Assert . assertEquals ( "Connect to http://localhost timed out" , ctx . getMessage ( ) )
assertEquals ( "unexpected number of expected problems" , 0 , equeue . size ( ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "2_4" , "3" , "4" , "5" , "6" , "7" ) ) )
assertAlias ( sql , columnParam , "nor" , param )
Assert . assertEquals ( expectedMap , filtered )
Assert . assertEquals ( 1 , objects . size ( ) )
assertEquals ( DEFAULT_MESSAGE , builder . getStatusMessage ( ) . getContent ( ) )
assertArrayEquals ( expected , coeffs )
assertEquals ( 0.3243 , builder . bipartitionThreshold )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , 1 ) , im ( 2 , 2 ) , im ( 3 , 3 ) , im ( 4 , 4 ) )
Assert . assertEquals ( 4 , result . getTotalHits ( ) )
assertThat ( spec , is ( 0 ) )
assertOut ( "for (var /** @type {*} */ p in a.propertyNames())\\n  a.getProperty(p);" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertFalse ( connected )
assertTrue ( sql . contains ( "pm4.g1.e1" ) )
assertThat ( entity . getMetadata ( ) . getId ( ) , is ( "mmoayyed.example.net" ) )
assertThat ( event , is ( expected ) )
assertThat ( url1 . toFullString ( ) , anyOf ( equalTo ( "dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan" ) , equalTo ( "dubbo://admin:hello1234@10.20.130.230:20880/context/path?application=morgan&version=1.0.0" ) ) )
Assert . assertTrue ( checked . get ( ) )
assertEquals ( "Hello there world" , doc . select ( "div > *" ) . text ( ) )
assertEquals ( 9.0060123 , ceosReader . readFn ( 16 ) , 1E-10 )
assertTrue ( start_query . isSuccessful ( ) )
assertEquals ( "Wrong number of roles returned" , 2 , seessionAuthoritys . size ( ) )
assertHelpLines ( "Option                     Description
assertSame ( config , uriTools . resolveUri ( PROFILE_URI . resolve ( "configuration/Hello/" ) , wfBundle ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( field . getExpressionUpdateListener ( ) , testExpressionUpdate )
assertEquals ( reduce , pipes . getReduce ( ) )
Assert . fail ( "Unterminated value accepted" )
assertEquals ( remoteUrl , actualUrl )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertTrue ( token . equals ( token ) )
assertThat ( isValid , is ( false ) )
Assert . assertThat ( existing , CoreMatchers . nullValue ( ) )
assertEquals ( "Test message \\\\ab c" , result )
assertEquals ( 0 , tasks . size ( ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
Assert . assertFalse ( isDir )
Assert . fail ( e . getMessage ( ) )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
assertEquals ( "Authorize" , book . getName ( ) )
Assert . assertEquals ( "Type should be null" , WTree . Type . VERTICAL , tree . getType ( ) )
assertUsers ( ldapUserInfo , false , false , false , false )
assertTrue ( page . asText ( ) . contains ( "Foo" ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertThat ( building . isPresent ( ) , is ( false ) )
Assert . assertEquals ( range . getQualifyingPageNums ( 5 ) , Arrays . asList ( 2 , 4 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 49 , 50 , 51 , 52 , 53 , 55 , 56 , 55 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56 , 56
TestUtils . assertInvalidParameters ( victim )
assertEquals ( "astyanax driver config" , IOContainer . DriverType . ASTYANAX , driver )
Assert . assertFalse ( result )
assertEquals ( shexc . getExitCode ( ) , 0 )
assertEquals ( "VOID" , verifyType )
mock . assertIsSatisfied ( )
assertEquals ( "zzzdog" , mat . group ( ) )
assertArrayEquals ( TEObjectUtil . TE_LSP_BANDWIDTH_2 , ByteArray . getAllBytes ( output ) )
assertThat ( new PullRequestApproval ( Config . builder ( ) . requiredReviewers ( newArrayList ( "user1" , "user2" , "user3" ) ) . requiredReviews ( 3 ) . build ( ) , utils ) . isPullRequestApproved ( pr ) , is ( true ) )
assertThat ( "String" , object , is ( value ) )
assertNotNull ( Command . reader ( ) . read ( ) )
assertTrue ( result . passedValidation ( ) )
assertNotNull ( sessionManager . getValue ( ) )
assertEquals ( expected , actual )
assertEquals ( Preconditions . class , type )
assertEquals ( "Antropologia culturale e Antropologia dei simboli" , list . iterator ( ) . next ( ) . getName ( ) )
Assert . assertEquals ( "Incorrect file types returned" , Arrays . asList ( types1 ) , widget . getFileTypes ( ) )
assertTrue ( keyword . getType ( ) == keyword . getType ( ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "notEmpty" , extr . extract ( attrDetail , null , document ) )
assertEquals ( ( short ) 8 , ( short ) result . getShortValue ( ) )
assertTrue ( "correct vocab not found" , test )
assertTrue ( e instanceof E_LangMatches )
assertEquals ( "One rule is set" , 1 , ss . size ( ) )
assertThat ( results , is ( new String [ ] [ ] { { "A" , "B" } } ) )
assertSame ( oldWatcher , JobWatcher . getOrCreateFor ( domain ) )
assertEquals ( 1 , syncService . getAll ( ) . size ( ) )
assertNotNull ( Service . reader ( ) . read ( ) )
assertEquals ( new TypeTag ( String . class , new TypeTag ( String . class , new TypeTag ( String . class ) ) ) , actual )
assertThat ( threadCount , is ( AVAILABLE_PROCESSORS * 2 ) )
assertEquals ( "Hash is invalid" , Blake2_DIGEST , result )
assertEquals ( "Wrong count zeros" , count , bitseq . countZeros ( ) )
assertEquals ( 1 , reportResults . size ( ) )
assertEquals ( 1 , engineRule . getFormService ( ) . getTaskFormVariables ( task . getId ( ) ) . size ( ) )
assertThatReassembledMessageEqualsOriginalMessage ( result )
Assert . assertEquals ( 4 , collector . actualResults . size ( ) )
assertEquals ( pausedExecutionId , workflowInstanceMediatorServiceMockInjected . getPreviousFlowExecutionId ( pausedExecutionId ) )
Assert . assertTrue ( queueResponse . isOk ( ) )
Assert . assertEquals ( employee4 . getId ( ) , q . getSingleResult ( ) )
assertEquals ( vutUserId , fromBearer . getUserId ( ) )
assertEquals ( createdState , retrievedState )
assertEquals ( 2 , counter . getBeforeFileTreeWalkCount ( ) )
assertTrue ( "Thread should exit" , finished )
assertTrue ( _offeredTypes . length == 4 )
assertEquals ( "sampleLib1Description" , functionLibrary . getDescription ( ) )
assertEquals ( var1 , "test" )
assertEquals ( "Expected to find 2 roles, but found " + roles . size ( ) , 2 , roles . size ( ) )
Assert . assertEquals ( "4=4(2=2,5=5)" , tree . toString ( ) )
assertEquals ( "TokenExpirationDate passed into constructor not returned by getTokenExpirationDate()" , "imsurethiswillwork" , sut . getTokenExpirationDate ( ) )
Assert . assertEquals ( 1 , deviceGroupRegistry . getAllGroupIds ( ) . size ( ) )
assertEquals ( "a c 3 [] 2 []" , this . codeGenerator . getPostFixExpression ( ) )
Assert . assertTrue ( "duplicate topic not removed" , topic . getVariantNames ( ) . isEmpty ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( - 1 , decoder . read ( new ByteArrayInputStream ( new byte [ 0 ] ) ) )
assertEquals ( - 5 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( "Input value json should match output value json" , inputJson , outputJson )
assertNotNull ( processInstance . getId ( ) )
assertEquals ( 9876543210L , x . value )
assertEquals ( srcPaths , new Path ( defaultPath ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedReplicatorTest.csv" ) . resolve ( "FeedRepl
assertTrue ( true )
assertTrue ( issues . size ( ) > 0 )
assertEquals ( expResult , result , 0.001 )
Assert . assertFalse ( faceted . install ( ) )
assertThat ( backingMap . size ( ) , is ( 2 ) )
Assert . assertArrayEquals ( REDIRECT_IPV6 , output . array ( ) )
assertEquals ( "Hello ÿþü\\n" + "H
ITUtils . assertReceivingDifferentRows ( proxy , key , ROW_COUNT )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3, 'a')) AS integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( "/events/" + "bar/group/id" , result )
assertTrue ( result [ 0 ] == result [ 1 ] )
assertThat ( eventsFired . size ( ) , equalTo ( 1 ) )
assertEquals ( StatusCode . STREAM_NOT_FOUND , response . getCode ( ) )
assertFalse ( indexFilterHook . indexIsApplicable ( indexRecordFilter , Table . RECORD . name , newRecord , null ) )
assertThat ( result . toString ( ) , is ( equalTo ( "H" ) ) )
Assert . fail ( e . getMessage ( ) )
assertEquals ( 12 , this . wrapped . size ( ) )
assertEquals ( 1 , chain . getNoTimesExecuted ( ) )
assertEquals ( DEFAULT_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( 1 , this . taskService . createTaskQuery ( ) . count ( ) )
assertEquals ( "none condition serialization is wrong" , expected , actual )
assertEquals ( ok , result )
Assert . assertEquals ( 3 , E . withComponent ( Basic . class ) . size ( ) )
assertEquals ( annotations , annotationsOnMethod )
assertTrue ( result . isEmpty ( ) )
assertEquals ( results , linkedLists )
assertEquals ( "Wrong URL" , file , imagePart . getFile ( ) )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) > 0 )
Assert . fail ( "create bucket under non-mount-point directory should fail" )
Assert . assertEquals ( bean . getDataSource5 ( ) . getConnection ( ) . nativeSQL ( "dse" ) , "dse" )
assertEquals ( putMap , newMap )
assertEquals ( "Inputstream to string" , fileContent . toString ( ) )
Assert . assertEquals ( obj , o )
Assert . assertTrue ( result . getNumElementsProcessed ( ) == numElementsToProcess )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertEquals ( "Registration should be disabled" , 0 , PureEvaluator . getLoadCount ( ) )
assertNotNull ( feather . instance ( Plain . class ) )
assertNotNull ( properties . getDefinitionRegistry ( ) )
assertEquals ( AuthorizationResult . OK . getResult ( ) , result . getResult ( ) )
assertEquals ( new int [ ] { 1 , 1 , 1 } , res , 3 , "address='CTRIP" )
assertTrue ( getExpectedErrorMsg ( ) , result )
Assert . assertTrue ( "The named files did not match" , poorlyNamedFiles . size ( ) == 1 )
assertArrayEquals ( resultAddress , address )
assertEquals ( expectedQuery , query )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertThat ( converted , is ( notNullValue ( ) ) )
assertEquals ( expResult , result )
assertThat ( initiativeInfo . isVotingStarted ( TODAY ) , is ( true ) )
Assert . assertEquals ( XMLStreamConstants . COMMENT , reader . nextEvent ( ) . getEventType ( ) )
assertNotNull ( result )
assertNotNull ( mt )
Assert . assertNotNull ( test . merge ( ) )
assertThat ( results , hasSize ( 1 ) )
assertEquals ( "In May, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf." , p . text ( ) )
assertThat ( basicDBObject . get ( "dateTime" ) , is ( ( Object ) now . toDateTimeAtStartOfDay ( ) . getMillis ( ) ) )
arrays . assertContainsSequence ( someInfo ( ) , actual , emptyArray ( ) )
assertThat ( html , containsString ( "else-if-block" ) )
assertThat ( props . getProperty ( propertyKey ) , is ( propertyValue ) )
Assert . fail ( "exception expected" )
assertNotNull ( api )
assertNull ( x . f1 )
assertThat ( mentions , hasItem ( mentionedIssue ( 0 , 3 , 33 ) ) )
assertTrue ( "Result XML does not match expected" , monitoring . equals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><serviceDelivery><service
assertEquals ( true , service . processMessage ( null , message . getBytes ( ) ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertNotNull ( e )
assertEquals ( "<span>Hello <div>there</div> <span>now</span></span>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( expectedConnection , actualConnection )
assertNotNull ( SyncStream . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( dummyConfigurationConfigLoader . getTestConfig ( ) . getSomeDummyEnvAttribute ( ) , CoreMatchers . is ( "defaultValue" ) )
assertTrue ( lastResult . equals ( firstResult ) )
assertEquals ( cutOff , feed . getDate ( ) )
assertEquals ( expected , cls )
assertFalse ( isOpened )
assertThat ( result . statusCode , is ( Response . OK ) )
assertThat ( factory . getProblems ( ) . isEmpty ( ) , is ( true ) )
assertNotNull ( Revision . fetcher ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "1" ) . fetch ( ) )
assertThat ( called , is ( equalTo ( Arrays . asList ( "ExecuteTestSuite1" , "ExecuteTestCase1" , "DoCommand1" , "DoCommand2" , "ExecuteTestCase2" , "ExecuteTestSuite1" , "ExecuteTestCase2" , "ExecuteTestSuite2" ) ) )
assertThat ( start . until ( end , Duration . in ( MONTHS , MONTHS ) ) , is ( Duration . ofCalendarUnits ( 4 , 11 , 0 ) ) )
Assert . assertNull ( session , "No session should have been created when proxy set is empty" )
Assert . assertTrue ( currentUser . hasRole ( testRole ) )
assertTrue ( dto . getProductId ( ) > 0 )
assertEquals ( "bar" , rs . getString ( 1 ) )
Assert . assertEquals ( SEX_FEMALE , json . get ( DATA_NAME ) )
assertEquals ( Integer . valueOf ( 2 ) , result )
Assert . assertTrue ( endpoint1 . equals ( endpoint2 ) )
assertEquals ( "foo" , adapter . classify ( "foo" ) )
assertTrue ( SamplesParser . getSamples ( sampleFile ) . matchesExtension ( "test.txt" ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "OK" , r )
assertEquals ( classesToImport [ 0 ] , new ClassPath ( "com.google.gwt.core.client.GWT" , classesToImport [ 1 ] ) . getClassLoader ( ) . loadClass ( "com.google.gwt.core.client.RunAsyncCallback" ) . getClass ( ) . getName ( ) )
Assert . assertSame ( elem , mergeElem )
assertThat ( Latin1Conversion . convertString ( control ) , is ( " " ) )
assertTrue ( acl . hasPermission ( ANONYMOUS_USER , Item . READ ) )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertTrue ( resultList . size ( ) > 0 )
Assert . assertEquals ( 2000 , duration , 100 )
assertEquals ( ImmutableList . of ( person ) , found )
Assert . assertEquals ( files . size ( ) , set . size ( ) )
assertEquals ( 2 , annotations . size ( ) )
assertEquals ( "x.artistName = a;x.b = b;x.c = c" , ejbql )
org . junit . Assert . assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( custom . getGap ( ) , ( ( VerticalLayout ) container . getLayout ( ) ) . getGap ( ) )
assertThat ( tz . isDaylightSavingSTD ( utc ) , is ( true ) )
assertEquals ( initialHashCode , pm . getHash ( ) )
assertEquals ( expected , cow . getValue ( ) )
assertNull ( parsedArg )
assertEquals ( "3" , person . order ( ) )
assertEquals ( "POST request" , saveRoute . getRequestMethod ( ) )
assertEquals ( 2 , accounts . size ( ) )
assertTrue ( s . isRequired ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( expected , out )
assertEquals ( "\\"NAME\\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertArrayEquals ( expected , service . getDomainsForServer ( handle ) )
assertEquals ( DataTypeManager . DefaultDataClasses . INTEGER , command . getProjectedSymbols ( ) . get ( 0 ) . getType ( ) )
assertEquals ( "Wrong # of variables" , 2 , parent . getVariables ( "tablespaces.tablespace.name" ) . size ( ) )
Assert . assertEquals ( 0 , count )
assertEquals ( 5. , start . getTheoreticalLatestOperationStartTime ( ) , 0.01 )
getStream ( streamId ) . statusCode ( 200 ) . assertThat ( )
assertNotNull ( inverseCheck . getOwner ( ) )
assertSame ( expectedOS , resultingOS )
Assert . assertEquals ( dataOf1 , testMeta . get ( 1 ) )
assertEquals ( "foo" , person . getFirstName ( ) )
assertEquals ( expectedContentRange , uploader . constructContentRangeHeaderValue ( requestLength , false , status ) )
assertNotNull ( info )
assertResultSet ( res )
Assert . assertEquals ( result , record )
assertThat ( result , equalTo ( Result . NEUTRAL ) )
assertTrue ( Arrays . equals ( dataModel , sink . getDataModel ( ) ) )
assertThat ( "Validation errors detected in a valid SampleProvider" , validation . pass ( Report . WITHOUT_WARNING ) )
assertTrue ( saddr . matches ( "tcp://\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+:90" ) )
assertTrue ( field . isRequiredIndicatorVisible ( ) )
assertEquals ( "Wrong number of children" , 1 , child . getEdges ( ) . size ( ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( actual . matches ( "x" ) , is ( true ) )
assertTrue ( revisions . isEmpty ( ) )
assertThat ( TimestampInterval . between ( start , end ) . contains ( PlainTimestamp . of ( 2014 , 2 , 27 , 45 ) ) , is ( false ) )
assertEquals ( expResult . trim ( ) , result . trim ( ) )
assertNotSame ( fixture , copy )
assertEquals ( "a b\\n" , found )
assertThat ( cache . size ( ) , is ( 0 ) )
assertEquals ( "10" , groupId )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertTrue ( calledExceptionHandler . isProtectedHandlerCalled ( ) )
assertEquals ( expectedDate , formatDate ( "yyyyyy-MM-dd HH:mm:ss" , result ) )
assertFalse ( "Does not accept a method that returns an object" , interceptor . accepts ( resourceMethodThatReturnsObject ) )
assertSame ( "Cloned instance" , TimeoutNow . INSTANCE , cloned )
assertEquals ( actual , expected )
Assert . areEqual ( IllegalArgumentException . class , ex . getClass ( ) , "出现异常" )
Assert . assertNotNull ( pi )
assertThat ( read ( format , written ) , contains ( 100 ) )
assertEquals ( expectedCount , statisticsDao . getPostsOnForumCount ( ) )
assertObjectEquals ( "{swagger:'2.0'}" , t )
assertNumEquals ( numOf ( Math . log ( 99d / 100 ) ) , varCriterion . calculate ( series , trade ) )
assertEquals ( asList ( new ErrorNotification ( "foo" ) ) , clientEvents . collect ( ) )
Assert . fail ( "Should not have succeeded" )
assertEquals ( expected , gb )
assertEquals ( cut . createTask ( beforeAssign ) , afterAssign )
assertFalse ( new PetFilter ( ) . dogsOnly ( payload ) )
Assert . assertTrue ( reflect . isSuperClass ( genericType ) )
assertEquals ( "�械�械蟹 3 �邪蟹邪写" , t . format ( new Date ( 1000 * 60 * 3 ) ) )
assertFalse ( deviceFlowRegistry . isOpen ( ) )
assertThat ( provider . getSubject ( axiom ) , is ( absent ) )
assertEquals ( 120 , maxCacheSize )
shorts . assertNotLessThan ( description , actual , expected )
assertThat ( employees , hasItems ( employee ) )
assertSame ( listOfTodos , retList )
assertEquals ( numbers , this . model . getNumbers ( ) )
assertEquals ( "branching" , joining . getBranching ( ) )
assertEquals ( "OVER" , ret )
assertEquals ( expected , actual )
assertThatWritableIs ( true )
Assert . assertEquals ( expected , compoundWrite . apply ( baseNode ) )
assertEquals ( 2 , bb . remaining ( ) )
assertEquals ( expected , actual )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( true , classUnderTest . getWarnForUnsavedFileEdits ( ) )
assertThat ( helloWorld . helloWorld ( ) , is ( "Hello World!" ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertFalse ( throttled )
assertThat ( extractedLines . size ( ) , equalTo ( 0 ) )
assertEquals ( "unit" , mojo . getProject ( ) . getArtifactId ( "test-classes" ) )
Assert . fail ( "Should have failed due to no content" )
assertTrue ( stats . getReceivedMessageGaps ( ) . isEmpty ( ) )
assertThat ( e , is ( instanceOf (fluid . class ) ) )
Assert . assertEquals ( dialect . getURL ( conn ) , "jdbc:hive2://null:null/null" )
assertEquals ( expResult , result )
assertThat ( request . validate ( ) , equalTo ( true ) )
assertThat ( testColor . name + " on " + serialized , base , is ( deserialized . getColor ( "color" ) ) )
Assert . assertNotNull ( "null getFileFromIRODSUsingTicketOnFileAsAnonymousResponse" , getFileFromIRODSUsingTicketOnFileAsAnonymousResponse )
assertThat ( isValid , is ( false ) )
assertEquals ( false , log . hasEvents ( ) )
assertEquals ( "AlignerReport{reportId:3}" , rep . toString ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertNull ( "index not present" , ais ( ) . getTable ( SCHEMA , T1_NAME ) . getIndex ( "x" ) )
assertEquals ( "void f(void* target) {\\n" + "    ((void (*)(void)) target)();\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertEquals ( "message" , exception . getMessage ( ) )
assertThat ( responseStep . callResponse . getResult ( ) . getItems ( ) , containsInAnyOrder ( s1 , s2 , s3 , s4 , s5 , s6 ) )
assertXpathExists ( "//h1[not(@id)][text() = 'My Title']" , html )
assertThat ( ConversionUtil . convert ( value , Integer . class ) , is ( nullValue ( ) ) )
assertSuccess ( new FailingWorkerListener ( ) , WorkerEvent . values ( ) )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertNotNull ( read )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( IntraDayDate . toList ( days ) , contains ( start , end ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( "The override-branch name array is incorrect" , new String [ ] { "override-branch" } , scm . getOverrideBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertEquals ( true , result )
assertEquals ( read ( pom ) , "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<project>\\n" + "    <modelVersion>4.0.0</modelVersion>\\n" + "    <artifactId>artifact-id</artifactId>\\n" + "    <groupId>group-id</groupId>\\n" + "    <version>x.x.x</version>\\n" + "</project>" )
assertEquals ( test . convertToBase7 ( ) , BaseSeven . class )
Assert . assertEquals ( FastMath . PI , solver . solve ( 100 , f , 3.0 , 3.2 , 3.1 ) , solver . getAbsoluteAccuracy ( ) )
assertFalse ( quota . check ( blobStore ) . isViolation ( ) )
assertEquals ( expected , expression . toString ( ) )
Assert . assertEquals ( expected . replace ( '\\'' , '"' ) , result )
assertThat ( domain . getServer ( "server1" , "cluster1" ) . shouldStart ( 0 ) , is ( true ) )
assertNotNull ( version )
assertEquals ( formatted , "235:03:57.55100 seconds" )
assertNull ( entity )
assertDegenerate ( scan )
assertEquals ( "Expected 10 results!" , 10 , n )
assertTrue ( txaction . isTransferTxaction ( ) )
Assert . assertEquals ( 2 , this . sqlgGraph . traversal ( ) . E ( ) . has ( T . label , "friendXXX" ) . count ( ) . next ( ) , 0 )
assertFalse ( strings . hasNext ( ) )
assertThat ( found , hasSize ( 0 ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( product . product , mjd . product )
Assert . assertEquals ( 0.8683 , pValue , 0.09 )
assertEquals ( expected , getString ( TestOrderByImpl . example ( ) ) )
assertNull ( context . getObjects ( ) . get ( 0 ) . getToArtist ( ) )
assertEquals ( "TestGetFilterQuery 0" , "key=value" , entityTypeToFilterQueryService . getFilterQuery ( "key" ) )
assertTrue ( urlWithPathAndParam . equals ( urlString ) || urlWithPathAndParam1 . equals ( urlString ) )
assertEquals ( "The tuple is not the expected tuple" , tuple , collector . getTuple ( ) )
assertEquals ( vars ( "Joe" , "Smith" ) , getNonPseudoVars ( csv , true ) )
assertTrue ( rank < 2 )
assertMockEndpointsSatisfied ( )
assertEquals ( "Wrong # of requestable roles returned" , 1 , requestableRoles . size ( ) )
assertVisitorSatisfied ( )
assertTrue ( initSuccessful )
assertEquals ( "date must not be changed in isSelected" , copy , today )
assertThat ( exitValue , is ( 1 ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 1 , testDescriptor . getChildren ( ) . size ( ) )
assertEquals ( "test" , wrap . getWrapped ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( false , retval )
assertEquals ( expResult , result )
assertThat ( sql , equalTo ( "update UserInfo set name = case id when 77 then '����' when 88 then name when 99 then '姊�' else name end,age = case id when 77 then '18' when 88 then age when 99 then '16' else age end where id in(77,88,99)" ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertFalse ( controller . isLoggedOn ( ) )
assertEquals ( responseBuilder . buildResponse ( ) , response )
arrays . assertContains ( description , null , array ( "Yoda" ) )
assertThat ( content . get ( 0 ) , containsString ( "Unknown action in agent argument, do nothing!" ) )
assertEquals ( 0 , mockResult . included ( "totalPostReports" ) )
assertMockEndpointsSatisfied ( )
context . assertIsSatisfied ( )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertEquals ( expResult , result )
assertEquals ( "(a + b)" , str )
assertEquals ( expectedDoc , modifiedDoc )
assertEquals ( clob , result )
assertEquals ( 1 , rpt . size ( ) )
Assert . fail ( "get non-existent object should fail" )
assertSame ( "Should be same JClass" , cm . ref ( "org.test.ClassNotOnClasspath" ) , cm . ref ( "org.test.ClassNotOnClasspath" ) )
assertEquals ( "LIMIT 5 RETURNING foo" , statement . toString ( ) )
Assert . assertEquals ( 1 , jobs . size ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertTrue ( Cells . isEmpty ( cell ) )
assertTrue ( repository . getFeatureState ( DummyFeature . TEST ) . isEnabled ( ) )
assertThat ( currentTimeString , is ( "2012-03-03T19:31:40.000Z" ) )
Assert . assertFalse ( context . getResult ( ) )
assertNotNull ( generator )
assertMockEndpointsSatisfied ( )
assertEquals ( original , restored )
assertEquals ( "Caused by: java.lang.RuntimeException" , ExceptionUtils . cause ( except ) . getClass ( ) . getName ( ) )
Assert . assertEquals ( 1 , names . size ( ) )
assertEquals ( expectedDate , formatDate ( "yyyyyy-MM-dd HH:mm" , result ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongValue ( ) )
assertTrue ( "CygnusGroupingRules.constructor has errors" , cygnusGroupingRules . getErrors ( ) . isEmpty ( ) )
assertOutWithMetadata ( outTemplate . replaceAll ( "AppName" , appName ) )
assertThat ( calvalusDataInputs . toString ( ) , equalTo ( "calvalus.wps.remote.ref : 1738ad7b-534e-4aca-9861-b26fb9c0f983\\n" + "minDate : 2016-01-01T01:00:00+01:00\\n" + "calvalus.output.compression : none\\n" + "processorBundleLocation : hdfs://calvalus/calvalus/software/1.0/beam-buildin-1.0\\n" + "calvalus.wps.remote.user : dummyRemoteUser\\n" + "productionType : L2Plus\\n" + "inputDataSetName : MERISRR  r03 L1b2002\\n" + "processorBundleVersion : null\\n" + "calvalus.calvalus.bundle : calvalus-2.0b411\\n" + "inputPath : /calvalus/eodata/MER_RR__1P/r03/${yyyy}/${MM}/${dd}/.N1\\n" + "minDateSource : 2016-01-01T01:00:00+01:00\\n" + "quicklooks : true\\n" + "autoStaging : true\\n" + "calvalus.snap.bundle : snap-3.0.0\\n" + "autoLooks : true\\n" + "calvalus.snap.bundle : snap-2.0.0\\n" + "snapLooks : true\\n" + "autoStaging : true\\n" + "calvalus.snap.bundle : snap-2.0.0\\n" + "snapLooks : true\\n" + "autoLooks : true\\n" + "calvalus.snap.bundle : snap-2.0.0\\n" + "snapLooks : true\\n" + "calvalus.snap.bundle : snap-2.0.0\\n" + "snapLooks : true\\n" + "calvalus.snap.bundle : snap-2.0.0\\n" + "snapLooks : true\\n" + "
Assert . assertEquals ( 0 , resultList . size ( ) )
assertFalse ( registryService . doesKeyExist ( "HKLM" , null ) )
assertThat ( fe , notNullValue ( ) )
Assert . assertEquals ( 3 , visitor . getBindVarConditions ( ) . size ( ) )
assertEquals ( expResult , entityParser . parseDatastream ( expResult ) )
assertEquals ( "TextBuilder String Is 1" , _textBuilder . toString ( ) , "1" )
assertEquals ( 1 , cache . listPrivileges ( null , null , null ) . size ( ) )
Assert . assertEquals ( SpringContainer . class , container . context . getBean ( "container" ) . getClass ( ) )
assertTrue ( passed )
assertThat ( collection . getDocument ( externalDoc . getKey ( ) , BaseDocument . class , new DocumentReadOptions ( ) . streamTransactionId ( tx . getId ( ) ) ) , is ( nullValue ( ) ) )
assertThat ( sentRequest ( "http://127.0.0.1:19000/api/job/trigger" , "POST" , CloudJsonConstants . getJobJson ( ) ) , is ( "TRANSIENT" ) )
assertToken ( expectedTokens , select ( jcas , Token . class ) )
assertEquals ( "No tests ran" , content )
assertThat ( evaluator . evaluate ( corc ) , is ( TruthValue . YES ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 0 , maxConsequetiveOnes . findMaxConsecutiveOnes ( numbers ) )
assertEquals ( 4 , context . select ( q1 ) . size ( ) )
assertEquals ( 190 , res . cause ( ) . getMessage ( ) )
assertEquals ( 6 , possibleFields . size ( ) )
assertEquals ( expectedString , VO_NAME + "/" + GROUP_NAME , EnumSet . of ( fqanWithGroup ) )
assertSet ( queryReturns ( kate , ashley ) , whenFilteringBy ( IN , Arrays . asList ( "Kate" , "Ashley" ) ) )
assertEquals ( t , new LeadActivityRecord ( ) . toString ( ) )
assertThat ( isEqual , is ( true ) )
assertNotNull ( response )
assertThat ( "bob[-].fred[2].george" , equalTo ( m . m_fieldPath ) )
assertEquals ( 4 , aggregate . getTotalHours ( ) )
assertEquals ( "975X" , agencia . toString ( ) )
Assert . assertEquals ( input , output )
assertEquals ( "eu/dnetlib/iis/wf/transformers" , workflowSourceDir )
assertThat ( toString ( resultIds ) , containsInAnyOrder ( "DiagnosticReport/DR" , "Observation/parentObs" , "Observation/childObs" ) )
Assert . assertEquals ( MessageFormatUtil . format ( com . itextpdf . io . IOException . _1IsNotAnAfmOrPfmFontFile , font ) , message )
assertEquals ( 5. , Solutions . bestOf ( solutions ) . getCost ( ) , 0.01 )
Assert . assertTrue ( "Log content should match" , "1. UserOriginated: true" . equals ( getLogRow ( 0 ) ) )
assertEquals ( "h1:background-color:red}" , writer . getCSSAsString ( cascadingStyleSheet ) )
assertTrue ( "Logger should be added" , ops . exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( list , actual )
assertEquals ( "{\\"d\\":{\\"EntryDate\\":\\"\\\\/Date(-42)\\\\/\\"}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( "5:10000000000:1.5:3.5:zzz:true" , res . join ( ) )
assertTrue ( "Oh no
Assert . assertTrue ( isEqual ( distance , 1.0 ) )
assertThat ( chksumChannel . getChecksums ( ) , contains ( expectedChecksum ) )
assertThat ( waggleDanceConfiguration . getThriftServerRequestTimeout ( ) , is ( timeout ) )
Assert . fail ( )
assertThat ( schema , containsString ( "}\\n\\ntype TypeMutations {\\n" + "  create(uri: String
assertNotNull ( clz )
assertThat ( iterationState . next ( ) . getChangeType ( ) , is ( ASSERTED ) )
assertEquals ( "TestLineToFailsafeJsonHeaders" , lines . get ( 0 ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( "High" , filterResult . getValue ( ) )
Assert . assertEquals ( ecohImpl . dealWithGzipEnable ( echoInfo ) . getMessage ( ) , response . getMessage ( ) )
assertThat ( collect ( userDAO . find ( ) . asList ( ) , on ( UserMongo . class ) . getId ( ) ) , contains ( user1 . getId ( ) ) )
assertEquals ( total , remaining . size ( ) )
assertEquals ( expected , actual )
assertEquals ( firstId , secondId )
assertTrue ( v1 . getVehicleTypeIdentifier ( ) . equals ( v2 . getVehicleTypeIdentifier ( ) ) )
assertEquals ( "<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>" , StringUtil . normaliseWhitespace ( doc . outerHtml ( ) ) )
assertEquals ( "no gain" , storage . read ( "no pain" ) )
assertFalse ( problem )
assertNotNull ( retr )
Assert . assertEquals ( "content" , result . getBody ( ) )
assertThat ( annotation , notNullValue ( ) )
Assert . assertEquals ( expected , testIndex . findConc ( "[pos = 'adj' & lemma = '.*u.*']" ) )
assertEquals ( 10 , all . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEquals ( err , "File, 'EasyMock for class java.io.File' cannot be written." )
assertTrue ( "Failed authentication was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , UNKNOWN_USER ) )
assertEquals ( request , builder . doTruncate ( subSet , coverages ) )
assertEquals ( "Redo Action" , shortDescription )
assertContains ( e . getMessage ( ) , "'last'" )
assertThat ( kvStore . getCollectionOrDefault ( "field" , Collections . emptyList ( ) ) , equalTo ( value ) )
assertThat ( dog . name , equalTo ( "Brutus" ) )
assertThat ( termMap . getConceptReferenceTerm ( ) . getUuid ( ) , is ( RestTestConstants1_9 . CONCEPT_REFERENCE_TERM_UUID ) )
assertThat ( isValid , is ( true ) )
assertEquals ( r , resultRA . get ( ) . get ( ) )
assertEquals ( matcherPosition . position ( ) , matcherPosition . end ( ) )
assertTrue ( result . equals ( expected ) )
assertEquals ( "ah,yahya,park." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEqualsWithoutWhiteSpaces ( "" , actual )
assertNotNull ( appInitializer . getServletConfigClasses ( ) )
assertEquals ( Arrays . asList ( "1" , "2" , "3" ) , arguments . remove ( "1" ) )
assertEquals ( expected , transformed )
assertNull ( chksumChannel . get ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( model . weekOfMonth ( ) . incremented ( ) ) , is ( PlainDate . of ( 2000 , 12 , 9 ) ) )
assertTrue ( component . getText ( ) . startsWith ( "Widgetset 'com.vaadin.DefaultWidgetSet' does not contain an implementation for com.vaadin.tests.widgetset.server.MissingFromDefaultWidgetsetComponent." ) )
assertThat ( tester . count ( "Hoge" ) , is ( 1 ) )
Assert . assertEquals ( "Mustache render template failed" , "{{\\"template\\":\\"Mustache render template failed\\",\\"content\\":\\"This is a test. Mustache should render this template.\\"}" , response )
assertEquals ( "http://foo.org/fhir/Profile/PatientWithFullProfile" , def . getResourceProfile ( "http://foo.org/fhir" ) )
assertEquals ( "cffunction" , parserTag . getName ( ) )
assertThat ( hijri . with ( CommonElements . weekOfMonth ( HijriCalendar . family ( ) , model ) . decremented ( ) ) , is ( hijri . with ( HijriCalendar . DAY_OF_MONTH , 1 ) ) )
assertThat ( userPermissions , hasItem ( permission ) )
Assert . assertEquals ( a0 + a1 * Math . PI , Math . sqrt ( a1 * a0 ) , 1e-6 )
this . assertGet ( ENTITY_TYPE , BAOBAB_JSON_PATH )
assertEquals ( "Hello World" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello World" ) )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "3.8 million litres" , 3.8E12 , "m^2" , 3.8E12 , "area" ) )
assertEquals ( 1 , classUnderTest . getNumDiagonalSquaresAvailable ( Position . d5 ) )
assertEquals ( PRICE , b . getPrice ( ) )
Assert . assertEquals ( dataset . getName ( ) + ", parameter #" + i , expected [ i ] , actual , 1e-6 * expected [ i ] )
assertThat ( readBytes ( testee ) , is ( "" ) )
assertEquals ( "png" , sink . preferredOutputFormatName ( ) )
assertTrue ( "connection timeout not resolved" , resolved )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
assertThat ( configuration . getBrowserCapabilities ( ) , is ( "mockdrone" ) )
Assert . assertFalse ( handler . managementOperation ( null , request , response ) )
Assert . assertEquals ( 3 , result . intValue ( ) )
assertTimerWithCycle ( "boundary" , TIMER_CYCLE )
Assert . assertEquals ( 0 , an . analyze ( new CandidateNode ( new CandidateRule ( "test" , rule ) , nnode ) , results ) . size ( ) )
assertFalse ( wouldFire )
assertUnusedTagInSetTaggingRequest ( setTaggingRequest , String . valueOf ( true ) )
assertCardLuhnDigit ( creditCard )
assertNull ( resource )
assertThat ( supplier . authForImage ( imageId ) , matchesAccessToken ( imageId ) )
assertThat ( actual , is ( expected ) )
assertEquals ( FilterReply . NEUTRAL , filter . decide ( new LoggingEvent ( ) ) )
Assert . assertEquals ( "Failure expected the name to be the same" , "ChatroomDeleteDTO" , MHRDTO . getDTOName ( ) )
assertArrayEquals ( new String [ ] { "*" , "1" , "2" , "3" , "a" , "b" } , list . toArray ( new String [ 0 ] ) )
Assert . assertEquals ( pullRequest , parsedPullRequest )
Assert . assertEquals ( "did not get expected number of correct objects" , 3 , result . size ( ) )
assertTrue ( getDocument ( ) . getId ( ) != null )
assertEquals ( projectId , ontologyService . getOntologyId ( servletRequest ) )
assertTrue ( organizationResponse . object . getName ( ) . equals ( name ) )
Assert . fail ( "Expected " + response + " to fail" )
assertThat ( result . statusCode , is ( Response . OK ) )
assertNull ( first )
assertArrayEquals ( array1 , getImgAsInts ( array2 ) )
assertEquals ( density , 0.0 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff38_" ) )
assertEquals ( 2 , rules . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( value , ( Double ) subject . value ( ) , 0.01 )
assertions . isEmpty ( )
assertThat ( command . getMaximumTimeMilliseconds ( ) , is ( value ) )
assertThat ( component . execute ( ) , is ( expected ) )
arrays . assertContains ( description , new short [ 1 ] , new short [ 0 ] )
assertEquals ( expectedCsv . get ( 0 ) . getSchema ( ) , schema )
Assert . fail ( "Xfdf files are not equal" )
assertThat ( CalendarWeek . from ( cw . toProlepticNumber ( ) ) , is ( cw ) )
assertEquals ( table . getTable ( ) , table . getTable ( ) )
assertEquals ( ius , st )
assertNotEquals ( circle1 , circle2 )
Assert . assertEquals ( expResult , result )
assertEquals ( "http://localhost:8080/api/v1/key/123456/agency/1/command/predictions/" + "rs=16E|6010|rs=52|6010|rs=54|6010|format=json" , PredictionsUtil . encodePredictionsUrl ( preEncodedPredictionsUrl ) )
assertTrue ( taxonomy . getNode ( A ) . getDirectSuperNodes ( ) . contains ( taxonomy . getNode ( F ) ) )
Assert . assertEquals ( PUBLIC_VISIBILITY , this . component . getVisibility ( this . entity1 ) )
assertTrue ( thrown )
assertNotNull ( spanEvent )
assertEquals ( e . getFreeVars ( ) , "i" , "b" )
assertEquals ( expected , contentSummary . toString ( false , true ) )
Assert . assertNull ( "Entity should be null" , result )
assertEquals ( Result . STOP , and . apply ( pathData , - 1 ) )
assertEquals ( 1 , userInbox . size ( ) )
assertResultSet ( res )
assertThat ( prop . satisfiesConstraints ( value , session ) , is ( false ) )
assertNotNull ( info )
Assert . assertEquals ( "�垮���″��浣��℃������" , FreeMarkerUtils . format ( tpl , args ) )
assertNotNull ( resource )
Assert . assertTrue ( result )
assertEquals ( "a" , found . getResource ( ) . getName ( ) )
assertNotNull ( exception )
assertThat ( formatter . format ( PlainDate . of ( 2015 , 4 , 1 , 1 ) ) , is ( "35-01-01" ) )
assertArrayEquals ( exp , r )
Assert . assertTrue ( pg1 . intersects ( pg2 ) )
Assert . assertEquals ( "Delete_rows_v1" , actual )
assertEquals ( 0 , content . refCnt ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expectedCssString , rewriteCssString )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
Assert . assertEquals ( "SELECT SECOND('10:05:03');" , text )
assertEquals ( 0.8 , val , 1e-5 )
Assert . assertNull ( concept )
Assert . fail ( "NullPointerException should have been thrown" )
assertEquals ( 0 , arr . length )
assertEquals ( 0 , r1 . compareTo ( r2 ) )
Assert . isTrue ( true )
assertThat ( getConfigurationOfDmnEngine ( ) . getScriptEngineResolver ( ) , is ( scriptEngineResolver ) )
assertFalse ( matches )
assertThat ( response , containsString ( "Ok" ) )
assertThat ( scope1 , is ( not ( equalTo ( scope2 ) ) ) )
assertEquals ( 4 , found . size ( ) )
assertEquals ( g1 , g2 )
Assert . assertTrue ( true )
assertNotNull ( result )
Assert . assertEquals ( Integer . toHexString ( 38 ) , sb . toString ( ) )
assertTrue ( n1 . equals ( n2 ) )
assertEquals ( clazz , orderType . getJavaClass ( ) )
assertEquals ( expectedFeatures , tokens . get ( 0 ) . getAllFeatures ( ) )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
Assert . assertEquals ( "number emitted tuples" , numtuples , itemSink . count )
assertEquals ( expected , actual )
assertEquals ( 0 , counter . get ( ) )
arrays . assertDoesNotContain ( description , null , value , Index . atIndex ( 0 ) )
assertNull ( kieModule )
assertPlanMatches ( expected )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertEquals ( 2 , provider . getFilters ( ) . length )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertEquals ( gen . generateInchi ( ac ) . getInChI ( ) , "InChI=1S/Cl/i1+2" )
assertEquals ( expResult , result )
Assert . assertEquals ( "Expected null result" , null , value )
assertEquals ( 1 , builder . build ( ) . getElementValues ( ) . size ( ) )
assertFalse ( or . isDefined ( ) )
assertions . containsSequence ( 'e' , 'f' , 'g' , 'h' )
assertEquals ( Lists . newArrayList ( DefaultDistance . of ( 400 , DistanceUnit . METERS ) , DefaultDistance . of ( 1D / 2 , DistanceUnit . MILES ) , DefaultDistance . of ( 1 , DistanceUnit . KILOMETERS ) ) , Lists . newArrayList ( Distances . distanceIterator ( upto ) ) )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 1 ) )
assertEquals ( NON_ASCII_UTF8_STRING , result )
assertThat ( databaseFixer . getGraph ( ) . traversal ( ) . V ( ) . hasLabel ( "rel1" ) . next ( ) , is ( true ) )
assertTrue ( "Focus should be in the Grid" , getFocusedElement ( ) . getAttribute ( "class" ) . contains ( "v-grid" ) )
assertEquals ( userId , action . getUserId ( ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertEquals ( 1 , yamlParsers . size ( ) )
assertNull ( result )
Assert . assertNull ( result )
assertTrue ( true )
assertEquals ( "bar1" , response . getHeaderString ( "foo" ) )
Assert . assertFalse ( isOk )
assertFalse ( service . hasProperty ( "test" ) )
assertThat ( codes , containsInAnyOrder ( "Donor$" , "Donor$" ) )
assertThat ( msg . data ( ) , is ( new byte [ ] { 10 , 11 } ) )
assertFalse ( valid )
Assert . assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getCode ( ) )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
assertEquals ( "bloom=true&field=fieldData&bloom=false" , clearCache . getBucket ( "bloom" ) . getKey ( ) )
Assert . assertEquals ( state . IDLE , state )
assertEquals ( sizeBeforeAdding + 1 , list . size ( ) )
assertTrue ( diff < 50 )
assertEquals ( withLabel , pd1 )
assertEquals ( actionOut . getData ( ) , actionDetailsArray )
assertEquals ( "http://example.net/ns#" , x1 )
assertEquals ( "The first state on third page is not correct" , FIRST_STATE_THIRD_PAGE , actual )
assertEquals ( expected , result )
assertThat ( rollup . isFreshEnough ( ) , is ( false ) )
assertEquals ( p1 , p2 )
Assert . assertEquals ( "true" , p . getProperty ( PseudoAuthenticationHandler . ANONYMOUS_ALLOWED ) )
assertThat ( mentions , hasItem ( mentionedEntity ( 0 , mention . length ( ) , EntityType . ANNOTATION_PROPERTY , iri ) ) )
assertObject ( list , gtype )
Assert . assertEquals ( 8 , service . getSalt ( ) . length ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( 404 , response . getStatus ( ) )
assertNull ( parsedArg )
assertTrue ( s . getName ( ) . equals ( "cleaning" ) )
assertTrue ( "PointFormats setter is not working correctly" , delegate . getPointFormats ( ) . equals ( supportedPointFormats ) )
assertTrue ( value . isReplaceableBy ( 99L , 11 , ComparableComparator . INSTANCE ) )
assertThat ( mocked . get ( ) , is ( nullValue ( ) ) )
assertEquals ( "Hello" , sb . toString ( ) )
assertOut ( "a + b" )
assertThat ( s , is ( "0600F" ) )
Assert . assertArrayEquals ( expected , actual )
this . assertScriptReturnsTrue ( "" + "String s = \\"f\\";\\n" + "\\n" + "switch (s) {\\n" + "case \\"a\\": case \\"b\\": case \\"c\\":\\n" + "    return false;\\n" + "case \\"d\\": case \\"e\\": case \\"f\\":\\n" + "    return true;\\n" + "default:\\n" + "    return false;" + "}\\n" )
assertEquals ( expected , actual )
assertTrue ( verifyProps ( a , LIST_A ) )
assertThat ( xPath , is ( "(.//*[@id = 'idz']//*[self::text() = 'Hello world')" ) )
assertThat ( e , instanceOf ( MyException . class ) )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertEquals ( expected , result )
assertEquals ( 0 , errors . size ( ) )
assertOutputResult ( new String ( out . toByteArray ( ) ) )
assertEquals ( "subName" , expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
Assert . assertEquals ( "Missing required required component id" , MicroPipelineValidationResult . MISSING_COMPONENT_ID , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , Collections . < String > emptySet ( ) ) )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertThat ( matcher . matches ( "<some xml=\\"true\\" />" ) , is ( true ) )
assertTrue ( "No keywords found" , ! result . isEmpty ( ) )
Assert . assertEquals ( testEntry . f1 , encoding . detectEncoding ( testEntry . f1 ) )
assertEquals ( "/test-ip" , pth )
Assert . assertEquals ( "Update_rows_v1" , actual )
assertEquals (SwitchingProtocols . MESSAGE , ri . getDescription ( ) )
assertEquals ( "2h2m2.500s" , s )
assertEquals ( DOMAIN + '@' + RESOURCE , bareJID )
Assert . assertFalse ( "Config contains null" , sw . toString ( ) . contains ( "null" ) )
Assert . assertEquals ( "GroovyValidationResult" , content . getContent ( ) )
assertTrue ( line . contains ( "cluster:" ) )
assertEquals ( 0 , changes . getChangeSet ( ) . getChangeSetElements ( ) . size ( ) )
assertFalse ( CommitUtils . isMergedIntoMaster ( "/non_existent_file.txt" , "test_branch" , repo ) )
assertDestinationFileContentIsMultiPartContent ( )
assertEquals ( 1 , callCnt . get ( ) )
assertEquals ( String . format ( "INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))" , SCHEMA_NAME , TABLE_NAME , SCHEMA_NAME , SEQUENCE_NAME ) , theSql )
Assert . assertTrue ( "No metrics should be registered" , this . metricRegistry . getNames ( ) . isEmpty ( ) )
Assert . assertEquals ( aString , sut . getInstance ( ) )
Assert . assertNotNull ( tasks )
Assert . assertEquals ( 16 * iterations , lockedCounter . get ( ) )
assertEquals ( Arrays . asList ( "bar_1" , "bar_2" ) , json . getList ( "foo" ) )
assertNull ( factory . getBaseSkin ( facesContext ) . getParameter ( facesContext , Skin . GENERAL_BACKGROUND_COLOR ) )
assertEquals ( map1 , map2 )
Assert . assertFalse ( fastMergerDecisionMaker . isFastMergePossible ( fileMetadata ) )
assertThat ( e . getStatus ( ) , equalTo ( Status . NOT_FOUND ) )
assertTrue ( "Sun implementation took " + sunGap + " millisseconds and default implemetation took " + defaultGap + " millisseconds." , sunGap < defaultGap )
assertThat ( rowsAffected , is ( 1 ) )
Assert . assertTrue ( "Should have 0 event" , events . size ( ) == 0 )
assertNotNull ( insert )
assertEquals ( "Faire action sur \\\\*([^\\\\*]*)\\\\*" , descriptor . regex )
assertEquals ( "{a1:'v1',a2:'123',a4:'',b1:'true',b2:'123',b3:'null',c1:'v1',c2:'123',c4:''}" , r )
