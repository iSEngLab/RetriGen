assertEquals ( "property not set correctly", 0.25, bean. getDoubleProperty ( ) )
Assert. assertEquals ( IntSetTestUtility. getSetBits ( ). size ( ), wrappedBitSetBitmapBitSet. size ( ) )
assertEquals ( parameters, toTest. getDelegateConnectionParameters ( httpURLConnection ) )
assertFalse ( p1. equals ( null ) )
assertThat ( result. isValid ( ), is ( false ) )
assertThat ( minMax. fillCentralBlock ( board ), Matchers. is ( true ) )
assertEquals ( 0, connPerRoute. getMaxPerRoute ( route ) )
Assert. assertEquals ( ( new GeometricMean ( ) ). evaluate ( scores ), stats. getGeoMean ( ), 0 )
assertThat ( sortedPlugins, contains ( plugin1, plugin2, plugin3, plugin4 ) )
XmlAssert. assertEquals ( EXPECTED_XML_RESPONSE, xmlResponse )
assertEquals ( "", result )
Assert. assertEquals ( vector. dotProduct ( new Vector ( 10, 15 ) ), 7.5 )
assertEquals ( "Triangle area is not correct", 0, a, epsilon )
assertLog ( Log. DEBUG, "test debug argument argument2" )
assertPaths ( asList ( component. group ( ), component. name ( ), component. version ( ) ), paths, true )
assertEquals ( "INSERT INTO myTableName (custom_name) VALUES (?,?)", Utils. singleLine ( sql ) )
assertThat ( isValid, is ( false ) )
tester. assertRenderedPage ( HomePage. class )
assertEquals ( "Cell click should be logged", "A1", ctrl. getCell ( A1 ). getText ( ) )
assertFalse ( "isLoaded should return false if not all required elements are displayed and " + "RequireAll annotation is used.", testView. isLoaded ( ) )
assertEquals ( "POINT (0 0 0)", Evaluator. evaluate ( ex ) )
Assert. assertTrue ( this. manager. connect ( this. person1, this. family1 ) )
assertClients ( registryAdapterService, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_NULL_VALUE, REGISTRY_PROXY_LIST )
assertThat ( actualBrowser, IsEqualIgnoringCase. equalToIgnoringCase ( expectedBrowserCapabilityKey ) )
assertEquals ( Arrays. asList ( "a", "aa", "ab", "ac", "ba", "bb" ), kittens )
assertEquals ( 1, db. getAllLinks ( ). size ( ) )
assertTrue (! result )
assertTrue ( requestImpl. xhr ( ) )
assertEquals ( 5, result )
assertEquals ( 0, output. size ( ) )
assertEquals ( "Date parsing is wrong", expectedDate, mapper. readBitemporalDate ( columns, "vt_to" ). toDate ( ) )
assertThat ( target, is ( notNullValue ( ) ) )
assertEquals ( 0x51, options. getPort ( ) )
Assert. assertNull ( mContainerService. reacquireContainer ( containerIdMock ) )
Assert. assertEquals ( heigth, secondContainer. getHeigth ( renderingContext, wrapperRange ), 0.001 )
assertTrue ( lineages. size ( ) == 2 )
Assert. assertFalse ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isErrorEnabled ( ) )
assertTrue ( groupsManager. isGroupMember ( sess, group3, member ) )
Assert. assertEquals ( "true", result )
assertEquals ( 0, positionValues. length )
assertTrue ( brutalAds. isKarmaValid ( ) )
assertEquals ( "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", m. group ( ) )
assertThat ( updateSuccessful, equalTo ( false ) )
Assert. assertTrue ( "Stub exception was not forwarded.", stubFailed )
assertArrayEquals ( data, decompressed )
assertNotNull ( result )
paths. assertHasDigest ( INFO, actual, algorithm, expected )
assertThat ( indexOfLastScoreCalc, equalTo ( indexOfLastMedRec ) )
Assert. assertFalse ( this. mocker. getComponentUnderTest ( ). supports ( this. vocabularyInstance ) )
assertEquals ( expected, real )
assertTrue ( "Following base items are missing: " + Arrays. toString ( missing. toArray ( ) ), missing. isEmpty ( ) )
Assert. assertTrue ( ModuleUtil. matchRequiredVersions ( openmrsVersion, requiredOpenmrsVersion ) )
assertEquals ( ordered, result )
assertEquals ( "The resource you are attempting to access cannot be found", error. getString ( "reason" ) )
assertEquals ( "probability", 0.004993, probability, 0.00001 )
assertEquals ( foo, application. getNamespaces ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><test><null/></test>", stringifiedTestObject )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff19_" ) )
assertEquals ( expected, actual )
assertEquals ( "_cat/shards/testIndex", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertNull ( user )
assertEquals ( 404, response. getStatus ( ) )
assertTrue ( getTaint ( bc. imei )!= 0 )
assertEquals ( expResult, result )
assertEquals ( "", changeLogParameters. getValue ( "env", "null" ) )
assertEquals ( expected, result )
assertThat ( PlainDate. of ( 2000, 12, 1 ). with ( element. minimized ( ) ), is ( PlainDate. of ( 2000, 12, 2 ) ) )
assertThat ( job. getDuedate ( ), is ( addSeconds ( removalTime, START_DELAY ) ) )
assertEquals ( code, CodeModelTestsHelper. transformCode ( code, CodeModelTestsHelper. convertToString ( "X1Y" ) ) )
assertEquals ( expResult, result )
assertSame ( PRIO_NODE, compoundWrite. childCompoundWrite ( new Path ( "priority" ) ). apply ( EmptyNode. Empty ( ) ) )
assertEquals ( 0, serverStatus. getTotalTime ( ) )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"answer\\":{\\"P-Header\\":\\"value goes here\\",\\"Remote-Party-ID\\":\\"\\\\\\"John Doe\\\\\\"<sip:jdoe@foo.com>;party=calling;id-type=subscriber;privacy=full;screen=yes\\"},{\\"say\\":[{\\"value\\":\\"Hello, you were the first to answer.\\",\\"name\\":\\"say\\"}]}}]}" )
assertEquals ( expected, actual )
assertEquals ( uri1, uri2 )
assertEquals ( "Invalid budget ID", 251877074L, companyService. create ( ). getBudgetId ( ). longValue ( ) )
assertEquals ( ">a >b >c <c <b >d <d <a ", rec. buffer. toString ( ) )
assertEquals ( "x/y{@{http://c}n=1.0}(@{http://c}g=987.0)}", SelectorStepBuilder. toString ( steps ) )
assertEquals ( 1, target. getFilters ( ). size ( ) )
Assert. assertTrue ( true )
assertEquals ( "�尖�尖�尖�尖�尖�尖��\\n" + "��***��\\n" + "��*��\\n" + "��*��\\n" + "�尖�尖��\\n", printer. print ( board ) )
assertEquals ( 1, ret )
assertEquals ( "Translation failed", AuthorizationException. class, pelopsException. getClass ( ) )
assertThat ( crs, is ( expected ) )
assertEquals ( expected, result )
Assert. assertEquals ( expectedResponse, proxy. sayHello ( message ) )
assertEquals ( val. getPeriods ( ), 3654 )
TestUtils. assertEquals ( new double [ ] { 1, 1.0, 1.0 }, b. toArray ( ), 1.0e-15 )
assertEquals ( "test\\\\u00a0", property. getKey ( ) )
assertEquals ( BigInteger. ZERO, wallet. getBalance ( ) )
assertIdentical ( "/simple_parts.owl", unmerged )
assertResultSet ( res )
assertTrue ( GenotypeDataCompareTool. same ( genotypeData1, genotypeData2 ) )
assertEquals ( masterRoot, rootDir )
assertFalse ( "User data was cloned when we're cloning an inner document.", userDataMap. isEmpty ( ) )
assertEquals ( "W/\\"1\\"", request. getBody ( ). getIfMatch ( ). toASCIIString ( ) )
response. then ( ). log ( ). ifValidationFails ( ). assertThat ( )
assertEquals ( expected, actualQuery )
Assert. assertNotNull ( zoo )
assertEquals ( 5, interfaces. size ( ) )
context. assertIsSatisfied ( )
assertTrue ( matcher. doCredentialsMatch ( token, account ) )
assertNotNull ( state )
assertEquals ( expectedQuery, actualQuery )
Assert. assertArrayEquals ( expected, actualBoolean )
assertNotNull ( fixture )
assertThat ( getProcessingError ( ), allOf ( containsMissingStringParameterError ( "externalRestHttpsPort" ), containsMissingStringParameterError ( "externalRestIdentitySecret" ), containsMissingIntParameterError ( "externalOperatorCert" ), containsMissingIntParameterError ( "externalOperatorKey" ) ) )
assertSame ( future, underTest. collect ( futures, collector ) )
assertEquals ( expected, settings. getProperties ( ) )
PSLTest. assertRule ( dataStore, input [ i ], expected [ i ] )
UnitTestUtils. assertChiSquareAccept ( new String [ ] { "0", "1", "2" }, expected, observed, 0.01 )
assertThat ( runtimeInfo. getRuntimeClassName ( ), is ( "org.talend.components.${componentNameLowerCase}.runtime.${componentNameClass}Runtime" ) )
assertTrue ( sut. isEmpty ( ) )
assertEquals ( expected, actual )
assertTrue ( waitingPacketsQueue. isEmpty ( ) )
assertEquals ( "bound changed, event must be fired", 1, report. getEventCount ( EventType. UPPER_BOUND_CHANGED ) )
assertNotNull ( AuthorizedConnectApp. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertEquals ( truststorePath2, System. getProperty ( EmbeddedOozieServer. TRUSTSTORE_PATH_SYSTEM_PROPERTY ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFLoteEnvioRetornoRecebimentoInfo ( ). toString ( ) )
assertEquals ( unionWithStruct. innerStructSize ( ), 0 )
assertEquals ( "The records number is correct " + clusterName. getName ( ), 2, resultIterator. size ( ) )
assertEquals ( "foo_title", output )
assertFalse ( ranges. add ( "127.0.2.0/24" ) )
assertTrue ( i1. equals ( i2 ) )
assertThat ( "Wrong tab delimited string", vars. toString ( ), is ( "foo\\tbar\\n1\\t2" ) )
assertEquals ( 0x7B, leis. readUnsignedShort ( ) )
assertTrue ( true )
assertEquals ( "192.168.0.0/8", configuration. getNetworkMask ( ) )
assertTrue ( uvp. getFirstData ( ) == 25.2 )
assertEquals ( "Failed to generate enum switch block", SWITCH_BLOCK_ENUM, s )
assertEquals ( RestCallLoggerRule. DEFAULT_METHOD_NAME, r. getMethodName ( ) )
assertEquals ( BPResultType. PASS, result. getResultType ( ) )
assertEquals ( - 0.123, empty. getLatitudeError ( ), 0.001 )
assertEquals ( 1, listener. updatedInjectedFilters. size ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + destPdf, sourceFolder + cmpPdf, destinationFolder ) )
assertTrue ( equals )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "Valid cid without dash test failed.", CID_VALID, AdWordsSessionUtil. getClientCustomerId ( session ) )
assertEquals ( DataTypeManager. DefaultDataClasses. STRING, ( ( Expression ) query. getProjectedSymbols ( ). get ( 0 ) ). getType ( ) )
result. assertIsSatisfied ( 1000 )
Assert. assertEquals ( 1, ret )
assertTrue ( ( preValidationFailedEx. getMessage ( )!= null ) && ( preValidationFailedEx. getErrorIndex ( )!= null ) )
assertEquals ( m1, m2 )
assertNotNull ( afeTipoDescuento. getId ( ) )
context. assertTrue ( ar. succeeded ( ) )
Assert. assertEquals ( 2, userService. getUsers ( roles, true, true, true ). size ( ) )
Assert. assertTrue ( emitter. shutdown ( ) )
assertTrue ( futureDigest. digest ( ). keyDigest ( ). isEmpty ( ) )
assertFalse ( evaluator. shouldProxyHost ( "jenkins.io" ) )
assertThat ( path. isNormalized ( ), is ( false ) )
assertThat ( actual, equalTo ( expected ) )
assertEquals ( childProject1. getCustomWorkspace ( ), parentWorkspace )
assertEquals ( 0., calc. getInsertionData ( route, job, nVehicle, 0.0, null, Double. MAX_VALUE ). getInsertionCost ( ), 0.01 )
assertNotNull ( result )
assertMultilinesEquals ( "Percent(1.0)", text )
assertEquals ( "tpc/bi-hourly/year=2014/month=01/day=03/hour=120", path )
assertThat ( actualExceptionCode, is ( "throwable001" ) )
assertInternalWktEquals ( "Geodetic transformation [��France Geodetic Interpolation (1.0 - (1.0 2.0,2.0 2.0,3.0 2.0,3.0 2.0,3.0 0.0)]," + "[��France Geodetic Interpolation (1.0 - (2.0 0.0,2.0 0.0,2.0 2.0,3.0 2.0,3.0 2.0,3.0 2.0)), " + "((1.0 - (1.0 2.0,2.0 2.0,3.0 2.0,3.0 2.0,3.0 2.0,3.0 2.0,3.0 2.0)]," + "[��France Geodetic Interpolation (1.0 - (2.0 0.0,2.0 2.0,3.0 2.0,3.0 2.0)]," + "[��France Ge
assertResult ( result )
assertAnnotatedIgnored ( tables. at ( 0, 2, 0 ) )
assertEquals ( "ogc:foo". length ( ), n )
Assert. assertTrue ( success )
assertEquals ( mvjs. size ( ), 1 )
Assert. assertEquals ( "POST", properties. endpoint )
assertFalse ( it. hasNext ( ) )
assertEquals ( 0, workflowTypes. size ( ) )
assertEquals ( new Boolean ( true ), loop. iterator ( ). hasNext ( ) )
assertNotNull ( sealInputStream )
assertEquals ( in. toString ( ), out. toString ( ) )
assertFalse ( b )
assertNotNull ( result )
assertThat ( prozessor. getHostname ( ), is ( nullValue ( ) ) )
assertEquals ( ZippelGCD ( a, b ). monic ( ), EZGCD ( a, b ). monic ( ) )
assertEquals ( "success", result )
assertThat ( out. toString ( ), is ( String. format ( "Move of Rook%s in other cell%s", sep, sep ) ) )
assertEquals ( "Name_With-Various***Characters?", victim. readName ( ) )
assertEquals ( "", result )
assertThat ( eventListener. wasCalled, IsEqual. equalTo ( false ) )
assertNull ( exchange. getOut ( ). getHeader ( Headers. JOB_ID ) )
assertEquals ( expectedCustomer, customer )
Assert. assertEquals ( 0, encryCredentialManager. encrypt ( null ). length ( ) )
assertEquals ( 200, response. getStatusLine ( ). getStatusCode ( ) )
Assert. assertEquals ( 0, analyser. getNumberOfPickupsAtBeginning ( route ), 0.01 )
dataLoader. assertDataToJsonEqualsExpectedFileContent ( "testUsingCollectionHamcestMatchers.json", result )
assertEquals ( "foo", instance )
assertThat ( stringWriter. toString ( ), containsString ( "theHtml" ) )
assertEquals ( "finally", getValue ( ) )
assertTrue ( file == null )
assertTrue ( m. find ( ) )
Assert. assertFalse ( result )
assertEquals ( RELATIVE_URI, absolutify ( cssLink ) )
assertEquals ( "URI is not built correctly", new URI ( "http://foo/books/bar" ), newUri )
Assert. assertTrue ( tested. getTaskManager ( ) == null )
assertTrue ( p. await ( ) )
assertEquals ( "{\\"a\\":0}", n )
assertThat ( opt. isPresent ( ), is ( true ) )
Assert. assertEquals ( "password", result. trim ( ) )
assertEquals ( "T>Debug messages do not interpret emphasis", testLog. getMessage ( ) )
Assert. assertEquals ( "Lead ID should be generated", "Mr. Itai Agmon", get ( "LeadId" ) )
assertTrue ( validator. isValid ( new Object ( ), null ) )
assertArrayEquals ( refar, d. getResult ( ) )
assertThat ( insert. getRoutingDocument ( ), is ( doc ) )
assertEquals ( "(int x) -> (x* 2)", CodeModelTestsHelper. toString ( aLambda ) )
assertEquals ( "indexvaluesasc:myIndex", t. toString ( ) )
assertEquals ( "SELECT field.subField.index(0) FROM Class", q. toString ( ) )
assertSame ( fieldVar, result )
assertArrayEquals ( new long [ ] { 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, blocks. getBlockListAsLongs ( ) )
assertTrue ( wrapper. isRunInTx ( ) )
assertEquals ( expected, ievent. getEventObj ( ). getPayload ( ) )
assertTrue ( constraint. fulfilled ( iContext ) )
assertEquals ( HttpStatusCode. NO_CONTENT_204, response. getStatus ( ) )
assertColumnHeaderOrder ( 0, 1, 2, 3, 4, 8, 9, 10, 11 )
sensei. assertWriteXml ( prop )
assertEquals ( "UPDATE pm1.g1 SET e1 =?, e3 =?, e2 =?", update. toString ( ) )
assertEquals ( null, result )
assertEquals ( 42, impl. getPercentile ( 50, now + 1 ) )
assertEquals ( 1, list. size ( ) )
assertTrue ( "Jdbc realm should be created", ops. exists ( TEST_JDBC_REALM_ADDRESS ) )
assertEquals ( expected, stats )
assertEquals ( 0, call. getCount ( ) )
assertEquals ( "Non-exposed classPath resource", classPathResource. toString ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 07" ) )
assertEquals ( "IRight.m()", new A ( ). m ( ) )
assertTrue ( httpResponseExceptionThrown )
assertEquals ( Arrays. asList ( new ImmutablePair < String, String > ( "bar", null ), new ImmutablePair < String, String > ( "foo", null ), new ImmutablePair < String, String > ( "foo", null ), new ImmutablePair < String, String > ( "foo", null ), new ImmutablePair < String, String > ( "quux", null ) ), outputs )
assertEquals ( "", message )
assertEqualsAndHash ( one, two )
assertThat ( isMismatch, accepts ( TestMismatch. Instance, theMismatch ) )
assertEquals ( "[0, 2, 4, 6, 8]", IteratorToGeneratorAdapter. adapt ( range ). toCollection ( ). toString ( ) )
assertTrue ( "Should throw NoSuchColumnFamilyException", caughtNSCFE )
assertObjectEquals ( "{'in':'header',name:'Accept-Charset',type:'string'}", pi )
assertEquals ( deserialized, obj )
Assert. assertTrue ( patient. equals ( patientproxyobject ) )
assertExpectedInitResult ( harness. intialize ( workspaceRoot ) )
assertTrue ( instance. getCommandArguments ( true ). contains ( "viewtag=windows" ) )
assertions. isNotInstanceOfAny ( null )
Assert. assertEquals ( 1, handler. getContext ( ). getTablespaceVersionsMap ( ). values ( ). size ( ) )
assertEquals ( 2, Iterators. size ( iter ) )
Assert. fail ( gClients [ i ]. error. getMessage ( ) )
assertNotNull ( result )
assertThat ( new DOMSource ( expected ), isEquivalentTo ( new DOMSource ( xrdsDocument ) ) )
assertEquals ( 1.0, result, 0.1 )
assertEquals ( Arrays. asList ( "115200000", "asdf" ), getOutputStrings ( ) )
assertEquals ( "user1", response )
assertEquals ( new SchemaAndValue ( schema, struct ), avroData. toConnectData ( avroSchema, avroRecord ) )
assertEquals ( customer, responseImpl. getContent ( ) )
assertNotNull ( tg )
assertFalse ( "Should have failed to create a MapReduce command without a output", built )
assertFalse ( result. isEmpty ( ) )
assertEquals ( "geolocated_table_name", aggregator. getTableName ( ) )
assertSame ( chatLogger, testUser. getPrivchat ( ). getPrivchatLogger ( ) )
assertEquals ( "34 abc\\n", found )
given ( ). get ( uri + "/greetings" ). then ( ). assertThat ( )
assertThat ( emitter. consume ( ). get ( ), is ( ( Object ) Pair. of ( 1, "boza" ) ) )
Assert. assertEquals ( "sub", s )
assertEquals ( date. getValue ( ), new DateTime ( 123456789 ) )
Assert. assertEquals ( 0, drugs. size ( ) )
assertEquals ( "{\\"person\\":\\"浜诧��\\",\\"name\\":\\"Sayings of the Century\\",\\"age\\":8,\\"price\\":12.99}", event. toString ( ) )
assertFalse ( filter. shouldInclude ( source, "some.property" ) )
assertThat ( query, is ( notNullValue ( ) ) )
assertThat ( ByteUtil. toByte ( i ), is ( 1 ) )
Assert. assertFalse ( data. isToTest ( "foo.Bar", 3 ) )
assertNull ( s )
assertEquals ( "<a><b><xxx newElementAttribute=\\"1234\\"></xxx></b></a>", result. getResult ( ) )
assertNull ( statement. getId ( ) )
assertThat ( "No NullPointerException", npeThrown. get ( ), is ( true ) )
assertEquals ( expResult, result )
assertEquals ( HttpStatusCode. INTERNAL_SERVER_ERROR. code, response. getStatus ( ) )
assertThat ( future. get ( ), equalTo ( "all is well, nothing to see here" ) )
assertThat ( connectorRegistry. getConnectors ( ), hasItem ( connectorId ) )
Assert. assertNotNull ( funcionario )
assertEquals ( "TTGGGGC", msa. getPair ( ). toString ( ) )
assertEquals ( 1, objs. size ( ) )
assertEquals ( 1000, cnt. getCount ( ) )
assertNotNull ( injectionNode )
assertMatchers ( expectedMatcher, actualMatcher )
assertTrue ( "permission was not granted.", readAnalysisSubmissionPermission. isAllowed ( auth, 1L ) )
assertFalse ( routeSpecification. isSatisfiedBy ( itinerary ) )
assertEquals ( second, OptionalUtils. getFirst ( first, null ) )
Assert. assertNotNull ( cu )
assertEquals ( true, result. get ( 0 ). getHasHumanLabels ( ) )
assertThat ( args, contains ( "repo", "images", "foo", "1.0" ) )
assertTypeParameterIs ( ReflectionUtilTest. class )
assertEquals ( p1, p2 )
assertEquals ( 0, messageLatch. getCount ( ) )
assertNotNull ( certificate. getCertificate ( ). getBgpExtension ( ) )
assertThat ( name + " has no description", description, is ( notNullValue ( ) ) )
assertNotNull ( Credential. reader ( ). read ( ) )
assertEquals ( 0, latch. getCount ( ) )
assertThat ( getCompiledResult ( ), is ( true ) )
assertThat ( u. toString ( ), containsString ( name ) )
assertEquals ( false, result )
assertEquals ( ch, buf. getChar ( ) )
assertEqualsIgnoreLineEnding ( xmlString, "<?xml version='1.1' encoding='UTF-8'?><int64>1</int64>" )
assertFalse ( status )
YamlJsonAssert. assertEquals ( expected, actual, DocumentType. JSON )
assertThat ( ConnectionStrategy. backwardsCompatible ( usePrivateDnsName, connectUsingPublicIp, associatePublicIp ), equalTo ( ConnectionStrategy. PUBLIC_IP ) )
assertFalse ( ( Boolean ) result )
assertEquals ( "hello", new String ( serverHandler. data. get ( 0 ) ) )
assertTrue ( sink. getInvalidConfiguration ( ) )
Assert. assertTrue ( accept )
assertEquals ( node. getId ( ), "id" )
Assert. assertTrue ( response. getCommandOutput ( ). contains ( "Win32 BIOS" ) )
assertEquals ( expected, actual )
Assert. assertNotNull ( lfs )
assertEquals ( "tableName", database. escapeTableName ( null, null, "tableName" ) )
Assert. assertThat ( actual, is ( expected ) )
assertFalse ( iterator. hasNext ( ) )
assertEquals ( SimpleBigDecimalScore. of ( new BigDecimal ( "2.4" ) ), scoreDirector. calculateScore ( ) )
assertEquals ( 10, classUnderTest. getContentsNbrRowsToShow ( ) )
assertArrayEquals ( expectedTlv, decodedTlv )
assertTrue ( sink. invalidConfiguration )
assertTrue ( "Expected the test to generate a grid", checkGrid ( "Social_Profiles_Controls_Search_User" ) )
assertEquals ( XAdESForm. BES, f )
assertNotNull ( multiDatastream )
assertTrue ( res == 0 )
assertEquals ( expResult, result )
assertTrue ( "User's password updated successfully", success )
assertThat ( responseContent, containsString ( "JWT-Version: 1.0" ) )
assertContainsRegex ( WHERE + OPEN_CURLY + ":S" + SPACE + ":P" + SPACE + var ( "o" ) + OPT_SPACE + CLOSE_CURLY, query )
Assert. assertEquals ( "SELECT UUID();", text )
assertNotNull ( result )
assertEquals ( Resource. class, constructorDescriptor. newInstance ( ). getClass ( ) )
assertWhoAmI ( USERNAME_CLIENT )
assertEquals ( null, result )
checker. assertEquals ( "[" + i + "]", exp, act )
assertEquals ( "address read from " + hostname + ":" + port, endpoint. toInetSocketAddress ( ), socketAddress )
assertTrue ( BitsLong. test ( v, true, 63 ) )
assertEquals ( "UTF-8", XmlReader. getXmlProlog ( input, guessedEncoding ) )
assertExec ( "Gives the same value", Numbers. class, "stringToLong__ILjava_lang_String_2Ljava_lang_Integer_2Z", res, "123" )
Assert. assertEquals ( 0., analyser. getTimeWindowViolationAtActivity ( route. getActivities ( ). get ( 2 ), route ), 0.01 )
assertThat ( IntervalParser. of ( DateIntervalFactory. INSTANCE, formatter, BracketPolicy. SHOW_WHEN_NON_STANDARD, 2014, 5, 14 ). parse ( "20140227/20140514" ), is ( interval ) )
assertThat ( logger1, is ( not ( logger2 ) ) )
assertEquals ( exp, accum )
assertThat ( "Checking translation for frame " + entry. getKey ( ) + " was incorrect", protein. toString ( ), is ( expected ) )
assertThat ( value, equalTo ( "VALUE" ) )
assertEquals ( version. hashCode ( ), 0 )
Assert. assertTrue ( result. getBean ( ). getBean1Value ( ) instanceof Long )
assertNotNull ( o )
assertTodo ( expected, actual )
Assert. assertTrue ( Arrays. equals ( data, extracted ) )
assertTrue ( amqpsProperties!= null )
assertTrue ( entity. equals ( loadedEntity ) )
Assert. assertEquals ( getFullClassName ( fqdnName ), udf. getClassName ( ) )
Assert. assertTrue ( pss. toString ( ). contains ( "<http://example.org>" ) )
assertPermanentCount ( playerA, "Jace, Memory Adept", 1 )
assertEquals ( expected, document )
assertThat ( result, is ( false ) )
assertTrue ( true )
assertEquals ( logisticForward, sameDiffOuter. getFunction ( logisticForward ). getName ( ) )
assertTrue ( identifier. equals ( group. getIdentifier ( ) ) )
assertThat ( mentions, hasItem ( mentionedEntity ( 0, mention. length ( ), EntityType. CLASS, iri ) ) )
assertThat ( sourceUri, is ( "https://bitbucket.org/grubix/git/src/checkout/test.git" ) )
assertEquals ( m ( "_", "T", "method", 10L, "tstart", 1L, "tstop", 11, "calls", 3L, "begin", m ( "_", "B", "clock", 11 ), "children", l ( m ( "_", "T", "method", 12L, "tstart", 3L, "tstop", 10L, "calls", 2L, "children", l ( m ( "_", "T", "method", 14L, "tstart", 4L, "tstop", 9L, "calls", 1L, "error", errorToMap ( e ), "children", l ( m ( "_", "T", "method", 14L, "tstart", 4L, "tstop", 9L, "calls", 1L, "error", errorToMap ( e ) ) ) ) ) ) ) ), decodeTrace ( o. getChunks ( ) ) ) ) )
assertThat ( resources, contains ( orgId, parentOrgId, parentParentOrgId ) )
Assert. assertEquals ( TRANSLATED_MENU_CATEGORY_DESC, translation )
assertMockEndpointsSatisfied ( )
assertEquals ( "Escaped and escaped string do not match", orig, escaped )
assertNull ( presenter. getValue ( ) )
assertThat ( target. getHeight ( ), is ( 21 ) )
assertEquals ( "hello", request )
assertEquals ( "test", reader. getPsmConfig ( ). getName ( ) )
Assert. assertEquals ( "Microsoft.Devices", matcher. group ( 1 ) )
Assert. assertEquals ( ExchangePhase. IN, exchange. getPhase ( ) )
assertNotNull ( pcrManifest )
assertTrue ( page. asText ( ). indexOf ( "PASSED" )!= - 1 )
assertThat ( extractMonitorables ( timerAdapter ). get ( STDDEV ). get ( ), Matchers. < Object > is ( newStdDev ) )
Assert. assertEquals ( "\\"7\\":\\"foo\\",\\"3\\":\\"\\r\\n", jsonString )
assertEquals ( "test", echo. echo ( "test" ) )
assertEquals ( expected, actualQuery )
assertEquals ( "Expected 2 results!", 2, n )
assertEquals ( "[a,1,2,b]", buff. toString ( ) )
Assert. fail ( "Didn't get expected HPackException!" )
assertTrue ( factory instanceof ClasspathConfigFactory )
Assert. assertTrue ( Files. size ( tmfile. toPath ( ) ) > 0 )
assertEquals ( expectValue, actualValue )
assertNotNull ( PropertyUtils. getProperty ( result, "auditInfo" ) )
Assert. assertEquals ( dataHoraEvento, infoEventoCancelamento. getDataHoraEvento ( ) )
assertSame ( expected, actual )
Assert. fail ( "Caught unexpected ResourceHandlerException!" )
assertEquals ( "ubuntu", platform. getName ( ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoItemImpostoPISQuantidade ( ). toString ( ) )
assertEquals ( expected, x )
Assert. assertEquals ( jaegerConfig. getParamInteger ( ), 1 )
arraysWithCustomComparisonStrategy. assertIsSorted ( someInfo ( ), actual )
assertThat ( transferSuccessful, is ( false ) )
Assert. assertTrue ( "Incorrect file types returned", CollectionUtils. isEqualCollection ( types1, widget. getFileTypes ( ) ) )
Assert. assertEquals ( "(nt_change_insertion (nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 124)))) ins)", nt_change_insertion. toStringTree ( parser ) )
assertThat ( anyTS. isValid ( MICRO_OF_SECOND, 86399 ), is ( true ) )
assertEquals ( "Mismatched message at line #" + i, message, line )
assertTrue ( Pattern. matches ( "(?s).*/component01.jsp PASSED.*", page. asXml ( ) ) )
Assert. assertEquals ( fallbackOutput, got )
assertEquals ( expResult, result )
assertThat ( result, is ( 1 ) )
Assert. assertEquals ( objectType. getName ( ), generated. getName ( ) )
assertTrue (! result )
assertEquals ( "Base value is not properly parsed", "00000.0000", parsed )
assertThat ( buffer. isReadOnly ( ), is ( true ) )
Assert. assertEquals ( 0, result. getEntities ( ). size ( ) )
assertEquals ( postprocessed [ i ], row. getQuote ( ) )
assertThat ( result, containsString ( "PONG" ) )
editor. assertHoverContains ( "debug", "something" )
Assert. assertEquals ( false, errors. hasErrors ( ) )
assertEquals ( 2, p. get ( "a3" ). size ( ) )
assertEquals ( 2, filteredTodos. size ( ) )
Assert. assertTrue ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, Right. EDIT, this. doc ) )
assertTrue ( Arrays. equals ( etalon, array ) )
assertEquals ( numberOfCriterionsOfTypeResourceAndWorker, numberOfCriterionsOfTypeResource )
Assert. assertEquals ( "X: 10", s )
assertTrue ( statement. getReference ( ). isEmpty ( ) )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getAllPrivileges ( set ( "admin" ), ActiveRoleSet. ALL ) ). toString ( ) )
assertThat ( windows. minus ( empty ), is ( empty ) )
assertEquals ( p1. element0 ( ), m2 )
assertEquals ( "0.0000", d. toString ( ) )
assertThat ( rm. matches ( MockWebContext. create ( ). setRequestMethod ( "getInner" ). getMethod ( ), null ), is ( true ) )
assertThat ( date, is ( PlainDate. of ( 2012, 5, 21 ) ) )
assertTrue ( IsEqualInternally. areEqualInternally ( expectedResult, sut. extract ( content, 0 ) ) )
assertEquals ( 0, versionEntities. size ( ) )
assertTrue ( value. size ( ) > 0 )
Assert. assertNotNull ( solver )
assertThat ( provider. getSubject ( axiom ), is ( iriOptional ) )
assertEquals ( pos. getIndex ( ), 0 )
assertEqualLines ( "invalid renaming in p2: " + folder, getFileContents ( p2, type ), cu. getSource ( ) )
Assert. assertTrue ( "XML Base not found", base!= null )
assertEquals ( - 300, scorer. scorePosition ( board, context ) )
Assert. assertNotNull ( file )
Assert. assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf. getCumulativeLoss ( ), udtf. getCumulativeLoss ( ) < 800 )
assertEquals ( "Unsatisfied qualifier: 'unmatched'", e. getMessage ( ) )
Assert. assertEquals ( 0, childClass. count ( ) )
Assert. assertEquals ( versao. toString ( ), eventoCancelamento. getVersao ( ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
context. assertEquals ( 1, count. get ( ) )
assertEquals ( 500L, value. get ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/buildTypes/id:bt296", buildTypeUrl )
Assert. fail ( "Should have failed" )
assertThat ( result, is ( getAllFunctionsResponse ) )
assertEquals ( "BAZ", this. fooStateFSM. getCurrentState ( fooState ). getName ( ) )
assertTrue ( charsetPattern. matches ( "[" ) )
assertTrue ( files == null )
assertThat ( outputStream. toByteArray ( ). length, is ( greaterThan ( 16 * 1024 ) ) )
assertEquals ( 2, map2. size ( ) )
assertEquals ( "(dependencyBuilder.input(\\"A\\").build() || dependencyBuilder.input(\\"B\\").build() && " + "dependencyBuilder.input(\\"C\\").build())", inputLogicParser. parse ( root ) )
assertEquals ( d, np. getCurrentDate ( ) )
MatcherAssert. assertThat ( new PropertyBasedConfiguration ( ). systemProperty ( "key1", systemPropertyValue ). value ( ), CoreMatchers. is ( systemPropertyValue ) )
assertEquals ( embedCode, detail. get ( "embed" ) )
Assert. assertFalse ( this. manager. remove ( this. family1 ) )
Assert. assertTrue ( getSubject ( ). hasPermission ( "delete", "admin" ) )
Assert. assertEquals ( "Hub should be able to fulfill request", HttpServletResponse. SC_CREATED, response. getStatusCode ( ) )
Assert. assertEquals ( expected, jw. toString ( ) )
assertAlias ( sql, columnParam, "nor", param )
assertTrue ( errOutput. contains ( "Quota limit for file in COLD is incorrect" ) )
assertEquals ( Integer. valueOf ( 3 ), Integer. valueOf ( list. size ( ) ) )
assertions. isNotInstanceOfAny ( String. class )
assertOrder ( order, DATA_LENGTH, comparator )
assertArrayEquals ( "HelloWorld!". getBytes ( "UTF-8" ), result )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( 1.5, ed. getRealEigenvalue ( 0 ), 1.5e-15 )
assertEquals ( Location. LOCATION_LHS_FROM_ACCUMULATE_RESULT, getLastIntegerValue ( parser. getEditorInterface ( ). get ( 0 ). getContent ( ) ) )
assertThat ( paramList. size ( ), is ( 1 ) )
assertEquals ( removeLeadingAndTrailingSpacesOnEveryLine ( expectedLocalizedXLIFF ), removeLeadingAndTrailingSpacesOnEveryLine ( localizedAsset ) )
assertEquals ( Arrays. asList ( parser1, parser2, parser3 ), parsers )
assertTrue ( result )
assertThat ( analyzer, is ( CjkAnalyzer. class ) )
assertThat ( target. getBody ( String. class ), is ( notNullValue ( ) ) )
Assert. assertEquals ( "Hello World", endpoint. session. getWrappedRequest ( ) )
objects. assertIsEqualToComparingOnlyGivenFields ( someInfo ( ), actual, other, noFieldComparators ( ), defaultTypeComparators ( ), "name" )
assertEquals ( SC_OK, response. getStatus ( ) )
assertEquals ( b1, b2 )
assertNull ( "Expected an empty list", result )
assertEquals ( "Mismatched name read from stream", expectedName, name )
Assert. fail ( "No movies found" )
assertTrue ( m. nextChar ( )!= - 1 )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( layerCnt + 1, world. getLayers ( ). size ( ) )
Assert. assertEquals ( 1002, sprintService. getTeam ( "testTeam" ). getId ( ) )
assertEquals ( 900, res )
assertEquals ( rows - 1, sorter. convertRowIndexToModel ( rows - 1 ) )
Assert. assertEquals ( 0, this. sqlgGraph. traversal ( ). E ( ). has ( T. label, "friend" ). count ( ). next ( ), 0 )
assertThat ( result. getParameters ( ). get ( "sourceUrl" ), is ( nullValue ( ) ) )
assertTrue ( client. getRoles ( ). size ( ) > 0 )
assertEquals ( row, query ( bindings ). row ( 1 ) )
Assert. assertEquals ( "{\\"content\\":{\\"a\\":1,\\"b\\":\\"b\\"}}", msg. toString ( ) )
context. assertTrue ( result. isEmpty ( ) )
assertTrue ( medias. size ( ) > 0 )
assertEquals ( exepcted_individual, returned_individual )
Assert. assertFalse ( "Requests with different order of Accept options must not equal!", coapRequest1. equals ( coapRequest2 ) )
assertEquals ( "Date parsing is wrong", new BitemporalDateTime ( 5L ), mapper. readBitemporalDate ( columns, "vtTo" ) )
assertThat ( clock. currentTimeInMillis ( ), is ( 0L ) )
assertEquals ( "", result )
assertThat ( actual, is ( instanceOf ( ExpectException. class ) ) )
Assert. assertNotNull ( json. getString ( "uid" ) )
Assert. assertEquals ( configNew, configOld )
Assert. assertArrayEquals ( ENCODED_VALUE, byteOutputStream. toByteArray ( ) )
Assert. assertNull ( recvMessage )
assertEquals ( 200, connection. getResponseCode ( ) )
assertEquals ( "a/b", r )
assertions. isSorted ( )
assertTrue ( entity. getLifecycleListeners ( ). contains ( entity. getLifecycleListener ( ) ) )
Assert. assertNotNull ( bean1 )
Assert. assertEquals ( getElement ( "OBR.6", "SP.3" ), result )
assertEquals ( "value", bean. getString ( ) )
assertEquals ( 10, result. size ( ) )
assertFalse ( resultMessage ( result, PUT ), result. passedValidation ( ) )
assertKernel ( kernel, CIRCLE3, e )
Assert. assertEquals ( "3 啶�啶苦え啶�啶灌げ啷�", t. format ( new Date ( 2629743830L * 3L ) ) )
assertEquals ( "Hello {John} Doe", ResponseBodyInterpolator. interpolate ( "Hello {firstName} {lastName}", req ) )
Assert. assertEquals ( stringToEncrypt, decrypted )
assertMockEndpointsSatisfied ( )
Assert. assertTrue ( jsonEqual ( expResult, EntityFormatter. writeEntity ( entity ) ) )
assertFalse ( callRequestFrame. verifyAccept ( ) )
Assert. assertNotNull ( "null result from rule execution", execResult )
assertArrayEquals ( getPixels ( expected, 0, 0, expected. getWidth ( ), expected. getHeight ( ), null ), getPixels ( actual, 0, 0, actual. getWidth ( ), actual. getHeight ( ), null ) )
assertEquals ( DataStatus. ACTIVE, empty. getStatus ( Side. STARBOARD ) )
assertThat ( databaseMapping. getDatabasePrefix ( ), is ( "primary" ) )
Assert. assertEquals ( 0, countryList. size ( ) )
assertNull ( channel. basicGet ( q, false ) )
assertTrue ( screenshotFile. exists ( ) )
Assert. assertEquals ( test, expected )
Assert. assertNotNull ( rb )
assertEquals ( timestampBuilder. build ( ). toString ( ), result. build ( ). toString ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( actDate, expDate )
Assert. assertTrue ( customAnnotations. isEmpty ( ) )
assertThat ( result, equalTo ( expected ) )
assertNotNull ( result )
assertEquals ( "http://example.com?hoge=fuga&piyo=1&foo=foo", got. toString ( ) )
UnitTestUtils. assertEquals ( "Spearman's correlation matrix", createRealMatrix ( rData, 5, 5 ), correlationMatrix, 10E-15 )
Assert. assertEquals ( result. getResultSize ( ), 0 )
assertNotNull ( result )
Assert. assertNull ( t. thread ( messages ) )
Assert. assertEquals ( 5L, result. get ( "outputVariable1" ) )
assertEquals ( CSVFormat. Csv, csvFormat )
assertNull ( APMSpan. findPrimaryReference ( Arrays. asList ( ref1, ref2, ref3, ref4 ) ) )
assertEquals ( "http://apache.org/foo/bar?foo=bar&a=b&c=d&y=z&foo=zoo#foo", builder. toString ( ) )
Assert. assertNotNull ( controllerResponse )
assertEquals ( expected, bos. toString ( ) )
assertEquals ( "Date parsing is wrong", new BitemporalDateTime ( date ), mapper. readBitemporalDate ( columns, "ttFrom" ) )
assertEquals ( valueIn, valueOut )
assertEquals ( bridgeIid, terminationPointIId. getInstanceIdentifier ( ) )
assertThat ( arguments. getReadTimeoutMillis ( ), equalTo ( 0 ) )
assertThat ( result, containsString ( "<!DOCTYPE html>" ) )
assertArrayEquals ( new byte [ ] { 1, 2, 3 }, post. getImage ( ) )
Assert. assertEquals ( points. length * val, s, 0d )
assertNotNull ( u )
assertIdentical ( "/relax_equivalence_axioms_relaxed.obo", reasoned )
assertEquals ( "This does not exist", translated )
Assert. assertEquals ( expectedText, lastAlert. getText ( ) )
assertEquals ( ifStr, "if (!(org.uberfire.security.client.authz.AuthorizationManagerHelper.authorize(\\"myfeature\\"))) {\\n" + "  return;\\n" + "}" )
assertThat ( deferredResults1. size ( ), is ( 0 ) )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertEquals ( "EntitySetSample?entityKey=someKey&filterMap=filterValue", resultQuery )
assertThat ( q, is ( TermQuery. class ) )
assertThat ( bound. valueFor ( 1, 'b' ), is ( value ) )
assertNull ( millis )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertFalse ( session. from ( $ ( noteVar ) ). where ( builder. getValue ( ) ). list ( $ ( noteVar ) ). isEmpty ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertThat ( actual, is ( funcationMapper ) )
Assert. assertEquals ( Type. Managed, adapter. type ( ) )
assertEquals ( "/parent/dir", path. toString ( ) )
assertEquals ( Integer. valueOf ( 3 ), Integer. valueOf ( list. size ( ) ) )
assertFalse ( peerAcceptanceTestUtil. shouldAcceptConsumers ( component ) )
assertFalse ( metaChild. isAssignableFrom ( metaGrandparent ) )
assertNotNull ( typeDesc. getTypeName ( ) + " cannot be indexed.", nsObject )
assertEquals ( value, _context. getPropertyValue ( key ) )
assertEquals ( CompressionMethod. NULL, action. getOldValue ( ) )
assertNotNull ( patientRole )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( expectedList, sut. fetchPage ( 3 ) )
assertFalse ( map. isEmpty ( ) )
Assert. assertTrue ( cc >= 2 )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertNotNull ( report )
Assert. assertTrue ( fc1 == fc )
Assert. assertTrue ( isEqual ( distance, 0.6 ) )
assertEquals ( CellComparatorHelper. getSanitizedStaticValue ( cell ), "needle" )
assertEquals ( environment. httpPort ( ), loader. port ( ) )
assertEquals ( "Value {\\\\", result )
assertSame ( input, output )
Assert. assertEquals ( tag. type ( ), TagType. FLOAT )
assertEquals ( expResult, result )
assertTrue ( victim. isEnabled ( ) )
Assert. assertEquals ( desiredOutput, output )
assertTrue ( teamExternalGroups. isEmpty ( ) )
assertNotNull ( "addon must load lf-specific icon", UIManager. getInsets ( ColumnControlButton. COLUMN_CONTROL_BUTTON_ICON_KEY ) )
assertEquals ( EX_43_HASH, hexadecimalHash )
assertThat ( excepted, equalTo ( actual ) )
assertNotEquals ( collectorManager1, collectorManager2 )
Assert. assertEquals ( "yahoo.com", remoteWebDriver. getTitle ( ) )
Assert. assertEquals ( 1, a. getCbo ( ) )
assertThat ( bolt. getColumnVisibility ( "id" ), is ( vis ) )
assertEquals ( testAlgorithm, tlsCertificateAuthorityServiceCommandLine. getKeyAlgorithm ( ) )
assertContextOk ( ctx, "O1:doc:doc,O1:doc:ref", "Hello from @{Context[\\"messageHolder\\"].name}!", "Source" )
assertTrue ( new File ( "target/export7" ). exists ( ) )
assertResultSet ( res )
Assert. assertEquals ( pl, pp. getExponentPP ( dataDis [ i ] [ pl ] ), 10E-12 )
Assert. assertEquals ( Tokens. WILDCARD, RequestObjectHelper. getReturnKeys ( jsonWithNonArrayReturnKeyValue ) [ 0 ] )
assertThat ( res. toString ( ), is ( equalTo ( "my last response statusText is: OK" ) ) )
Assert. assertEquals ( "test2", testScopePath. getParentScopePath ( ). toString ( ) )
assertEquals ( c1. getSets ( ), c2. getSets ( ) )
assertEquals ( new Long ( 1234 ), longVal )
assertThat ( info. getClusterService ( CLUSTER ), sameInstance ( currentService ) )
Assert. assertNotNull ( new BeanBindMap ( ) )
assertEquals ( expectedSource, instrumentedSource )
assertEquals ( expectedQuery, actualQuery )
Assert. assertEquals ( 2, TestClassloader. findTestClass ( ) )
Assert. assertNotNull ( entity )
assertTrue ( aclDao. hasEntry ( principal, secureObject ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "x", x )
assertThat ( TestI18n. testMessage2. text ( "Test", "Message" ), is ( "Message Test Message" ) )
Assert. assertEquals ( "Wrong toString()", "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" + " msgType: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225" + ".OpenflowBasicClass oxm_field: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow" + ".oxm.rev150225.InPort oxm_field: org.opendaylight.yang.gen.v1.urn.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225" + ".OpenflowBasicClass oxm_field: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow" + ".oxm.rev150225.InPort oxm_field
assertThat ( unhandledException. getCause ( ), sameInstance ( cause ) )
assertTrue ( mMetaManager. getTierViewsBelow ( tierAlias ). contains ( tierAlias ) )
assertEquals ( b, ir. getBundle ( ) )
assertFalse ( survey. isAnswerSelected ( 1 ) )
assertTrue (! cs. isAfterLast1 ( ) )
Assert. assertEquals ( field. getRunTime ( ), 1.0e-15 )
assertEquals ( parseCalendar ( "20131104-00:00:00", TimeZone. getTimeZone ( "US/Eastern" ) ), dh. getCalendarAfter ( testingClock. getCurrentCalendar ( ) ) )
assertThat ( banco. getAgenciaECodigoBeneficiarioFormatado ( beneficiario ), is ( "1234/1234567" ) )
assertArrayEquals ( new byte [ ] { - 122, - 13, - 124, - 122, - 122, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, - 124, -
assertEquals ( originalFetchCount, timeline. getFetchCount ( ) )
assertThat ( indentCharacters, is ( "\\t" ) )
assertTrue ( engine. exists ( testIndex ) )
assertEquals ( expectedQuery, actualQuery )
assertThat ( specificResourceAllocation. getAssignments ( ), haveHours ( 4, 36 ) )
assertEquals ( 22, articles. size ( ) )
assertArrayEquals ( expResult, result )
assertTrue ( ex. isPrime ( 37 ) )
runner. assertNotValid ( )
assertTrue ( vrpBuilder. getLocationMap ( ). containsKey ( "start" ) )
assertEquals ( 0, walEdit. size ( ) )
assertEquals ( "select sql_0 from root", cqlMigrationResolver. extractScriptName ( new ClassPathResource ( "com/query/cql/ <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart> <S2SV_ModStart>
assertFalse ( convertor. isPresent ( ) )
assertEquals ( true, CheckDetector. isPlayerJustMovedInCheck ( bitBoard ) )
assertTrue ( operation. get ( ). isOk ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n\\tvar self = this;\\n\\tif (a)\\n\\t\\tRoyaleTest_A.base(this, 'foo');\\n}" )
assertThat ( m. matches ( ), hasItems ( Tuple. of ( 0, 1 ), Tuple. of ( 2, 3 ), Tuple. of ( 4, 5 ) ) )
assertTrue ( "Valid subfield codes not null", CollectionUtils. isValidSubfieldcodes ( validSubfieldCodes, null ) )
assertEquals ( result, "full" )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
assertThat ( foundClazz, nullValue ( ) )
assertNull ( tr. findCertInfo ( createCert ( ) ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertThat ( f2, sameInstance ( f1 ) )
assertEquals ( 1, client. execute ( new String [ ] { "get", "vms" } ). size ( ) )
assertEquals ( "param=value&client_id=client_id&redirect_uri=redirect_uri&nonce=nonce&timestamp=ts&scope=feeds&token=token&nonce=nonce", request. getOauthParams ( ). toString ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( boundary, BatchParserCommon. getBoundary ( contentType, 0 ) )
assertThat ( process. getAssignedTo ( ), is ( "name" ) )
assertFalse ( cv. supports ( Date. class ) )
assertNameAndQualifiedName ( tree, "fn", "mod.fn" )
Assert. assertEquals ( true, countries. size ( ) >= 83 )
assertEquals ( 123L, book. getId ( ) )
Assert. assertTrue ( homepage instanceof HomepageImpl )
assertEquals ( "ab%bghi,ab%bcde,abcdf,ab%igkl,ab%bghi,ab%bcde,ab%igkl,", target. toString ( ) )
assertEquals ( "custom 2", html )
assertThat ( historicJobLogExceptionStacktrace, notNullValue ( ) )
assertEquals ( "TestMetric", db. getLastValue ( "TestMetric" ) )
assertThat ( testUriStr, is ( expectedUriStr ) )
assertThat ( publicJobLink, not ( containsString ( "eu-central-1" ) ) )
assertArrayEquals ( expected, left. toByteArray ( ) )
assertEquals ( expResult, result )
Assert. assertThat ( allCategories, Matchers. contains ( "categoryA", "categoryB", "categoryC" ) )
assertEquals ( 2, underTest. getContributeParameterNames ( ). size ( ) )
assertEquals ( "No test cases should be skipped", 0, runTestsResults. getSkippedTests ( ). size ( ) )
assertEquals ( msg. toString ( ), handshakeMsg. toString ( ) )
assertEquals ( exampleValue, resourceEditProperty. getExampleValue ( ) )
Assert. assertEquals ( 0, children. size ( ) )
assertTrue ( reference instanceof SoftReference )
assertThat ( visibleText, is ( "foo" ) )
assertTrue ( "foo". equals ( c. getName ( ) ) && "foo". equals ( c. getValue ( ) ) )
assertEquals ( "Hello < There <&>", doc. select ( "div" ). first ( ). text ( ) )
assertEquals ( "Trimmed result should match", testPair. get ( 1 ), postProcessed )
assertThat ( response. getPersonInformationStructure ( ). getRegularCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getPersonNameStructure ( ). getSimpleCPRPerson ( ). getPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( ). getSimpleCPRPerson ( )
assertTrue ( schemaRegistry. getHostnameVerifier ( ). verify ( "localhost", null ) )
assertFalse ( isServiceReady )
this. tester. assertContains ( "<p class=\\"empty\\">blah</p>" )
assertEquals ( "board", model. getAttribute ( "players" ) )
assertEquals ( LogSeverity. FINE. toString ( ), severity. toString ( ) )
Assert. assertEquals ( expectedCreator, newConceptSource. getCreator ( ) )
assertOut ( "var /** @type {number} */ a = 0xabc" )
Assert. hasText ( null, "has text" )
assertions. containsOnly ( values )
assertNotSameFormat ( vendor. getFormatFor ( customFormatID, Locale. GERMAN, DateFormat. LONG ), dmy )
assertNotNull ( client )
assertEquals ( "a,b,c,d,e", toString ( foundOrder ) )
Assert. assertTrue ( select. execute ( ). size ( ) == Constant. SIX )
Assert. assertTrue ( newPointAvailable )
assertEquals ( "d", result. toString ( ) )
assertEquals ( 4, container. indexOfId ( id ) )
Assert. assertEquals ( s, prot. getName ( ). get ( 0 ). getSequence ( ) )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
assertThat ( address, is ( equalTo ( InetAddresses. forString ( "localhost" ) ) ) )
Assert. assertEquals ( xmlEsperado, lacre. toString ( ) )
assertEquals ( 100.0, s. getDeliveryServiceTime ( ), 0.01 )
assertEquals ( 2, categories. length )
Assert. assertNotNull ( "WebResourceFolder must not be null", facet. getWebResourceFolder ( ) )
assertEquals ( expectedIndex, artistIndex )
Assert. assertFalse ( errors. hasErrors ( ) )
assertEquals ( 0, result. size ( ) )
assertEquals ( expectedSqlForMathOperations3 ( ), result )
assertEquals ( PERSON_COUNT, actual )
assertEquals ( "\\"a.j.\\"^^xsd:string", name )
assertThat ( matrix. isIdentity ( ), IsEqual. equalTo ( true ) )
assertEquals ( 0, indexEntries. size ( ) )
assertEquals ( 0.0, accessEgressCalc. getCosts ( iContex ), 0.01 )
assertThat ( capturedEvents, hasItem ( mdcFormat ( "testMDCInvokeOrdered", "foobar" ) ) )
assertEquals ( HttpStatusCode. NOT_FOUND_404, response. getStatus ( ) )
assertFalse ( authorizationManager. authorize ( perspective1, user1 ) )
assertThat ( html, is ( "<select id=\\"w1\\" name=\\"w1\\" size=\\"1\\">" + "<option value=\\"value1\\" selected=\\"true\\" selected=\\"true\\"/>" + "<option value=\\"value1\\" selected=\\"true\\"/>" + "</option>" ) )
assertEquals ( fromObj, fromStr )
assertThat ( deserialize ( output. toByteArray ( ) ), is ( data ) )
assertEquals ( methodVariableBindings. size ( ), 1 )
assertEquals ( NAME_NODE, action. getNameNode ( ) )
assertNull ( wrapper. getArtist ( ) )
Assert. assertTrue ( newSql. equals ( "SELECT t.name, sum(t.price) FROM cpcplan" + suffix + " t GROUP BY t.name,t.id" + suffix ) )
assertArrayEquals ( expectedBytes, actualBytes )
Assert. assertEquals ( "TEST5", text )
assertTrue ( converter. canConvert ( Index. class ) )
assertNotNull ( deltaClient. get ( dsRef ) )
assertThat ( axioms, hasItem ( axiom ) )
assertThat ( "No tags should have been returned.", actualTag, is ( equalTo ( expectedParseResult ) ) )
assertEquals ( "localhost", config. getAddress ( ). toString ( ) )
Assert. assertEquals ( "NURSE0,OID0,OBSERVATION0,20150203.235809.985-0500,OID0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
assertTrue ( "Should not escape escaped character", hasspecialchar )
assertEquals ( "urn:oid:0.1.2.3", parsed. getEntry ( ). get ( 0 ). getResource ( ). getIdElement ( ). getValue ( ) )
assertThat ( itr. hasNext ( ), is ( false ) )
assertEquals ( 2, list. size ( ) )
assertEquals ( 3, css. getSeverity ( ) )
assertThat ( exitStatus. exitStatus ( ), is ( equalTo ( ( byte ) 0x1 ) ) )
assertThat ( xml, not ( containsString ( "recipients" ) ) )
assertEquals ( Money. of ( Money. of ( 4, "CHF" ), BasisPoint. of ( BigDecimal. valueOf ( 10 ) ) ), BasisPoint. of ( BigDecimal. valueOf ( 10 ) ). apply ( m ) )
assertNull ( "Got a conversion handler", config. getConversionHandler ( ) )
assertThat ( notAnnotated. buildEmbedder ( ), instanceOf ( MyEmbedder. class ) )
assertThat ( matcher. matches ( literal ), is ( false ) )
assertThat ( url. toUri ( ), is ( equalTo ( "http://localhost:3000/products?q=doni" ) ) )
Assert. assertEquals ( buff. toString ( ), result. getContext ( ) )
assertEquals ( expResult, stringBuilder. toString ( ) )
assertTrue ( EqualsBuilder. reflectionEquals ( config, config2, "keyStore", "ourCertificate" ) )
assertThat ( response. getBody ( ), containsString ( "Hello World, Buddy" ) )
assertEquals ( 0, rs. getInt ( 1 ) )
Assert. assertEquals ( "com.fizzed.odata.edm.navigation.NavigationPropertyDefault", name )
assertEquals ( expected. trim ( ), output. trim ( ) )
assertEquals ( expected, found )
assertSame ( toTest, toTest. setParamsSerializer ( Serializer. class ) )
assertThat ( expectedAgents, is ( devMachine. getAgents ( ) ) )
assertTrue ( latch. await ( 1, TimeUnit. SECONDS ) )
assertEquals ( expected, actual )
assertTrue ( "Expected null result", result == null )
assertFalse ( checker. isDetected ( ) )
assertTrue ( "TreeGrid should not grow when it should've been disabled.", treeGrid. getSize ( ). getWidth ( ) > tree. getSize ( ). getWidth ( ) )
assertTrue ( "Got: " + j, j >= 0 && j <= Integer. MAX_VALUE )
assertThat ( actual, equalTo ( expected ) )
assertEquals ( "Expected 100 results!", 1001, rows. size ( ) )
assertThat ( result, is ( "NodeId" ) )
Assert. assertNotNull ( "no topic found with topic name in topic map", topic )
assertEquals ( rootFunction. getId ( ), overwriteFunction. getId ( ) )
assertEquals ( "after backupDeleted", triggerSpec )
assertTrue ( wasCalled. get ( ) )
assertEquals ( expectedResult, cut. getAliadaEventTypeFrom ( anEventTypeThatIsInCache ) )
assertEquals ( Integer. valueOf ( 35007 ), test )
assertThat ( findFeature ( featureList, "GetLocalListVersion" ), is ( instanceOf ( GetLocalListVersionFeature. class ) ) )
assertTrue ( news. checkVisibilityFor ( moderator ) )
assertEquals ( assertion, getTest )
Assert. assertNull ( r. getRequest ( ). getSession ( ). getAttribute ( SEC_CONTEXT_ATTR ) )
Assert. assertArrayEquals ( new String [ ] { "bow=hello", "bow=world", "bow=hello" }, generator. extractFeatures ( TOKENS, new String [ ] { "hello", "world", "world" }, Collections. emptyMap ( ) ). toArray ( ) )
Assert. assertEquals ( "http://schemas.xmlsoap.org/soap/envelope/SOAP-Action", hmd. getOperationName ( ) )
assertThat ( manager. addIfNeeded ( "logger", false ), is ( false ) )
assertTrue ( errorsContainer. equals ( errors ) )
assertTrue ( stack2. isEmpty ( ) )
assertEquals ( "", result )
assertSame ( id, result )
assertEquals ( "my_silly_filename.pem", result )
assertTrue ( em instanceof WebApplicationExceptionMapper )
assertThat ( environmentVariables. getProperty ( "webdriver.driver" ), is ( "safari" ) )
assertThat ( reason, assumingFields ( "myField" ). areNotModifiedAndDoNotEscape ( ) )
assertThat ( XMLDuration. from ( Time. of ( - 123456789 ) ), is ( d ) )
assertEquals ( Math. pow ( 2d, 4d ), e. evaluate ( ), 0d )
assertEquals ( "caseTask", activityType )
assertEquals ( "b", grid. getCell ( 1, 0 ). getText ( ) )
assertEquals ( expectedCredential, credential )
assertThat ( "VAL3, VAL4", obj, equalTo ( 4 ) )
assertEquals ( getLabel ( ), 0.0, eye. minus ( m3 ). getEuklideanValue ( ), TOLERANCE )
Assert. assertEquals ( 2, s. x )
Assert. assertEquals ( 7, obs. getObsId ( ) )
assertEquals ( expected, built )
Truth. assertThat ( gson. toJson ( treeMessage ) )
assertEquals ( rp, point )
assertFalse ( pair. isPresent ( ) )
assertTrue ( doc. getGrammaticalFeatures ( ). isEmpty ( ) )
assertTrue ( seen. add ( type ) )
assertNotNull ( result )
assertEquals ( "Hello World!", interpreter. eval ( "Hello World!" ) )
Assert. assertEquals ( expectedOutput, output )
assertThat ( excludeSkippedAndIgnored ( outcomes ). size ( ), is ( 2 ) )
assertEquals ( expected, future. getValue ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 2, warnings. size ( ) )
assertEquals ( request. getCriteriasByTable ( ). size ( ), 1 )
assertEquals ( foobar, request. getEncodedParameter ( "param", "default" ) )
Assert. assertNotNull ( read )
assertEquals ( 2, domainIds. size ( ) )
assertTrue ( fs. deleteOnExit ( path ) )
arrays. assertStartsWith ( description, new short [ 1 ], new short [ 0 ] )
Assert. assertTrue ( curl. contains ( "curl -X POST -L 'person@gmail.com' -P 'hunter2'" ) )
assertEquals ( TEST_CONTENT, out. toString ( ) )
assertTrue ( sqlString. contains ( "desc" ) )
assertFalse ( monitor. contains ( patch2 ) )
assertThat ( result. endsWith ( expectedString ), is ( true ) )
assertNotNull ( slf4jInfoWriter )
Assert. assertEquals ( new HashSet < > ( Arrays. asList ( new NotNullDefinition ( "table1", "IS NOT NULL" ), new NotNullDefinition ( "table2", "IS NOT NULL" ), new NotNullDefinition ( "table3", "IS NOT NULL" ), new NotNullDefinition ( "table4", "IS NOT NULL" ), new NotNullDefinition ( "table5", "IS NOT NULL" ), new NotNullDefinition ( "table6", "IS NOT NULL" ), new NotNullDefinition ( "table5", "IS NOT NULL" ), new NotNullDefinition ( "table6", "IS NOT NULL" ) ), new HashSet < > ( notNullDefinitions ) )
assertArrayEquals ( a, dbr. query ( "SELECT INTA FROM CA_TEST WHERE INTA = $1", List. of ( new Object [ ] { a } ) ). at ( 0 ). getArray ( "inta", short [ ]. class ) )
assertTrue ( r1 instanceof PublicCloneable )
assertRequest ( "DELETE", "Call/%s/Record/", callId )
assertLoadBalanced ( two. loadBalanced )
assertTrue ( expected. intersection ( other ) )
Assert. assertEquals ( expected, actual )
assertTrue ( ex. isPrime ( 81 ) )
assertTrue ( result. get ( ) )
Assert. assertNotNull ( product )
Assert. assertEquals ( "GET", s )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertTrue ( Arrays. equals ( pktSerialized, actual ) )
assertThat ( webConfig. isGWTServiceServletDefined ( ), is ( true ) )
assertTrue ( md. toString ( ), md. isEmpty ( ) )
assertEquals ( 0, entities. size ( ) )
assertTrue ( entityVersion. toString ( ). contains ( "Version" ) )
assertTrue ( thisMetaPage. hasProperty ( RDF. type, API. ListEndpoint ) )
assertTrue ( batteryInfos. size ( ) == 0 )
assertOutputSameTextFile ( gen, "DefineConstructor_PM.java.txt" )
assertEquals ( formatedValue, "12345-678" )
assertEquals ( false, typeUsage. isInterface ( new InFileSymbolResolver ( "java/lang/List" ) ) )
Assert. assertFalse ( "No configs were found", configs. isEmpty ( ) )
assertEquals ( "value1", claims. get ( "claim1" ) )
Assert. assertEquals ( HttpServletResponse. SC_FORBIDDEN, response. getStatus ( ) )
Assert. assertEquals ( view, SENSOR_CREATE_VIEW )
Assert. assertNotNull ( result )
assertNull ( converter. getAsObject ( facesContext, new UIPanel ( ), null ) )
assertThat ( ts. with ( PlainTime. COMPONENT. roundedToFullHour ( ) ), is ( PlainTimestamp. of ( 2014, 12, 31, 23, 0 ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( filename, cmpFilename, destinationFolder, "diff_" ) )
assertTrue ( items. size ( ) > 0 )
assertEquals ( 24, this. policy. getMaxReservedTime ( ) )
assertTrue ( distance <= 0.5 )
assertInstanceOf ( "Expected y = -f(-x)", ConcatenatedTransformDirect1D. class, transform )
Assert. assertTrue ( future. get ( ) )
assertNull ( prismNormalizer )
assertThat ( javaTypeFinder. isTypeOf ( primitiveSubType, primitiveType ), is ( false ) )
assertEquals ( expect, DateUtils. addTime ( start, Calendar. MONTH_OF_YEAR, 1 ) )
assertTrue ( response. contains ( "I" ) )
assertEquals ( 1, vertices. size ( ) )
assertFalse ( "check all of reservation-2 is removed from hierarchy", vo2BasePath. newChild ( "cms" ). newChild ( "id-2" ). newChild ( "atlas" ). newChild ( "scrATCH" ). newChild ( "id-1" ). newChild ( "id-2" ). newChild ( "atlas" ). newChild ( "cms" ). newChild ( "id-2" ). newChild ( "scrATCH" ). newChild ( "id-2" ). newChild ( "id-2" ). newChild ( "cms" ). newChild ( "id-2" ). newChild ( "atlas" ). newChild ( "atlas" ). newChild ( "id-1" ). newChild ( "id-1" ). newChild ( "cms" ). newChild ( "atlas" ). newChild ( "id-2" ). newChild ( "id-2" ). newChild ( "scrATCH" ). newChild ( "id-2" ). newChild ( "type-2" ). newChild ( "name-2" ). newChild ( "
assertThat ( this. url, is ( equalTo ( "/context/dispatcher/one/two/three" ) ) )
assertNotNull ( config )
Truth. assertThat ( counter. count ( batch ) )
assertEquals ( expectedTriggerTime, actualValue )
assertEquals ( new Dimension ( 50, 50 ), ac. getValue ( ). getSize ( ) )
assertKernel ( kernel, ANNULUS, e )
assertNull ( c )
assertParseTree ( rootNode ( "Ben", node ( "?", "@", "@", "?", stringNode ( "?", "@", "@" ), stringNode ( "?tel", "@" ), stringNode ( "?", "@" ), stringNode ( "?", "@" ), stringNode ( "?", "@" ), stringNode ( "?", "@" ), stringNode ( "?", "@" ), stringNode ( "?", "@" ), stringNode ( "?", "@" ), stringNode ( "name", "Ben" ) ), tree )
assertEquals ( expected, actual )
assertEquals ( 2, cookies. size ( ) )
assertEquals ( 0, JCasUtil. select ( jcas, Token. class ). size ( ) )
assertDefaultSampler ( samplingProfiler )
assertFalse ( filter. getExpr ( ) instanceof ExprInfo )
assertTrue ( voter. voteMatch ( affiliation, organization ) )
assertEquals ( result, "2007-12-03 - 10:15:30" )
assertOut ( "break" )
assertThat ( result, is ( jsonNull ( ) ) )
assertThat ( name. getSegments ( ), contains ( "hello" ) )
assertEquals ( "Hello", ( ( BizExceptionNoDefaultConstructor ) read ). getMessage ( ) )
assertTrue ( rpbh instanceof RewriteParameterizedBatchHandler )
Assert. assertEquals ( "removal", result )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
Assert. assertEquals ( 7, ( ( VersionMessageWrapper ) list. get ( 0 ) ). getMessageBuffer ( ). readableBytes ( ) )
assertFalse ( ValidationUtils. hasValidationFailures ( vrs ) )
Assert. assertFalse ( "OnValidationError returns false, the isValidDate method should return false.", isValid )
assertEquals ( 23, a )
Assert. assertSame ( "Incorrect environment", environment, comp. getEnvironment ( ) )
assertEquals ( "Response body is not correct.", USER_IN_REALM1_WITH_INFIX_AND_SUFFIX, Utils. makeCallWithBasicAuthn ( principalServlet ( webAppURL ), USER_IN_REALM1_WITH_INFIX_AND_SUFFIX, CORRECT_PASSWORD, SC_OK ) )
assertTrue ( logger. isWarnEnabled ( ) )
Assert. assertTrue ( t. hasOriginalTemplate ( ) )
assertEquals ( exp, res )
assertEquals ( 0, changeSets. size ( ) )
Assert. fail ( "NPE must be thrown" )
assertNotNull ( builder. parse ( "{\\n" + "  \\"type\\" : \\"QuickNotepad\\",\\n" + "  \\"name\\" : \\"Hola\\",\\n" + "  \\"link\\" : {\\n" + "    \\"type\\" : \\"RefScenario.java\\",\\n" + "    \\"href\\" : \\"http://www.w3.org/2001/XMLSchema-instance.java\\"\\n" + "  },\\n" + "  \\"name\\" : \\"Hola\\",\\n" + "  \\"type\\" : \\"RefScenario.java\\",\\n" + "  \\"link\\" : {\\n" + "    \\"type\\" : \\"RefScenario.java\\",\\n" + "    \\"href\\" : \\"http://www.w3.org/2001/XMLSchema-instance#QuickNotepad\\",\\n" + "    \\"name\\" : \\"Hola\\",\\n" + "    \\"type\\" : \\"RefScenario.java
Assert. assertEquals ( Tag. DEFAULT_VALUE, tag. getValue ( ) )
assertThat ( graphManager. getGraph ( ). traversal ( ). V ( ). has ( "tim_id", createEntity. getId ( ). toString ( ) ). has ( "rev_to_one", createEntity. getRev_to_one ( ) ). count ( ), is ( 1L ) )
assertThat ( selected. entrySet ( ), is ( empty ( ) ) )
assertTrue ( response. contains ( "I" ) )
assertEquals ( this. q2Y1900, next )
assertEquals ( header, request. getHeader ( ) )
assertEquals ( 8, countFiles ( iter ) )
assertNotNull ( proxy1. getBackend ( ) )
Assert. assertNotNull ( savedTask )
assertThat ( result, Matchers. equalTo ( "&test1=blah1&te&st2=bl&ah2&test3&" ) )
assertEquals ( "Thank you very much.", email. getVisibleText ( ) )
assertEquals ( 8, s. detectCycle ( l1, l2 ). val )
assertEquals ( IllegalArgumentException. class, e. getClass ( ) )
assertEquals ( EntityNameCharType. BOUNDARY, type )
assertEquals ( "H2", database. getMetadataStore ( ). getTable ( "NAME" ). getTable ( ). getTableName ( ). getString ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + filename, sourceFolder + "cmp_" + filename, destinationFolder, "diff_" ) )
shorts. assertNotLessThan ( description, actual, expected )
assertEquals ( 15, TestUtils. getPropertyValue ( interceptor, "retryPolicy.retryPolicy.maxAttempts" ) )
Assert. assertEquals ( "Content-Type: multipart/form-data; name=\\"test\\"; filename=\\"hello world\\"", out. toString ( StandardCharsets. UTF_8. name ( ) ) )
Assert. assertEquals ( expResult, result )
assertEquals ( "say:hello", hello )
assertThat ( reader, is ( instanceOf ( JiraSearchReader. class ) ) )
assertEquals ( mockResponse, testResponse )
Assert. assertEquals ( "someProperty", expr. prettyPrint ( ) )
assertEquals ( "{\\"@context\\":{" + "\\"@vocab\\":\\"http://schema.org/\\"," + "\\"@vocab\\":\\"http://schema.org/\\"," + "\\"@type\\":\\"Offer\\"," + "\\"extension\\":\\"org.kie.w3c.core.v1.CRUD-COLLECTION\\"}," + "\\"@type\\":\\"Offer\\"," + "\\"price\\":8.95," + "\\"priceSpecification\\":{" + "\\"@type\\":\\"UnitPriceSpecification\\"," + "\\"price\\":19.95," + "\\"priceCurrency\\":\\"USD\\"," + "\\"pricePrice\\":19.95," + "\\"priceCurrency\\":\\"USD\\"," + "\\"priceSpecification\\":{" + "\\"@type\\":\\"UnitPriceSpecification\\"," + "\\"price\\":3.99," + "\\"priceCurrency\\":\\"USD\\"," + "\\"priceSpecification\\":{" + "\\"@type\\":\\"UnitPriceSpecification\\"," + "\\"price\\":19.95," + "\\"price\\":19.95," + "\\"priceCurrency\\":\\"USD\\"," + "\\"priceSpecification\\":{" + "\\"@type
assertTrue ( ScriptTestUtil. scriptIsInstanceOfScript ( testScript, expectedScript ) )
assertEquals ( "Has one child with jssonns:ns", "MyMessage", root. getTree ( ). get ( 0 ). getStringValue ( ) )
Assert. assertTrue ( methods. contains ( HttpMethod. POST ) )
Assert. assertTrue ( this. component. setCollaborators ( this. entity, collaborators ) )
Assert. assertTrue ( true )
assertSame ( GBP_2_34, test )
assertEquals ( DecodeQualification. INTENDED, plugIn. getDecodeQualification ( path ) )
Assert. assertNotNull ( addressResultsDto )
assertThat ( model. getChildCount ( grandson ), equalTo ( 0 ) )
assertEquals ( GRADOOP_ID_VAL_8, p. getGradoopId ( ) )
assertThat ( response. getStatus ( ), equalTo ( 500 ) )
assertEquals ( 110, dt. intValue ( ) )
assertThat ( target. getGoals ( ), contains ( "first", "second", "third" ) )
assertNotNull ( result )
Assert. assertEquals ( expectedExceptionMessage, thrownExceptionMessage )
Assert. assertEquals ( name + " " + idType + " " + version, agent, clone )
assertEquals ( totalUniqueNodes, loader. getNumGenes ( ) )
assertTrue ( newYearsEve. isBefore ( newYearsDay ) )
assertEquals ( "ok", driver. findElement ( By. name ( "ok" ) ). getText ( ) )
assertThat ( params. isMonochrome ( ), equalTo ( true ) )
assertEquals ( pdfboxValues, acrobatValues )
assertEquals ( EXPECTED_BYTE_REPRESENTATION, IOUtils. toString ( signedTransaction. toByteArray ( ) ) )
assertThat ( intOrString1, equalTo ( intOrString2 ) )
assertNotNull ( actual )
assertEquals ( expectedBalance, customer. getBalance ( ), 0.001f )
assertEquals ( "bar", rs. getString ( 1 ) )
assertArrayEquals ( new long [ ] { 0, - 1, - 1, - 1, - 1, - 1 }, blocks. getBlockListAsLongs ( ) )
assertEquals ( 0, actual. size ( ) )
assertThat ( result, equalTo ( v ) )
assertEquals ( "", status. getDescription ( ) )
assertThat ( result, is ( outbound ) )
assertEquals ( 10, events. size ( ) )
assertThat ( query. asXml ( ), is ( equalTo ( expected ) ) )
assertEquals ( false, result )
assertEquals ( 400, res )
assertTrue ( BCrypt. checkpw ( plain, expected ) )
Assert. assertEquals ( 2, users. size ( ) )
assertTrue ( rulesThatHadErrors. remove ( "Incoherent restrictions 8" ) )
assertEquals ( expResult, result )
assertTrue ( target. isClosed ( ) )
assertEquals ( "a<V>\\n", found )
assertEquals ( object, index. get ( object ) )
assertEquals ( "Validation message text not correct", "Error found for {0}", messageText )
assertThat ( uri, is ( "http://user:password@example.com:8080/path1?bar=baz&q1=v1&q2=v2" ) )
assertThat ( mapOutput. size ( ), is ( 0 ) )
assertEquals ( "an=hello.wav;an=world.wav", result )
assertNull ( ic. getItem ( object1 ) )
assertEquals ( set, set1. get ( ) )
assertNotEquals ( otherHashCode, foreignableFieldHashCode )
assertEquals ( expected, actual )
assertEquals ( "test", echo. echo ( "test" ) )
testRunner. assertAllFlowFilesTransferred ( EncodeContent. REL_FAILURE, 1 )
assertEquals ( 2, depends. getDependsOnTouchable ( ). size ( ) )
assertEquals ( expectedHtml, html )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "Invalid JSON", value, JsonUtils. getStatementAsJson ( payload ) )
assertThat ( javaDocComment, containsString ( "(Required)" ) )
Assert. assertEquals ( "User name doesn't match", USER_NAME_WITH_DELIMITER, info. getUser ( ) )
assertEquals ( 10, filter. getFrom ( ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) <= 'literal'" ) )
assertEquals ( sumLabel. getText ( ), String. valueOf ( number ) )
Assert. assertEquals ( 400, response. getStatus ( ) )
Assert. assertEquals ( SIMPLE_RETURN_CODE. TIMEOUT, check. getErrorType ( ) )
Assert. fail ( "Expected ConfigurationException" )
assertEquals ( "unmarshalledJSON", resp. getResponseBody ( ). trim ( ) )
assertEquals ( a, ArraysUtil. slice ( a, 0, 3 ) )
Assert. assertEquals ( expectedNode. toString ( ), pdoc. toString ( ) )
assertHealthCheck ( client. execute ( get ) )
Assert. assertFalse ( res. isEmpty ( ) )
assertResponseContainsModel ( "<ul><li><li><a href='/repository/resourceTypes/1'>cq:Page</a></li></ul>", Model. class, 123L, "modelName" )
assertThat ( result. getAccessTime ( ), is ( equalTo ( 42L ) ) )
assertEquals ( "Message: /abc", ResponseBodyInterpolator. interpolate ( "Message: [request.path]", req ) )
Assert. assertTrue ( maxError < 0.001 )
assertEquals ( "(x.y)", pp. toString ( ) )
AssertionUtils. multiAssertEquals ( createAsDocument10, response6. getResponseObject ( ) )
Assert. assertTrue (! counts. containsKey ( Jsprit. Strategy. RADIAL_BEST. toString ( ) ) )
assertEquals ( "Should not change the variable", variable ( name ), result )
assertMockEndpointsSatisfied ( )
assertFalse ( connectFuture. isConnected ( ) )
assertTrue ( "Arrival is not in the past: " + arrival, arrival >= l )
assertEquals ( expResult, result )
Assert. assertNotNull ( list )
assertNotNull ( set )
JSONAssert. assertEquals ( "Message", new JSONArray ( Arrays. asList ( 1, 2, 3 ) ), actual, false )
Assert. assertEquals ( b, a. insertColumn ( column ) )
assertEquals ( "[start:a:nsa, start:a:nsa, end:a]", handler. history. toString ( ) )
assertTrue ( aclDao. hasEntry ( principal, secureObject ) )
Assert. assertTrue ( mediaResult. getMediaId ( )!= null )
assertTrue ( UrlUtils. isMatch ( consumerUrl, providerUrl ) )
Assert. assertFalse ( policy. isResponseCacheable ( "GET", response ) )
assertNull ( simple )
assertEquals ( "foobar", cfg. someValue ( ) )
assertEquals ( d1, d2 )
assertEquals ( 404, state. getStatus ( ) )
assertEquals ( targetCS, actualCS )
assertThat ( underTest. getDispatched ( ), contains ( repository1, repository2, repository3 ) )
assertEquals ( 4, cases. size ( ) )
assertTrue ( "Ldap realm should be created", ops. exists ( TEST_LDAP_REALM_ADDRESS ) )
assertEquals ( msgs, count )
assertEquals ( "https://advertised.listener:2000/foo/bar", url )
assertEquals ( "ReverseEngineering: \\n" + "  - Schema: s\\n" + "      - Relationships: s\\n" + "      - Table: s\\n" + "      - Procedure: s\\n" + "      - Table: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n" + "      - Schema: s\\n",
assertNotNull ( result )
assertEquals ( Type. INT_8, d. type ( ) )
assertFalse ( ( boolean ) testedMethod. invoke ( tasksManagerImpl, STARTING_BYTE_OF_3_BYTE_CHAR ) )
assertTrue ( yarnACLSetter. isEmpty ( ) )
Assert. assertNull ( created )
assertEquals ( SecondTestListener. class, ReflectionUtils. inferType ( victim, TestListener. class ) )
Assert. assertTrue ( jobCounts. size ( ) == 0 )
assertEquals ( expectedContinuationToken, actualContinuationToken )
assertEquals ( "foo", proxy. interfaceMethod ( ) )
assertEquals ( sample, toSamples ( x, y ) )
assertFalse ( mailSenderStub. anyMoreMessages ( ) )
assertEquals ( 1, employees. size ( ) )
FixtureAsserts. assertStringMatchesJsonFixture ( "UpdatePurchaseOrder by admin response render to HAL+JSON", actualResponse, "/fixtures/hal/order/expected-admin-update-purchase-order.json" )
assertNotNull ( token )
assertThat ( response. isExpectation ( ), is ( true ) )
assertEquals ( 0, hits. totalHits )
assertEquals ( expectedQuery, actualQuery )
Assert. assertNotNull ( out. getD1 ( ) )
assertEquals ( "clearCache timeout", latch. getCount ( ), 0 )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Start>" + "before" + "<Child>content</Child>" + "after" + "</Start>", builder. build ( ). toXml ( ) )
assertFalse ( child. isValid ( ) )
Assert. assertEquals ( dbq. remainingCapacity ( ), cap - i )
assertEquals ( "3 啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
Assert. isNull ( user )
assertThat ( archive. getResources ( ). isEmpty ( ), is ( true ) )
GAssert. assertEquals ( articles, result )
assertTrue ( p. startsWith ( Paths. get ( "tmp/testNormalize" ) ) )
Assert. assertTrue ( policy. isResponseCacheable ( request, response ) )
assertEquals ( "N/A", bubbleChart. getTitle ( ) )
assertTrue ( "i=" + i + " d=" + d,! nnList. isEmpty ( ) )
assertThat ( orderElement. getAdvancePercentage ( ), sameValueAs ( division. divide ( 20, 100 ) ) )
assertNotEquals ( Movie. UNKNOWN, result )
mockery. assertIsSatisfied ( )
assertContains ( "This is the text", content )
assertEquals ( s, ps )
assertMockEndpointsSatisfied ( )
assertEquals ( expected, e. evaluate ( ), 0.0 )
assertEquals ( distance, p1. distance ( p2 ), 0.000001 )
Assert. assertEquals ( allMatchingQueryParamsFilter. size ( ), allExisting. size ( ) )
assertNull ( query )
mock. assertIsSatisfied ( )
assertTrue ( response. getErrors ( ). isEmpty ( ) )
Assert. fail ( validator. getErrors ( ). toString ( ) )
assertSnake ( "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" + "       \\n" )
assertEquals ( 1, constraints. size ( ) )
assertTrue ( body. contains ( "Bananabot/1.0" ) )
assertNonNullTaint ( taint )
assertEquals ( ImmutableMap. of ( "foo", "bar", "bar1", "foo2", "bar2" ), response. getHeaders ( ) )
assertParseOneDoc ( editor, "  ", "  ", "      ", "      ", "      ", "      " )
Assert. assertEquals ( sendCountBefore + 1, AlertSender. getSendCount ( ) )
assertThat ( resultCommand, is ( expectedCommand ) )
assertEquals ( 0, grid. getRowCount ( ) )
assertEquals ( 37.5, calc. getInsertionData ( route, job, nVehicle, 0.0, null, Double. MAX_VALUE ). getInsertionCost ( ), 0.01 )
assertEquals ( 0, IterableUtils. count ( IncludeRelationships. getInstance ( ). getAllRelationships ( database ) ) )
assertWktEquals ( Convention. WKT2_SIMPLIFIED, "EngineeringCRS[��A spherical CRS��,\\n" + "  EngineeringDatum[��Centre��,\\n" + "    Datum[��Name_VALUE_OF_RS��, 0.0],\\n" + "    Datum[��Name_OF_RS��, 0.0],\\n" + "    Datum[��Name_OF_RS��, 0.0],\\n" + "    Datum[��Name_OF_RS��, 0.0],\\n" + "    Datum[��Name_OF_RS��, 1.0],\\n" + "    Datum[��Name_OF_RS��, 1.0],\\n"
assertTrue ( "Submission set author should have failed validation", failed )
Assert. assertEquals ( 3, response. getEntityData ( ). size ( ) )
assertEquals ( "Test Page", page. asString ( ) )
assertEquals ( namedBean. getName ( ), "bar" )
Assert. assertNull ( "Unexpected null value", candidate )
assertThat ( addressResolver. get ( ), is ( notNullValue ( ) ) )
Assert. assertEquals ( 1, ( ( NegateTheInputInterceptorService ) recorder ). getLastInput ( ) )
assertThat ( splits, is ( correctSplits ) )
Assertion. assertEquals ( loadedDataSet, actualDataSet )
assertEquals ( 3, crossWord. getModel ( ). solutionsNo ( ) )
assertEquals ( 7, testResult. size ( ) )
assertions. doesNotContain ( false )
Assert. assertEquals ( LogLevel. INFO, testedStore. readProperty ( "logX" ). getValue ( ) )
assertThat ( controller, is ( equalTo ( method ) ) )
assertEquals ( expecting, result )
Assert. assertEquals ( entity, one )
assertTrue ( peterRank <= 3 )
assertEquals ( 1, daysToWorkday )
assertThat ( client. getMapping ( INDEX, TYPE ), is ( notNullValue ( ) ) )
assertTrue ( "Should match " + targetRegex. pattern ( ), targetRegex. matcher ( RETURN_TEXT ). matches ( ) )
Assert. assertEquals ( Status. ERROR, fr. element0 ( ). getStatus ( ) )
Assert. assertFalse ( importer. isSame ( null, null ) )
assertTrue ( zda. toString ( ). contains ( ",9.8.7,8.6," ) )
Assert. assertEquals ( change, updatedChange )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
Assert. assertNull ( "Wrong data", builtByFactory. getData ( ) )
assertNotNull ( classUnderTest. getBundle ( ) )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
assertEquals ( "(c (34 a))\\n", found )
assertEquals ( "Method #toString is wrong", "BlobMapper{field=field, indexed=false, sorted=true, validated=true, column=field}", mapper. toString ( ) )
assertNotNull ( text )
assertTrue ( applicationWadl. length ( ) > 0 )
assertEquals ( 4, ptos. bytesWritten )
assertTokensEqual ( of ( integer ( 1 ), integer ( 2 ) ), lastSeenTokens. get ( ) )
assertTrue (! result )
assertTrue ( convertedIteratorToList. size ( ) == 4 )
assertThat ( found, is ( true ) )
assertThat ( error. get ( ), is ( 0 ) )
assertEquals ( Lists. newArrayList ( "2", "4", "6" ), getStringsFromElements ( elements ) )
assertThat ( defaultSettings, is ( instanceOf ( UUIDSuffixSettings. class ) ) )
assertFalse ( parser. hasOption ( "a" ) )
assertEquals ( db. getLevel ( "bar" ), 0 )
assertEcssEquals ( ".footer {clear:none;}", convertFragment ( xcss ) )
assertEquals ( "Should get expected result", result, filter. toString ( ) )
assertEquals ( expResult, result )
assertThat ( spiLoader, hasItem ( isA ( KafkaFamilyDefinition. class ) ) )
assertTrue ( isSorted )
assertFalse ( validator. isValid ( resource, MetadataSection. PARTICIPANTS_SECTION ) )
assertNotNull ( s. getPDBHeader ( ). getPDBHeader ( ). getPDBHeader ( ). getPDBHeader ( ). getPDBHeader ( ). getPDBHeader ( ) )
assertEquals ( "The records number is correct " + clusterName. getName ( ), 2, resultIterator. size ( ) )
assertEquals ( handler. parseString ( testDate ), test )
assertEquals ( 1L, id. getVersionIdPartAsLong ( ). longValue ( ) )
assertEquals ( "AB", s )
assertEquals ( "CFBundleShortVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'.", dynamicVersion, new PListAccessor ( infoPList ). getStringValue ( PListAccessor. KEY_BUNDLE_SHORT_VERSION ) )
assertEquals ( 2, hitCount )
Assert. assertEquals ( inputLists. size ( ), permutations. size ( ) )
assertThat ( lists. serial ( ), is ( asList ( 1, 2, 3, 4 ) ) )
assertEquals ( expected, actual )
assertEquals ( "22ADDRESSE02ADDRESSE022222ADRESSE022222ADRESSE022222", formattedAddress )
assertTrue ( processor. spell!= null )
assertNotNull ( t )
assertThat ( values, contains ( symbolicValue ( "func", "two_paths.js" ) ) )
assertTrue ( result )
assertNotNull ( dsc. getPanel ( ) )
assertThat ( matcher. matches ( condition, context ), is ( true ) )
assertThat ( browsersAsXml, containsString ( "<browser name=\\"Chrome\\">" ) )
assertEquals ( 3, tdefsRes. getBody ( ). length )
assertArrayEquals ( expected, actual )
assertNull ( session. getCid ( ) )
assertEquals ( "Substitution was not correctly applied", "This is a lunch lunch.", result. get ( ) )
assertEquals ( expResult, result )
assertDecimalEquals ( obv. getValue ( 9999 ), 0 )
assertEquals ( expected, result )
assertEquals ( "WHERE id = 12345", statement. getQuery ( ) )
assertTrue ( client. getJacksonFeature ( ) instanceof JsonJsonFeature )
Assert. assertEquals ( count, store. size ( ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) and ( entity_0.code = :code_2 ) )", select. getQuery ( ) )
assertFalse ( ( Boolean ) v1. toString ( ) )
assertNotNull ( pom )
assertInstancesOf ( java. sql. Timestamp. class, rv )
assertEquals ( presenter. isFilterOn ( ), true )
assertEquals ( version, domainEntity. getVersion ( ) )
assertEquals ( "ATGC", s. getSequenceAsString ( ) )
assertEquals ( "file.ttl", fn2 )
assertRequest ( "POST", "Verification/Address/" )
assertTrue ( ( ( NgMinProcessor ) victim ). isSupported ( ) )
assertThatPersonIsNotProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ). map ( person, sikredeRecord, sikredeRecordTime, firmaRecordTime, factory ) )
assertEquals ( expResult, result )
assertEquals ( "three", lastElement )
assertEquals ( "192.168.0.123/24", event. getIp ( ). getAddress ( ) )
assertEquals ( 1, ( int ) field. getFieldId ( ) )
assertEqualsJFigletSmushing ( asciiArt )
assertResultSet ( res )
assertEquals ( expected, actual )
assertEquals ( "Hello Camel in action", reply )
assertEquals ( 5, value. asInt ( ) )
assertEquals ( "GBP 5.90", test. toString ( ) )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertEquals ( expected, result )
assertNotNull ( timeline )
Assert. assertTrue ( drink!= null )
assertEquals ( "alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima", TextHelper. textWrap ( s ) )
assertTrue ( p1. list ( blk ). size ( ) == 1 )
assertEquals ( "entry-" + i, new String ( entry. getEntry ( ), UTF_8 ) )
assertEquals ( "<!--Hello, world-->", filter. process ( markup ) )
assertEquals ( conceptClass, conceptService. getConceptClass ( unusedConceptClassId ) )
assertTrue ( _comp. isEquals ( json, expected ) )
Assert. assertEquals ( 1, retVal. intValue ( ) )
spliterators. assertHasOnlyCharacteristics ( INFO, actual, DISTINCT )
Assert. assertEquals ( "Jack", lambda. getString ( ) )
assertEquals ( "Unexpected dispatcher type returned", DispatcherType. INCLUDE, dispatcherType )
assertEquals ( "Unknown order by keyword 'bob'", error )
assertOut ( "public interface IA extends foo.bar.IB, baz.goo.IC, foo.ID {\\n}" )
assertEquals ( g1, g2 )
assertEquals ( createdOnAsDate, patchSet. getCreatedOn ( ) )
assertArrayEquals ( new long [ ] { 1, 2, 3, 0 }, result )
Assert. assertTrue ( permissions. toString ( ), permissions. isEmpty ( ) )
Assert. assertEquals ( "Hello, Microbule!", bean. sayHello ( "Microbule" ) )
assertTrue ( checker. isAbstract ( ) )
assertEquals ( "{\\"name\\":\\"Latest Version 1.0\\",\\"version\\":\\"1.0\\"}", parsed )
assertEquals ( 0, dao. delete ( ( Foo ) null ) )
assertThat ( strAction, is ( "Default" ) )
assertThat ( target. validate ( ), is ( false ) )
Assert. assertNotNull ( out. getD2 ( ) )
assertEquals ( 4, exceptions )
assertEquals ( 1, event. getMetricSint64 ( ) )
assertEquals ( "Expected 5 results!", 5, count )
assertEquals ( expected, result )
assertEquals ( "Value is incorrect", null, JSONHelper. getJSONObject ( obj ) )
assertEquals ( new RecordImpl ( ), converter. convert ( record ) )
assertEquals ( "Failed to filter query string", expectedResult, normalizedUrl )
Assert. fail ( "Should have thrown IllegalStateException" )
assertEquals ( expected, actual )
assertNotNull ( result )
assertFalse ( account. isValid ( ) )
assertEquals ( root, intermediate. getParentTree ( ) )
Assert. assertEquals ( "username", userName )
assertEquals ( wrapUserList. getUsers ( ), userRoleService. getUsers ( ) )
assertEquals ( "Expected 1 index to be present.", 1, iHtd. getIndexes ( ). size ( ) )
assertEquals ( 0, filesList. size ( ) )
assertEquals ( "array_2", sql )
assertThat ( allEvents. stream ( ). limit ( events. size ( ) ). collect ( toList ( ) ), containsInOrder ( reverse ( events ) ) )
assertNotNull ( result )
assertEquals ( "mystream.flibble", sn. getSourceLocation ( ). getStartLine ( ) )
Assert. assertEquals ( 0, conceptSets. size ( ) )
assertThat ( plugin. getSlowTestWarning ( ), is ( 1000L ) )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), hasEnvVar ( "STARTUP_MODE", ADMIN_STATE ) )
assertThat ( command. accept ( state ), is ( true ) )
assertTrue ( ax. containsAxiom ( Mocks. namedAxiom ( "Bayes" ) ) )
assertTrue ( m. isEmpty ( ) )
Assert. assertFalse ( testing. hasNext ( ) )
assertEquals ( s3, unassigned. iterator ( ). next ( ) )
assertEquals ( "/topic", m_callback. getTopic ( ) )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
assertionHelper. assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile, ( File ) targetFile )
assertTrue ( serviceFacade. isAnyProcessGroupUnderVersionControl ( groupId ) )
assertEquals ( "1 year ago", DateUtils. formatFriendlyDate ( new Date ( 0 ), Locale. GERMAN ) )
assertEquals ( 1, branch_conditions. size ( ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED_BREAK, status )
assertSame ( mockHandler, m. getProperty ( "com.sun.xml.bind.characterEscapeHandler" ) )
assertEquals ( expected, buffer. get ( ) )
Assert. assertEquals ( "Test case " + testCase [ 0 ] + ", " + testCase [ 1 ] + ", " + testCase [ 2 ] + ", " + testCase [ 3 ], expected, actual )
assertOut ( "b = b + 1" )
Assert. assertTrue ( isEqual ( d1, d2 ) )
Assert. assertEquals ( "foo=bar&bar=foo", payload. getValue ( ) )
assertAnnotationCompletions ( "@Value(\\"${data.prop2}\\"<*>)", "@Value(\\"${else.prop3}\\"<*>)", "@Value(\\"${spring.prop1}\\"<*>)", "@Value(\\"${spring.prop2}\\"<*>)", "@Value(\\"${else.prop3}\\"<*>)", "@Value(\\"${spring.prop1}\\"<*>)" )
assertEquals ( "(SOURCEFIELD1 =='sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD1 =='sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1')", transformed )
assertEquals ( "MER_RR__2P$1", output )
assertColumnVisibility ( )
assertEquals ( "mockMessage", response. getErrors ( ). get ( "mockFiled" ) )
assertThat ( resolver. replace ( "${MISSING}", true ), is ( "MISSING" ) )
assertEquals ( "void foo(CharSequence[] args) {}", actualContent )
assertNotNull ( "Translation from en-US to es failed", transText )
assertTrue ( EqualsBuilder. reflectionEquals ( config, config2, "keyStore", "ourCertificate" ) )
Assert. assertNotNull ( xstreamMap )
Assert. assertTrue ( exceptionMatches )
assertEquals ( "xaxbx", ex. getUnlabeledMessage ( ) )
assertArrayEquals ( objects, result )
assertFalse ( transactionHelper. isTransactionAvailable ( ) )
assertEquals ( sb. toString ( ), whereSb. toString ( ) )
assertThat ( ms. get ( "aaa" ), nullValue ( ) )
assertEquals ( new ObjectId ( 0x50d615d2, 0x8544eba9a10004e8L ), element. getValueAsObject ( ) )
assertTrue ( Ideal. create ( ideal, 0 ). isConstant ( ) )
Assert. assertNull ( "school type should be null", result )
assertEquals ( "/protected/res/documents/index.html?focus=contractId&caller=BLUE&referrer=/protected/res/my_contracts/index.html&fragment=/contractDetails/1234567890", affordance. expand ( args ) )
Assert. assertEquals ( 5, timeSliceElementDecls. size ( ) )
assertTrue ( Pattern. matches ( "(?s).*/converter.jsp PASSED.*", page. asXml ( ) ) )
Assert. assertTrue ( irodsFileForSecondaryUser. canWrite ( ) )
assertTrue ( response )
assertEquals ( mockResponse, response )
assertEquals ( "No such service test", result )
assertNotNull ( p )
Assert. assertTrue ( "Method unsupported", adapter. supports ( endpoint ) )
assertThat ( generated. length ( ), is ( equalTo ( length ) ) )
assertThat ( JdbcUtils. getColumnNames ( getConnectionProperties ( ), "SOMETABLE" ), containsInAnyOrder ( "PID" ) )
assertThat ( testOutcome. getResult ( ), is ( TestResult. SUCCESS ) )
Assert. assertEquals ( 1, ahelper. getFailedRecords ( ). size ( ) )
assertEquals ( part, selected )
assertFalse ( adapter. isDifferentFromNode ( otherNode ) )
assertEquals ( target. field, send. send ( ) )
Assert. assertNotNull ( obj )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "username", userInfo. result ( ). getUserName ( ) )
assertEquals ( plain, dec )
Assert. assertNull ( rto )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertEquals ( 0, type. getCapacityDimensions ( ). get ( 0 ) )
assertEquals ( 0, result. size ( ) )
assertTrue (! branch_conditions. isEmpty ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "Hello <commons>", sub. replace ( "Hello <name>world</name>" ) )
assertFalse ( results. getAttribute ( ValidationActionTypeService. VALIDATIONS_ACTION_ATTRIBUTE ) == null )
assertEquals ( jedisCluster. get ( "foo" ), "bar" )
Assert. assertArrayEquals ( expected, ata, 0.00001f )
Assert. assertEquals ( "SELECT * WHERE email='test+value@usergrid.com' AND (start_time >= '1970-01-01T00:00:00.000+0000' && finish_time <= '1970-01-01T00:00:00.000+0000')", query. toString ( ) )
assertIntValues ( array, 1, 2, 3, 4, 5, 6 )
assertNotNull ( authentication )
assertEquals ( "an attribute", request. getAttribute ( "anAttribute" ) )
assertEquals ( "123涓���浜烘��卞����", deserialize. readUTF ( ) )
assertTrue ( entity. isValid ( ) )
assertHighlighting ( 2, 0, 6, STRING )
assertEquals ( admin, transformer. transform ( adminDocument ) )
assertEquals ( expected, actual )
assertFalse ( result. toString ( ). contains ( "rdf:nodeID" ) )
assertTrue ( subject. isExportDir ( folder. getRoot ( ), LAST_SERIAL ) )
assertTrue ( object. isWeak ( ) )
assertEquals ( 2, ektorp. getSeatedPeople ( ). size ( ) )
assertEquals ( sb. toString ( ), qb. prepareStatementString ( ) )
assertEquals ( 1, repositoryService. createProcessDefinitionQuery ( ). count ( ) )
assertEquals ( "34 abc\\n", found )
Assert. assertEquals ( "knowledgeId is not correct", 1, knowledgeId )
assertEquals ( 5, count )
assertEquals ( newValue, postComment. getAttributes ( ). get ( name ) )
assertEquals ( "2:4:6", app. asStringNumbers ( a1 ) )
assertEquals ( 0, i. getFlags ( ). size ( ) )
assertThat ( dao. create ( account ), hasId ( "inquiry_user" ) )
assertThat ( specificResourceAllocation. getParent ( ), equalTo ( specificResourceAllocation. getAssignments ( ). get ( 0 ) ) )
assertEquals ( BPResultType. FAIL, testResult. getResultType ( ) )
assertNull ( checkMessage )
assertPostCodegenRules ( mojo )
assertEquals ( "Jan", personView. getName ( ) )
assertThat ( tuple. getCollectionOrEmpty ( "field" ), equalTo ( value ) )
assertEquals ( expected, actual )
assertEquals ( "Not Calendar.equals: ", v1. getDateTime ( ), v2. getDateTime ( ) )
assertEquals ( 2, channel. read ( ). refCnt ( ) )
assertEquals ( - 6, values. get ( new MultivectorComponent ( "out", 0 ) ), 10E-3 )
assertThat ( actual, is ( equalTo ( expected ) ) )
Assert. assertEquals ( 0.0, score, 0.0 )
assertEquals ( null, DocumentUtils. getDocumentUri ( cas ) )
assertEquals ( "IDX1", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertFilesRemoved ( session. getSessionFactory ( ), FILE1_SUBPATH )
assertThat ( formatter. format ( PlainDate. of ( 2015, 10, 1 ) ), is ( "March 10, 2017" ) )
Assert. assertTrue ( result )
Assert. assertTrue ( FastMath. abs ( error ) > 1.0e-12 )
assertEquals ( "ereref", Bytes. toString ( res ) )
assertThat ( target. getTime ( ), is ( time ) )
assertThat ( get ( "/user/role/" ), hasJsonPath ( "$.roles.count", equalTo ( 1L ) ) )
assertNotNull ( o )
assertEquals ( 6, allScanTokens. size ( ) )
assertThat ( result, is ( true ) )
assertEquals ( expected, ColumnRanges. rangeAtNode ( either ) )
assertFalse ( family1. equals ( family2 ) )
assertAgentString ( optionsByType, "-agentpath:mylib=", "port=8849", "stack=1234" )
Assert. assertEquals ( "ssd", tableName )
assertNotNull ( response )
assertEquals ( "Row count should match", rsMismatches. size ( ), result )
assertFalse ( updatedTopic. userSubscribed ( user ), SUBSCRIBED )
assertThat ( System. getProperty ( key ), is ( nullValue ( ) ) )
assertTrue ( strategy. allPricesInitialized )
assertEquals ( 1, td. getOrder ( ) )
assertTrue ( this. getMimeMailSubject ( ). contains ( "branch_title_updated" ) )
Assert. assertEquals ( 1, count )
assertEquals ( 12345.0, rtcpReceivedEvent. getRtt ( ), 0.001 )
assertEquals ( expected, t )
assertThat ( xmlIn, notNullValue ( ) )
assertEquals ( zone, actualZone )
assertEquals ( "http://ci.visuwall.awired.net/job/struts/5/testReport/API/XML", testUrl )
assertThat ( str, equalTo ( "insert into UserInfo(name,age) values (?,?)" ) )
assertEquals ( p, fromDenseRecursiveForm ( recForm, MonomialOrder. DEFAULT ) )
assertEquals ( SC_OK, response. getStatus ( ) )
assertEquals ( output1. getId ( ), output2. getId ( ) )
assertTrue ( daemon. start ( "src/test/resources/test_configurations/basic-configuration.xml" ) )
assertTrue ( summary. getTitle ( ). getTitle ( ). getContent ( ). compareTo ( lowestTitle ) > 0 )
assertTreesAreEqual ( tree, roundTripped )
assertThat ( uri, is ( "/path/expectedUrl" ) )
Assert. assertNotNull ( result. getBookList ( ) )
Assert. assertEquals ( 1, tags. size ( ) )
assertEquals ( 3, packages. size ( ) )
assertThat ( relationEditor. isMatchingRelationName ( relation, name ), is ( false ) )
Assert. assertTrue ( EqualsBuilder. reflectionEquals ( savedComputeResource, updatedComputeResource, "__isset_bitfield" ) )
assertTrue ( o. containsAxiom ( dflt ) )
assertThat ( writer. toString ( ), matchesPattern ( "^\\\\[[0-9\\\\-:\\\\. ]{23}\\\\]$" ) )
assertThat ( thrown, instanceOf ( CursorNotFoundException. class ) )
Assert. assertEquals ( 10, counter. getCount ( ) )
Assert. assertEquals ( "", mailbox. getAddress ( ) )
Assert. assertEquals ( ExchangeState. ERROR, consumer. getState ( ) )
assertEquals ( expected, e. setVariable ( "x", x ). evaluate ( ), 0.0 )
assertEquals ( edmType, returnedType )
assertScale ( alpha, 1, 1, 1 )
assertTrue ( resource + " is not valid", result. isValid ( ) )
Assert. assertTrue ( rep. containsKey ( "org.ops4j.pax.exam.sample11-test" ) )
assertEquals ( socketAddress, readAddress )
Assert. assertEquals ( config. getSetSet ( ). iterator ( ). next ( ). getId ( ), config2. getSetSet ( ). iterator ( ). next ( ). getId ( ) )
assertFalse ( result )
assertEquals ( "(nil A B C)", t. toStringTree ( ) )
assertThat ( cursor. proceedToHandle ( 'c' ), is ( false ) )
assertArrayEquals ( expected, bos. toByteArray ( ) )
assertEquals ( 6. * 3600., sec, 0.01 )
assertThat ( repos, hasSize ( 0 ) )
assertTrue ( sql, sql. endsWith ( "WHERE t0.ESTIMATED_PRICE BETWEEN #bind($id0 'INTEGER')" ) )
assertThat ( "no issues shall be detected on a valid port", validation. pass ( Report. WITHOUT_WARNING ) )
assertEquals ( vars, variablesTyped )
assertions. doesNotContain ( actual )
assertThat ( initialized, is ( false ) )
Assert. assertEquals ( 2, analyser. getLoadJustBeforeActivity ( route. getActivities ( ). get ( 1 ), route ). get ( 0 ) )
assertTrue ( authorizer. isAuthorized ( context, profiles ) )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
assertNull ( conversationIdHeader )
Assert. assertTrue ( received )
assertEquals ( result, extractor. getXML ( meta, field ) )
assertEquals ( nnf, comp )
assertThat ( result, is ( instanceOf ( Success. class ) ) )
assertEquals ( HttpStatus. SC_UNAUTHORIZED, response. getStatus ( ) )
Assert. assertThat ( dump, equalTo ( "NamedTypeExpressionNode user -> {null} (Start: 7, End: 13, On: [artificial node])\\n" + "    NamedTypeExpressionNode cat -> {null} (Start: 7, End: 13, On: [artificial node])\\n" + "        LibraryRefNode user -> {null} (Start: 7, End: 13, On: [artificial node])\\n" + "        LibraryRefNode cat -> {null} (Start: 7, End: 13, On: [artificial node])\\n" + "        LibraryRefNode cat -> {null} (Start: 13, End: 13, On: [artificial node])" ) )
assertMappedFieldValueIsCollectionWithEntries ( )
assertEquals ( 2, distinctAgePersons. size ( ) )
assertEquals ( true, result [ 0 ] )
assertPlanMatches ( access )
assertEquals ( 2, deltas. size ( ) )
assertEquals ( "inheritance not detected: " + id, ndInh. getValue ( id ), nd. getValue ( id ) )
assertEquals ( "Not all children of jar entry", 1, children. size ( ) )
Assert. assertEquals ( "I count up the box", this. realiser. realise ( sent ). getRealisation ( ) )
Assert. assertEquals ( expect, actual, EPSILON )
assertEqualDoubleArrays ( pyscle, scale, epsilon )
assertThat ( event. check ( newGitHubBranchDecisionContext ( ). withLocalBranch ( localBranch ). withBranchTrigger ( trigger ). withLocalRepo ( localRepo ). withRemoteBranch ( remoteBranch ). withListener ( listener ). build ( ) ), nullValue ( ) )
assertThat ( branches. isEmpty ( ), is ( true ) )
assertLookup ( breaks, values, srcImg, ImageDataType. INT )
Assert. assertEquals ( "[1,2,20,30,50,35,40,51]", a1. sort ( ). toString ( ) )
assertEquals ( NUM_TABLES * NUM_TOKENS, result. size ( ) )
Assertion. assertEquals ( loadedDataSet, actualDataSet )
assertThat ( payload, not ( containsString ( "alertBody" ) ) )
assertEquals ( "aAa", mat. group ( ) )
assertEquals ( "V1 Track", wrapper. getTrack ( ) )
assertEquals ( expected, actual, delta )
assertEquals ( biggestWidget ( ). getY ( ), gridLienzoScrollBounds. minBoundY ( ), 0 )
assertEquals ( witnessList, tokenList )
assertEquals ( true, errors. hasFieldErrors ( "stopDatetime" ) )
assertThat ( map. get ( "a" ), is ( nullValue ( ) ) )
assertEquals ( ValidationResult. OK. getStatus ( ), validationResult. getStatus ( ) )
assertEquals ( expected, actual )
assertEquals ( adminIdentity, adminUser. getIdentity ( ) )
assertThat ( elementFacade. isEnabled ( ), is ( false ) )
assertEquals ( ( ( Document ) db. getDocument ( 0, FIELD_NAME ) ). getFullFieldValue ( ), "payload" )
assertValidationConstraint ( validator, obj, "endBeforeStartOther" )
assertEquals ( r1, r2 )
assertEquals ( String. class, t. getType ( ) )
assertThat ( seqTerminals, containsInAnyOrder ( term1, term2 ) )
assertEquals ( null, this. consumer. get ( topic, partition, offset, maxSize ) )
assertNotNull ( result )
assertEquals ( 1, branch_conditions. size ( ) )
Assert. assertEquals ( 2, replicator. getReplicaCount ( sourceRepository, targetRepository ) )
assertEquals ( "FATAL", level. toString ( ) )
assertions. isNotEqualTo ( expected )
assertEquals ( "[[1, a], [1, b], [1, c], [2, d], [2, e], [2, d], [2, e], [2, d], [2, e], [2, d], [2, e]]", Arrays. deepToString ( testData ) )
assertEquals ( 2, count )
assertEquals ( BRIGHT, style )
assertThat ( ret. isSuccess ( ), is ( true ) )
Assert. assertSame ( this. term, result )
assertPermanentCount ( playerA, "Mikaeus, the Lunarch", 1 )
assertNotNull ( i. getLanguageName ( ) )
assertTrue ( now - timeStamp - timeSpan < 2 )
Assert. assertEquals ( "scm:1234://root/TEST_Project/dev/", connectionString )
assertEquals ( "3f4c8d2f597e3f597e4f597e6d", hash )
Assert. assertEquals ( testMessage, serializer. serialize ( testMessage ) )
assertNotNull ( cancelledPreApproval )
assertEquals ( propertyValue, value )
context. assertIsSatisfied ( )
assertEquals ( 1, m. getComponents ( ). size ( ) )
ErrorAssert. assertThat ( errors )
assertEquals ( "x", s. get ( ) )
assertThat ( description. toString ( ), is ( "sheet(s) \\"Yet Another Sheet\\" was missing" ) )
assertEquals ( "[1, 2, 92, 100]", a. toString ( ) )
assertEquals ( reference, toTest )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFProtocolo ( ). toString ( ) )
Assert. assertEquals ( "Hello gradle!", gradleMan. getMessage ( ) )
assertThat ( config, hasEntry ( "docker.uri", "192.168.0.1" ) )
assertFalse ( "No reviews found!", result. isEmpty ( ) )
assertNotNull ( fixture )
assertThat ( dereferenced, completesTo ( "hello" ) )
assertProjectOut ( compiledFileNames, testDirPath )
assertEquals ( expect, result )
assertNull ( classUnderTest. getPrintXmlBean ( ) )
runner. assertAllFlowFilesTransferred ( ListenRELP. RELP_FAILURE, 1 )
Assert. assertTrue ( result. next ( ) )
assertEquals ( testName, testProfileData. getName ( ) )
assertEquals ( "something.getAnother(x, y).equals($2, $2);", result )
assertEquals ( 0, attributes. size ( ) )
assertEquals ( 1, lock. usageCount ( ) )
assertThat ( subs. collect ( Collectors. toList ( ) ), hasItem ( subProperty ) )
assertTrue ( st. isDir ( ) )
assertEquals ( json, rc. getBodyAsJson ( ) )
assertTrue ( "" + mse, mse <= desiredError )
given ( ). spec ( specs. get ( 0 ) ). contentType ( ContentType. JSON ). body ( { "key", "foo", "value", "true", "null-values", "false" } ). when ( ). get ( "atomic-map/test/foo" ). then ( ). statusCode ( 200 ). assertThat ( )
assertStatusIs ( workspaceErrors ( ) )
assertNotNull ( supplier. authForSwarm ( accessToken ) )
assertEquals ( expected, actual )
assertEquals ( expected, actualQuery )
assertTrue ( "Expected all states to be enabled", SentryStateBank. allStates ( TestState. COMPONENT ). size ( ) == 2 )
Assert. assertTrue ( result. equals ( "10 �拽�转" ) )
assertEquals ( value, stat. toDouble ( ), 0 )
assertEquals ( 0, latch. getCount ( ) )
Assert. assertEquals ( effective. getSpacing ( ). getAfter ( ). intValue ( ), 0 )
assertNotNull ( i )
Assert. assertEquals ( 1, o )
Assert. assertEquals ( "Invalid HUs retrieved", Arrays. asList ( hu_loc01_wh01_active ), huSelectModel. createHUQueryBuilder ( ). list ( ) )
assertNotNull ( scriptStatement )
assertNotNull ( result )
assertTrue ( originalMap. isEmpty ( ) )
TestHelpers. assertDeepEquals ( expected, result )
assertEquals ( 2, jumpingOnTheCloud. getEnergyBalance ( 19, clouds ) )
assertEquals ( 1, foundMethods. size ( ) )
assertThat ( updatedItem. getQuantity ( ), equalTo ( existingItem. getQuantity ( ) + 10 ) )
assertFalse ( typeDefinition. isPresent ( ) )
assertThat ( harvestedCollection. getHarvester ( ), nullValue ( ) )
assertFalse ( vrp. getInitialVehicleRoutes ( ). containsKey ( "4" ) )
assertEquals ( cls. getNNF ( ), nnf )
assertThat ( cc. plus ( 38, ChineseCalendar. Unit. WEEKS ), is ( ChineseCalendar. of ( EastAsianYear. forGregorian ( 2017 ), EastAsianMonth. valueOf ( 6 ). withLeap ( ), 29 ) ) )
Assert. assertTrue ( Arrays. contains ( as, 1 ) )
Assert. assertEquals ( false, retval )
Assert. assertEquals ( Integer. class, clazz )
assertThat ( decisionInstances. size ( ), is ( 2 ) )
assertEquals ( 1, counts. get ( 0 ) )
assertEquals ( 13, options. size ( ) )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ), rand. nextInt ( 998 ) + 2, rand. nextInt ( 100000 ), tokenizer )
assertMapped ( ( Integer x ) -> x + 2, asList ( 1, 2, 3 ), asList ( 3, 4, 5 ) )
assertNotNull ( con )
assertEquals ( Integer. valueOf ( 4997 ), query. select ( employee. YEAR_WEEK ). fetchOne ( ) )
assertEquals ( 3, numberOfElephants )
assertSame ( expected, actual )
assertEquals ( DecodeException. class, err. getClass ( ) )
assertEquals ( "The message has an invalid header", e. getMessage ( ) )
assertSame ( mockCause, captor. getValue ( ). getCause ( ) )
assertThat ( getCompiledResult ( ), is ( true ) )
assertEquals ( expectedValue, result )
Assert. assertTrue ( kernelServices. isSuccessfulBoot ( ) )
assertEquals ( "Application with specified UUID already exists", 0, application. getActivities ( ). size ( ) )
assertNotNull ( "Method was not invoked", proxy )
Assert. assertEquals ( "SELECT s1\\nFROM t1\\nWHERE s1 NOT IN (SELECT s1\\n\\tFROM t2);", text )
assertNull ( ret2 )
assertEquals ( expectedRecords, result. getRecords ( ) )
Assert. assertEquals ( map ( Jsr310NullKeySerializer. NULL_KEY, "test" ), value )
assertTrue ( resp. getStatus ( ) == 200 )
assertEquals ( emailSubject, testEmail )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertEquals ( "fromBytes() doesn't match expected value.", this. actualResult, actualResult )
assertPostFails ( "3", role, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
context. assertIsSatisfied ( )
Assert. assertEquals ( "mapped property value", data. myMappedProperty )
Helpers. assertJson ( Deencapsulation. invoke ( twinState, "toJsonElement" ). toString ( ), json )
Assert. assertEquals ( 42, font. getCmap ( ). getNEntries ( ) )
assertHasMethod ( model, "com.artemis.E groups(java.lang.String[] groups)" )
assertEquals ( "Unexpected primary style name", "v-grid", state. primaryStyleName )
assertNotNull ( myTestFactory )
editor. assertGotoDefinition ( editor. positionOf ( "default", "default" ), editor. rangeOf ( "- name: some-server", "windoze-server" ), editor. rangeOf ( "windoze-server", "windoze" ), editor. rangeOf ( "bad-server", "bogus-stemcell" ) )
Assert. assertEquals ( "The topology has not been returned", topology, spy. getTopologies ( ). get ( 0 ) )
assertEquals ( "Symbol1:1,Symbol2:2,Symbol3:3", symbols. toString ( ) )
assertEquals ( "unrelated", model. getUnrelated ( ) )
assertTrue ( true )
assertTrue ( "cos() had errors in excess of " + MAX_ERROR_ULP + " ULP", maxerrulp < MAX_ERROR_ULP )
assertEquals ( "{\\"message\\":{\\"code\\":\\"Miguel Arlandy\\",\\"message\\":\\"Disconnected\\"}}", jsonMessage )
assertEquals ( 0x5678, hash. getByte ( ) )
Assert. assertTrue ( true )
assertNull ( newChain )
assertThat ( ReflectionTestUtils. getFieldValue ( ConsoleLogger. class, null, "fileWriter" ), nullValue ( ) )
assertEquals ( "Test message ab c\\\\\\\\", result )
assertTrue ( res. isEmpty ( ) )
assertThat ( context, is ( notNullValue ( ) ) )
Assert. assertEquals ( 0.0, analyticalOptionValue [ 0 ], 1E-3 )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertEquals ( BranchUtils. getHeadCommit ( "source_branch", repo ), BranchUtils. getHeadCommit ( "test_branch", repo ) )
assertOut ( "var /** @type {number} */ b = a.child('child').length()" )
assertEquals ( "Select script should match expected", expectedSelectHash ( ), hash )
assertTrue ( graphContains ( gStore. getDefaultGraph ( ), triple1 ) )
assertEquals ( "10", victim. readObjectNumber ( ) )
assertEquals ( 2, fsos. bytesWritten )
assertTrue ( spied. call ( ) )
assertEquals ( "/../../..", xmldbURI. resolveContext ( uri ). toString ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( true, classUnderTest. getShowSessionStartupTimeHint ( ) )
assertTrue ( GenericTypeReflector. equals ( expected, ClassUtils. getCommonSuperType ( Arrays. asList ( t1, t2 ) ) ) )
assertThat ( api. getResponseTime ( ), is ( 0 ) )
assertNotNull ( certificate )
Assert. assertTrue ( allowedCRUDL )
assertThat ( cls, hasAxiom ( clsA, owlThing ) )
assertTrue ( ( ( PerunBl ) perun ). getServicesManagerBl ( ). isServiceBlockedOnFacility ( facility1, testService1 ) )
assertTrue ( exceptions. isEmpty ( ) )
assertEquals ( response. asString ( ), CANCELLED, response. get ( OUTCOME ). asString ( ) )
assertOut ( "var /** @type {number} */ a = 2147483647" )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
assertThat ( "response contains a non-empty fullName", StringUtils. isNotBlank ( response. getFullName ( ) ) )
assertTrue ( version. isBeforeCurrent ( ) )
assertEquals ( expResult, result )
assertEquals ( "12345", result )
assertTrue ( envVars. size ( ) == 0 )
assertEquals ( "Hello ^^there", ResponseBodyInterpolator. interpolate ( "Hello ^^there", req ) )
assertUndeployed ( rcm. getDeploymentId ( ) )
assertEquals ( 401, response. getStatus ( ) )
assertNotNull ( Workflow. fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( "", result )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER EH ['111111111111111','foo            ','2012-0-1 00:00:00.000'] - ['111111111111111','fop            ','2012-11-31 00:00:00.000']\\n" + "    SERVER FILTER BY FIRST KEY ONLY AND (CREATED_DATE <= DATE '2012-0-1 00:00:00.000' AND CREATED_DATE <= DATE '2012-11-31 00:00:00.000')\\n" + "    SERVER TOP 100 ROWS SORTED BY [ORGANIZATION_ID, PARENT_ID, CREATED_DATE DESC, ENTITY_HISTORY_ID]\\n" + "CLIENT MERGE SORT", QueryUtil. getExplainPlan ( rs ) )
assertEquals ( "www.giantbomb.com", doc. getContentField ( "out" ). toString ( ) )
assertEquals ( 1, searchHistory. getLength ( ) )
assertTrue ( compressedLogFile. exists ( ) )
Assert. assertTrue ( "duplicate association roles were not removed", topicmap. getTopics ( ). size ( ) == 1 )
checker. assertEquals ( "[" + r + "][" + c + "]", exp, act )
assertEquals ( body. toString ( ), "test exception" )
assertEquals ( "Hello World", Hex. toHexString ( outputStream. toByteArray ( ) ). toUpperCase ( ) )
assertThat ( taskService. createTaskQuery ( ). taskId ( task. getId ( ) ). count ( ), is ( 1L ) )
assertKey ( new LongKey ( 1 ), index. searchIndex ( new EqualsCondition ( new StringKey ( "50" ) ), Index. NO_SEARCH_LIMIT ) )
Assert. assertTrue ( "This is a odt file, ODTReport implementation should have been resolved....", report instanceof ODTReport )
assertThat ( listSorter. getSortedItems ( ), equalTo ( asList ( "A", "B", "C" ) ) )
assertPostCodegenRules ( mojo )
assertEquals ( expected, actual )
assertEquals ( "Wrong property substitution", JHAdminConfig. MR_HISTORY_INTERMEDIATE_DONE_DIR + "/such-client/done", cfg. get ( JHAdminConfig. MR_HISTORY_DONE_DIR ) )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 2629743830L * 3L ) ) )
assertTrue (! configuration. isEmpty ( ) )
assertEquals ( result. getName ( ), "com.acme.maven.plugin.Plugin1" )
assertEquals ( Status. NOT_FOUND. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( expected, uri. toString ( ) )
assertEquals ( null, result )
assertThat ( bOut. toString ( ), is ( expectedContent ) )
assertTrue ( closed. await ( 2, SECONDS ) )
assertEquals ( asList ( foo4, foo5 ), results )
assertTrue ( parseResults. isEmpty ( ) )
Assert. assertEquals ( columnSubset. length, 0 )
Assert. assertFalse ( isValid, "PollItem has name that less than min, so it must be invalid" )
assertNull ( item. getList ( ) )
Assert. fail ( )
assertTrue ( roles. contains ( "RESOURCESELFSERVICEGROUP" ) )
assertTrue ( shouldVote )
assertThat ( listSorter. repositioned ( first ), equalTo ( first ) )
assertEquals ( expected. getTime ( ), actual. getTime ( ) )
assertEquals ( AnalysisState. ERROR, analysisSubmission. getAnalysisState ( ) )
assertNotNull ( result )
assertEquals ( expected, result )
assertCredits ( credits )
assertEquals ( "value", "a;b;c", config. getString ( "section4.var6" ) )
assertThat ( target. validate ( ), is ( false ) )
assertFalse ( vw == ret )
assertFalse ( checker. isDetected ( ) )
assertThat ( c. toString ( ), is ( "myString < aaa" ) )
assertTrue ( "The encoded URL cannot be resolved", browser. findElement ( By. xpath ( "//a/@href" ) ). isPresent ( ) )
assertEquals ( expected, actual )
assertThat ( logger. output ( ), containsInOrder ( "BUILD STEP DURATIONS", projectStatsLine ( "project-1.0.0-SNAPSHOT", "BUILD STEP DURATIONS", 7.0 ), projectStatsLine ( "project-2.0.0-SNAPSHOT", "BUILD STEP DURATIONS", 7.0 ), projectStatsLine ( "project-3.0.0-SNAPSHOT", "BUILD STEP DURATIONS", 7.0 ) ) )
assertFalse ( path. isEmpty ( ) )
assertThat ( encryptedPassword, is ( nullValue ( ) ) )
assertEquals ( 0, JedisURIHelper. getDBIndex ( uri ) )
assertEquals ( sent, received )
assertThat ( kvStore. getString ( "field" ), equalTo ( "value" ) )
assertArrayEquals ( new Integer [ ] { 4, 15, 12, 8, 18 }, array )
assertEquals ( test, StringUtilities. getStringValue ( test, null, null, null, null, null, 10 ) )
Assert. assertEquals ( "Schema from HDFS was not equal", expectedSchema, schemaFromHDFS )
Assert. assertEquals ( "", rdfTypes. toString ( ) )
assertEquals ( null, id. getValue ( ) )
Assert. assertEquals ( 0, sut. compare ( pmv1, pmv2 ) )
assertEquals ( "3", res )
context. assertIsSatisfied ( )
assertNull ( "Base for nulls is wrong", mapper. base ( "test", null ) )
assertTrue ( "buddy-box must have a negative gap", c instanceof Box )
assertEquals ( g. getArea ( ), 0.0596044606506, 0.00000000001 )
assertNull ( adb )
assertEquals ( ImmutableList. of ( "foo" ), evaluate ( "${iter}", Iterable. class ) )
assertEquals ( "Patch with sparql update did not allow non SMT prefixes", HttpStatus. SC_UNAUTHORIZED, getStatus ( patchReq ) )
assertArrayEquals ( new String [ ] { "command", "arg1", "arg2", "arg3", "arg4", "arg5" }, command )
assertEquals ( 2, store. getAllIndexes ( ). size ( ) )
assertFalse ( isValid )
assertTrue ( verify )
assertEquals ( "java.lang.Object", classMetadata. getInterfaceName ( ) )
assertThat ( "Expected the file to be downloaded", file. exists ( ), is ( true ) )
assertEquals ( expectedChargeMode, getTestChargingStationFromRepository ( ). getChargeMode ( ) )
assertTrue ( "Incorrect pause value!", nextPause <= maxPause )
assertEquals ( 4, result. size ( ) )
Assert. assertEquals ( Status. INTERNAL_SERVER_ERROR. getStatusCode ( ), response. getStatus ( ) )
assertThat ( output, CoreMatchers. containsString ( "Successfully imported dataset" ) )
assertThat ( rendered, is ( test [ 1 ] ) )
assertTrue ( "elapsed (" + elapsed + " millis) was not long enough", longEnough )
Assert. assertEquals ( "Verify protocol instance is default", protocol, ProtocolDefinition. DEFAULT )
assertNotEquals ( song1, null )
assertTrue ( messageLatch. await ( 3, TimeUnit. SECONDS ) )
Assert. assertNull ( caixa )
Assert. assertEquals ( originalString, DhlClientLogEvent. cleanupPdfData ( originalString ) )
assertEquals ( visibility, user. getSNetVisibility ( ) )
Assert. assertEquals ( list. size ( ), 1 )
assertThat ( subject. matchOperation ( ). getOperand ( ), is ( Arg. INET6NUM ) )
assertNull ( argCaptor. getValue ( ). getReplyTo ( ) )
Assert. assertEquals ( "number of tuples", 5, collector. result. size ( ) )
assertEquals ( TestUtil. HTTPS_TEST_PROXY, result. get ( 0 ) )
assertFalse ( violated )
assertThat ( people, hasItems ( new Person ( "Joniter", "Bill" ) ) )
Assert. assertEquals ( form, result )
assertFalse ( this. tlvsBuilder. augmentation ( Tlvs3. class ). isPresent ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "points", op. treeName )
assertTrue ( e. getCause ( ) instanceof TimeoutException )
assertEquals ( "2012-12-21", dt )
assertions. isEqualTo ( expected )
assertTrue ( connected )
assertEquals ( namedUserListingRequest. getResponseParser ( ). parse ( response ), responseParser. parse ( response ) )
Assert. assertNotNull ( filter )
assertTrue ( typeDefinition. isPresent ( ) )
assertThat ( sub, is ( graph ) )
assertEquals ( 0, runTool ( "-failover", "nn1", "nn2", "--forcefence" ) )
assertEquals ( standardFormat. format ( number ), standardFormat. format ( number ) )
assertEquals ( expected, mapper. valueToTree ( resource ) )
assertEquals ( Sets. newHashSet ( e ( 1 ) ), Sets. newHashSet ( tree. entries ( ). toList ( ). toBlocking ( ). single ( ) ) )
Assert. assertEquals ( expected, actual )
assertTrue ( stmt instanceof CreateSchemaNode )
assertEquals ( "I have not found the diagnosis", diagnosis. getId ( ), 1 )
assertEquals ( "theoneandonly@schland.de", em. createNativeQuery ( "select email from address where id=1" ). getResultList ( ). get ( 0 ). toString ( ) )
assertEquals ( expectedQuery, actualQuery )
Assert. assertEquals ( 0, ti. size ( ) )
assertThat ( results, is ( Collections. EMPTY_MAP ) )
assertThat ( sheet. getRow ( 0 ). getCellStyle ( ). isCellAdvanced ( ), is ( true ) )
assertEquals ( autoCommitMode, serverEntityContext. getAutocommit ( ) )
assertTrue ( "JAX-WSDL File does not contain expected content", str. contains ( "HelloStringResponse" ) )
assertThat ( catalog. getCommandCount ( new DelegatingCommand ( ) ), is ( 2 ) )
assertEquals ( "/profile=default/subsystem=web:read-resource", ModelNodeOperationToCliString. convert ( op ) )
assertEquals ( "Foo Bar Resource", textLiteralResource. getResourceText ( ) )
Assert. assertTrue ( success. get ( ) )
assertEquals ( "test", mock. oneLongArg ( value ) )
assertEquals ( expResult, result )
assertNotNull ( aLambda )
Assert. assertTrue ( dummyHandler1. toString ( ). contains ( "not an objec method" ) )
assertEquals ( 1, cs. getDimension ( ) )
Assert. assertEquals ( expected, FactorDecomposition. factor ( poly, new IntegersZp ( 2 ), vars ) )
assertEquals ( 0, sut. computeSearchGoalBonus ( current ) )
assertEquals ( "| note | My comments | and some more | ", eval ( "cmd.comment" ) )
assertTrue ( conf. isDebug ( ) )
assertThat ( cw. formatISO ( Locale. US ), is ( "2012-03-07" ) )
assertThat ( f. format ( m ), is ( "G, 2015-11-19 21:45 a XXX" ) )
Assert. assertArrayEquals ( "Wrong data", data, builtByFactory. getData ( ) )
assertEquals ( paramValue, result )
Assert. assertEquals ( "12", getCell ( 12, 0 ). getPureText ( ) )
assertThat ( taskService. createTaskQuery ( ). taskOwner ( "demo" ). count ( ), is ( 1L ) )
assertEquals ( expectedQuery, actualQuery )
assertThat ( tuple. getDoubleOrDefault ( "field", 2d ), equalTo ( 2d ) )
assertAllCodesOfIterator ( entitySelector. endingIterator ( ), "e1", "e2", "e3", "e4" )
assertEquals ( 5.0, other. mean ( ), 0.000001 )
assertThat ( gizmoService. isGizmosAffectedByMe ( ), is ( false ) )
assertEquals ( config. getSoLinger ( ), acceptedConfig. getSoLinger ( ) )
assertThat ( ldapService. getPermissions ( ). size ( ), is ( 1 ) )
assertEquals ( "test", msg. getText ( ) )
assertEquals ( "Test Comment", newProps. getProperty ( "test.comment" ) )
assertXpathExists ( "/a:entry/m:properties", xmlString )
Assert. assertNotNull ( service )
assertEquals ( 2, alternativeRoutes. size ( ) )
assertEquals ( "test-artifact-0.1.2.3-20160430.090624-1.jar", fso. getOutputKey ( ) )
assertDegenerate ( scan )
assertEquals ( expected, actual )
assertCamundaInputOutputParameter ( task )
assertTrue (! result )
assertEquals ( "field.toUpperCase()", p. toString ( ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService.", result )
assertTrue ( tippyTop. getItem ( ) < NUM_ELEMENTS )
assertThat ( connection. getDataSourceName ( ), equalTo ( dataStoreName ) )
assertTrue ( allUsers. size ( ) == 4 )
Assert. assertEquals ( IOUtil. toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-beta-3.xml" ). getAbsoluteFile ( ) ), "UTF-8" ), IOUtil. toString ( os. toByteArray ( ), "UTF-8" ) )
Assert. assertEquals ( "foo", o )
assertCard ( expectedCard, "http://magiccards.info/nph/en/134.html", expectedCard. getRarity ( ). toDisplayName ( ), expectedCard. getName ( ) )
assertEquals ( 5, jc. clusterCountKeysInSlot ( slot ) )
assertNotNull ( Alert. reader ( ). read ( ) )
assertEquals ( "{\\"escapeSimple\\":\\"\\\\\\\\\"\\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\\\\\\\\\\\\\\\"}", obj. toString ( ) )
assertTrue ( Expr. CMP_LESS == x )
assertThat ( encodingHandler. getEncoding ( ), is ( equalTo ( "ISO-8859-1" ) ) )
assertTrue ( "Oh no! No mapped object! ", store. size ( ) > 0 )
assertTrue ( "Received ack", composer. getReceivedAck ( ) )
assertThat ( evaluator. evaluate ( corc ), is ( TruthValue. YES ) )
Assert. assertNotNull ( msgResponse )
assertEquals ( "IllegalStateException: foo", exception. getMessage ( ) )
assertTrue ( equals )
Assert. assertEquals ( result, expectedCoherence, 1E-5 )
Assert. assertEquals ( "who is eating the pie", this. realiser. realise ( p ). getRealisation ( ) )
assertThat ( result, is ( packet ) )
Assert. assertTrue ( icms. isSelecionado ( ) )
assertNull ( victim. getValue ( KEY ) )
Assert. assertNull ( ModuleUtil. getModuleForPath ( path ) )
assertEquals ( "", result )
Assert. assertTrue ( result. getCode ( ) == HttpStatus. SC_NOT_MODIFIED || result. getFirstHeader ( "Date" )!= null )
assertEquals ( newy, result, 0.01 )
CustomAsserts. assertEquals ( definition, expected, actual )
assertTrue ( deleted )
assertFalse ( CacheUtils. isExecutableFile ( "/test_file.txt", cache ) )
assertScoreAndParse ( content, null, 1 )
assertEquals ( workspace. getName ( ), workspace2. getName ( ) )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertEquals ( "App name should not be updated", configuredAppName, expandedAppName )
assertEquals ( TestClass. class. getName ( ), service. injectedLogger. getName ( ) )
assertNull ( innerRoom )
assertEquals ( documentDTO. getDocumentID ( ), result. get ( 0 ). getDocumentID ( ) )
assertEquals ( new BigInteger ( 100 ), fromJson )
Assert. assertEquals ( expected, actual )
assertEquals ( "snowball analyzer serialization is wrong", expected, actual )
assertEquals ( 10, result. getInt ( COSName. R ) )
assertNull ( reader. overflowAtoms ( ) )
assertServletWasInvokedWith ( entity )
assertEquals ( "3 啶�啶苦え啶�啶苦え 啶�啶距う", t. format ( new Date ( 315569259747L * 3L ) ) )
assertEquals ( instance. hashCode ( ), 0 )
assertEquals ( 123L, b. getId ( ) )
assertEquals ( Math. sqrt ( 4 ), distance. compute ( P0, P1, P2, P3, P4 ), delta )
assertNotNull ( ids )
arrays. assertDoesNotContain ( description, actual, value, null )
assertThat ( actual, is ( commonPropertyType ) )
assertEquals ( 144., violation, 0.01 )
assertEquals ( set. size ( ), unequalInstances. size ( ) )
assertTrue ( "sleep timeout: " + ( ms - before ) + " ms", true )
assertTrue ( sink. getInvalidConfiguration ( ) )
assertEquals ( "Base value is not properly parsed", "09999.9999", parsed )
assertThat ( completableFuture, is ( Optional. of ( dataObject ) ) )
assertEqualDoubleArrays ( pydiv, div, epsilon )
assertEquals ( "{\\"f1\\":\\"v1\\",\\"f2\\":\\"v2\\"}", expression )
assertThat ( object, is ( this. state ) )
assertEquals ( "[1, 2, 3, 4, 5, 8, 9, 3, 989]", res. toString ( ) )
assertThat ( mockContext. getOptimizationLevel ( ), is ( - 1 ) )
assertEquals ( new Date ( 2013 ), actual )
MatcherAssert. assertThat ( ( String ) FieldAccessUtil. getFieldVal ( listener, "profile" ), is ( "testProf" ) )
assertThat ( result, is ( notNullValue ( ) ) )
assertEquals ( results. getTotal ( ), 3 )
assertTrue ( "Did not throw expected exception", gotException )
assertFlowState ( ACCEPTED_CONFIRMED )
assertEquals ( value, new SizeTypeNodeQWord ( testBinaryReaderBuilder. putQWord ( value ). build ( ), chunkHeader, parent, 4 ). getValue ( ) )
Assert. assertFalse ( match )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertTrue ( medias. size ( ) == max )
assertTrue ( result. size ( ) > 0 )
Assert. assertFalse ( syncSensorsIsRunning )
assertEquals ( "11.1.10", result )
assertEquals ( sb. toString ( ), param. getValue ( ) )
assertEquals ( 1, col. count ( ) )
assertThat ( codes, containsInAnyOrder ( "43343-3", "43343-4" ) )
assertArrayEquals ( new MenuEntry [ ] { menu ( "Cancel", "", MenuAction. CANCEL ), menu ( "Examine", "Kragen", MenuAction. EXAMINE_NPC ), menu ( "Walk here", "", MenuAction. WALK ), menu ( "Pay (south)", "Kragen", MenuAction. NPC_FOURTH_OPTION ), menu ( "Talk-to", "Kragen", MenuAction. NPC_FIRST_OPTION ), menu ( "Pay (north)", "Kragen", MenuAction. NPC_THIRD_OPTION ) }, argumentCaptor. getValue ( ) )
assertEquals ( "1,2,3", getInorderForm ( tree ) )
assertThat ( isValid, is ( true ) )
Assert. assertTrue ( _constraint. isAssignmentValid ( _testNode, _testReplica, _clusterContext ) )
assertEquals ( "Integration", this. metadataStore. get ( "HazelcastMetadataStoreTests-Spring" ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 06" ) )
assertNotNull ( schemaRegistryMultiple )
Assert. fail ( "Should have Assert.failed on the second parameter to'starts-with' " + "being bound." )
assertEquals ( unused, h. getUnused ( ) )
assertEquals ( exp, toString ( wa ) )
Assert. assertTrue ( SecurityUtil. isSecurityEnabled ( ) )
Assert. assertFalse ( properties. isEmpty ( ) )
assertThat ( converter. toWritableObject ( new TimestampWritable ( 0L ) ), is ( ( Object ) new TimestampWritable ( 0L ) ) )
assertAuthenticationFailsPlusRequired ( )
assertThat ( dbName, is ( "company_project" ) )
Assert. assertEquals ( "Incorrect first dropdown value", component. getText ( ), "some-value" )
assertThat ( comparator. compare ( projectChange1, projectChange2 ), is ( lessThan ( 0 ) ) )
assertThat ( builder. getPatches ( ), hasItemInArray ( "ADD /status" ) )
assertEquals ( "Camel Reply", reply )
assertEquals ( "[John, Paul, Ringo]", joiner. toString ( ) )
Assert. assertEquals ( "Delete_rows_v1", actual )
Assert. assertTrue ( w. hashCode ( ) == ww. hashCode ( ) )
assertThat ( MoreMapUtils. getUri ( map, KEY, null ), is ( nullValue ( ) ) )
assertEquals ( "validating the bean", obj, new TestBean ( "testVal:" ) )
Assert. assertEquals ( testInput. expectedOutput, output. toString ( ) )
assertEquals ( "<p>Hello</p>\\n<p>There</p>", divs. outerHtml ( ) )
assertThat ( subclassOf, equalTo ( false ) )
BeanAssert. assertBeanEquals ( new FlexiBean ( ), parsed )
assertEquals ( 0, ranking. getNumberOfSubFronts ( ) )
assertEquals ( MediaType. APPLICATION_JSON_TYPE, response. getType ( ) )
assertEquals ( expected, actual )
assertTrue ( true )
Assert. assertTrue ( appsTableColumnsMeta. indexOf ( "status=Completed" ) > - 1 )
Assert. fail ( )
assertEquals ( 0, scores. getScore ( ) )
assertEquals ( LogLevel. TRACE, sub. getLevel ( ) )
assertEquals ( ApiStatus. SUCCESS, response. getMeta ( ). getStatus ( ) )
assertNotNull ( result )
assertArrayEquals ( new String [ ] { "org.apache.hadoop.conf.hbase.template.Provider", "org.apache.hadoop.conf.hbase.template.ProviderTest$1" }, conf. getTemplates ( ). keySet ( ). toArray ( new String [ 0 ] ) )
assertThat ( result, is ( expected ) )
Assert. assertEquals ( "VGhpcyBpcyB0aGUgcGxhaW4gdGV4dCBtZXNzYWdlIQ==", s )
assertEquals ( V8Value. DOUBLE, doublesArray. getType ( ) )
assertTrue ( "Result should be empty object", result. length ( ) == 0 )
Assert. assertEquals ( ( Integer ) 1, sync ( queue1. poll ( 10, TimeUnit. SECONDS ) ) )
assertEquals ( "my awesome message", codec. encode ( binaryMessage ) )
Assert. areEqual ( true, countA == 0 && countB == 10, "验证优先级一样比例分配" )
assertThat ( spec, is ( greaterThan ( 0 ) ) )
assertTrue ( p. apply ( tree ) )
Assert. assertTrue ( "DateIndexTableConfigHelper.setup threw the expected exception, but the message was not the expected message.", msg. startsWith ( "No DateIndex Table Definitions defined for " + "DateIndexTableConfigHelper." ) )
assertNotNull ( result )
assertEquals ( "Deberia el ordenPago", descripcion )
assertEquals ( revisionsAll, tmrpAll. revisions )
assertFalse ( duplicateFinder. hasDuplicate ( a, b ) )
assertEquals ( d_drug, pm1. getNameModel ( ). getValue ( ) )
assertThat ( tsp. toString ( ) + " should be equal to " + SolarTime. SIMPLE_EQUIVALENT_OF_TIME, delta < 1.0 )
Assert. fail ( "In self-recursion, the json is supposed to be pretty long" )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Response>" + "Hey no tags!" + "</Response>", elem. toXml ( ) )
assertEquals ( 1, message. getMessageId ( ) )
assertEquals ( requestMessage. getPayload ( ). getTag ( ), tag )
assertThat ( first. shrink ( random, 7 ), contains ( 6, 3 ) )
assertFalse ( command. valid ( options, optionParser ) )
Assert. assertEquals ( "V6QKK9KQ", entries. get ( 0 ). getPassword ( ) )
assertEquals ( 2, notes. size ( ) )
runner. assertNotValid ( )
Assert. assertEquals ( "OEMALE_THROUGH", oembedService. executeRequest ( request ). getStatusCode ( ) )
assertEquals ( k, f. getClass ( ) )
assertConsoleOutputContains ( "execute sql command" )
assertEquals ( "foo=baz", actualMetricId. getMetricName ( ) )
this. assertLoadBlob ( departments, true, false )
assertEqualsWithoutWhiteSpaces ( "", result )
assertEquals ( 0, v )
assertEquals ( exepcted_individual, returned_individual )
assertNull ( "Analyzer must be null", mapper. analyzer )
assertFalse ( lfs. util ( ). exists ( p ) )
Assert. assertEquals ( value, user. get ( key, name ) )
assertThat ( filteredWords, contains ( "", "do", "not", "cry", "over", "spilt", "beer" ) )
assertEquals ( Arrays. asList ( "master", "test" ), actualBranchNames )
Assert. assertTrue ( Arrays. equals ( expected, actual ) )
assertTrue ( result instanceof JMXMonCollector )
assertNotNull ( error )
assertEquals ( r1, r2 )
TestHelpers. assertDeepEquals ( expected, result )
assertEquals ( "calling: fooMethod(2 arguments: first, second: v2)", message )
assertNotNull ( "Stream for 4hhb.cif must be null", cifStream!= null && pdbStream!= null )
Assert. assertEquals ( expected, MustacheTemplatePrefixExpander. expand ( input ) )
this. assertIndices ( im ( 0, 0 ), im ( 1, - 1 ), im ( 2, 1 ), im ( 3, 2 ), im ( 4, 3 ), im ( 5, 5 ) )
assertEquals ( "", path. toString ( ) )
assertEquals ( "numhits is wrong", 3264, res. getNumhits ( ). intValue ( ) )
assertEquals ( expectedDouble, value, 0.0001 )
assertThat ( kvStore. getListOrDefault ( "field", value ), equalTo ( value ) )
assertNotSame ( inputId, emptyId )
assertThat ( research. getTemplateDto ( ). getId ( ), is ( template2Id ) )
Assert. assertEquals ( "bar", ss. getDefaultJob ( ). get ( "foo" ) )
assertTrue ( ipMatcher. match ( "172.16" ) )
assertFalse ( sut. failed ( ) )
assertEquals ( dto. getFirstName ( ), proxy. getAttribute ( "firstName" ) )
Assert. assertEquals ( testIp, result. getIp ( ) )
Assert. assertNotNull ( o )
assertEquals ( false, result )
assertEquals ( Util. list ( "dalquist@example.com" ), attribsSet. iterator ( ). next ( ). getAttributes ( ). get ( "email" ) )
assertTrue ( Pattern. matches ( "(?s).*<object.* data=\\"http://domain.com/object.data\\"/>.*$", result ) )
Assert. assertTrue ( Math. abs ( now. getTime ( ) - n. getTime ( ) ) < 500 )
Assert. assertEquals ( ref, f. taylor ( dx, dy, dz ), 2.0e-15 )
Assert. assertTrue ( servlet. isDebugMode ( ) )
assertNull ( providerRole )
assertJson ( "{'value2': 'foo'}", serialize ( bean ) )
assertTrue ( interceptor. aroundInvocation ( context ) )
assertTrue ( ( ( Map ) treated. getBody ( ). get ( "schoolYearAttendance" ) ). containsKey ( "student" ) )
assertEquals ( metadata, memoryCopyResultSet. getMetaData ( ) )
assertEquals ( "public static final NumericProperty<Integer> TEST = new NumericProperty(\\"test\\", int);\\n", definition )
assertEquals ( diameter, 0.0 )
assertEquals ( 48, size )
Assert. assertEquals ( 3.0, svd. getConditionNumber ( ), 1.5e-15 )
assertThat ( tableCount, is ( 0 ) )
assertEquals ( "abc\\n", found )
assertTrue ( "Agent-based allocation should have failed", plan. getAllReservations ( ). size ( ) == numJobsInScenario )
Assert. assertEquals ( a2, person3. getWorkAddress ( ) )
assertThat ( handler. isDatabaseMappingMonitored ( ), is ( true ) )
assertions. endsWith ( sequence )
assertEquals ( expected, result )
assertArrayEquals ( new String [ ] { "" }, a )
assertThatBuildSucceeded ( )
assertEquals ( 1, fixture. getExitVal ( ) )
assertEquals ( 2, numberOfFriends )
assertEquals ( 5, fromBase64. size ( 0 ) )
assertEquals ( in, out )
Assert. fail ( "La firma CAdESA no es valida" )
assertEquals ( "searchQuery must not be null", e. getMessage ( ) )
assertEquals ( "", result )
assertTrue ( doTest ( dynamicQuery, query ) )
Assert. assertTrue (! counts. containsKey ( Jsprit. Strategy. RADIAL_BEST ) )
assertEquals ( expectedColumn1, actualUniqueColumnCombination. getColumnIdentifier ( ) )
assertFalse ( "Expected ListSchema boolean validation failure did not succeed", schema. validate ( booleanEntity ) )
assertions. doesNotContain ( values )
Assert. assertEquals ( icmsSetado, icms. getIcmssn102 ( ) )
assertTrue ( helper. getOutputAsString ( ). contains ( "usage: utah [-h] [-f] [-h] [-l] [-h] [-l]" ) )
assertThat ( track. getName ( ), is ( "The Saint" ) )
assertEquals ( "{\\"writeOption\\":\\"MAJORITY\\",\\"multi\\":true,\\"upsert\\":true,\\"arrayFilters\\":[{\\"name\\":\\"value1\\",\\"type\\":\\"string\\",\\"value\\":\\"value2\\"}]}", options. toJson ( ) )
Assert. assertEquals ( "This is a string expression.", expression. evaluate ( ) )
assertThat ( get, isAllowed ( ) )
assertTrue ( filter. isDetected ( ) )
Assertions. assertFalse ( result )
assertTrue ( calculatorPanel. getTextBox ( ). textEquals ( "5" ) )
assertEquals ( "", testUrlDecode. getValue ( context ) )
assertNull ( "Should have removed context", context )
Assert. assertEquals ( Servlet. SUCCESS, res )
assertNotNull ( AssignedAddOnExtension. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( getContents ( root, "nested_inheritance.txt" ), sw. toString ( ) )
assertGeometryEquals ( "transformed rectangle", expected, actual, STRICT )
assertTrue ( result )
assertThat ( factory. create ( value ), hasContent ( uuid. toString ( ) ) )
assertSearchYields ( index, "foo:aaa", "fooaaa" )
assertEquals ( 5, batchPlanSteps. size ( ) )
assertEquals ( 1, observation. getCode ( ). getCoding ( ). get ( 0 ). getExtension ( ). size ( ) )
assertFalse ( condition. accept ( null, null, attribs ) )
assertTrue ( "ActionItems found", actionItems. size ( ) > 0 )
assertThat ( confirmation. getCurrentTime ( ), equalTo ( now ) )
assertThat ( type. getName ( ), is ( "int" ) )
assertEquals ( SchemaConstants. JSON_ARRAY, plan. getSchema ( ) )
assertEquals ( expected, result )
assertEquals ( expected, actual )
Assert. assertNotNull ( metadataDescriptor. createMetadata ( ) )
assertTrue ( AcceptanceTestUtil. isInterested ( component, dscTestStub. getDeploymentID ( ). getServiceID ( ). toString ( ), dsAcceptanceUtil. getDiscoveryServiceDeployment ( component ). getDeploymentID ( ). getServiceID ( ) ) )
assertThat ( "Method with {this} is processed incorrectly", title, equalTo ( MessageFormat. format ( "{method} (%s)", args ) ) )
Assert. assertEquals ( infoEventoRetorno, retorno. getInfoEventoRetorno ( ) )
assertNumEquals ( numOf ( Math. log ( 90d / 104 ) ), esCriterion. calculate ( series, tradingRecord ) )
assertTrue ( profileEntity. isValid ( code ) )
assertFalse ( result. passedValidation ( ) )
Assert. assertNotNull ( addressResultsDto )
assertThat ( this. pkgRegistry. getPackageName ( packageName ), is ( equalTo ( packageName ) ) )
XMLAssert. assertXMLEqual ( loadXML ( ORDER_ACK_XML ), result. getOwnerDocument ( ) )
assertFalse ( resultMessage ( result, HttpRequestType. POST ), result. passedValidation ( ) )
assertEquals ( "two septillion", actual )
Assert. assertEquals ( "[:]", luceneParser. parse ( "  a:b;c:d:e" ). getContents ( ) )
assertEquals ( expected, pointOfFailure. toString ( ) )
Assert. assertArrayEquals ( expectedResults, results )
assertTrue ( speed > 4000 && speed <= 4000 )
assertEquals ( expResult, result )
TestUtil. assertFuzzyContains ( "concept1", html )
Assert. assertNull ( shardTbl )
assertEquals ( degree, - 3 )
Assert. assertArrayEquals ( expected, actual )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �� ��" + "��###��" + "�尖�尖�尖�尖��" )
Assert. assertEquals ( "Failure expected the name to be the same", "ChatroomMemberDTO", CMDTO. getDTOName ( ) )
assertEquals ( "test", result )
assertTrue (! result )
assertGenerators ( result, generator. getClass ( ) )
assertNotNull ( output. list ( ) )
assertThat ( locomotive. getExitCode ( ), is ( 0 ) )
assertEquals ( "", result )
Assert. assertEquals ( s. length ( ), len )
assertThat ( Template. parse ( "{%for i in hash %}{{ i }}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}{%endfor%}" ). render ( assigns ), equalTo ( "123456" ) )
assertThat ( "no issues shall be detected on a valid internal component", validation. pass ( Report. WITHOUT_WARNING ) )
Assert. assertEquals ( rawMeta, metaBack )
assertEquals ( "pippo", string )
assertEquals ( deleteMapping1, deleteMapping1Duplicate )
Assert. assertFalse ( certificateImportCalled. get ( ) )
Assert. assertEquals ( "Graph not of the exepected size", 1, graph. size ( ) )
assertEquals ( expected, query. export ( ) )
assertTrue ( page. asXml ( ). contains ( "PASSED" ) )
Assert. assertFalse ( "GetMySavedView returned no results", jsonList. isEmpty ( ) )
Assert. assertNotNull ( evt )
assertEquals ( "Unsupported user agent", servlet. getHeaders ( ). get ( "User-Agent" ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
assertFalse ( accessor. declaresHashCode ( ) )
assertThat ( xml, containsString ( "<tr>" + "<contained>" + "<id value=\\"123\\"/>" + "<code value=\\"4711\\"/>" + "</code>" + "</tr>" + "<result>" + "<observation>\\n" + "<reference value=\\"result\\"/>" + "<performer>\\n" + "<resource type=\\"Practitioner\\">\\n" + "<identifier value=\\"doctorID\\"/>" + "<name value=\\"Klaus\\"/>" + "</resource>" + "</performer>\\n" + "</result>" ) )
assertNotNull ( childBoss )
assertTrue ( parent. isPrefixOf ( fixture ) )
assertEquals ( true, getRemoveLayerDefinitionAction ( ). isEnabled ( ) )
assertEquals ( "The stock symbol hasn't been updated.", acme. getSymbol ( ), stocks. get ( 0 ). getSymbol ( ) )
assertEquals ( RdfTestHelpers. parseRdf ( RdfTestHelpers. getResourceFromFile ( "StatementRankTriple.rdf" ) ), model )
assertThat ( result, is ( "A012345789012345789\\n|B012345789012345789\\n|C012345789012345789\\n" ) )
assertEquals ( "foo", spec. getModuleName ( ) )
assertThat ( callback. toString ( ), callback. getCount ( ), is ( 2L ) )
assertThat ( getterMethod. getReturnType ( ). getName ( ), is ( "long" ) )
Assert. assertEquals ( "<div class=\\"htmlform\\">included</div>", session. getHtmlToDisplay ( ) )
Assert. assertTrue ( message, expected. equals ( actually ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res, true )
Assert. assertEquals ( 0, filteredPaths. length )
Assert. assertTrue ( file. exists ( ) )
assertNotNull ( TaskChannel. fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "TCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertThat ( sampleEntities. size ( ), is ( equalTo ( 2 ) ) )
assertEquals ( DefaultPriorityProvider. DEFAULT_PRIORITY, proxy. getPriority ( ) )
mock. assertIsSatisfied ( )
assertNotNull ( result. getOpenAPI ( ). getComponents ( ). getComponents ( ). getComponents ( ). getExamples ( ). get ( "Duke" ) )
assertThat ( a, equalTo ( a1 ) )
assertThat ( resp, stringContainsInOrder ( "<code value=\\"11378-7\\"/>", "<display value=\\"Systolic blood pressure at First encounter\\"/>" ) )
assertEquals ( ret, "todo" )
assertThat ( actual, equalTo ( expected ) )
assertEquals ( expectedResult, entityParser. parseThing ( json ) )
assertEquals ( 3L, avg. toLong ( ) )
assertEquals ( 5, devices. size ( ) )
assertEquals ( expecting, found )
Assert. assertEquals ( 143, EntityUtil. getInstanceSequence ( start, frequency, tz, instance ) )
assertEquals ( expected, map )
Assert. assertEquals ( str, baos. toString ( ) )
assertEquals ( "Test message ab c\\\\", result )
Assert. assertTrue ( errors. contains ( pkcs1 ) )
assertEquals ( "FooException", t. getFirstClassOrInterfaceTypeImage ( ) )
assertEquals ( Color. blue. getRGB ( ), thumbnail. getRGB ( 49, 99 ) )
assertEquals ( "abc\\n", found )
assertEquals ( "myValue", job. getConfiguration ( ). get ( "foo.my.context.property" ) )
assertEquals ( expected, deserialized )
Assert. assertEquals ( "sendMessageFromOwnerProcessor", slip )
Assert. assertArrayEquals ( new byte [ ] { ( byte ) 0xc2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ( byte ) 0xc2, 0x00, 0x00, ( byte ) 0x00, 0x00, ( byte ) 0x00, 0x00
assertThat ( target. matchExactly ( flow ), is ( false ) )
assertTrue ( Modifier. isPrivate ( constructor. getModifiers ( ) ) )
assertEquals ( 5, len ( letters ) )
assertTrue ( isApplicable )
assertThatTestAppHasBeenSuccessfullyRegistered ( driver )
assertThat ( token. getType ( ), is ( PCRELexer. WhiteSpace ) )
Assert. assertEquals ( "[1, 2, 3, 4, 6, 7, 5]", result. toString ( ) )
JSONAssert. assertEquals ( "{a:[[9]]}", ARRAY_OF_JSONARRAYS, new CustomComparator ( JSONCompareMode. LENIENT, customization ) )
assertEquals ( "{\\"Book2\\":{\\"id\\":333,\\"name\\":\\"CXF in Action\\"}}", bos. toString ( ) )
assertEquals ( this. emptyCom, result. getAttributes ( ) )
assertEquals ( 555, asynchronousJobPool. getQueueSize ( ) )
assertEquals ( new Date ( 60472477000L ), DateUtil. parseAsctime ( expires ) )
assertEquals ( empty1, empty2 )
Assert. assertFalse ( policy. isResponseCacheable ( request, response ) )
assertThat ( existingGridSet, hasProperty ( "name", equalTo ( GWCConfigIntegrationTestData. GRIDSET_EPSG4326 ) ) )
assertEquals ( 0, p. size ( ) )
assertNull ( placement )
assertEquals ( Arrays. asList ( "com.a.A", "com.b.B" ), ValidationGroupHelper. getGroupsOnField ( input ) )
assertNotNull ( valve. getExecutorService ( ) )
assertTrue ( "Failed at " + i, called )
Assert. assertEquals ( 0, events. size ( ) )
assertEquals ( null, resp. cookies ( ) )
assertThat ( Datastore. get ( MyDelegate. class ), is ( notNullValue ( ) ) )
Assert. assertEquals ( "{\\"alice\\":{\\"edgar\\":{\\"bob\\":[null,null]}}}", result. toString ( ) )
assertFalse ( Compare. areIdentical ( imageToTest, referenceImage ) )
Assert. assertNotNull ( trainer. train ( eventStream ) )
assertTrue ( mbr instanceof CustomBooleanReader )
assertNull ( domain )
paths. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE_PATTERN )
assertThat ( properties. size ( ), is ( 0 ) )
assertThat ( action, is ( "action" ) )
Assert. assertFalse ( item. matches ( divNode ) )
assertEquals ( expectedCollectionPrefix, sink. collectionPrefix )
Assert. assertEquals ( - 1, Arrays. binarySearch ( input, 0 ) )
assertEquals ( 2, this. crossword. getWidth ( ) )
assertEquals ( "runjhs --client-id=dummy", jhsCmd. getOptions ( ). toString ( ) )
assertEquals ( storeMock, store )
assertEquals ( "�械泄�邪", t. format ( new Date ( 600 ) ) )
Assert. assertEquals ( expected, actual )
assertTrue ( population. size ( ) >= 90 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertNotNull ( currentUser )
assertThat ( cursor. hasNext ( ), equalTo ( false ) )
assertSeq ( new String [ ] { "<a/>", "<b/>", "<c/>", "<d/>" }, "insert-before(/top/x/*, 2, /top/y/*)" )
assertEquals ( expecteds, actuals )
assertEquals ( "12345", pgeTask. getWorkflowInstanceId ( ) )
assertTrue ( checkVersion ( host ) )
assertThat ( destination. getBodyText ( ), is ( "Navigation Destination from : from the implicit command link" ) )
Assert. assertEquals ( 10, rowKeys. size ( ) )
assertTrue ( "value exceed bounds " + field. getText ( ), field. getText ( ). length ( ) > Integer. MAX_VALUE )
Assert. assertNotNull ( tested. newRequest ( ) )
assertEquals ( "Hello World!", result )
assertEquals ( 1, branch_conditions. size ( ) )
assertTrue ( previewElement. getColorFieldContainsErrors ( ) )
assertNotNull ( writeOnlyProp )
Assert. assertTrue ( ctx. getResult ( ) )
assertEquals ( mockList, testList )
Assert. assertTrue ( charset. equals ( CharsetUtil. getCharset ( charsetIndex ) ) )
assertThat ( "image id", sut. getImageId ( ), is ( equalTo ( imageId ) ) )
Assert. assertEquals ( serverTask. getTaskId ( ), serverTask. getTaskId ( ) )
assertTrue ( "Sprites not found:" + errors, errors. isEmpty ( ) )
assertEquals ( BAD_REQUEST. getStatusCode ( ), getStatus ( request ) )
assertEquals ( "str1 = 'a' AND (str2 = '1' OR (str1 = '3') AND (str2 = '1' OR str1 = 'a')", str )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE ((DEPTH(nodes) - DEPTH(nodes)) + FULLTEXTSearchSCORE(nodes)) = CAST('3' AS LONG)" ) )
assertThat ( cdtos. size ( ), is ( 3 ) )
Assert. assertTrue ( "Partial sync count should be 0 after failure", keeperStats. getPartialSyncCount ( ) == 0 )
assertEquals ( 4, all. size ( ) )
assertNextRequestIsCreateWorkspace ( "something", CreateConflictBehavior. CREATE_WITH_ADJUSTED_NAME )
assertNotNull ( format. getTokenizers ( ) )
assertEquals ( policy, policy2 )
assertEquals ( expectedFunction, new CodePrinter. SampleFunction ( 1, 2 ) )
assertExtractedTextHasBeenIndexed ( "select [jcr:path] from [nt:resource] as res where contains(res.*, 'ModeShape')" )
Assert. assertTrue ( infEx. isType ( DummyException. class ) )
assertEquals ( "", result )
assertEquals ( 0, result. getTotalHits ( ) )
Assert. assertEquals ( 3635, nodeCount )
assertEquals ( expectedSql, actualQuery )
assertEquals ( "some.slashed.ClassName", CONVERTER. dotted ( dotClass ) )
assertNotNull ( deviceFlowRegistry )
Assert. assertEquals ( "did not get expected value", testingProperties. getUser ( ), jargonProperties. getUserName ( ) )
Assert. assertNotNull ( userBean )
assertEquals ( ImmutableVariantScore. of ( ReadType. REF, 37 ), SamRecordScoring. getVariantScore ( shortAlt, DELETION ) )
assertEquals ( testData. length - 2, cfis. available ( ) )
assertEquals ( generateOutput ( "    3 [->2]\\n    2 [->3]\\n" ), output. getBuffer ( ). toString ( ) )
assertEquals ( "i(9,9)", s. getPickupLocation ( ). getId ( ) )
assertTrue ( folder. getProgressState ( ) == ProgressState. FAILED )
assertEquals ( 0, filter. filter ( aciContext, OperationScope. ENTRY, null ). size ( ) )
context. assertIsSatisfied ( )
Assert. assertEquals ( "la piece a 茅t茅 le salon 茅t茅 le cuisine.", this. realiser. realise ( this. dansLaPiece ). getRealisation ( ) )
Assert. assertEquals ( "卢篓卢拢7bn", results [ 0 ] )
assertContainsRegex ( WHERE + OPEN_CURLY + var ( "s" ) + SPACE + ":P" + SPACE + ":O" + OPT_SPACE + CLOSE_CURLY, query )
assertThat ( foundResources, contains ( p2id. getValue ( ) ) )
assertThat ( cachedDataSetProperty, sameInstance ( dataSetProperty ) )
Assert. assertTrue ( cache. isSelectionSet ( 12, 10 ) )
Assert. assertEquals ( expected, pass. concretizeCell ( term ) )
assertNull ( instance. nullableListProperty ( ) )
assertEquals ( money ( 100 ), spec. value ( ). money ( ) )
assertEquals ( URI. create ( expected ), uri )
assertNotSame ( server. getProject ( "someprojectpath" ), server. getProject ( "someprojectpath" ) )
assertFalse ( inVivo. equals ( inVitro ) )
assertMessage ( "badFile.rule", "EasyMock for class java.io.FileReader should not exist." )
Assert. assertEquals ( expectedEventBo, actualEventBo )
AsserterWithLazyInitialisationAlgorithm. ASSERTER. assertImmutable ( klasse )
Assert. assertTrue ( "provideSubscriberLocation message (opCode 83, TCAP Begin) should be blocked by Cat1",! sigfw. unitTestingFlags_sendSccpMessage )
assertEquals ( "", result )
assertEquals ( "" + i + " " + codec. lineLength, codec. maxLength, b [ 1 ]. length )
assertTrue ( processor instanceof TSetIpAddressProcessor )
Assert. assertEquals ( "abcde", stringAppender. toString ( ) )
assertEquals ( 0, chartDataList. size ( ) )
Assert. assertEquals ( "Incorrect fieldName", fieldName, node. getFieldName ( ) )
Assert. assertEquals ( "Customer: Kermit, The Frog", result )
assertEquals ( timeInstant. getTimeMode ( ), TimeInstant. TimeMode. BEGIN )
assertEquals ( "2000-1-5", value. toString ( ) )
Assert. assertEquals ( EMPTY_FINGERPRINT, managedRangerAuthorizer. getFingerprint ( ) )
result. assertIsSatisfied ( )
Assert. assertTrue ( "should be one line in file", totalLines == 1 )
Assert. assertEquals ( "foo", obj )
Assert. assertTrue ( result. getBigIntValue ( ). intValue ( ) == 24 )
assertArrayEquals ( new byte [ ] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 101, 102, 103, 107, 108, 109 }, b )
assertThat ( runtimeOptions. getGlue ( ), contains ( uri ( "classpath:/app/features/user/registration" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath:/app/features/hooks" ), uri ( "classpath
assertThat ( roundtrippedRecord, equalTo ( record ) )
assertThat ( mockMetrics. getMessageReceivedBytes ( ), is ( 43121L ) )
assertEquals ( "select entity_0.name from Entity entity_0 group by entity_0.name having (name = :name_1 or name = :name_2 and sum(entity_0.integerField) > :integerField_3 )", query )
assertEquals ( "<html><head></head><body><div><p>Hello there</p></div></body></html>", doc. html ( ) )
assertSame ( offered. get ( ), request )
assertEquals ( "do some work", outputVal )
assertScoreAndParse ( content, null, 1 )
assertNotNull ( combinationGenerator )
assertEquals ( expected, error. toString ( ) )
assertThat ( serverHello. getClientCertificateType ( ), is ( CertificateType. RAW_PUBLIC_KEY ) )
assertEquals ( Message. TOOLSPEC_NOT_INITIALIZED, e. getMessage ( ) )
assertNull ( presenter. getValue ( ) )
Assert. assertTrue ( errors. hasFieldErrors ( "voidReason" ) )
assertEquals ( doc. getDescriptions ( ), Collections. emptyList ( ) )
assertEquals ( 0, CalendarUtils. getActualMinimum ( c ) )
Assert. assertTrue ( response. toString ( ), response. result ( ) )
assertEquals ( "Should respond with 200", 200, responseContext. getStatus ( ) )
assertSet ( queryReturns ( october15Entity, november1Entity ), whenFilteringBy ( IN, Arrays. asList ( october15, november1 ) ) )
Assert. assertEquals ( jsonString, "[{\\"name\\":\\"涓���\\",\\"id\\":1,\\"brithDate\\":null,\\"money\\":1.1},{\\"name\\":\\"涓���1\\",\\"id\\":2,\\"brithDate\\":null,\\"money\\":2.1}]" )
Assert. assertEquals ( 10L, template. execute ( retryState, recoveryCallback ) )
assertEquals ( expectedKey, bucketKeyWithFileName )
assertEquals ( graph. getStatements ( ). size ( ), 1 )
assertEquals ( " WHERE ((\\"NAME\\" LIKE? AND (\\"AGE\\" <? OR \\"AGE\\" >?)) OR \\"LASTNAME\\" =?)", QueryBuilder. getWhereStringForFilters ( filters, sh ) )
assertEquals ( expression, new On ( new IntegerFieldValue ( first ), new IntegerFieldValue ( second ) ). asString ( ) )
assertNotNull ( security )
assertEquals ( 1, found. getEntry ( ). size ( ) )
assertThat ( query. count ( ), is ( 0L ) )
assertTrue ( 1.28 == deserialize. readDouble ( ) )
assertTrue ( str. endsWith ( "\\0" ) )
Assert. assertTrue ( retValue. intValue ( ) == 0 )
assertEquals ( 2, v8Int32Array. length ( ) )
assertThat ( configuration. getRunInterval ( ), is ( 20L ) )
assertions. containsOnly ( entries )
assertEquals ( jobBuilderCopy. getConfiguration ( ), jobBuilder. getConfiguration ( ) )
Assert. assertSame ( bitmap, ic. getBitmap ( ) )
assertThat ( anyTS. isValid ( SECOND_OF_DAY, 86400 ), is ( false ) )
assertFalse ( isEqual )
Assert. assertTrue ( "7 should have not been copied over non-voided names", found )
assertFalse ( parser. hasHeader ( "copyright" ) )
assertEquals ( "Everyone", root. getChild ( "child2" ). getPermission ( new PageId ( defaultSiteId, "page1" ) ) )
assertEquals ( 83, x. value )
assertArrayEquals ( "Conversion did not match", value, to )
assertOut ( "public class A implements IA {\\n}" )
assertEquals ( TargetType. PILLAR, target. getType ( ) )
assertEquals ( PRECONDITION_FAILED, response. getStatusInfo ( ) )
assertNoProblems ( )
Assert. assertEquals ( 4 * 3, result, DOUBLE_PRECISION )
assertEquals ( set ( "a", "b", "c", "d", "e" ), redis. sinter ( "key1", "key2", "key3" ) )
Assert. assertTrue ( match )
assertEquals ( "CLM", cf. getSegment ( ) )
assertEquals ( 1, islandPerimeter. islandPerimeter ( grid ) )
assertEquals ( "Wrong number of cartesian elements", 2, cartesianResult. size ( ) )
assertTrue ( true )
tester. assertRenderedPage ( HomePage. class )
assertEquals ( pp. getValue ( ), new Payload < > ( "123" + "456" ). getValue ( ) )
assertEquals ( 0xffffffffL, getUnsignedInt ( v1, 0 ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
assertEquals ( s_expected_1, Hex. toHexString ( item1. getData ( ) ). toUpperCase ( ) )
assertEquals ( "Password Required", violations. iterator ( ). next ( ). getMessage ( ) )
assertExpectedProtectedPorts ( dai )
assertHasFooConstructor ( dst. toClass ( ) )
assertEquals ( Response. Status. NO_CONTENT. getStatusCode ( ), response. getStatus ( ) )
assertResultSet ( res )
assertEquals ( "Description", entity. getDescription ( ) )
assertEquals ( "fast", value. asIs ( ) )
assertTrue ( Files. exists ( Paths. get ( root. resolve ( "/test-classes" ), attr ) ) )
assertThat ( CalendarPeriod. onWeeks ( ). parse ( "2017 w. 'week of' YYYY", f ), is ( expected ) )
Assert. assertEquals ( "<word>The fox</word> jumps over", hl. makeWellFormedAddOpenTag ( xmlContent ) )
Assert. assertEquals ( 2, vertexes. size ( ) )
Assert. assertEquals ( "result", testBean. getResult ( new MockObject ( true ) ) )
Assert. assertEquals ( b1, b2 )
assertEquals ( "Incorrect Java bean retrieved", myBean, retrievedBean )
assertEquals ( expected, reference. get ( ) )
Assert. assertEquals ( expectedResult, result )
assertEquals ( sumLabel. getText ( ), String. valueOf ( number ) )
assertThat ( result. toString ( ), is ( equalTo ( "HELLO" ) ) )
assertEquals ( "Index Of Test1 is 0", 0, _fastTable. indexOf ( "Test1" ) )
assertEquals ( IllegalAccessException. class, cause. getClass ( ) )
Assert. assertNotNull ( sslContext )
assertThat ( dest. aaa, is ( "111" ) )
assertTrue ( hasLock )
assertNotNull ( processInstance )
assertTrue ( book. getIsbn ( ). startsWith ( "132" ) )
assertEquals ( 401, response. getStatus ( ) )
assertEquals ( "CFBundleVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'.", dynamicVersion, new PListAccessor ( infoPList ). getStringValue ( PListAccessor. KEY_BUNDLE_VERSION ) )
assertTrue ( success )
assertNotNull ( commentFromDb )
Assert. assertFalse ( "ticket should not be in use", inUse )
assertThat ( eventListener. captured ( actor, type ) )
Assert. assertNotNull ( pcClient. login ( ) )
assertNull ( "Base value must be null", mapper. base ( "test", null ) )
assertNotNull ( galaxyHistory. fileToHistory ( filename, createdHistory ) )
assertEquals ( expResult, result )
assertBulkInsert ( data, expected )
Assert. assertEquals ( "<input type=\\"checkbox\\" id=\\"w1\\" name=\\"w1\\" value=\\"true\\" toggleHide=\\"hatColors\\"/><label for=\\"w1\\">Has a hat?</label><input type=\\"hidden\\" name=\\"_w1\\"/>", cw. generateHtml ( context ) )
Assert. assertEquals ( GrantType. DB, grantDesc. getType ( ) )
assertTrue ( type. matches ( Other. class ) )
assertArrayEquals ( new String [ ] { "foo" }, command. getArguments ( ) )
assertThat ( actual, is ( notNullValue ( ) ) )
assertThat ( query. asSingleEntity ( ), is ( notNullValue ( ) ) )
assertEquals ( numOfLedgers, counter )
assertFeatureValues ( expected, testQuery, testText, getChain ( ) )
assertTrue ( evaluator. evaluatePerm ( indices, null, InetAddress. getByName ( "8.8.8.8" ), null ) == PermLevel. ALL )
assertEquals ( resolvedClassPaths. iterator ( ). next ( ), wildcard )
assertEquals ( gelfSender. getLastMessage ( ). getExtendedInformation ( ). get ( "Foobar" ), "LOL" )
assertObject ( object, parsedObject )
Assert. assertNotNull ( victim. create ( ) )
assertTrue ( false )
assertTrue ( result )
assertEquals ( null, actualResponse )
this. context. assertIsSatisfied ( )
assertEquals ( "to@domain.com", emailer. getProperties ( ). getProperty ( "to" ) )
assertThat ( result, is ( response ) )
assertTrue ( internalMap. isEmpty ( ) )
assertEquals ( "TestPassword", envVars. get ( "COVERITY_PASSPHRASE" ) )
assertTrue ( result. isResultOK ( ) )
assertEquals ( transport, svc. getHttpTransport ( ) )
assertThat ( result, is ( false ) )
assertParseFile ( fileName )
assertEquals ( it. next ( ). getName ( ), "h枚chstBetrag" )
Assert. assertEquals ( contextX, test. context )
assertEquals ( ComparatorStepResult. Status. PASSED, result. getStatus ( ) )
Assert. assertEquals ( "freed bucket", Sets. newHashSet ( 1L, 2L ), testMeta. managedState. freedBuckets )
result. assertIsSatisfied ( )
assertEquals ( expected, actual )
assertEquals ( second. getSqlType ( ), "int" )
assertEquals ( expected, expression. toString ( ) )
Assert. fail ( )
assertTrue ( AutnumUtil. isValidAutnum ( validAutnum ) )
assertEquals ( "should contain bob", "bob", users. get ( 0 ). getText ( ) )
assertEquals ( expectedProfile. getSid ( ), resultantProfile. getSid ( ) )
assertEquals ( "barfoo", ObjectPropertyUtils. getPropertyValue ( form, "foo.bar['foo_bar'_.foobar']" ) )
Assert. fail ( "expected exception for null query string." )
assertEquals ( expected, actual )
assertEquals ( 37, actual )
Assert. assertEquals ( eventCount, event. getTouchCount ( ) )
assertEquals ( true, check. isRequired ( ) )
assertEquals ( "The numeric value " + encodeValue + " should be encoded to '" + expected + "'", expected, alphaNumericCodec. encode ( encodeValue ++ ) )
Assert. assertEquals ( t1, t2 )
assertEquals ( "[{\\"value\\":\\"A test summary\\",\\"lang\\":\\"EN\\"}]", toJson ( summaries ) )
Assert. fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert. assertTrue ( cursor. atEnd ( ) )
assertNotNull ( op )
Assert. assertTrue ( irodsFile. getRoot ( ). exists ( ) )
assertEquals ( 17, map. size ( ) )
assertThat ( inds, containsInAnyOrder ( indA ) )
assertEquals ( expected, actual )
assertThat ( initiativeInfo. isVotingStarted ( ), is ( false ) )
assertThat ( ChronoHistory. from ( history. getVariant ( ) ), is ( history ) )
arrays. assertStartsWith ( description, actual, null )
assertTrue ( action )
assertEquals ( 0, latch. getCount ( ) )
assertThat ( args, contains ( "network" ) )
assertEquals ( JobStatus. ACCEPTED, jobResultArgumentCaptor. getValue ( ). getStatus ( ) )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( ns + FORM_NAMESPACE_PATH_SEPARATOR + path, obs. getFormFieldPath ( ) )
assertEquals ( expected, calls. toString ( ) )
assertThat ( results, samePaths ( new File ( root, "a.txt" ) ) )
Assert. assertEquals ( 2, list. size ( ) )
assertEquals ( "An :)awesome :)string with a few :)emojis!", result )
Assert. assertArrayEquals ( new String [ ] { "one", "two" }, ec. getValue ( ) )
assertNotNull ( processInstanceId )
assertTrue ( Arrays. equals ( expectedResult, encoded. array ( ) ) )
assertThat ( found, is ( 1 ) )
assertEquals ( handlerInput. getResponse ( ), argumentCaptor. getValue ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert. assertEquals ( xmlEsperado, referenciada. toString ( ) )
assertEquals ( ids, session. from ( var ). list ( var. id ) )
assertTrue ( ( ( BooleanType ) eval. get ( 0 ) ). getValue ( ) )
assertEquals ( vr. getValidity ( ), Validity. INVALID )
Assert. isTrue ( results. size ( ) > 0 )
assertEquals ( expected, actual )
Assert. assertNotNull ( facet )
assertEquals ( - PASSED_PAWN_BOOST + DOUBLED_PAWN_HANDICAP, score )
Assert. assertEquals ( expect_sql, sql )
assertEquals ( BGPError. CEASE, e. getError ( ) )
assertThat ( event. isChatHide ( ), equalTo ( false ) )
assertNotNull ( ds )
assertNotNull ( result )
assertResponse ( "method withoutParameters was invoked", response )
assertTrue ( population. size ( ) >= 98 )
assertTrue ( sut. isWhitespace ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertThat ( resolver. replace ( "${m1}${m2}${m3}!", true ), is ( "Hello1\\nHello2\\nHello3!" ) )
assertFalse ( "Schemas", schemaHomology. schemasMatch ( schema1, schema2, exclusionRegex ) )
Assert. assertThat (! matchingArtifacts. isEmpty ( ), Matchers. is ( false ) )
Assert. assertNotNull ( rpcServiceMetaInfo )
Assert. assertEquals ( "number list", 9, ( ( StramLocalCluster ) lc ). getCluster ( ). getTupleCount ( ) )
assertThat ( transform, hasSize ( 1 ) )
assertEquals ( map. size ( ), n * nThreads )
assertEquals ( expected, actual )
assertEquals ( true, result )
assertEquals ( d1, d2 )
assertNull ( immediateValue. getValue ( ) )
assertions. isEqualTo ( new Long ( 2l ) )
assertNotNull ( aRes. read ( ) )
Assert. assertFalse ( errors. hasErrors ( ) )
Assert. assertEquals ( jdkHand, acHand )
assertEquals ( false, start )
assertEquals ( 200, resp. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "MyRepositoryName", RepoAndTableUtil. getOwningRepository ( tableDescriptor ) )
assertThat ( new GraphQLInvalidRequestHandler ( ). processRequest ( request ), is ( false ) )
assertThat ( actual, is ( notNullValue ( ) ) )
assertThat ( bc. components ( ), is ( empty ( ) ) )
assertEquals ( sb. toString ( ), stmtb. prepareStatementString ( ) )
assertEquals ( 1, hits. totalHits )
context. assertIsSatisfied ( )
Assert. assertTrue ( handler. isFailed ( ) )
assertNotNull ( Message. fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "IMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( "Hello World", resp )
assertEquals ( expected, actual )
assertThat ( result, is ( true ) )
assertNull ( "Got a constructorArgs", cd. getConstructorArgs ( ) )
assertEquals ( "Tree should be square", treeGrid. getSize ( ). getWidth ( ), treeGrid. getSize ( ). getWidth ( ) )
assertEquals ( "XAU_USD", currencyPair )
Assert. assertFalse ( "Error report should not contain errors", reportStats. hasErrors ( ) )
assertThat ( offset. canonical ( ), is ( "UTC+02:00" ) )
assertTrue ( i1. contains ( i1 ) )
assertEquals ( expected, actual )
Assert. assertEquals ( 2, ( ( Number ) o ). intValue ( ) )
assertNotNull ( myTestInstance. deleteAsync ( doc, Durability. ACK ) )
assertEquals ( SC_OK, response. getStatus ( ) )
assertThat ( resolver. resolve ( obj1 ), sameInstance ( obj3 ) )
assertThat ( referencableDaoService. get ( ConfigRefEnum. ACHIEVEMENTS_REFRESH_RATE ). getValue ( ), is ( "1" ) )
assertEquals ( 100_000_000L, money. getNumber ( ) )
assertThat ( connection2, not ( is ( connection ) ) )
assertEquals ( 400, cr. getStatus ( ) )
assertTrue ( builder instanceof InprocessChannelBuilder )
assertEquals ( "((?:\\\\Qabc\\\\E){3})", p. toString ( ) )
assertNotNull ( mapping )
assertNotNull ( clazz )
assertNull ( result )
assertEquals ( p. toString ( ), "org/objenesis/test/LocalClass$TestType" )
assertEquals ( "Output order: " + outputOrder, exp, out )
assertEquals ( ResultCodeEnum. INVALID_CREDENTIALS, resp. getLdapResult ( ). getResultCode ( ) )
assertEquals ( "value1", container1. stringBuilder. toString ( ) )
assertEquals ( "-", instance. getNombre ( ) )
Assert. assertEquals ( "test", rdr. readLine ( ) )
assertEquals ( "Wrong number of URI references found", 0, result. size ( ) )
assertEquals ( "xxxxxx", result )
assertIsSemver ( semver, version, 1, null, null, new String [ ] { "beta", "11" }, "sha.0nsfgkjkjsdf" )
assertThat ( driver. findElement ( By. id ( "user1" ) ). getText ( ), is ( "user1" ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( 0, comparison1 )
assertTrue ( fixture. eof ( ) )
assertNotNull ( doc )
assertEquals ( "VGVzdG9gQhVzdG9gQh", actual )
Assert. assertTrue ( out. contains ( "default view" ) )
assertFalse ( testResult )
Assert. assertEquals ( 0., analyser. getTimeWindowViolationAtActivity ( route. getEnd ( ), route ), 0.01 )
assertThat ( cargo. getCommandsRun ( ), contains ( "cargo test dirmod:: --jobs 1 --verbose -- --nocapture" ) )
assertTrue ( game1. isGameOver ( ) )
assertTrue ( isThrown )
Assert. assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del)", aa_change_deletion. toStringTree ( parser ) )
assertEquals ( ( byte ) 34, s. m0_0 ( ) )
assertEquals ( expResult, result )
Assert. fail ( "RuntimeException should be thrown!" )
assertEquals ( ABSTRACT, a. getLocalAddress ( ). toString ( ) )
assertEquals ( 0, getClientConnectionPoolStats ( sut ). getLeased ( ) )
assertEquals ( "Hello World", html )
Assert. assertTrue ( containerResolver. isContainer ( ) )
assertEquals ( authors, test. getAuthors ( ) )
assertTrue ( result )
assertMockEndpointsSatisfied ( )
assertProperty ( "explicitMethod", false, false, String. class, false, property )
assertThat ( estimator. estimate ( renderingContext ), equalTo ( 1f ) )
Assert. assertEquals ( 1, partitionManager. getPartitionManager ( Realm. class, Realm. DEFAULT_REALM ). getOwnedPartitions ( ). size ( ) )
assertFalse ( splitBrainProtectionFunction. apply ( members ) )
assertEquals ( expected, actual )
assertEquals ( "Expected response not seen.", "Hi There!", response )
assertEquals ( 100, count. get ( ) )
assertEquals ( "", value )
assertEquals ( "redis://11.0.0.1:6379", config. getAddress ( ) )
assertEquals ( field. getRequired ( ), required )
assertEquals ( TypeInfoFactory. getMapTypeInfo ( TypeInfoFactory. getMapTypeInfo ( TypeInfoCreator. createDouble ( ), TypeInfoCreator. createString ( ) ) ), orcType )
assertEquals ( context, cache. get ( "foo" ) )
assertEquals ( 1.0, tripRounds. get ( ). doubleValue ( ), 1e-6 )
Assert. assertEquals ( 100, value )
Assert. assertEquals ( writeData, new String ( response. array ( ) ) )
assertHasModifier ( JMod. PUBLIC, constructor. getModifiers ( ), "public" )
Assert. assertEquals ( null, filterResult )
assertNotNull ( result )
assertTrue ( MVEL. evalToBoolean ( "d.age == val", m ) )
assertViewName ( mav, "redirect:/topics/" + TOPIC_ID )
assertThat ( boundSql. getSql ( ), Matchers. equalTo ( "select  ok " ) )
assertEquals ( asList ( debug ( mdcValues, marker, message ) ), testLogger. getLoggingEvents ( ) )
assertTrue ( getTaint ( bc. imei )!= 0 )
assertEquals ( "Wrong string returned", "DatabaseManager[bufferSize=12, anotherKey02=coolValue02]", manager. toString ( ) )
Assert. assertEquals ( "unexpected url composed for fetching scheduler info", EXPECTED_SCHEDULER_INFO_URL, resolvedUrl )
assertThat ( result. statusCode, is ( Response. INTERNAL_SERVER_ERROR ) )
assertEquals ( testPlatform. getPlatformValue ( ), pValues. get ( 0 ) )
assertThat ( requestXml, equalTo ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><wps:Execute>" + "<identifier>L2Plus</identifier>" + "<data-inputs>" + "<parameters>{}</parameters>" + "</wps:Execute>" ) )
Assert. assertNotNull ( url )
Assert. assertTrue ( "Expected zero but it was: " + actualValue, actualValue == 0 )
assertEquals ( "Betty Ford", u. getName ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "Value is incorrect", map, value )
assertTrue ( threw )
Assert. assertEquals ( "Expected no rights", 0, auths. size ( ) )
assertEquals ( ( short ) 0x0009, s. m0_0 ( ) )
assertThat ( errors, not ( hasFieldErrors ( "prefix" ) ) )
assertThat ( TestI18n. testMessage. id ( "Test", "Message" ), is ( "Test Message" ) )
assertInjectsCollectionsOfMocks ( exampleTest )
assertThat ( attribute, is ( notNullValue ( ) ) )
assertThat ( sb. toString ( ), is ( "alp://srla/" ) )
assertEquals ( metaStore, manager. getNamedCluster ( "config-1" ). getMetadataStore ( ) )
Assert. assertEquals ( "bla", r. getText ( ) )
assertEquals ( expectedArg, parsedArg )
assertThat ( taskService. getRunningTaskNodePath ( nodePath ), is ( nodePath ) )
assertThat ( directInvoker, instanceOf ( DirectMessageHandlerInvoker. class ) )
rule. assertScenarioEnded ( )
assertAccessDenied ( httpResponse )
assertFalse ( result. hasErrors ( ) )
Assert. assertEquals ( toArray ( "json", "aaa" ), merged )
assertEquals ( "Data::datatype::Integer", results. get ( 0 ) )
assertNotNull ( sessionImpl )
Assert. assertNotNull ( setter )
assertEquals ( pp. getValue ( ), new Payload < > ( "123" ). getValue ( ) )
assertFalse ( messages. contains ( "propertyName: petType" ) )
assertEquals ( localDate, normalizer. convert ( timestamp ) )
NVAssert. assertEquals ( EXPECTED_NV_RESPONSE, nvResponse )
assertNull ( cardLabelRepository. findUserLabelNameByProject ( noRead, project. getId ( ) ) )
assertEquals ( "Matched code set", UTF16_ID, CodeSet. getMatchingCodeSet ( local, remote, false ). getId ( ) )
assertNull ( result )
assertNull ( millis )
assertTrue ( converter. canConvert ( LikeAction. class ) )
assertEquals ( 1, success. get ( ) )
assertEquals ( "Received " + writeCounter. get ( ), bufferSize, writeCounter. get ( ) )
assertTrue ( Arrays. equals ( key. getPubKey ( ), keyOnion ) )
assertEquals ( "SubprocessTask", task. getName ( ) )
assertEquals ( 0, latch. getCount ( ) )
assertEquals ( 66L, target. get ( 66L ). getTime ( ) )
assertThat ( answer, is ( 10 ) )
assertEquals ( "fra 3 secoli", t. format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 1001 ) ) )
assertEquals ( "TRACE", trace. toString ( ) )
assertNotNull ( info. getToken ( ) )
Assert. assertTrue ( filter. accept ( spanEventBo ) )
assertMockEndpointsSatisfied ( )
assertArrayEquals ( expected, Proto. build_fixed_int ( 1, 0 ) )
MatcherAssert. assertThat ( PodHelper. getPodDomainUid ( pod ), equalTo ( "domain1" ) )
assertTrue ( pool. size ( ) == 2 )
assertThat ( new JSONObject ( actual ), sameJsonAs ( rawSchemaJson ) )
Assert. assertEquals ( 0, ret )
assertEquals ( filterResult, result )
assertEquals ( 2, m0. getBacking ( ). size ( ) )
assertTrue ( message. isComplete ( ) )
Assert. assertEquals ( 100, janus. getServer ( ). getServerRefreshIntervalInMillis ( ) )
assertThat ( new String ( stream. toByteArray ( ) ), is ( "{" + "\\"MyString\\":\\"Some text\\"," + "\\"MyByteProperty\\":9223372036854775807,\\"MyShortProperty\\":1,\\"MyIntegerProperty\\":2,\\"MyFloatProperty\\":3.0,\\"MyDoubleProperty\\":4.0,\\"MyBooleanProperty\\":true," + "\\"MyLongProperty\\":5," + "\\"MyUUIDProperty\\":\\"23492a5b-c4f1-4a50-b7a5-d8ebd6067902\\"," + "\\"DecimalValueProperty\\":21," + "\\"DecimalDecimalProperty\\":\\"21.99\\"}" ) )
assertEquals ( expected, actualQuery )
assertNull ( target. request )
AssertionUtils. multiAssertEquals ( createAsDocument10, response5. getResponseObject ( ) )
assertThat ( $ ( NotificationElement. class ). exists ( ), is ( false ) )
assertThat ( actualFileInputs, IsIterableContainingInAnyOrder. containsInAnyOrder ( expectedFileInputs ) )
assertThat ( attack. isUntampered ( ), is ( false ) )
assertNotEquals ( frameData1, frameData2 )
assertEquals ( "[[John], [Jane], [Matt]]", results. toString ( ) )
assertThat ( form, is ( notNullValue ( ) ) )
Assert. assertNull ( st )
Assert. assertNotNull ( interesado. getId ( ) )
assertTrue ( cl. ping ( ) )
Assert. assertNull ( "should have removed tag value", actual )
Assert. assertNotNull ( dispatch )
assertThat ( StubWatchFactory. getRequestParameters ( ). get ( 0 ), both ( hasEntry ( "resourceVersion", Integer. toString ( INITIAL_RESOURCE_VERSION ) ) ). and ( hasEntry ( "labelSelector", asList ( DOMAINUID_LABEL, CREATEDBYOPERATOR_LABEL ) ) ) )
assertTrue ( "Custom content model " + customContentModelQName. toString ( ) + " is not present", allContentModels. contains ( customContentModelQName ) )
assertTrue ( "Expected Host", obj instanceof Host )
assertThat ( buf, notNullValue ( ) )
assertEquals ( expected, fromJson )
assertArrayEquals ( properties, raw )
Assert. assertEquals ( sql, expected. replaceAll ( "#ALIAS#", DatabaseMetaDataCache. getMetaData ( StormRestrictions. class ). getAlias ( ) ) )
assertEquals ( "((role1,role2) = " + userId + ") and (userName in (role1,role2))", dataSetLookup. getFirstFilterOp ( ). getColumnFilterList ( ). get ( 0 ). toString ( ) )
assertThat ( result, is ( 2 ) )
assertTrue ( filter. allow ( event, listener ) )
assertEquals ( "custom 2", html )
assertNotNull ( IndexWriter. getCommitter ( env ) )
assertTrue ( appender. getEvents ( ). size ( ) == 0 )
assertEquals ( actualJSON, expectedJSON )
assertOut ( "/**\\n * @param {number} bar\\n * @param {string} baz\\n * @param {Array} goo\\n */\\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(bar, baz, goo) {\\n}" )
assertEquals ( "foo", client. inflect ( "foo" ). get ( ) )
assertEquals ( new BigDecimal ( "6.60" ), max )
assertThat ( pageObject. getSourcePath ( ), is ( expectedPath ) )
assertThat ( a, equalTo ( a1 ) )
assertEquals ( 1, zero. get ( ) )
Assert. assertEquals ( "EXECUTE ERROR:", sqltrue, sqlnew )
assertEquals ( 1, holder. value )
assertEquals ( "{0=22.0, 1=22.0, 2=22.0, 3=22.0, 4=10.0, 5=10.0, 6=10.0, 7=10.0, 8=10.0, 9=10.0, 10=10.0, 9=10.0, 10=10.0, 12=11.0, 13=11.0, 14=11.0, 15=11.0, 16=11.0, 17=11.0, 18=11.0, 19=11.0, 24=11.0, 25=11.0, 24=11.0, 25=11.0, 26=11.0, 27=11.0, 31=11.0, 30=11.0, 30=11.0, 64=22.0, 64=22.0, 64=22.0, 64=22.0, 64=22.0, 64=22.0, }\\n" + "testing: {0=0, 1=0.0, 2=0.0, 3=0.0, 4=
assertEquals ( "It must be the same as before following properties", "abc\\nHe's a jerk.\\nA complete kneebiter.", toWikiText ( note ) )
assertTrue ( xmas. before ( newYearsDay ) )
Assert. assertEquals ( "http://services.com/services", url )
Assert. assertNotNull ( factory )
assertThat ( actual, is ( expected ) )
connection. assertBufferEndsWith ( "FOUR" + LINE_SEPARATOR + "FOUR" + LINE_SEPARATOR + "FOUR" + LINE_SEPARATOR + "FOUR" )
assertTrue ( entity. equals ( entity2 ) )
visitor. assertSatisfied ( "checking state contains two branches", _rootComposite )
assertFalse ( dao. isSecretAnswer ( userJoe, NOT_SEVERITY_ANSWER ) )
assertFalse ( cluster. getXAttrsEnabled ( ) )
assertTrue ( result. isEmpty ( ) )
assertGreater ( "Row should be expanded", 1, grid. getRowCount ( ) )
assertEquals ( "Unexpected state class", TreeTableState. class, state. getClass ( ) )
assertThat ( query. hasOption ( QueryFlag. FILTER_TAG_INCLUDE ), is ( true ) )
Assert. assertTrue ( "claims topics should merge when one is same", topicIF. equals ( topic2 ) )
assertEquals ( "", html )
assertEquals ( "two dollars", actual )
assertSurplus ( ref, 3 )
assertEquals ( "alice,alice-1,alice-2,alice-3,alice-4,alice-5,alice-6,alice-7,alice-8,null,null,null,null,null", samlAssertion. getAssertion ( ) )
Assert. assertEquals ( "http://agoravahttp.com/myapp/login", settings. getAbsoluteUrl ( ) )
assertNull ( result )
assertThat ( instance1. hashCode ( ), not ( equalTo ( instance2. hashCode ( ) ) ) )
JSONAssert. assertEquals ( expected, flowSnapshotsJson, false )
assertEquals ( cs, dto2. toString ( ) )
Assert. assertEquals ( 10, rowKeys. size ( ) )
Assert. assertEquals ( "Invalid error", "Noticiation process", error )
assertThat ( domain. getReplicaCount ( "default" ), equalTo ( 2 ) )
assertFactorization ( poly, UnivariateSquareFreeFactorization. SquareFreeFactorization ( poly ) )
Assert. assertEquals ( expected, actual )
Assert. fail ( )
assertEquals ( expectedType, TalendType. convertFromAvro ( fieldSchema ) )
Assert. assertEquals ( "title", title )
Assert. assertEquals ( "value", testScopePath. getRootScope ( ). getProperty ( "test" ) )
assertNoViolations ( constraintViolations )
assertNotNull ( data. getString ( 0, data. length ( ) ) )
assertEquals ( true, Util. isEmpty ( collection ) )
assertThat ( query. getAttributeTypes ( ), contains ( AttributeType. MNT_REF, AttributeType. MNT_LOWER ) )
assertOut ( "var a:ArgumentError = new ArgumentError()" )
assertThat ( wrapper. retrieveModelVersion ( ), is ( ModelVersion. UNKNOWN ) )
assertEquals ( "", stream. read ( ) )
assertOperation ( ( ) -> roleClient. createProject ( createProjectRequest ) )
assertThat ( query. getParameters ( ). size ( ), is ( 1 ) )
assertNull ( StringCompressionUtil. unpackAndDecompress ( testChars ) )
assertEquals ( "bluemix-todo", classCapture. getValue ( ). getName ( ) )
assertTrue ( hasReset )
assertEquals ( expected, actual )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertThat ( result, is ( expectedResult ) )
assertTrue ( true )
assertEquals ( "<text>", label )
Assert. fail ( "Missing ResourceBundle" )
assertEquals ( 7772399999L, q. getLastMillisecond ( ) )
assertEquals ( "       cpu\\n" + "       memory\\n" + "       disk\\n" + "  100%'\\n" + "  100MB/s\\n" + "  100%'\\n" + "  100%'\\n" + "  100MB/s\\n", textTableFormatter. format ( ) )
assertEquals ( SUCCESS_FACTORY_RESPONSE, handleResponse )
Assert. assertNotNull ( dbRangerService )
assertNoDataValue ( targetPoduct. getBand ( FLOAT_BAND_NAME ), new PixelPos ( 23.5f, 13.5f ), 299.0, 299.0 )
assertTrue ( contains )
Assert. assertEquals ( "Value should be eq", testCase. getValue ( ), magnitudeResult )
assertNotNull ( RatePlan. reader ( ). read ( ) )
assertEquals ( "http://example.com/events/1", affordance. getHref ( ) )
assertEquals ( o1, o2 )
Assert. assertTrue ( ks == ks2 )
AssertJUnit. fail ( "GenericConnectorException expected" )
assertions. isNotEqualTo ( expected )
assertEquals ( "a+b", result )
assertSame ( expected, result )
assertEquals ( "(x INT)\\n", found )
assertEquals ( 23, proxy. myMethod ( ) )
Assert. fail ( "Invalid input" )
Assert. assertEquals ( Integer. class, clazz )
assertThat ( dbObject. get ( "_id" ), is ( notNullValue ( ) ) )
assertTrue ( latch. await ( 15000, TimeUnit. SECONDS ) )
assertEquals ( "incorrect size", SIZE, Struct. size ( new LongPadding ( ) ) )
Assert. assertArrayEquals ( hammingWindow_EXPECTED, hammingWindow_ACTUAL, DELTA )
Assertion. assertEquals ( loadedDataSet, actualDataSet )
assertThat ( editor. getValue ( ), is ( ( Object ) Credential. builder ( ). userName ( "user" ). setPassword ( "password". toCharArray ( ) ). database ( "db" ). authMechanism ( "MONGODB-CR" ). build ( ) ) )
assertFalse ( game. isGameOver ( ) )
Assert. assertNotNull ( m )
assertEquals ( "TextBuilder String Is 1.0", _textBuilder. toString ( ), "1.0" )
assertEquals ( "Count of customer", 2, res )
assertEquals ( r4, mostRelevantResource )
assertEquals ( expectedLines, seenLines )
assertThat ( result. fullName ( ), is ( Long. class. getName ( ) ) )
Assert. assertEquals ( sb. toString ( ), result )
assertEquals ( expectedResult, actualResult )
assertEquals ( str, tuple. getValue1 ( ) )
Assert. assertEquals ( createObjectNode ( "name", "testperson", "age", 30 ), result )
assertNotNull ( result )
assertTrue ( "Node exists", store. nodeExists ( "node1" ) )
assertTrue ( violation )
assertEquals ( "env.value", value )
assertEquals ( "failure: " + translated, ExpressionFactory. exp ( "db:toArtist.paintingArray = artistExhibitArray.toExhibit.closingDate = artistExhibitArray.toExhibit.closingDate" ), translated )
assertEquals ( ret. getName ( ), "Company owner" )
assertTrue ( shardManager. isLeader ( ) )
assertEquals ( expected, actual )
assertEquals ( "2.0", lv. getVersion ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertEquals ( exist, true )
assertArrayEquals ( coeffs, actual )
assertEquals ( 3, roles. size ( ) )
assertEquals ( Arrays. asList ( ExampleData. buildNetworkMetaAnalysisHamD ( ), d_sertrSet, d_fluoxSet ), pm. getAlternativeEnabledModel ( ). getValue ( ) )
Assert. assertSame ( parser, reg. get ( name ) )
assertEquals ( 200, page. getWebResponse ( ). getStatusCode ( ) )
assertTrue ( "flatMappedValue must return a string containing 'hello' string", error. isFailure ( ) )
assertThat ( refererResult. getReferer ( ), is ( "/vrap/http://vraptor.caelum.com.br/vrap/referer" ) )
assertEquals ( HttpStatus. SC_UNPROCESSABLE_ENTITY, response. getStatus ( ) )
assertTrue ( resource instanceof DefaultResourceLoader )
assertEquals ( myMode, entry. getMode ( ) )
assertResultSet ( res )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff56_" ) )
assertArrayEquals ( new byte [ ] { 0x48, 0x0A, 0x45, 0x41, 0x44, 0x0D, 0x0F, 0x48, 0x45, 0x41, 0x45, 0x41, 0x45, 0x41, 0x45, 0x41, 0x45, 0x41, 0x45, 0x41, 0x45, 0x41, 0x0D, 0x0A, 0x41, ( byte [ ] ) ( ( byte ) 0xC3, ( byte ) 0xA4, 0x0D, 0x0A, 0x0F, 0x48, ( byte ) 0x0A, 0x45, 0x41, ( byte ) 0xA4, 0x0D, 0x0A, 0x0D }, AvroUtils. toBytes ( record ) )
assertThat ( mergedPredicate. hasBeenList ( ), Matchers. is ( false ) )
assertThat ( spy. getPropertyChangedCount ( ), is ( 1 ) )
Assert. assertEquals ( expect_sql, sql )
assertEquals ( String. format ( TextHelper. LOCALE_ROOT, "usage: argparse4j [-h] [--foo FOO]%n" + "%n" + "named arguments:%n" + "  -h, --help             show this help message and exit%n" + "  --bar FOO%n" + "  --foo FOO%n" + "%n" + "  -h, --help             show this help message and exit%n" ), parser. formatHelp ( ) )
Assert. assertFalse ( errors. hasErrors ( ) )
assertFalse ( lockAcquired )
assertions. isNotGreaterThan ( ( short ) 2 )
assertTrue ( outAny. equal ( inAny ) )
assertEquals ( "rebuild should be the same after deallocate", Lists. newArrayList ( new Allocation ( control, 0, 15 ), new Allocation ( withLogin, 15, 20 ) ), allocations. getAllocations ( ) )
Assert. assertTrue ( topic instanceof PatternTopic )
assertTrue ( result. length ( ) <= loremIpsum. length ( ) )
assertEquals ( "index_name_new", response )
runner. assertAllFlowFilesTransferred ( AbstractBigQueryProcessor. REL_FAILURE, 1 )
assertNull ( originatingNode )
assertThat ( domain. isDomainHomeInImage ( ), is ( false ) )
assertEquals ( "ErrorCode:IotHubUnauthorizedAccess;Unauthorized", bestMessage )
Assert. assertEquals ( 4, woffFont. getTables ( ). size ( ) )
Assert. fail ( e. getMessage ( ) )
Assert. assertEquals ( query, interpretedQuery )
assertEquals ( expected, transformed )
assertTrue ( true )
assertTrue ( latch. await ( 3, TimeUnit. SECONDS ) )
Assert. assertFalse ( pss. getEligiblePositionalParameters ( ). hasNext ( ) )
Assert. assertEquals ( "INSERT INTO test (id) VALUES (NULL)", request. toString ( ) )
assertNoMoreTokens ( )
assertThat ( "Reversed complementary sequence not as expected", s, is ( "TACG" ) )
Assert. assertEquals ( "[a,b]", pattern. compiled ( ). toString ( ) )
assertThat ( results. getTotalPages ( ), is ( 2 ) )
assertNotNull ( features )
assertEquals ( 1, list. size ( ) )
Assert. assertEquals ( 1.0, getMetric ( ). calculate ( getSession ( ) ), getDelta ( ) )
files. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE )
assertTrue ( FileUtil. findPatternInFile ( new File ( resultFilename ), "Expected ECMA script generated by default." ) )
assertEquals ( 80, lineCounter )
Assert. assertEquals ( 1, count. get ( ) )
assertEquals ( asList ( "after-date", "N", "N", "past" ), actualOptions )
Assert. assertNull ( node )
assertEquals ( "one dollar and sixty-five cents", actual )
assertEquals ( "jim", retrievedEntity. getProperty ( "name" ) )
assertEquals ( unicodeNode, model. fromJSON ( unicodeNode ) )
Assert. assertEquals ( expected, hitType. findSuitableHit ( bucket, key ) )
assertTrue ( "List size mismatch across lists", words1. size ( ) < words2. size ( ) )
Assert. assertEquals ( "{" + "\\"@odata.context\\":\\"../$metadata#ESAllPrim(32767)/PropertyString\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"First Resource - positive values\\"}", resultString )
assertFalse ( getTestChargingStationFromRepository ( ). isReservable ( ) )
assertOrder ( ConfirmCompleted. class, Close. class )
assertEquals ( 22, tokens. size ( ) )
Assert. assertTrue ( "Generated template does not match expected XML.", XmlHelper. compareXMLStrings ( expectedXML, message ) )
assertTrue ( pattern. matches ( "foo" ). isEmpty ( ) )
assertEquals ( body. toString ( ), "operation _timeout" )
assertEquals ( 1360204148000L, date. getTime ( ) )
assertCustomComparator ( regExCustomArrayValueComparator, "a[0].id", null, null, null )
assertTrue ( psa. getLegend ( ) instanceof ProportionalPoint )
assertEquals ( Long. valueOf ( 0 ), account. getEntityId ( ) )
mockEndpoint. assertIsSatisfied ( )
Assert. assertEquals ( - ErrorCodes. EFAULT ( ), mFuseFs. mount ( ufsPath, "mount" ) )
assertEquals ( "2015-08-20T20:10:00Z", formatted )
assertTrue ( sut. writeList ( new short [ ] { 1, 2 } ) )
assertThat ( response. getBody ( ), containsString ( "Hello World" ) )
assertEquals ( expected, actual )
assertEquals ( expected, output )
assertEquals ( "status", HttpStatus. SC_OK, response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( ArtifactRepositoryService. GLOBAL_M2_REPO_URL, repoURL )
assertTrue ( allStateCapitals. length == 50 )
assertEquals ( "", result )
assertResultSet ( res )
assertEquals ( expResult, result )
assertEquals ( "Hello, World!", pair1. toString ( ) )
assertThat ( target. parse ( ), is ( false ) )
GAssert. assertEquals ( ImmutableMultimap. of ( "a", "5.000" ), postWithDouble )
assertThat ( offset. canonical ( ), is ( "UTC+02:00" ) )
assertTrue ( validator. validate ( connectionLimits, PUT ). passedValidation ( ) )
assertNotNull ( thr )
assertEquals ( "Invalid range value", false, code. isRange ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( toml. getDate ( "d" ), DateTime. of ( 2011, 11, 10, 13, 12, 00, 999 ) )
assertEquals ( expected, actual )
Assert. fail ( "No such class exist" )
assertThat ( pep, is ( testpep ) )
assertEquals ( 1, r. getCandidateResults ( ). size ( ) )
assertEquals ( user. getProfilePicture ( ), "mypic.png" )
assertEquals ( "select a from Artist a", select. getExpression ( ) )
assertThat ( width, equalTo ( 2f ) )
assertEquals ( currentTimeMillis, readTimeStamp )
assertEquals ( SuppliedNameSuffixKit. getId ( ), settings. getKitId ( ) )
assertThat ( positionEntityArgumentCaptor. getValue ( ), is ( developerDto ) )
assertEquals ( expectedQuery, actualQuery )
assertThat ( authenticate, is ( present ( ) ) )
assertFalse ( testObj. containsWord ( "test" ) )
assertNull ( result )
Assert. assertEquals ( 1, union. size ( ) )
assertEquals ( responseTimeChartGroup, new ResponseTimeChart. ResponseTimeChartGroup ( timeWindow, sampledResponseTimeList ) )
Assert. assertEquals ( 0, agents. size ( ) )
assertTrue ( mapDriver. evaluate ( ) )
assertEquals ( "Wrong result", "<block>\\n  <p>This is a simple text</p>\\n", formatter. formatBlock ( "<p>This is a simple text</p>", true ) )
assertEquals ( 1, executor. run ( AdultUnit. class ) )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertNotNull ( user )
Assert. assertEquals ( "Invalid result", "text", result )
assertEquals ( Collections. emptyList ( ), filter. getOperators ( ) )
assertThat ( env. getDefaultVersionHostname ( ), is ( HOSTNAME ) )
assertEquals ( 0, valid. size ( ) )
assertEquals ( "1 year", MessageSupport. format ( cal. getTime ( ), "dd:yyyy-MM" ) )
assertThat ( options. getMaxCopyAttempts ( ), is ( 1 ) )
assertNotNull ( DependentHostedNumberOrder. reader ( "PXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( g1, ZippelGCD ( g1, g2 ) )
assertFalse ( victim. isIncrementalBuild ( ) )
assertActive ( player1, player2, player3, player4 )
assertEquals ( NO_CONTENT_204, deleteResponse. getStatus ( ) )
Assert. assertEquals ( status, protocoloInfo. getStatus ( ) )
assertEquals ( expResult, result )
assertEquals ( 0, parts )
assertEquals ( 0, dbHandler. getDataElementCount ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "SGVsbG8gV29ybGQ=", result )
assertThat ( ioUtils. isPostIndex ( post. getBytes ( charset ), charset ), Matchers. is ( true ) )
Assert. assertTrue ( errors. hasFieldErrors ( "encounter" ) )
assertThat ( getCollection ( ). count ( ), is ( 2L ) )
Assert. assertTrue ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isWarnEnabled ( ) )
assertEquals ( expected, api. getAPIUrl ( ) )
assertEqualsSet ( "Incorrect IRIs for one-of objects", indA, indB )
assertOut ( "s.toLowerCase() == 'foo'" )
assertEquals ( expResult, result )
assertEquals ( dateStr, DateUtils. formatDate ( date, cal, null ) )
assertEquals ( array. getBaseTypeName ( ), baseType )
Helpers. assertJson ( Deencapsulation. invoke ( twinMetadata, "toJsonElement" ). toString ( ), expectedJson )
assertEquals ( "Framework profile", "myProfile", config. getFrameworkProfile ( ) )
assertOut ( "a = a.attribute('name').length()" )
assertEquals ( getLabel ( ), 0.0, prod. minus ( aperm ). getRMS ( ), TOLERANCE )
Assert. assertEquals ( TrainerStatus. NOT_SUPPORTED, optimizer. calculate ( mlParams ) )
assertEquals ( data, stream. asByteArray ( ) )
assertTrue ( result )
assertEquals ( expectedArg, parsedArg )
assertEquals ( expected, val1 + "-" + val2 )
assertEquals ( AuthenticationType. FORM, sut. getAuthenticationType ( ) )
Assert. assertNull ( metricsFactory )
Assert. assertEquals ( "JD <john.doe@acme.org>", decode ( field ) )
assertThatPersonIsNotProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ). map ( person, sikredeRecord, yderRecord ) )
assertEquals ( 5, purged )
Assert. assertEquals ( 200, conn. getResponseCode ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( TEST_LOCK_TIME, tx. estimateBlockTime ( ) )
assertTrue ( getStdOut ( ). indexOf ( "Passed Validation : true" ) > - 1 )
assertNotNull ( entity. getId ( ) )
Assert. assertEquals ( "Params:\\n" + "foo: bar", response )
assertEquals ( metadata, repository. getModuleMetadata ( "TEST-SLAVE" ) )
assertTrue ( check ( "a", input, output ) )
assertEquals ( expResult, result )
assertThat ( xml ( stream. toString ( ) ), hasXPath ( "//soapwms:ExtendedCapabilities/soapwms:SOAP/wms:ExtendedCapabilities/wsse:Security/wms:Client/wms:Client/wms:Capabilities/wsdl:SOAP/wms:ExtendedCapabilities/wsdl:Security/wms:Client/wms:ClientRequest/wsdl:SOAP/wms:ExtendedCapabilities/wsdl:ClientRequest/wsdl:ClientRequest/wsdl:ClientRequest/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wswms:ExtendedCapabilities/wsdl:Security/wms:ClientResponse/wswms:ClientResponse/wms:ClientResponse/wms:ClientResponse/wsdl:Security/wms:ClientResponse/wsdl:ClientRequest/wsdl:ClientRequest/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wsdl:ClientResponse/wswms:Client
assertEquals ( " 33 297\\n", found )
assertEquals ( QUOTA_LIMIT, responseMessage. getCode ( ) )
assertThat ( status, is ( "stopped" ) )
assertEquals ( ExpressionFactory. exp ( "path not in (1, 2, 3)" ), exp )
assertEquals ( 2, springBeansConfig. getTargets ( ). size ( ) )
assertEquals ( "S.a\\n", found )
assertArrayEquals ( new long [ ] { 1, 1 }, otherResult. getShape ( ) )
TestUtils. assertPropertyChangeEvent ( report, "flaggedDatesTimeZone", false, true, true )
assertNotNull ( "ID should not be null", book. getId ( ) )
assertEquals ( expected, actual )
assertTrue ( kieBuilder. getResults ( ). hasMessages ( Level. ERROR ) )
assertEquals ( false, check. isRequired ( ) )
assertFalse ( i1. equals ( null ) )
assertEquals ( "Failed applied BufferTransformation WithInvertedPositiveDistances", desiredGeometry, transformedGeometry )
assertTrue ( _cut. getDomains ( ). contains ( FOAF. NAMESPACE ) )
assertTrue ( "Offset is wrong for seek after", offset >= 0 )
assertEquals ( null, result. getId ( ) )
assertEquals ( "Value \\\\" expected to end with a single slash", result )
assertEquals ( "<p>Hello</p>\\n<p>There</p>", divs. html ( ) )
assertThat ( terminologyService. isSubclassOf ( c1, c2 ), is ( true ) )
assertEquals ( expResult, result )
Assert. assertEquals ( ki1 [ 0 ], ki2 [ 0 ] )
assertThat ( exitStatus. exitStatus ( ), is ( equalTo ( ( byte ) 0x1 ) ) )
assertTrue ( list. isEmpty ( ) )
assertFalse ( res. contains ( "\\"showCqlCompletionHint\\":false" ) )
assertTrue ( matcher. find ( ) )
assertEquals ( "public static final EntityProperty<TargetEntity> TO_ONE_REL = PropertyFactory.createTarget(\\"to_one_rel\\", TargetEntity.class);", definition )
assertThat ( DateInterval. parseISO ( "2012-01-01/P775D" ), is ( expected ) )
rule. assertScenarioEnded ( )
assertEquals ( 2, sources. size ( ) )
assertArrayEquals ( expected, target )
assertTrue ( cluster. getClient ( ) instanceof LocalJobRunner )
assertEquals ( "V1 Comment", wrapper. getComment ( ) )
assertEquals ( expected, successors )
assertThat ( outcomes. get ( 0 ), havingTag ( TestTag. withName ( "true" ). andType ( "feature" ) ) )
assertXmlEqual ( control, read ( test ) )
assertEquals ( 1, found )
assertThat ( processor. getTables ( ), is ( Arrays. asList ( tableName ) ) )
assertThat ( System. getProperty ( SYSTEM_PROPERTY ), is ( "new-value-for-tests" ) )
Assert. assertFalse ( this. manager. remove ( this. person1 ) )
assertThat ( DoubleTypeValidator. INSTANCE. validate ( parameters, "aaa" ), is ( "Aaa must be a double." ) )
assertEquals ( buf. toString ( ), "[\\"a\\",\\"b\\"]" )
assertEquals ( "[{\\"a\\":0,\\"b\\":1,\\"c\\":2,\\"self\\":\\"\\"}]\\n", writer. toString ( ) )
assertNull ( subject. getDataPoints ( ) )
assertFalse ( c. isValidForSqlQuery ( ) )
assertTrue ( "Constant permission mapper should be created", ops. exists ( TEST_CONSTANT_PERMISSION_MAPPER_ADDRESS ) )
assertThat ( tester. count ( Lock. KIND ), is ( 0 ) )
assertTrue ( xmlResult. contains ( "ns:string2=cord" ) )
assertThat ( target. createPath ( "src/test/resources/a/1", "src/test/resources/b/2", "src/test/resources/b/3", "src/test/resources/b/4", "st/test/b/5" ), is ( true ) )
assertThat ( builder. getPatches ( ), hasItemsInOrder ( "ADD /status/message", "ADD /status/message 1" ) )
assertEquals ( "<!DOCTYPE html PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\">\\n<html>\\n<head>\\n<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=UTF-8\\"></head>\\n<body>\\n<style type=\\"text/css\\"/>\\n</body>\\n</html>", result )
Assert. assertEquals ( 0, patients. size ( ) )
Assert. fail ( )
assertEquals ( 1, x. size ( ) )
assertEquals ( resp. getStatus ( ), ConfigSetAdminResponse. Status. SUCCESS )
assertEquals ( updateCount, clock. diff ( increment ). toMillis ( ) )
assertTrue ( seen. add ( UUIDGenerator. nextString ( UUIDGenerator. TYPE4 ) ) )
Assert. assertTrue ( handler. getDNodeList ( ). size ( ) == 1 )
assertEquals ( "1 stund tagasi", t. format ( new Date ( 0 ) ) )
assertEquals ( "(SOURCE == $200_1_R AND TARGET == $200_3_R AND TYPE == 'TEST10' AND RELATION == 'REL1-REL2')", transformed )
ActionResultAssert. assertThat ( result )
Assert. assertTrue ( "result had wrong width", result. getWidth ( ) == 0 )
Assert. assertFalse ( policy. isResponseCacheable ( request, response ) )
assertEquals ( "test", empty. getMessageType ( ) )
assertEquals ( Collections. singleton ( "TWO" ), select. getSelectedItems ( ) )
assertEquals ( 2, packetIn. getCount ( ) )
assertThat ( CollectionNumbers. doubleArrayCopyOf ( array ), equalTo ( new double [ ] { 5, 1, 2, 3, 4, 0 } ) )
assertThat ( integerOnePresent, is ( true ) )
assertThat ( TestI18n. testMessage, instanceOf ( I18n. class ) )
Assert. assertEquals ( expected, destination. toString ( ) )
assertEquals ( msg1, ciob. getContent ( ) )
Assert. assertNotNull ( "did not find collection", entry )
Assert. assertEquals ( fastSqrt, computedSqrt, 0f )
assertCompletionInactive ( )
assertEquals ( "Local repository", new URL ( "file:somewhere/localrepository" ), config. getLocalRepository ( ). getURL ( ) )
Assert. assertEquals ( 0, solution. getValue ( ),.0000001 )
assertEquals ( "no-cache", wrapper. getFirstHeader ( "Cache-Control" ). getValue ( ) )
assertEquals ( "English", newSubtitles )
assertEquals ( "patient/", path )
assertEquals ( json, gson. toJson ( value ) )
assertEquals ( 1, result. length )
assertEquals ( ROUTE, route )
assertEquals ( "NamedCluster should fail", ncTestName, result. get ( "namedCluster" ) )
Assert. assertEquals ( ambiente, eventoRetorno. getAmbiente ( ) )
assertFalse ( hasNoProjects )
assertEquals ( "BLOB", sb. toString ( ) )
assertEquals ( "Expected 4 results!", 4, n )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert. assertEquals ( "did not set parallel transfer", false, transferOptions. isUseParallelTransfer ( ) )
assertNotNull ( names )
assertEquals ( AuthStatus. SEND_FAILURE, module. validateRequest ( messageInfo, client, null ) )
Assert. assertEquals ( "true", result )
Assert. assertNotNull ( rb )
assertEquals ( 15, routeState. get ( 0 ) )
assertTrue ( "atan() had errors in excess of " + MAX_ERROR_ULP + " ULP", maxerrulp < MAX_ERROR_ULP )
assertEquals ( expected, a. getPrefixEditor ( ) )
assertNull ( "Expected null result", ArchiveFileReader. createIfSupported ( options ) )
assertE ( "�尖�尖�尖�尖��" + "��  �烩��" + "��   ��" + "��   ��" + "�尖�尖�尖�尖��" )
Assert. assertTrue ( "Type1 font expected", FontProgramFactory. createType1Font ( afm ) instanceof Type1Font )
assertEquals ( BuilderFactory. start ( ). add ( "a", new ObjectId ( "4e9d87aA5825b60b637815a6" ) ). build ( ), doc )
assertFalse ( c1. getSourceId ( ). equalsIgnoreCase ( c2. getSourceId ( ) ) )
assertSearch ( "2013-09-01T21:30:50.515Z TO NOW", query )
assertFalse ( ref. isPresent ( ) )
assertOnResponseAttachment ( f2, MAX_SIZE1, "Client3mbAttachment.txt" )
assertEquals ( "http://www.w3.org/2001/04/xmldsig#drup-pi", HospitalDataExtractor. extractPIEmail ( hospitalModel. getData ( ) ) )
assertEquals ( "property should be gotten", testViewerId, sut. getViewerId ( ) )
assertTrue ( key. prefixOf ( itemKey ) )
assertEquals ( "Wrong year with last seen message", 1943, lsys. getDesiredYear ( dt ) )
assertFalse ( SetStatementValidator. validate ( setters ) )
assertEquals ( testMap, readMap )
assertEquals ( V8. getUndefined ( ), result )
Assert. assertEquals ( 4.71d, result1. get ( ), 0.001d )
assertTrue ( loggerContext. isShutdown ( ) )
Assert. assertNull ( result )
assertEquals ( "fcr:metadata", relativizeSubpath ( rootObjectId, resourceId ) )
assertEquals ( asList ( START, OFFER, OFFER2, END ), events. collect ( ) )
assertThat ( testIsValidAppProperty, is ( expectedIsValidAppProperty ) )
Assert. assertTrue ( count > 0 )
assertEquals ( "1", rendered )
assertTrue ( weakRef. isEnqueued ( ) )
assertEquals ( false, result )
result. assertErrorFreeLog ( )
assertPermanentCount ( playerA, "Azure Drake", 1 )
Assert. assertEquals ( Suit. SPADES, fd. getType ( ) )
assertNotNull ( manager. getCriteria ( session ) )
assertCapturedMessage ( eventMessage ( "sess1", "/topic", "publishMessage1" ), eventMessage ( "sess2", "/topic", "publishMessage1" ) )
assertEquals ( cl. getCipherSuiteLength ( ). getModification ( ). getValue ( ), new IntegerAddModification ( 2 ) )
assertThat ( iconCaptor. getValue ( ), is ( "ghost" ) )
assertEquals ( 15, cap. get ( 0 ) )
assertTrue ( res. equals ( expected ) )
assertEquals ( testExtension, actual )
assertEquals ( "Incorrect duration", duration, res. getDuration ( ) )
Assert. assertTrue ( dsDao. getDSInfo ( remoteDSAddress ). isUp ( ) )
assertRoundtrip ( input, false )
assertError ( ( ) -> target. getServices ( ), ConnectionException. class, expectedMessages. getConnectionError ( ) )
assertEquals ( pp. getValue ( ), new Payload < > ( "no connection" ). getValue ( ) )
assertFalse ( skillConstraint. fulfilled ( insertionContext ) )
assertEquals ( AppConfigProperties. DEFAULT_BISERVER_BASE_URL, baseUrl )
arrays. assertContainsNull ( someInfo ( ), actual )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( "/macro/edit", result )
assertTrue ( svc. isStopped ( ) )
assertEquals ( "x86_64", process. arch ( ) )
Assert. assertEquals ( 1, repository. allRules ( ). size ( ) )
assertEquals ( "<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertNotNull ( "Social Groups (JSON STRING)", groups )
assertExpectedProtectedPorts ( dai )
assertThat ( maps. oxen ( ), is ( "foo bar" ) )
assertEquals ( "A config exception should have been thrown", 0, ex. getMessage ( ). length ( ) )
assertThat ( term, is ( "���炽�裤���" ) )
assertArrayEquals ( data, ( float [ ] ) deserialize. readObject ( float [ ]. class ), 0.0001F )
assertThat ( savedCalendar. getVersion ( ), equalTo ( calendar. getVersion ( ) ) )
assertTrue ( t. verify ( t. getEndorsers ( ). get ( 0 ), key. getPublic ( ) ) )
assertKernel ( kernel, ANNULUS, e )
assertEquals ( "test", echo. echo ( "test" ) )
assertEquals ( 0, events. size ( ) )
assertTrue ( a. isNormal ( ( Throwable ) null ) )
Assert. assertFalse ( "this should not be the second mkdir", secondTime )
assertEquals ( o1. hashCode ( ), o2. hashCode ( ) )
Assert. assertEquals ( 5, errors. size ( ) )
assertTrue ( views. contains ( "MyCusomView" ) )
assertEquals ( expected, actual, delta )
Assert. assertTrue ( resultString. startsWith ( expected ) )
assertEquals ( obj2. getName ( ), "Hello World" )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
assertEquals ( "failed to post rating", 12, result. getCode ( ) )
Assert. assertEquals ( THIRTEEN_FLOAT, pi. getThirteenFloat ( ), 0.01f )
assertEquals ( v21Employments1, v21Employments2 )
assertEquals ( msg, stackTrace )
Assert. fail ( )
assertEquals ( "value", cacheEntry )
Assert. assertEquals ( new URI ( "stuff?param1=stuff&param2=stuff" ), uribuilder. build ( ) )
result. assertIsSatisfied ( 1000 )
assertNotEquals ( one, differentClass )
assertEquals ( VALUE, jwt2. getJWTClaimsSet ( ). getSubject ( ) )
assertThat ( underTest. isFrozen ( ), is ( false ) )
Assert. assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar", "test-deps-c-1.0.0.jar", file. getName ( ) )
assertArrayEquals ( expected, list. toArray ( ) )
Assert. assertEquals ( 1, q. getResultList ( ). size ( ) )
Assert. assertTrue ( 2 + 2 == 2 )
assertEquals ( 10, classUnderTest. getWidht ( ) )
assertThat ( result, equalTo ( "Unknown" ) )
assertNotNull ( action )
assertThat ( values, containsInAnyOrder ( "other", "value" ) )
Assert. assertEquals ( 1, partitions. size ( ) )
assertTrue ( expectedMaxPoolingWithPaddingActivation. compare ( poolingActivation, TOLERANCE ) )
Assert. assertEquals ( "java.lang.Double", provider. getCanonicalDataTypeName ( Mockito. mock ( Column. class ) ) )
assertEquals ( GLOBAL_DIRECTORY_NAME, result )
assertPutAndGet ( map )
assertTrue ( Arrays. equals ( readBytes, message1. getBytes ( ) ) )
Assert. assertTrue ( isEqual ( distance, 1.0 ) )
Assert. assertEquals ( output, outcome )
Assert. assertEquals ( "(124_125inv)", inv. toHGVSString ( ) )
assertEquals ( getFailureMessage ( ), 0.01, distance, 1e-1 )
Assert. assertEquals ( "abc", html )
assertEquals ( expected, actual )
assertThat ( backend. isEmpty ( ), is ( true ) )
assertEquals ( "alpha", v2. getId ( ) )
Assert. assertEquals ( "Hello World!", result )
assertEquals ( null, DateUtil. parse ( dateString, formatString ) )
Assert. assertEquals ( element. getText ( ), "click me" )
assertTrue ( Files. isSameFile ( path, path ) )
Assert. assertEquals ( state, retrievedState )
assertTrue ( e. getMessage ( ). contains ( badCell ) )
assertEquals ( "Mpxj", mpp. getPlanner ( ). getName ( ) )
assertEquals ( "a", TYPE_HANDLER. getResult ( rs, 1 ) )
assertThat ( event. getPlatform ( ), is ( sameInstance ( mockPlatform ) ) )
assertEquals ( Arrays. asList ( PropertiesMappingConfiguration. DEFAULT_STATIC_RESOURCE_MAPPING_LOCATION, expected ), mappingFiles )
assertTrue ( xml. contains ( "FacesException: Failed" ) )
assertEquals ( ROUTE_KEY, instanceIdentifier. firstKeyOf ( LabeledUnicastRoute. class ) )
assertObjectEquals ( "[{f:'a'},{f:'b'},{f:'c'},{f:'d'},{f:'e'}]", p. run ( bs, in, sa ) )
Assert. assertEquals ( 1, compareResult )
assertEquals ( 25, diff. getValue ( ). get ( ) )
Assert. fail ( "Expected ConfigurationException" )
assertEquals ( descriptor, descriptor2 )
assertEquals ( "Count of customer", 2, res )
assertEquals ( null, form. getFieldValue ( ) )
assertTrue ( _comp. isEquals ( json, expected ) )
assertNotNull ( result )
assertEquals ( "87030-020", String. format ( "%s", cep ) )
Assert. assertArrayEquals ( expected, actual )
assertNotNull ( modelDTOs )
assertKernel ( kernel, ANNULUS, e )
assertEquals ( "b", post. getParams ( "a" ). get ( 0 ) )
assertEquals ( "this is the book title", source. getDocumentText ( ) )
Assert. fail ( "Key provider should have thrown an exception" )
assertEquals ( myDate. getTime ( ), tested )
Assert. assertEquals ( targetPath, actual )
Assert. assertEquals ( 3, vertices. size ( ) )
assertEquals ( "fileName-" + HASH + ".js", result )
assertEquals ( "", BatchParserCommon. removeEndingCRLF ( new Line ( line, 1 ) ). toString ( ) )
Assert. fail ( e. getMessage ( ) )
assertEquals ( "host3 is not a valid host name", result )
assertTrue ( dao. selectAll ( ). size ( ) == 1 )
assertEquals ( Result. FAIL, user. apply ( item ) )
assertEquals ( generatedGraph, "Graph 'I' = 'You'\\n" + "  Base_name = 'Peter'\\n" + "  Base_weight = '0.5'" )
assertThat ( hBaseAdmin. tableExists ( "table" ), is ( false ) )
assertTrue ( validator. validate ( EntityNames. ATTENDANCE, attendances ). containsAll ( attendances ) )
Assert. assertEquals ( expectedCrossProduct, crossProduct )
assertThat ( exists, is ( true ) )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
assertThat ( flashMap, is ( nullValue ( ) ) )
assertEquals ( "jdbc:h2:mem:test", embeddedDatabaseRule. getConnectionJdbcUrl ( ) )
assertEquals ( "GBP 3.57", test. toString ( ) )
assertThat ( terminologyService. isSubclassOf ( c1, c2 ), is ( false ) )
assertNull ( entryRelationship )
assertThat ( count. getValue ( ), equalTo ( 5L ) )
assertEquals ( "remote", sf1. getField ( ) )
assertEquals ( 0, scores. getScore ( ) )
assertEquals ( ImmutableSet. of ( employee. id. min ( ), employee. id. max ( ) ), query ( ). from ( employee ). where ( sq1. exists ( ) ). select ( employee. id. max ( ) ). fetch ( ) )
assertEquals ( BOOLEAN, v8Object. getType ( "key" ) )
assertEquals ( "�邪�邪", I. currency ( "USD" ). print ( ) )
assertTrue ( rsp. asString ( ), rsp. get ( FAILURE_DESCRIPTION ). asString ( ). contains ( GROUP_NAME ) )
assertTrue ( verifier. isValid ( interceptor, controllerMethod, controllerInstance ) )
assertNotNull ( eventSourceTopology )
assertEquals ( 0, collector. size ( ) )
assertEquals ( 0, synchronization. getOrder ( ) )
assertEquals ( models, actual )
assertEquals ( "Done", messages. getMessage ( MESSAGE_ID. DONE ) )
assertThat ( response. getEntity ( ), CoreMatchers. < Object > equalTo ( userRoleList. getPermissionsList ( ). get ( 0 ) ) )
out. assertIsSatisfied ( )
Assert. assertEquals ( "bG9VzdZhcm4uIHdZS4=", f. encode ( value ) )
ctx. assertEquals ( 2, result. size ( ) )
assertEquals ( transactionCompletion, transactionManager. sendFiles ( ) )
assertTrue ( order. isDiscontinued ( DateUtils. parseDate ( "2014-11-01 11:11:11", DATE_FORMAT ) ) )
assertEquals ( expected, elements )
assertEquals ( "DataMaskingXmlDataSetConsumerTest.getValue() returns expected value", "123", dummyXmlOutputStreamProvider. getXmlString ( ). trim ( ) )
assertEquals ( 0, list. size ( ) )
assertEquals ( MediaType. APPLICATION_JSON_TYPE, response. getType ( ) )
assertEquals ( "!ys1\\n", sWriter. toString ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff16_" ) )
assertEquals ( "499", movie. getOutline ( ). getLength ( ) )
assertEquals ( 3, wizard. canComplete ( ) )
assertEquals ( "middleN", person. getMiddleName ( ) )
assertFalse ( "our host shouldn't have set our attribute", retAttr. contains ( attributes. get ( 0 ) ) )
assertEquals ( EarlyHints. MESSAGE, ri. getDescription ( ) )
assertTrue ( isSudokuValid ( board ) )
assertEquals ( 2, nodeUnits. size ( ) )
assertEquals ( "(Object obj, int count)String", sig. toString ( ) )
assertEquals ( groupId, kafkaStore. getKafkaStoreReaderThread ( ). getGroupId ( ) )
assertFalse ( handler. test ( null, null, Direction. In, null, null ) )
Assert. assertEquals ( "Value is incorrect", map, value )
Assert. assertEquals ( "OK", reference. get ( ). getAttachment ( Http2Client. RESPONSE_BODY ) )
assertEquals ( "", css )
assertTrue ( "It should be true - HDFS host: " + config. getNamedCluster ( ). getHdfsPort ( ) + " and JobTrackerPort: " + config. getNamedCluster ( ). getJobTrackerHost ( ), ncPropertiesNotNullOrEmpty )
assertTrue ( problem )
assertThat ( getCreatedPod ( ). getSpec ( ). getNodeSelector ( ), hasEntry ( "os_arch", "x86_64" ) )
assertEquals ( messageListener. getMessageCount ( ), 3 )
Assert. assertEquals ( pullRequestActivity, parsedPullRequestActivity )
assertTrue ( first. equals ( second ) )
assertEquals ( dlsn, FutureUtils. result ( writer. write ( record ) ) )
assertTrue ( converter. canConvert ( CommentAction. class ) )
assertEquals ( "Mark is 37", result. getValue ( ) )
Assert. assertTrue ( tchannel. isPeerInterestedOnHost ( ) )
Assert. assertTrue ( exception )
Truth. assertThat ( capturedCallOptions. getValue ( ). getDeadline ( ) )
assertEquals ( "conversion is broken", 0.0, ase. adaptiveScalarEncoder ( new A_ScalarEncoder_t ( ) ) )
assertTrue ( ps. readAccess ( TreeConstants. PERMISSIONS_STORE_PATH ). isAllowed ( ) )
assertEquals ( newLastname, customer. getLastName ( ) )
assertDelete ( )
assertThat ( operation. call ( ). result, contains ( deleteFromWorld ( ) ) )
assertThat ( mdcValueStr, is ( nullValue ( ) ) )
assertOut ( "var /** @type {RegExp} */ a = /[^\\\\s+(\\\\w+)(?:\\\\s*=\\\\s*(\\".*?\\"|'.*?'|[\\\\w\\\\.]+))?/sg" )
assertTrue ( "exact match on class and method should run", exactFilter. shouldRun ( testMethod ) )
this. assertEdgesOkResponseJsonStructure ( 0, 0, response )
assertTrue ( value instanceof Boolean )
assertEquals ( "Event log should contain an event", 1, listener. getEventLog ( ). size ( ) )
assertTrue ( "Login succeed for subject not to be trusted", success )
assertThat ( inputStream, notNullValue ( ) )
assertThat ( out, containsString ( "<birthDate value=\\"2012-01-02\\"/>" ) )
assertEquals ( "Expected 10 results!", 10, n )
assertThat ( pattern, specificPart ( is ( ",\\"type\\":\\"log\\",\\"logging\\":\\"%log4j.log4j.Standard\\"\\n" + "\\n" + "contextProperties:\\n" + "  \\"excluded-field\\": \\"custom-field\\",\\"stacktraces:\\n" + "    \\"custom-fields\\": [\\n" + "      {\\n" + "        \\"type\\":\\"log4j.log4j.log4j.log4j.log4j.Standard" ) ) )
assertEquals ( id. value, channel. getId ( ) )
assertFieldIsNull ( )
assertTrue ( population. size ( ) == 100 )
assertIterationsEqual ( expected, Views. iterable ( shuffled ) )
Assert. assertTrue ( isArchived )
assertEquals ( 2, i. get ( ) )
Assert. areEqual ( 1, se. getInt ( 1 ), "验证优先级的数据" )
Assert. assertFalse ( errors. hasErrors ( ) )
Assert. assertEquals ( "The quick brown fox has many silly" + "red fox sox", result )
assertEquals ( index1, index1Duplicate )
JSONAssert. assertEquals ( "Message", "{id:12346}", actual, false )
assertFalse ( query ( func. args ( ) ). isEmpty ( ) )
assertEquals ( 6, dataMgr. getCommandHistory ( ). size ( ) )
assertThat ( "Locations created with different paths and the same properties must be equal", locationA1. equals ( locationA2 ), is ( false ) )
Assert. assertTrue ( returned. isEmpty ( ) )
assertEquals ( "one dollar", actual )
assertFocusedCell ( 1, 3 )
assertNotNull ( result )
assertArrayEquals ( new long [ ] { 5, 5, 5 }, outArr. shape ( ) )
assertNotNull ( Participant. fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertThat ( baos. toString ( ), endsWith ( String. format ( "0 Scenarios%n" + "0 Steps%n" ) ) )
assertEquals ( 1, v )
assertTrue ( normalizedProbability == 0 )
assertEquals ( expResult, result )
Assert. assertEquals ( "12 minutes from now", t. format ( new Date ( System. currentTimeMillis ( ) + 1000 * 60 * 12 ) ) )
assertThat ( results. hasNext ( ), equalTo ( false ) )
assertEquals ( 2, ksession. fireAllRules ( ) )
assertThat ( scheduler. scheduleAtFixedRate ( "mytask", clock. in ( 1, HOURS ) ), is ( nullValue ( ) ) )
assertEquals ( "Should return correct url", "http://localhost/api/v1/stUDENTs?ids=" + ids, url. toString ( ) )
assertNotEmptyAndClear ( writer )
assertNotNull ( resolver )
Assert. assertEquals ( actual, "yyyy-MM-dd" )
assertTrue ( impl. mustRevalidate ( entry ) )
assertEquals ( response. get ( 0 ), testResponse. get ( 0 ) )
assertEquals ( 14, methods. size ( ) )
assertTrue ( json. contains ( "\\"ids\\":[1,2,3]" ) )
assertEquals ( "xsd:float", prefixedName )
assertEquals ( "<r><i><v>1\\n1</v></i></r>", writer. toString ( ) )
assertEquals ( xmlString, xmlReturn )
assertTrue ( "Is not a graph in the model", dataset. isIsomorphicWith ( model ) )
assertEquals ( expectedClass, actualClass )
Assert. assertTrue ( setA. hashCode ( ) == setB. hashCode ( ) )
assertEquals ( 1L, count. longValue ( ) )
assertEquals ( initialHostLinks. size ( ), expectedLinks. size ( ) )
Assert. assertEquals ( "Number of samples", 17, count )
assertNull ( result )
assertEquals ( Collections. singletonList ( subscribedWatcher ), watchers. getSubscribedUsersOf ( question ) )
test. assertOutput ( "hello hello hello", input, "hello hello hello", output )
runner. assertAllFlowFilesTransferred ( SelectHive_1_1QL. REL_FAILURE, 1 )
assertEquals ( match, matcheCounts [ 2 ] - matcheCounts [ 3 ] )
assertTrue ( topLevel == MongoTopLevel. INCONSISTENT )
Assert. assertEquals ( "width==340 height=200\\r\\n", readText ( decoder ) )
Assert. assertTrue ( verifyTest ( crlBuilder ) )
assertTokens ( "text 1 10", new String [ ] { "text 1" }, new String [ ] { "text 10" } )
assertEquals ( 3600., Time. parseTimeToSeconds ( time ), 0.01 )
Assert. assertEquals ( "Wrong number of elements", 1, list. size ( ) )
Assert. assertEquals ( 7, instance. size ( ) )
assertThat ( intervals, is ( expected ) )
Assert. assertTrue ( ( ( ScopePathBuilderFactory ) factory ). createAccessor ( ). contains ( config. getField2 ( ) ) )
assertFalse ( result )
assertEquals ( 10, template. getMetaData ( context. getEntityResolver ( ) ). getStatementFetchSize ( ) )
assertThat ( target2. getSubscriberId ( ), is ( "subscriber_id" ) )
assertEquals ( "Select with not null where clause", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPath, cmpPath, destinationFolder, diff ) )
assertEqualHQL ( "allen AND love", sb. toString ( ) )
assertEquals ( resp. getCode ( ), 204 )
assertEquals ( "", r1. toString ( ) )
assertTrue ( planetsReflected. length == 6 )
Assert. assertEquals ( "ITEM 001Product             00005\\n", result )
assertTrue ( BooleanIndexing. and ( array, Conditions. greaterThan ( 1e-6f ) ) )
assertEquals ( "field1=value1 field2=value2", columns. toString ( ) )
assertEquals ( "/_snapshot/kangsungjeon/_all/snapshots", getSnapshotRepository. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertTrue ( listChesse. getTotalAmount ( ) == 0 )
assertEquals ( expectedResult, OSValidator. isWindows ( ) )
Assert. assertEquals ( "string", doc2. getContentField ( "out" ) )
assertEquals ( expectedClassPath, classPath. getFile ( ). getCanonicalPath ( ) )
assertEquals ( Status. FORBIDDEN, status )
assertEquals ( V8Value. INT_8_ARRAY, typedArray. getV8Value ( 0 ) )
assertNull ( result )
assertEquals ( 30, ( int ) new AcceptsLambda < Integer > ( ). accept ( x :: addInts ) )
assertNotNull ( result )
Assert. assertEquals ( expect_sql, sql )
assertTrue ( obj. containsKey ( "foo" ) )
assertEquals ( response. getStatus ( ), STATUS200 )
Assert. assertEquals ( 0, an. analyze ( new CandidateNode ( new CandidateRule ( "test", rule ), nnode ), results ). size ( ) )
assertNotNull ( result )
assertTrue ( "Message should be authenticated with salt", saltUtils. messageAuthenticated ( message, mac ) )
assertThat ( getPodSpec ( jobSpec ). getRestartPolicy ( ), is ( "Always" ) )
assertTrue ( provider. isHyperlinkPainterAware ( ) )
Assert. assertTrue ( fs. exists ( target ) )
Assert. assertEquals ( "Rule builder was called " + n + " times", 0, n )
assertTrue ( passages. size ( ) > 0 )
Assert. assertTrue ( pss. toString ( ). contains ( "123" ) )
assertTrue ( clientWrapper. add ( "test", 1000, "value", transcoder ) )
assertTrue ( "v1=" + v1 + " v2=" + v2, v1 == v2 )
Assert. assertEquals ( 0, analyser. getTimeWindowViolationAtActivity ( route. getStart ( ), route ), 0.01 )
Assert. assertFalse ( encounter. equals ( null ) )
assertNull ( result )
assertFalse ( idA. equals ( idB ) )
Assert. assertEquals ( Response. Status. SUCCESS. getStatusCode ( ), stringResponse. getStatus ( ) )
assertNull ( presenter. lastFormatedField )
arrays. assertNotEmpty ( description, null )
assertEquals ( 7, smsd1. getAllAtomMapping ( ). size ( ) )
Assert. assertEquals ( 4, p. i ( 1, new C2 ( ) ) )
Assert. assertEquals ( 0, collect. size ( ) )
assertHtml ( childrenHtml, "children=2" )
Assert. assertEquals ( count, chronicle. getNumEvents ( 0, count * period ) )
Assert. assertNull ( part )
assertNotNull ( Certificate. fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "CYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( "GBP12.50 charged", sub. replace ( "${code}${amount} charged" ) )
assertEquals ( monthBoundsLToR, ui. getMonthBounds ( 1, 1 ) )
Assert. assertEquals ( 1, updates. getOperations ( ). size ( ) )
assertEquals ( latch. getCount ( ), 0 )
assertThat ( actual, is ( "server1.mycompany.com" ) )
assertTrue ( algorithm. shouldRetry ( attempt ) )
assertEquals ( "Doe John", RecordPath. join ( "name", "firstName", "fullName" ). evaluate ( record ). getSelectedFields ( ). iterator ( ). next ( ). getValue ( ) )
Assert. assertEquals ( value, tested. getTypes ( ) )
assertEquals ( 1, listener. updatedInjectedFilters. size ( ) )
assertThat ( "getValue", node. getValue ( ), is ( false ) )
assertEquals ( "2 > 3", expr. getParameterValue ( ) )
Assert. fail ( "Missing required input" )
assertEquals ( FactoryTestStringMap. class. getName ( ), ContextDataFactory. createContextData ( ). getClass ( ) )
assertEquals ( 1, map. size ( ) )
assertEquals ( expResult, result, 0.000001 )
assertEquals ( asSet ( "nonExistentId", "xForm:nonExistentId", "ySubview:nonExistentId" ), resolvedIds )
assertEquals ( g1, g2 )
Assert. assertNotNull ( node )
assertTrue ( TeiidURL. isValidServerURL ( SERVER_URL ) )
assertEquals ( true, CollectionUtils. isEmpty ( coll ) )
assertEquals ( 4096, testInt )
assertEquals ( "testuuid", sut. transform ( "/blah/whatever/someversionhere_uuid_testUUID.css" ) )
assertEquals ( "missing", caller. getResponseBody ( ) )
assertSame ( System. getenv ( "PATH" ), value. getValue ( ) )
assertNotNull ( Files. getFileAttributeView ( gfs. getPath ( "/file.txt" ), FileAttributeView. class ) )
assertEquals ( criterion1. toQueryString ( ), criterion2. toQueryString ( ) )
assertTrue ( events. size ( ) == 5 )
assertEquals ( readIter. getSample ( i ), writeIter. getSample ( ) )
Assert. assertEquals ( "a:b:c", html )
assertNotEquals ( instanceId1, instanceId2 )
assertEquals ( 1, tree1. getActionCount ( ) )
assertTrue ( "IllegalArgumentException expected", ex. getCause ( ) instanceof IllegalArgumentException )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);\\n\\n\\n/**\\n * @const\\n * @type {number}\\n */\\norg.apache.royale.A.A = 42;\\n\\n\\n/**\\n * @export\\n * @type {number}\\n */\\norg.apache.royale.A.protected_static_const_value_set_const\\n * @const\\n * @type {number}\\n */\\norg.apache.royale.A.B;\\n\\n/**\\n * @const\\n * @type {string}\\n */\\norg.apache.royale.A.C;\\n\\n/**\\n * @private\\n * @const\\n * @type {number}\\n */\\norg.
assertThat ( secondPage. getUrl ( ). toString ( ), endsWith ( "/page/foo" ) )
assertEquals ( testValueCanonical, rval )
assertEquals ( exception, fn. apply ( 1234 ). orElse ( null ) )
assertEquals ( PCEPErrors. LSP_NOT_PCE_INITIATED, this. errorsSession1. get ( 0 ) )
assertEquals ( expectedSignature, mapResourceType. getSignature ( ) )
Assert. assertTrue ( Arrays. equals ( valResult, Bytes. toBytes ( "val1" ) ) )
assertEquals ( expected, Encoder. encode ( input ) )
assertToken ( profile, token, VALUE )
Assert. assertEquals ( 5, delTokens. size ( ) )
assertThat ( result, is ( "" ) )
assertEquals ( "from dual", query. toString ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo, jobSpec ), allOf ( hasItem ( configMapKeyRefEnvVar ), hasItem ( secretKeyRefEnvVar ), hasItem ( fieldRefEnvVar ) ) )
assertEquals ( h, TextUtil. stripNewlines ( out ) )
assertNull ( event )
Assert. assertEquals ( 1.0, correlation. correlation ( xArray, yArray ), Double. MIN_VALUE )
assertEquals ( 2, ancestors. size ( ) )
assertEquals ( cVector, normalizedCVector )
assertEquals ( null, Files. readSymbolicLink ( symLink2 ) )
Assert. assertEquals ( "Legacy RetentionPolicy should be Default", DefaultRetentionPolicy. class, retentionPolicy. getClass ( ) )
assertTrue ( "Java2wsdl.js does not use classpath as JS file", jsFile. exists ( ) )
assertEquals ( "{" + newLine ( ) + "    with ($p) { setAge($p.getAge() + 1) };" + newLine ( ) + "}", printConstraint ( expression ) )
assertEquals ( expectedJson, message. toJson ( ) )
assertSerializable ( new ArtifactDescriptorException ( result ) )
assertEquals ( "DataDictionary[name='FIX40.xml']", dd. getFilename ( ) )
assertEquals ( err, "Directory, 'EasyMock for class java.io.File' is not a directory." )
assertEquals ( StatusCode. NAMESPACE_NOT_FOUND, response. getCode ( ) )
this. assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetemplates%252Ffruits/baobab_serviceTemplate/boundarydefinitions/components/", "servicetemplates/boundarydefinitions/baobab_component.json" )
assertEquals ( insertNum, count )
assertAnnotations ( 2, Quantity. class, new TestQuantity ( 0, "25ml", 25, "m^2", "area" ), new TestQuantity ( 1, "35 millilitres", 35, "m^2", "area" ) )
assertTrue ( entity. getId ( ) > 0 && entity. getTimestamp ( ) == null )
assertEquals ( "Johny", value )
Assert. fail ( )
assertFalse ( voter. voteMatch ( affiliation, organization ) )
assertFalse ( "other vos should not be equal", otherVoFqans [ 0 ]. equals ( otherVoFqans [ 1 ] ) )
assertConstraintViolationPropertyValidation ( constraintViolations )
assertTrue ( false )
assertEquals ( HttpStatus. SC_OK, resp. getStatus ( ) )
assertEquals ( "enabled", runner. run ( ) )
assertNull ( dao. getEntry ( association. getHandle ( ) ) )
Assert. assertEquals ( sourceCardinality, subplanCtx. getCardinality ( ) )
observer. assertObservations ( "14", PhaseId. APPLY_REQUEST_VALUES, PhaseId. APPLY_REQUEST_VALUES, PhaseId. RESTORE_VIEW, PhaseId. RESTORE_VIEW, PhaseId. RESTORE_VIEW, PhaseId. RESTORE_VIEW, PhaseId. UPDATE_MODEL_VALUES )
Assert. assertTrue ( ( ( LocatorTargetSelector ) client. getConduitSelector ( ) ). getStrategy ( ) instanceof LocatorTargetSelector )
assertEquals ( 24, id3tag. getBPM ( ) )
assertEquals ( theSize. getClassInformation ( ). getClassNumber ( ), Integer. MAX_VALUE )
assertTrue ( handled )
assertThat ( p. type, is ( Packet. CLOSE ) )
assertEquals ( "0 days, 00:05:12", howLongFromNow )
assertTrue ( valid )
Assert. assertNull ( pattern )
assertNull ( new Patterns ( ). getPattern ( entityId ) )
assertEquals ( "The first state on first page is not correct", FIRST_STATE_FIRST_PAGE, actual )
assertEquals ( "/genPath", path )
assertThat ( stepListener. getCurrentTestOutcome ( ). getTestSteps ( ). get ( 0 ). getDescription ( ), is ( "final title" ) )
CustomAsserts. assertEquals ( definition, expected, actual )
assertEquals ( 500000, safe. get ( ) )
assertFalse ( result. hasFailures ( ) )
assertEquals ( LocalDate. of ( 2012, 7, 1 ), test )
assertThat ( matcher. matches ( TestClasses. class, null ), is ( true ) )
assertEquals ( 0, records. size ( ) )
assertEquals ( field. getLabel ( ), "label" )
assertProcessInstanceCompleted ( processInstance )
Assert. assertEquals ( message. name ( ), translated )
assertThat ( description. toString ( ), is ( "equality of row <3>" ) )
assertTrue ( "Focus should be in the editor after click", isElementPresent ( By. className ( "v-slot-focus" ) ) )
assertEquals ( 1, externalTaskService. createExternalTaskQuery ( ). singleResult ( ). getTaskDefinitionKey ( ). size ( ) )
assertEquals ( 123L, book. getId ( ) )
assertEquals ( expecting, result )
assertThat ( value. isPresent ( ), is ( equalTo ( false ) ) )
assertThat ( result, is ( Collections. singletonList ( "setMyField" ) ) )
assertThat ( testValues, is ( expectedValues ) )
assertThat ( response, containsString ( "aut-num:AS4294967207" ) )
assertEquals ( 2L, results. next ( ). id ( ). intValue ( ) )
assertEquals ( "", result )
assertEquals ( null, result )
assertThat ( target. getConvNetworkId ( nwId ), is ( "network01" ) )
assertFalse ( connection. connect ( ) )
assertEquals ( mappedEntityID, event. getEntityForNaming ( false, true, false ) )
assertThat ( count, is ( 2 ) )
Assert. assertFalse ( bpInfo1. equals ( bpInfo2 ) )
Assert. assertEquals ( Syntax. XWIKI_2_1. toIdString ( ), syntaxId )
assertEquals ( "first", data )
Assert. assertTrue ( ctx. getResult ( ) )
assertEquals ( expectedMessage, result )
assertEquals ( r1, r2 )
assertTrue ( sink. getInvalidConfiguration ( ) )
assertEquals ( expected, actual )
assertEquals ( OffsetDate. of ( LocalDate. of ( 2007, 7, 15 ), OFFSET_PONE ), t )
assertThat ( unlocked. getInteger ( ), equalTo ( - 2 ) )
assertNotNull ( entity. getId ( ) )
assertNull ( result )
Assert. assertFalse ( result )
assertCoordinates ( 9 - 1, HEIGHT - 1 )
Assert. assertTrue ( authorizeInteraction )
assertEquals ( Arrays. asList ( 42 ), list )
assertTrue ( me. isNewMsg ( ) )
assertEquals ( "", result )
Assert. assertTrue ( "Stub exception was not forwarded.", stubFailed )
assertEquals ( expectedBounds, actualBounds )
Assert. assertEquals ( 150, terminatedAfter )
Assertion. assertEquals ( loadedDataSet, actualDataSet )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��***��\\n" + "��***��\\n" + "��***��\\n" + "��***��\\n" + "�尖��\\n" )
assertNull ( converter. getAsObject ( facesContext, new UIPanel ( ), null ) )
assertEquals ( "Parser error: DeviceProvisioningServiceName mismatch!", expected, actual )
assertEquals ( "", currentProjectPathProvider. getValue ( ) )
AssertAnnotations. assertSentence ( sentences, select ( jcas, Sentence. class ) )
Assert. assertEquals ( true, booleanConstant. evaluate ( null ) )
Assert. assertEquals ( path, "dir" + File. separatorChar + "dir2" )
Assert. assertEquals ( 0, m. size ( ) )
AssertionUtils. multiAssertEquals ( createAsDocument11, response7. getResponseObject ( ) )
assertAxisEquals ( timeInterval, new ArrayDouble ( 1.0 / 18.0, 6.0 / 18.0, 11.0 / 18.0, 16.0 / 18.0 ), Arrays. asList ( TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 ), TimeScalesTest. create ( 2014, 12, 24, 22, 59, 59, 995 )
Assert. assertEquals ( "A reference beginning with a slash should work", 6.0, calc. evaluate ( "* this is a test,ref2,*" ), 0.0 )
assertThat ( path. getString ( NO_OP_ENCODER ), is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../{}d/./{http://www.modeshape.org/1.0}e/../.." ) )
Truth. assertThat ( outputStream. toString ( ) )
assertEquals ( "foo.bar", pathConnector. getPropertyPath ( ) )
assertTrue ( "Accepts a method that returns a PageSubclass", interceptor. accepts ( resourceMethodThatReturnsPageSubclass ) )
Assert. assertTrue ( errors. hasFieldErrors ( "retireReason" ) )
assertEquals ( 17, uniqueWords )
Assert. assertFalse ( new ProcessorDecorator ( processor ). isMinimize ( ) )
assertThat ( replaced, is ( newEditRelation ) )
assertFalse ( HttpTestUtils. semanticallyTransparent ( resp2, result ) )
assertTrue ( record. getAnnotations ( ). containsKey ( Annotation. RELATIONAL_PLANNER ) )
Assert. assertEquals ( "{\\"alice\\":{\\"charlie\\":\\"david\\",\\"$\\":\\"bob\\"}}", result. toString ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "host", result )
runner. assertNotValid ( )
assertEquals ( "Hello World". substring ( 2, 7 ), bytes. parseUtf8 ( CONTROL_STOP ) )
assertEquals ( "0cafebabe6f4c2b0a0f0c2b0a0f0f0f0f0f0f", Hex. toHexString ( sha1 ). toUpperCase ( ) )
Assert. assertTrue ( "Expected tuples to be equal", Utils. equals ( t1, t2 ) )
assertLife ( playerB, 16 )
Assert. assertEquals ( 0, patients. size ( ) )
assertTrue ( splitOnWhitespace. size ( ) == 8 )
assertEquals ( "Did not get expected parameter count", 3, params. size ( ) )
assertNull ( request. getAttribute ( UsernamePasswordCheckcodeAuthenticationFilter. SPRING_SECURITY_USERNAME_KEY ) )
assertTrue ( "Can't find statement", m. contains ( expectedStatement ( FILE_BASE ) ) )
assertEquals ( "Unlocked", fileEntry. getLockType ( ) )
assertEquals ( "<html><head></head><body></body></html>", rewritten )
assertEquals ( new Long ( bogusId ), sut. execute ( new DeleteActivityRequest ( sut. getBaseUri ( ), bogusId ) ) )
assertThat ( environmentVariables. getProperty ( "property.found" ), is ( false ) )
Assert. assertTrue ( configuration. isDubboEnabled ( ) )
assertThat ( newActivity, instanceOf ( TestSpyActivity. class ) )
assertInvocations ( invocations, "prepare", "commit" )
assertTrue ( "Coercing to VARBINARY failed for PDataType " + p, obj instanceof byte [ ] )
assertEquals ( 1, triangle. solution ( array ) )
assertFalse ( source. isRoot ( ) )
assertThat ( PrettyTime. of ( Locale. US ). print ( dur, TextWidth. WIDE, true, 3 ), is ( "1 jour, 0 heure, 4 minutes, and 123 microseconds" ) )
assertTrue ( result )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( query, query1 ) )
assertThat ( c, not ( nullValue ( ) ) )
assertEquals ( "Expected 99 results!", 99, n )
assertEquals ( result, expected, 0.0000001 )
Assert. assertTrue ( _c. canConvertTo ( Integer. TYPE ) )
assertThat ( Template. parse ( source ). render ( ), is ( "test-string" ) )
assertEquals ( "Wrong # of objects found", 1, count )
Assert. assertFalse ( inBlackList )
assertEquals ( 0, fooDao. create ( ( Foo ) null ) )
assertEquals ( "Expected 5 results!", 5, n )
Assert. assertTrue ( "The expected values were not set in the group group", expectedValueMap. isEmpty ( ) )
assertFalse ( source. exists ( ) )
Assert. assertTrue ( actionList. equals ( "fireActionActivated\\n" ) || actionList. equals ( "fireActionActivated2\\n" ) )
Assert. assertTrue ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isTraceEnabled ( ) )
assertThat ( element. isPresent ( ), is ( true ) )
this. assertHeadersSet ( CONTEXT + "/topics/1" )
assertThat ( house. getMouse ( ), nullValue ( ) )
assertEquals ( t, "MULTILINESTRING" )
assertEquals ( outputExpect, output )
Assert. assertNull ( u )
assertFix ( "8=FIX.4.4|9=64|35=1|34=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVER|52=20140101-10:10:10.100|56=SERVER|52=20140101-10:10:10.100|56=SERVER|10=1|10=1|10=1|10=2|34=1-10:10:10.100|56=SERVER|10=1|10=1|10=1|10=1|10=2|10=1|10=1|10=1|11=1|11=2|12=1|13=1|14=1|15=1|16=1|17=1|18=1|19=1|20=1|21=20140101-10:10:10.100|10=2|20=1-10:10:10.100|10=1|20=1|10=2|10=3|20=
assertThat ( encodedValue, equalTo ( GLOBAL_ENCODED_SHA_384_VALUE ) )
editor. assertProblems ( "vm_extensions|Unknown property" )
assertEquals ( "{ a : [ { a : 1 } ] }", doc )
assertEquals ( MissingNode. getInstance ( ), tup. getValue ( ) )
assertNotNull ( Participant. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "CFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "CAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertThat ( pgpSignedMessage. verify ( getPublicKey_5763950D ( ) ), is ( true ) )
assertThat ( options. isStrict ( ), is ( true ) )
assertHierarchyIs ( "Virtual resource type" )
assertEquals ( 2, services. size ( ) )
assertThat ( mySignalHandler. wasCalled, IsEqual. equalTo ( false ) )
assertEquals ( Arrays. asList ( filter1, filter2 ), returned )
assertEquals ( "", result )
Assert. assertEquals ( msg, expected, actual, delta )
assertEquals ( category, converter. convertToEntityAttribute ( "name", Category. class ) )
assertEquals ( 5, calculator. add ( 1, 2 ), "0" )
Assert. assertNull ( mxBeanMapping2 )
assertEquals ( "abcdef", buf. getTail ( ) )
Assert. assertTrue ( fitResidualSum < noisyResidualSum )
Assert. assertEquals ( "CheckBox should be selected", toggle. isSelected ( ), true )
assertions. contains ( values )
assertEquals ( 20, results. size ( ) )
assertEquals ( 1, tr. getCalls ( ) )
Assert. assertEquals ( SearchAction. SEARCH_VIEW, streetSearchAction. search ( ) )
assertEquals ( 0, ( int ) tree. entries ( ). count ( ). toBlocking ( ). single ( ) )
assertEquals ( "Wrong visited nodes", expected, visitor. getVisitedNodes ( ) )
assertResultSet ( res )
Assert. assertThat ( form. getSchema ( ). get ( "form.form.encoded" ), is ( equalTo ( "form" ) ) )
assertEquals ( expected, out )
assertTrue ( newYearsDay. isAfter ( newYearsEve ) )
assertThat ( result. size ( ), is ( 1 ) )
assertEquals ( "Expected 100 results!", 100, n )
assertNull ( result )
Assert. assertArrayEquals ( new byte [ ] { 0, 0, 25, 0, 0, 24 }, byteData )
Assert. assertTrue ( contentType, contentType. contains ( "text/plain" ) )
assertRequest ( "DELETE", "Call/%s/Play/", callId )
assertEquals ( "Search should not retrieve the next page", 1, output. getEntry ( "next" ). size ( ) )
assertEquals ( "All steps are processed", 1, output. size ( ) )
assertEquals ( msg, i, curVal )
assertEquals ( 1, inverses. size ( ) )
assertTrue ( "File audit log should be created", ops. exists ( TEST_FILE_AUDIT_LOG_ADDRESS ) )
assertFalse ( matchResult )
assertNull ( getWithTimeout ( commit ) )
Assert. assertEquals ( "�驻�� 3 砖注�转", t. format ( new Date ( ) ) )
assertTrue ( _comp. isEquals ( json, expected ) )
assertEquals ( 0, initEmptyContainer )
assertEquals ( "Error was not received", AlertLevel. ERROR, _notification. getLevel ( ) )
assertResultSet ( res )
assertEquals ( "org.talend.components.kinesis.runtime.KinesisDatasetRuntime", runtimeInfo. getRuntimeClassName ( ) )
assertThat ( query. getQuery ( ), is ( expectedToString ) )
assertThat ( reply ( ), is ( anAppendReply ( ). withResult ( false ) ) )
assertTrue ( message, message. contains ( "type" ) )
assertEquals ( ScenarioSimulationModel. Type. RULE, retrieved. getType ( ) )
Assert. assertEquals ( expected, actuals )
assertNotNull ( alumnoPaquete. getId ( ) )
assertAxisEquals ( 234567, 678967, new double [ ] { 234567, 678967, 4, 5 }, new String [ ] { "2", "4", "6", "8", "10" }, axis )
assertEquals ( 3, arr. reduceRight ( callbackfn ). intValue ( ) )
assertEquals ( getMessage ( MessageKeys. E_TR_FW_0001 ), driver. findElement ( By. cssSelector ( "p" ) ). getText ( ) )
assertThat ( dockerInfo. getName ( ), is ( validDockerContainer ) )
assertEquals ( expResult, result )
assertSame ( options1, options2 )
assertParse ( "productline PL; features FM;" + "product P4;" + "root FM { Int attr in [0.. 99]; }" )
assertThatSliderValueIs ( value )
assertEquals ( envelope, cellRenderer. getIcon ( ) )
assertTrue ( terminated )
Assert. fail ( "LoggingServlet should not have been logged because of missing parameters" )
assertSame ( given, actual )
assertThat ( request. getTimeLoaded ( ), is ( notNullValue ( ) ) )
assertNull ( OpenShiftContext. get ( ). get ( "foo" ) )
Assert. assertTrue ( "Should have thrown a ConnectionLeakException", System. currentTimeMillis ( ) - start < 4000 )
Assert. assertEquals ( contenido, actualido )
assertEquals ( message, scandiumUtil. readOutput ( ) )
assertContextOk ( ctx, "O1:doc:doc,O2:doc:ref,O3:doc:ref", "Hello 1!,Hello 2!,Hello 3!", "/" )
assertEquals ( new Address ( "127.0.0.1", 123 ), m. getHZAddress ( ) )
assertFalse ( _wardenService. isWardenServiceEnabled ( ) )
assertThat ( out. toString ( ), containsString ( "Using timeout for story a_short.story of 25" ) )
assertTrue ( equalsResult )
assertEquals ( 20000L, query. count ( ) )
assertSingleIssue ( issues, 5, "Function defines rules not implemented" )
assertEquals ( ts, t. exec ( newTuple ( input ) ) )
assertEquals ( 10.0, Solutions. bestOf ( solutions ). getRoutes ( ). iterator ( ). next ( ). getStart ( ). getEndTime ( ), 0.1 )
Assert. assertEquals ( 42. * 2., analyser. getFixedCosts ( route ), 0.01 )
Assert. assertNull ( this. dao. findCon ( id, age ) )
Assert. assertTrue ( executor. awaitTermination ( 120, TimeUnit. SECONDS ) )
Assert. assertEquals ( expResult, result )
assertEquals ( Arrays. asList ( ShellCommand. exit ( ) ), history. getCommands ( ) )
Assert. assertNull ( actual )
assertTrue ( exceptionThrown )
assertEquals ( "<div><p></p> jsoup <p></p>", doc. body ( ). html ( ) )
Assert. assertNull ( job )
Assert. assertEquals ( 0, queryPaths. length )
assertThat ( schema, allOf ( hasEntry ( is ( TYPE_2 ), hasProperty ( "predicates", allOf ( hasItem ( predicate ( ). withName ( PROP_I ). withDirection ( OUT ). withReferenceType ( VALUE_TYPE ) ) ) ), hasEntry ( is ( TYPE_3 ), hasProperty ( "predicates", allOf ( hasItem ( predicate ( ). withName ( PROP_I ). withDirection ( Direction. IN ). withReferenceType ( TYPE_2 ) ) ) ) ) ) )
assertEquals ( "valueA", pc. getString ( "keyA" ) )
assertFalse ( deleteSubtasksHidden )
assertEquals ( "fra 1 millennia", t. format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 1000 * 1 ) ) )
AssertAnnotations. assertSentence ( sentences, select ( jcas, Sentence. class ) )
assertNotNull ( symmetricAnnotation )
assertEquals ( ace, parsed )
assertNullOrEmpty ( getTaint ( arr ) )
Assert. assertTrue ( error!= null && info!= null )
assertFalse ( iter. hasNext ( ) )
assertTrue ( String. format ( "geoPos at <%d> doesn't exist", i ), geoPos. isValid ( ) )
assertEquals ( 3l, session. from ( $ ( emp ) ). where ( $ ( emp. getEmployees ( ) ). in ( emp1, emp2, emp3 ) ). count ( ) )
Assert. assertNull ( osm. generateLabel ( ) )
assertTrue ( executor. getQueryCount ( ) == 1 )
assertThat ( tester. getMessages ( FeedbackMessage. ERROR ). size ( ), is ( 1 ) )
assertThat ( range1. isFinite ( ), equalTo ( false ) )
assertFalse ( valid )
assertTrue ( detectWrap )
assertEquals ( "some text", text )
assertEquals ( "Serialised data set", expectedXML, actualXML )
assertEquals ( 10.0, scores. get ( "brownfox" ), 0.0 )
Assert. assertEquals ( 0, labels. size ( ) )
assertEquals ( timeInstant. getTimeMode ( ), TimeInstant. TimeMode. END )
Assert. assertEquals ( "a test.css", br. readLine ( ) )
Assert. assertEquals ( Logger. EVENT_UNSPECIFIED. toString ( ), markerCapture. getValue ( ). getName ( ) )
assertEquals ( "GBP 1.11", test. toString ( ) )
assertEquals ( classPath, module. getDependencies ( ) )
Assert. assertEquals ( expectedResult, res )
assertEquals ( false, result )
assertFalse ( rule. isVersionValid ( "1.7.2" ) )
assertNotNull ( team1. getId ( ) )
assertArrayEquals ( expected, Proto. build_fixed_str ( 3, str ) )
assertEquals ( timestamp, new Timestamp ( "2016-01-01T00:00:00Z", TimeScale. POSIX ). getTime ( ) )
assertTrue ( argument. getValue ( ). getTranscript_consequences ( ). isEmpty ( ) )
assertEquals ( expected, modified )
assertNoOrders ( )
assertEquals ( asUnorderedSet ( o. logicalAxioms ( ) ), asUnorderedSet ( o1. logicalAxioms ( ) ) )
assertBeanValidation ( json, "query.metric[0].tags[0] must have a name" )
Assert. assertTrue ( MsgUtils. compareIgnoringWhiteSpaces ( serializedRequest, fu. readFile ( "TradingSessionStatusRequest.xml" ) ) )
Assert. assertNotNull ( addressResultsDto )
assertThat ( node, is ( notNullValue ( ) ) )
assertEquals ( 0, result )
assertEquals ( 4, result. size ( ) )
assertTrue ( Math. abs ( sumOfSquares ( x, y ) - x ) < 1e-10 )
assertThat ( requestedShutdownCallable. call ( ), equalTo ( true ) )
assertThat ( parents, contains ( propertyB ) )
assertEquals ( asList ( "FOOFOO", "BARBAR", "BAZBAZ" ), result )
assertNotNull ( servedImage )
assertThat ( target. delLink ( link ), is ( false ) )
assertThat ( msg, is ( "Directory, 'dir' does not exist or is not writable." ) )
assertEquals ( false, result )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 07" ) )
assertEquals ( new Integer ( 1 ), count )
assertEquals ( "/onlyDefaultRealmName", picketLinkRequest. get ( ). getServletPath ( ) )
assertEquals ( "Expects to retrieve the 2 patients which reference the two different organizations", expectedIds, actualIds )
assertEquals ( Arrays. asList ( expected. build ( ) ), builder. build ( ). getPipeline ( ) )
assertTrue ( actionServiceRegistered )
assertEquals ( 0.0, cov, 0.001 )
assertEquals ( TEST_2007_07_15_PONE, t )
assertTrue ( executor. getException ( ). getLine ( ) > 0 )
Assert. assertEquals ( "Should commit", 35L, id )
assertNull ( ivl )
assertEquals ( "", c. getStyleName ( ) )
assertEquals ( status, shutdownReason )
assertThat ( sw. toString ( ), is ( "{\\"bar\\":{}}" ) )
assertEquals ( "<span>A</span><span>B</span>", output )
assertTrue ( translator. isMethodSupported ( "refreshGroupsForUser" ) )
assertEquals ( expected, actual )
assertIntValues ( array, 1, 2, 3 )
assertEquals ( "bcc@domain.com", emailer. getProperties ( ). getProperty ( "bcc" ) )
Assert. assertTrue ( createKeySpace. createQuery ( query ) instanceof NetworkdQuery )
assertTrue ( g1 instanceof PublicCloneable )
Assert. fail ( "Missing required input" )
assertEquals ( exp, res )
assertThat ( resolver. isValid ( "http://www.example.com/person.do?r=ants" ), is ( true ) )
assertEquals ( null, testSet. getTestResult ( 1 ). getComment ( ) )
assertEquals ( 0, cache. size ( ) )
assertEquals ( asNumberArgument. getValue ( ), 1 )
assertEquals ( 10, classUnderTest. getColumOrder ( ) )
assertEquals ( "Method #toString is wrong", "TextMapper{field=field, indexed=true, sorted=true, validated=true, analyzer=English}", mapper. toString ( ) )
assertEquals ( expResult, result )
assertTrue ( pvReader. notCalled ( ) )
assertEquals ( expResult, result )
Assert. assertTrue ( "Failed to list resources: " + result, Operations. isSuccessfulOutcome ( result ) )
assertThat ( conf, containsString ( "<interaction><code value=\\"" + TypeRestfulInteraction. HISTORYINSTANCE. toCode ( ) + "\\"/></interaction>" ) )
assertFalse ( completed. get ( ) )
Assert. assertNotNull ( _logger )
assertDisplayValues ( "fi.gif", "Commit ID 1" )
assertNotNull ( feather. instance ( Plain. class ) )
assertEquals ( count, query ( ). from ( cat ). where ( cat. id. notIn ( Arrays. asList ( 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L ) ). select ( cat. id ). fetchCount ( ) )
assertThat ( graph. run ( call ( first ) ). get ( ), equalTo ( 5 ) )
assertEquals ( "Test Model Type", otherModelType. getName ( ) )
assertEquals ( "RESOURCE", r. get ( String. class ) )
assertThat ( underTest. importApplicationDefinitions ( ImmutableMap. of ( "foo", "bar", "1.0" ) ), is ( singletonList ( new ApplicationRegistration ( "foo", ApplicationType. source, "1.0" ) ) ) )
assertThat ( ValidatorUtil. formatMessages ( validate ), validate. size ( ), is ( 0 ) )
assertEquals ( expectedSize, actualSize )
assertThrows ( IllegalArgumentException. class, ( ) -> relunctant. parse ( "a:b:c:d:e" ) )
assertFalse ( strings. hasMoreElements ( ) )
assertNotNull ( IncomingPhoneNumber. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( "^/cntrl/actn/clients/([^/]+)$", pattern )
assertThat ( rdx. toString ( ), not ( Matchers. isEmptyOrNullString ( ) ) )
assertEquals ( 3, result. getXdmValue ( ). size ( ) )
assertNull ( vo )
assertEquals ( value, executeAndReturnString ( value ) )
assertEquals ( 0, Wires. values ( ). size ( ) )
Assert. assertEquals ( 2, result. intValue ( ) )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertions. assertIsNotHandled ( )
assertNull ( command )
assertThat ( c, not ( nullValue ( ) ) )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
assertTrue ( checker. isScope ( scope ) )
assertEquals ( 3, count )
assertEquals ( true, result [ 0 ] )
assertEquals ( false, getMoveObjectDownAction ( ). isEnabled ( ) )
assertEquals ( 1, processInstances. size ( ) )
assertTrue ( msg. toString ( ), expectedFilteredRecommendedItems. containsAll ( actualFilteredRecommendedItems ) )
assertTrue ( testeeCacheGenerator. isUserPeriod ( ) )
assertContains ( e. getMessage ( ), "'id'" )
assertNotNull ( reporter )
assertEquals ( "Unexpected status code in HTTP response.", SC_UNAUTHORIZED, statusCode )
assertions. endsWith ( sequence )
context. assertIsSatisfied ( )
assertTrue ( "Shouldn't get buffer", responseReader == null )
assertEquals ( "Expecting well formed hql", "from CcAndInferredLocationRecord cc," + "ArchivedInferredLocationRecord in where cc.vehicleId = :vehicleId" + " and cc.vehicleAgencyId = :vehicleAgencyId " + "and cc.vehicleId = in.vehicleId " + "order by cc.vehicleId desc ", hql. toString ( ) )
assertTrue ( dataSource instanceof SakaiArchiveDataSource )
assertNotNull ( LastMonth. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", key. getPublicKeyAsHex ( ) )
assertEquals ( expected, sanitized )
assertThat ( converter. convert ( formattedValue, BigDecimal. class, bundle ), is ( equalTo ( theValue ) ) )
assertNotNull ( ids )
assertQueries ( query, incorrectQuery )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
assertEquals ( "Failed to parse xpath: " + xpathStr, xpathStr, xpath. getXPathWithoutDeclarations ( ) )
assertMatrixEquals ( "EPSG:4326", matrix )
assertSeq ( new String [ ] { "<a/>", "<b/>" }, "reverse", "foo" )
assertEquals ( "OU=NiFi#Organisation,CN=testuser", escapedClientDn )
assertFalse ( hasPermission )
assertTrue ( "", types!= null && types. size ( ) == 1 && types. contains ( ProfileType. INDUSTRY ) )
assertEquals ( DATA, storage. loadPerson ( ID ) )
Assert. assertEquals ( true, agent. detectMobileQuick ( ) )
assertEquals ( 2, parsed. getContained ( ). size ( ) )
assertEquals ( "Expected exception doesn't occurs", ReplyCode. KO_STREAM_OPERATION_NOT_ALLOWED. getCode ( ), ( Integer ) code )
assertEquals ( "Mismatched data at iteration #" + i, expected, res )
assertEquals ( SPEC0_GEOFIELD, entityDef. getGeoField ( ) )
assertEquals ( expected, elements )
assertEquals ( 2, manager. getMessageCount ( ) )
assertNull ( wrapperFilename )
assertEquals ( "Unexpected number of active descriptors", 0, descriptors. size ( ) )
Assert. assertEquals ( HttpStatus. SC_UNAUTHORIZED, response. getCode ( ) )
assertTrue ( comparator. compare ( "/hotels/{hotel}/**", "/**" ) < 0 )
assertEquals ( CHILD_RESOURCE_SET, childContext. getResources ( ) )
assertEquals ( "Hello {id}", ResponseBodyInterpolator. interpolate ( "Hello ^{id}", req ) )
assertNotNull ( avatar )
result. assertErrorFreeLog ( )
assertTrue ( users. size ( ) >= 2 )
assertEquals ( result, true )
assertEquals ( expectedURL, token. toURL ( ) )
assertEquals ( true, ConfigUtils. getOrNull ( config, "hello", false ) )
assertEquals ( 100, out. size ( ) )
assertions. contains ( value, index )
assertTrue ( peerAcceptanceUtil. isConsumerInterestedOnRemoteWorker ( workerADeploymentID. getServiceID ( ) ) )
Assert. assertEquals ( "The state is not correct", StateModelStateMachine. State. UPD, stateModel. getState ( event, partition, TEST_INSTANCE ) )
assertTrue ( gcd0. isConstant ( ) && gcd0. equals ( poly ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Start>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Start>", elem. toXml ( ) )
Assert. assertTrue ( response. contains ( "Deployment was successful" ) )
assertEquals ( Arrays. asList ( "World", "Hello" ), list )
Assert. assertEquals ( addresses, regionClient. getAvailableServers ( ) )
assertEquals ( expectedMetricsEnabledDimensions, config. getMetricsEnabledDimensions ( ) )
assertNotNull ( Workflow. fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( expected, actual )
assertEquals ( 50, query. getCacheCount ( ) )
assertThat ( "testReinstateAuth 0", itemService. find ( context, it. getItemId ( ) ), nullValue ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 03" ) )
assertDateEquals ( dateTime. getTime ( ), result )
Assert. assertEquals ( 100., time, 0.01 )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.code = :code_1", select. getQuery ( ) )
assertEquals ( "bcrypt-hashpw-test", hashed )
assertEquals ( "invalid percent complete", AnalysisSubmissionServiceImpl. STATE_PERCENTAGE. get ( AnalysisState. PREPARED ), analysisSubmissionServiceImpl. getPercentCompleteForAnalysisSubmission ( ID ), DELTA )
assertArrayEquals ( longng, m. getRecipients ( NEWSGROUPS ) )
Assert. assertTrue ( sut. isWeekday ( cal. getTime ( ) ) )
assertNotNull ( domain )
assertEquals ( 37.5, calc. getInsertionData ( route, job, nVehicle, 0.0, null, Double. MAX_VALUE ). getInsertionCost ( ), 0.01 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( 2, lt. getThreadPoolSize ( ) )
assertEquals ( 1, counter. getBeforeFileTreeWalkCount ( ) )
assertThat ( getTemplateLabel ( jobSpec, LabelConstants. JOB_NAME ), equalTo ( "test" ) )
Assert. assertNotNull ( testUserList )
assertEquals ( MATCH_ALL_QUERY, result. getQuery ( ) )
assertEquals ( 24, id3tag. getWmpRating ( ) )
assertTrue ( eq. test ( entity. build ( ) ) )
Assert. isTrue ( "Updated Description". equals ( newOrganization. getDescription ( ) ) && departmentList. size ( ) == newDepartmentList. size ( ) )
AssertAnnotations. assertNamedEntity ( ne, select ( jcas, NamedEntity. class ) )
assertEquals ( expected, actual )
assertEquals ( expectedResult, verifyDrugref. invoke ( audit ) )
assertNull ( result )
Assert. fail ( "Cannot create a ReplicateConfig with negative replicas" )
assertEquals ( "/iur-service-client/target/classes", actualObj )
assertThat ( _response. getStatus ( ), is ( METHOD_NOT_ALLOWED ) )
assertTrue ( jsonld. contains ( "\\"@vocab\\" : \\"http://schema.org/\\"" ) )
assertEquals ( 0, entities. size ( ) )
assertEquals ( expectedVector, marshalledReferenceNode ( node ) )
assertEquals ( 0, cut. getAttributes ( ). size ( ) )
assertThat ( target. readValue ( value ), is ( false ) )
assertEquals ( 1, statistics. getUpdatesCount ( ) )
assertThat ( logoutResponseXML, containsString ( "<samlp:LogoutResponse" ) )
assertThatAppletWasLaunched ( )
Assert. assertEquals ( 1, comparator. compare ( currentRelease, laterRelease ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ], expectedResult, actualResult )
assertEquals ( hash1, hash2 )
assertThat ( result, is ( new String [ ] [ ] { { "c" } } ) )
assertEquals ( res, "hello" )
Assert. assertEquals ( json, writer. toString ( ) )
assertEquals ( "445e6dab9298ec86309abf/1e6f2a48f5e4d", accountService. getUid ( ) )
assertThat ( augustHours, is ( 1.5 ) )
Assert. assertTrue ( responseList. size ( ) <= 2 )
assertEquals ( 3, result. totalHits )
assertTrue ( page. asText ( ). indexOf ( "foo" )!= - 1 )
assertEquals ( "http://localhost:8080/api/v1/key/123456/agency/1/command/predictions/?rs=16E&rs=52&rs=53&rs=54&rs=D4&format=json", Utils. makeCall ( preEncodedPredictionsUrl, "POST" ) )
assertEquals ( expected, actual )
assertIteratedKeys ( x, "1", "2", "5" )
assertTrue ( errorsContainer. equals ( errors ) )
assertThat ( parameters, is ( "?searchView=own&orderBy=createdNewest&show=all&minSupportCount=50" ) )
assertEquals ( 1, foundPosts. size ( ) )
Assert. assertEquals ( 0, analyser. getLoadAtBeginning ( route ). get ( 0 ) )
assertArrayEquals ( new long [ ] { 1, 2, 3 }, result )
assertThat ( response. body ( ). string ( ), equalTo ( "bar" ) )
assertTrue ( hour1. equals ( hour2 ) )
assertEquals ( TYPE_HANDLER. types ( key ), TypesHandler. getTypes ( key ) )
assertTrue ( result == 0 )
assertNotNull ( result )
assertEquals ( 5, sut. getMaxDaysToKeepEntries ( ) )
Assert. assertEquals ( "Hello Kermit", result )
assertSeen ( results, s1 )
assertThat ( array, is ( new double [ ] { 2, 3, 5, 7 } ) )
assertNotNull ( assertion )
assertThat ( facade. isProxied ( ), is ( false ) )
assertNotNull ( coreMlFile )
assertNotNull ( fixture )
assertContains ( e. getMessage ( ), "'id'" )
assertEquals ( BAD_REQUEST. getStatusCode ( ), response. getStatusCode ( ) )
assertNotNull ( op )
assertTrue ( matcher. match ( msg, rule ) )
assertEquals ( expected, toJSON ( object ) )
assertTrue ( "toDegrees() had errors in excess of " + MAX_ERROR_ULP + " ULP", maxerrulp < MAX_ERROR_ULP )
assertEquals ( 1, count )
assertEquals ( input, output )
this. assertLoadBlobViaTuples ( tuples, false, true )
Assert. assertEquals ( ret3, rec. getCompositeData ( ) )
Assert. assertEquals ( "Headers", "test", uic. getHeaders ( ). get ( "test" ) )
assertThat ( result, is ( translated ) )
assertTrue ( keyCodesSet. size ( ) == keyCodes. size ( ) )
assertFalse ( l0. equals ( l1 ) )
assertNotNull ( target )
assertThatSql ( query, is ( "SELECT table.col1, table.col2 FROM table" ) )
Assert. assertEquals ( false, mockDevice. getDeviceExtension ( ArchiveDeviceExtension. class ). isVisibleSOPClass ( "1.2.3" ) )
Assert. assertThat ( e. getMessage ( ), containsString ( expected ) )
Assert. assertEquals ( expected, actual )
assertFootersJoined ( )
Assert. assertEquals ( "Assert.assertEquals(\\"\\",\\"\\",\\"regexp:.*all\\", driver.findElement(By.xpath(\\".*all\\")).getText());", result )
assertEquals ( expectedUrl, authorizationUrl )
assertTrue ( Script. matchNamed ( MatchType. EQUALS, "data", null, "{\\"data\\":[\\"karate-logo.png\\"]}", ctx ). pass )
assertSame ( Sex. MALE, select. getSelectedItem ( ). orElse ( null ) )
assertEquals ( Paths. get ( PATH1 ). toRealPath ( ). toString ( ), query ( func. args ( PATH1 + NAME ) ). toRealPath ( ). toString ( ) )
assertThat ( file, exists ( ) )
assertNotNull ( result )
assertThat ( result, is ( jsonNull ( ) ) )
assertEquals ( 0.4, asin, 0.00001 )
assertEquals ( 1, locationManager. list ( ). size ( ) )
assertThat ( Datastore. get ( MyDelegate. class ), is ( sameInstance ( delegate ) ) )
assertEquals ( null, theme )
assertEquals ( r1, r2 )
assertEquals ( "TextBuilder String Is 1", _textBuilder. toString ( ), "1" )
assertEquals ( TargetType. PILLAR_EXACT, target. getType ( ) )
assertEquals ( jid, component. jid )
assertEquals ( 1, meta. getColor ( ) )
assertEquals ( expected, actual )
Assert. assertTrue ( "We should have a complete header", bufPos!= - 1 )
assertEquals ( "<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertEquals ( expResult, result )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff10_" ) )
assertEquals ( policy. getAuthIds ( ). get ( 0 ). getAuthId ( ), policy2. getAuthIds ( ). get ( 0 ). getAuthId ( ) )
assertThat ( applicationSettings. getProjectCreationSetting ( ), is ( ProjectCreationSetting. EMPTY_PROJECT_CREATION_ALLOWED ) )
assertEquals ( age, thisYear - year )
assertEquals ( "The bean must beLenient even though we don't have one.", 0, pm. getPmDefaults ( ). getDiResolver ( ). getPmMembers ( ). size ( ) )
assertEquals ( "<customer firstName=\\"Max\\">Mustermann</customer>", this. render ( model ) )
assertTrue ( "The decrypted message was " + new String ( dec ) + " and must be " + "equal to " + TEST_XML_STRING, Arrays. equals ( dec, original ) )
assertThat ( ChronoHistory. from ( history. getVariant ( ) ), is ( history ) )
assertEquals ( "Wrong number of roof surfaces has been detected", 1, nDetect )
assertId ( result. getId ( ), "iterationId" )
Truth. assertThat ( actual )
assertEquals ( testStyle, classUnderTest. getFunctionStyle ( ) )
uit. assertValid ( STR_VAL, STR_VAL )
assertThat ( allResourcePermissions. isEmpty ( ), is ( true ) )
assertEquals ( DummyDrawHandler. drawCircleToString ( 50, 100, 10, ColorOwn. forString ( "pink", Transparency. FOREGROUND ), ColorOwn. forString ( "black", Transparency. BACKGROUND ), LineType. SOLID, 25.0 ), drawHandler. getLastDrawCall ( ) )
assertFalse ( result. passedValidation ( ) )
assertThat ( actual, sameJSONAs ( expected ) )
assertFalse ( hive2DatabaseMeta. isDriverVersion ( 5, 5 ) )
assertThat ( isValid, is ( true ) )
assertEquals ( responseList, response )
assertEquals ( action. action, RetryPolicy. RetryAction. RetryDecision. RetryDecision. FAIL )
assertFalse ( RGW_ADMIN. userExists ( userId ) )
assertEquals ( "Wrong property value", "foo", params2. get ( "foo" ) )
assertEquals ( "Base for INET is wrong", "192.168.0.13", parsed )
Assert. assertEquals ( 2, result. length ( ) )
assertEquals ( "OnThisDay", output. get ( id ) )
assertTrue ( supportsPlacement )
assertFalse ( CacheUtils. isSymbolicLink ( "/test_file.txt", cache ) )
assertTrue ( ( ( BooleanType ) respParam. getParameter ( ). get ( 0 ). getValue ( ) ). booleanValue ( ) )
assertEquals ( cube1, testSubject. getCube ( Side. LEFT_OUT ) )
Assert. assertEquals ( 140 + 4 * winScore - loosePenalty, scores. getScore ( ) )
Assert. assertEquals ( present, listener )
assertEquals ( 25, count )
assertEquals ( 1, dao. create ( foo ) )
Assert. assertNotNull ( savedTenant2 )
assertThat ( control. matches ( "/clients/dog.id" ), is ( true ) )
Assert. fail ( "Expected to fail, but didn't" )
assertEquals ( "http://tempuri.org", w. getFundingGroup ( ). get ( 0 ). getFundingSummary ( ). get ( 0 ). getUrl ( ). getValue ( ) )
Assert. assertNull ( cred )
assertEquals ( "{\\"text\\":null}", toJSON ( title ) )
assertThat ( shortForm, is ( equalTo ( "root" ) ) )
assertEquals ( 0, services. size ( ) )
assertTrue ( instance. hasNext ( ) )
assertResponseContainsExpectedPayload ( response, respPayload )
assertThat ( provider. getSubject ( axiom ), is ( iriOptional ) )
assertEquals ( svalues, svalues1 )
Assert. assertEquals ( "http://www.google.com/browse/COOKING", actualValue )
assertEquals ( "Should have not altered first", first, patchedVer )
Assert. assertEquals ( 0xa8b33558e0l, hash )
assertEquals ( 0, map. size ( ) )
assertEquals ( query, result )
Assert. assertEquals ( "", query. getCommandText ( ) )
assertTrue ( "Short Ref too short", constraintViolations. size ( ) == 1 )
assertEquals ( Arrays. asList ( "34627985F47" ), production. getJobIds ( ) )
assertEquals ( vars ( "a", "b", "c" ), getNonPseudoVars ( csv, true ) )
assertEquals ( 0, result )
assertEquals ( 3, proc. getProjectedSymbols ( ). size ( ) )
assertCount ( 2L, "one >=?", value ( 2 ) )
assertEquals ( 2, query ( ). from ( employee ). join ( employee. bookVersion, bookVersion ). where ( employee. bookMark. name. eq ( bookMark. name ) ). fetchCount ( ) )
assertEquals ( "3", array [ pivot ] )
assertSameEnumeration ( "PostOrderModel", coreEnum, xEnum )
assertThat ( underTest. isAccessAllowed ( httpServletRequest ), is ( false ) )
assertFalse ( ( boolean ) testedMethod. invoke ( tasksManagerImpl, STARTING_BYTE_OF_3_BYTE_CHAR ) )
assertNull ( principal )
assertArrayEquals ( new String [ ] { "a.b.c", "a.d" }, helper. getExpectedUserAuthenticatedFileObjects ( ) )
assertEquals ( mvj. get ( "BlockRef" ), "MTA NYCT_20120108EE_1988_0288_0013_000_000" )
assertEquals ( 3, res )
assertCard ( expectedCard, "http://magiccards.info/dgm/en/5.html", expectedCard. getRarity ( ). toDisplayName ( ), expectedCard. getName ( ) )
assertEquals ( expected, result. getAttributes ( ) )
assertTrue ( propSchema. getType ( ). equals ( "string" ) )
assertThat ( StubWatchFactory. getRequestParameters ( ). get ( 0 ), both ( hasEntry ( "resourceVersion", Integer. toString ( INITIAL_RESOURCE_VERSION ) ) ). and ( hasEntry ( "labelSelector", asList ( DOMAINUID_LABEL, CREATEDBYOPERATOR_LABEL ) ) ) )
assertEquals ( LocalDate. of ( 2009, Month. JANUARY, 1 ), fourthQuarter )
assertTrue ( file. exists ( ) )
assertEquals ( "new_end", vRoute. getEnd ( ). getLocation ( ). getId ( ) )
assertTrue ( testEntity. isNew ( ) )
assertEquals ( 15, tables. size ( ) )
assertEquals ( "Yagga Yagga", result )
Assert. assertTrue ( "The underlying digester algorithm should be right one", digester instanceof RightOneFileDigester )
assertThat ( check. isCompatible ( ), is ( true ) )
assertThat ( builder, hasToString ( "<script type=\\"text/javascript\\">/* <![CDATA[ */\\n" + "(function() {var s = document.createElement('script')," + "t = document.getElementsByTagName('script')[0];" + "s.type = 'text/javascript';" + "s.async = true;" + "s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';" + "t.parentNode.insertBefore(s, t);})();\\n" + "/* ]]> */</script>" ) )
assertEquals ( expResult, result )
assertions. contains ( value, index )
assertArrayEquals ( ArrayConverter. hexStringToByteArray ( "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ), result )
assertEquals ( expResult, result )
assertEquals ( 1, session. from ( $ ( noteVar ) ). where ( where ). list ( $ ( noteVar ) ). size ( ) )
assertEquals ( "user@example.com", dss. parseEmail ( ) )
Assert. assertEquals ( data [ i ] * i, m. getEntry ( i, i ), 0d )
assertThat ( handler, is ( PersonValidator. class ) )
assertCheckScopesFailForOtherScopes ( ScopePathType. READ_PUBLIC, ScopePathType. FUNDING_READ_LIMITED )
Assert. assertEquals ( "g1.js", groupNames. get ( "g1.js" ) )
assertEquals ( 15, result. intValue ( ) )
assertThat ( conf, instanceOf ( ClearCacheConfirmation. class ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertThat ( isDepartmentValid, is ( Boolean. FALSE ) )
Assert. assertFalse ( HasTopLevelNegationVisitor. hasTopLevelNegation ( script ) )
Assert. assertEquals ( CORSFilter. CORSRequestType. NOT_CORS, requestType )
assertNotNull ( Revision. reader ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertEquals ( 3, list. size ( ) )
assertFalse ( matchResult )
assertRecurrencesCorrect ( "MINUTE", 3, process ( trigger ). getMinuteRecurrences ( ) )
assertFalse ( validator. validate ( EntityNames. STUDENT, studentIds ). equals ( studentIds ) )
assertEquals ( "<html><body>{{ &lt;foo--> }}</body>     </html>", engine. compileMustache ( "minify_html_preserve_pattern", template ). render ( null ) )
assertEquals ( expected, actual )
Assert. assertEquals ( 0, analyser. getLoadAtBeginning ( route ). get ( 0 ) )
assertEquals ( expectedScript, observedScript )
assertionHelper. assertIrodsFileOrCollectionDoesNotExist ( targetIrodsCollection + '/' + testFileName, irodsFileSystem. getIRODSAccessObjectFactory ( ), irodsAccount )
assertThat ( result. endsWith ( expectedString ), is ( true ) )
Assert. assertNull ( response )
assertTrue ( className. equalsIgnoreCase ( Integer. class. getSimpleName ( ) ) )
assertEquals ( "gcp", kc. getAccessToken ( ) )
assertEquals ( "application/json;odata.id=/Photos(11)", request. getResponseHeaders ( ). get ( "References" ). get ( 0 ) )
Assert. assertEquals ( expected, resultString )
Assert. assertEquals ( avroMessage, output )
assertThat ( sequencerContext. getNamespaceRegistry ( ), is ( context. getValueFactories ( ). getNamespaceRegistry ( ) ) )
assertEquals ( 10L, target. get ( ). longValue ( ) )
assertTrue ( Files. exists ( uploadsDirectory + File. separator + "RequestEntityTooLarge" ) )
assertEquals ( now, result )
assertEquals ( random, decrypted )
Assert. assertEquals ( 0, ( ( List < User > ) ret. getValue ( ) ). size ( ) )
assertEquals ( object. doubles, result. doubles )
assertEquals ( responsesRemaining, collector. getResponsesRemaining ( ) )
assertTrue ( converter. canRead ( clazz, mediaType ) )
assertSizes ( validator, char [ ]. class )
Assert. assertTrue ( message, assertion )
assertEquals ( singleValue, stats. getStatisticValue ( Statistic. VARIANCE ) )
Assert. assertEquals ( state. IDLE, state )
assertEquals ( "/home/work", mConfiguration. get ( PropertyKey. WORK_DIR ) )
Assert. fail ( "UnknownComponentException should have been thrown" )
Assert. assertTrue ( h. match ( cookie, origin ) )
assertNotNull ( found )
assertTrue ( view. isMutable ( ) )
Assert. assertFalse ( result )
Assert. assertEquals ( 0, result. getEntities ( ). size ( ) )
Assert. assertEquals ( 0, _driver. getRunningJobs ( queueName ). size ( ) )
assertEquals ( cos ( E * sqrt ( 2 ) ) * E, e. evaluate ( ), 0d )
Assert. assertFalse ( ModuleUtil. matchRequiredVersions ( openmrsVersion, requiredOpenmrsVersion ) )
assertEquals ( "ls", cmd. getClass ( ). getName ( ) )
assertGenerators ( result, generator. getClass ( ) )
Assert. assertEquals ( "Invalid date", date, newDate )
Assert. assertEquals ( simple. getName ( ), name )
assertNull ( m )
assertGridGeometryEquals ( grid, extent, true )
assertEquals ( 2, l. size ( ) )
Assert. assertNull ( retireable. getRetireReason ( ) )
assertThat ( module. getPackages ( ), is ( equalTo ( Collections. EMPTY_LIST ) ) )
assertSeen ( results, s0 )
assertTrue ( repository. getFeatureState ( DummyFeature. TEST ). isEnabled ( ) )
assertTrue ( response. contains ( "gen-test-1" ) )
Assert. assertTrue ( errMsg, appId. endsWith ( expectedAppId ) )
assertExtendedEquals ( expected, dd, STRICT )
assertFalse ( cmd. onCommand ( sender, new CommandParser ( plugin, args, 1 ) ) )
assertEquals ( 0.0, result, TOL )
assertSplit ( result, stringToSplit )
assertEquals ( Resolution. KEEP_EXISTING, subject. getResolution ( ). get ( ) )
assertSame ( url2, url1 )
Assert. assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar", "test-deps-c-1.0.0.jar", file. getName ( ) )
assertEquals ( "Response users should be equal to the mocked users", mockedUsers, responseUsers )
Assert. assertEquals ( LogLevel. INFO, testedStore. readProperty ( "logX" ). getValue ( ) )
assertEquals ( expectedData, filteredData )
assertFalse ( impl. isLate ( ) )
assertNotNull ( Country. reader ( ). read ( ) )
assertEquals ( 401, response. getStatus ( ) )
assertThrows ( UnsupportedOperationException. class, ( ) -> transformersSubRegistration. convert ( original ) )
assertSame ( e, result )
assertEquals ( test, output. readString ( ) )
assertEquals ( "Wrong date", DATE_PATTERN, conf. getDate ( DataConfiguration. DATE_FORMAT_KEY ) )
assertEquals ( expected, this. fsParser. extractFlowspec ( entry. build ( ) ) )
assertEquals ( "<abc_def id=\\"1\\">Hello</abc_def> <abc-def>There</abc-def>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertEquals ( "testCreatesFooClassWithConstructor", generatedName )
assertTrue ( view. showPaging ( ) )
assertEquals ( "$foo", s )
assertEquals ( expResult, result )
Assert. assertEquals ( "DBConfig{dbName='path', enable=true}", o1. toString ( ) )
Assert. assertEquals ( "(aa_range (aa_point_location (aa_char Cys) Ter 125) _ (aa_point_location (aa_char Ala) Ter 123))", loc. toStringTree ( parser ) )
assertEquals ( "bc238e6d4e9f81e29dfee4d2b1", room. getName ( ) )
assertThat ( ddlParsers. getParsers ( ), is ( myParsers ) )
assertThat ( subject. getAbuseContact ( autnum ). isPresent ( ), is ( false ) )
assertThat ( result. statusCode, is ( Response. OK ) )
assertSetDirty ( )
Assert. fail ( "Error retrieving customer workflows caused by: " + e. getMessage ( ) )
assertThat ( result, equalTo ( true ) )
assertEquals ( " Echo Message = vasu", response )
assertNotNull ( result )
assertTrue ( "Aggregate sasl server factory should be created", ops. exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertEquals ( 2, capturedEvent. getValue ( ). getRemovedItemsCount ( ) )
assertEquals ( CONF_DIR, appConfig. getConfDirectory ( ) )
assertEquals ( 6f, maxProductOfThree. shrink ( array ), 0f )
Assert. assertEquals ( UnivariatePolynomial. create ( Long. MAX_VALUE, Long. MAX_VALUE - 1, Long. MAX_VALUE - 2, Long. MAX_VALUE - 3 ), f. factor ( poly ) )
assertEquals ( responseApdu. getData ( ) [ 0 ], 0x84 )
assertThat ( TimestampInterval. between ( t1, t2 ). toZonalTimestamp ( systz ), is ( MomentInterval. between ( m1, m2 ) ) )
assertNotNull ( entityAsInserted )
assertEquals ( "one", firstElement )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
assertNull ( ic. getPropertyId ( object1 ) )
assertThat ( noOfSolutions, is ( 16 ) )
runner. assertAllFlowFilesTransferred ( PublishKafkaRecord_0_10. REL_FAILURE, 3 )
assertEquals ( results, lcsMatch )
assertNotNull ( result )
assertEquals ( 10, ref. atomicGet ( ) )
Assert. assertTrue ( element instanceof ExclusiveElement )
assertTrue ( retDocumentProjects. collect ( ). equals ( expectedDocumentProjects ) )
assertEquals ( "The phrase should be ordered asc", Integer. valueOf ( 1000 ), sortedTestFields. get ( 0 ) )
assertEquals ( "ceiling('1.2')", parseExpression ( "abc" ). toString ( ) )
Assert. fail ( "Expected an exception" )
assertEquals ( expected, actual )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( 1, conceptSearchResultList. size ( ) )
assertEquals ( "foo = '2011-03-01 12:34:0000'", ret )
throwables. assertHasRootCauseMessage ( INFO, error, "expected message" )
assertThat ( actual, sameJsonAs ( expected ) )
assertEquals ( result, expectedResult )
assertEquals ( "test.war", normalizeArchiveName )
assertEquals ( FOUR_LINES_REMOVED_SCORE + GLASS_OVERFLOWN_PENALTY, playerScores. getScore ( ) )
assertSame ( stringMessageBodyReader, applicationProviders. getMessageBodyReader ( String. class, null, null, TEXT_PLAIN_TYPE ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}}", s. getSchema ( SimpleList. class ) )
assertTrue ( bugs. toString ( ), bugs. isEmpty ( ) )
assertEquals ( o1, o2 )
assertEquals ( seed, new RandomGenerator ( testSeed ). getSeed ( ) )
assertThat ( target. getMap ( ), is ( expected ) )
assertEquals ( cfProvider. getConfiguredProperties ( ), ImmutableMap. of ( "connectionNameList", HOSTNAME + "/" + PORT ) )
assertTrue ( instance. runCommand ( ) )
assertEquals ( "The sub resource locator should be ordered by the uri pattern", Maps. < UriPattern, SubResourceLocatorDescriptor > newArrayList ( ), resourceLocators. keySet ( ) )
assertEqualHash ( byteBuffer, murmur3a )
assertThat ( signature, hasItem ( individualProperty ) )
assertNotNull ( result )
assertEquals ( innocent, back )
context. assertIsSatisfied ( )
assertEquals ( "Wrong value", ( byte ) 0xef, u. s8. get ( ) )
assertEquals ( 0xffffffffffffffffL, result )
mojos. assertBuildOutputs ( new File ( basedir, "target" ), "classes/proc/Source.class", "generated-sources/annotations/proc/GeneratedSource.java", "classes/proc/GeneratedSource.class", "classes/proc/GeneratedSource.class" )
assertEquals ( property, "false" )
assertThat ( data. getOriginal ( ), is ( "{\\"str\\":\\"hoge\\",\\"nest\\":[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]}" ) )
assertEquals ( "parent", project2. getCascadingProject ( ). getName ( ) )
assertTrue ( exp instanceof ASTCurrentTimestamp )
assertThat ( logRecords, containsInfo ( CREATING_CRD ) )
Assert. assertTrue ( "full table check failed", testResult. equals ( true ) )
assertEquals ( 0, result. getVoxel ( 5, 15, 5 ),.01 )
assertThat ( getterMethod. getReturnType ( ). getName ( ), is ( "java.lang.Integer" ) )
TestsIOUtils. assertEqualSets ( path, Paths. get ( tempDir, "doc" ), "data" )
assertThat ( entryCaptor. getValue ( ). getStackTraceWriter ( ), notNullValue ( ) )
assertPlanMatches ( access )
assertEquals ( "5", fake. operation ( 5 ) )
Assert. assertEquals ( configuration. getLong ( KAFKA_TEST_MESSAGE_COUNT_KEY ), KafkaConsumerUtils. INSTANCE. getNumRead ( ) )
assertSingleElementCollection ( testCommandClientId, executeIds )
assertThat ( userCount, is ( 1 ) )
assertNull ( task )
assertNull ( classUnderTest. getTableFrameXmlBean ( ) )
assertEquals ( "1.0.0-alpha", v2. toString ( ) )
Assert. assertTrue ( hasIndexHashKeyEqualCondition )
Assert. assertTrue ( hedgeErrorRMS < 1E-2 )
assertEquals ( 2, list. size ( ) )
context. assertIsSatisfied ( )
assertNotEquals ( table1, table2 )
assertEquals ( AnnotationConstants. DEFAULT_CACHE_NAME, data. getCacheName ( ) )
assertThat ( msg. getValue ( ), containsString ( "Exit value: " + processExecutor. exitValue ( ) ) )
assertEquals ( 3600, timeBucket )
assertEquals ( "Fusco", person. getLastName ( ) )
assertEquals ( "r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw. toString ( ) )
Assert. assertEquals ( "example (null (null (null):127.0.0.1 - null)", ex ), "example (null (null):127.0.0.1 - null)" )
assertNull ( value )
Assert. assertTrue ( age. getCount ( ) == 5 )
Assert. assertEquals ( new Complex ( 1.0, 1.0 ), z. reciprocal ( ) )
assertEquals ( expectedQuery, actualQuery )
Assert. assertEquals ( 18, undefRes. size ( ) )
assertEquals ( ValidationResult. Result. OK, validationResult. getStatus ( ) )
assertEquals ( "Hello", cfg. getProperty ( "salutation.text.nonexistent", "Hello" ) )
assertEquals ( expected, generated )
assertMessages ( "write", 1, "write_bytes_offset" )
assertTrue ( "value was " + Arrays. toString ( target ), Arrays. equals ( expected, target ) )
assertEquals ( "getRaftState", RaftState. State. Unknown, snapshots. get ( 0 ). getState ( ) )
assertEquals ( "127.0.0.1:11210", strategy. hash ( infoMock ) )
assertEquals ( now. getMillis ( ), gelfMessage. getTimestamp ( ) )
assertEquals ( "mycmd a\\\\b", s )
assertThat ( result, is ( sameInstance ( cacheFileMetadataRequest ) ) )
assertEquals ( list. get ( 0 ). getName ( ), "testUpdate" )
assertNotNull ( result )
assertEquals ( NOWHERE, dest. getAddress ( ) )
assertEquals ( 123, result )
Assert. assertFalse ( errors. hasErrors ( ) )
assertTrue ( "incorrect value", aNumber. toString ( ). equals ( result ) )
assertThat ( isValid, is ( true ) )
assertEquals ( packet, p )
assertTrue ( false )
assertNotNull ( constraints )
assertEquals ( b. build ( ), doc )
assertThat ( output. get ( ), hasContent ( "first", "second" ) )
assertEquals ( "dog-chapter", md. group ( 1 ) )
assertSame ( e1, e2 )
assertEquals ( Boolean. TRUE, methodOutcome. getCreated ( ) )
Assert. assertEquals ( "", json, notification. toJSON ( ) )
assertThat ( testValue. allFields ( ), containsInAnyOrder ( TestValueType. NAME, TestValueType. AGE ) )
assertThat ( jcrWorkspaces, is ( graphWorkspaces ) )
assertFound ( Files. newDirectoryStream ( dir ), child )
assertEquals ( "Hello ^^there", ResponseBodyInterpolator. interpolate ( "Hello ^^there", req ) )
assertEquals ( "Method #toString is wrong", "BooleanMapper{field=field, indexed=false, sorted=true, validated=true, column=field}", mapper. toString ( ) )
assertEquals ( euclideanAssertion, result )
Assert. assertEquals ( "EXECUTE ERROR:", sqltrue, sqlnew )
Assert. assertEquals ( "http://example.com/s", instanceXml. getStringValue ( ) )
assertEquals ( 0, start. getSize ( ). get ( 0 ) )
assertNotNull ( dao )
assertPowerToughness ( playerA, "Swamp", 3, 4 )
assertOut ( "a.setAttribute(z, 'foo')" )
assertEquals ( expected, new ResolverUtil ( ). extractPath ( url ) )
assertTrue ( main. isVisible ( ) )
assertNotNull ( manager. x )
assertEquals ( countryName, "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country-United%20Kingdom>" )
assertEquals ( expected, bos. toString ( ) )
assertEquals ( connMock, dbcManagerSpy. getPooledConnection ( DBType. NONE, DB_NAME, DB_NAME2, ENCRYPTED_PASS ) )
Assert. assertEquals ( result. toStringWithoutId ( ), expectedResult )
assertThat ( gtx. get ( key, key ), is ( notNullValue ( ) ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( - 6149626840000L, m. getFirstMillisecond ( c ) )
assertEquals ( 1, tasks. size ( ) )
assertEquals ( converter. getClass ( ), converterDescription. getImplementationClass ( ) )
assertThat ( output, CoreMatchers. containsString ( "Template deleted:" ) )
assertEquals ( "user123@codenvy.com", profile. getUserId ( ) )
Assert. assertSame ( this. patient, this. mocker. getComponentUnderTest ( ). get ( this. patientReference ) )
assertEquals ( true, code. toString ( ). contains ( "d<-3\\n" ) )
assertNotNull ( result )
assertThat ( deserialize ( serialized ), is ( equalTo ( instance ) ) )
assertThat ( rendered, is ( test [ 1 ] ) )
assertThat ( target. matchExactly ( ( FlowAction ) action ), is ( true ) )
Assert. assertNotNull ( ds. getStringProperty ( ) )
assertBreadcrumbsAreEqual ( actualList, expectedList )
Assert. assertTrue ( l. size ( ) >= 10 )
assertThatSql ( query, is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 LEFT OUTER JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertEquals ( 8, result. size ( ) )
assertThat ( InvertListNumber. index ( actualCoords, sizes, invert ), equalTo ( index ) )
assertEquals ( "http://foo/bar", got. toString ( ) )
assertTrue ( reference. get ( ). isAlive ( ) )
assertMatrixEquals ( expectedTableau, tableau. getData ( ) )
propertyChangeListenerTester. assertTimesOfPropertyChanged ( 1 )
assertJsonErrorForMissingAttributeRequired ( data )
assertEquals ( i, blc. size ( ) )
propertyChangeListenerTester. assertTimesOfPropertyChanged ( 1 )
assertTrue ( responseHandler. poll ( streamId, 10, TimeUnit. SECONDS ) )
assertThat ( allRootDescendants ( ), everyItem ( hasType ( Type. SCHEDULING_POINT ) ) )
assertThat ( extractMonitorables ( histogramAdapter ). get ( MEDIAN ). get ( ), Matchers. < Object > is ( newMedian ) )
assertEquals ( unit1, unit2 )
Assert. assertEquals ( "LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;", text )
Assert. assertFalse ( new JexlTreeEqualer ( or01, or02 ). equals ( or01 ) )
Assert. assertEquals ( clickMe. getText ( ), buttonText )
assertTrue ( areBonded ( atom1, atom2 ) )
assertEquals ( "%1-%2 something %1-%3", normalizer. normalize ( source ) )
Assert. assertEquals ( expected, pass. concretizeCell ( term ) )
assertEquals ( String. valueOf ( me. getCode ( ) ), me. getNick ( ) )
assertEquals ( field. getValue ( ), entityField. get ( IndexingUtils. FIELD_BOOLEAN ) )
assertSame ( pool, house. getSwimmingPool ( ) )
Assert. assertNull ( result )
assertEquals ( sha1sum, instance. getSha1sum ( ) )
assertContentChanges ( changes )
assertEquals ( p1, p2 )
assertEquals ( 2, objects. size ( ) )
this. tester. assertContains ( "<p class=\\"empty\\">hello!</p>" )
assertTrue ( this. mocker. getComponentUnderTest ( ). authenticatedAsSystem ( ) )
Assert. assertEquals ( "", getLine ( PATH_LINE, canonicalRequest ) )
assertThat ( result, is ( true ) )
assertThat ( model. contains ( parent, child ), equalTo ( true ) )
Assert. fail ( "Expected SyntaxException" )
assertEquals ( 0, handlers. length )
Assert. fail ( "This sequencer run should not exist, should not have lanes, and should show a 404 Not Found" )
assertTrue ( mappedUrl. startsWith ( expectedPath ) )
assertEquals ( 3, store. count ( ) )
assertEquals ( "test1-fastagi", defaultAgiServer. getPort ( ) )
assertThat ( body, not ( containsString ( "ScientificNotation of number" ) ) )
assertTrue ( videos. contains ( video ) )
assertTrue ( v. equals ( v ) )
assertEquals ( "No such service test", result )
assertEquals ( 4, entries. size ( ) )
assertEquals ( Status. DOWN, impl. getStatus ( ) )
assertEquals ( documento, documentoCreado )
assertThat ( result, is ( "Replicate Component Component" ) )
assertArrayEquals ( refar, d. getResult ( ) )
assertEquals ( 10, getCache ( provider, "foo" ). capacity )
assertEquals ( 2, result. getSize ( ) )
assertEquals ( 2, e1. getObjectContext ( ). performQuery ( query ). size ( ) )
assertEquals ( "testing", lookedUpRelationship. getName ( ) )
assertFalse ( or. isDefined ( ) )
assertThat ( iterable, is ( emptyIterable ( ) ) )
assertThat ( ( Integer ) dummyExpression. evalChild ( 0, returnNode, super. variables, super. functions, super. expressions ), is ( 4 ) )
this. assertIndexOkResponseJsonStructure ( 0, 10, response )
assertEquals ( s. toString ( ), expecting )
assertEquals ( UnresolvedAddressException. class, thrown. getClass ( ) )
assertTrue ( stopAtFirstIneligibleField ( field ). isEmpty ( ) )
assertEquals ( HttpStatus. SC_NOT_MODIFIED, result. getCode ( ) )
assertEquals ( CSV_FILE, writer. toString ( ) )
assertEquals ( true, spyAppConfigProperties. isHibernateManaged ( ) )
assertEquals ( Status. OK. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( "There should be no operations", 0, accountOperations. size ( ) )
assertModelForInjectionIsOriginalModel ( )
assertThat ( jobDetail. getInvocationId ( ), equalTo ( "testValue" ) )
assertNotNull ( domain )
assertNull ( extensionMapping )
assertTrue ( serviceNode. exists ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( ToolRunner. run ( conf, file ) )
assertEquals ( 1.0e9, listLocationEvent. size ( ), 0 )
assertThat ( result. httpRequestType, equalTo ( "GET" ) )
Assert. assertNull ( m )
Assert. assertEquals ( expectedResponse, proxy. sayHello ( message ) )
assertNotNull ( om. findProperty ( "keyspace" ) )
assertThat ( conv, is ( "2013-11-15T21:29:08.123-05:00" ) )
Assert. assertEquals ( "select * from (  " + "where \\"doors\\" in ( \\"2.0\\", \\"4.0\\"), " + "existsIn(  " + "   {\\"category\\": \\"GARAGE\\", \\"name\\": \\"Mario\\", \\"price\\": \\"8.0\\"}, " + "   {\\"category\\": \\"GARAGE\\", \\"name\\": \\"Turkey\\", \\"price\\": \\"8.0\\"}, " + "   {\\"category\\": \\"MANUFACTURER\\", \\"name\\": \\"Turkey\\", \\"price\\": \\"8.0\\"}, " + "   {\\"category\\": \\"Garage\\", \\"name\\": \\"Turkey\\", \\"price\\": \\"8.0\\"}, " + "   {\\"category\\": \\"Garage\\", \\"name\\": \\"Turkey\\", \\"price\\": \\"1.0\\"}, " + "   {\\"category\\": \\
assertFalse ( filter. shouldDeliverNotification ( eventContext ) )
assertEquals ( expected, actual )
assertEquals ( "q w", result )
assertEquals ( "The viewport should've not have moved right", Vector2D. create ( maxXViewportPosition - 1, 64 ), viewportVector )
Assert. assertEquals ( "somethingmock", ret. getValue ( ) )
Assert. assertEquals ( Integer. class, clazz )
assertTrue ( "Expected protocol to be supported ", i. intValue ( ) == 5 )
assertThat ( result, is ( false ) )
assertEquals ( "input", action. execute ( ) )
assertTrue ( "timestamp changed", first!= second )
assertFalse ( result )
assertSame ( expected, actual )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd" ). format ( dt ), new SimpleDateFormat ( "yyyy-MM-dd" ). format ( dueDate ) )
assertEquals ( JestClient. DEFAULT_CONNECT_TIMEOUT, connectTimeout )
assertEquals ( "MethodKey[0].debugString()", str )
arrays. assertContainsOnly ( description, actual, null )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 0, warnings. size ( ) )
assertEquals ( ValidationResult. OK. getStatus ( ), validationResult. getStatus ( ) )
Assert. assertThat ( capturedForward, Matchers. contains ( new CapturedProcessorContext. CapturedForward ( topic, TEST_QUERY, pattern ) ) )
context. assertIsSatisfied ( )
assertTrue ( wsnSession. getCloseFuture ( ). isClosed ( ) )
assertTrue ( observer. accept ( path ) )
assertEquals ( result. build ( ). find ( ArrayElement. class, "values" ). get ( 0 ). getEntries ( ), myTestInstance. distinctAsync ( builder ). get ( ). toList ( ) )
assertEquals ( "/sendError", view )
assertTrue ( "Cache file does not exist", cacheFile. exists ( ) )
assertThat ( domain. getExportedNaps ( ), is ( empty ( ) ) )
assertEquals ( "b:alt 2 a:alt 1\\n", found )
assertEquals ( "Organization/AAA", p. getManagingOrganization ( ). getReference ( ) )
Truth. assertThat ( callable. call ( 1 ) )
assertEquals ( 4, NDArrayMath. toffset ( arr, slice ) )
assertEquals ( "http://foo/Patient?_format=json&_format=json", capt. getValue ( ). getURI ( ). toString ( ) )
Assert. assertEquals ( "{\\"hello\\":\\"world\\"}", doc. jsonString ( ) )
Assert. assertEquals ( "GET", argument1. getValue ( ). getMethod ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import org.kissmda.AException;\\n" + "import org.kissmda.BException;\\n" + "import org.kissmda.AException;\\n" + "import org.kissmda.BException;\\n", cu. toString ( ). trim ( ) )
assertFalse ( v. isReturnToDepot ( ) )
assertEquals ( expected, cls )
assertEquals ( "3.5.13", verison )
Assert. assertEquals ( "did not properly compute new file length", secondLength, destFile. length ( ) )
assertTrue ( tuple instanceof StaticBinding )
assertEquals ( "TEXT", p2. getCode ( ). getText ( ) )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), hasEnvVar ( "STARTUP_MODE", ADMIN_STATE ) )
Assert. assertEquals ( "Unknown destination queue", MicroPipelineValidationResult. OK, new MicroPipelineValidator ( ). validateComponent ( cfg, queues, components ) )
assertThat ( Asn1DerDecoder. readSubjectPublicKeyAlgorithm ( data ), is ( "DSA" ) )
assertThat ( rows. getRowCount ( ), is ( 100 ) )
assertLogEvent ( logEvent )
assertTrue ( layout. getProperties ( ). isEmpty ( ) )
assertThat ( value, is ( equalTo ( 1024L ) ) )
assertEquals ( extractedYAML, expectedYAML )
Assert. assertTrue (! result. isSetDescription ( ) &&! result. isSetName ( ) &&! result. isSetEncodingType ( ) &&! result. isSetMetadata ( ) )
assertEquals ( 1, listener. updatedInjectedFilters. size ( ) )
assertNotNull ( constraints. getExpiryTime ( ) )
Assert. assertThat ( toJson, Matchers. equalTo ( "\\"\\\\\\"data2.0\\\\\\"\\"" ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( query, query1 ) )
Assert. assertEquals ( Explain. ExplainType. SPARK, o. explainType )
assertZippelGCD ( gcd, a, b )
assertThat ( comboBox. getItemDataProvider ( ), is ( notNullValue ( ) ) )
assertEquals ( origDatagrams [ testIdx + 1 ], d )
assertThat ( attributeValues, is ( desc ) )
assertArrayEquals ( new BigDecimal [ ] { new BigDecimal ( 1 ), new BigDecimal ( 2.23 ), new BigDecimal ( 3 ) }, params. valuesAsBigDecimalArray ( "a" ) )
assertFalse ( rs2. next ( ) )
assertThat ( actual, equalTo ( expected ) )
assertEquals ( TestUtil. HTTPS_TEST_PROXY, result. get ( 0 ) )
assertEquals ( "a.b.*PI", expression. evaluate ( ). toString ( ) )
assertThat ( extractor. extractDataModelCondition ( sheet ), is ( ( Object ) EnumSet. of ( DataModelCondition. IGNORE_ABSENT ) ) )
Assert. assertEquals ( false, rdbStore. getRdbObject ( "fakeRdb" ). exists ( ) )
assertOut ( "var /** @type {*} */ a = function() {\\n}" )
assertEquals ( "short field not aligned", MAGIC, testlib. struct_align_Signed16 ( s ) )
assertSame ( test, base )
assertEquals ( "foo", command. getName ( ) )
assertEquals ( version. toString ( ), "1.0" )
assertEquals ( result, sameResult )
assertEquals ( "https", scheme )
assertNotNull ( repository )
assertEquals ( ComplexResult. SUCCESS, result. getResult ( ) )
Assert. assertEquals ( 1, accounts. size ( ) )
assertArrayEquals ( EXPECTED_COLUMNS_EXPECTED, UtilsForTesting. tableToArrayOfRows ( table ) )
assertThat ( file. exists ( ), is ( true ) )
Assert. assertEquals ( expectedKeys, actualKeys )
Assert. assertEquals ( 1, rcs. size ( ) )
assertEquals ( "true", getLastRequestQuery ( ) )
assertNotNull ( victim. locate ( mockRequest, mockResponse, "/index.html" ) )
assertThat ( doc. getKey ( ), is ( notNullValue ( ) ) )
assertNotEquals ( one, "TEST1" )
Assert. assertEquals ( "composites", type. getName ( ) )
Assert. assertEquals ( 2, analyser. getLoadRightAfterActivity ( route. getActivities ( ). get ( 2 ), route ). get ( 0 ) )
assertTrue ( validator. validate ( "student", ids ). containsAll ( ids ) )
assertEquals ( 1, listeners. size ( ) )
assertEquals ( "SimpleSens ('T')", retour. getValueSensDirect ( ) )
Assert. assertEquals ( matrixCplx_EXPECTED, matrixCplx_ACTUAL )
assertEquals ( action. getShowWeekender ( ), true )
assertResultSet ( res )
Assert. assertFalse ( impl. canCachedResponseBeUsed ( host, request, entry, now ) )
assertThat ( backToJson, sameJSONAs ( inputJson ) )
assertEquals ( 1, violations. size ( ) )
assertEquals ( expected, cassandraRowMapper. map ( resultSet ). next ( ) )
assertTrue ( "exact match on suite should run", exactFilter. shouldRun ( suite ) )
assertTrue ( handler. supportsView ( ComplexObsHandler. RAW_VIEW ) )
Assert. assertTrue ( updatedRows > 0 )
assertFalse ( result. isResult ( ) )
context. assertSentrySemanticException ( statement, "CREATE database " + DB1, semanticException )
assertEquals ( "Should have same label after updating", saved. getLabel ( ), updated. getLabel ( ) )
Assert. assertEquals ( "Incorrect URL", TEST_URL, popup. getUrl ( ) )
assertImgEquals ( gaussOut, bilateralOut )
assertEquals ( readConcern, parsedReadConcern )
assertThat ( match, is ( BestTypeMatch. NOT_SUPPORTED ) )
assertEquals ( String. class, collectionParameterType )
Assert. assertEquals ( id, dc. getClientID ( ) )
assertFalse ( "Previous message received a LOGON_UNREGISTERED", wrapper. getLastMessage ( ). equals ( "LOGON_UNREGISTERED" ) )
assertFalse ( downloader. isCached ( ) )
assertThat ( identifiedPrincipals, hasItems ( new UidPrincipal ( 1000 ), new GidPrincipal ( 1000, true ), new JwtSubPrincipal ( "EXAMPLE", sub ), new JwtJtiPrincipal ( "EXAMPLE", jti ) ) )
assertThat ( minimizedChanges, is ( empty ( ) ) )
assertTrue ( closed. await ( 2, SECONDS ) )
assertNull ( config. get ( "invalid-container" ) )
assertOut ( "var /** @type {XML} */ a = new XML(\\"<top attr1='cat'><child attr2='dog'><grandchild attr3='fish'>text</grandchild></child></top>\\")" )
assertHistoricProcessInstances ( )
assertEquals ( "failed to generate new object with parameterized type", "new ArrayList<String>()", s )
Assert. assertEquals ( 2, permutations. size ( ) )
Assert. assertEquals ( "Invalid input", "test", new SPQRNodeServer ( ). registerNode ( request, mockedNodeManager ) )
assertNull ( error. getStackTrace ( ) )
assertEquals ( expResult, result )
assertEquals ( "{\\"a\\":1}", n )
assertTrue ( message. contains ( "No topic specified" ) )
assertEquals ( "There should be two registrations/unregistrations of MavenResolver after release", 2, count )
assertEquals ( "Created incorrect LinkedHashMap", 0, hm2. size ( ) )
assertIsAborted ( tx )
assertEquals ( expectedRequest, actualRequest )
assertThat ( remoteFiles. size ( ), is ( 0 ) )
Assert. assertEquals ( "Incorrect number of buckets5 after", buckets5. size ( ), buckets5After. size ( ) )
AssertJUnit. assertTrue ( difference. isZero ( 1e-7 ) )
assertEquals ( JSON. serialize ( result ), "[ \\"value1\\", 12]" )
Assert. assertEquals ( 1, ( int ) reporter. getProblemCounters ( ). get ( Code. FIELD_NOW_STATIC. code ( ) ) )
Assert. assertEquals ( new Path ( "obj1.nested.objArr.*.nestedArrObjString1" ), fullPath )
assertEquals ( "code", macroReader. getGroovyMacroCode ( ) )
assertEquals ( "INSERT INTO user (user_id,user_name,pwd ) VALUES ( :userId,:userName,:pwd ) ", t. getInsertSql ( ) )
assertThat ( params, is ( empty ( ) ) )
assertEquals ( "DELETE", request. getMethod ( ) )
runner. assertAllFlowFilesTransferred ( ListenRELP. REL_FAILURE, 1 )
assertFalse ( userCanSubmitChangeRequest )
assertSideBarContainsClass ( "closed" )
Assert. assertEquals ( "This a <a href=\\"/\\">MyPage</a>", printer. toString ( ) )
Assert. assertFalse ( handler. deleteCgroup ( cgroupDir. getAbsolutePath ( ) ) )
assertEquals ( "helloworld", result )
assertTrue ( BatchUtil. evaluate ( batch ) )
assertEquals ( foo, objectAccessor. get ( ) )
assertThat ( result, hasSize ( 1 ) )
assertEquals ( "Method #toString is wrong", exp, mapper. toString ( ) )
context. assertIsSatisfied ( )
assertEquals ( "Expected 10 results!", 10, n )
assertThat ( destination. getBodyText ( ), is ( "Navigation Destination from : from the rule button" ) )
assertStatementCanBeDeparsedAs ( select, statementTgt )
assertEquals ( 1, listener. groups. size ( ) )
assertions. startsWith ( sequence )
rule. assertScenarioEnded ( )
assertThat ( result, is ( "" + QueryMessages. irtFilter ( ) + "\\n" + "auth:           PGPKEY-ASD\\n" + "source:         RIPE\\n" ) )
assertTrue ( readMap. equals ( refMap ) )
assertMockEndpointsSatisfied ( )
assertEquals ( job. getConfiguration ( ). get ( "hbase.client.timeout.ms" ), 5 * 60 * 1000 )
assertEquals ( "Getting a feed should return an empty result", HttpStatus. SC_OK, httpClient. executeMethod ( getFeedMethod ) )
assertEquals ( asList ( "忙\\\\n     | \\\\o\\\\no\\\\  | \\\\|a\\\\n | 酶\\\\n酶\\\\\\\\|" ), texts )
assertEquals ( FleetSize. INFINITE, vrp. getFleetSize ( ) )
assertTrue ( max < connPerRoute. getMaxPerRoute ( route ) )
assertFalse ( filter. getExpr ( ) instanceof ExprInfo )
assertEquals ( "prop like \\"abc\\"", e. toString ( ) )
Assert. assertEquals ( vector, new Vector ( 50, 50, 30 ) )
assertEquals ( false, out. firstElement ( ). get ( ) )
assertThat ( givenStories. getPaths ( ), equalTo ( Arrays. asList ( GIVEN_STORY_PATH1 ) ) )
assertThat ( mode, is ( equalTo ( ShellMode. from ( "--batch" ) ) ) )
assertThat ( testStatus, is ( expectedStatus ) )
assertTodo ( expected, actual )
assertTrue ( 0 == rmAdminCLI. run ( args ) )
Assert. assertFalse ( lanes. isEmpty ( ) )
assertEquals ( connection, Connection. SERIAL )
Assert. assertArrayEquals ( new String [ ] { "w=what" }, cg. getContext ( 0, TOKENS_1, new String [ 0 ] ) )
assertEquals ( "ok", list. get ( 0 ) )
assertFalse ( victim. isValid ( request, null ) )
assertTrue ( "Failed permission check was not logged", loggedFailedPermissionCheck ( AUDIT_LOG_FILE, USER ) )
assertThat ( messages. getMessages ( ). getAllMessages ( ), hasSize ( 0 ) )
assertFalse ( channelManager. isEphemeralNode ( user1 ) )
assertEquals ( "Don\\47t Panic!", stdOut. toString ( ) )
assertEquals ( bd, result )
assertEquals ( 5094000000L, q. getFirstMillisecond ( ) )
assertFileExists ( output )
Assert. assertEquals ( 9, providers. size ( ) )
assertEquals ( "mac", PlatformDetector. OS. getName ( ) )
assertThat ( stdoutObsWasRead. get ( ) )
assertFalse ( responseStr. equals ( this. validateUpgradeReply ( upgradeRequest ) ) )
assertThat ( owlOntologyChange, is ( ontologyChange ) )
assertTrue ( list. size ( ) == t )
Assert. assertNotNull ( addressResultsDto )
Assert. assertTrue ( resource. contains ( DummyPipelineAnnotationsProcessor. SERVICE_NAME ) )
assertNotNull ( column. getExpression ( ) )
Assert. assertEquals ( Lists. newArrayList ( 1, 2, 3, 4, 5 ), dropResult. toList ( ) )
assertEquals ( 0L, result )
Assert. assertEquals ( 0, trailers. get ( ). size ( ) )
assertThat ( userInfo, nullValue ( ) )
assertCanUpload ( s3Properties )
arrays. assertContainsOnlyOnce ( someInfo ( ), actual, emptyArray ( ) )
assertEquals ( RenameSettings. MachStrategy. EMBEDDED, view. getMachStrategy ( ) )
Assert. assertEquals ( "ref:g.43491", gPos. toString ( ) )
assertFalse ( sf. getCache ( ). containsEntity ( "com.hazelcast.hibernate.entity.DummyEntity", 0L ) )
assertThat ( instance. apply ( remotePr ), is ( false ) )
assertThat ( Timezone. of ( fallback ), is ( expected ) )
assertEquals ( argumentCaptor1. getValue ( ), argumentCaptor2. getValue ( ) )
assertThat ( change. isChangeFor ( axiomType ), is ( false ) )
assertNotNull ( Recording. fetcher ( "RTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertNotSame ( instruction1, instruction2 )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( optimizedQuery, query2 ) )
assertEquals ( "technician", mr. getTech ( ) )
assertTrue ( e1. equals ( e2 ) )
assertEquals ( Integer. MAX_VALUE, extractedId )
assertNull ( StatisticRefUtils. get ( userWrapper, "not-exist" ) )
assertEquals ( 100, snapshot. getValue ( ) )
assertActive ( player1, player2, player3, player4 )
get ( "/" ). then ( ). assertThat ( )
assertEquals ( "ICAg", res )
assertNull ( account. getBalance ( ) )
assertEquals ( expected, properties )
assertEquals ( 4, countNeoFriends )
assertEquals ( "fozzie", runtimeService. getVariable ( "emp", "id" ) )
assertFalse ( valid )
assertEquals ( expected, splitter. split ( str ) )
assertNotNull ( Metric. reader ( "CAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertTrue ( deviceMastership. isDeviceMastershipClosed ( ) )
assertThat ( actual, equalTo ( expected ) )
assertNull ( resourceEntity. getExternalLink ( ) )
assertThat ( FileUtils. readFileToString ( new File ( tempCopyFile ) ), CoreMatchers. is ( cp_file. asText ( ) ) )
assertEquals ( "First Column", grid. getCell ( 0, 2 ). getText ( ) )
assertTrue ( r. getValue ( ) == null )
assertEquals ( "one dollar", actual )
editor. assertHoverContains ( "@ConditionalOnMissingBean (types: example.Hello; SearchStrategy: all) did not find any beans", "@ConditionalOnMissingBean (types: example.Hello; SearchStrategy: all) did not find any beans" )
assertTrue ( null == obj )
Assert. assertEquals ( m, UnitTestUtils. serializeAndRecover ( m ) )
assertEcssEquals ( ".myDiv{" + "background-image:\\"url(#{resource['test?gradientHeight=100px&height=150px&gradientColor=Skin.myskin']})\\";}", convertFragment ( xcss ) )
assertEquals ( "1,2,3", getInorderForm ( tree ) )
assertThat ( "minCores", sut. getMinCores ( ), is ( equalTo ( minCores ) ) )
assertEquals ( "name", entityNameExtractor. extractEntityName ( persistentEntity ) )
assertEquals ( stringConstructor. hashCode ( ), resolvedConstructor. hashCode ( ) )
assertNotNull ( body )
assertTrue ( credentialsProvider instanceof AWSStaticCredentialsProvider )
assertEquals ( "testDesc", trace. getDescription ( ) )
Assert. assertTrue ( c1. isCompatible ( c2, mutations ) )
assertEquals ( 2, orders. size ( ) )
assertEquals ( "Close", close )
assertThat ( foundResources, empty ( ) )
assertTrue ( isEqual ( d1, d2 ) )
Assert. assertEquals ( "Value is incorrect", map, value )
Assert. assertEquals ( 4, analyser. getNumberOfPickupsAtBeginning ( route ), 0.01 )
assertErrorResponse ( response, ErrorResponse. ErrorType. INVALID_INPUT, "INVALID_ACCESS_TOKEN" )
assertNotNull ( result )
assertNotEquals ( otherHashCode, foreignableFieldHashCode )
Assert. assertNull ( localFileInstanceStorageManager. getBinlogInfo ( "test1" ) )
assertEquals ( "test", JsonbProvider. provider ( ). create ( ). build ( ). fromJson ( new StringReader ( json ), SimpleProperty. class ). value )
Assert. assertNotNull ( "null data object, was not found", dataObject )
assertNotNull ( cache. get ( "key" ) )
Assert. assertNotNull ( resultEntity )
assertEquals ( deserFlows, actualFlows )
assertTrue ( output. contains ( "Output should contain password mask" ) )
assertEquals ( "127.0.0.1", localAddressProvider. getLocalAddress ( ). toString ( ) )
assertEquals ( 2000, testVehicleSetTests. getYear ( ) )
assertEquals ( "http://example.com#frag", actual )
assertEquals ( "#anchor", link. getAttribute ( "href" ) )
assertNotNull ( result )
assertTrue ( SOME_FLOAT == result )
assertThat ( command. accept ( state ), is ( false ) )
assertEquals ( "Select with simple join", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
assertEquals ( extensionConverterManager, sm. getExtensionConverterProvider ( ) )
assertEquals ( "$metadata#ESCompMixPrimCollComp(PropertyInt16,PropertyString,PropertyMixedPrimCollComp,PropertyComp," + "CollPropertyString,PropertyMixedPrimCollComp,PropertyComp)", ContextURLBuilder. create ( contextURL ). toASCIIString ( ) )
Assert. assertEquals ( "88095550", endereco. getCep ( ) )
assertThat ( url, is ( EXPECTED_URL ) )
assertEquals ( ss, manager. getSubscriptionsStore ( ) )
Assert. assertTrue ( list. size ( ) == 13 )
assertTrue ( population. isEmpty ( ) )
Assert. fail ( "expected IllegalArgumentException" )
Assert. assertFalse ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
assertEqual ( "1", query. next ( ) )
assertSame ( fsU1, fsU2 )
assertNotNull ( newMember. getId ( ) )
assertThat ( connection, is ( mockConnection ) )
assertTrue ( userCanUpdateProject )
assertTrue ( d_domain. getIndications ( ). isEmpty ( ) )
assertNull ( cs. getValueReference ( ) )
Assert. assertTrue ( callbackRan )
assertEquals ( newVariable, variable )
e. put ( "/B?body=" + UonSerializer. DEFAULT. serialize ( DTOs. B. INSTANCE ), "a" ). json ( ). execute ( ). assertBody ( expected )
assertThat ( time. with ( PlainTime. COMPONENT. roundedToFullMinute ( ) ), is ( PlainTime. midnightAtEndOfDay ( ) ) )
assertThat ( githubPage, containsString ( "GitHub" ) )
assertEquals ( clone. getResultEntityName ( ), "testQueryWithParameters" )
assertEquals ( 6, actualCapacity )
assertThat ( auth. getTotpKey ( ), equalTo ( nullValue ( ) ) )
assertEquals ( "Count of customer", 0, res )
assertThat ( isValid, is ( true ) )
Assert. assertEquals ( "Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw", endereco. getDescricaoMunicipio ( ) )
assertEquals ( "one", event. getPayload ( ). getValue ( ) )
assertThat ( Template. parse ( markup ). render ( assigns ), is ( expected ) )
assertFalse ( service. start ( ) )
assertEquals ( HTTP_OK, request. response ( ). getStatus ( ) )
assertEquals ( 0, suggestions. size ( ) )
assertNotNull ( nre )
assertEquals ( mode, permission. getMode ( ) )
assertEquals ( obj, stringDeserializer. deserialize ( result ) )
assertNull ( FluentLogger. getLogger ( "test" ) )
assertThat ( secret, is ( "secret" ) )
assertEquals ( CollectionStringProducer. class, typeProducer. getClass ( ) )
assertTrue ( values. contains ( new SymbolicValue ( "func1", "func1.js" ) ) )
assertEquals ( "select cast('a::b' AS a)", result )
Assert. assertFalse ( result )
assertEquals ( actualDeviceClientList. size ( ), 1 )
assertOut ( "a(b.toString());" )
assertThat ( minimizedChanges, is ( empty ( ) ) )
assertEquals ( expected, actual )
assertTrue ( connector instanceof NioSocketConnector )
assertThat ( hijri. with ( CommonElements. weekOfYear ( HijriCalendar. family ( ), model ). atCeiling ( ) ), is ( expected ) )
Assert. assertTrue ( true )
assertTrue ( entity. equals ( entity2 ) )
assertEquals ( "ENVELOPE [id='']((2.0 0.0,0.0 2.0,-2.0 0.0,-4.0 2.0,-6.0 0.0,-6.0 0.0,-2.0 0.0,-4.0 2.0,-6.0 0.0,-6.0 0.0,-2.0 0.0,2.0 0.0,2.0 0.0,2.0 0.0))", writer. toString ( ) )
assertEquals ( Alignment. RIGHT, gridColumn. getAlign ( ) )
Assert. assertArrayEquals ( "Incorrect html class list", comp. getHtmlClassList ( ). toArray ( ), comp. getHtmlClassList ( ) )
assertThat ( jPath. from ( glossaryRoot ). getJson ( ), equalTo ( "[{\\"description\\":\\"The glossary has been deleted\\"},{\\"description\\":\\"The glossary has been deleted\\"}]" ) )
assertEquals ( 0, buyPercentageFee. compareTo ( new BigDecimal ( "0.0025" ) ) )
this. assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/injector/options", "servicetemplates/baobab_driverInjection_getInjectionOptions.json" )
assertNull ( field. getValue ( ) )
assertEquals ( 123L, info. getId ( ) )
assertThat ( md, is ( notNullValue ( ) ) )
assertNotNull ( uploadResponse )
assertTrue ( ctx. isAborted ( ) )
assertThat ( stringFragment, is ( "FOOBAR with NO " ) )
Assert. assertArrayEquals ( expected_output, dvxOut. toArray ( ), 1e-6 )
assertEquals ( expResult, result )
Assert. assertEquals ( list, objectTree. get ( "randomStrings" ) )
Assert. assertTrue ( false )
assertThat ( edges, hasItem ( likeEdge ( ). withProperty ( "name", "prefixpersons" ) ) )
assertThat ( session1, is ( not ( session2 ) ) )
assertEquals ( new Float ( 123.4F ), result )
assertTrue ( outAny. equal ( inAny ) )
assertEquals ( "Wrong variable value", TEST_VALUE, interpolator. resolve ( "" ) )
assertNotNull ( provisioningServiceClient )
Assert. assertEquals ( now, value )
assertEquals ( "All rules have been imported", 3, ss. size ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertFalse ( TestRMILoadBalancerFactory. areServerBalancersClosed ( ) )
assertThat ( context. statement ( ), is ( "\\"b'c\\"" ) )
assertThat ( returnedMode, is ( AvroMode. GENERIC ) )
assertEquals ( 1, entities. size ( ) )
assertEquals ( result. getName ( ), "com.acme.maven.plugin.Plugin2" )
assertEquals ( "mvn:file:0.1.0.SNAPSHOT/jar", computePathToDepsFromMvnUrl )
assertThat ( result, isFailedCommand ( ) )
Assert. assertEquals ( msg, expected, actual, delta )
assertTrue ( caughtException )
Assert. assertEquals ( 10, priceSum )
assertEquals ( o, null )
assertEquals ( 1, result )
assertEquals ( new Scanner ( getClass ( ). getResourceAsStream ( "/expected-sample.html" ), "UTF-8" ). useDelimiter ( "\\\\A" ). next ( ), sw. toString ( ) )
assertTrue ( entity. equals ( entity2 ) )
assertEquals ( "1", client. portfolios. findById ( "1" ). execute ( ). gid )
assertTrue ( JSONObject. isEqual ( actual, expected ) )
assertNull ( criteriaReader. start ( ) )
assertEquals ( future, underTest. streamCollect ( futures, consumer, supplier ) )
assertEquals ( opponentHealth, opponent. getHero ( ). getHp ( ) )
assertEquals ( reference, lessSpecific )
assertEquals ( "SELECT id, name FROM `member`\\n" + "ORDER BY id ASC", got )
assertEquals ( expected, actual )
Assert. notNull ( ( Department ) departmentDao. getDepartmentById ( departmentParent. getId ( ) ) )
assertThat ( "Unexpected MDX query", getPivotModel ( ). getCurrentMdx ( ), is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Gender].[All Gender]}, {[Gender].[All Gender]}, " + "{[Store].[All Store Cost], [Store].[All Store Cost], [Store].[Food], [Store].[Non-Consumable]}) ON ROWS FROM [Sales]" ) )
assertEquals ( "tst-01", empresa. getNombre ( ) )
assertEquals ( "Test", column )
assertEquals ( expResults, results )
assertViolationsThat ( report. getValidationViolations ( ), equalTo ( "Root definition has no parameter defined 'foo'" ), equalTo ( "Root definition has no parameter defined 'bar'" ), equalTo ( "Root definition has no parameter defined 'foo'" ), equalTo ( "Root definition has no parameter defined 'bar'" ), equalTo ( "Root definition has no parameter defined 'foo'" ), equalTo ( "Root definition has no parameter defined 'foo'" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ), equalTo ( "The variable has no value" ) )
assertTrue ( constrainedReturnDescriptor. hasConstraints ( ), "Method has a constraint defined on super type." )
assertThat ( request. getConnectorId ( ), equalTo ( zeroValue ) )
Assert. assertEquals ( "Document ID mismatch", expectedDocumentID, actualDocumentID )
Assert. assertEquals ( getManager ( ). getAll ( ). size ( ), 0 )
assertEquals ( "{\\"d\\":{\\"MaximalAge\\":99}}", StringHelper. inputStreamToString ( ( InputStream ) result. getEntity ( ) ) )
assertTrue ( fileContents. contains ( MULTI_LINE_PROPERTY_VALUE ) )
assertEquals ( OrderBy. class, parser. parse ( "order by foo" ). get ( ). getClass ( ) )
Assert. assertEquals ( "41 minutes", prettyTime. format ( prettyTime. calculatePreciseDuration ( new Date ( new Date ( ). getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert. assertEquals ( objective, counter )
assertThat ( statsdMetricAggregated. getInfluxdbV1JsonFormatString ( ), equalTo ( "{\\"name\\":\\"aggregated.counterMetric@#$%^_123AaZz09\\",\\"totalTime\\":1,\\"statsdCount\\":1}" ) )
assertEquals ( expected, uri. toString ( ) )
assertTrue ( "our user should be returned one VO", vos. get ( 0 ). getMember ( ). equals ( member ) )
assertEquals ( banner, "Language: en_US\\n" + "Language: en_US\\n" + "Language: en_US\\n" + "Language: en_US\\n" + "Language: en_US\\n" + "Language: en_US\\n" + "Language: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageVersion: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag: en_US\\n" + "LanguageTag
Assert. assertTrue ( lu. isSingular1 ( ) )
assertEquals ( "(String...)", mnd. getParameterDisplaySignature ( ) )
assertEquals ( "Wrong class for isolatednode", IsolatedNodeFilterType. class, filter. getClass ( ) )
Assert. assertNotNull ( addressResultsDto )
assertTrue ( tester. testXmlSerialization ( ) )
assertEquals ( future, underTest. collectDefaultCollection ( ) )
assertEquals ( expResult, result )
assertEquals ( expected, actual )
assertFalse ( response. isPresent ( ) )
Assert. assertArrayEquals ( coeff_EXPECTED, coeff_ACTUAL, DELTA_04 )
assertSame ( reply, myTestInstance. runAdminCommand ( "command" ) )
assertEquals ( expected, output )
assertEquals ( "Base for doubles is wrong", Double. valueOf ( 3.6d ), parsed )
assertThat ( target. getOutput ( ), is ( output ) )
assertFalse ( redis. exists ( "foo" ) )
Assert. assertEquals ( "Incorrect file types returned", 0, widget. getFileTypes ( ). size ( ) )
Assert. assertEquals ( "did not get expected checksum", irodsChecksum, localChecksum )
assertEquals ( theColPos, thePosition2 )
assertEquals ( 0, agds. freeResourcesCount )
Assert. assertEquals ( json. getAsInt ( "status" ), 204 )
assertEquals ( expectedSource, instrumentedSource )
Assert. assertEquals ( 2, arrays. size ( ) )
assertTrue ( cell. get ( MessageTrait. POPUP_POSITION ) instanceof TextCell )
assertEquals ( "a\\nbla\\nc", lineNumbered. toString ( ) )
assertEquals ( 4, fixture. bytesRead ( ) )
assertEquals ( "gonzo", result. getId ( ) )
assertEquals ( sr, geometryManager. getSpatialReferenceFor4326 ( 4326 ) )
assertTrue ( commandLineOutput. contains ( "Running job:" ) )
assertFalse ( "Top250 is empty", result. isEmpty ( ) )
assertTrue ( "Same arrays should be equal", equals )
assertThat ( validationList1, is ( Arrays. asList ( INVALID_DB_TYPE, INVALID_USERNAME, INVALID_PASSWORD, INVALID_TRUST_ALL_ROOTS, INVALID_RESULT_SET_TYPE, INVALID_RESULT_SET_CONCURRENCY, INVALID_COMMAND, INVALID_TIMEOUT ) ) )
assertEquals ( a, b )
assertThat ( query. getQuery ( ), is ( "?$metadata#emptyEntity" ) )
assertEquals ( "An unexpected node membership was returned", expected, result )
assertFalse ( validator. validate ( EntityNames. TEACHER, teachers ). containsAll ( teachers ) )
assertThat ( testHostname, is ( expectedHostname ) )
Assert. assertEquals ( 1, count )
assertEquals ( 0, counter. get ( ) )
assertEquals ( "47", sessionData. getOldSessionId ( ) )
assertThat ( Hex. toHexString ( wrapped ). equals ( wrappedKey ), is ( true ) )
Assert. assertEquals ( expected, actual, delta )
assertEquals ( "[3, 4, 2, 1]", linkedList. toString ( ) )
runner. assertAllFlowFilesTransferred ( FetchS3Object. REL_FAILURE, 1 )
Assert. assertTrue ( "Failed to encode signed challenge", SaslEcdsaNist256PChallenge. verify ( recreatedPrivateKey, CHALLENGE, signature ) )
assertEquals ( expectedValue, actualValue )
assertNull ( widget )
assertEquals ( oldPos + size, buffer. position ( ) )
assertNotNull ( method. toString ( ) )
assertContainsOnly ( testee. getFileFilters ( ), filter1, filter3 )
assertEquals ( IotHubStatusCode. OK_EMPTY, result )
assertEquals ( endOfDay ( base. plusWeeks ( 3 ) ), absoluteTime )
assertTrue ( entity. equals ( loadedEntity ) )
assertEquals ( expected, actual )
assertEquals ( 0, result. getViolations ( ). size ( ) )
assertEquals ( 0, kars. size ( ) )
Assert. assertTrue ( setA. equals ( setB ) )
assertLookup ( breaks, values, srcImg, DataBuffer. TYPE_DOUBLE )
Assert. assertTrue ( contains )
AssertJUnit. assertTrue ( difference. isZero ( 1e-7 ) )
assertTrue ( "Result: " + session. getHtmlToDisplay ( ), session. getHtmlToDisplay ( ). contains ( "option" ) )
assertEquals ( expected, actual )
MutableMessageFactoryTest. assertExpiryDateEquals ( expiryDateValue, message )
Assert. assertEquals ( String. format ( "send to %s now", html ( bb, "email", "address.domain" ) ), formatter. format ( "send to user@address.domain now", defaultOptions ( ) ) )
assertEquals ( padded ( ARRAY_OVERHEAD + FIRST_DIM * ( OBJECT_REF + padded ( ARRAY_OVERHEAD + SECOND_DIM * OBJECT_REF ) ) ) + padded ( ARRAY_OVERHEAD + 2 * INT ), ThreadTrackingContext. getBytes ( ) )
Assert. fail ( "server-group missing name" )
assertEquals ( qf1, qf2 )
assertTrue ( meta. pofClassAttribute == null )
assertEquals ( 4L, dispatcher. dispatch ( new Rate ( book, 3 ) ) )
assertThat ( parsed, is ( answer ) )
assertEquals ( mockDBConnection, connectionServiceImpl. updateConnection ( mockDBConnection. getConnectionName ( ) ) )
assertEquals ( "Unexpected state class", TwinColSelectState. class, state. getClass ( ) )
assertServiceEvent ( ServiceEvent. REGISTERED, TestService. class, 5, TimeUnit. SECONDS )
assertions. doesNotContain ( 6, 8 )
Assert. assertEquals ( "Candidate size should be " + EXPECTED_CANDIDATE_SIZE, EXPECTED_CANDIDATE_SIZE, termList. size ( ) )
assertParser ( twig )
assertEquals ( CustomsDeclarationCollection. getData ( ). size ( ), 1 )
Assert. assertEquals ( expected, result )
Assert. assertEquals ( ps2. getUuid ( ), vol. getPrimaryStorageUuid ( ) )
assertTrue ( maintenance. getVehicle ( ). getClean ( ) )
assertVotingEnded ( )
assertEquals ( "Hello, World", rep. receiveMessage ( ). popString ( ) )
assertEquals ( expected, actual )
assertEquals ( 15, SparrowUtils. calculateTextWidth ( fontMetics, "foo" ) )
assertThat ( literal. getIRI ( ), is ( literalOf ( "lexicalvalue" ) ) )
Assert. assertEquals ( xmlEsperado, icms101. toString ( ) )
Assert. assertEquals ( nowPlusOneMin + 1, deadline. getValue ( ) )
assertArrayEquals ( expectedOutput, output )
assertServerReceived ( "<iq id=\\"*\\" type=\\"set\\" from=\\"userc@localhost/voxeo\\" to=\\"#callId@localhost\\"><say xmlns=\\"urn:xmpp:tropo:say:1\\"><audio xmlns=\\"urn:xmpp:tropo:say:1\\"><say xmlns=\\"urn:xmpp:tropo:say:1\\"><say xmlns=\\"urn:xmpp:tropo:say:1\\"><![CDATA[http://ccmixter.org/content/DoKashiteru/DoKashiteru_-_you_(na-na-na-na-na.mp3\\"]></audio></say></iq>" )
assertEquals ( 1, query ( ). from ( show ). where ( show. acts. containsKey ( "b" ) ). fetchCount ( ) )
maps. assertContains ( description, actual, null )
assertTrue ( timeInstant!= null )
assertTrue ( success )
assertTrue ( "Could not find news environment", foundNews )
assertEquals ( literal, newLit )
assertEquals ( mockList, queryPlan. getChildQueryPlans ( ) )
assertEquals ( "udp://[@networkInterface]:8000", loopbackResourceAddress. getAddress ( ). toString ( ) )
assertEquals ( expectedGmtOffset, actual )
assertNull ( server. getPolicy ( ) )
assertEquals ( 1, victim. getPreProcessors ( ). size ( ) )
assertTrue ( "Invalid response statusCode: " + statusCode, statusCode == HttpServletResponse. SC_OK )
assertTrue ( "return too late", time < TIME )
assertOut ( "a |= b" )
assertEquals ( "Timestamp should be 14848403034401103", 14848403034401103L, ts )
Assert. assertNull ( wordAfter )
assertNotNull ( connector )
assertFalse ( flag )
assertEquals ( "MyResource", result )
Assert. assertEquals ( "12.34", result. getText ( ) )
assertEquals ( "O", to. getMotion ( ) )
Assert. assertEquals ( expected, superflatPreset )
assertEquals ( "xxx", o )
context. assertIsSatisfied ( )
Assert. fail ( "Xfdf files are not equal" )
assertEquals ( 1, result. size ( ) )
assertThat ( headerUserAchievements. getBronzeBadgesCount ( ), is ( 1 ) )
Assert. assertEquals ( 3, combiSet. getTotalNb ( ) )
assertEquals ( result, ParseUtils. parseQuery ( "consumer.", "verion=1.0.0&cluster=china" ) )
assertMockEndpointsSatisfied ( )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
assertEquals ( "Base value is not properly parsed", date, parsed )
assertEquals ( Long. valueOf ( arg ), il. exec ( t ) )
Assert. assertEquals ( previousGamma, gamma, 1.0e-15 )
assertEquals ( 0.4327664576543210678, julDate. getJulianDate ( ), TOLERANCE )
assertEquals ( Long. valueOf ( 1 ), myTestInstance. insertAsync ( Durability. ACK, doc ). get ( ) )
Assert. assertNotNull ( savedTenant )
assertTrue ( can )
assertEquals ( location. getPort ( ), 443 )
assertThat ( result ( ), not ( containsString ( "<price>" ) ) )
Assert. assertEquals ( ImmutableList. of ( ThresholdFilterHeaderExtender. FILTER_GT_MIN_COV ), annotator. getFiltersFor ( gt ) )
assertTrue ( c instanceof ConstantString )
Assert. assertEquals ( "when the import is not in progress, the " + ResetImportAction. IMPORT_IN_PROGRESS + " view should be returned", ResetImportAction. IMPORT_IN_PROGRESS, view )
Assert. fail ( )
assertThat ( formatter. parse ( "(246) Anno Domini 1602/2004" ), is ( PlainDate. of ( 1603, 4, 4 ) ) )
assertTrue ( a1. equals ( a2 ) )
context. assertSentryException ( statement, "CREATE ROLE r2", SentryAccessDeniedException. class. getSimpleName ( ) )
assertEquals ( expected, mergeAclEntries ( existing, aclSpec ) )
assertEquals ( true, check. isRequired ( ) )
assertTrue ( parser. isMyType ( document ) )
assertValidQuery ( query )
assertEquals ( 6. * 3600. + 6. * 60. + 6. * 3600. + 6., sec, 0.01 )
assertThat ( outcomes. get ( 0 ). getResult ( ), is ( TestResult. SUCCESS ) )
assertEquals ( true, bm. isBitSet ( bitNumber ) )
assertEquals ( Action. DISCONTINUE, discontinuationOrder. getAction ( ) )
assertPermanentCount ( playerB, "Cast Through Time", 1 )
assertEquals ( "OrganizationalUnit removed", SPACE_NAME, eventCaptor. getValue ( ). getOrganizationalUnit ( ) )
assertEquals ( expResult, result )
assertEquals ( Arrays. asList ( ")" ), candidates )
assertEquals ( em, result )
assertVisitorSatisfied ( )
assertTrue ( xml. contains ( "    <text>John Doe</text>" ) )
assertEquals ( "service", s1. getType ( ) )
assertNotNull ( victim. get ( new COSObjectKey ( 6, 0 ) ) )
Assert. assertEquals ( expected. getAttribute ( "id" ), actual. getAttribute ( "id" ) )
assertNull ( array. getArray ( ) )
assertThat ( "Only one node is offline", s. isOffline ( ), is ( true ) )
JSONAssert. assertEquals ( "{" + "status: 'in-progress', description: 'This was a commit', commit: {}" + "}", s, JSONCompareMode. LENIENT )
assertEquals ( item. getClass ( ), actual )
assertTrue ( actualException == mockedTransportException )
assertEquals ( executions. size ( ), 1 )
assertEquals ( "This is my cookie from the server", response )
assertTrue ( d. value ( ) == true )
assertEquals ( new Double ( 20.0 ), request. getEcommerceRevenue ( ) )
assertResponse ( response, 403, "[{\\"Forbidden\\": \\"CREATE API methods are disabled on this KairosDB instance.\\"}]\\n" )
assertEquals ( baseVersion, auxpowMetadata. getBaseVersion ( chainID, flags ) )
Assert. assertEquals ( "Incorrect condition", "((WTextField=\\"1\\" and WTextArea=\\"2\\") and WDropdown=\\"3\\"))", builder. build ( ). toString ( ) )
assertEquals ( wordCounts, result )
Assert. assertArrayEquals ( new String [ ] { "King", "Brothers", "Hoverings", "Inc", "KKQ" }, words )
assertNotNull ( identity )
assertTrue ( "There should be " + REPEATS + " failures in the same sequence", failures. isEmpty ( ) )
assertEquals ( SpringStatus. DelayedWrite. class, result. getClass ( ) )
assertEquals ( "TextBuilder String Is Test", _textBuilder. toString ( ), "Test" )
assertEquals ( "SomeObj", s. getLabels ( ). get ( "Name" ) )
assertEquals ( "ST", loop. getSegment ( 0 ). getElement ( 0 ) )
assertEquals ( 0, counter. get ( ) )
assertResultSet ( res )
assertThat ( indexHits. get ( ). isRemoved ( ), is ( false ) )
Assert. assertEquals ( "User should be logged in.", JenaUtil. TEST_USER_EMAIL, user. getEmail ( ) )
assertEquals ( BaseAction. INPUT, action. doDefault ( ) )
Assert. assertEquals ( "newChildMeta", getChild. getName ( ) )
assertFalse ( isEditable )
assertEquals ( "public static  main(final String[] args) {}", actualContent )
assertEquals ( "task:COMPLETED", eventsReceived )
assertEquals ( "OutputStream appender output does not match expected", TEST_MSG, actual )
Assert. fail ( "Error retrieving workflow list caused by: " + e. getMessage ( ) )
assertEquals ( NotificationConstants. KEW_CONSTANTS. CUSTOM_NOTIFICATION_DOC_TYPE, document. getDocumentTypeName ( ) )
assertEquals ( Boolean. TRUE, result )
assertTrue ( mpis. getBoundary ( ). isEmpty ( ) )
Assert. assertFalse ( errors. hasErrors ( ) )
assertThat ( vraptor. getParameterValues ( "name" ), is ( equalTo ( values ) ) )
assertEquals ( obj. getShareInfo ( ), null )
AssertionUtils. multiAssertEquals ( createAsDocument11, response7. getResponseObject ( ) )
assertTrue ( "The table width should be " + original_width + "px", original_width > table. getSize ( ). getWidth ( ) )
assertEquals ( 65535, fixture. readVarInt ( ) )
assertEquals ( "test_message", result. getCommit ( ). getFullMessage ( ) )
assertThat ( parse ( contents ), contains ( map ( "value", "1" ) ) )
assertEquals ( events. size ( ) + 1, size ( stream ) )
assertEquals ( expecetedTableName, builtTableName )
assertJsFunctionCallSequence ( asList ( "" + "formatter.scenario({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Scenario\\",\\n" + "  \\"name\\": \\"scenario name\\"\\n" + "});\\n", "" + "formatter.step({\\n" + "  \\"keyword\\": \\"Given \\",\\n" + "  \\"name\\": \\"first step\\"\\n" + "});\\n", "" + "formatter.match({\\n" + "  \\"location\\": \\"path/step_definitions.java:3\\"\\n" + "});\\n", "" + "formatter.result({\\n" + "  \\"status\\": \\"passed\\"\\n" + "});\\n", "" + "formatter.scenario({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Scenario\\",\\n" + "  \\"name\\": \\"scenario name\\"\\n" + "});\\
assertEquals ( "something == $", result )
Assert. assertEquals ( "(124delAinsCT)", del. toHGVSString ( ) )
Assert. assertEquals ( "Decode brackets not correct", out, WebUtilities. decodeBrackets ( in ) )
assertThat ( result, is ( lines ( new String [ ] [ ] { { "\\\\\\\\t" } } ) ) )
assertEquals ( booleanPropertyAsString, everrestConfiguration. getBooleanProperty ( "foo", false ) )
assertNotNull ( Record. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( threadReleasedLatch. await ( 1, TimeUnit. SECONDS ) )
assertEquals ( AppConfigProperties. DEFAULT_BISERVER_CONTEXT_PATH, biServerContextPath )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
Assert. assertFalse ( "The date field should not be empty after pressing the date change resolution.", textField. getAttribute ( "value" ). isEmpty ( ) )
assertEquals ( 15, atAct1. get ( 0 ) )
assertArrayEquals ( refar, d. getResult ( ) )
Assert. assertEquals ( "{}", reference. get ( ). getAttachment ( Http2Client. RESPONSE_BODY ) )
assertTrue ( result )
Assert. assertNull ( destination. getCredentials ( ) )
assertEquals ( slice. eventCount, 0 )
assertTrue ( doubleArray. length == 3 )
assertThat ( select. hasSelectedOption ( ), is ( true ) )
assertDocumentStatus ( getResponse, documentAccepted )
assertEquals ( new Dimension ( 100, 200 ), res )
Assert. assertEquals ( actual, output. toString ( ) )
assertTheEntireDomainTreeHasPermissionsDefined ( client )
assertTrue ( actual. equals ( expected ) )
assertFalse ( validator. isValid ( replyToAddress, null ) )
assertFalse ( lock. lock ( ) )
Assert. assertArrayEquals ( expected, processed )
assertEquals ( cache. get ( "a" ), "b" )
Assert. assertEquals ( 400, json. getInt ( "code" ) )
assertNotNull ( photoContext )
assertEquals ( name, SocketAddress. toAddress ( other ). toString ( ) )
assertBounds ( 0, 15, 10, 20 )
assertTrue ( fs. exists ( newDir ) )
assertEquals ( asList ( debug ( mdcValues, message, arg1 ) ), testLogger. getLoggingEvents ( ) )
assertEquals ( exp, out )
assertEquals ( 0, map. size ( ) )
Assert. assertEquals ( "{/var}", e. toString ( ) )
assertThat ( nextToken, is ( nullValue ( ) ) )
Assert. assertEquals ( 1, query. getFirstAtomMapping ( ). getCount ( ) )
assertEquals ( Arrays. asList ( "a", "aa", "ab", "ac", "ba", "bb" ), kittens )
assertEquals ( sb. toString ( ), b. toString ( ) )
assertTrue ( true )
assertEquals ( packet, p )
assertThat ( term, is ( "�┿�ゃ��" ) )
assertEquals ( "This is a English example.", select ( jcas, Language. class ). toString ( ) )
assertEquals ( "1.0", type. getValue ( rs, 1 ) )
assertThat ( searchResponse. getHits ( ). getTotalHits ( ), is ( 1l ) )
assertEquals ( "video1", node. getId ( ) )
assertEquals ( "Test template", rt. getContents ( ) )
assertEquals ( true, rss )
assertEquals ( 1l, session. from ( $ ( dep ) ). where ( $ ( dep. getEmployees ( ) ). contains ( emp1 ) ). count ( ) )
assertValidationFailures ( schema, config )
Assert. assertEquals ( "Default value", "Hello World", config. get ( "helloWorld" ) )
assertThat ( testHeader, sameInstance ( header ) )
assertThat ( queue. hasRemaining ( ), is ( false ) )
assertEqualDoubleArrays ( pytranspose, transpose, epsilon )
Assert. assertEquals ( expected, testIndex. findConc ( " 'May' '(?-i).*e'+ " ) )
assertArrayEquals ( expected, target. getPixels ( 1, 0, 0 ), 1E-10f )
assertEquals ( TEST_DOC_CONTENT, factory. create ( TEST_DOC_CONTENT ) )
assertEquals ( "test", StringUtils. join ( toText ( select ( jcas, Token. class ) ), " " ) )
assertThat ( parsed, equalTo ( source ) )
assertEquals ( expectedResult, result )
assertThat ( "Integer schema", combined, matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( MultipleChoices. MESSAGE, ri. getDescription ( ) )
assertEquals ( "Outer class instance variable is 779", 779, ret )
Assert. assertNotNull ( user )
Assert. assertEquals ( "<customIcon><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><Data>H9T0QaXsTOCMqYKlB50o7w==</Data></CustomIcon>", xml )
assertXpathEvaluatesTo ( "legend", "//ui:label/@what", label )
assertTrue ( peterRank <= 3 )
assertNotNull ( logManager )
assertTrue ( "Got a handler", detector. getFileHandler ( ). equals ( handler ) )
TestHelpers. assertDeepEquals ( expected, snapshot. getValue ( ) )
assertAppearanceFontSize ( dest, 6.26f )
assertions. containsSequence ( sequence )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( expResult, result )
Assert. assertTrue ( arc. equals ( arc2 ) )
assertThat ( event. getGoal ( "goal0" ). getGoal ( ), is ( goal ( "goal1", 0, 500 ) ) )
assertThat ( options. getSnippetType ( ), is ( SnippetType. UNITS ) )
context. assertIsSatisfied ( )
assertThat ( PebbleProperty. getDefaultLocale ( ), is ( equalTo ( PebbleProperty. DEFAULT_LOCALE ) ) )
assertions. isNotGreaterThan ( new Double ( 2d ) )
assertEquals ( refPoint, testPoint )
assertEquals ( queryCopy. getQueryGeometry ( ), query. getQueryGeometry ( ) )
assertEquals ( new HashSet < String > ( Arrays. asList ( "staff1", "staff2", "staff3" ) ), underTest. filterConnectedViaEdOrg ( new HashSet < String > ( staffIds ), repo ) )
assertThat ( xoManager. find ( FinalType. class, new Object [ ] { "a", "b" } ). get ( ), equalTo ( finalType ) )
assertSame ( ScopeTest. class, injector. getInstance ( ScopeTest. class ) )
Assert. assertEquals ( userConfig. getIntField ( ), result. getIntField ( ) )
assertReceivedModel ( )
assertMap ( navigator. getStateParameterMap ( ), entry ( "bar", "baz" ) )
assertThat ( value, is ( equalTo ( "DIARY" ) ) )
assertTrue ( singleThreadedSingleKernelTestHelper ( device, 16 ) )
assertTrue ( docs. get ( uri ). equals ( docs. get ( uri ) ) )
assertEquals ( Piece. WHITE_PAWN, expectPawn )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( tRes. getResults ( ). size ( ) > 0 )
assertEquals ( expectedAllocationPolicy, actualAllocationPolicy )
assertEquals ( "������������������������������������������������������������������������������������
assertEquals ( "Wrong TV ID", test. getImdb ( ), result. getImdbId ( ) )
assertEquals ( v. getOwnValidationPaths ( ), Lists. newArrayList ( "hello" ) )
assertEquals ( expResult, result )
assertFalse ( generatedIds. contains ( id ) )
Assert. assertFalse ( "Invalid request from interceptor", result )
assertThat ( runtimeClass, typeCompatibleWith ( BundleClassResolverHelperDecorator. class ) )
assertEquals ( expectedOutput, TemplateReplacer. applyTemplateChanges ( context, customTemplate ) )
assertEquals ( componentByFieldInjection. getName ( ), component. getName ( ) )
assertFalse ( validator. validate ( EntityNames. STUDENT_SCHOOL_ASSOCIATION, associations ). size ( ) == associations. size ( ) )
Assert. assertTrue ( "Warnings list should be empty", warnings. isEmpty ( ) )
assertEquals ( 3, response. getEntities ( ). size ( ) )
assertFalse ( "Shard allocated", result )
assertEquals ( 1, allVisible. size ( ) )
assertEquals ( expected, actual )
assertEquals ( SearchType. DEFAULT, request. getSearchType ( ) )
assertEquals ( "Required profiles", "tui", new ConciergePlatformBuilder ( m_bundleContext, "version" ). getRequiredProfile ( m_platformContext ) )
assertEquals ( resizer, receivedResizer )
assertThat ( "Unexpected MDX query after adding a new hierarchy", getPivotModel ( ). getCurrentMdx ( ), is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Gender].[All Gender]}, {[Product].[All Products], [Product].[Drink], [Product].[Food], " + "[Product].[Non-Consumable]}) ON ROWS FROM [Sales]" ) ) )
assertEquals ( map1, map2 )
assertArrayEquals ( EXPECTED, ByteArray. readAllBytes ( nlriByteBuf ) )
assertEquals ( Hex. toHexString ( outputStream. toByteArray ( ) ), "000000000041fa2f0270204bafe49cd42e5b45840000000000000000000000000000000000000000" )
Assert. assertEquals ( ( byte ) 0, data [ 0 ] )
assertEquals ( dataflowInputPort, edit. getSubject ( ) )
assertTrue ( customerKey. prefixOf ( key ) )
assertThat ( result, is ( false ) )
assertTrue ( Pattern. matches ( "(?s).*/phaseListener01.jsp PASSED.*", page. asXml ( ) ) )
assertEquals ( expected, getString ( TestUpdateImpl. example ( ) ) )
assertTrue ( it. next ( ). asText ( ). contains ( "mvc" ) )
assertFalse ( captor. getValue ( ). hasCancelHeaders ( ) )
assertEquals ( FilterReply. DENY, mockAppender. getFilterChainDecision ( loggingEvent ) )
assertThat ( underTest. childMapOf ( new HashMap < String, Object > ( ) ). entrySet ( ), empty ( ) )
assertTrue ( hasPermission )
Assert. assertTrue ( schema instanceof DirectSchema )
assertEquals ( 5, d, 0 )
result. assertIsSatisfied ( 100 )
assertThat ( parsed, is ( answer ) )
assertEquals ( 16, profile. dashBoards [ 0 ]. widgets. length )
assertFalse ( violation )
assertEquals ( "order", written )
assertEquals ( "GBP -5.83", test. toString ( ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
Assert. assertEquals ( "�驻�� 3 砖注�转", t. format ( new Date ( ) ) )
assertStoreContains ( out, 9, 8, 7, 6, 5, 4, 3 )
assertEquals ( "Hello World", a. sayHello ( ) )
assertEquals ( post. getUrl ( ), newPost. getUrl ( ) )
Assert. assertFalse ( "Failure expected false", r. getLeft ( ) )
assertNull ( clusterService. findNode ( "nodeName" ) )
assertEquals ( "Object Type: Roa" + System. lineSeparator ( ) + "Number: 0\\n" + "Number: 0\\n" + "Not null\\n" + "Not null", output. toString ( ) )
assertTrue ( unit. isValid ( Money. of ( 0, "EUR" ), null ) )
assertEquals ( 1, matcher. groupCount ( ) )
assertEquals ( "[WolfGoatCabbage[��Martin��, WolfGoatCabbage[��Martin��, WolfGoatCabbage[��Martin��, WolfGoatCabbage[��Martin�������, WolfGoatCabbage[��Martin��, WolfGoatCabbage[��Martin��, WolfGoatCabbage[��Martin��, WolfGoatCabbage[�����, WolfGoatCabbage[��Martin��, WolfGoatCabbage[�
assertThat ( authorization. get ( ). getRoles ( ), is ( UNVERIFIED_USER_ROLE ) )
assertEquals ( 1, size )
assertEquals ( "Invalid number.", five )
assertTrue ( latch. await ( 4, SECONDS ) )
assertEquals ( true, resultA. compareTo ( resultB ) < 0 )
Assert. assertEquals ( expected, input )
Assert. assertEquals ( "SELECT INTERVAL '5-3' YEAR TO MONTH + INTERVAL '20' MONTH\\nFROM DUAL;\\n", text )
Assert. assertTrue ( cmd. apply ( bkFlags, new String [ ] { "-l", "1", "-p", "1", "-d", "1", "-f", file. getAbsolutePath ( ) } ) )
assertEquals ( "Expected no sources", 0, sources. size ( ) )
assertTrue ( this. userService. hasHash ( ) )
assertEquals ( 0xBC, ceosReader. readB8 ( ) )
Assert. assertTrue ( tableList. contains ( "test" ) )
assertEquals ( "Wrong remainder result", pathFooNullBar. remainder ( remainder1 ), pathFoo123 )
assertNotNull ( sb. install ( ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertOut ( "var /** @type {number} */ a = new Number(\\"1\\")" )
assertEquals ( state, ShardConsumerState. SHUTDOWN_COMPLETE. consumerState ( ) )
assertEquals ( 3, result )
assertTrue ( boundary. contains ( BatchParserCommon. BOUNDARY ) )
assertTrue ( Arrays. equals ( data, wrapper. getData ( ) ) )
Assert. assertEquals ( info. length, infoProxy. length )
assertEquals ( "org.apache.asr.manager.manager.manager.DefaultManager", conf. getManager ( ). getClass ( ). getSimpleName ( ) )
assertEquals ( "Substituted message should not be logged", 0, logRecord. getMessage ( ). length ( ) )
assertFalse ( cpiResource. getSoftlinkRelations ( ). isEmpty ( ) )
assertTrue ( 10 > IterableUtils. countNodes ( getDatabase ( ) ) )
arrays. assertNotEmpty ( description, null )
assertEquals ( 3.5, ( Double ) results. get ( new FieldName ( "output" ) ), 0.000001 )
assertEquals ( false, mockResult. included ( "isUserWatchingTopic" ) )
Assert. assertTrue ( time > 0 )
assertThat ( page. singleSelectWithSelection. getAllSelectedValues ( ), contains ( "1", "3" ) )
assertNull ( "Date parsing is wrong", mapper. readBitemporalDate ( new Columns ( ), "tt_to" ) )
assertNull ( convSessionId )
Assert. assertEquals ( "{\\"at\\":\\"1930-09-04T00:03:48.750431006Z\\"}", os. toString ( ) )
assertThat ( avroSchema, is ( source. schema ( ) ) )
assertEquals ( "Not all available locales accepted", 1, locales. size ( ) )
Assert. assertSame ( edit, pa. getAccessLevel ( ) )
assertArrayEquals ( new short [ ] { 0, 1 }, cv2. getPhaseAngles ( ) )
Assert. assertEquals ( xmlEsperado, nfNotaInfoICMSTotal. toString ( ) )
assertTrue ( "Incorrect mapping of property with annotated field", actual. indexOf ( "property-1: value1\\r\\n" ) >= 0 )
assertThat ( foundThread, is ( Optional. of ( thread ) ) )
assertEquals ( 4, exceptions )
Assert. assertEquals ( set ( b, c ), presenceDao. getSubdirectories ( a ) )
assertEquals ( - 65423.332f, executeTestMethod ( test, Float. class, null, - 65423.332f ), 0.0f )
assertThat ( actualJson, is ( expectedJson ) )
assertTrue ( "index took " + failTime. get ( ) + "ms, got " + threads, failTime. get ( ) > now + threads )
assertEquals ( HTTP_RESPONSE_MESSAGE, inMessage. get ( HTTPConduit. HTTP_RESPONSE_MESSAGE ) )
Assert. assertTrue ( "Unable to fetch update RDF page for old dev urls", updateRdf. contains ( "<updates" ) )
assertNotNull ( result )
Assert. assertArrayEquals ( bytes, bytes2 )
assertThat ( criterion. convertValueForDatastore ( new ValueMeta ( ) ), is ( ( Object ) "myEnum" ) )
assertEquals ( "((ENTITY_ID is_null  OR ENTITY_ID!= " + userId + ") AND ((ID = " + userId + " AND (ACTUALOWNER is_null  OR ACTUALOWNER is_null )) OR ACTUALOWNER is_null))", dataSetLookup. getFirstFilterOp ( ). getColumnFilterList ( ). get ( 0 ). toString ( ) )
assertTrue ( "counter was not serialized", output. toByteArray ( ). length > 0 )
assertThat ( healthMessages. size ( ), is ( 0 ) )
assertEquals ( "b", toml. getString ( "target." + "cfg (unix)\\". dependencies.b" ) )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( "", victim. readNumber ( ) )
assertEquals ( "serverName", settings. getServerName ( ) )
assertThat ( feature. getType ( ), is ( "Feature" ) )
assertThat ( other, DateMatchers. sameSecond ( date ) )
assertTrue ( "No company information", company!= null )
assertTrue ( result. get ( ) )
assertEquals ( "'a'b'c',xyz", sw. toString ( ) )
assertTrue ( check ( "a", input, output ) )
assertNotNull ( result )
assertEquals ( 0, s. getRequiredSkills ( ). values ( ). size ( ) )
assertTrue ( set. contains ( tuple ) )
assertEquals ( expected, actual )
assertEquals ( "There should be one file", 1, files. length )
assertEquals ( expected, rmc. getCorrectedCourse ( ), 0.01 )
assertTrue ( "failed to stat file", st!= null && st. isFile ( ) )
assertTrue ( "this should throw an exception". equals ( cause. getMessage ( ) ) )
assertThat ( component. getWorkflowUrl ( ), is ( expectedName + ".workflow" ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "wmfImageTest01.pdf", sourceFolder + "cmp_wmfImageTest01.pdf", destinationFolder, "diff_" ) )
assertFalse ( schemaMerger. isMerger ( sourceSchema, targetSchema ) )
assertEquals ( "CREATE TABLE CATALOG_NAME.TABLE_NAME (COLUMN1_NAME BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 2))", generatedSql [ 0 ]. toSql ( ) )
assertTrue ( getNoErrorMsg ( ), result )
assertNumEquals ( DoubleNum. valueOf ( 50 ), cost )
Assert. assertNotNull ( "ticket not null", ticket )
assertEquals ( 10, toTest. available ( ) )
assertEquals ( v, v2 )
assertEquals ( GlobeCoordinatesValue. PRECULT_HALF_UP, v. getPrecisions ( ) )
assertEquals ( 1, clusters. size ( ) )
Assert. assertSame ( expected, proxy )
assertThat ( monthsStartWith_M. values ( ), hasItem ( "June" ) )
Assert. assertEquals ( bitField. getStartElapsedEncodingStrategy ( ), StartElapsedTimeEncodingStrategy. PREV_DELTA )
assertEquals ( id, db. getLongValue ( id, LONG_STORED_FILED_NAME ) )
Assert. assertEquals ( 3, vertices. size ( ) )
assertEquals ( elementMock. getGraphCount ( ), graphIds. getGraphCount ( ) )
assertTrue ( result. getSuccess ( ) )
assertEquals ( 1, fired )
assertContains ( "This is a test.\\n\\n", content )
assertEquals ( testResource1, testResource2 )
Assert. assertNull ( concept. getShortestName ( new Locale ( "en", true ), false ) )
assertEquals ( mockResponse, testResponse )
assertEquals ( "10078668", user. getId ( ) )
assertThat ( displayableGoal, is ( new DisplayableGoal ( "project1", "phase1", "goal1", "dep1 dep2", 0, 0 ) ) )
Assert. fail ( "Should have Assert.failed on the second parameter to 'ends-with' not " + "being bound." )
assertFalse ( problem )
assertTrue ( "Should be a buffer", buffer. toString ( ). startsWith ( "rss:thumbnail" ) )
assertThat ( getterMethod. getReturnType ( ). getName ( ), is ( "com.example.TypeNameConflict" ) )
assertEquals ( "aTestString", classUnderTest. getDatabaseSize ( ) )
Assert. assertEquals ( r, query. getParam ( "s" ) )
assertEquals ( "Hello <b>there</b>!", TextUtil. stripNewlines ( cleanHtml ) )
assertTrue ( endState )
assertThat ( checker. isCalled ( ), is ( true ) )
assertEquals ( "(| [= foo] [= bar] [= baz])", m. toString ( ) )
assertActive ( player1, player2 )
Assert. assertEquals ( 0, errors. size ( ) )
assertThat ( hostConfig. restartPolicy ( ), is ( HostConfig. RestartPolicy. ON_FAILURE ) )
assertTrue ( actual. isEmpty ( ) )
assertEquals ( 14, groupMembers. size ( ) )
assertEquals ( settingsA. hashCode ( ), settingsB. hashCode ( ) )
assertEquals ( contractClass, ContractRegistry. INSTANCE. contractClass ( targetClass ) )
Assert. assertNull ( foundTenant )
assertThat ( result, is ( true ) )
Assert. assertFalse ( context. getResult ( ) )
assertEquals ( 1d, t [ 0 ], 0.1 )
Assert. assertEquals ( "a", qy. get ( 0 ) )
assertEquals ( "aTestString", classUnderTest. getProcedureSeparator ( ) )
assertThat ( bundleString, containsString ( strings ) )
assertThat ( formatterOutput, is ( "classpath:path/test.feature:2:3:4:6:5" ) )
assertThat ( status. code, is ( HttpURLConnection. HTTP_BAD_REQUEST ) )
Assert. assertEquals ( "mobilesafari", provider. getPropertyValue ( mockServletRequest ) )
assertThat ( isTransactionRelated, is ( false ) )
assertTrue ( ScriptTestUtil. scriptIsInstanceOfScript ( testScript, expectedScript ) )
assertEquals ( "[foo] did not satisfy [" + StartsWith. class. getName ( ) + ']', expected. getMessage ( ) )
assertTrue ( shareLibService. findFile ( path1. toString ( ) ). exists ( ) )
assertNotNull ( result )
assertSingleReplacement ( tokenIterator, "{foo}", "bar" )
assertEquals ( 30, p. getTotalPages ( ) )
assertEquals ( "gt0100|Hypertension", code )
assertNotNull ( entry1 )
assertNotNull ( beans )
assertNotNull ( result )
assertEquals ( e. getAttributeDescriptor ( "name" ), new NativeAndStringValuePair ( 5 ) )
assertEquals ( "I've had msg2", FakeRuleParser. correctTextFromMatches ( matches ) )
assertEquals ( modifyAliases1, modifyAliases1Duplicate )
Assert. assertEquals ( 0, l. size ( ) )
Assert. assertEquals ( expected, actual )
assertFalse ( constraint. fulfilled ( iContext ) )
Assert. assertEquals ( null, vo )
assertEquals ( "http://foo.bar.com/fu/bar?_a=b&c=d,e", eu. generateParentURL ( ). toString ( ) )
assertThat ( messages. size ( ), is ( 0 ) )
assertAccessForbidden ( client )
assertThat ( description. toString ( ), is ( "a stage that completed exceptionally with java.io.IOException: error" ) )
assertEquals ( 1, stat. getSize ( ) )
assertEquals ( "test", res. join ( ) )
Assert. assertTrue ( response. contains ( "<out>BmwTesting enhanced REST Feature relative mapping</out>" ) )
assertEquals ( "AdWords.com", config. getAdWordsUrl ( ) )
assertNotNull ( p )
assertCorrectPropertyPathStringRepresentations ( constraintViolations, "addressesPerUnit[Rue Garibaldi], city[Lyon] is invalid" )
assertMockEndpointsSatisfied ( )
assertThat ( driver. findElement ( By. id ( "user1" ) ). getText ( ), is ( "User 2 is not a valid user" ) )
context. assertEquals ( digestWriteStream. digest ( ), aVoid2. digest ( ) )
assertTrue ( okstate. get ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "OK", status )
assertTrue ( events. size ( ) == 5 )
assertTrue ( "Wrong simplified filter: " + simplified, simplified == null || simplified instanceof AllFilter )
assertThat ( listener. awaitCompletion ( event ), is ( true ) )
assertEquals ( "{\\"d\\":{\\"Age\\":42}}", StringHelper. inputStreamToString ( ( InputStream ) response. getEntity ( ) ) )
assertEquals ( newName, hadoopClusterDelegate. newNamedCluster ( variableSpace, iMetaStore, shell ) )
assertLog ( Log. VERBOSE, "test trace argument argument2 argument3", exception )
assertFocused ( c41 )
arrays. assertContainsOnly ( description, actual, other )
assertNotNull ( tutor )
Assert. assertEquals ( "�驻�� 3 砖注�转", t. format ( new Date ( ) ) )
assertEquals ( uuid, Whitebox. invokeMethod ( insert, "extractUuid", uuid ) )
Assert. assertTrue ( this. people. anySatisfy ( predicate ) )
Assert. assertEquals ( "40", bh. decodeXml ( multiValuedAttribute, null, null ) )
assertSame ( expectedResult, result )
assertNotNull ( entity. getId ( ) )
arrays. assertDoesNotContain ( description, actual, value, null )
assertEquals ( 0, registry. getMarkers ( ). size ( ) )
assertEquals ( "S�owacki", book. getTitle ( ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, Right. EDIT, this. doc ) )
Assert. assertSame ( m, support. convert ( null, m ) )
assertEquals ( "Unexpected primary style name", "v-option", state. primaryStyleName )
Assert. assertEquals ( 4, root. left. right. data. intValue ( ) )
Assert. assertThat ( properties. size ( ), IsEqual. equalTo ( 2 ) )
assertValueModelFires ( model, interval, expected )
assertResultSet ( res )
assertNotNull ( SupportingDocumentType. reader ( ). read ( ) )
assertTrue ( plan. contains ( "Statistics" ) )
assertEquals ( expected, actual )
assertThat ( this. requestMap, is ( not ( nullValue ( ) ) ) )
assertTrue ( cursor. get ( ). get ( ) > 0 )
assertThat ( chksumChannel. getWrittenBytes ( ), is ( equalTo ( buffers. length * 2 ) ) )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), hasEnvVar ( "STARTUP_MODE", ADMIN_STATE ) )
assertEquals ( 0, count )
Assert. assertTrue ( false )
assertAnnotations ( 2, Vehicle. class, new TestVehicle ( 0, "armoured vehicle", "LOVE", "UAV" ), new TestVehicle ( 1, "UV", "LEVE", "UAV" ) )
assertEquals ( "Usage: man [<options>]" + getLineSeparator ( ) + "[OPTION...]" + getLineSeparator ( ) + getLineSeparator ( ) + "Options:" + getLineSeparator ( ) + "  -d, --debug  emit debugging messages" + getLineSeparator ( ) + "  -D, --default  reset all options to their default values" + getLineSeparator ( ) + "  -f, --file <String>  set the filename" + getLineSeparator ( ) + "  -f, --file <String>  set the filename" + getLineSeparator ( ) + "  " + getLineSeparator ( ) + "  " + getLineSeparator ( ) + "  -f, --file <String> set the filename" + getLineSeparator ( ) + "  -f, --file <String>  set the filename" + getLineSeparator ( ), clp. printHelp ( ) )
Assert. fail ( "Should throw MessageConversionException" )
assertEquals ( exceptions, repository. findByException ( new Post ( "Exception1", "Exception 1", null ) ). getList ( ) )
assertEquals ( 0, result )
assertEquals ( new Character ( 'b' ), ctxt. getCompositeElementSeparator ( ) )
assertEquals ( expected, actual )
assertEquals ( repeats, counter. get ( ) )
assertNull ( array )
assertThat ( representation. getName ( ), is ( "account-list" ) )
assertEquals ( historyTimeToLive, activity. getHistoryTimeToLive ( ) )
assertEquals ( 50, bean. number )
context. assertTrue ( ar. succeeded ( ) )
assertThat ( ZData. streq ( data ), is ( "test" ) )
assertEquals ( "incorrect value", 0, aNumber. signum ( ) )
assertEquals ( expected, dbMeta. getFieldDefinition ( valueMeta, null, null, false, false, false ) )
assertNotNull ( basic )
assertNotNull ( User. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertThat ( "testSetPlace 0", mv. getPlace ( ), equalTo ( place ) )
assertThat ( evaluateStartConditions. size ( ), is ( 1 ) )
Assert. assertEquals ( 2, path. getShapes ( ). size ( ) )
Assert. assertEquals ( "the woman kicks the dog on the rock and kicks the dog behind the curtain", this. realiser. realise ( aggregated ). getRealisation ( ) )
assertPointArrayArrayEquals ( expected, actual )
assertValidationFailures ( step, stepConfig )
assertEquals ( "4: null, 4: 6, null: null", exceptionWithNulls. toString ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
Assert. assertTrue ( listOutput. contains ( " 6685" ) )
assertEquals ( aaa. getB ( ), "bb" )
assertEquals ( "CompoundInterest{\\n" + " RateAndPeriods{\\n" + "  rate=Rate[0.05]\\n" + "  periods=100}}", ci. toString ( ) )
Assert. assertNull ( RpcUtils. getInvocationId ( inv ) )
assertTrue ( mediator. changeNick ( " Amy " ) )
assertArrayEquals ( test, getInputStream ( ). readLittleFloatArray ( test. length ), 0 )
assertFalse ( txNew. isPresent ( ) )
assertEquals ( expected, actual )
assertThat ( results, hasSize ( 2 ) )
assertArrayEquals ( mxResult. toArray ( ), result, 0.01 )
Assert. assertEquals ( 11, patientCount )
assertEquals ( expected, result )
assertTrue ( sessionID. isEmpty ( ) )
assertFalse ( "LastModified date not in legacy mode", graph. getNode ( "lastModified" ). isEmpty ( ) )
assertThat ( taskLog. getLogLocation ( ), startsWith ( TASK_LOG_LOCATION_PREFIX ) )
assertEquals ( "12-Jan-2017", format. format ( data. getDate ( field. name ( ) ) ) )
assertEquals ( "Offline user was not able to update", 1, users. size ( ) )
assertNull ( presenter. getCurrentCommitter ( ) )
assertEquals ( defaultTimeZone, defaultTimeZone2 )
assertThat ( formatterOutput, sameJSONAs ( expected ) )
assertEquals ( expResult, result )
assertEquals ( diff, result. intValue ( ) )
assertSuccess ( result )
Assert. assertEquals ( "testuser1", username )
assertTrue ( "BasicDocEndpoint should return Object that was passed to the provider.", retObj instanceof BasicDocEndpoint )
assertEquals ( fakeResolver, factory. newNameResolver ( new URI ( "bbb://foo" ) ) )
assertEquals ( 1, correlatedExecutions )
assertTrue ( ex. isPrime ( 37 ) )
assertFalse ( arr. some ( callbackfn ) )
assertEquals ( "", result )
assertThat ( serialisedBadgesDetailsOf ( job ). value ( ), is ( nullValue ( ) ) )
assertDropdownIsAbove ( )
assertFalse ( bean. isDirty ( ) )
assertOut ( "for each (var /** @type {number} */ i in obj)\\n\\tbreak;" )
assertNull ( tuple. getMap ( "field" ) )
assertThat ( m, arrayWithSize ( 1 ) )
assertTrue ( ulonglongValue. longValue ( ) == - 1000000000L )
assertThat ( children, containsInAnyOrder ( clsB, clsC ) )
Assert. assertEquals ( String. format ( "a %s text", this. html ( bb, "red", "colored" ) ), formatter. format ( "a [color=red]colored[/color] text", defaultOptions ( ) ) )
assertEquals ( "Response body is not correct.", USER_IN_DEFAULT_REALM, Utils. makeCallWithBasicAuthn ( principalServlet ( webAppURL ), USER_IN_DEFAULT_REALM, CORRECT_PASSWORD, SC_OK ) )
assertTransformedText ( normalizedText, inputText, "de", segmenter, normalizer )
assertTrue ( d1 instanceof PublicCloneable )
Assert. assertEquals ( new BigRational ( 1L, 3L ), gcd )
assertEquals ( CodecSupport. toString ( Base64. decode ( EX_12_SUFFIX ) ), plaintext )
assertEquivalent ( bufferB, emptyBuffer ( ) )
assertFalse ( df. isAvailable ( ) )
assertEquals ( "[1]", builder. toString ( ) )
assertEquals ( PaxDate. of ( 2012, 13, 5 ), test )
assertThat ( axioms. isEmpty ( ), is ( true ) )
assertSame ( musicPlayer, musicPlayer. getBeanInstance ( ) )
Assert. assertEquals ( "[:d = document.type,:d = blog-post]", p. q ( ) )
assertTrue ( diff. toString ( ), diff. similar ( ) )
assertEquals ( 0, SolutionListUtils. findIndexOfBestSolution ( list, comparator ) )
Assert. assertEquals ( 6, total )
assertEquals ( expected, actual )
assertEquals ( ( short ) 123, deserialize. readShort ( ) )
Assert. assertEquals ( "(aa_change_ssr (aa_point_location (aa_char C) 123) _ (aa_point_location (aa_char A) 124)) ( 3 _ 4 ))", aa_change_ssr. toStringTree ( parser ) )
assertEquals ( expected, converted )
assertEquals ( testUser, defaultUserManager. getUser ( 1235 ) )
assertFalse ( ic. outgoingResponse ( reqDetails, new ResponseDetails ( resource ), req, resp ) )
Assert. fail ( "an exception should have been thrown" )
assertNotNull ( Daily. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
container. assertObservation ( )
assertEquals ( 1, res. getInt ( "nbHits" ) )
Assert. assertEquals ( "Unexpected maximum sequence length", 2, manager. getSourcePolicy ( ). getSequenceTerminationPolicy ( ). getMaxLength ( ) )
Assert. assertNotNull ( savedAppModule )
Assert. assertTrue ( isEqual ( d1, d2 ) )
Assert. assertEquals ( Arrays. asList ( true, true, 4.3, null ), res. getValues ( ) )
assertTrue ( entity. isSubscribe ( ) )
assertEquals ( 0.5, density,.01 )
Assert. assertEquals ( 2, resultList. size ( ) )
assertThat ( subject. getVersion ( ), is ( "1.0.2" ) )
assertEquals ( t, new HttpURL ( s ). toString ( ) )
Assert. assertEquals ( false, retval )
Assert. assertEquals ( "Jumps", result )
assertEquals ( "Boolean value does not match", bookmark. getRead ( ), loadedBookmark. getRead ( ) )
assertThat ( records. size ( ), is ( 1 ) )
Assert. assertEquals ( 404, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertEquals ( mockResponse, testResult )
assertions. startsWith ( null )
assertThat ( EntityExtraMetaData. class, hasValidGettersAndSettersExcluding ( excludeProperties ) )
assertEquals ( sid, destination. getSequence ( ) )
assertThat ( domainPermission. toString ( ), is ( systemPermissionName ) )
assertEquals ( 7, s1. getClausesCount ( ) )
assertNotNull ( template )
assertEquals ( "HTTP @127.0.0.1:9997", httpRequestBuilder. getProxy ( ). toString ( ) )
Assert. assertFalse ( set. isEmpty ( ) )
assertEquals ( authors, result )
assertNull ( drug )
assertFalse ( mvj. get ( "BlockRef" )!= null )
assertEquals ( newService, newRegister. get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 04" ) )
assertThat ( duration. getDuration ( ), is ( equalTo ( Duration. zero ( ) ) ) )
assertFalse ( deserialize ( toTest, "ffff" ) )
assertSame ( target, root. getThis ( ) )
Assert. assertEquals ( expected, actual )
assertPlanComparisons ( testPlan1, testPlan2 )
assertEquals ( expectedScriptNode, actualScriptNode )
Assert. assertEquals ( getUrl ( "redirect" ), finalURL )
Assert. assertEquals ( "GeocodingServlet parameter is not correct", GeocodingServlet. PARAMETER_TYPE, GeocodingServlet. PARAMETER_TYPE )
assertThat ( resources, contains ( orgId, parentOrgId, parentParentOrgId ) )
assertGraphHead ( expected, received )
assertThat ( encoded, stringContainsInOrder ( "<MedicationRequest xmlns=\\"http://hl7.org/fhir\\">", "<contained>", "<Medication xmlns=\\"http://hl7.org/fhir\\">", "<id value=\\"123\\"/>", "<code>", "<coding>", "<system value=\\"urn:sys\\"/>", "<code value=\\"code1\\"/>", "</coding>", "</code>", "</Medication>", "</contained>", "<medicationReference>", "<reference value=\\"#123\\"/>", "<display value=\\"MedRef\\"/>", "</medicationReference>", "</MedicationRequest>" ) )
assertThat ( path. capacity ( ), is ( 3 ) )
Assert. assertThat ( classList. size ( ), is ( 1 ) )
assertEquals ( "1", XPathAfterVisitor. saxVisitedAfterElement. getTextContent ( ) )
assertEquals ( "", found )
assertEquals ( expected, existing )
assertTrue ( result )
assertEquals ( millisecond, millisecond )
assertEquals ( out, frame2 )
context. assertIsSatisfied ( )
assertThat ( result, is ( nullValue ( ) ) )
assertNull ( "current workflow null", presenter. currentWorkflow )
runner. assertValid ( )
assertTrue ( result. isSuccess ( ) )
assertEquals ( new org. apache. http. client. utils. URIBuilder ( SERVICE_ROOT + "/Categories(1)/Products/Model.AllOrders()" ). build ( ), uriBuilder. build ( ) )
assertThat ( result, containsInAnyOrder ( emil, david, emil ) )
assertThat ( duration. dividedBy ( 1 ), equalTo ( TimeDuration. ofSeconds ( 0.5 ) ) )
assertTrue ( "isLoaded should return true if no specific requirement limit is specified for" + " for a list that has at least a single element loaded.", view. isLoaded ( ) )
assertThat ( prettyPrintedXml, equalTo ( TEST_XML_WITH_DOCTYPE ) )
assertTrue ( ( ( List ) workingMemory. getGlobal ( "results" ) ). size ( ) == 2 )
TestUtils. assertEquals ( "MatrixUtils.inverse() returns wrong result", MatrixUtils. createRealIdentityMatrix ( data. length ), result, Math. ulp ( 1d ) )
assertTrue ( "Database driver info does not contain 'PERUN'", driverInfo. contains ( "PERUN" ) )
assertTrue ( isHurricaneSeason )
assertEquals ( count, metric. getCount ( ) )
assertEquals ( "category", request. getEventCategory ( ) )
assertEquals ( "Number of substitution should be same", moduleId, substituter. substitute ( substitutions ). getModuleId ( ) )
assertFalse ( resultMessage ( result, HttpRequestType. POST ), result. passedValidation ( ) )
assertEquals ( "x y", cs. execute ( ssc ) )
Assert. assertEquals ( doppler_EXPECTED, doppler_ACTUAL, delta )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes WHERE CONTAINS(nodes.property,'expression')" ) )
assertEquals ( SkipPlan. Type. SKIP, skip. getType ( ) )
assertEquals ( inputString, outputString )
Assert. assertEquals ( "涓��戒汉姘��惰�", words )
assertThat ( options. toJSON ( ), is ( ( JsonElement ) json ) )
assertEquals ( Object. class. getSimpleName ( ), result )
assertEquals ( expected, actual )
assertEquals ( "(boo 34)\\n", found )
assertEquals ( jedisCluster. get ( "foo" ), "bar" )
assertResultsEqual ( net, 0.0, 1000.0 )
resultListener. assertTestCasePassed ( )
Assert. assertEquals ( "preliminary end of stream", bytes. length / 4, i )
assertEquals ( prevDate, DateUtils. getPreviousDate ( theDate ) )
assertRows ( filePath, 1, TEST_COLUMNS )
Assert. assertEquals ( 1, comparator. compare ( id1, id2 ) )
assertThat ( e. getClass ( ). getName ( ), is ( AuthAccessDeniedException. class. getName ( ) ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertThat ( errors. toString ( ), containsString ( "No issues" ) )
assertEquals ( "S{_a=\\"1\\", _b=\\"2\\"}", x. toString ( ) )
Assert. assertEquals ( 5, range. getQualifyingPageNums ( 10 ). size ( ) )
assertEquals ( HttpServletResponse. SC_INTERNAL_SERVER_ERROR, responseWrapper. getStatusCode ( ) )
assertEquals ( OrderBy. FWD_ROW_KEY_ORDER_BY, plan. getOrderBy ( ) )
assertThat ( getter. invoke ( instance ), is ( equalTo ( true ) ) )
assertNull ( fakeValues. get ( "foo" ) )
assertFalse ( appender. isStarted ( ) )
assertEquals ( "exportA", test )
assertEquals ( Collections. emptyList ( ), solution. getAttributes ( ) )
assertOut ( "a.child('child').removeChild('child')" )
assertEquals ( view, viewName )
assertEquals ( expectedArray, actualArray )
assertThat ( managementService. createJobDefinitionQuery ( ). jobDefinitionId ( jobDefinition. getId ( ) ). singleResult ( ). getOverridingJobPriority ( ), is ( 1701L ) )
assertEquals ( "", result )
Assert. assertEquals ( "<div class=\\"htmlform\\">This shows a logic test for a woman</div>", session. getHtmlToDisplay ( ) )
assertTrue ( response. getNumberOfFeatures ( ). intValue ( ) == 7 )
assertEquals ( "ECHO xpto1", retrievedParent. getName ( ) )
assertFalse ( "Element does not contain the text", ritaBirthdate. getText ( ). contains ( "Birthdate" ) )
assertThat ( options. getGlue ( ), contains ( URI. create ( "classpath:/com/example/steps" ) ) )
assertArrayEquals ( expectedOffsetValues, actualOffsetValues, 1e-10 )
assertTrue ( "No administrator in " + home, home. contains ( "administrator" ) )
assertThat ( specificResourceAllocation. getAssignments ( ), haveHours ( 4, 8, 4, 4, 3 ) )
Assert. assertEquals ( 2, forumToChange. getDisplayOrder ( ) )
Assert. assertTrue ( scopePath. findScopeByName ( ClassScopeDescriptor. NAME ). getProperties ( ). contains ( properties ) )
assertEquals ( 2, processInstances. size ( ) )
assertEquals ( 4, dt. intValue ( ) )
assertThat ( key. getVersion ( ), is ( "1.1.0" ) )
assertFalse ( jxm. isHealthy ( ) )
assertThat ( converter. convert ( formattedToday, Date. class, bundle ), is ( equalTo ( date ) ) )
assertions. isNotEqualTo ( actual )
assertThat ( extract, arrayContaining ( SPECIFIC_VALUE, ANOTHER_SPECIFIC_VALUE ) )
assertFalse ( appender. isStarted ( ) )
assertTrue ( status == 0 )
Assert. fail ( "Not valid" )
assertEquals ( "POINT (0 0)", ClobType. getString ( ( ClobType ) Evaluator. evaluate ( ex ) ) )
assertTrue ( instance. verify ( signature ) )
assertEquals ( expected, uri. toString ( ) )
assertEquals ( namedOutputFault, recordWriter. next ( ) )
assertEquals ( YarnApplicationAttemptState. NEW, applicationAttempt. createApplicationAttemptState ( ) )
objects. assertIsEqualToComparingOnlyGivenFields ( someInfo ( ), actual, other, noFieldComparators ( ), defaultTypeComparators ( ), "name" )
assertEquals ( timeInstant. getTimeMode ( ), TimeInstant. TimeMode. END )
Assert. assertEquals ( expected, serialize )
assertEquals ( expecteds, actuals )
assertRequest ( "GET", "Powerpack/", params )
assertThat ( actual. stream ( ). map ( ValidationResult :: getExplanation ). collect ( Collectors. toList ( ) ), hasItem ( containsString ( "Only self is mapped." ) ) )
Assert. assertEquals ( 200, response. getStatus ( ) )
assertEquals ( shortForm, sfp. getShortForm ( root ) )
assertTrue ( new Matcher ( ). matchNamed ( output, new Matcher ( ProcessInstance. class, "net.cloudml.core.ExecuteInstance" ) ) )
assertEquals ( get ( "propIsTrue" ), actual )
Assert. assertTrue ( fields. size ( ) > 0 )
assertEquals ( asList ( warn ( mdcValues, marker, throwable, message, args ) ), testLogger. getLoggingEvents ( ) )
assertServiceEvent ( ServiceEvent. REGISTERED, TestService. class, 5, TimeUnit. SECONDS )
assertNode ( "/sequenced/teiid/vdbs/YahooUdfTestVdb", "vdb:virtualDatabase", "mix:referenceable", "mode:derived" )
assertTrue ( checkPoint )
assertFalse ( history. isStepBackAllowed ( ) )
assertThat ( ServiceHelper. getServiceDomainUid ( service ), equalTo ( "domain1" ) )
Assert. assertTrue ( "Expect null expression: " + expr, expr. isNullExpression ( ) )
assertTrue ( root. isMapped ( ) )
Assert. assertEquals ( config. getUserID ( ), config2. getUserID ( ) )
assertEquals ( "doi:10.000/0000.0000", work. getId ( ) )
assertThat ( timeTransition. isStarted ( ), is ( false ) )
assertEquals ( "RemoteAddr", entity. getRemoteAddr ( ) )
assertEquals ( 2, integer. get ( ) )
assertNotNull ( result )
Assert. assertEquals ( 3.141592653589793, toml. getDouble ( "foo" ). doubleValue ( ), 0.000001 )
assertEquals ( - 1, first. compareTo ( second ) )
assertThat ( request. getChargePointVendor ( ), equalTo ( stringLength20 ) )
Assert. assertTrue ( EdtfPattern. YEAR_MONTH_DAY_Q. matches ( edtf ) )
assertEquals ( Arrays. asList ( "foo:1234", "bar:1234" ), config. getServers ( ) )
assertNotNull ( cp )
assertEquals ( expResult, result )
assertEquals ( 0, sibs. size ( ) )
assertEquals ( "hello_commons", Strings. replacePrefix ( "hello_commons", map ) )
assertEquals ( "Hello World!\\nAction!\\n", stringBuilder. toString ( ) )
Assert. assertFalse ( "Failure expected true", r. getLeft ( ) )
context. assertIsSatisfied ( )
assertPhantomJSExecutablePropertyShouldBeSet ( resolvedPath )
assertNotEquals ( "", writer. toString ( ) )
assertEquals ( "maxTime", result )
assertEquals ( 1, where ( var. listProperty. get ( 0 ). directProperty. eq ( "target_idspace" ) ). list ( var ). size ( ) )
assertEquals ( numBlocks, numBlocksRead )
Assert. assertEquals ( 0, list. length )
assertTrue ( callbackArgument. getValue ( ) )
assertEquals ( "test", registryKey. getName ( ) )
assertEquals ( "Modification type is not equal to deserialized", mod, modSer )
assertEquals ( rde, bd )
arrays. assertDoesNotContain ( description, actual, values )
assertEquals ( obj. toString ( ), "LSAPR_POLICY_PRIMARY_DOM_INFO{child=null, policy=null}" )
assertEquals ( field. getXrefEntity ( ), xrefEntity )
assertThat ( isValid, is ( false ) )
assertSame ( i, test. getValue ( ) )
assertEquals ( 100, storage. size ( ) )
assertTrue ( "Tagset should have 3 mappings", 3 == files. size ( ) )
assertEquals ( expectedResult, actualResult )
assertEquals ( 0, ExclusionTriggers. ShouldTriggerOnListOfFiles ( "", "dir_1", "", changedfilespath ). size ( ) )
assertPattern ( info, "/api/v1/list-endpoint-api-controller/getList" )
Assert. assertEquals ( "Location[coordinates=[2.12345 41.123456, 2.12345 41.123457], [2.12345 41.123461, 2.12346 41.123461]," + "[2.12345 41.123456, 2.12345 41.123457], [2.12346 41.123461]]", location. toString ( ) )
assertEquals ( obj. toString ( ), "SAMPR_USER_ALL_INFORMATION{UserId:50,PrimaryGroupId:100,UserName:\\"UserName1\\",FullName:\\"FullName1\\"}" )
assertArrayEquals ( result, CompactEncoder. packNibbles ( test ) )
assertThat ( formatter. format ( PlainDate. of ( 1752, 9, 13 ) ), is ( "1.2.13 July 00:00" ) )
Assert. assertEquals ( expResult, result )
assertThat ( client. getMongoUri ( ), is ( "mongodb://localhost:8100" ) )
assertThat ( retrievedPost, is ( equalTo ( post ) ) )
assertValues ( presentFieldList, actual )
assertTrue ( resultString. contains ( "Sonar Auth Complete" ) )
assertNotNull ( image )
assertThat ( replaced, is ( sameInstance ( change ) ) )
assertTrue ( testPropertyLoader. getProperties ( ). size ( ) > 0 )
assertThat ( result, is ( instanceOf ( Success. class ) ) )
assertThat ( target. edgeActions. equals ( edgeActions ), is ( true ) )
Assert. assertEquals ( String. valueOf ( now. getTime ( ) ), string )
assertFalse ( resolver. supportsParameter ( param ) )
assertEquals ( "JSON should match", expected, json )
runner. assertAllFlowFilesTransferred ( DeleteS3Object. REL_SUCCESS, 1 )
assertEquals ( job. getId ( ), "com.zuoxiaolong.niubi.job.sample.spring.job.Job1" )
assertTrue ( matcher. match ( msg, rule ) )
assertThat ( parser. parse ( builder. build ( ) ), equalTo ( parser. parse ( json ) ) )
assertNull ( credentialManager. getKeyPair ( alias ) )
assertEquals ( 1, userWrapperDaoService. getAllUsers ( ). size ( ) )
assertEquals ( "D44F646F2E3A4C2B1B5420F69B6B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C2A4B6C
assertPermanentCount ( playerA, "Barrage Tyrant", 1 )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( expectedQuery, actualQuery )
rule. assertScenarioEnded ( )
assertEquals ( second, sut )
Assert. assertThat ( methodMatcher. matches ( methodInvocationTree ), is ( false ) )
Assert. fail ( "Shouldn't be able to update dataset with wrong name " + datasetName )
assertThat ( ListNumbers. toListNumber ( array ), equalTo ( ( ListNumber ) new ArrayDouble ( array ) ) )
assertEquals ( decoded. publicKey, publicKey )
assertEquals ( "JSESSIONID=1234; path=" + servletPath, rsp. getHeaderField ( HEADER ) )
Assert. assertTrue (! file. exists ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "Wrong property value (path=" + path + ")", "Orig", found )
assertTrue ( unitMoveIntents. isEmpty ( ) )
assertThat ( noOfSolutions, is ( 81 ) )
assertTrue ( output. contains ( TEST_ZK_CHILD1_NODE + Zkrw. DEFAULT_LIST_DELIMITER ) && output. contains ( TEST_ZK_CHILD2_NODE + Zkrw. DEFAULT_LIST_DELIMITER ) && output. contains ( TEST_ZK_GRANDCHILD_NODE + Zkrw. DEFAULT_LIST_DELIMITER ) )
assertThat ( request. getIdTag ( ), equalTo ( idTag ) )
assertEquals ( "value1 value2", builder. toString ( ) )
assertNotNull ( tag )
assertTrue ( SmiMatcher. isBiphenylene ( smi ) )
assertTrue ( true )
assertThat ( modelInstance, notNullValue ( ) )
assertEquals ( expResult, result )
assertNotNull ( nodeMap )
runner. assertValid ( cfProvider )
assertSame ( e, CRestException. handle ( e ) )
assertEquals ( expected, actual )
assertEquals ( "decimal", shortForm )
assertFalse ( list. isEmpty ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n  return React.createElement('div', { 'id': 'foo' });\\n}" )
assertEquals ( 500, node. endTime ( ) )
assertEquals ( Arrays. asList ( new byte [ ] { 0, 0, 5 } ), captures )
assertEquals ( EventType. RS_ZK_REGION_FAILED_OPEN, data. getEventType ( ) )
assertNotNull ( result )
XMLAssert. assertXMLEqual ( "<stringParameterFilter>\\n" + "  <key>TEST</key>\\n" + "  <defaultValue>Default</defaultValue>\\n" + "  <normalize>\\n" + "    <case>UPPER</case>\\n" + "  </normalize>\\n" + "  <values>\\n" + "    <string>foo</string>\\n" + "    <string>Bar</string>\\n" + "    <string>BAZ</string>\\n" + "  </values>\\n" + "</stringParameterFilter>", xs. toXML ( filter ) )
assertThat ( result, is ( false ) )
Assert. assertEquals ( Permission. INVALID, ownerAce. getConsumerPermission ( ) )
Assert. assertEquals ( - 1, compareResult )
assertEquals ( FOUND_LOGOUT, action. getCode ( ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  var /** @type {Function} */ f = org.apache.royale.utils.Language.closure(this.b, this, 'b');\\n  c(f);\\n}" )
assertThat ( token. getType ( ), is ( PCRELexer. NewLineSequence ) )
assertThat ( client. hello ( "World" ), is ( "Czesc" ) )
assertSame ( loader, bf. getAppserverClassLoader ( ) )
assertNotNull ( PropertyUtils. getProperty ( result, "auditInfo" ) )
assertTrue ( resultMessage ( res, PUT ), res. passedValidation ( ) )
assertThat ( "response contains a non-empty fullName", StringUtils. isNotBlank ( response. getFullName ( ) ) )
assertResponse ( response, 204 )
assertThat ( target. exists ( ), is ( true ) )
assertThat ( longProperty, is ( equalTo ( 42L ) ) )
assertThat ( runtimeInfo. getRuntimeClassName ( ), is ( "org.talend.components.${componentNameLowerCase}.runtime.${componentNameClass}Runtime" ) )
assertNotNull ( "Schema not found", schema )
Assert. assertEquals ( context, MessageTracker. NO_OP_CONTEXT )
assertArrayEquals ( new String [ ] { "a", "ccc", "bb" }, strings )
assertNull ( cache. get ( key ) )
assertTrue ( cleanExit )
assertEquals ( Math. sqrt ( 5 ), p1. distance ( p2 ), PRECISION )
assertEquals ( "10.1234-1ASCDU", d. getPrefix ( ) )
assertErrorResponse ( response, ErrorResponse. ErrorType. INVALID_INPUT, "INVALID_ACCESS_TOKEN" )
assertEquals ( 4, results. size ( ) )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
EvictorTestUtils. assertEvictionPlanValid ( sessionId, blockId, plan, mMetaManager )
assertMockEndpointsSatisfied ( )
assertEquals ( explicitList, defaultedList )
Assert. assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 3</th>\\n" + "</tr>\\n" + "</table>", TableTestUtils. getHtml ( this. tableVerifier, "table" ) )
assertEquals ( md. getMyString ( ), "mymy" )
assertIsSemver ( semver, version, 1, 2, 3, null, new String [ ] { "beta", "11" }, "sha.0nsfgkjkjsdf" )
assertEquals ( 500, getCap. get ( 0 ) )
assertEquals ( "47.5678", csvValues. get ( "lat" ) )
assertReflectionEquals ( topicDraft, result )
Assert. assertEquals ( "<http://p><foo/></http://p>", writer. toString ( ) )
assertTrue ( usl. getPenStroke ( ). getDashArray ( ). equals ( "1 -5 3" ) )
Assert. fail ( "Expect add partition to fail" )
assertSame ( "incorrect object returned", people, result )
assertFeatureValues ( expected, testQuery, testText, getChain ( ) )
Assert. assertEquals ( "Value is incorrect", map, value )
assertFalse ( result )
context. assertAuthzException ( statement, "USE default" )
assertTrue ( hasLineStartingWith ( "longest-mention: Bill C.*", lines ) )
Assert. assertArrayEquals ( new int [ ] { 1, 2 }, actual )
assertEquals ( 0, result. size ( ) )
assertEquals ( "default", processEngine. getName ( ) )
assertEquals ( "", value )
assertArrayEquals ( new int [ ] { 0, 0, 1 }, closed )
assertEquals ( 5, css. getSeverity ( ) )
assertEquals ( "", Bytes. toString ( res ) )
Assert. fail ( "Message with " + s + " is not allowed." )
assertEquals ( 4, BufferTools. indexOfTerminator ( buffer, 0, 2 ) )
Assert. assertEquals ( xtreemfsValue, javaValue )
assertEquals ( 2, business. findGreatest ( ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( optimizedQuery, query2 ) )
Assert. assertEquals ( expectedData, streamEvent. getData ( ) )
assertEquals ( Arrays. asList ( "aaa", "bbb", "ccc" ), topics )
assertThat ( writer. toString ( ), is ( "\\"a\\"b\\"\\\\\\"a\\b\\\\\\"c\\"" ) )
assertEquals ( "<?xml-stylesheet type='text/xsl' href='http://lux.io/xsl?q=error&msg=An error occurred&amp;id=0&amp;format=json&minSupportCount=50&maxSupportCount=50'/>" + "<results><error>An error occurred</error></results>", writer. toString ( ) )
assertCancelActionMessage ( actionId )
assertFalse ( cnf. evaluate ( vertex ) )
assertEquals ( "alt 2\\n", found )
assertNotNull ( tpmAttestation )
assertEquals ( expected, result )
assertNumEquals ( 0, getCriterion ( ). calculate ( series, new BaseTradingRecord ( ) ) )
assertEquals ( expected, result )
assertThat ( relId, is ( not ( nullValue ( ) ) ) )
assertEquals ( 3, lines. size ( ) )
assertTrue ( axis. isTickMarksVisible ( ) )
assertEquals ( presenter. order, presenter. orderFromView )
assertNotNull ( woodcuttingPlugin. getSession ( ) )
assertThat ( syncData, is ( equalTo ( expectedSyncData ) ) )
assertThat ( target, notNullValue ( ) )
assertEquals ( s, UrlUtils. urlDecode ( encoded ) )
assertEquals ( requestUri, callback. getRequestUri ( ) )
assertThat ( "missing owner shall be detected", validation. hasErrorAbout ( "no", "owner" ) )
assertEquals ( mockResponse, testResponse )
assertEquals ( 2, keyspaces. size ( ) )
Assert. fail ( "Missing required input" )
assertSame ( s, m. getSubject ( ) )
assertEquals ( html, sanitized )
assertEquals ( expected, actual )
assertEquals ( 0, entityLog. size ( ) )
assertHasError ( result, PlanningExecutionResult. ErrorCode. TASK_MODIFIED_SINCE_PLAYING_TASK, errorMessage, CONTAINER_ID )
Assert. assertEquals ( ( ( CountingReceiver ) receivers [ i ] ). msgCount, 0 )
Assert. assertEquals ( input, oAuthMachine. readJson ( new String [ ] { "sub" } ) )
assertThat ( manager. registerVoter ( "foo", "bar" ), is ( nullValue ( ) ) )
assertFalse ( topic. isPlugable ( ) )
assertEquals ( "Limit name length does not match", nodeName. length ( ), validateNodeNameLength ( nodeName ) )
assertTrue ( RelaxNgSchemaValidator. validateAgainstRelaxNg ( actualXml ) )
assertEquals ( 25 - 3, execute ( Artist. class, parsed1 ). size ( ) )
assertEquals ( expected, weekModel. getValue ( i ) )
assertEquals ( 2, rs. getRules ( ). size ( ) )
assertEquals ( expectedSource, instrumentedSource )
assertEquals ( root, result )
org. junit. Assert. assertEquals ( "Not all patterns sent", expectedPatterns, count. get ( ) )
assertEquals ( sz, z, FastInteger. parseUint ( sz ) )
assertNotNull ( informe. getId ( ) )
assertTrue ( cut. isPositive ( - 10 ) )
assertThat ( "Body is incorrect!", body, is ( equalTo ( "message" ) ) )
assertNull ( record. get ( c. name ( ) + "Test" ) )
assertThat ( result. getType ( ), is ( "OutPacket" ) )
assertTrue ( p. hasTag ( "tag" ) )
Assert. assertEquals ( FastMath. toDegrees ( x ), value. toDegrees ( ). getReal ( ), epsilon )
Assert. assertEquals ( inputJson, deserializedJson )
assertOut ( "public class A extends B implements IA, IB, IC {\\n}" )
assertEquals ( persons. get ( key ), result. get ( key ) )
service. callCounter. assertCalls ( "{findIds=2, getItemCount=2, getItems=6}" )
assertOutput ( expected )
Assert. assertTrue ( score > 0 )
assertArrayEquals ( this. ipv6MsgWithDistinguishergBytes, ByteArray. readAllBytes ( aggregator ) )
assertEqualsIgnoreWhitespace ( expected, drl )
tester. assertRenderedPage ( HomePage. class )
assertEquals ( pl. get ( "filename" ), "\\\\a\\\\b\\\\c.txt" )
assertEquals ( selectedInterval. getName ( ), "Engineering" )
assertEquals ( CREATED. getStatusCode ( ), response. getStatus ( ) )
assertArrayEquals ( data, stream. toByteArray ( ) )
Assert. assertEquals ( "(nt_point_location (nt_base_location + (nt_number 123)) (nt_offset + (nt_number 4)))", loc. toStringTree ( parser ) )
Assert. assertTrue ( "No warning was found for 2nd time frame", found110Warning )
assertNull ( channel21. readOutbound ( ) )
assertEquals ( "wrapping renderer must use list's default on null", defaultRenderer. getClass ( ), renderer. getDelegateRenderer ( ). getClass ( ) )
assertEquals ( producedJson, correctJson )
assertTrue ( result. isSuccess ( ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( optimizedQuery, initialQuery ) )
descriptor. assertValid ( )
assertEquals ( "Version!", manager. getTransportVersionString ( ) )
assertEquals ( 1, handler. recover ( new Object [ ] { "Dave" }, new RuntimeException ( "Planned" ) ) )
assertEquals ( expecting, t. toStringTree ( ) )
assertEquals ( "", result )
assertEquals ( topic. getUserPostCount ( new Post ( new JCUser ( ), "" ) ), 0 )
assertNotNull ( toolSpec )
arrays. assertStartsWith ( description, actual, null )
ReflectionAssert. assertReflectionEquals ( except, result )
assertEquals ( lbl. size ( ), lbl2. size ( ) )
Assert. assertEquals ( "foo123", e. evaluate ( jc ) )
assertEquals ( "OK", invoke. invoke ( null ) )
assertEquals ( "2015-10-05", mo. getDateWrittenElement ( ). getValueAsString ( ) )
assertEquals ( "The view paths aren't correct", "loadrules", scm. getViewPaths ( null, null, launcher ) [ 0 ] )
assertPutFails ( occurrence, OntopiaRestErrors. MANDATORY_FIELD_IS_NULL )
assertEquals ( 0, m. size ( ) )
assertEquals ( COSBoolean. FALSE, victim. nextBoolean ( ) )
assertEquals ( CALLBACK_URL + "/login", casClient. getLoginUrl ( ) )
assertEquals ( "One", doc. head ( ). text ( ) )
Assert. assertNotNull ( hm. get ( "swagger" ) )
Assert. assertEquals ( expectedSpec, actualSpec )
Assert. assertEquals ( ids, knownItems2. get ( ids. toArray ( new CharSequence [ ids. size ( ) ] ) ) )
assertArrayEquals ( getPixels ( expected, 0, 0, expected. getWidth ( ), expected. getHeight ( ), null ), getPixels ( actual, 0, 0, actual. getWidth ( ), actual. getHeight ( ), null ) )
assertThat ( ClockInterval. parseISO ( "PT1H55M30S/141530" ), is ( interval ) )
assertTrue ( "Logger name doesn't match", logger. getName ( ). equals ( loggerName ) )
Assert. assertEquals ( originalFont. getOs2 ( ). getVersion ( ), parsedFont. getOs2 ( ). getVersion ( ) )
Assert. assertEquals ( "user_id", ctx. getSqlStatement ( ) )
assertNotNull ( emailAlerter )
assertEquals ( asList ( "O", "�", "�" ), stringsToSort )
assertEquals ( Lists. newArrayList ( 20, 30, 21 ), expResult )
assertThat ( NF. numberNode ( BigDecimal. ONE ), is ( sut ) )
assertFalse ( Dialects. isDialectEnabled ( dialect ) )
assertEquals ( 2, constraints. size ( ) )
Assert. assertEquals ( FrameworkStartLevel. WEB_BINDER_INITIALIZED, startLevel. getStartLevel ( ) )
assertEquals ( SampleLocations. STOCKHOLM, cargo. getDelivery ( ). getLastKnownLocation ( ) )
assertTrue ( connection. isAuthenticated ( ) )
compiler. assertErrorsOnLines ( "example/Test.java", diagnostics, 7 )
Assert. assertEquals ( s, new String ( expanded ) )
assertEquals ( "Range results for " + i, new IndexEntry ( Key. of ( ( long ) i ), new File ( "File0" ), 0l ), new IndexEntry ( Key. of ( startOffset ), new File ( "File1" ), 1l ) )
assertEquals ( 2, rsp. getHits ( ). getTotalHits ( ) )
assertThat ( sel, is ( dataProperty ) )
AssertionUtils. multiAssertEquals ( createAsDocument9, response5. getResponseObject ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday", days )
assertEquals ( null, actual )
assertNoViolations ( constraintViolations )
assertEquals ( deviceUnderTest. deviceTwinStatus, TwinStatus. NOT_FOUND )
Assert. assertEquals ( expectedGeoJson, geoJson )
assertThat ( storyText, equalTo ( "Load from relative file dummy.story" ) )
assertTrue ( closed. await ( 2, SECONDS ) )
assertTrue ( result )
Assert. assertEquals ( 2, result. length ( ) )
PatternAssert. assertThat ( H2DB_CONNECTION_STRING_PATTERN )
Assert. assertEquals ( "ZZZZ", FastqTools. convertQualities ( fastq, FastqVariant. FASTQ_SOLEXA ) )
assertEquals ( "\\n# Level1\\n# Level2\\n", writer. toString ( ) )
assertEquals ( 0, validator. validate ( EntityNames. TEACHER_SACHOL_ASSOCIATION, teacherSchoolAssociations ). size ( ) )
assertThat ( validPeriods, definedBy ( StartOfTime. create ( ), contemporaryExample ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( "EventBus should have received events for the modules", p. getEventBus ( ). getMenuEvents ( ). size ( ) == 1 )
assertEquals ( "Run Id should be 0", 0, listPage. getTotalRuns ( ) )
Assert. assertEquals ( EventConstants. EVENT_USER_CREATED, userCreatedEvent. getEventType ( ) )
assertEquals ( 1, tg. getGraphElements ( ). size ( ) )
assertNotNull ( result )
assertEquals ( expected, query )
Assert. assertEquals ( element. getText ( ), "click me" )
Assert. assertNull ( testsuites )
assertThat ( serializer, is ( instanceOf ( IgnoringSerializer. class ) ) )
assertThat ( rs. size ( ), equalTo ( 3 ) )
assertEquals ( simpleFormat + " " + year, formatted )
assertTrue ( monitor. isSendQueueWarning ( ) )
assertThat ( exported, is ( expected ) )
assertThat ( xml, hasXPath ( "/daily-values/total-fat", is ( "65" ) ) )
assertNotNull ( token )
assertThat ( add, is ( 7.5 ) )
assertEquals ( p. getNumber ( ), bs. getPlayerNumber ( ) )
assertEquals ( "  EAP  Test" + j, 1.0e-4, se, 1e-4 )
assertThat ( testList. indexOf ( before ), is ( nullValue ( ) ) )
assertTail ( input, 100, expectedOutput )
assertEquals ( true, xmlHelpers. validateSignature ( document ) )
assertNotNull ( Credential. reader ( ). read ( ) )
assertEquals ( "091536854775807", block. getTime ( ). toGMTString ( ) )
assertions. isNotEqualTo ( actual )
assertEquals ( "2007-01-02T00:00:00Z", formatterMember )
Assert. assertEquals ( SizeUnit. GIGABYTE. toByte ( 100 ), vo. getUsedCapacity ( ) )
assertThat ( resultedQuery, is ( expectedQuery ) )
Assert. assertNotNull ( limitOrder )
assertNotNull ( mav )
assertPrefetchResult ( result )
assertTrue ( check. missingHeaders. isEmpty ( ) )
Assert. assertNotNull ( user )
TestUtils. assertEquals ( new Array2DRowRealMatrix ( testDataPlus2 ), m. scalarAdd ( 2d ), entryTolerance )
Assert. assertEquals ( numBlocks * replication, totalBlockLoads )
Assert. assertEquals ( "The geocoded city text should return the updated one.", cityText, cityData. getFirstCityInText ( ) )
Assert. assertEquals ( "9E9F9AABEHBWJYMJYYMJYMJYYMJYMJYNJYMJYNJYMJYNJYRJYYMJYRJYYMJYYRJYYMJYZYWJYZYWJYZYWJYZYWJYZYWJYZBJYWMJYOJYRJYRJYEHBWJYMJYMJYMJYMJYMJYMJYLJYMJYNJYSJYNJYRJYRJYRJYRJYSJYRJYSJYSJYRJYSJYWJYZYWJYZYWJYZYWJYZYWJYWJYWJYRJYSJYRJYSJYSJYSJYMJYLZYWJYSJYMJYLJYSJYRJY
assertEquals ( "Invalid Address", "127.0.0.1:20971", slEndpoint. getAddress ( ) )
assertEquals ( - 3L, result )
assertEquals ( HttpStatusCode. ACCEPTED. code, response. getStatus ( ) )
assertEquals ( Rational. ONE, result )
assertTrue ( testFailed. isEmpty ( ) )
assertThat ( axioms. isEmpty ( ), is ( true ) )
Assert. assertEquals ( expectedResult, resultString )
assertEquals ( expResult, result )
assertFailureValue ( "missing (3)", "y" )
Assert. assertTrue ( list. isEmpty ( ) )
assertNotNull ( tourInstance )
assertEquals ( "invalid update", 0, resp. getCode ( ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertTrue ( BatchUtil. evaluate ( batch ) )
assertNotNull ( doc )
assertEquals ( CUSTOM_PRIORITY, seedJob. getPriority ( ) )
Assert. assertEquals ( "custom-value", mf. getMainAttributes ( ). getValue ( "Custom-Entry" ) )
assertNotNull ( new FileToXMLTransformer ( dir ). create ( ) )
assertEquals ( "[]", Iterables. toString ( tree. getKeysContainedIn ( document ) ) )
assertNotNull ( scriptStatement )
assertEquals ( graphHeadIn, EPGMGraphHeadSerializerTest. serializeAndRecover ( graphHeadIn ) )
assertEquals ( 0, ProfileLogger. dump ( ). size ( ) )
assertEquals ( clockTime, clockTime2 )
assertEquals ( expResult, result )
assertDates ( p1, p21, p22, actual )
assertEquals ( 1.5, prediction )
assertTrue ( buildWithFromArgs ( script ) )
assertEquals ( "Wrong result", Arrays. asList ( values ), config. getStringArray ( KEY_PREFIX ) )
assertEquals ( fixture. get ( "apps" ). size ( ), response. get ( "apps" ). size ( ) )
Assert. assertEquals ( dcClusterShards. get ( 0 ). getClusterInfo ( ). getClusterName ( ), clusterMeta. getName ( ) )
Assert. assertTrue ( msg, Arrays. deepEquals ( esperado, resultado ) )
Assert. assertNotNull ( result )
assertE ( "�尖�尖�尖�尖�尖��" + "�尖��   ��" + "��    ��" + "��    ��" + "�尖�尖�尖�尖��" )
assertNotNull ( OgmSerializerBaseTest. clone ( m ) )
assertFalse ( evaluator. shouldProxyHost ( "1.232.12.3" ) )
assertTrue ( b )
assertFutureCancelOk ( future )
assertEquals ( 54321, settings. getSystemColor ( ) )
assertEquals ( expected, actual )
Assert. assertNotNull ( migrationPlan )
assertEquals ( "JPEG", TestUtils. getFormatName ( new ByteArrayInputStream ( baos. toByteArray ( ) ) ) )
assertEquals ( 12345 * 1000 * 1000, result )
Assert. assertEquals ( 1, stateContext. getData ( ) )
assertEquals ( 0, records. size ( ) )
Assert. assertEquals ( "Huawei_Gsm", vertexTraversal ( this. sqlgGraph, softwareVersion ). in ( "softwareVersion_vendorTechnology" ). next ( ). value ( "name" ) )
assertEquals ( expectedFirstname, actualFirstname )
assertEquals ( 10, execCount. get ( ) )
Assert. assertEquals ( "div", div. getNodeName ( ) )
Assert. assertEquals ( "The <word content='fox'>jumps over</word>", hl. makeWellFormed ( xmlContent ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION, testConfiguration. get ( "dfs.replication.initial" ) )
assertThat ( span. to ( SECONDS ), is ( 17L ) )
Assert. assertEquals ( xmlEsperado, referenciada. toString ( ) )
assertEquals ( 0, consumerPrefetch. retriesAttempted )
assertEquals ( "Mismatched data", expected, res )
Assert. assertEquals ( 0, queue. size ( ) )
assertTrue ( "Initiator role should have disapprove message", document. isActionPerformed ( ) )
assertEquals ( 0, ( ( Object [ ] ) emptyArray. getArray ( ) ). length )
assertTrue (! result )
assertThat ( uriContent, is ( jsonArrayNode ( ) ) )
assertFalse ( abstractRule. test ( patent ) )
assertNull ( converter. getAsObject ( facesContext, new UIPanel ( ), null ) )
Assert. assertTrue ( "collection should have inherit set", isInherit )
assertThat ( sampleEntities. getTotalElements ( ), equalTo ( 0L ) )
assertEquals ( on, r, es. getCentrality ( s ), 0.01 )
assertThat ( feel. getFeature ( "foo" ), is ( instanceOf ( DoCompileFEELProfile. class ) ) )
assertThat ( result, is ( instanceOf ( Success. class ) ) )
assertFalse ( dnsMessage. getHeader ( ). isQuery ( ) )
assertSame ( GBP_2_34, test )
assertEquals ( expecting, result )
assertEquals ( 6, result1. size ( ) )
assertEquals ( expectedFileName, message )
assertThat ( idAndVersion1. compareTo ( idAndVersion2 ), is ( - 1 ) )
assertEquals ( "Expected 0 results!", 0, count )
assertEquals ( numObjects, numCollections. get ( ) )
assertEquals ( "foo", ReflectionInstanceCreator. class. getMethod ( method, new Object [ ] { } ). invoke ( ) )
assertThat ( response, is ( "" + "% The GRS sources are subject to Terms and Conditions.\\n" + "\\n" + "person:        TP1-TEST\\n" + "\\n" + "descr:          \\n" + "source:         TEST-GRS\\n" + "\\n" + "source-info:         TEST-GRS\\n" + "\\n" + "remarks:        * THIS OBJECT IS MODIFIED\\n" + "\\n" + "remarks:        TEST-GRS\\n" + "\\n" + "remarks:        * THIS OBJECT IS MODIFIED\\n" + "\\n" + "remarks:        * THIS OBJECT IS MODIFIED\\n" + "\\n" + "remarks:        * THIS OBJECT IS MODIFIED\\n" + "\\n" + "remarks:        * THIS OBJECT IS MODIFIED\\n" + "\\n" + "remarks:        * THIS OBJECT IS MODIFIED\\n" + "\\n" ) )
assertEquals ( ABC, buffer. removeCString ( GSM7BIT ) )
assertThat ( ioService. getPermissions ( file ), is ( nullValue ( ) ) )
assertEquals ( 2, bs. capacity ( ) )
assertTrue ( Pattern. matches ( "(?s).*<html>\\\\s*<head>\\\\s*<title>\\\\s*component.jsp\\\\s*</title>\\\\s*</head>\\\\s*<body>\\\\s*<h1>\\\\s*component\\\\s*rendered\\\\s*<p>\\\\s*<strong>\\\\s*<em>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*id=\\".*\\"\\\\s*value=\\"value\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<br>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*value=\\"value\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<br>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*id=\\".*\\"\\\\s*value=\\"value\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<br/>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*value=\\"value\\"\\\\s
assertEquals ( combinationsExpected, result )
Assert. assertTrue ( referredGraphs. toArray ( ) [ 0 ]. equals ( DEFAULT_GRAPH ) )
assertEquals ( requestString, IOUtils. toString ( response. getReader ( ) ) )
assertEquals ( s. fromReal ( 2 * - 4 + 3 * 6 + 5 * 7 ), t1. dotProduct ( t2 ), 1e-13 )
assertThat ( Template. parse ( markup ). render ( assigns ), is ( expected ) )
assertFalse ( HttpTestUtils. semanticallyTransparent ( resp2, result ) )
assertTrue ( "Returned object should be an TransformedQueue.", queue instanceof TransformedQueue )
Assert. assertEquals ( "Should have 1 cookie", 1, result. size ( ) )
assertTrue ( "Wrongly reduced InOid filter: " + query. getFilter ( ), query. getFilter ( ) instanceof NoneFilter )
assertTrue ( props. size ( ) > 0 )
assertEquals ( 0, topic. getUserPostCount ( ) )
assertThat ( result, is ( expectedAxiom ) )
assertThat ( user. getId ( ), is ( notNullValue ( ) ) )
assertThat ( Integer. parseInt ( codepoints ), is ( 0x0061 ) )
assertNull ( remainingBuffer )
assertEquals ( PlanningExecutionResult. Status. ERROR, result. getStatus ( ) )
assertThat ( copyObjectRequest. getCopyProgress ( ), is ( transferProgress ) )
assertTrue ( tweets. length == 22 )
assertEquals ( "from SURVEY SURVEY with (NOWAIT) from SURVEY SURVEY2", query. toString ( ) )
Assert. assertEquals ( 7, lineCount )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20100110</date>" + "<item><id>222</id><amount>1</amount></itemn></order>", xml )
assertTrue ( runtimeService. createProcessInstanceQuery ( ). singleResult ( ). isSuspended ( ) )
Assert. assertTrue ( true )
Assert. assertEquals ( instantiatedMethod. getGeneratedClass ( ). toString ( ), iterableIntegerClass. toString ( ) )
assertEquals ( value, ( Double ) 20 )
assertEquals ( String. valueOf ( ReturnCode. NO_SPEECH. code ( ) ), firstEvent. getParameter ( "rc" ) )
assertThat ( extractMonitorables ( adapter ). get ( MIN ). get ( ), Matchers. < Object > is ( newMin ) )
assertEquals ( "", result )
Assert. assertEquals ( expect, text )
Assert. assertEquals ( in, out )
assertEquals ( STATUS_BAD_REQUEST, resp. getStatus ( ) )
assertEquals ( BigInteger. TEN, fromJson )
assertEquals ( destination, OutlineUtils. toPageDestinationDestination ( victim, catalog ). get ( ) )
assertThat ( date. with ( YEAR, 999999999 ), is ( PlainDate. of ( 999999999, 2, 28 ) ) )
assertNotSame ( asyncReconnectBeforeReset, asyncReconnectAfterReset )
Assert. assertEquals ( BatchStatus. FAILED, jobExecution. getBatchStatus ( ) )
Assert. assertEquals ( "All is well", message )
assertThat ( anonymized, is ( "Cookies: Parsing b[]: remember-me=MTAI4MjHY0MjcXxMTpjM2U0Zjk3OWQwMjk0; Auth-Type=http; Auth-Token=C8wSA1AXvpFVjXCRGKryWtIIZS2TRqf69aZb<APIKEY>@<USERNAME>:<PASSWORD>@ <USERNAME>:<PASSWORD>@<APIKEY>@<USERNAME>:<PASSWORD>@</USERNAME>@" ) )
Assert. assertEquals ( "Generic<T>", logAdapter. asString ( new Generic < > ( ) ) )
assertTrue ( observer. await ( tc ) )
Assert. assertEquals ( "1", value )
assertEquals ( "double: 7,654,321.425", b. primitiveDouble ( 7654321.425 ) )
assertThat ( options. getCredentialsProvider ( ), is ( URI. create ( "http://null.s3.org" ) ) )
Assert. assertEquals ( "9f3d4e8b9f9f9e0d49f9e0f9a9d3b9e0f9a9d3b", fp )
assertEquals ( "the artifact must be downloaded", true, new File ( localRepo, "ant/ant/1.5.1/ant-1.5.1.jar" ). exists ( ) )
Assert. assertSame ( dElem, mergeElem )
assertThat ( testOutcome. getIgnoredCount ( ), is ( 1 ) )
assertTrue ( a. isDone ( ) )
assertTrue ( runtimeService. createProcessInstanceQuery ( ). singleResult ( ). isSuspended ( ) )
Verify. assertSize ( 6, pets )
Assert. assertEquals ( WritableUtils. val ( "s0" ), udf. evaluate ( args ) )
Assert. assertEquals ( true, a. contains ( b ) )
assertEquals ( ResponderOptions. MATCH_ALL_BINDING_KEY, responderOptions. getHashBindingKey ( ) )
assertEquals ( ROUTE_KEY, instanceIdentifier. firstKeyOf ( VpnRoute. class ) )
assertEquals ( AssetPathToFilterConfigMapper. XLIFF_FILTER_CONFIG_ID, filterConfigId )
assertEquals ( AuthType. NOSASL, u. getSecurityAuthenticationType ( ) )
assertions. containsSequence ( sequence )
assertTrue ( ok )
assertEquals ( String. format ( "Expected %s, actual %s", e, a ), e, a )
assertTrue ( "List size mismatch across lists", words1. size ( ) < words2. size ( ) )
assertNull ( ebl. listener )
assertEquals ( Arrays. asList ( "ok1", "ok2" ), list )
assertNull ( conceptService. getConceptProposal ( conceptProposalId ) )
assertTrue ( "Failed to calculate Ada gradient", grad. getValue ( 0 ). getDouble ( 0 ) < 1e-3 )
Assert. assertEquals ( reply, receivedReply )
assertEquals ( 2, Solutions. bestOf ( solutions ). getRoutes ( ). size ( ) )
assertEquals ( qtys_10, receipt. getQUANTITYQty ( ) )
assertTrue ( or. isDefined ( ) )
assertParsedMessages ( "8=FIX.4.4|9=82|35=A|34=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVER|98=0|108=30|141=Y|383=8192|10=080|8=FIX.4.4|", "4=1|49=CLI|52=2014|4=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVE|R|112=TEST123|10=245|" )
assertThat ( found, is ( false ) )
assertArrayEquals ( "hello world", helloWorld, out. toByteArray ( ) )
assertEquals ( "date", type. getDataType ( 0, 0, 0, false ) )
assertScriptEquality ( expectedScript, actualScript )
assertEquals ( d. readObject ( ), objectStrategy. deserialize ( d ) )
assertTrue ( cache. remove ( key, value ) )
assertThat ( restored. isNull ( ), is ( true ) )
assertEquals ( 0, alertService. hasAlerts ( ). size ( ) )
assertEquals ( "From is not properly parsed", new Date ( 5L ), mapper. readFrom ( columns ) )
Assert. assertEquals ( "Thread count should be correct due to new run", 10, freeThreads )
assertEquals ( out, expectedResults [ i ], 0.0 )
assertEquals ( "info@effektif.com", value )
assertEquals ( persistenceModel, persistenceModel2 )
Assert. assertNotNull ( "Reply message was null on reply queue: " + replyQueue, reply )
assertEquals ( 1, repository. getCommits ( ). size ( ) )
assertThat ( impl. isPermitted ( Sets. newLinkedHashSet ( Arrays. asList ( "repoName", "repoName2" ) ), "repoFormat", BreadActions. READ, variableSource ), is ( true ) )
assertThat ( result, containsString ( "<type>basic</type>" ) )
assertEquals ( "valueA", pc. getString ( "keyA" ) )
this. assertLoadBlobViaTuples ( tuples, false, true )
assertEquals ( res, String. class )
assertEquals ( CREATED. getStatusCode ( ), actual. getStatus ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertTrue ( "Alternative template file not generated", templateFile. exists ( ) )
Assert. assertEquals ( "Duke Oracle", person. get ( 0 ). getName ( ) )
assertEquals ( result, new Pair < > ( 1, 1 ) )
assertEquals ( "Used the DemoService as default.\\r\\nYou can cancel default service by command: cd /", result )
assertThat ( responseStep. response. getResult ( ), equalTo ( crd ) )
assertEquals ( 3, count )
assertThat ( attributeValueNs, is ( "false" ) )
Assert. assertEquals ( "ZZZZ", FastqTools. convertQualities ( fastq, FastqVariant. FASTQ_SANGER ) )
Assert. assertEquals ( 1, E. E ( ). size ( ) )
assertEquals ( expecteds, actuals )
assertTrue ( ca. getFallbackParameters ( ). equals ( ap2 ) )
assertEquals ( outputExpected, certificate. getHash ( ) )
Assert. assertEquals ( "/css/ui.css", ModuleUtil. getPathForResource ( module, path ) )
assertEquals ( expected, exported )
Assert. assertEquals ( 0, ret. size ( ) )
assertNotNull ( reporter )
assertEquals ( expOut, out )
Assert. assertEquals ( boundingBoxOf, new Rectangle ( 0f, 0f, 20f, 30f ) )
assertEquals ( false, result )
assertEquals ( 1, messages. size ( ) )
Assert. assertEquals ( IdentityConstants. BAD_REQUEST, IdentityResponseWrapper. buildFaultMessage ( responseMock ). getCode ( ) )
assertThat ( command. accept ( state ), is ( false ) )
assertFalse ( user. isPresent ( ) )
assertEquals ( String. valueOf ( me. getCode ( ) ), me. getNick ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPdf, cmpPdf, destinationFolder, "diff" + testName + "_" ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED, status )
assertEquals ( RESULT_COUNT, actual )
Assert. assertEquals ( "did not get expected packing instruction", sb. toString ( ), dataObjInp. getParsedTags ( ) )
sets. assertDoesNotContain ( description, newLinkedHashSet ( ), values )
assertEquals ( expected, stats1 )
assertEquals ( 188, result )
assertNotNull ( adviceController )
assertEquals ( z1, z2 )
assertEquals ( "Resolved", "scan-dir:" + file. toURL ( ). toExternalForm ( ), m_underTest. resolve ( file. getAbsolutePath ( ) ) )
assertThat ( b. getConsole ( ), Matchers. containsString ( "subversion --production" ) )
assertEquals ( field. getDate ( ). getDayOfMonth ( ), CalendarUnit. DAYS. get ( 1 ) )
assertEquals ( parentVersion, instance. getParentVersion ( ) )
assertEquals ( 0, tuple. len ( ) )
assertEquals ( qm1, qm2 )
assertEquals ( "The deserialize result is wrong", EXPERIMENT_ID, deserialize ( buffer ). writeShort ( 2 ) )
assertEquals ( Bytes. toBytes ( "hello" ), stopRow )
assertRequest ( "POST", "Message/" )
assertTrue ( acualValues. isEmpty ( ) )
assertThat ( ordinalVOs, contains ( hasProperty ( "id", is ( TEST_ARCHETYPE_ID ) ). with ( "description", is ( "ordinalDescTest1a" ) ). with ( "idArchetype", is ( TEST_ARCHETYPE_ID ) ). with ( "id", is ( TEST_ARCHETYPE_ID ) ). with ( "code", is ( "testCode1a" ) ) ) )
assertArrayEquals ( yhat1, yhat2, 1e-2 )
Assert. assertEquals ( 3, registrationsRepository. getAllRegistrations ( ). size ( ) )
assertEquals ( "value1&value2", serverRequest. getQueryStringParams ( ). get ( "query1" ) )
assertEquals ( "", prettifiedKey )
assertThat ( exitStatus. exitStatus ( ), is ( equalTo ( ( byte ) 0x1 ) ) )
assertThat ( transformed, is ( "transform_string_to_type=null" ) )
this. assertLoadBlobViaTuples ( tuples, false, true )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. ACTIVITIES_READ_LIMITED, ScopePathType. AFFILIATIONS_READ_LIMITED, ScopePathType. FUNDING_READ_LIMITED, ScopePathType. ORCID_PATENTS_READ_LIMITED, ScopePathType. PEER_REVIEW_READ_LIMITED, ScopePathType. ORCID_WORKS_READ_LIMITED, ScopePathType. ORCID_BIO_READ_LIMITED, ScopePathType. PEER_REVIEW_READ_LIMITED, ScopePathType. ORCID_WORKS_READ_LIMITED, ScopePathType. ORCID_WORKS_READ_LIMITED, ScopePathType. PEER_REVIEW_READ_LIMITED, ScopePathType. ORCID_WORKS_READ_LIMITED, ScopePathType. PEER_REVIEW_READ_LIMITED, ScopePathType. ACTIVITIES_READ_LIMITED, ScopePathType. ORCID_WORKS_READ_LIMITED, ScopePathType. ACTIVITIES_READ_LIMIT
assertThat ( date. with ( YEAR_MONTH_DAY_HOUR_24 ), is ( PlainDate. of ( 2014, Month. APRIL, 24 ) ) )
assertDefaultConfig ( config, false )
assertTrue ( pages. size ( ) == 5 )
assertEquals ( 0, h. nestLevel )
assertThat ( consoleStepListener. isStepFinished ( ), is ( true ) )
assertThatStepsInstancesAre ( builderUnloadableResource. buildCandidateSteps ( ) )
assertTrue ( result )
assertTrue ( worker. isFailed ( ) )
assertStack ( new Object [ ] { 1, null, null, null, null, null }, stack )
assertTrue ( "Unexpected compressed size: " + compressed. size ( ), compressed. size ( ) > SAMPLE_SIZE * 8 )
assertTrue ( ( Boolean ) result )
assertEquals ( "Base for strings is wrong", Long. valueOf ( 3 ), parsed )
assertEquals ( 0, JavaBusyWaiting. INSTANCE. whileLessThan ( null, buffer. address ( ), runs, 0 ) )
Assert. fail ( "Expected an exception" )
assertEquals ( 7, vrp. getJobs ( ). get ( "1" ). getSize ( ). get ( 0 ) )
assertThat ( timeLine. getIntervals ( ), definedBy ( StartOfTime. create ( ), EndOfTime. create ( ) ) )
runner. assertNotValid ( )
assertNull ( principal )
assertNotNull ( profile. getIdTokenString ( ) )
Assert. assertEquals ( expected, mFileSystemMaster. checkConsistency ( new AlluxioURI ( "/" ), CheckConsistencyContext. defaults ( ) ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 )", select. getQuery ( ) )
assertEquals ( pp. getValue ( ), new Payload < > ( "123" + "456" ). getValue ( ) )
assertThat ( view. status ( ), containsString ( "disabled" ) )
assertThat ( candidate, nullValue ( ) )
assertEquals ( 0, breakpointCount )
assertNotNull ( InstalledAddOnExtension. reader ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertFalse ( mojo. isSkip ( ) )
assertEquals ( "isModel", model. getClass ( ). getSimpleName ( ) )
assertEquals ( expected, actual )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� ��#��" + "��###��" + "�尖�尖�尖��" )
assertEquals ( 0, document. select ( "vcard" ). size ( ) )
assertEquals ( "redis://-10.0.0.1", config. getAddress ( ) )
assertEquals ( results, clientWrapper. getBulk ( keys ) )
TestUtil. assertSuccess ( result )
assertEquals ( 1, posts. size ( ) )
assertTrue ( connectFuture. isConnected ( ) )
assertThat ( tuple. getList ( "field" ), equalTo ( value ) )
assertEquals ( 1, map. size ( ) )
assertTrue ( foundBanners. isEmpty ( ) )
assertThat ( buf. toString ( ), is ( equalTo ( "foo;\\r\\nbar;" ) ) )
assertTrue ( count. isShowQuotas ( ) )
assertEquals ( new Point ( 1, 2 ), foo. point )
assertEquals ( text, adapter. getStringAt ( 2, 0 ) )
assertTrue ( entity. getName ( ). equals ( "" ) )
this. tester. assertRedirectsToLoginPage ( "login" )
Assert. assertEquals ( Response. Status. OK. getStatusCode ( ), modifyingResponse. getStatus ( ) )
assertEquals ( "{}", gson. toJson ( p ) )
Assert. assertEquals ( "{\\"@odata.context\\":\\"../$metadata#$ref\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":[{\\"@odata.id\\":\\"ESAllPrim(32767)\\"}," + "{\\"@odata.id\\":\\"ESAllPrim(-32768)\\"}," + "{\\"@odata.id\\":\\"ESAllPrim(-32768)\\"}," + "{\\"@odata.id\\":\\"ESAllPrim(-32768)\\"}," + "{\\"@odata.id\\":\\"ESAllPrim(-32768)\\"}," + "{\\"@odata.id\\":\\"ESAllPrim(-32768)\\"}]}", resultString )
assertEquals ( NAME_NODE, action. getNameNode ( ) )
assertTrue ( "The ase object is null.", ase!= null )
assertEquals ( 5., start. getTheoreticalEarliestOperationStartTime ( ), 0.01 )
assertEquals ( "Success", task. get ( ) )
assertFalse ( AuthzResolver. authorizedInternal ( "perunadmin", "admin" ) )
assertions. startsWith ( sequence )
assertEquals ( exp, area, 1e-10 )
assertEquals ( value, propertiesConfigurationProperties. get ( null ) )
Assert. assertEquals ( "56138725000103", infoConsultaCadastro. getCnpj ( ) )
Assert. assertEquals ( Schema. Type. OBJECT, subSchema. getType ( ) )
assertEquals ( today. parse ( "2014-01-01_23" ), mapper. getDate ( name ) )
assertEquals ( "result is expected to be false", false, result. isSatisfied ( ) )
assertEquals ( "stepThree(4,1,2,3,4,5)", response )
assertEquals ( "\\t", pluginParameters. indentCharacters )
assertThat ( target. equals ( flow ), is ( true ) )
assertTrue ( GitFileUtils. exists ( file, commit, repo ) )
assertXMLEqual ( "Invalid source", "<child/>", result. toString ( ) )
assertEquals ( 0.0, d, 0.1 )
assertNotNull ( nullGitTool. describe ( ) )
assertTrue ( sn. equals ( other ) )
assertEquals ( fixture, this. libshout. getDumpfile ( ) )
Assert. assertEquals ( build. getBestStrategy ( ), StringEncodingStrategy. ALWAYS_SAME_VALUE )
assertHelpLines ( "Option                   Description        ", "------                   -----------        ", "-t, --cutoff, --threshold [Double: positive decimal number that will     a positive decimal number that will     ", "  that will     be     the threshold that has  been outlined", EMPTY )
assertThat ( ff. andThen ( i -> i + 1 ). apply ( "", "", "", "", "", "", "" ), is ( 2 ) )
assertThat ( DockerHost. getDefaultCertPath ( ), equalTo ( "/certificates/" ) )
assertThat ( this. mocker. getComponentUnderTest ( ). spanManager ( ). getId ( ), is ( 1L ) )
Assert. assertTrue ( Integer. MIN_VALUE == _c. convert ( "-32768" ) )
assertEquals ( expected, toString ( tx ) )
assertNotNull ( result )
files. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE )
assertEquals ( actualPage, expectedPage, "Incorrect getTopics result." )
assertTrue ( map. containsKey ( "VSNMP" ) )
assertEquals ( "select survey1.ID from SURVEY survey1 order by 1 asc offset? rows fetch next? rows only", query. toString ( ) )
assertEquals ( FleetSize. FINITE, vrp. getFleetSize ( ) )
assertEquals ( URL + "?param+1=value1&param+2=value2", uri. toString ( ) )
assertIdentical ( "/xref-need-of-repair.obo", iohelper. getOWLOntology ( ) )
assertThat ( Version. findHighestMatchingBuildNumber ( version, versionSet ), equalTo ( 1 ) )
assertResultSet ( res )
assertScoreAndParse ( content, "oracle_test_statements_4", 50 )
assertEquals ( example, decoded )
assertThat ( taskService. createTaskQuery ( ). taskAssignee ( "aUser" ). count ( ), is ( 1L ) )
assertEquals ( "Mr T", value )
assertThat ( breakers. size ( ), is ( 3 ) )
Assert. assertEquals ( ste. toString ( ), frame. toString ( ) )
assertXmlVersionInProlog ( bytesWithBom, "1.1", "<?xml version='1.1'>" )
assertFalse ( srcGeoCoding. isCrossingMeridianAt180 ( ) )
assertTrue ( videos. contains ( video ) )
assertCorrectBinaryString ( data, expected )
assertEquals ( qn, qnExpected )
assertThat ( outcome. getResources ( ), contains ( specimen ) )
assertEquals ( g1, g2 )
assertEquals ( "Wrong version", expected, actual )
Assert. assertEquals ( 200, response. getStatus ( ) )
Helpers. assertNull ( twinMetadata. getLastUpdatedVersion ( ) )
assertTrue ( mappedNames. isEmpty ( ) )
assertFalse ( JobUtils. isJobExecutionStoppable ( jobExecution ) )
assertEquals ( 1, comparator. compare ( bnode1, bnode2 ) )
assertEquals ( body. toString ( ), "error test error" )
assertEquals ( "test-value", clientWrapper. get ( "key1", transcoder ) )
assertSame ( resource, actualResource )
assertEquals ( UriComponentsBuilder. fromHttpUrl ( "http://www.indexer.com/api?t=search&extended=1&extended=2&q=title&author=author" ). build ( ), testee. buildSearchUrl ( searchRequest, null, null ). build ( ) )
assertEquals ( "Got: " + val, number, Integer. parseInt ( val ) )
assertEquals ( 2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian ( b, 2, 3 ) )
assertEquals ( expResult, result )
assertTrue ( m. isIsomorphicWith ( m0 ) )
Assert. notNull ( canalInstance )
Assert. assertNotNull ( request. getHeaders ( ) )
Assert. assertNotNull ( str )
assertProposalDoesNotExist ( proposals, CorrectionMessages. PickOutStringAssist )
assertEquals ( test, loadedEntity. getSomeBytes ( ) )
assertThat ( underTest. equals ( new Object ( ) ), is ( false ) )
assertThat ( "system-input-def-3.xml", systemInputDef, matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( tokens, equalTo ( Arrays. < Object > asList ( "a", 1.0, 2.3, "b" ) ) )
assertEquals ( "[a, b, c, d, e, f]", output. toString ( ) )
assertThat ( actualLogMessage, is ( expectedLogMessage ) )
assertEquals ( 2, list. size ( ) )
assertTrue ( Arrays. equals ( expected_output, actual_output ) )
assertEquals ( svalues, svalues1 )
Assert. assertEquals ( "Calculated average degree is incorrect", expected, computed, 0.00001 )
assertEquals ( new BigDecimal ( "0.00" ), min )
Assert. assertEquals ( 50, getRowCount ( ) )
assertTrue ( true )
assertNull ( getTestChargingStationFromRepository ( ) )
assertNotNull ( schema )
assertUrlProtected ( servletUrl )
assertInvocations ( client. getTwoPhaseCommitInvocations ( ) )
assertEquals ( constVal. get ( i ), access. get ( ) )
Assert. assertEquals ( "[o]", l. get ( 0 ) )
Assert. assertNull ( "PollOption with invalid id was not found", option )
Assert. assertTrue ( result. available ( ) > 0 )
assertEquals ( expected, actual )
Assert. assertArrayEquals ( centroidExpected, location. getCentroid ( ) )
assertThat ( uris, is ( asList ( new URI ( "http://baseurl/static/rapture/assets/styles/default.gif" ), new URI ( "http://baseurl/static/rapture/assets/styles/default.gif" ), new URI ( "http://baseurl/static/rapture/assets/styles/default.gif" ), new URI ( "http://baseurl/static/rapture/styles/default.gif" ), new URI ( "http://baseurl/static/rapture/assets/rapture/styles/test.gif" ), new URI ( "http://baseurl/static/rapture/assets/styles/test.gif" ), new URI ( "http://baseurl/static/rapture/assets/styles/test-1.gif" ), new URI ( "http://baseurl/static/rapture/styles/test-2.gif" ), new URI ( "http://baseurl/static/rapture/styles/test-2.gif" ), new URI ( "http://baseurl/static/rapture/assets
JsonAssert. assertJsonObjectEquals ( EXPECTED_JSON_RESPONSE, jsonResponse )
assertTrue ( engine instanceof SimpleExecutionEngine )
Assert. assertEquals ( expectedCrossProduct, crossProduct )
Assert. assertTrue ( removedEventFired )
Assert. assertTrue ( links. isEmpty ( ) )
assertEquals ( "Hello World", bean. sayHello ( ) )
assertTrue ( "Run transaction's run() method is not called", flag )
Assert. assertTrue ( "not invoked", invoked )
Assert. assertEquals ( "{\\"result\\":{\\"duration\\":{\\"year\\":1,\\"price\\":2.33,\\"unit\\":\\"s\\",\\"price\\":12.34}}", res. toJSON ( ) )
assertEquals ( nodeIid, optNodes. get ( ) )
assertThat ( message. getKeyword ( ), is ( Keyword. MIXED ) )
assertTrue ( "Expected successful creation to succeed", response. getUnderlying ( ) )
assertNumEquals ( "highest value", highestValue. getValue ( 12 ) )
assertEquals ( set, sameSet )
context. assertTrue ( res. failed ( ) )
assertEquals ( MediaType. valueOf ( "en" ). getLanguage ( ), child. getAttribute ( mediaTypeAttributeType. getName ( ) ). getValue ( ) )
assertTrue ( result )
assertTrue ( "Configurable http server mechanism factory should be created", ops. exists ( TEST_SERVER_MECHANISM_FACTORY_ADDRESS ) )
Assert. assertThat ( item. getName ( ), is ( "vtoraja zajavka" ) )
assertEquals ( 0, app. executeApplication ( args ) )
assertThat ( list. size ( ), is ( 1 ) )
assertSame ( "OutoutStream is not set correctly.", outputStream, entrancePi. getOutputStream ( ) )
assertEquals ( bd1, bd2 )
assertTrue ( "t value should be null", null == cr. getTag ( "t" ) )
assertTrue ( searchResults. hasResults ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( families, arrayContaining ( ProcessingFamilyDefinition. NAME ) )
given ( ). param ( "expand", 1 ). when ( ). get ( "resources/" ). then ( ). assertThat ( )
assertThat ( header. getName ( ), is ( "name" ) )
assertTrue ( setWithUpperBound. isEmpty ( ) )
assertEquals ( expected, buchberger )
assertEquals ( "!yro0\\n", sWriter. toString ( ) )
assertEquals ( expecteds, actuals )
assertNotNull ( jobs )
assertThat ( gson. fromJson ( gson. toJson ( i ), Interval. class ), is ( i ) )
assertAnnotations ( 1, Temporal. class, new TestEntity < > ( 0, "25th February 2013" ) )
assertNotNull ( resp )
assertThat ( new JSONObject ( actual ), sameJsonAs ( rawSchemaJson ) )
Assert. assertEquals ( FastMath. toRadians ( x ), value. toRadians ( ), epsilon )
assertEquals ( "foo", testClass4StringFieldAccessor. getValue ( testClass4 ) )
assertEquals ( "Wrong content", CONTENT, readFile ( testSavePropertiesFile ) )
assertEquals ( "replName testNoteId, testParagraphTitle, testParagraphId, testParagraphText, " + "replName testNoteId, testUser, username, " + "#{authenticationInfo}, testNoteId, testParagraphId, testParagraphText, " + "testParagraphTitle, testParagraphTitle, testParagraphId, testParagraphText, " + "testInterpreterContext.get(p1);", actual )
Assert. assertTrue ( "Failed on iteration " + i, processListener. getLinesProcessed ( ) > 0 )
assertEquals ( 10, classUnderTest. getUpdateAction ( ) )
assertEquals ( 3, model. getChildren ( new POMElement ( "root" ) ). size ( ) )
Assert. assertNotNull ( lp )
assertThat ( result, equalTo ( "withIsmyField" ) )
assertEquals ( "Oracle mode " + guess, OracleMode. ECB, guess )
assertTrue ( outContent. contains ( "You can cancel default command by command: cd /" ) )
assertSuggestions ( suggestions, "foo", "foob" )
assertEquals ( "John", response. getName ( ) )
assertEquals ( "noVehicle", v. getId ( ) )
assertEquals ( "DELETE FROM " + noShardTableName, test. build ( ) )
Assert. assertNotNull ( factory. create ( ) )
assertThat ( output, stringContainsInOrder ( "   <text>", "      <div", "         <pre>line1\\nline2\\nline3  <b>BOLD</b></pre>" ) )
assertEquals ( "342\\n", found )
assertThat ( copy ( m ), is ( equalTo ( m ) ) )
assertEquals ( "Number of upgrade steps", 2, path. size ( ) )
assertThat ( actual, is ( "localhost" ) )
assertEquals ( HttpStatusCode. BAD_REQUEST_400, response. getStatus ( ) )
testRunner. assertAllFlowFilesTransferred ( PutParquet. REL_FAILURE, 1 )
assertions. doesNotContain ( value, index )
assertEquals ( "99\\n", found )
assertArrayEquals ( recreated, secret )
assertEquals ( buf. toString ( ), "{\\"a\\":\\"aa\\"}" )
assertThat ( element. getText ( ), is ( "still 0123456789" ) )
assertEquals ( vNum, stringsNum )
assertEquals ( BPResultType. PASS, result. getResultType ( ) )
assertEquals ( 3, algo. getSearchStrategyManager ( ). getStrategies ( ). size ( ) )
assertThat ( result, is ( "Slicer" ) )
Assert. assertNotNull ( query. singleResult ( ) )
assertEquals ( expected, uri. toString ( ) )
assertTrue ( properties. size ( ) == 1 )
assertSame ( dg1, dg2 )
assertEquals ( input. limit ( ), input. position ( ) )
assertFalse ( found )
Assert. assertEquals ( mOK. getMessage ( ), dMsg )
assertProcessEnded ( pi. getId ( ) )
assertFalse ( validate )
assertEquals ( "Condition type", ConditionType. NONE, builder. getType ( ) )
assertEquals ( FeatureState. ENABLED, state )
assertValidationFailures ( deriver, config )
assertTrue (! failed. get ( ) )
assertErrorResponse ( response, ErrorResponse. ErrorType. INVALID_INPUT, "INVALID_ACCOUNT_ID" )
assertArrayEquals ( helloMessage, serialised )
assertEquals ( NUMADD, table. size ( ) )
assertTrue ( entity. getId ( ) > 0 && entity. getSex ( ). equals ( 'M' ) )
assertEquals ( "xmlEntity() content-type-header=[application/custom] accepts-header=[*/*]", actual )
assertArrayEquals ( expectedSorted, data )
assertNotNull ( logger )
assertThat ( defn. equals ( defn2 ), is ( false ) )
assertEquals ( "should have updated role", Role. MASTER, store. getDomainRoles ( UID1 ). get ( 0 ). getRole ( ) )
assertValid ( result )
assertNotNull ( result )
Assert. assertEquals ( expected, actual )
assertEquals ( expectedDate, formatDate ( "yyyy-MM-dd HH:mm", result ) )
assertTrue ( "Write on blocks with quota was not updated", cluster. getDataNodes ( ). get ( 0 ). isQuotaUpdated ( ) )
assertTrue ( expectedDesc. containsAll ( list ) )
assertThat ( subjectOf ( axiom ), isOptionalOf ( entity ) )
assertTrue ( sut. isTokenValid ( "testuser", providedToken ) )
assertEquals ( "val2", value )
assertEquals ( "xy", record. toString ( ) )
assertionHelper. assertIrodsFileOrCollectionExists ( targetIrodsFile, accessObjectFactory, irodsAccount )
assertNotNull ( Media. fetcher ( "FXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "MEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
Assert. assertEquals ( 1, reservations. size ( ) )
assertEquals ( "No errors should be registered", 0, errors. getErrorCount ( ) )
assertTrue ( pageXml. contains ( "foo bar" ) )
assertThat ( value, is ( "value1" ) )
assertEquals ( StatusCode. NAMESPACE_NOT_FOUND, response. getCode ( ) )
assertFailureLogPresent ( pi, "failingTask" )
assertEquals ( Collections. singletonList ( 4L ), context. performQuery ( query ) )
assertEquals ( null, min )
assertTrue ( Objects. equals ( city, getDocumentDataAsCity ( docRef ) ) )
Assert. assertEquals ( "(hgvs_variant (nt_single_allele_var (nt_single_allele_multi_change_var (reference NM_000109.3 :) c. (nt_multi_change_allele [ (nt_multi_change_allele_inner (nt_change (nt_change_inner (nt_change_substitution (nt_point_location (nt_base_location (nt_number 123))) A > C))) (nt_var_sep /) (nt_change (nt_change_inner (nt_change_substitution (nt_point_location (nt_base_location (nt_number 124))) C > T)))) ]))))", hgvs_variant. toStringTree ( parser ) )
assertNull ( polygonSymbolizer. getFill ( ) )
assertThat ( getPodSpec ( jobSpec ). getReadinessGates ( ), empty ( ) )
assertThat ( result. getPayload ( ), is ( not ( instanceOf ( ExceptionPayload. class ) ) ) )
assertEquals ( "abc", c. getExpr ( ). eval ( c ) )
Assert. assertEquals ( 0, proposals. size ( ) )
assertEquals ( "Mismatched data", expected, res )
files. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE_PATTERN )
assertArrayEquals ( shapeAssertion, get. shape ( ) )
Assert. assertEquals ( 400, index )
assertEquals ( 1, message. getMessageId ( ) )
assertEquals ( "2017", da. getDocType ( ) )
assertMatches ( expr. matcher ( "/a/b/c/d/e/@something" ), "/a/b/c", "/x/y" )
assertEquals ( r1, r2 )
assertEquals ( ( byte ) 8, ( byte ) result. getByteWrapperValue ( ) )
assertEquals ( result, targetPermission )
assertEquals ( allAlarms. size ( ), 5 )
assertEquals ( 18, xreader. findIPStartSLL ( packet ) )
assertEquals ( reference, andPredicate. asCNF ( ) )
assertEquals ( Integer. valueOf ( 67 ), resultMap. get ( "Age" ) )
Assert. assertEquals ( msg, result )
assertEquals ( "newauthor", savedModel. getAuthor ( ) )
assertThat ( registerSingletonService, is ( notNullValue ( ) ) )
assertSame ( hello. getIterationStrategyStack ( ). get ( 0 ), uriTools. resolveUri ( HELLO_URI. resolve ( "iterationstrategy/" ), wfBundle ) )
assertEquals ( result. size ( ), 2 )
assertEquals ( setPin, BytesHelper. pinGet ( setPin, checkPin ) )
assertEquals ( Sets. newHashSet ( "server=server1->db=customers->table=purchases->select", "server=server1->db=analyst1", "server=server1->db=jranalyst1->table=*->select", "server=server1->db=jranalyst1->table=*->select", "server=server1->functions" ), backend. getPrivileges ( Sets. newHashSet ( "manager" ), ActiveRoleSet. ALL ) )
assertTrue ( cp. contains ( "com.sun.jini.outrigger-dl.jar:2.1.jar" ) )
assertTrue ( obj instanceof Bootstrap )
Assert. assertEquals ( "PreValidationFailedException should have been thrown.", errMsgList. size ( ), 0 )
assertThat ( editor. getValue ( ), is ( nullValue ( ) ) )
assertThat ( result, Matchers. equalTo ( "test1=blah1&test2=blah2" ) )
assertEquals ( 3.14159, result, 0.00001 )
assertEquals ( 6.0, impl. errorHalfOfGranularity ( ), 0.01 )
assertIdentityNotExist ( securityRealm, evidence )
assertTrue ( "failed to deploy test artifact", destinationJar. exists ( ) )
assertEquals ( pgList, serviceManager. getAllServiceTypes ( pc ) )
assertThat ( rendering, is ( "3 days ago" ) )
assertEquals ( 2, users. size ( ) )
assertEquals ( "a < b\\n", out. toString ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "with recursive sub as (select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\\n" + "from EMPLOYEE EMPLOYEE, sub\\n" + "where EMPLOYEE.FIRSTNAME =?)\\n" + "union all\\n" + "(select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\\n" + "from EMPLOYEE EMPLOYEE, sub\\n" + "where EMPLOYEE.SUPERIOR_ID = sub.ID)", serializer. toString ( ) )
assertEquals ( expected, stripped )
this. context. assertIsSatisfied ( )
Assert. assertEquals ( 2, longhand. length )
Assert. assertTrue ( runtimeFolder. exists ( ) )
assertThat ( date, is ( PlainDate. of ( 2014, 10, 11 ) ) )
assertTrue ( exception )
assertEquals ( 0, ( int ) tree. entries ( ). count ( ). toBlocking ( ). single ( ) )
assertTrue ( dsl. size ( ) > 0 )
assertEquals ( 200, result. getStatus ( ) )
assertFalse ( strategy. shouldRetry ( request, env ) )
objects. assertIsEqualToComparingOnlyGivenFields ( info, validName, validEmail )
assertNull ( target. getMatch ( ) )
assertEquals ( "Count of customer", 0, res )
assertFalse ( store. containsSession ( address ) )
assertNull ( capabilities. getOperation ( ) )
assertEquals ( "Symbol count is incorrect", MAX_NUMBER_OF_SYMBOLS_IN_RESPONSE, symbols. size ( ) )
assertTrue ( "The checkbox should be selected", isSelectionBoxSelected ( ) )
assertEquals ( "-23", sb. toString ( ) )
assertThat ( configurer, instanceOf ( SerialConfiguration. class ) )
assertEquals ( "No validation issues", 0, validationIssues. size ( ) )
assertThat ( pb. getProperties ( ). isEmpty ( ), is ( true ) )
Assert. assertTrue ( errors. hasFieldErrors ( "frequency" ) )
assertTrue ( client. hasMobile ( ) )
assertPaths ( paths, "s", "t" )
Assert. assertTrue ( content. contains ( "test.jar" ) )
assertEquals ( "not anymore", concrete. finalMethod ( ) )
assertThat ( driver. getTitle ( ), is ( expectedSuccessReport ) )
assertThat ( target. matchExactly ( match ), is ( false ) )
assertEquals ( s, s2 )
assertEquals ( "reason", result. getMessage ( ) )
assertEquals ( TestEnum. A, settings. getEnumValue ( "key", TestEnum. A ) )
assertNotNull ( cut )
assertEquals ( Optional. of ( "master" ), result )
assertEquals ( 4, analyser. getCommands ( ). values ( ). size ( ) )
assertEquals ( expected, actual )
assertNotNull ( childCert )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoItemImpostoImportacao ( ). toString ( ) )
assertTrue ( "child operation was not reset", operation. isReset ( ) )
Assert. assertEquals ( "Result is not 1", 1, o )
assertThat ( currentSessionManager. state. recording ( ). recording ( ). skipMeasurements ( ), equalTo ( 0 ) )
Assert. assertEquals ( "bar", resolved )
assertFalse ( lockAcquired )
Assert. fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( tctf. isReady ( ( BaseTableCell ) null, mock ( CyTableCell. class ), mock ( CyNetworkView. class ) ) )
assertFalse ( timeLine. isValid ( intervalStart ) )
assertEquals ( 1, ( int ) access. readFromExpecting ( "escalateCalled" ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "Hello Kermit!", result )
assertThat ( action, is ( "method" ) )
assertEquals ( "try {\\n" + "    synchronized (a) {\\n" + "        return a.entrySet();\\n" + "    }\\n" + "    } catch (java.io.IOException ioe) {\\n" + "        return a.retainAll();\\n" + "    }\\n" + "    }", body. toString ( ) )
assertEquals ( HttpStatus. SC_UNPROCESSABLE_ENTITY, response. getStatus ( ) )
assertEquals ( 1, resultWarningsCount )
assertThat ( manager. getApplicationPreferences ( ), is ( applicationPreferences ) )
assertTrue ( accept )
Assert. assertEquals ( 404, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertFlatResult ( result )
assertNotNull ( entity. getId ( ) )
Assert. assertTrue ( "Stack search should exist", stackSearchService. search ( id, "UTF-8" ). exists ( ) )
assertNotNull ( createdPost. getId ( ) )
runner. assertValid ( )
Assert. assertEquals ( "11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y", endereco. getNumero ( ) )
assertEquals ( "// Act\\r\\n", buf. toString ( ) )
Assert. fail ( "Failed to catch unsupported comparator classes." )
assertTrue ( rootNode. isAuthenticationEnabled ( ) )
assertEquals ( 2.0, WeightedLevenshtein. distance ( "1", "2", e ) )
Assert. assertEquals ( "Hello, world!", new String ( err. toByteArray ( ) ) )
assertEquals ( "", converter. getAsString ( facesContext, new UIPanel ( ), null ) )
Assert. assertEquals ( expected, actual )
assertTrue ( cont1 == 10 )
assertEquals ( asList ( foo4, foo5 ), results )
assertVersionAndValue ( ref, initialVersion, txCount )
assertEquals ( "PONG\\n", result )
assertFalse ( v. isSameVersion ( new String [ ] { "alpha" } ) )
assertEquals ( "Cookie{name='foo', value='bar', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost], httpOnly=true, secure=false, maxAge=Optional[-1]}\\n", content )
assertSameEnumeration ( "Breadth-First Model", coreEnum, xEnum )
assertTrue ( caughtNullMutation || caughtNullEntry )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert. assertEquals ( PaginationHelper. DEFAULT_PAGE_LIMIT, limit )
assertEquals ( attributeName, wadlAttributeName. getAttributeName ( ) )
assertEquals ( row, null )
assertTrue ( gfs. getStatusProvider ( ). isDirty ( ) )
Assert. assertEquals ( "<p>Target blank link</p>\\n" + "<p><a href=\\"https://google.com\\">_blank</a>\\n" + "</p>\\n", text. asHtml ( ) )
Assert. assertEquals ( json. getAsInt ( "status" ), 204 )
assertEquals ( TERM_FACTORY. getConstantLiteral ( "2016-12-02 15:57:02.03", XSD. TIMESTAMP ), translation )
assertEquals ( withLabel. getLabel ( ), newLabel )
assertThat ( result. fullName ( ), is ( Boolean. class. getName ( ) ) )
assertThat ( appl, is ( JavaSignatureComparator. MATCH_BOXING ) )
Assert. assertEquals ( 51L, tuplesPerWindow )
assertTrue ( throttler. requestsThrottled ( request ) )
assertNotNull ( result )
assertions. hasFeature ( "feature1" )
assertThat ( next. join ( ), is ( VALUE ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "/abc", servletURI )
assertEquals ( String. format ( "Create table new_table with 1 column and 10 columns" + "%n    - A non-null column called column_one [STRING(10)]" ), HumanReadableStatementHelper. generateAddTableFromSelect ( newTable ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ). orderBy ( field ( "group_by" ). or ( field ( "id" ). asc ( ) ) ). from ( tableRef ( "WindowFunctionTable" ) ). groupBy ( field ( "id" ). asc ( ) ). fetchFirst ( ) )
assertNotNull ( svg )
assertEquals ( externalLink, delegatedExternalLink )
Assert. assertEquals ( score, smsd1. getEnergyScore ( 0 ), 0.001 )
Assert. isTrue ( 1000000L == time )
assertThat ( val, is ( instanceField. getValue ( ) ) )
assertEquals ( "facebook.com", shortId )
assertEquals ( 3, inMemoryResultAccumulator. getAggregationResultCount ( ) )
assertThat ( properties, not ( containsInAnyOrder ( hasProperty ( "name", equalTo ( "name" ) ), hasProperty ( "value", equalTo ( "" ) ) ) ) )
assertTrue ( baseTestFailed )
assertThat ( returnValue, equalTo ( "private" ) )
Assert. assertEquals ( 2, providerList. size ( ) )
assertIdentical ( "/simple_simple_reasoned.owl", reasoned )
assertEquals ( new HashSet < String > ( ), all )
assertThat ( sut. getGMPath ( ), is ( expectedPath ) )
assertThat ( coll. withComplement ( window ), is ( expected ) )
assertQuery ( em, query )
assertEquals ( 3, ac. size ( ) )
assertEquals ( BigInteger. valueOf ( "00000000" ), ArrayUtils. toBigInteger ( ti ) )
assertNotNull ( result )
assertEquals ( 0x00, acia. read ( 0x0001, true ) & 0x03 )
Assert. assertEquals ( date1, timeZoneDefinition. compare ( null, second ) )
assertNotNull ( Service. reader ( ). read ( ) )
Assert. assertTrue ( ( ( BasicDecider ) instance ). compareWorkflowRunFiles ( metadata. getWorkflowRun ( workflowRunAcc ). getInputFileAccessions ( ), filesToRun ) == BasicDecider. FILE_STATUS. PAST_SUBSET_OR_INTERSECTION )
assertEquals ( false, mockResult. included ( "canEdit" ) )
assertEquals ( m1, m2 )
assertTrue ( ctx1. getScore ( ) < ctx2. getScore ( ) )
assertEquals ( valueIn, valueOut, 0.0001 )
assertEquals ( testChangeNameSvrAddr, opsService. getNameServerAddress ( TestConstant. NAME_SERVER_ADDRESS ) )
Assert. assertEquals ( localDate. toString ( ddMMMyyyy, Locale. ENGLISH ), "23-Aug-2013" )
assertEquals ( "Oicr-Maintainer should be present", "oicr-Maintainer", studyAccession )
assertEquals ( expecting, found )
Assert. assertEquals ( "1.0\\t0.0\\t0.0\\t0.0\\t0.0\\t0.0\\t0.0\\t0.0\\t0.1\\t0\\n", record. toString ( ) )
assertEquals ( expectedValue. trim ( ), entityExecutor. getEntities ( ). get ( 0 ). getContent ( ). trim ( ) )
assertEquals ( 2, allPatients. size ( ). intValue ( ) )
Assert. assertTrue ( sender. isStopped ( ) )
assertEquals ( "Basic interface should be defined", "com.acme.BasicService", service. getInterfaceInfo ( ). getInterface ( ) )
Assert. assertEquals ( ValidationType. DATE_OF_BIRTH, ctxUser. execute ( input ) )
assertTotal ( list )
Assert. assertTrue ( verifier. verify ( signature ) )
Assert. assertTrue ( count > 0 )
assertEquals ( expResult, stringBuilder. toString ( ) )
Assert. assertFalse ( validator. validate ( grok, props ) )
assertEquals ( query, result )
assertTrue ( "Date entity validation failed", schema. validate ( dateString ) )
assertTrue ( obtainedLock )
assertNotNull ( "Immunosuppression not found", immunosuppressionTreatment. getId ( ) )
assertEquals ( expected. toString ( ), new String ( encoded. getBytes ( ) ) )
assertThat ( actual, is ( expected ) )
Assert. assertTrue ( responseExpectations. containsKey ( "response" ) )
assertNotNull ( testObj. getVendorOptionInfo ( ) )
Assert. assertEquals ( "Processing of HL7 message did not result in new proposal being added to the model", initialOccurrences + 1, Context. getConceptService ( ). getConceptProposals ( "PELVIC MASS" ). size ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertNotNull ( val )
Assert. assertEquals ( quantidadeItemEfetivamenteExportado, exportacaoIndireta. getQuantidadeItemEfetivamenteExportado ( ) )
assertEquals ( HttpStatus. SC_OK, result. getStatusLine ( ). getStatusCode ( ) )
assertArrayEquals ( "Byte arrays are not the same.", bOut. toByteArray ( ), finalOut. toByteArray ( ) )
assertFalse ( parser. shouldSkip ( "notAJar" ) )
assertNotNull ( itemId )
assertEquals ( 6. * 3600. + 6. * 60. + 12. * 3600. + 12. * 3600., sec, 0.01 )
Assert. assertEquals ( Integer. class, clazz )
Assert. assertTrue ( referenceList. equals ( ret ) )
assertNotNull ( session. from ( $ ( var ) ). where ( $ ( var. getText ( ) ). containsIgnoreCase ( "a bcd e" ) ). uniqueResult ( $ ( var ) ) )
assertNotNull ( fixture )
assertUnsuccessfulConversion ( res )
assertFalse ( controller. isConnected ( ) )
assertEquals ( object, result )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
assertEquals ( "{\\"a\\":{\\"a1.a11\\":v1},\\"a.a2\\":v2},\\"b\\":v3}", global. toString ( ) )
assertThat ( attributeReference, is ( notNullValue ( ) ) )
assertThat ( output. readValuesToList ( ), equalTo ( expectedValues ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expect, sql )
assertTrue ( kbuilder. hasErrors ( ) )
assertTrue ( "marshaller does not support parameter", adapter. supportsParameter ( supportedParameter ) )
Assert. assertEquals ( 1, count. get ( ) )
assertEquals ( properties, injectedProperties )
assertArrayEquals ( expected, jsonified )
assertEquals ( jsonValue, result )
assertNull ( response. getRedirectedUrl ( ) )
Assert. assertTrue ( returned == null )
Assert. assertEquals ( DEFAULT_USERNAME, callIntermediateWhoAmI ( ) )
assertThat ( getDomainStatus ( domainPresenceInfo ), equalTo ( "FieldValueNotFound" ) )
tester. assertRenderedPage ( UserListPage. class )
context. assertAuthzException ( statement, "CREATE DATABASE " + dbName )
assertFalse ( new Club ( bnode1, secretClubName ). isJavaStreams ( ) )
assertEquals ( "<p>Test</p>", cleanHtml )
assertTrue ( rc. request ( ). host ( ). equals ( host ) )
assertEquals ( HttpStatus. OK, restResponse. getResponseStatus ( ) )
assertEquals ( flipConditionEvaluator, conditionEvaluator )
assertFalse ( impl. hasElapsed ( ) )
assertSame ( TEST_ROUTE, extractedValue )
Assert. assertEquals ( testString, decodedUTF8 )
assertTrue ( messageLatch. await ( 3, TimeUnit. SECONDS ) )
assertEquals ( JAXRSClientFactoryBean. class. getName ( ), ctx. getName ( ) )
assertThat ( dialect. addOptimizerHints ( sql, hints ). toString ( ), is ( "SELECT /* SQL_ID */ /*+ INDEX (PUBLIC.TEST_1 test_ix) USE_NL */" + System. lineSeparator ( ) + " * FROM PUBLIC.TEST_1" ) )
assertEquals ( "Should return PointImpl", PointImpl. class, pt. getClass ( ) )
assertEquals ( array, compressed )
assertTrue ( Arrays. equals ( getPacketData
assertThat ( generatedHtmlReports. size ( ), is ( 2 ) )
assertTrue ( Arrays. equals ( pktSerialized, pktSerialized1 ) )
Assert. assertTrue ( ldapLogin. doAction ( req, resp ) )
assertPayloadEqual ( "<SOAP-ENV:Fault xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' />", soapBody. getPayloadResult ( ) )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED", FilterUtils. eq ( "service.objectClass", "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ), 2, TimeUnit. SECONDS )
assertEquals ( expectedUri, newUri )
assertThat ( options. getRegions ( ), is ( region ) )
assertNotNull ( kieBase )
Assert. assertEquals ( conn. getResponseCode ( ), HttpURLConnection. HTTP_BAD_REQUEST )
assertNotNull ( ids )
assertFalse ( infoValidator. validate ( info ) )
assertEquals ( 3, screenshotPlugin. getHunterLevel ( ) )
assertEquals ( - 1, FileUtils. read ( input, 1 ) )
assertUrl ( url, scheme, host, port, path )
assertSame ( array, buffer. array ( ) )
assertEquals ( 3, syncService. getSyncProjectList ( ). size ( ) )
assertFalse ( result )
assertEquals ( "f00630063007500700061006e0063007900200002", button. getStatusProperty ( "sensor_value" ). get ( ). getValue ( ) )
assertTrue ( matcher. matches ( mockElement ) )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.b = function() {\\n  var /** @type {string} */ s = null;\\n  return s.length;\\n}" )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertEquals ( configurator. getIntProperty ( propertyName ), expectedValue )
assertEquals ( "user1,user2", result )
assertEquals ( 1, performImportScript ( csv, false ) )
assertEquals ( "com.querydsl.codegen.QPoint", factory. create ( type ). getFullName ( ) )
assertEquals ( "       Some String", leftTrimmedString )
Assert. assertFalse ( result )
assertEquals ( USER_PRINCIPAL, op. getUserPrincipal ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "CURRENT_TIME", exp. getType ( ). toString ( ) )
assertThat ( info. isTeiidSupport ( ), is ( Boolean. FALSE. booleanValue ( ) ) )
assertEquals ( expected, actual )
assertMedianIs ( 3D )
Assert. assertTrue ( DeDupExample. Collector. isDone ( ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter a=\\"b\\" foo=\\"bar\\"/>", elem. toXml ( ) )
assertFalse ( gc. moveToTrash ( path ) )
Assert. assertNull ( "No se deber�a haber encontrado el documento", getServicioDocumentos ( ). getInfoDocumento ( ID_EXISTENTE ) )
Assert. assertTrue ( "The recovery directory must be absolute", recoveryDir. exists ( ) )
assertEquals ( DummyDrawHandler. drawTextToString ( "Das ist \\" dfs ", 10, 20, AlignHorizontal. LEFT, null, null ), drawHandler. getLastDrawCall ( ) )
assertNull ( result )
assertAnnotationCompletions ( "@Value(value=\\"${data.prop2}\\"<*>)", "@Value(value=\\"${else.prop3}\\"<*>)", "@Value(value=\\"${spring.prop1}\\"<*>)", "@Value(value=\\"${spring.prop2}\\"<*>)", "@Value(value=\\"${else.prop3}\\"<*>)", "@Value(value=\\"${spring.prop1}\\"<*>)" )
assertEquals ( request. getRequestHeaders ( ), headers )
assertEquals ( expected, query )
assertEquals ( "test", echo. echo ( "test" ) )
assertEquals ( expecting, found )
assertMatch ( e, s )
assertEquals ( 15, result )
Assert. assertEquals ( "Hello Kermit", result )
assertTrue ( true )
Assert. assertEquals ( "12 minutami", t. format ( new Date ( 0 ) ) )
Helpers. assertErrorMessage ( Deencapsulation. getField ( deviceRegistrationState, "errorMessage" ), VALID_JSON )
assertEquals ( target. field, check. send ( ) )
assertSame ( t. toLocalTime ( ), LocalTime. MIDNIGHT )
Assert. assertEquals ( "123", str )
assertTrue ( "Expected a non-empty set of values.", expected. length!= 0 )
Assert. assertTrue ( this. component. setVisibility ( this. entity1, VISIBILITY ) )
Assert. assertEquals ( new Integer ( 3 ), person. getAttribute ( 3 ). intValue ( ) )
Assert. assertEquals ( "��浣�绗����������璇�", creditService. getMessage ( ) )
assertEquals ( "UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID =? " + "AND AUTHOR =? " + "AND FILENAME =? " + "AND SYPA: AUTO_START t眉p INT -> TEXT, vaartus 0 00 17 * *? " + "AND FILENAME =? " + "AND DATABASECHANGELOG.xml =?", sqls [ 0 ]. toSql ( ) )
assertTrue ( algos. length > 0 )
assertTrue ( Math. sqrt ( v ) < FastMath. sqrt ( v ) )
assertEquals ( response. getStatus ( ), HttpServletResponse. SC_NOT_FOUND )
assertEquals ( "HmacMD5 digest mismatch", "5f4c8c84a4d2f3c8d49f5d8e7b9f5f9e9f9c8e0f9e9f9e9f9e9f9e9f9e9f9e9f", new String ( result ) )
assertEquals ( EXPECTED_TOKEN_STRING, token )
Assert. assertEquals ( 33, vm. getStack ( ). pop ( ) )
assertEquals ( Collections. EMPTY_SET, nullFieldProblems )
assertEquals ( "Incorrect Bags in PnrVo", bagsInPNRExample, vo. getBags ( ) )
runner. assertNotValid ( )
assertNotNull ( getFixture ( ). review ( null, master, slave ) )
assertNull ( proxy. executeStatement ( "statment", null, null, null, null ) )
assertEquals ( "OU=NiFi/Organisation,CN=testuser", escapedClientDn )
assertEquals ( result, "not ok" )
assertNotNull ( argumentType )
assertEquals ( "info : My message with 3 parameters : 1, 2, 3", output )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<break/>", elem. toXml ( ) )
assertEquals ( host. constructDashboardLink ( ), "https://localhost:6443/api/v1/projects/myproject/dashboard" )
Assert. assertTrue ( "Expected a zero but it was: " + actualValue, actualValue == 0 )
assertThat ( stepListener. getCurrentTestOutcome ( ). getTestSteps ( ). get ( 1 ). getScreenshotCount ( ), is ( 2 ) )
assertTrue ( this. distributedMap. size ( ) == HazelcastOutboundChannelAdapterTestUtils. DATA_COUNT )
assertEquals ( "| script | selenium driver fixture |\\n" + "| start browser | firefox | on url | http://example.com |\\n" + "| check | is | getText | on | field | equal |!-exact|Out.*", result )
assertKernel ( kernel, CIRCLE3, e )
assertEquals ( 14, xreader. findIPStart ( packet ) )
assertXMLEqual ( expected, actual )
assertEquals ( expResult, result )
assertEquals ( "f3dc7765a8857e0f59129f971f81e29dfee4d2b1", actual. get ( "/content/test-page/jcr:content" ) )
assertIterationsEqual ( out2, out1 )
assertTrue ( containsMutatedSeededMethod )
assertArrayEquals ( expectedBuffer, buffer )
assertEquals ( new BigDecimal ( "123.45" ), singleResult )
Assert. assertEquals ( "item1", irs. getItemName ( ) )
Assert. assertEquals ( 3, total )
assertEquals ( ( ( SoapMessage ) messageContext. getRequest ( ) ). getSoapBody ( ), result )
FunctionTestUtil. assertResult ( stringFunction. invoke ( contextMap ), "{ key1 : value1, key2 : { childKey1 : childValue1 } }" )
assertNotNull ( countTime )
assertThat ( configuration. getProvider ( ). getClass ( ), is ( typeCompatibleWith ( SpringContainerProvider. class ) ) )
assertNotNull ( fixture )
assertEquals ( exp, rev )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ), rand. nextInt ( 998 ) + 2, rand. nextInt ( 100000 ), tokenizer )
assertNotNull ( rec )
Assert. assertTrue ( this. component. setVisibility ( this. entity1, VISIBILITY ) )
assertNotNull ( Fax. fetcher ( "FXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertTrue ( "Printing the orb result should match the parsed ior", result. matches ( "([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\)" ) )
assertEquals ( AuthStatus. SUCCESS, module. validateRequest ( messageInfo, client, null ) )
assertEquals ( expResult, result )
Assert. assertNotNull ( editor. getValue ( ) )
Assert. assertEquals ( "Hello World!", result. get ( 1, TimeUnit. SECONDS ) )
assertEquals ( expectedHmacSHA256Signature, actualHmacSHA256Signature )
Assert. assertTrue ( result. success ( ) )
Assert. assertTrue ( result. length ( ) > 0 )
Assert. assertSame ( channel, this. registerChannel ( channel ) )
assertNotNull ( maintenance )
Assert. assertEquals ( expected, testIndex. findConc ( "[pos = 'Luke'] " ) )
assertEquals ( nnf, comp )
assertEquals ( expResult, result )
assertEquals ( gmtDateOneHour, day. toGMTDate ( ) )
assertSame ( theScene, theObject. getGameScene ( ) )
assertNotNull ( paquete. getId ( ) )
assertEquals ( "All test cases should pass", 0, runner. getFailedTests ( ). size ( ) )
assertEquals ( 1, annotator. getAnnotatedTextCount ( ) )
assertTrue ( actual )
Assert. assertEquals ( nIterations, genericObjectPool. getTotalTotal ( ) )
Assert. assertNotNull ( result. getQueryExplanations ( ) )
assertThat ( model2. getMyStringText ( ), is ( "aaa" ) )
assertSame ( d, e. getDomain ( ) )
assertEquals ( after, ListUtils. sliceList ( before, 1, 2 ) )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ), rand. nextInt ( 998 ) + 2, rand. nextInt ( 100000 ), tokenizer )
assertEquals ( expectedPlan, actualPlan )
assertEquals ( "user", usernameForAuthorEmail )
Assert. assertThat ( result. size ( ), is ( 1 ) )
assertThat ( itemTypeDAO. getTypes ( TENANT_ID ), is ( expectedTypes ) )
Assert. assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ ='me' GROUP BY `foo.bar`", sql )
assertThat ( movie. toUri ( ), equalTo ( rootUri. resolve ( "/movies/1/movie/1" ) ) )
assertThat ( dispatched, is ( SYNC_OR_ASYNC_PRIVATE_FLOW_MSG + ".main1.main2.main3.main4" ) )
assertNotNull ( result )
assertEquals ( aNumber, result, 1E10 )
Assert. assertEquals ( 1, lqs. size ( ) )
assertEquals ( new Long ( 100 ), mojoTimer. getDuration ( ) )
Assert. assertEquals ( 3, a. getNestedBlocks ( ) )
assertSizeViolations ( validator. validate ( foo ) )
Assert. assertTrue ( this. manager. connectFromAll ( Arrays. asList ( null, this. person1, null, this. person2 ), this. family1 ) )
Assert. assertEquals ( "{\\"title\\":\\"Test HTML title\\"}", result )
assertFalse ( violated )
assertThat ( processors, nullValue ( ) )
assertThat ( def. isMultiple ( ), is ( true ) )
assertErrorEventDefinition ( "subProcessStart", "myErrorCode", null )
assertEquals ( expected, product, TOL )
assertEquals ( expecteds, actuals )
assertThat ( doHandle ( request, errorResponse ), is ( sameInstance ( errorResponse ) ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertFalse ( status == 0 )
assertTrue ( savedEntity. isValid ( ) )
assertJoinDataSourceListBo ( joinDataSourceListBo )
assertEquals ( 1, ( int ) externalTaskService. createExternalTaskQuery ( ). singleResult ( ). getPriority ( ) )
assertEquals ( TypeInfoFactory. getListTypeInfo ( TypeInfoFactory. getListTypeInfo ( TypeInfoCreator. createLong ( ) ) ), orcType )
assertEquals ( "re-set ACL did not return correct object", aces, _fs. getACL ( dirInode, rsType ) )
assertThat ( doc. getKey ( ), is ( notNullValue ( ) ) )
assertThat ( representation. getString ( "check-number" ), is ( "null" ) )
assertEquals ( testPublicId, resultPublicId )
Assert. assertNotNull ( personStructure )
assertEquals ( expr, printConstraint ( expression ) )
Assert. assertEquals ( expectedXML, actualXML )
assertTrue ( "Editor must still be enabled after cancel editing",! isElementPresent ( TextFieldElement. class ) )
assertArrayEquals ( one. toArray ( ), expected2. toArray ( ), DELTA )
assertEquals ( expectedIsNullFunction ( ), result )
assertEquals ( "myconfig", configObservable. toBlocking ( ). single ( ) )
assertTrue ( Arrays. equals ( forwardBlz, manager. getRulePositions ( ) ) )
assertTrue ( ARQ. isTrueOrUndef ( ARQ. optDistinctToReduced ) )
assertEquals ( "getValueRequired", ctx. getString ( CommandConstants. COMMAND_ADDRESS_KEY ) )
Assert. assertEquals ( expected, actual )
assertEquals ( openIds, user. getOpenIds ( ) )
assertEquals ( 3, stmts. size ( ) )
assertEquals ( 15, value )
assertTrue ( "incorrect value", aNumber. toString ( ). equals ( result ) )
rule. assertScenarioEnded ( )
assertNull ( accessToken )
assertEquals ( result, field. getField ( ) )
assertTrue ( isInverseTransformSupported )
assertFalse ( isDisabled )
assertEquals ( expectedDate, DateTimeUtils. startOfDay ( dateString, TimeZone. getTimeZone ( "UTC" ) ) )
assertEquals ( "max", actual )
Assert. assertEquals ( 0, latch. getCount ( ) )
assertEquals ( "Checkbox value should be selected", value, cb. getValue ( ) )
assertEquals ( Result. NEUTRAL, result. getStatus ( ) )
assertThat ( readUserId, is ( theUserId ) )
assertThat ( page. getBodyText ( ), is ( "123" ) )
assertEquals ( filterClause, " AND \\"fieldName\\" = \\"fieldValue\\"" )
Assert. assertFalse ( clusterVerifier. verifyExternalView ( "localhost", "localhost_1", _clusterInfo ) )
assertThat ( "candidates should contain [name=]", candidates, hasItems ( "name=" ) )
assertNull ( action )
assertOut ( "for (var /** @type {number} */ i = 0, /** @type {number} */ len = 10; i < len; i++)\\n\\tbreak;" )
Assert. assertNotNull ( addressResultsDto )
Assert. assertNotNull ( instance. getAllAtomMapping ( ) )
Assert. assertEquals ( "did not get expected file length", firstLength, destFile. length ( ) )
assertNotNull ( classUnderTest. getStart ( ) )
assertEquals ( reader, readerResult )
softly. assertThat ( measurementStore. getMeasurementStreams ( ) )
assertNotNull ( aa )
assertEquals ( UNLOCKED_ITEM, result )
assertEquals ( label, 0.0, diff. getRMS ( ), TOLERANCE )
assertExec ( "Should be the same", Numbers. class, "deserDouble__D", f )
assertThat ( log. getLogEntries ( 1, 5, quorumId ), is ( empty ( ) ) )
assertNotNull ( "No wavelet name returned!", waveletName )
Assert. assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  WHERE pet.user_id =? AND pet.age >? AND pet.cate =? AND pet.master_id" + fieldAdd + " AND pet.user_id =? AND pet.age =?  ORDER BY pet.id" + fieldAdd + " ASC LIMIT 0, 5 ;", sql )
assertEquals ( expecteds, actuals )
assertEquals ( 2, session. from ( var ). distinct ( ). list ( var ). size ( ) )
assertEquals ( ROUTE_KEY, instanceIdentifier. firstKeyOf ( FlowspecL3vpnRoute. class ) )
assertEquals ( HttpStatus. SC_OK, response. getStatusLine ( ). getStatusCode ( ) )
assertTrue ( "Wrong output: " + output, output. contains ( "Stub runner generated by Groovy - Tyk" ) )
assertFalse ( server. isComplete ( ) )
assertTrue ( elapsed < 5 * 1000 )
Assert. assertEquals ( md5, "f3c4e0c4e0f9f29c8e0f9c9a0f" )
assertEquals ( "select cat_kittens_0.name from Cat cat_kittens_0 any cat_kittens_0", predicate. toString ( ) )
assertThat ( commands. get ( asList ( "test" ) ). getResult ( ), is ( "result" ) )
assertNotNull ( method )
assertEquals ( "Wrong URL", file. getAbsoluteFile ( ), FileLocatorUtils. convertFileToURL ( url ) )
assertNotNull ( testConnectionDetails1 )
assertEquals ( host, other )
assertTrue ( control. matches ( "/any/ICanPutAnythingInHere/what" ) )
assertEquals ( "parseDouble() failed", 0.22d, ByteUtils. parseDouble ( testBytes, 0 ), 0 )
assertThat ( node. getHref ( ), is ( "linktitle" ) )
assertEquals ( expected, victim. process ( prefix, nameRequest ( ). originalName ( originalName ) ) )
Assert. assertTrue ( Math. abs ( maxAbsDeviation ) < 5E-3 )
assertEquals ( "redirect:/cart", view )
assertTrue ( "Intersection between point and point is incorrect", pi. equals ( piExp ) )
assertNull ( eRetrieved )
assertNull ( variableValue )
assertEquals ( messageList. size ( ), partitionMessageQueue. getMessageList ( ). size ( ) )
assertThat ( found, equalTo ( expected ) )
assertEquals ( exp, res )
assertTrue ( matcher. match ( msg, rule ) )
Assert. assertEquals ( _runCounts. size ( ), 5 )
assertEquals ( 3, breakpoint. getBreakPointId ( ) )
assertThat ( any. contains ( AM_PM_OF_DAY ), is ( true ) )
Assert. assertEquals ( 2, tables. size ( ) )
assertSequence ( visitor. getNodes ( ), "c", "b", "e", "d", "a" )
Assert. assertEquals ( ServerParse. INSERT, sqlType )
assertSame ( p3, result )
assertEquals ( 1.0101, element. getLongValue ( ), 0.001 )
Assert. assertEquals ( idSet. size ( ), 16 )
assertEquals ( 2, response. getBody ( ). getEntities ( ). size ( ) )
assertEquals ( 1, fakeClock. numPendingTasks ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert. fail ( ex. getMessage ( ) )
assertEquals ( 35.3636363636363, sum, 0 )
assertEquals ( "columnControl must be in table", table, control. getTable ( ) )
assertEquals ( 1, MigrationTaskSkipper. getSkippedTasks ( myTasks ) )
objects. assertIsInstanceOfAny ( info, actual, Person. class )
assertEquals ( "car", type. getProfile ( ) )
assertEquals ( cache. get ( "a" ), null )
assertEquals ( profilePage. getUsername ( ), "test-admin" )
assertEquals ( expectedResult, result )
assertEquals ( "http://www.w3.org/2001/XMLSchema#Compound", res. getURI ( ). toASCIIString ( ) )
assertEquals ( 20, wrapper. getGenre ( ) )
Assert. assertFalse ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isWarnEnabled ( ) )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertThat ( status, is ( 200 ) )
assertEquals ( original, ArrayUtils. nullToEmpty ( original ) )
assertThat ( record. getDashForm ( ), is ( "HOE_201901061500" ) )
Assert. assertEquals ( createArrayNode ( createObjectNode ( "fieldName", 3 ), createObjectNode ( "fieldName", 4 ), createObjectNode ( "fieldName", 5 ) ), result )
assertEquals ( "MESSAGE_TEXT", msg )
Assert. assertNotNull ( thesaurus )
assertEquals ( "error", ex. getMessage ( ) )
assertEquals ( "B", storeConfig. getRealmNames ( ). iterator ( ). next ( ) )
assertEquals ( 2, cnt. get ( ) )
Assert. assertEquals ( testTemplate1. templateName ( ), templateName )
Assert. assertEquals ( "Hello World", ejbInstance. sayHello ( ) )
assertEquals ( asList ( "6:1", "7:2", "8:6", "6:5", "6:1", "6:2", "6:3", "6:4" ), messageResults )
Assert. assertEquals ( 1, countingNotifier. getNotificationCount ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])", m. toString ( ) )
assertSame ( ctrlA, accelerator )
assertEquals ( Math. sqrt ( 2 ), distance. compute ( point1, point2 ), EPSILON )
assertThat ( ifCounterDataIndexable. matchesPojo ( this. counterData ), is ( true ) )
assertEquals ( 1, added )
Assert. assertEquals ( 0, ret )
assertEquals ( CustomsItemCollection. getData ( ). size ( ), 1 )
assertEquals ( HttpStatusCode. NOT_FOUND. getStatusCode ( ), connection. getResponseCode ( ) )
assertEquals ( ( i + 1 ) * ( i + 2 ), ksession. getQueryResults ( "TestDeclaredLengthWindow" ). iterator ( ). next ( ). get ( "$eventCount" ) )
Assert. assertEquals ( "b", response. getSource ( ). get ( "_labels" ) )
assertEquals ( 0.90, score, 0.74 )
assertEquals ( "a a\\n", found )
assertThat ( skipped, is ( 3L ) )
assertThat ( result, is ( expected ) )
assertViewName ( mav, "editProfile" )
assertEquals ( jt. getRawClass ( ), Long. class )
assertFalse ( hidden )
assertTrue ( command. serialize ( ) instanceof String [ ] )
assertEquals ( folder. getUnpackSize ( ), 266L )
Assert. assertEquals ( String. format ( "a %s text", this. html ( bb, "red", "colored" ) ), formatter. format ( "a [color=red]colored[/color] text", defaultOptions ( ) ) )
assertResultSet ( res )
assertTrue ( "Configurations are not the same", cc2. getConfigList ( ). isEmpty ( ) )
assertArrayEquals ( new Timestamp [ ] { new Timestamp ( 1999 - 5 - 16, 00, 591, 1970 - 02 -04, 01, 33.01, null }, Timestamps. getTimeStamps ( ) )
assertEquals ( avClusteringCoefficient, Double. NaN )
assertEquals ( HibernateTemplates. DEFAULT, JPAProvider. getTemplates ( em ) )
assertProjectOut ( compiledFileNames, testDirPath )
assertThat ( conn, is ( notNullValue ( ) ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertThat ( tz. isInvalid ( date, PlainTime. of ( 1, 0 ) ), is ( true ) )
assertEquals ( "country.name", city. getName ( ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, n ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertEquals ( bar1, bar2 )
Assert. assertTrue ( "Incorrect renderer supplied", getWebXmlRenderer ( popup ) instanceof WPopupRenderer )
assertEquals ( o1, o2 )
assertThat ( result. toString ( ), is ( "OuterBean2{name='bingoohuang', bean=InnerBean2{addr='gongjianfang'}}" ) )
assertNotNull ( plist )
assertArrayEquals ( new byte [ ] { 0x02, 0x03, 0x04, 0x08, 0x03, 0x04, 0x08, 0x04, 0x03, 0x04, 0x08, 0x04, 0x03, 0x04, 0x04, 0x03, 0x04, 0x04, 0x03, 0x04, 0x04, 0x0A, 0x0C, 0x0D, 0x0A, 0x03, 0x08, 0x0D }, MessageEncoder. encodeFlags ( msg ) )
assertNotNull ( Regulation. reader ( ). read ( ) )
assertEquals ( "1", ( ( NumberValue ) value1 ). getValue ( ) )
assertEquals ( "../..", result. toString ( ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, Right. COMMENT, this. doc ) )
assertEquals ( "Unexpected type returned for property 'foo'", String. class, container. getType ( "foo" ) )
assertThat ( phraseService. mark ( encodedPass ), is ( password ) )
assertEquals ( 0, shell. run ( new String [ ] { "listbookies" } ) )
Assert. assertEquals ( 6, count. intValue ( ) )
assertEquals ( 2, orgUnits. size ( ) )
Assert. assertFalse ( "Should return false because component model is null", result )
assertThat ( nodeTuple, is ( nullValue ( ) ) )
get ( uri + "/service" ). then ( ). assertThat ( )
assertContentSame ( rs, rc, columnParam1 )
assertFalse ( "There was cacheable headers", HeaderUtils. hasCacheableHeaders ( headers ) )
assertEquals ( top, entry. getValue ( ) )
assertEquals ( Target. CONTROLLER_ID_MAX_SIZE, targetRegistry. findTargets ( Target. CONTROLLER_ID ). size ( ) )
assertEquals ( "The cat loves a dog.", this. realiser. realise ( completeSen ). getRealisation ( ) )
assertEquals ( Short. valueOf ( "123" ), converter. getAsObject ( facesContext, new UIPanel ( ), "123" ) )
assertTrue ( uploadSuccessful )
Assert. assertNull ( result )
assertFalse ( optionalLong. isPresent ( ) )
assertTrue ( length == 0 )
Assert. assertEquals ( correlation. computeCorrelationMatrix ( input ), new BlockRealMatrix ( expected ) )
assertEquals ( "c3b4e0a3e4f0a0f0f0f0f0f", out )
assertArrayEquals ( plaintext, recovered )
assertTrue ( NamedCurve. verify ( pub, dataForSigning, signatureGen ) )
Assert. assertNotNull ( topic )
assertSame ( t, TEST_2007_07_15_12_30_40_987654321 )
assertSame ( "Wrong in memory representation", node, model. getInMemoryRepresentation ( ) )
assertEquals ( "2 && 3", expr. getParameterValue ( ) )
assertEquals ( HttpStatusCode. INTERNAL_SERVER_ERROR. code, response. getStatus ( ) )
assertThat ( result. fullName ( ), is ( Long. class. getName ( ) ) )
Assert. assertEquals ( "[1, 3]", s. toString ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, name + "_diff" ) )
assertEquals ( "dist job res is not 0:", 0, res )
Assert. assertEquals ( "99999999999.9999", cide. getQuantidadeBCCIDE ( ) )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
assertEquals ( "A:\\t[A, C]\\t\\n" + "C:\\t\\n", res )
assertThat ( source. contains ( "\\r" ), is ( true ) )
Assert. assertEquals ( "(nt_range (nt_point_location (nt_base_location - (nt_number 456)) _ (nt_point_location (nt_base_location - (nt_number 123)))))", range. toStringTree ( parser ) )
assertTrue ( "failed to decrypt ciphertext", Arrays. equals ( message, expectedMessage ) )
TerminalParserTest. assertResult ( parser, "synchronize(1);", SynchronizedBlockStatement. class, "synchronize(1);" )
assertEquals ( TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. NOT, TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. REGEX, v, TERM_FACTORY. getConstantLiteral ( "A.*B", XSD. STRING ), TERM_FACTORY. getConstantLiteral ( "i", XSD. STRING ) ) ), translation. get ( 0 ) )
Assert. assertEquals ( 0, queue. size ( ) )
assertEquals ( "3", new On ( new IntegerFieldValue ( expression ) ). asString ( ) )
assertTrue ( "timed out waiting for thread to monitor", System. currentTimeMillis ( ) - startTime < 500 )
Assert. assertEquals ( expResult, result )
assertEquals ( value, this. impl. getString ( key ) )
assertThat ( id, greaterThan ( 0 ) )
assertEquals ( "Repository contains incorrect number of statements", 1, testCon. size ( ) )
assertEquals ( "a\\nb\\nc\\n", str )
assertThat ( result, is ( "" + "{\\n" + "  \\"service\\" : \\"abuse-contact\\",\\n" + "  \\"link\\" : {\\n" + "    \\"type\\" : \\"locator\\",\\n" + "    \\"href\\" : \\"http://rest.db.ripe.net/abuse-contact/193.0.0.1\\"\\n" + "  },\\n" + "  \\"parameters\\" : {\\n" + "    \\"primary-key\\" : {\\n" + "      \\"value\\" : \\"193.0.0.0 - 193.0.0.255\\"\\n" + "    },\\n" + "  \\"abuse-contacts\\" : {\\n" + "      \\"key\\" : \\"TR1-TEST\\",\\n" + "      \\"email\\" : \\"abuse@test.net\\",\\n" + "      \\"suspect\\" : false,\\n" + "    \\"org-id\\" : \\"\\"\\n
assertThat ( captor. getValue ( ), is ( lazyPersistSetting ) )
assertPutFails ( association, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert. assertEquals ( "in the room and a car", this. realiser. realise ( this. inTheRoom ). getRealisation ( ) )
assertNotNull ( Role. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertNotNull ( result )
assertEquals ( "2.25", event. getLocation ( ). getReference ( ). toString ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( Result. OK, api. afterFormFinishWizard ( ) )
Assert. assertNotSame ( session. getRandomGenerator ( foo0 ), session. getRandomGenerator ( foo1 ) )
Assert. assertEquals ( expected, value )
assertEquals ( modelFromConfig, modelFromTest )
assertThat ( element. getText ( ), is ( "value with appended text" ) )
assertEquals ( original, other )
assertOut ( "for each (var i:int in obj) {\\n\\tbreak;\\n}" )
assertNull ( replicationCache. getCachedReplicationEvent ( "foo" ) )
assertFalse ( undefined. isReleased ( ) )
assertObjectEquals ( "{type:'array',items:{type:'string'}}", x )
assertFalse ( "testIsInProgressSubmissionFalse 0", installItemService. isInProgressSubmission ( context, item ) )
Assert. assertEquals ( infoReverse. getSequence ( ), resultTranscript )
Assert. assertEquals ( 11, patients. size ( ) )
assertEquals ( "testString", s. get ( 0 ) )
assertEquals ( new Integer ( 2 ), MethodFixture. getArgNum ( ) )
assertStat ( result )
assertEquals ( "{a:'(a1=v1,a2=123,a3=null,a4=\\\\'\\\\')',b1:'\\\\'true\\\\'',b2:'\\\\'123\\\\'',b3:'\\\\'null\\\\'',c1:'v1',c2:'123',c4:''}", r )
assertEqualsIgnoreWhitespace ( expected, real )
assertEquals ( listResponse. getNames ( ), getResponse. getNames ( ) )
assertEquals ( "x.artistName = 'bla'", ejbql )
assertValidQuery ( query )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertArrayEquals ( refar, d. getResult ( ) )
assertEquals ( "Failed to generate do while loop with nested expressions and no body", DOWHILE_NESTED_EMPTY, s )
assertEquals ( 60, totalBestFriendAge )
Assert. assertEquals ( "Wireless LAN", capitals )
assertTrue ( errors. equals ( noErrors ) )
assertTrue ( Version. isCached ( version ) )
assertNotNull ( zookeeperClient )
assertEquals ( expected, xml )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n  return React.createElement('div', { 'id': 'foo' });\\n}" )
Assert. assertEquals ( "http://foo:8080/bar?a=A&b=B", filter. getRequestURL ( request ) )
assertThat ( writer. get ( ), is ( - 100 ) )
assertThat ( target. getMergeFeature ( feature1. getId ( ) ). getStatuses ( ). get ( 0 ), is ( Statuses. UNKNOWN. getTextName ( ) ) )
assertThat ( bar ( ), is ( 16 ) )
assertEquals ( expected, new HashSet < > ( recovered ) )
assertEquals ( expecteds, actuals )
Assert. assertEquals ( lb. getStatus ( ), LoadBalancerStatus. ERROR )
assertNotNull ( "Specialty is null", entity )
assertNotEquals ( 0, tokenLists. size ( ) )
assertEquals ( expectedId, service. findById ( "name" ). getLong ( ) )
assertThat ( results. hasNext ( ), equalTo ( false ) )
Assert. assertEquals ( Status. NO_CONTENT. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( Response. Status. NO_CONTENT. getStatusCode ( ), response. getStatus ( ) )
assertNotNull ( result )
Assert. assertArrayEquals ( StringUtils. getHexString ( b ), StringUtils. getHexString ( c ) )
assertThat ( errors, hasFieldErrors ( "givenName" ) )
assertTrue ( "BinaryEncoder test-" + i, b )
assertEquals ( 8, tool. heapCaculation ( ) )
assertResponse ( response, 400, "{\\"errors\\":[\\"Unknown metric name \\"[foo]\\"}]}" )
assertFalse ( validator. validate ( EntityNames. STAFF, staffId ). equals ( staffId ) )
Assert. assertEquals ( "test", cache. getProgram ( ) )
assertEquals ( f. getQuery ( ), q )
Assert. assertEquals ( expectedCrossProduct, crossProduct )
assertEquals ( metadata, repository. getModuleMetadata ( "TEST-REPLICA" ) )
assertNotNull ( writer )
assertEquals ( "", result )
assertEquals ( 0, app. executeApplication ( args ) )
assertEquals ( eagAttributes, transport. getAttributes ( ) )
Assert. assertSame ( category, this. component. getCategory ( CATEGORY_A ) )
Assert. assertNull ( result )
context. assertIsSatisfied ( )
Assert. assertFalse ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
Assert. assertEquals ( 10, monitor. getAllHealthCheck ( ) )
assertEqualsIgnoreWhitespace ( drlExpected, drlActual )
assertEquals ( "", v. toString ( ) )
assertEquals ( 1, multiServer. getNumCalls ( ) )
assertEquals ( expResult, result )
Assert. fail ( e. getMessage ( ) )
assertTrue ( throwables [ 0 ] instanceof NullPointerException )
assertEquals ( ABSTRACT, a. getAddress ( ). getHostAddress ( ) )
assertFalse ( pgql. parse ( query ). isQueryValid ( ) )
assertEquals ( "Wrong value", ( short ) 0xdead0000, u. s16. get ( ) )
Assert. assertFalse ( isPortInCircuit )
assertEquals ( checkProfessionalUser. getId ( ), professionalUser. getId ( ) )
assertEquals ( clearPassword, password )
assertThat ( resolver. resolve ( CamelCaseStory. class ), equalTo ( "org/jbehave/core/io/camel_case.story" ) )
assertPermanentCount ( playerA, "Cabal Therapist", 0 )
assertEquals ( expected, actual )
assertEquals ( 1.0, linear. getFloat ( 0, 1 ), 1e-1 )
assertOutWithMetadata ( "/**\\n" + " * foo.bar.baz.A\\n" + " *\\n" + " * @fileoverview\\n" + " *\\n" + " * @suppress {checkTypes|accessControls}\\n" + " */\\n" + "\\n" + "\\n" + "goog.provide('foo.bar.baz.A');\\n" + "\\n" + "\\n" + "\\n" + "/**\\n" + " * @constructor\\n" + " */\\n" + "foo.bar.baz.A = function() {\\n" + "};\\n" + "\\n" + "\\n" + "/**\\n" + " * Prevent renaming of class. Needed for reflection.\\n" + " */\\n" + "goog.exportSymbol('foo.bar.baz.A', foo.bar.baz.A);\\n" + "\\n" + "\\n" + "/**\\n" + " * Metadata\\n" + " *\\n" + " * @type {Object.<string, Array.<Object>>
Assert. assertTrue ( response. toString ( ), response. result ( ) )
assertSame ( t. toLocalTime ( ), LocalTime. MIDNIGHT )
assertEquals ( TestUtil. SOCKS_TEST_PROXY, result. get ( 0 ) )
assertThat ( arbitraryObject, should ( matcher ). inOrder ( ) )
assertNotNull ( con. createStatement ( ) )
Assert. assertEquals ( 1, events. size ( ) )
assertThat ( result, is ( false ) )
Helpers. assertJson ( json, expectedJson )
assertEquals ( "Input value json should match output value json", objectMapper. readTree ( inputJson ), objectMapper. readTree ( outputJson ) )
assertNotNull ( cache )
assertNotNullOrEmpty ( "Tags should never be null.", tags )
assertSame ( t, TEST_2007_07_15_12_30_40_987654321 )
Assert. assertTrue ( localesInOrder. contains ( LocaleUtility. fromSpecification ( OpenmrsConstants. GLOBAL_PROPERTY_DEFAULT_LOCALE_DEFAULT_VALUE ) ) )
assertEquals ( 1, rule. getExcludedExclusions ( ). size ( ) )
assertEquals ( 1, foundComments. size ( ) )
assertOut ( "a++" )
Assert. assertEquals ( diffusioncoefficient, result [ 0 ], 0.1 )
assertTrue ( details. hasAborted ( ) )
assertEquals ( "Hello World", response. body ( ). asString ( ) )
Assert. assertEquals ( "fred      ", serviceRetrievalService. retrieveStats ( "test" ) )
Assert. assertEquals ( expected, queryFromBuilder )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertTrue ( baseWriter. getBuffer ( ). toString ( ). contains ( "HEADER" ) )
MockEndpoint. assertIsSatisfied ( mockEndpoints )
Assert. areEqual ( true, countA == 20 && countB == 0, "验证优先级的分库" )
assertEquals ( "|1|2|3|\\n" + "|true|\\n" + "|false|\\n" + "|true|\\n", tabulator. headedTableOf ( data ) )
assertEquals ( 2, executeTestMethod ( test, Integer. class, null, 0 ). intValue ( ) )
assertTrue ( content. contains ( ".metadata" ) )
assertThat ( result, is ( "value" ) )
assertEquals ( 2, list. size ( ) )
Assert. assertEquals ( degree_EXPECTED, degree_ACTUAL )
assertEquals ( 77, mr. getLocation ( ) )
assertEquals ( expected, actual )
VertxAssert. assertEquals ( "The graph operation resulted in an error: " + response. getString ( "message" ), "ok", response. getString ( "status" ) )
assertTrue ( "testCanEditBooleanAuth 0", collectionService. canEditBoolean ( context, collection ) )
JsonTestUtils. assertHasFields ( response, Team. class )
Assert. assertTrue ( new JSONObject ( PEDIGREE_WITH_ONE_CANCE ). similar ( new JSONObject ( captured ) ) )
assertEquals ( r, circle. mbb ( ) )
Assert. assertEquals ( "inException", o )
assertEquals ( String. valueOf ( ReturnCode. NO_SPEECH. code ( ) ), eventCaptor. getValue ( ). getParameter ( "rc" ) )
assertEquals ( null, io. getDocumentById ( id1, false ) )
assertSame ( t1, t2 )
assertEquals ( 1, x. size ( ) )
assertEquals ( "GPGLL", s )
Assert. assertEquals ( "{\\"auctionSummary\\":{\\"total\\":19,\\"total\\":29,\\"total\\":29,\\"total\\":29,\\"total\\":29,\\"auctions\\":[{\\"category\\":\\"COHORT\\",\\"title\\":\\"Rollover\\",\\"price\\":8.95},{\\"category\\":\\"FOO\\",\\"title\\":\\"Rollover\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95},{\\"category\\":\\"COHORT\\",\\"title\\":\\"Rollover\\",\\"price\\":19.95},{\\"category\\":\\"COHORT\\",\\"title\\":\\"Rollover\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"auctionSummary\\":{\\"category\\":\\"COHORT\\",\\"title\\":\\"Rollover\\",\\"price\\":19.95},{\\"category\\":\\"COHORT
assertOrecValue ( orec, orecValue )
assertFalse ( andFn. accept ( 1 ) )
assertTrue ( Bytes. equals ( key1Bytes, key1ExpectedBytes ) )
assertEquals ( 100, vrp. getJobs ( ). values ( ). size ( ) )
assertNotNull ( vo )
assertEquals ( port, result )
assertOut ( "var /** @type {CustomVector} */ a = new CustomVector([], 'String')" )
assertEquals ( domain, target. getDomains ( ). get ( 0 ) )
assertEquals ( expResult, result )
assertEquals ( 1, repositoryService. createProcessDefinitionQuery ( ). count ( ) )
assertEquals ( "<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
Assert. assertFalse ( setA. equals ( setB ) )
Assert. assertEquals ( 0.06303, test. bootstrap ( x, y, 10000, false, rng ), 1E-2 )
assertEquals ( VALID_DATE. toString ( ), Deencapsulation. getField ( enrollmentGroup, "lastUpdatedDateTimeUtcDate" ). toString ( ) )
Assert. assertTrue ( dao. insert ( contacts ) )
assertEquals ( "Failed to filter query string", expectedResult, normalizedUrl )
assertEquals ( value, property. getOriginalValue ( ) )
assertOutput ( freemarker. benchmark ( ) )
Assert. assertEquals ( "unexpected XML protocol result", sb. toString ( ), tagOut )
assertEquals ( DOMAIN_NAME + ":00:00:00", client. getAttribute ( DOMAIN_NAME, "SelfNaming" ) )
assertTrue ( exception. getMessage ( ). contains ( "must be a Collection" ) )
assertThat ( value, is ( equalTo ( 1024L ) ) )
assertEquals ( "Required profiles", "runner", new FelixPlatformBuilderF100T122 ( m_bundleContext, "version" ). getRequiredProfile ( m_platformContext ) )
assertTrue ( "size must be 1, but it is - " + queryModel. size ( ), queryModel. size ( ) == 1 )
assertTrue ( validRange + " should be valid", accepts )
assertEquals ( expResult, result )
assertEquals ( constraintViolations. size ( ), 0 )
Assert. assertEquals ( "result2", result. get ( "outputVariable1" ) )
assertAntFilter ( filters, "{\\"address\\":{\\"streetName\\":\\"At my place\\",\\"streetNumber\\":\\"1\\"},\\"email\\":\\"somewhere@no.where\\",\\"firstName\\":\\"Martin\\",\\"lastName\\":\\"Frey\\",\\"reports\\":[{\\"address\\":null,\\"email\\":\\"report0@no.where\\",\\"firstName\\":\\"First 0\\",\\"lastName\\":\\"Doe 0\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report1@no.where\\",\\"firstName\\":\\"First 1\\",\\"lastName\\":\\"Doe 1\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report2@no.where\\",\\"firstName\\":\\"First 2\\",\\"lastName\\":\\"Doe 2\\",\\"manager\\":null,\\"reports\\":null},{\\"address\\":null,\\"email\\":\\"report3@no.where\\",\\"
assertNoConsumerSession ( exception. get ( ) )
Assert. assertEquals ( 3.0, f. someValues ( ), 1e-5 )
testRunner. assertAllFlowFilesTransferred ( PutKudu. REL_SUCCESS, 1 )
assertEqualsIgnoreWhitespace ( expected, real )
Assert. assertEquals ( "[9mid[0mstatus[0m", s )
assertThat ( output. toString ( ), is ( "mygoodlittlebadson" ) )
Assert. assertEquals ( "number emitted tuples", 2, swinSink. collectedTuples. size ( ) )
assertThat ( findFeature ( features, "UpdateFirmware" ), is ( instanceOf ( UpdateFirmwareFeature. class ) ) )
assertEquals ( ha. compareTo ( hb ), 0 )
assertEquals ( "simpleValue", entry. getValue ( ) )
assertEquals ( - 1, requestOptions. getWaitForResponses ( ) )
assertEquals ( "ReasonToTerminate", pod1. getStatus ( ) )
Assert. assertFalse ( memberTracker1. getConnectedMembers ( ). contains ( connectMember2 ) )
Assert. assertEquals ( Lists. mutable. with ( "Tom", "Bob", "Hiro", "Mary" ), names )
Assert. assertTrue ( result. isValid ( ) )
assertEquals ( arr, resultArr )
assertThat ( entities. isEmpty ( ), is ( true ) )
assertTrue ( address1. equals ( address2 ) )
Assert. assertEquals ( dto1, loaded1 )
assertThat ( result. toSet ( ). size ( ), is ( 1 ) )
assertEquals ( 25, counter. getCountIterations ( ) )
Assert. assertTrue ( "rows in db", outputOperator. getNumOfEventsInStore ( APP_ID ) >= 0 )
assertEquals ( "http://example.com?url=https://example.com", got. toString ( ) )
assertEquals ( entity, second )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, testName + "_diff" ) )
Assert. assertEquals ( "Upload a file", text )
assertEquals ( HttpStatus. SC_NOT_FOUND, response. getStatus ( ) )
assertThat ( c, is ( 2 ) )
Assert. assertEquals ( 12, cars. size ( ) )
assertEquals ( "1.2.3", System. getProperty ( "user.dir" ) )
assertThat ( encoded, stringContainsInOrder ( "<Patient xmlns=\\"http://hl7.org/fhir\\">", "<contained>", "<Condition xmlns=\\"http://hl7.org/fhir\\">", "<id value=\\"1\\"/>", "<extension url=\\"test\\">", "<valueReference>", "<reference value=\\"#1\\"/>", "</valueReference>", "</extension>", "<birthDate value=\\"2016-04-05\\"/>", "</Patient>" ) )
assertArrayEquals ( "invalid opaque value", value, opaque. getOpaque ( ) )
assertTrue ( result. length ( ) > 0 )
assertEquals ( Money. of ( Money. of ( 0.075, "CHF" ), Money. of ( 1, "CHF" ) ), ci. apply ( Money. of ( 1, "CHF" ) ) )
assertFocusModificationSanity ( context )
assertNotNull ( image )
assertTrue ( "Should get response", response!= null && response. contains ( "John Doe" ) )
assertOverflow ( new BigDecimal ( x ). add ( new BigDecimal ( y ) ), result, x + y )
assertEquals ( null, execContext. getBean ( TestDom. class ) )
assertEquals ( model, actual )
assertEquals ( score, 0.0, 0.00001 )
assertTrue ( activityManager. isStartedSplashScreens ( ) )
assertNotNull ( log. getObserver ( ) )
assertTrue ( "lowest value is not in the range [" + lowest + "], last: " + last, lowest <= last )
assertEquals ( "Expected 5 results!", 5, count )
assertTrue ( config. isClientProfile ( ) )
Assert. assertEquals ( "node path", traversalDescription. getUniqueness ( ). getType ( ) )
JSONAssert. assertEquals ( expected, response. getBody ( ), false )
assertEquals ( "urn:test:prem", documentIRI. toString ( ) )
assertEquals ( dataSet. getRowCount ( ), 50 )
assertTrue ( ARQ. isTrueOrUndef ( ARQ. optOrderByDistinctApplication ) )
assertTrue ( obj. getSensorsObservations ( ). isEmpty ( ) )
assertEquals ( "!valid", expr. getParameterValue ( ) )
Assert. assertNull ( pm. getMyPm ( ) )
assertEquals ( store. getRoot ( ). getNode ( "a" ), root. getNode ( ) )
assertTrue ( isValid )
assertEquals ( Boolean. TRUE, victim. removeServiceProvider ( path ) )
Assert. assertTrue ( dumpToFile. exists ( ) )
assertTrue ( flag )
assertNull ( msg. getStringValue ( key ) )
assertEquals ( 0, ic. getItemIds ( 0, - 1 ). size ( ) )
Assert. assertEquals ( 1, queue. size ( ) )
assertEquals ( 0, out. size ( ) )
assertThat ( elasticsearchTemplate. indexExists ( "test-index" ), is ( true ) )
assertNull ( request. getEcommerceTax ( ) )
assertThat ( actual, is ( expected ) )
assertEquals ( expected, actual )
Assert. assertFalse ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, this. access, this. document ) )
Assert. assertEquals ( Arrays. < Object > asList ( 1, 2, 3 ), list )
assertEquals ( logs. get ( i ), message )
assertEquals ( expected, this. output. toString ( ) )
assertTrue ( ( Boolean ) result )
assertTrue ( between. appliesToProperty ( "bar" ) )
assertEquals ( expectedQuery, actualQuery )
Assert. assertEquals ( 5, files. length )
assertNotNull ( result )
assertEquals ( "<a><b><xxx newElementAttribute=\\"1234\\"></xxx></b></a>", result. getResult ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( localDate. toString ( ddMMMyyyy, Locale. ENGLISH ), "17-Jun-2013" )
MatcherAssert. assertThat ( meaning. getMeaning ( ), CoreMatchers. is ( "two" ) )
TestUtils. assertEquals ( anexo, anexoModificado )
Assert. assertEquals ( results [ p ], density, 0.0 )
assertVisitorSatisfied ( )
assertEqualsIgnoreWhitespace ( expected, real )
assertNull ( singletonServiceGroup. unregisterService ( firstReg ) )
assertEquals ( "A0=A1B1A0", spec. decodeString ( "A0=A1B1A0" ) )
assertNotNull ( Document. fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "ETXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( 1, ( ( AtomicBoolean ) dispatcher. state. get ( ) ). atomicGet ( ) )
assertTrue ( copies + " copies should be " + inserts, copies < inserts )
assertEquals ( utf7Folder, pub [ 0 ] )
assertEquals ( crisis, result. get ( 0 ) )
assertArrayEquals ( TEST_DATA, attrs. getBytes ( 0x7FE00010 ) )
assertEquals ( actionsExecuted, actionsEngine. getExecutedActions ( ). size ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
assertTrue ( f. evaluate ( ) )
assertEqualsJson ( expected, actual )
assertEquals ( 7, bytes. length )
assertEquals ( 2, ( int ) entries. count ( ). toBlocking ( ). single ( ) )
assertOut ( "org.apache.royale.utils.Language.sort(a, 16)" )
assertEquals ( description, activity. getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertThat ( windows. withGaps ( ). isEmpty ( ), is ( true ) )
assertCollectionSerialization ( expectedJSON, collection )
assertFalse ( PharmaModulo11Validator. isValid ( pzn ) )
assertNotNull ( "Parameter value is null", getParameterRepositoryService ( ). getParameterValueAsString ( key, "foo" ) )
Assert. assertNull ( new CompareTool ( ). compareVisually ( dest, sourceFolder + "cmp_signed" + file, destinationFolder, "diff_", getTestMap ( new Rectangle ( 30, 245, 200, 12 ) ) ) )
assertThat ( status, is ( 1 ) )
Assert. assertEquals ( ImmutableList. of ( new Term ( "noIndex", 1 ), new Term ( "noIndex", 2 ), new Term ( "noIndex", 3 ), new Term ( "noIndex", 4 ), new Term ( "noIndex", 5 ) ), terms )
assertEquals ( v1. getKey ( 2 ), v2. getKey ( 3 ) )
assertEquals ( 3, uris. size ( ) )
Assert. assertEquals ( "a", rootEl. getNodeName ( ) )
Assert. assertEquals ( "somethings", unit )
assertFalse ( currentData. isPresent ( ) )
assertMatches ( expr. matcher ( "/a/b/c/d/f/@something" ), "/a/b/c", "/\\\\$2u/b/c/y/z/d/f" )
assertThat ( "Count of customer", res, is ( 0 ) )
assertEquals ( 0, methods. size ( ) )
assertTrue ( val. getBoolean ( "a" ) )
Assert. assertEquals ( originalPaths, harPaths )
assertTrue ( producer. isSorted ( ) )
assertSame ( root, transform ( root ) )
assertionHelper. assertIrodsFileOrCollectionDoesNotExist ( targetIrodsCollection, irodsFileSystem. getIRODSAccessObjectFactory ( ), irodsAccount )
assertEquals ( "abcd", FuturesExtra. asyncTransform3 ( futureA, futureB, futureC, ( a, b, c ) -> Futures. immediateFuture ( a + b + c ), MoreExecutors. directExecutor ( ) ). get ( ) )
Assert. assertEquals ( "fib 2", res. toString ( ) )
assertEquals ( "q=1&q=2", result. getParameters ( ). get ( "date" ). getAsString ( ) )
Assert. assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CPush%2F%3E", elem. toUrl ( ) )
Assert. assertEquals ( "no messages found", null, receiveMsg )
assertEquals ( "from SURVEY s a s2\\n" + "on s.ID = s2.ID", query. toString ( ) )
assertTrue ( "Bundle file '" + _bundle + "' for bundle '" + bundle + "' does not exist.", _bundle. exists ( ) )
assertEquals ( 6, cashFlow. getSize ( ) )
assertEquals ( "{\\"__metadata\\":{\\"id\\":\\"ORG-1501\\",\\"title\\":\\"Comment with comment\\"},\\"_id\\":\\"ORG-1501\\",\\"title\\":\\"Comment with comment\\"},\\"_rev\\":{\\"__metadata\\":{\\"id\\":\\"ORG-1501\\",\\"title\\":\\"Comment with comment\\"},\\"_type\\":\\"issue_type\\",\\"title\\":\\"Comment with comment\\"}\\",\\"_id\\":\\"ORG-1501\\",\\"title\\":\\"Comment with comment\\" from the issue\\",\\"_type\\":\\"issue_type\\",\\"search_index\\":{\\"__metadata\\":{\\"id\\":\\"__metadata\\",\\"title\\":\\"Search Index\\",\\"title\\":\\"Issue with comment\\" at \\"0.0.0\\"},\\"_type\\":\\"issue_type\\",\\"search_index\\":{\\"__metadata\\":{\\"id\\":\\"__REVISION__\\",\\"title\\":\\"Comment with comment\\" from \\"ORG-1501\\",\\"type\\":\\"
assertNull ( entryRelationship )
Assert. assertTrue ( charset. equals ( CharsetUtil. getCharset ( charsetIndex ) ) )
assertNotNull ( form )
assertThat ( credentials, is ( notNullValue ( ) ) )
assertEquals ( 2, actualExpectedWorkerLinkCount )
Assert. assertTrue ( response. contains ( "<out>abc</out>" ) )
Assert. assertNotEquals ( resp. getStatus ( ), HttpServletResponse. SC_UNSUPPORTED_MEDIA_TYPE )
with ( ). body ( "foo" ). put ( "foo" ). then ( ). assertThat ( )
assertEquals ( sc1, sc2 )
assertThat ( stream. count ( ), equalTo ( 1L ) )
assertEquals ( "lucene condition serialization is wrong", expected, actual )
assertTrue ( outStr. contains ( "Permission(0) is not granted." ) )
Assert. assertFalse ( "The first null should not be equal to the second null.", molecule1. equals ( molecule2 ) )
assertThat ( domain. getLogHomeEnabled ( ), equalTo ( true ) )
assertTrue ( ( Boolean ) result )
assertThat ( ms, lessThan ( 50000L ) )
Assert. assertTrue ( "Should have found a match", f. matches ( je ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 06" ) )
assertEquals ( "Part1/Part2trunk/Part2branch/Part3", sw. toString ( ) )
assertThat ( separators, is ( ";\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n;\\n" ) )
assertEquals ( recordTable, recordTable )
assertEquals ( 0, report. getEventCount ( ) )
Assert. assertTrue ( t1 == t2 )
assertThat ( sshClientEnvVar, containsString ( "127.0.0.1" ) )
assertThat ( new DoubleTypeValidator ( "hoge" ). validate ( parameters, "aaa" ), is ( "hoge" ) )
Assert. assertEquals ( expectedCardinality, outputCardinality )
assertThat ( a. overlaps ( b ), is ( true ) )
this. assertVerification ( )
assertEquals ( buf. toString ( ), expected )
assertEqualsStoreParams ( params, params2 )
assertEquals ( 1, bucket. size ( ) )
assertEquals ( Expression. LESS_THAN, exp. getType ( ) )
assertTrue ( MatrixUtility. equals ( original, inverse, 0.00001 ) )
assertEquals ( RestrictedHealthStatus. WARN, response. getHealthy ( ) )
assertTrue ( predicate. isHighlighted ( null, adapter ) )
assertNull ( array )
assertEquals ( expectedSqlForMathOperations8 ( ), result )
Assert. assertEquals ( "(aa_change_ssr (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 124)) _ (aa_number 3 _ 4 ))", aa_change_ssr. toStringTree ( parser ) )
assertTrue ( pct. isOverrideSystemSettings ( ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    struct f_0001_0000 {int m0;};\\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\n" + "}\\n", BridgeMethodCompiler. createBridgeCWrapper ( functionType. getReturnType ( ), functionType. getParameterTypes ( ), functionType. getParameterTypes ( ), "f" ) )
assertEquals ( err. getClass ( ), HttpPostRequestEncoder. ErrorDataEncoderException. class )
assertUserByFullName ( users, "User 5" )
assertArrayEquals ( expectedBytes, serializer. serialize ( ) )
assertNotNull ( kbase )
BatchMainMock. assertLog ( "main(" + "-initiator, myUser, " + "-type, hgdb, " + "-configuration, hgdb, " + "-arg1, value1, " + "-arg2, value2, " + "-arg3, value3)" )
assertTrue ( filter instanceof MockFilter )
assertEquals ( items, matchingResults. size ( ) )
Assert. assertEquals ( "did not get expected length back", expectedLen, actualRead )
assertEquals ( "Jimmie", object. getString ( "firstname" ) )
Assert. assertTrue ( writer. isStopped ( ) )
assertEquals ( user, mockResult. included ( "user" ) )
assertEquals ( myFile, entry. getFile ( ) )
assertEquals ( 0, violations. size ( ) )
VertxAssert. assertEquals ( "The graph operation resulted in an error: " + response. getString ( "message" ), "ok", response. getString ( "status" ) )
assertTrue ( Properties. class. isAssignableFrom ( p. getPropertyType ( ) ) )
assertArrayEquals ( expected, params. getTripleIndexes ( ) )
Assert. assertTrue ( p. g ( 2 ) < 0 )
assertEquals ( 0, result. size ( ) )
assertEquals ( expected, actual )
assertEquals ( df. getIRI ( "jar:koala.owl" ), loadOntology. getIRI ( ) )
assertSame ( "same info", info, info ( "m", "m desc" ) )
maven. forProject ( basedir ). execute ( "verify" ). assertErrorFreeLog ( )
Assert. assertEquals ( "hash is invalid", expectedResult, result )
assertEquals ( "failed to generate class with method calling method on this", CLASS_WITH_METHOD_CALLING_METHOD, cls )
assertEquals ( "Response status code should be 403", 403, val. getStatus ( ) )
assertNull ( tested. getValue ( ) )
Assert. assertTrue ( map. getTransformers ( ). contains ( expected ) )
assertEquals ( "http://foo/Patient?_or=search&_format=json", capt. getValue ( ). getURI ( ). toString ( ) )
assertTrue ( cohortService. getCohortMembershipByUuid ( RestTestConstants2_1. COHORT_MEMBERSHIP_UUID ). getVoided ( ) )
assertTrue ( reduce. getWindowing ( ) instanceof Time )
assertTrue ( resultFound )
assertTrue ( validator. getValidationResult ( ). hasFailures ( ) )
Assert. assertTrue ( checkFlowNodeInstanceState ( NodeInstaceStates. PASSED_STATE, process, defaultInstanceId ) )
assertEquals ( service. getSize ( new String [ ] { "", "", "" } ), 3 )
assertFalse ( "Expected ListSchema string validation failure did not succeed", schema. validate ( stringEntity ) )
assertTrue ( permissionEvaluator. hasPagePermission ( authentication, "project", "branch", DocumentrConstants. HOME_PAGE_NAME + "/foo", Permission. VIEW ) )
assertNotNull ( statsd )
Assert. assertNull ( handler1. recvd ( cParameters ) )
Assert. assertEquals ( 2, users. size ( ) )
assertTrue ( "Property not cleared", node. getProperties ( ). isEmpty ( ) )
assertThat ( readBytes ( testee ), is ( "Hello|" ) )
Assert. assertEquals ( "[1, 2, 3]", formatted )
assertEquals ( "Expected 400 but got " + response. getStatus ( ), 400, response. getStatus ( ) )
assertEquals ( 200, connection. getResponseCode ( ) )
assertThat ( result. getType ( ), is ( "OFPOutPacket" ) )
assertEquals ( JobStatus. ACCEPTED, jobResultArgumentCaptor. getValue ( ). getStatus ( ) )
runner. assertNotValid ( service )
assertTrue ( Arrays. equals ( expectedResult, encoded. array ( ) ) )
Assert. assertEquals ( "Invalid return value", expected, returnValue )
assertEquals ( expected, actual )
assertEquals ( columnInfo1. toString ( ), decodedColumnInfo. get ( 0 ). toString ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertEquals ( sortedValues, values )
assertFalse ( iterator. hasNext ( ) )
assertEquals ( expResult, result )
assertEquals ( 0, listener. calls )
Assert. assertEquals ( "did not correctly compute path", expected, path )
assertThat ( url, is ( equalTo ( "/abc/Anything/def/123/ghi/123.45" ) ) )
assertIsRemovedToInvisible ( columnModel, 0 )
assertEquals ( 3L, longStream. getAsLong ( ), 0 )
assertEquals ( expectedDate, actualDate )
assertEquals ( assertion, rowMean )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
assertTrue ( "Persist operator should be added to dag", persistOperatorMeta instanceof PersistStreamOperator )
assertEquals ( "moving throttle slider should update label", "123", label. get ( ) )
assertResultSet ( res )
assertEquals ( testData, new TreeMap < Key, Value > ( scanner. next ( ) ) )
assertEquals ( 1, findIndexObject. size ( ) )
assertNotNull ( proveedorFacturas. getId ( ) )
assertEquals ( "True has to be returned in this case", preferredBlockSize, inf. getPreferredBlockSize ( ) )
Assert. assertEquals ( ImmutableSet. of ( "keyToInclude", "anotherKeyToInclude" ), filteredPhotonRequest. keys ( ) )
assertEquals ( 2, actualExpectedWorkerLinkCount )
Truth. assertThat ( GrpcCallContext. createDefault ( ). withTimeout ( Duration. ofSeconds ( - 1L ) ). getTimeout ( ) )
Assert. assertEquals ( 1, a. rank ( ) )
assertEquals ( "should have fired twice, the list is empty", list, ( ( List ) workingMemory. getGlobal ( "results" ) ). get ( 0 ) )
assertTrue ( entity. equals ( entity2 ) )
assertEquals ( "No such service demo", result )
assertTrue (! outputEntity. hasKey ( ) )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( "TestJobToString\\n" + "jobid:1014873536921\\n" + "status: FAILED\\n" + "jobfile:job file\\n" + "tracking url:tracking url\\n", job. toString ( ) )
assertEquals ( "<b><<test>></b>", multiLineText. toDisplay ( ) )
Assert. assertEquals ( 201, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertThat ( "stepdefs.json", equalTo ( new File ( url. toURI ( ) ). toURI ( ). toURL ( ) ) )
assertTrue ( result. size ( ) == 2 )
assertTrue ( response. getEntry ( ). size ( ) > 0 )
Assert. assertTrue ( result. equals ( "10 �拽�转" ) )
assertSseResponse ( sseResponse, "event:eventName", "data:payload1", "event:eventName", "data:payload2" )
assertTrue ( this. validator. validate ( c ). isEmpty ( ) )
mojos. assertBuildOutputs ( new File ( basedir, "target/classes" ), "plugin-descriptor/Plugin.class" )
Assert. assertEquals ( "The house where I played poker has been abandoned since 1986.", realised. getRealisation ( ) )
assertFalse ( authorizer. isAuthorized ( MockWebContext. create ( ), profiles ) )
assertThat ( map. getPrice ( "red" ), is ( 17L ) )
assertTrue ( close. await ( 10, SECONDS ) )
assertEquals ( orderMap. get ( id ), i )
assertThat ( "Kein Ergebnis geliefert", target, notNullValue ( ) )
assertEquals ( NS, testSubject. getPrefix ( TEST ) )
Assert. assertEquals ( "anta怒 40 minutoj", prettyTime. format ( prettyTime. calculatePreciseDuration ( new Date ( new Date ( ). getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert. fail ( type [ j ] + ", " + b + ", " + a )
assertEquals ( 3.5d, Utils. getMean ( numbers ), 0 )
Assert. assertEquals ( "88132-020", retornoConsultaCadastroEndereco. getCep ( ) )
assertTrue ( serviceSet. isEmpty ( ) )
assertThat ( IDN. toUnicode ( result. toString ( ) ), equalTo ( URI. create ( expected ) ) )
assertNull ( query. offset ( 10 ). fetchOne ( ) )
Assert. assertTrue ( ZipCompletionScanner. isCompleteZip ( file ) )
assertEquals ( asList ( new LogoutRequest ( ) ), serverEvents. collect ( ) )
Assert. assertThat ( values, Matchers. contains ( "value 0.5;p=v;q=0.5", "value 1.0" ) )
assertEquals ( newModified, Files. getLastModifiedTime ( path ). toMillis ( ) )
assertPolygons ( expected, polys )
assertNotNull ( accessToken )
assertTrue ( database. getManager ( ). externalizer ( "test" ). exists ( ) )
Assert. assertEquals ( "RefTable value is incorrect", 2.5, value, 0 )
ModelTestBase. assertIsoModels ( expected, m )
assertThat ( violations. size ( ), is ( 0 ) )
assertTrue ( "expected oval but got " + count, count == ERROR_LIMIT )
assertEquals ( Float. class, handler. apply ( rs, 1 ). getClass ( ) )
assertFalse ( NetworkUtils. isFileInUnsynced ( paths, getNetwork ( ). getClients ( ). get ( 0 ). getPath ( ), true ) )
assertNotNull ( edm )
assertThat ( timePeriod. with ( Duration. STD_CLOCK_PERIOD ), is ( Duration. ofClockUnits ( 2, 61, 120 ) ) )
assertTrue ( true )
assertEquals ( IOTester. VALUE, buf. getPayload ( ) )
Assert. assertEquals ( 2, table. getRowCount ( ) )
assertEquals ( value, v. getProperty ( id, "v" ). getProperty ( "value" ) )
assertEquals ( 0, result. size ( ) )
assertValidSelector ( result )
assertThat ( result, is ( sameInstance ( primaryKeysResponse ) ) )
Assert. assertNotNull ( result )
Assert. assertTrue ( getException )
assertEquals ( expected, dotFileFormat. format ( dotFileFormat. createSubgraph ( "cluster_gXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) ) )
assertThat ( state. getRowIndex ( ), is ( 10 ) )
assertThat ( underTest. createToken ( FORMAT, principalCollection ), is ( equalTo ( TOKEN ) ) )
assertEquals ( 10, instance. getFoo ( ), 0.01 )
given ( ). body ( extractZipContentBody ). put ( "zip/test/path/notfound.zip/test/content.zip" ). then ( ). assertThat ( )
assertThat ( renewer. getCurrentlyHeldLeases ( ). size ( ), equalTo ( 0 ) )
Assert. assertEquals ( "The rule does not match the built one", testRule, builtRule )
assertEquals ( "Compression mode is " + eOutputCompressionMode. name, eOutputCompressionMode. name, controller. getLogRow ( ) )
assertEquals ( "dubbo://127.0.0.1:20887", result )
Assert. assertTrue ( "topic was not removed after removal", topic. getTopicMap ( ) == null )
assertEquals ( PropUtil. getIntSessionProperty ( sess, "test", 1 ), 2 )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertFalse ( "check same component", _update. hasUpdate ( NEW_STRING_PATH, newComponent2 ) )
assertEquals ( 4, playerScores. getScore ( ) )
assertEquals ( "array type", 1, parsed. params. get ( 0 ). first. arrayDepth )
Assert. assertTrue ( check. equals ( o ) )
assertTrue ( usl. getLegend ( ) instanceof UniqueSymbolArea )
assertTrue ( 5.0f == d. asFloat4 ( ) )
Assert. assertTrue ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
assertTrue ( easyCTO. getClass ( ). getName ( ). equals ( this. getClass ( ). getName ( ) ) )
assertEquals ( HttpServletResponse. SC_UNAUTHORIZED, response. getStatus ( ) )
Assert. assertEquals ( Response. Status. NOT_FOUND. getStatusCode ( ), response. getStatus ( ) )
assertNotNull ( NativeCodeLoader. getLoadingError ( ) )
assertEquals ( value, out. getSizeT ( ) )
assertThat ( wrapperFilename, is ( expected ) )
assertEquals ( "hello", filterResult. getValue ( ) )
assertEquals ( 0, version. getMinor ( ) )
assertThatSliderValueIs ( slider. value )
assertThat ( resourceIds, equalTo ( expectedResourceIds ) )
Assert. assertEquals ( emptySet ( ), result )
assertEquals ( o1, o2 )
assertEquals ( new ModelNode ( ). set ( "foo" ), store. getConnector ( REMOTE_CONNECTOR_ADDRESS ). getValue ( ) )
assertNotNull ( logServiceState )
assertTrue ( response. getStatusCode ( ) == 201 )
assertEquals ( expected, actual )
assertThat ( parameter, is ( "braa" ) )
Assert. assertEquals ( 1, buf. remaining ( ) )
assertEquals ( "dois sextilh玫es de inteiros", actual )
assertEquals ( 1, detections. length )
Assert. assertEquals ( "Failure - expected validatorList size to be 2", 2, str. size ( ) )
assertTrue ( workbenchMenuStandardNavBarView. getMenuItems ( ). contains ( menuItemId ) )
assertFalse ( zoomUI. canZoomOut ( ) )
assertOut ( "function foo(bar:*):int {\\n\\treturn -1;\\n}" )
assertTrue ( vrpBuilder. getLocationMap ( ). containsKey ( "end" ) )
assertEquals ( contentExpected, contentReturned )
Assert. assertTrue ( rep. containsKey ( "name" ) )
Assert. assertEquals ( 200, li. getValue ( 50 ), 1e-5 )
assertEquals ( new Integer ( 2 ), newestVersion. getIndex ( ) )
Assert. assertEquals ( 0, services. size ( ) )
assertThat ( TestI18n. testMessage. text ( "Test", "Message" ), is ( "Message Test Message" ) )
assertThat ( result, is ( nullValue ( ) ) )
assertEquals ( result, expecting )
assertEquals ( "7:::{\\"name\\":\\"edwald\\",\\"args\\":[{\\"a\\":\\"b\\"},2,\\"3\\"]}", result )
assertThrown ( val, promise )
assertPaths ( asList ( "com", "sonatype", "example", "metadata" ), paths )
Assert. assertEquals ( Integer. valueOf ( 3 ), object )
Assert. assertTrue ( permissions. toString ( ), permissions. isEmpty ( ) )
assertEquals ( "a b\\n", found )
assertEquals ( cal. getTime ( ), w. getEnd ( ) )
Assert. assertEquals ( 1, entities. size ( ) )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getAllPrivileges ( set ( "jranalyst" ), ActiveRoleSet. ALL ) ). toString ( ) )
assertRecord ( record )
assertEquals ( "field.toLowerCase()", p. toString ( ) )
assertEquals ( ref, toText ( select ( jcas, Tcf. class ) ) )
assertFalse ( hasLock )
Assert. assertEquals ( "Hello TestNG!", helloMock. sayHello ( ) )
Assert. assertTrue ( this. entityAccess. isOwner ( ) )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
assertEquals ( "2.1", PropertyHelper. getJobVersion ( property ) )
assertTrue ( outContent. toString ( ). equals ( args [ 3 ] + " is in progress.\\n" ) )
assertArrayEquals ( data, ( short [ ] ) deserialize. readObject ( ) )
Assert. assertNull ( mapping )
assertThat ( comments. size ( ), is ( 2 ) )
assertEquals ( row, serde. capturedRow )
this. assertResponse ( faultResponse, message, this. defaultMessage, this. parameters )
Assert. assertEquals ( result. getResultSize ( ), 2 )
assertFalse ( nicHandle. equals ( nicHandle ) )
assertEquals ( false, victim. getConfiguration ( ). isDebug ( ) )
assertFalse ( b )
Assert. assertTrue ( timer. getTime ( ) >= 0 )
assertEquals ( "Failed to convert empty String to a BigInteger", BigInteger. ZERO, model. getAmountInt ( ) )
Assert. assertNotNull ( "File value is missing", atFields. get ( "file" ) )
assertSame ( solution, selection. execute ( population ) )
assertEquals ( newValue, presenter. getValue ( ) )
Assert. assertNull ( resource )
assertEquals ( 4, rules. size ( ) )
assertEquals ( pp. getValue ( ), new Payload < > ( "error test error" ). getValue ( ) )
assertSelected ( get ( 0 ) )
assertConstruct ( tq, ttl )
Assert. assertEquals ( JSON, writer. toString ( ) )
assertEquals ( 1, ret_val )
assertTrue ( "TabGroup should have been updated", tabGroup. getTabs ( ). size ( ) == 1 )
assertEquals ( "2 << 3", expr. getParameterValue ( ) )
assertEquals ( "<foo:bar id=\\"1\\"></foo:bar><abc:def id=\\"2\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertFalse ( like1. equals ( like2 ) )
assertEquals ( Util. list ( "dalquist@example.com" ), attribsSet. iterator ( ). next ( ). getAttributes ( ). get ( "mail" ) )
assertEquals ( "Reference value not set", MAGIC, ref. getValue ( ) )
assertArrayEquals ( expected, kernel. get ( ), 0.000000001 )
assertEquals ( "Answer returning " + value, r. toString ( ) )
Assert. assertEquals ( expectedSignature, signature )
assertEquals ( "Hello World!", config. helloWorld ( ) )
Assert. assertEquals ( "Should return exactly one variable", 1, response. jsonPath ( ). getMap ( "" ). size ( ) )
assertions. doesNotContain ( ( short ) 4, index )
assertTrue ( validatedConfig. isValid ( ) )
assertEquals ( a. getDstContextAlias ( ), "dst" )
RouteUtils. assertSatisfied ( result )
assertThat ( query. count ( ), is ( 0L ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
assertThat ( log. getEvents ( ). size ( ), equalTo ( 3 ) )
Assert. assertEquals ( "The received ID in non force delete case is different than expected VALID_ID_FOR_DELETION.", VALID_ID_FOR_DELETION, da. getId ( ) )
assertEquals ( Deencapsulation. getField ( jobResult, "jobResult.jobState" ), twinState. getJobState ( ) )
Assert. assertEquals ( getResultMatrix ( ), resultMatrix )
assertTrue ( "The output file is not the same as the source file", FileUtils. contentEquals ( pom1, FileUtils. readFileToString ( pom1. getAbsoluteFile ( ) ) ) )
assertEquals ( "test.csv", input. getFileName ( ) )
Assert. assertNotEquals ( Board. Cell. CELLS [ 7 ] [ 0 ], move. end )
assertEquals ( SIMPLE_LINK_TEXT, convertedEvent. getBody ( ) )
assertEquals ( expectedMethods, calledMethods )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE LENGTH(nodes.property) < 'literal'" ) )
Assert. assertTrue ( "output does not contain the expected number of failures: " + getLog ( ), getLog ( ). contains ( "failureslist: Failed list size: " ) )
assertEquals ( ORDER_XML, orderXML )
assertNotNull ( instruction )
assertEquals ( service. getSize ( new String [ ] { "", "", "" } ), 3 )
assertEquals ( 0, ind. get ( v ) )
Assert. assertArrayEquals ( message, expecteds, actuals )
assertTrue ( "Result: " + htmlToDisplay, htmlToDisplay. contains ( "<span id=\\"obs-id\\" class=\\"span12\\">" ) )
Assert. assertEquals ( "Frank", MVEL. eval ( "?parent.?lastName.length()", person ) )
assertEquals ( "http://java.example.com:8080/foo/bar/buz/qux", got. toString ( ) )
assertEquals ( expectedAddMonths ( ), result )
assertEquals ( multiplier, delegate. multiply ( ) )
assertEquals ( "60.1", ( ( Node ) r. get ( "node" ) ). getProperty ( "geom" ) )
assertEquals ( 404, response. getStatus ( ) )
context. assertSentrySemanticException ( statement, "drop database " + DB1, semanticException )
assertTrue ( getNoErrorMsg ( ), result )
assertCustomerWithLinksProperties ( )
assertFalse ( result )
assertEquals ( 1, adapter. getColumnIndex ( id ) )
assertTrue ( new File ( outputDir, "raw" ). exists ( ) )
assertEquals ( "Cloned instance", EmptyState. INSTANCE, cloned )
assertEquals ( DataTypeManager. DefaultDataClasses. STRING, f. getType ( ) )
assertEquals ( "jdbc/DS", propertyLoader. getUniqueName ( ) )
Assert. assertTrue ( "Cache miss match for user " + getProperty ( "sample.userId1" ), json. getAsString ( "cacheMiss" ). equalsIgnoreCase ( "true" ) )
assertEquals ( "\\t", mojo. getSchema ( ). getLineSeparator ( ) )
assertEquals ( 1, routingTable. getRoutingList ( ). length )
assertEquals ( "Wrong number of child builders", CHILD_COUNT, childBuilders. size ( ) )
assertEquals ( "2008/DT Sichuan/JJ earthquake/NN From/IN Wikipedia/NN,/, the/DT free/NN encyclopedia/NN", firstLine )
assertEquals ( 1, query ( ). from ( a ). where ( a. account. firstname. eq ( "a" ) ). fetchCount ( ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) <> $literal" ) )
assertThat ( one, is ( equalTo ( "1" ) ) )
Assert. assertEquals ( "default source weight", 100, source. getConfig ( ). getWeight ( ) )
assertEquals ( "i'm running", obj. getStringValue ( ) )
context. assertEquals ( context. toString ( ), replyBody. getString ( "op" ) )
Assert. assertTrue ( versionMatchFilter. check ( makeAssociationDescriptor ( "1.*" ), makeServiceItem ( "1.*" ) ) )
Assert. assertNull ( value )
assertInvocations ( client. getBusinessActivityInvocations ( ) )
Assert. assertEquals ( "x=" + x, sig. value ( x ), sigL. value ( x ), EPS )
Truth. assertThat ( stream )
assertResultSet ( res )
Assert. assertSame ( e, this. mocker. getComponentUnderTest ( ). process ( e ) )
BeanAssert. assertBeanEquals ( bean, parsed )
assertThat ( actual, is ( sameInstance ( this. facesContext ) ) )
assertEquals ( MULTIPARTFILE_PATHS. size ( ), allFiles. size ( ) )
assertThat ( graph. run ( always ( "fallback response" ) ), equalTo ( g1. run ( "fallback response" ) ) )
assertNotNull ( reporter )
Assert. assertFalse ( orPredicate. test ( null ) )
assertThat ( taxFactorForPerson, equalTo ( TAX_FACTOR ) )
assertTrue ( "Parsed IOR not found", pior. find_object_id ( ) == pior2. find_object_id ( ) )
assertQuery ( tdr. getTestData ( testId ), result, "a.r.out().type('ACTS_IN')." )
assertEquals ( "OK", r )
MatcherAssert. assertThat ( new BasicVocabulary ( ImmutableMap. of ( lexeme, Mockito. mock ( Lexeme. class ) ) ). pickLexeme ( Mockito. mock ( Vocabulary. class ), Mockito. mock ( Vocabulary. class ) ), CoreMatchers. equalTo ( lexeme ) )
assertEntityHasValue ( mappedKey, value )
assertConfig ( cfg, "permessage-compress", expectedParams )
assertEquals ( 1, value. getPartition ( ) )
assertOrder ( InternetServiceOrder. States. InboundWhile. class, new InternetServiceOrder ( "1970-01-01T12:00:00.000Z", new Date ( ) ) )
assertEquals ( days, testResult )
assertEquals ( "filename.middle.jpg", filename )
TestUtils. assertEquals ( interesadoVO, interesadoDTO )
assertEquals ( "fresh", html )
assertEquals ( 12345678910L, tiffLong. getValue ( ) )
assertEquals ( Status. INTERNAL_SERVER_ERROR. getStatusCode ( ), response. getStatus ( ) )
assertResponse ( response, 200, "{\\"results\\":[{\\"name\\":\\"Q-TEST\\",\\"values\\":[{\\"name\\":\\"EUR\\",\\"value\\":\\"2012-12-03\\"}]}}" )
assertTrue ( actual. containsAll ( all ) )
assertEquals ( "appName1", config. getAppName ( ) )
assertNotNull ( Sim. reader ( ). read ( ) )
assertThat ( xoManager. getConnection ( ). toString ( ), containsString ( "[WARN] XOManager is not a valid XOManager" ) )
assertThat ( ont. containsAxiom ( otherAnnoAssertion ), is ( false ) )
assertTrue ( cell. getTerrain ( ) instanceof Spice )
assertThat ( sampledValue. getMeasurand ( ), equalTo ( measurand ) )
assertTrue ( null == obj )
Assert. assertEquals ( StatusCodes. NOT_FOUND, result. getStatusLine ( ). getStatusCode ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. ORCID_BIO_UPDATE )
Assert. assertTrue ( sum. longValue ( ) == 255 )
assertEquals ( 0.282828282828, ss. getPValue ( ), 1e-5 )
assertEquals ( prefix_and_search_result, result )
Assert. assertEquals ( 2, terms. size ( ) )
assertEquals ( 0, count )
assertThat ( connectionsAfterReporting - connectionsBeforeReporting, is ( 0L ) )
assertThat ( anyTS. getMinimum ( MINUTE_OF_DAY ), is ( 0 ) )
assertEquals ( with, without )
assertNotNull ( injectionTargetInformation. getManagerFactory ( ) )
assertTrue ( table. isSelectable ( ) )
arrays. assertDoesNotContain ( description, actual, value, index )
assertSame ( connection, recoveredConnection )
Assert. assertEquals ( expected1 + expected2, result )
assertThat ( Duration. in ( units ). between ( t1, t2 ), is ( Duration. ofPositive ( ). months ( 1 ). days ( 27 ). hours ( 9 ). minutes ( 15 ). build ( ) ) )
assertEquals ( "a.c at", found )
assertTrue (! result )
assertEquals ( "<table> <colgroup> <col> <colgroup> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\"rowgroup\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr></tbody></table>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
Assert. assertEquals ( 2, ops. size ( ) )
assertArrayEquals ( new String [ ] { "abc", "123" }, a )
Assert. assertTrue ( hub. findEndp ( ). getProperties ( ). containsKey ( "notifyQueue.url" ) )
assertTrue ( glass. isEmpty ( ) )
assertEquals ( OK. getStatusCode ( ), response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "http://localhost:8080/jaxrs-uri-template-1.0-SNAPSHOT/app/download/file/{path:.+}", result )
assertEquals ( expected, actual )
mockAggregated. assertIsSatisfied ( )
Assert. assertEquals ( 2, micc. errors. size ( ) )
connection. assertTransaction ( )
assertEquals ( 123L, deserialize. readLong ( ) )
assertEquals ( 10, all. size ( ) )
assertEquals ( "- 34, channel=0\\n", found )
assertEquals ( cause, sut. getCause ( ) )
Assert. assertNotNull ( "null free tagging service", freeTaggingService )
assertEquals ( sandboxName, System. getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertEquals ( expectedScript, observedScript )
Assert. assertEquals ( Integer. class, clazz )
assertEquals ( "<p>### title</p>", html )
assertTrue ( ex. isPrime ( 81 ) )
Assert. assertEquals ( "Test", out )
assertSame ( "The list from the detailed history, was not the same as returned from checkout", list, actualList )
Assert. assertFalse ( this. component. equals ( new DefaultMatchCountImpl ( this. feature2, HP01 ) ) )
Assert. assertEquals ( "did not get expected data length", testLen, inputStream. available ( ) )
assertEquals ( Base64. getEncoder ( ). encodeToString ( baos. toByteArray ( ) ), iterators )
assertTrue ( r1. contains ( d ) )
assertTrue ( result )
Assert. assertEquals ( 0.0, p, 0.1 )
assertEquals ( "Should return HTTP 201 (Created)", HttpStatus. CREATED, adapterResponse. getResponseStatus ( ) )
assertEquals ( "{f:1}", o )
assertNotNull ( result )
assertEquals ( "Abies-v眉lg氓r卯s-忙bi茅帽t酶", pn. canonicalAscii ( ) )
assertEquals ( "<", writer. toString ( ) )
assertThat ( target. matchExactly ( action ), is ( false ) )
assertEquals ( TextUtil. readUTF8 ( path ), generator. getResult ( ) )
Assert. assertEquals ( "Test that getLocationY returns -1", - 1, val )
Assert. assertEquals ( ECHO_STRING, outMessage )
Assert. assertEquals ( "2013/09/03", result. getText ( ) )
assertEquals ( "Incorrect Short Reason", "Platform Down leela.local Custom Property (customPropertyValue) ", alertManager. getShortReason ( testPlatformAlert ) )
assertEquals ( qf1, qf2 )
assertNull ( ret )
Assert. assertNotNull ( raised )
assertEquals ( this, thatDataservice )
assertThat ( selectedCell, is ( "B2" ) )
assertResultSet ( fc. getMembers ( filter, new TypedObjectNodeXPathEvaluator ( ) ), "PHILOSOPHER_1" )
assertThat ( range. normalize ( - 10.0 ), equalTo ( 0.0 ) )
Assert. assertEquals ( A_PASCAL_22, outMatrix )
Assert. assertTrue ( mockEndpoint. isSatisfied ( ) )
assertEquals ( typeId1, typeId2 )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
Assert. assertEquals ( "SELECT 1 XOR 1 XOR 1;", text )
assertEquals ( g. getFirst ( ), null )
assertEquals ( "<foo:bar id=\\"1\\"></foo:bar><abc:def id=\\"2\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertFired ( watch )
assertEquals ( 2, wlsClusterConfig. getClusterSize ( ) )
assertTrue ( latch. await ( 1, TimeUnit. SECONDS ) )
assertTrue ( correct. get ( namedEntity. getLabel ( ) ). equals ( disambiguatedURL ) )
assertNoOrders ( )
Assert. assertEquals ( now, value )
assertEquals ( 1, annotationProxy. value ( ) )
assertFalse ( "Property still present", conf. containsKey ( key ) )
assertEquals ( 2, x. size ( ) )
assertEquals ( "value", value. asIs ( ) )
assertThat ( harry. getFriends ( ), hasItems ( sally, steve ) )
assertEquals ( "Failed to generate foreach loop using a String array", FOREACH_STRING_IN_ARRAY, foreachWithStringArray )
assertEquals ( VALUE, jwt2. getJWTClaimsSet ( ). getSubject ( ) )
assertThat ( converter. toJavaObject ( writableList ), is ( ( Object ) javaList ) )
Assert. assertTrue ( received )
assertTrue ( actual )
assertEquals ( "name", caller. getResponseBody ( ) )
assertThat ( result, contains ( a, b, c ) )
assertEquals ( text, new String ( text ). toString ( ) )
assertArrayEquals ( new String [ ] { "A", "B", "C" }, r. readAtomStringList ( ) )
Assert. assertEquals ( "Value is incorrect", map ( DATE_TIME_2_STRING, "test" ), value )
Assert. assertEquals ( IrodsRuleInvocationTypeEnum. PYTHON, actual )
assertSame ( argument, service. call ( context, null, null, args ) )
assertEquals ( "The return value is not correct.", Tag. EVAL_PAGE, this. tag. doEndTag ( ) )
assertNotNull ( "Could not find workflow " + WF_APICONSUMER, wfResource )
Assert. assertEquals ( ( 2.0 + 3.0 ) / ( 2.0 + 3.0 ), result, 0 )
assertTrue ( value instanceof NullWritable )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff_maxheight_04_" ) )
assertThat ( writer. get ( ), is ( nullValue ( ) ) )
assertNull ( event. getField ( P_NAME ) )
assertEquals ( InetAddress. getByName ( "127.0.0.1" ), event. getRemoteAddress ( ) )
assertTrue ( 5.0f == d. asFloat4 ( ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( flag, result )
assertEquals ( sparseRep. getNonZeroSize ( ), 0 )
assertTrue ( Files. exists ( reconstructed ) )
assertEquals ( "123", ids )
Assert. assertFalse ( result )
assertFalse ( filter. shouldDeliverNotification ( eventContext ) )
assertSingleNotificationType ( EventType. FAILED_AUTHENTICATION )
assertThat ( oobChannel. getName ( ), is ( authority ) )
assertNotNull ( smartsheet )
assertEquals ( "Incorrect number of events parsed", 2, info. getTasks ( ). size ( ) )
assertTrue ( "This roles should have the privilege", role. hasPrivilege ( "priv1" ) )
assertTrue ( plugin. getPlayerBanStorage ( ). getBan ( player. getUUID ( ) ). isSilent ( ) )
Truth. assertThat ( name. toString ( ) )
assertEquals ( 2, numberOfOccurences )
assertEquals ( "TestValue", ( ( Context ) context. lookup ( "context" ) ). lookup ( "test" ) )
assertEquals ( "<p>Hello</p>", doc. select ( "div" ). first ( ). outerHtml ( ) )
assertServletHasHandlerForRequest ( )
assertEquals ( tag, Tagger. getTag ( o ) )
Assert. assertEquals ( Status. NOT_FOUND. getStatusCode ( ), resp. getStatus ( ) )
assertTrue ( requestParameter. isFloat ( ) )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
assertThat ( conf, containsString ( "<interaction><code value=\\"" + SystemRestfulInteraction. HISTORYSYSTEM. toCode ( ) + "\\"/></interaction>" ) )
assertEquals ( "Jon Doe", firstName )
assertEquals ( "ix", suffix )
assertThat ( entry, is ( instanceOf ( CreateVertexLogEntry. class ) ) )
assertEquals ( iSun, iMine )
assertEquals ( locations. get ( src. next ( ) ), locations. get ( dest. next ( ) ) )
assertEquals ( 0, result )
assertions. containsSequence ( sequence )
assertThat ( actual, containsString ( "failing-host" ) )
Assert. assertEquals ( 0, irodsTagValues. size ( ) )
assertEquals ( expected, x )
Assert. assertEquals ( 200, result. getCode ( ) )
assertEquals ( expected, parser. process ( source ) )
Assert. assertTrue ( inDelta ( a, 0f, 1f ) )
assertTrue ( roster. isSearch ( ) )
assertThat ( dog. names. length, is ( equalTo ( 2 ) ) )
assertTrue ( "Serializable is not the expected object", serialized instanceof Serializable )
assertTrue ( out. equals ( "M6=2" ) )
assertEquals ( SampleLocations. UNKNOWN, cargo. getLastKnownLocation ( ) )
assertThat ( nsp. getZeroDigit ( new Locale ( "fa" ) ), is ( "0" ) )
Assert. assertEquals ( 10, analyser. getLoadDelivered ( route ). get ( 0 ), 0.01 )
assertThat ( other, DateMatchers. sameSecond ( date ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TimeValue. ofSeconds ( 20 ), impl. getReceivedAge ( entry ) )
Assert. assertEquals ( 1, size )
assertEquals ( "Certificate can be parsed", ValidationMessage. getMessage ( validationCheck, Locale. GERMAN ) )
assertEquals ( streamName, sn. getName ( ) )
assertThat ( parameters, nullValue ( ) )
assertSeen ( results, s1 )
assertEquals ( expected, cassandraRowMapper. map ( resultSet ). next ( ) )
assertEquals ( query, result )
assertTrue ( response. getStatusCode ( ) == 422 )
assertEquals ( "chromosomes not present", 0, queryResult. size ( ) )
checker. assertEquals ( "[" + s + "][" + r + "][" + c + "]", exp, act )
Assert. assertEquals ( ( Integer ) 11, res )
assertThat ( result. toString ( ), containsString ( "<id>my-project-0-SNAPSHOT</id>" ) )
assertFalse ( getDependencyResolver ( ). includeDependencies ( kieModuleMetaData ). isEmpty ( ) )
assertEquals ( "d367897f3c894e0c4a", rec. get ( "SUM" ) )
assertSame ( cmd. returnValue, cmd. await ( cmd. time, TimeUnit. MILLISECONDS ) )
assertEquals ( "(a 3 4)\\n", found )
assertEquals ( intStr, moneyStr )
Assert. assertFalse ( success )
assertFalse ( "Page contains the given text", $ ( GridElement. class ). exists ( ) )
assertEquals ( line. trim ( ), file. getName ( ) + " - " + extractedFile. getName ( ) )
Assert. assertEquals ( num, count )
assertNotNull ( factory )
assertTrue ( result. isResultOK ( ) )
Assert. assertFalse ( evaluator. hasPermission ( authentication, targetId, targetType, permission ) )
assertEquals ( expected, actual )
assertEquals ( 3, springBeansConfig. getTargets ( ). size ( ) )
assertEquals ( valueList, concatenate. getValues ( context, item ) )
Assert. assertFalse ( canUse )
assertEquals ( "FROM Log AS (x1 =? AND x1.SEX =?)", log. getRight ( ). toString ( ) )
assertFalse ( Framework. isRuntimeNotInitialized ( ) )
Assert. assertEquals ( new Long ( Long. MAX_VALUE ), RequestObjectHelper. getStartOffset ( requestObject ) )
assertThat ( snippetFor ( "I have:\\" ), is ( equalTo ( expected ) ) )
assertEquals ( keyExpected, keyBuilt )
Assert. assertEquals ( "DEFAULT", vars. get ( "architect" ) )
assertTrue ( testFailed. isEmpty ( ) )
assertEquals ( "<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil. stripNewlines ( doc. html ( ) ) )
MutableMessageFactoryTest. assertExpiryDateEquals ( expiryDateValue, message )
Assert. assertEquals ( uuid. toString ( ), result. toString ( ) )
assertTrue ( c. hasNext ( ) )
assertNotNull ( response )
assertThat ( action. action, is ( RetryPolicy. RetryAction. RetryDecision. RetryDecision. RetryDecision. FAIL ) )
assertEquals ( KarmaCalculator. UPVOTED_QUESTION_OR_ANSWER, votedAtSomething. getKarma ( ) )
assertThat ( tags. size ( ), is ( 2 ) )
assertEquals ( "number of rooms", 3, numberOfRounds ( ) )
assertTrue ( filter. match ( record ) )
assertListTEquals ( listT, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 )
assertThat ( exportedYaml, is ( expectedYaml ) )
assertEquals ( arr, resultArr )
assertArrayEquals ( e, a )
assertEqualsIgnoreWhitespace ( expected, real )
Assert. assertEquals ( 1.0, buffer [ 0 ], EPSILON )
assertions. isNotEqualTo ( expected )
Assert. assertTrue ( enabledSections. isEmpty ( ) )
assertEquals ( value, picker. getEditor ( ). getValue ( ) )
assertEquals ( buf. toString ( ), "[\\"a\\",\\"b\\",\\"c\\"]" )
assertThat ( TimestampInterval. parseISO ( "2012-092T14:15/P4DT1H45M" ), is ( expected ) )
assertEquals ( "123456", result )
assertEquals ( 2, constraints. size ( ) )
assertEquals ( response. getStatus ( ), JsonResponseStatus. FAIL )
assertEquals ( "There should be no errors", 0, chain. getChildren ( ). size ( ) )
assertNull ( store. update ( newTd ) )
assertEquals ( JodaBeanUtils. collectionType ( test, Person. class ), List. class )
Assert. assertFalse ( nodes. isEmpty ( ) )
assertEquals ( "Absolute Path: /two/bookstore/request", path )
assertEquals ( expectedHtml, removeTextRange ( result ) )
assertEquals ( 100_000, counter. get ( ) )
Assert. assertEquals ( "OK", nsObjStr )
assertThat ( feature. getId ( ), is ( nullValue ( ) ) )
assertEquals ( featureService, service )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertThat ( list. isEmpty ( ), is ( true ) )
assertThat ( result, equalTo ( output ) )
assertEquals ( "test", m2. getHeader ( "Subject", null ) )
assertEquals ( String. valueOf ( "default" ), value. getValue ( ) )
assertTrue ( historyFile. length ( ) > maxLines )
assertEquals ( original, restored )
assertIsAborted ( tx )
assertCharacterCut ( input, expectedOutput, 1, 1 )
assertThat ( target. containsLink ( link. getId ( ) ), is ( true ) )
Assert. assertEquals ( "hi!", sampleType. element )
assertEquals ( LIMIT * 3, dps. size ( ) )
assertOut ( "foo : goog.array.forEach(obj, function (i) {\\n\\tbreak foo;\\n})" )
assertEquals ( "Checking subseq as expected", expectedDna, subSeq. getSequenceAsString ( ) )
assertTrue ( differentiator. isNew ( fileInputStream ) )
assertEquals ( 1, constraints. size ( ) )
assertEquals ( expexted, actual )
assertThat ( response, containsString ( queryResult ) )
assertThat ( result, is ( nullValue ( ) ) )
assertEquals ( expResult, result )
assertEquals ( 0, myTestInstance. delete ( doc, Durability. NONE ) )
assertTrue ( comparator. isDifferent ( lhs, rhs ) )
assertEquals ( Arrays. asList ( "ls -ltr", "grep -v hello" ), t. splitUnquoted ( str ) )
assertEquals ( toolTip, tree. getToolTipText ( ) )
assertEquals ( expResult, result )
assertEquals ( EdmSimpleTypeKind. DateTime, edmDateType )
Assert. assertEquals ( inputSchema, properties. main. schema. getValue ( ) )
assertEquals ( 12, results. size ( ) )
assertThat ( new SomeClass ( ), is ( sut ) )
assertThat ( error, containsString ( "Config file " + file. getAbsolutePath ( ) + " does not exist" ) )
assertArrayEquals ( new double [ ] { 1, 2.0, 3 }, airMass, 1e-5 )
assertEquals ( ace, parsed )
assertPersonDataIntegrity ( person )
assertNull ( msg. remove ( key ) )
assertEquals ( val, app. getTest ( ) )
assertEquals ( expectedFormKey, actualFormKey )
assertEquals ( NOT_FOUND, response. getStatus ( ) )
Assert. assertEquals ( CurrentUser. getUser ( ), FalconTestUtil. TEST_USER_2 )
Assert. assertEquals ( expectedString, resultBootstrapString )
Assert. assertEquals ( "3 乇�夭 15 爻丕毓鬲 38 丿�� 丿�诏乇", t. format ( durations ) )
assertTrue ( s, s. contains ( "SampleTree" ) )
assertThat ( description. toString ( ), is ( "is \\"x\\"" ) )
Assert. assertTrue ( patientService. isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert. assertArrayEquals ( SOL_22_EXPECTED, SOL_22_ACTUAL, DELTA )
Assert. assertEquals ( newCfg, ctx. getConfiguration ( ) )
assertEquals ( "Date not equal to original date", d. getTime ( ), d2. getTime ( ) )
assertEquals ( exp, TokenProvider. DEFAULT_EXPIRATION )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
Assert. fail ( "Cannot marshall a complex map" )
assertEquals ( this. expectedResult, this. actualResult )
Assert. assertNull ( v1. id ( ) )
Assert. assertEquals ( before - 1, after )
assertEquals ( expected, result )
assertEquals ( "2.2", link. getVer ( ) )
assertEquals ( "IP address should be set to the IP address that was specified", IP_ADDRESS, ipAddress )
assertNotNull ( jsonAllUserJobSummary )
assertEquals ( 15, sumXValues )
assertThat ( actual, containsString ( "<div class=\\"hapiHeaderText\\">given </div>" ) )
assertThat ( response. getStatus ( ), is ( Response. Status. OK. getStatusCode ( ) ) )
assertEquals ( resizer, receivedResizer )
assertEquals ( "��", test. getCode ( ) )
assertEquals ( DummyDrawHandler. drawTextToString ( "Das ist \\" dfs ", 10, 20, AlignHorizontal. LEFT, null ), drawHandler. getLastDrawCall ( ) )
assertThat ( myBigDecimal, is ( new BigDecimal ( "0" ) ) )
assertEquals ( - 61496260000L, y. getFirstMillisecond ( ) )
assertEquals ( 0, tasks. size ( ) )
Assert. assertTrue ( envs. size ( ) > 0 )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
assertEquals ( "2.1e2", FmtUtils. stringForLiteral ( nl, getContext ( ) ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertEquals ( "Should have found 3 entries", 3, files. size ( ) )
assertEquals ( 1, null1Dao. create ( nullThing ) )
assertThat ( supplier1. authForBuild ( ), is ( nullValue ( ) ) )
assertThat ( string, is ( nullValue ( ) ) )
assertThat ( end. isBefore ( start ), is ( true ) )
assertNull ( "Did not create DatagramSocket", socket )
assertFalse ( checker. isDetected ( ) )
assertEquals ( 4, result. getLength ( ) )
assertTrue ( checker. isAuthorized ( context, profiles, null ) )
assertThat ( labels, equalTo ( Arrays. asList ( "2013/03/12 01:30:00", "01:30:10", "01:30:20" ) ) )
assertEquals ( 2, result. size ( ) )
N4CliHelper. assertExpectedOutput ( expectedString, out )
assertEquals ( input, output )
assertEquals ( NUM_WRITERS * ENTRIES, countHLog ( logfile, fs, conf ) )
assertTriggered ( fieldValueAlertCondition, result )
assertResultSet ( res )
assertEquals ( "One rule is set", 1, ss. size ( ) )
assertEquals ( expecting, result )
Assert. assertNull ( dummy )
assertEquals ( 0, maleFriends. size ( ) )
assertEquals ( "3 ���� �������������������������������������������������������������������������������
assertThat ( result, is ( nullValue ( ) ) )
Assert. assertNotNull ( polygon )
assertThat ( testOutcome. getStory ( ). getName ( ), is ( "My user story" ) )
assertTrue ( "user should have been able to list sub users for user " + u. getUserId ( ), subUsers. stream ( ). anyMatch ( p -> p. getUserId ( ). equals ( u. getUserId ( ) ) ) )
assertThat ( ( String ) cache. getInternal ( "aaa" ), is ( "1" ) )
assertEquals ( 1, rules )
Assert. assertEquals ( 2, count )
arrays. assertNotEmpty ( description, null )
assertEquals ( 1234567723442, executeTestMethod ( test, Integer. class, null, 1234567723442 ). intValue ( ) )
assertEquals ( uniqueIssueIds, Sets. newHashSet ( qskos. getAllIssues ( ). stream ( ). map ( Issue :: getId ). collect ( toSet ( ) ) ) )
assertNotEquals ( optimize1, optimize2 )
assertEquals ( 1, sql. insertInto ( table ( "post" ) ). columns ( field ( "id" ), field ( "title" ) ). values ( 1L, "High-Performance Java Persistence" ). execute ( ) )
paths. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE )
assertions. isNull ( )
Assert. assertEquals ( 0, buffer. length ( ) )
assertArrayEquals ( y, x )
assertTrue ( signatureValue. length > 0 )
Assert. assertEquals ( expected, dataStr )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoISSQNTotal ( ). toString ( ) )
Assert. assertEquals ( resultEntity. getSiteName ( ), "testsitename2" )
assertEquals ( result, 13.5 * PI, 0.0 )
assertThat ( jmc. convert ( makeEvent ( quotedMsg, NO_ARGS ) ), is ( quotedMsg ) )
assertEquals ( new Integer [ ] { - 1, 1, 2, 3 }, a )
Assert. assertEquals ( value, got. getpBigDecimal ( ). toString ( ) )
assertEquals ( "<p><i><b>This</b> is <i><b>jsoup</b></i></p>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertEquals ( "Nuls Signed Message:\\nHello,I'am test case锛�@##$998877", recoveryECKey. getPrivKeyBytes ( ) )
assertEquals ( null, result )
Assert. assertEquals ( "Running action \\"foo\\" in background locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String" + NL + "} java.util.HashMap" + NL, messages. getRunningInBgLocally ( "foo", params ) )
Assert. assertEquals ( "Incorrect PersonMergeLog retrieved", personMergeLog, retrieved )
assertThat ( sampleTestClass. pages, is ( not ( nullValue ( ) ) ) )
assertEquals ( expectedProfile. getSid ( ), resultantProfile. getSid ( ) )
assertThat ( route, canHandle ( GetAnnotatedController. class, "withRelativePath" ) )
assertSame ( t. toLocalTime ( ), LocalTime. NOON )
assertAnnotations ( 1, Temporal. class, new TestEntity < > ( 0, "telephone no. (+44)1981 634528.", "telephone" ) )
Assert. assertEquals ( "<Period>\\n" + "  <name>public class Pojomator</name>\\n" + "  <date>2006-03-01T00:00:00Z</date>\\n" + "  <calendarDate>2006-03-01T00:00:00Z</calendarDate>\\n" + "  <calendarDate>2006-03-01T00:00:00Z</calendarDate>\\n" + "  <date>2006-03-01T00:00:00Z</date>\\n" + "  </calendarDate>\\n" + "</Period>", serializedData )
assertEquals ( "a,b" + recordSeparator, sw. toString ( ) )
Assert. assertTrue ( result. isValid ( ) )
assertTrue ( rec_cnt == 1 )
assertTrue ( msg, dynAny. equal ( dynAny2 ) )
assertNull ( hd. getValue ( ) )
Assert. assertEquals ( 0, cpu. getRegister ( ), 0 )
assertThat ( peek. getPeriodicAverageLatencyInMs ( two ), is ( ( 105d + 34d + 97d ) / 3 ) )
assertEquals ( "Select script should match expected", expectedSelectWithUnionStatements ( ), result )
assertEquals ( expected, roundTrip. getResults ( ) )
Assert. assertEquals ( expectedNames, names )
Assert. assertEquals ( 2, violations. size ( ) )
assertEquals ( expectedResult, mapping. responseLinksFor ( sourceLinking ) )
Assert. assertEquals ( 404, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
Assert. assertEquals ( "{" + "\\"@odata.context\\":\\"../$metadata#ESCollAllPrim(1)/CollPropertyDecimal\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":[\\"1234\\",\\"1234\\"]}", resultString )
assertTrue ( monitor. setAsync ( key, value ). get ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 03" ) )
assertThat ( entity. getAwakeFromInsertionCount ( ), is ( 1 ) )
assertNotNull ( m )
assertThrows ( VolumeChooserException. class, ( ) -> chooseForTable ( ) )
assertFalse ( result. getIndexUpdates ( ) )
assertEquals ( 7, classUnderTest. getNumRankFileSquaresAvailable ( Position. h8 ) )
assertFalse ( victim. accept ( request ) )
assertEquals ( sb. toString ( ), qb. prepareStatementString ( ) )
assertEquals ( "calendarColumn at absolute column " + column, calendarColumn, dayGridPosition. x )
assertEquals ( Integer. valueOf ( 2 ), parseResults. get ( FILE_NAME ). getCoverageMeasuresBuilder ( ). getClassNames ( ). get ( FILE_NAME ) )
assertEquals ( p, PropertyConverter. toPattern ( ".+" ) )
assertEquals ( "file://D.ttl", uri )
assertThatSelectedValueIs ( "a20" )
assertFailed ( services. executeOperation ( operation ) )
assertEquals ( config. getWriteTimeoutInMillis ( ), acceptedConfig. getWriteTimeoutInMillis ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 04" ) )
assertFalse ( "Expected ListSchema integer validation failure did not succeed", schema. validate ( integerEntity ) )
assertThat ( networkActivationFunction. getType ( ), equalTo ( activationFunction. getType ( ) ) )
Assert. assertEquals ( 2, activityNodes. size ( ) )
assertEquals ( t1, t2 )
assertThat ( log, is ( Files. readAllLines ( Paths. get ( "src/test/resources/data/expected/AuditLogSqlFilter", "testExecuteQueryFilter.txt" ), StandardCharsets. UTF_8 ) ) )
assertEquals ( key. getDefaultValue ( ), impl. getString ( key ) )
assertEquals ( "RuleSet description should be missing.", null, ref. getDescription ( ) )
assertEquals ( "Request should have a path set in the forward path", e. getMessage ( ) )
Assert. assertNull ( job )
assertEquals ( 0.1f, mutNum. floatValue ( ), 0.01f )
assertThat ( actual, is ( notNullValue ( ) ) )
Assert. fail ( )
assertThat ( pickupTruck, hasProperty ( "name", equalTo ( "Ram" ) ) )
assertEquals ( true, options. verbose ( ) )
Assert. assertEquals ( IsolationLevel. READ_COMMITTED, connection. getIsolationLevel ( ) )
assertOut ( "/**\\n * @const\\n * @type {number}\\n */\\nRoyaleTest_A.prototype.foo = 420" )
arrays. assertContains ( description, actual, "Yoda", null )
assertEquals ( IOUtil. getLocalHostName ( ). getHostName ( ), IOUtil. getLocalHostName ( ) )
assertEquals ( SchemaAndValue. NULL, schemaAndValue )
assertNotNull ( is )
Assert. assertEquals ( "moduleA", foundModule )
assertThat ( result, is ( not ( nullValue ( ) ) ) )
assertEquals ( TARGET + DOCNAME, docName ( ) )
assertTrue ( true )
assertThat ( unlocked. method ( ). method ( ). invoke ( unlocked ), is ( equalTo ( method ) ) )
Assert. assertEquals ( NullNode. getInstance ( ), result )
assertEquals ( "String firstNameParameter()\\nString lastNameParameter()", "String methodName()\\n" + "firstNameParameter(String firstName)" + "lastNameParameter(String lastName)", new MethodDeclaration ( "this", "String method(String target, String target)\\n" + "return String(firstName);", lastNameParameter ). getMethod ( ) )
Assert. assertNotNull ( in )
assertEquals ( buf. toString ( ), "EXISTINGZ" )
assertEquals ( date. toString ( ), f )
assertTrue ( "Expected:\\n" + new String ( expected_res ) + ". \\nGot:\\n" + transRes, StreamUtils. compareCharStreams ( new ByteArrayInputStream ( expected_res ), new ByteArrayInputStream ( transRes. getBytes ( ) ) ) )
assertFalse ( result. supportsContains ( ) )
assertEquals ( "string", shortForm )
assertFalse ( violated )
Assert. assertArrayEquals ( constructedTag. getBytes ( ), bytes )
assertTokens ( integer ( 1 ), new CommentToken ( "#", " + 2 + 3" ) )
assertEquals ( "clonePermissions=true", getLastRequestQuery ( ) )
assertFalse ( "Pattern '" + pat + "' failed.", mat. matches ( ) )
context. assertTrue ( config. succeeded ( ) )
Assert. assertEquals ( expResult, result )
JSONAssert. assertNotEquals ( "Message", "{id:1234}", actual, LENIENT )
validator. assertTestSuiteResults ( 1, 0, 0 )
assertEquals ( "joe", HiveAuthzBindingHookBase. getHadoopAuthzBindingHost ( conf ) )
assertEquals ( PredicateType. MKEDEP, predicate. getType ( ) )
assertEquals ( b. getId ( ), 123L )
assertEquals ( "Foo", occs. findName ( "Foo" ) )
assertThat ( getServerStartupInfo ( "ms1" ). getClusterName ( ), equalTo ( "cluster2" ) )
assertThat ( hiveConf. get ( "waggledance-fed1" ), is ( "3" ) )
assertEquals ( 0, executions. get ( ) )
assertEquals ( END_EVENT_NUMBER, gets. getCount ( ) )
assertEquals ( 5001.5, array2. getFloat ( 0 ), 0.01 )
assertEquals ( VisitStatus. BYPASS, getVisitStatus ( text ) )
assertThat ( replication. getEventId ( ), is ( EVENT_ID ) )
assertNull ( OAuthUtils. attemptEncodeQueryParam ( o, "foo" ) )
Assert. assertEquals ( 2, reactorHandlerRegistry. getEntrypoints ( ). size ( ) )
Assert. assertEquals ( "checksum does not match", expectedChecksum, actualChecksum )
Assert. assertEquals ( "what does a wolf eat", this. realiser. realise ( p ). getRealisation ( ) )
assertEquals ( "34\\n", found )
assertEquals ( expected, BitBufferHelper. toNumber ( array, i ). longValue ( ) )
assertEquals ( prefix, prefixes. getUri ( uri ) )
assertEquals ( "hellohello", res )
assertEquals ( 2, rrs. size ( ) )
assertEquals ( 96, program. getMemSize ( ) )
assertEquals ( origin, resourceEditProperty. getOrigin ( ) )
assertEquals ( 0, actual. size ( ) )
assertThat ( "getValue", node. getValue ( ), is ( - 0x80000000 ) )
assertEquals ( "http://example.org/123?dir=rtl", view. getHref ( ) )
Assert. assertEquals ( "Fail count record of room", i, cr )
Assert. fail ( "ConditionalCheckFailedException expected" )
assertThat ( target. getConvPortIdByMatches ( nwId, matches ), is ( "port01" ) )
assertEquals ( 1, res )
assertAllExchangesAreCompleted ( client, path )
assertEquals ( 1000.0, testResult, 0.0 )
result. assertIsSatisfied ( )
assertEquals ( - 1, is. read ( ) )
assertThat ( issue. getTitle ( ), is ( title ) )
assertEquals ( z1, z2 )
assertNotNull ( t )
assertTrue ( Arrays. equals ( pktSerialized, actual ) )
Assert. assertEquals ( "3.10", retornoConsultaCadastro. getVersao ( ) )
assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
Assert. assertTrue ( true )
assertNotNull ( tiposBecas. getId ( ) )
Assert. assertEquals ( "Top", driver ( ). getCurrentUrl ( ) )
Assert. assertTrue ( impl. canCachedResponseBeUsed ( host, request, entry, now ) )
Assert. assertNotNull ( inputField )
assertTrue ( c1 instanceof PublicCloneable )
AssertUtil. assertNoJSError ( )
assertNotNull ( service )
Helpers. assertJson ( jsonElement. toString ( ), expectedJson )
Assert. fail ( "Exception expected" )
TestUtil. assertFuzzyDoesNotContain ( "<input type=\\"text\\" id=\\"w1\\" value=\\"1\\" /><input type=\\"hidden\\" id=\\"w1\\" value=\\"1\\" /></htmlform>", session. getHtmlToDisplay ( ) )
assertSame ( f, b. getFactory ( ) )
assertEquals ( "update EMPLOYEE\\n" + "set superiorId = (select emp2.ID\\n" + "from EMPLOYEE emp2\\n" + "where emp2.ID = emp1.ID)\\n" + "where emp2.SUPERIOR_ID = emp1.ID", sql. getSQL ( ) )
assertTrue ( ex. getMessage ( ). equals ( "Fail all retrials!" ) )
Assert. assertEquals ( "Stan", server. getManagedBeanValue ( "#{foo.text}" ) )
assertEquals ( 1000, executor. getMaxTotalCount ( ) )
assertThat ( ruleManager. listGlobals ( ), hasItem ( "bla" ) )
assertEquals ( "Should get a 200 response", HttpStatus. OK, jdbcFeedSource. getFeed ( getFeedRequest ). getResponseStatus ( ) )
assertEquals ( 2, bs. capacity ( ) )
assertEquals ( 10L, read )
assertEquals ( expectedTransportCosts + expectedActivityCosts, iCosts, 0.01 )
assertTrue ( "pool size should be wrong, but it is " + poolConfig. getMaxIdle ( ) + ", but " + rpcClient. getIdleConnections ( ). size ( ), poolConfig. getMaxIdleConnections ( ). isEmpty ( ) )
assertMultilinesEquals ( "Temperature\\n" + "��������������������������������������������������������������������������������
assertEquals ( false, passedSessionWaitCall. await ( 2, TimeUnit. SECONDS ) )
assertThat ( "Expected principal not found", rmap, hasItem ( ( Principal ) "g1" ) )
assertNotNull ( result )
assertTokenStreamContents ( tokenizer, stringArray ( "example.com" ) )
Assert. assertSame ( o, ts. create ( o ) )
assertFalse ( executeOperation ( op ). asString ( ). contains ( "hello" ) )
assertEquals ( "Recycle", policy )
Assert. assertEquals ( 5, map. size ( ) )
Assert. assertNull ( caixa )
assertEquals ( expecting, result )
Assert. assertEquals ( "Wrong fd", new File ( ( File ) null, "fd" ). getAbsolutePath ( ), deserializedMessage. getFd ( ). getId ( ) )
context. assertIsSatisfied ( )
assertUnderflow ( ( long ) x * ( long ) y, result )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertEquals ( "The return value is not correct.", Tag. EVAL_PAGE, this. tag. doEndTag ( ) )
assertThat ( appMetadataResource. getFilename ( ), is ( "foo-source" ) )
assertThat ( score, is ( 3900 ) )
assertEquals ( new Year ( 2000 ), editor. getValue ( ) )
assertEquals ( "SELECT * WHERE {?s?p?o } " )
assertEquals ( new File ( dir, "rest/foo" + ext ), fileForURI ( uri, "/rest", "/rest", dir, ext ) )
Assert. assertEquals ( codigoDeBarras, produto. getCodigoDeBarras ( ) )
assertNotNull ( dataSourceChartGroup )
assertEquals ( "http://localhost:8080/test", builder. build ( ). toString ( ) )
assertEquals ( "b", fsa. getState ( ). get ( "c" ) )
assertEquals ( 1, hits. totalHits )
assertNull ( "No arg constructor", realm. getName ( ) )
assertEquals ( 0, tasks. size ( ) )
DataMockery. assertREQMODWithGetRequestResponse ( response )
assertEquals ( "Wikibot", output. get ( id ) )
assertEquals ( 201, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertTrue ( authorizer. isAuthorized ( context, profiles ) )
assertThat ( encoded, stringContainsInOrder ( "{", "\\"resourceType\\": \\"Patient\\",", "\\"contained\\": [", "{", "\\"resourceType\\": \\"Condition\\",", "\\"id\\": \\"1\\"", "}", "],", "\\"extension\\": [", "{", "\\"url\\": \\"test\\",", "\\"valueReference\\": {", "\\"reference\\": \\"#1\\"", "}", "],", "\\"birthDate\\": \\"2016-04-05\\"", "}", "],", "\\"extension\\": [", "{", "\\"url\\": \\"test\\",", "\\"valueReference\\": {", "\\"reference\\": \\"#2\\"", "}", "],", "\\"id\\": \\"1\\"", "}", "}" ) )
assertThat ( iter. next ( ), is ( "33" ) )
assertEquals ( err, result )
assertEquals ( expectedLogMessage, actualLogMessage )
assertEquals ( obj2, resolver. resolve ( null ) )
assertEquals ( 7, count )
Assert. assertEquals ( demoService. getExportedUrls ( ). get ( 0 ). getPort ( ), helloService. getExportedUrls ( ). get ( 0 ). getPort ( ) )
assertEquals ( "OutputStream writes should not be the same as the original", TEST_MSG, actual )
assertThat ( terminalStep. wasRun ( ), is ( true ) )
assertThat ( or. isSatisfied ( ), is ( false ) )
Assert. assertNull ( connectionManager. createConnectionDetails ( null ) )
assertThat ( getPivotModel ( ). getCurrentMdx ( ), is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Product].[All Products], [Product].[Drink], [Product].[Food], [Product].[Non-Consumable]}) ON ROWS FROM [Sales]" ) ) )
assertEquals ( user. getId ( ), serializedUser. getId ( ) )
assertLines ( lines )
assertThat ( benchmark. bgrewriteaof ( ). getConsole ( ), containsString ( msg ) )
Assert. assertEquals ( 0, dfsadmin. run ( args1 ) )
assertEquals ( expResult, result )
assertEquals ( expResult, result )
assertNotNull ( textFileSaver )
Assert. assertTrue ( errors. hasFieldErrors ( "error" ) )
assertEquals ( 2, countHomeStates )
assertEquals ( "token 2\\n", found )
Assert. assertEquals ( "IN([CAT.COL];\\"value\\")", formatted )
assertNull ( GrpcUtil. getMetadataFromClient ( clientStreamListener. serverStream. get ( ) ) )
assertTrue ( e. getMessage ( ). contains ( "Unknown port" ) )
assertEquals ( expected, resultVal )
assertEquals ( date, fileTime. getTime ( ) )
assertEquals ( entity, response. readEntity ( String. class ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Receive>" + "Hey no tags!" + "</Receive>", elem. toXml ( ) )
Assert. assertEquals ( "Incorrect label returned", lbl, item. getDecoratedLabel ( ) )
Assert. assertEquals ( 2, routes. size ( ) )
assertThat ( axioms. isEmpty ( ), is ( true ) )
assertThat ( result, is ( empty ( ) ) )
assertThat ( record. get ( ). getTimestamp ( ), is ( timestamp ) )
assertEquals ( p, fromDenseRecursiveForm ( recForm, MonomialOrder. DEFAULT ) )
assertEquals ( 1, sol. getUnassignedJobs ( ). size ( ) )
assertEquals ( "{\\"date1\\":\\"1970-01-01T00:00:00Z\\"}", processor. generateFilter ( object ) )
Assert. assertEquals ( expected_1. replaceAll ( "\\\\s+", "" ), v. replaceAll ( "\\\\s+", "" ) )
assertEquals ( 10 * Constants. PB, mConfiguration. getBytes ( PropertyKey. WEB_THREADS ) )
assertEquals ( profile. getFirstName ( ), "Test" )
Assert. assertNull ( ruleCat )
assertEquals ( expected, result )
Assert. assertEquals ( requestId, cancelledRequests. get ( 0 ). getRequestId ( ) )
assertEquals ( expected, actual )
assertEquals ( 2, posts. size ( ) )
assertOut ( "/**\\n * @param {string} bar\\n * @param {number=} baz\\n * @return {number}\\n */\\nRoyaleTest_A.prototype.foo = function(bar, baz) {\\n\\tvar self = this;\\n\\tbaz = typeof baz!== 'undefined'? baz : null;\\n\\treturn -1;\\n}" )
assertNotNull ( webapp. getBuildImage ( ) )
assertResults ( o, results )
assertThat ( command. accept ( state ), is ( true ) )
assertThat ( query. count ( ), is ( 3L ) )
assertEquals ( "The tree should be identical", xml, Designer. getXmlString ( compilationUnit ) )
assertTrue ( "Can't find statement", m. contains ( expectedStatement ( SSH_BASE ) ) )
assertEquals ( "IdentifierLabel", resource. getIdentifier ( ). get ( 0 ). getLabel ( ). getValueAsString ( ) )
assertThat ( networkId, is ( "NewNetworkID" ) )
assertEquals ( "toString() not expected for " + intVal, intVal, testVal. toString ( ) )
assertThat ( inactivityTimeAfterRefresh, is ( lessThan ( inactivityTime ) ) )
assertEquals ( expected, actuals )
assertMockEndpointsSatisfied ( )
assertThat ( output. toString ( ), is ( "my good little bad son" ) )
assertTrue ( ls1. size ( ) > ls2. size ( ) )
assertTrue ( "No listener was registered", testListener. wasCalled )
assertSame ( secondTry, st )
Assert. assertNull ( "School year should be null", result )
assertions. doesNotContain ( 6, 8 )
assertEquals ( 123, this. model. getPosition ( ) )
assertEquals ( expectedQuery, actualQuery )
assertGreater ( "Grid shouldn't scroll vertically while editing in buffered mode", getGridVerticalScrollPos ( ), originalScrollPos )
assertEquals ( exp, res )
assertEquals ( NEW_SECURITY_GROUP_SAME_SFC_BINDED_UPDATE_ELEMENT_ID, this. securityGroup. getId ( ) )
assertEquals ( 37.5, calc. getInsertionData ( route, job, nVehicle, 0.0, null, Double. MAX_VALUE ). getInsertionCost ( ), 0.01 )
TestUtils. assertEquals ( "m3*m4=m5", m3. multiply ( m4 ), m5, entryTolerance )
FeedChecker. assertQ ( "The XML error is not correct", result, "//error[.='" + errorMessage + "']" )
Assert. assertEquals ( 0, response. getTotalHits ( ). value )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff28_" ) )
Assert. assertTrue ( out. contains ( "getcar 1999" ) )
assertTrue ( convertedValue instanceof Integer )
assertEquals ( " ::  took 0 ms.", result )
assertEquals ( 0, mods. size ( ) )
assertTrue ( timestamp. matches ( regex ) )
Assert. assertFalse ( extraInfo. has ( "usr" ) )
assertEquals ( filter. getBits ( shape ). get ( 0 ), 0 )
assertEquals ( "Testing", message )
assertEquals ( expectedQuery, actualQuery )
assertTrue ( output, output. contains ( "java.version" ) )
assertEquals ( true, classUnderTest. getInitSessionTimezone ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
Assert. assertNotNull ( "null execOut", execOut )
assertTrue ( sql, sql. endsWith ( "t0.ESTIMATED_PRICE" ) )
assertEquals ( "Can't come back", ShadowToast. getTextOfLatestToast ( ) )
Assert. assertEquals ( namespace, event. getNamespaces ( ). get ( "foo" ) )
assertThat ( fileEncryptor. encryptMD5File ( fileMd5 ), equalTo ( fileMd5 ) )
assertEquals ( "A,B,C,D", strList )
assertEquals ( unused, h. getUnused ( ) )
assertTrue ( measures. isEmpty ( ) )
assertTrue ( john. hasRole ( operator ) )
assertParsingIsCorrect ( nativeQuery, expectedCacheName )
Assert. assertEquals ( file. getTotalMediaSize ( ). longValue ( ), bytes )
Assert. assertEquals ( data, handler. getOBXData ( ) )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
Assert. assertEquals ( "3 files were tagged with tag1,tag2,tag3.", text )
Assert. assertEquals ( "", urlEncodedValueReturned )
assertTrue ( connectLatch. await ( 3, TimeUnit. SECONDS ) )
assertEquals ( "ResourceType", resourceType. getName ( ) )
assertEquals ( expectedScript, observedScript )
assertEquals ( "All design docs should be loaded.", 4, designDocs. size ( ) )
assertEquals ( 41, p. getAge ( ) )
assertThat ( results. get ( 0 ). getTestSteps ( ). get ( 1 ). getTestSteps ( ). get ( 0 ). getStartTime ( ), is ( "1970-01-01T00:00:00.000Z" ) )
Assert. assertEquals ( AuthenticationToken. ANONYMOUS, token )
assertEquals ( ApiStatus. OK, response. getMeta ( ). getStatus ( ) )
paths. assertIsDirectoryContaining ( info, actual, expected )
assertEquals ( response. getStatus ( ), 200 )
Assert. assertEquals ( CLOUD_SDK_HOME, sdk. getPath ( ) )
assertEquals ( 1, list. getItems ( ). size ( ) )
assertFalse ( isServiceReady )
assertGenres ( results )
Assert. assertNull ( bucket. get ( "someValue" ) )
assertMandatoryElements ( targetProduct, false )
assertTrue ( "Reader Should Be Ready After Setting ByteBuffer", _utf8ByteBufferReader. ready ( ) )
assertTrue ( orderKey. prefixOf ( key ) )
assertEquals ( "REPRO20030207: F\\n1\\n2\\n3\\n4\\n5\\n6\\n7", diffsToString ( Diff. diffText ( a, b, false, false ) ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService.", result )
assertTrue ( cancellationListener. getNotCalled ( ) )
assertionHelper. assertIrodsFileOrCollectionExists ( targetIrodsCollection, irodsFileSystem. getIRODSAccessObjectFactory ( ), irodsAccount )
assertEquals ( "((ENTITY_ID userId) in (\\"admin-user\\",\\"admin-group\\"))", dataSetLookup. getFirstFilterOp ( ). getColumnFilterList ( ). get ( 0 ). toString ( ) )
Assert. assertEquals ( 0, warningHeaders. length )
assertEquals ( res, "" )
assertSame ( pattern, patterns. getPattern ( entityId ) )
Assert. assertEquals ( expectedLanguage, actualLanguage )
assertEquals ( expected, actual )
assertThat ( this. state. getSortColumn ( ), is ( equalTo ( sortColumn ) ) )
Assert. assertTrue ( success )
assertEquals ( 2, newTags. getTags ( ). size ( ) )
assertTrue (! result )
assertEquals ( "ALTER TABLE TABLE DELETE INTO sys.tables (NAME, NAME) VALUES (?,?)", hive2DatabaseMeta. getTruncateTableStatement ( name, null ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<features xmlns=\\"http://karaf.apache.org/xmlns/features/v1.0.0\\" name=\\"test-dependencies\\">\\n" + "<feature name=\\"test-dependencies\\">\\n" + "<bundle>mvn:mygroup/myArtifactId/1.0</bundle>\\n" + "</feature>\\n" + "</features>\\n", wr. toString ( ) )
assertEquals ( MediaType. APPLICATION_XML_TYPE, response. getType ( ) )
assertTrue ( w. getStatus ( ) == HttpServletResponse. SC_PROXY_AUTHENTICATION_REQUIRED )
assertEquals ( getDate ( "2013-03-27T23:18:40Z" ), jstOi. getPrimitiveJavaObject ( result. get ( "five" ) ) )
assertThat ( route, canHandle ( PathAnnotatedController. class, "withRelativePath" ) )
assertThat ( matcher. matches ( response ), is ( true ) )
assertArrayEquals ( new String [ ] { "\\"Delimited Field Name\\"", "Default_Case" }, cols )
assertEquals ( false, OptimizerUtils. isIndexingRangeBlockAligned ( 2500, 2600, 7001, 9000, BRLEN, BCLEN ) )
Assert. assertTrue ( authorizableHierarchy. toString ( ), authzProvider. hasAccess ( user1, authorizableHierarchy, actions, ActiveRoleSet. ALL ) )
assertEquals ( "\\"x\\".\\"dup\\"", t. getNameInSource ( ) )
assertEquals ( Collections. emptyMap ( ), req. getHeaders ( ) )
assertEquals ( expected, cls )
assertThat ( token. getType ( ), is ( PCRELexer. ResetStartMatch ) )
assertEquals ( expResult, result )
assertEquals ( "bleichenbacher attack should have had a solution of " + BigInteger. valueOf ( PREMASTER_SECRET_LENGTH ), BigInteger. valueOf ( solution ), BigInteger. valueOf ( PREMASTER_SECRET_LENGTH ) )
assertThat ( testExecutor. invokeTest ( 1000L, ImmutableMultimap. of ( ) ), is ( false ) )
assertEquals ( a. hashCode ( ), b. hashCode ( ) )
assertEquals ( defaultRule. defaultQueueName, "default-queue-1" )
assertEquals ( 2, links. size ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 09" ) )
FunctionTestUtil. assertResult ( codeFunction. invoke ( offsetTime ), "time( \\"" + TimeFunction. FEEL_TIME. format ( offsetTime ) + "\\" )" )
assertEquals ( "Unexpected widgetset configuration option value", widgetset, config. getWidgetset ( ) )
Assert. assertEquals ( "", out )
assertEquals ( expResult, stringBuilder. toString ( ) )
Assert. assertEquals ( "{\\"alice\\":{\\"p:bob\\":[\\"charlie\\"]}}", result. toString ( ) )
assertThat ( result. size ( ), is ( 0 ) )
assertTrue ( "The getChanges() method reported a change", hasChange )
assertEquals ( expected, actual )
assertEquals ( gameState, testObj )
Assert. assertTrue ( validator. isValid ( 9.5, context ) )
assertTrue ( Intersects. lineIntersectsPoint. call ( d, d ) )
assertThat ( element. getText ( ), is ( "value with appended text" ) )
assertEquals ( buffer. length ( ), bytes. length ( ) )
assertNull ( StatisticRefUtils. get ( userWrapper, "not-exist" ) )
assertThat ( schedCapture. getValue ( ), is ( getScheduler ) )
Assert. assertEquals ( 0, distance. compute ( a, a ), 0d )
assertEquals ( result, expectedUser, "User with passed name was not found." )
assertSame ( map0, mdcAdapter. getPropertyMap ( ) )
assertNotNull ( p )
assertEquals ( 1, fixture. mark ( ) )
assertTrue ( parsingProviderAInvoked )
Assert. assertEquals ( nodeToKey ( queryA ), nodeToKey ( queryB ) )
assertThat ( result, equalTo ( "hey, 1, hey, ho, hum, h盲pp, h盲pp, Luis, 2" ) )
Assert. assertEquals ( new URI ( "http://localhost:80/some stuff?param=stuff#fragment" ), result )
_PmAssert. assertVisible ( pm. pmBeanImpl )
assertThat ( axioms, hasItem ( axiom ) )
assertThat ( intOrString1, not ( equalTo ( intOrString2 ) ) )
Assert. assertEquals ( 2, lst. size ( ) )
assertFalse ( "Up dir should not be present", upDir. contains ( getCurrentTestName ( ) ) )
Assert. assertEquals ( expectedLanguage, actualLanguage )
Assert. assertEquals ( 0, results. size ( ) )
Assert. assertNull ( comp. getHtmlClass ( ) )
Assert. assertEquals ( localDate. toString ( ddMMMyyyy, Locale. ENGLISH ), "05-Feb-2013" )
assertTrue ( basePermission. isAllowed ( auth, Sets. newHashSet ( ) ) )
assertFalse ( validator. isValid ( new MyCustomStringImpl ( "A79927398713" ), null ) )
assertEquals ( secToken. getToken ( ). getEncoded ( ), mapper. writeValueAsString ( secToken. getToken ( ) ) )
assertEquals ( expected, uri. getRawPath ( ) )
assertions. contains ( value, index )
assertMappedFieldValueIsEmptyCollection ( )
assertNotNull ( v8TypedArray )
assertEquals ( "{\\"instance\\":-9.999999999}", json )
Assert. assertTrue ( Files. size ( tmfile. toPath ( ) ) > 0 )
assertThat ( e. getMessage ( ), containsString ( expectedExceptionMessage ) )
assertEquals ( exp, x )
assertEquals ( expecetedTableName, builtTableName )
assertEquals ( DATA, storage. getPerson ( ID ) )
assertEquals ( new ArrayList < Category > ( ), mockResult. included ( "categories" ) )
assertEquals ( "Client.metric.tag1:A::1::.tag2:B::192_1_1_1|A", metric. toString ( ) )
assertEquals ( 23, instance. evaluations )
assertEquals ( "Select with where clause", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
Assert. assertTrue ( isElementPresent ( NotificationElement. class ) )
assertions. isNotEqualTo ( actual )
Assert. assertEquals ( record. get ( "name" ). toString ( ), decoded. get ( "name" ). toString ( ) )
assertThat ( capturePackage. getValue ( ). name ( ), is ( "com.example.package" ) )
assertEquals ( expected, actual )
assertEquals ( files, infos. size ( ) )
assertNull ( joystick )
assertEquals ( out. get ( ), 1.0f )
Assert. assertEquals ( "s3n://123:456@my-bucket/some/path", HiveAuthzBindingHook. parseURI ( "/some/path" ). getName ( ) )
Assert. assertEquals ( assinatura, eventoInutilizacao. getAssinatura ( ) )
Assert. assertEquals ( expectedResult, result )
Assertions. assertEquals ( response, Collections. singletonMap ( "a", "b", "c", "a", "b", "c", "a", "c", "b", "c", "a", "c", "b", "c", "a", "c", "b", "c", "a", "c", "b", "c", "a", "b", "c", "c", "b", "c", "a", "c", "a", "b", "c", "c", "b", "c", "a", "b", "c", "c", "b", "c", "c", "b", "c", "b", "c", "c", "b", "c", "b", "c", "b", "c", "b", "c", "c", "b", "c", "b", "
assertCounterCount ( playerA, CounterType. P1P1, 1 )
assertThat ( actual, equalTo ( NASTY ) )
assertThat ( PropertiesUtil. createPrefixMap ( properties, "abc" ), is ( answer ) )
assertNull ( datastore )
assertNull ( value )
assertTarget ( "[['a']]" )
assertCompletion ( "server:\\n" + "  address: bark\\n" + "  port: 2\\n" + "  max-in-flight: 2\\n" + "  max-out-flight: 2\\n" + "  max-in-flight: 2\\n" + "  max-out-flight: 2\\n" + "  max-in-flight: 3\\n" + "  max-out-flight: 3\\n" )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
assertThat ( resolver. resolve ( CamelCase. class ), equalTo ( "org/jbehave/core/io/CamelCase.story" ) )
assertEquals ( txtFile. getAbsoluteFile ( ), source. getLocation ( ) )
assertEquals ( dataflow, edit. getSubject ( ) )
assertEquals ( "  1 ABCD\\n  2 XYZ\\n", b. asString ( ) )
assertTrue ( jee. evaluate ( event ) )
assertFalse ( "Delete application failed", applicationDirectory. getApplications ( ). containsKey ( testAppId ) )
assertThat ( aDouble, equalTo ( bDouble ) )
assertProcessInstanceCompleted ( processInstance )
assertThat ( new File ( current, "a.txt" ), is ( file ( ) ) )
assertThat ( axioms. isEmpty ( ), is ( true ) )
Assert. assertEquals ( "The entity text is correctly transported", entityText, out. toString ( ) )
assertEquals ( r1, r1. get ( ) )
assertThat ( "unencoded setter has return type String", setter. getReturnType ( ), equalToType ( String. class ) )
assertEquals ( ImmutableMap. of ( CallOptionsUtil. DYNAMIC_HEADER_KEY_NAMES, "param1", "param2.param3", "value23" ), headers )
assertThat ( aggregateMapper. getCapped ( ). get ( 0 ), is ( 4 ) )
assertNull ( field. getColourExpression ( ) )
testHelper. assertExecutionTreeAfterMigration ( )
assertThat ( event, is ( expected ) )
assertThat ( s, is ( "a value greater than <1> or a value less than <5>" ) )
Assert. assertEquals ( "com.google.common.type.KeywordInPackage", name )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( originalSize - 1, getNumberOfAllVisitsIncludingVoided ( ) )
assertArrayEquals ( new Integer [ ] { 0, 9, 2, 5, 1, 5, 4, 5, 2, 7, 9, 2 }, sortedValues )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
assertFalse ( sc. invokeDestinationCalled ( ) )
assertEquals ( 0, p, 0.0001 )
assertEquals ( AuthorizationResult. ACCESS_GRANTED, permission. getResult ( ) )
Assert. assertEquals ( "The quick brown fox jumped over the lazy dog.", resolvedString )
assertFalse ( result )
Assert. assertEquals ( expected, actual )
assertTrue ( str. contains ( format. format ( date ) ) )
assertThat ( t, instanceOf ( ProcessingException. class ) )
BrowserAgentTestUtils. assertBrowserAgent ( HTMLUNIT_CHROME_AGENT_STRING )
Assert. assertEquals ( 1, countingNotifier. getNotificationCount ( ) )
assertEquals ( "Expected response not seen.", "ONE", response )
assertEquals ( "anything but true or false", testedString )
assertNotNull ( oracleEngine )
assertEquals ( "Snapshot has changed", runNo, memorySnapshot. getRunNo ( ) )
assertEquals ( "#646464", getColorpickerValue ( ) )
assertEquals ( PostStatus. PENDING, post. getStatus ( ) )
Assert. assertEquals ( expected, actual )
Assert. assertSame ( this. family1, this. component. resolveEntity ( FAMILY_1_ID ) )
assertThat ( validations. getErrors ( ), hasSize ( 0 ) )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
assertThat ( sut. isMatch ( real, expected ), is ( false ) )
assertTrue ( failedAsExpected )
assertTrue ( result. contains ( "id:1:ABC" ) )
assertThat ( "Locations created with different paths and different property must be equal", locationA1. equals ( locationA2 ), is ( false ) )
Assert. assertFalse ( result )
assertTrue ( true )
assertions. isNull ( )
assertEquals ( "minutia", ServletRequest. getDetailsParameter ( request ) )
assertEquals ( APPLICATION_VND_TAVERNA_SCUFL2_WORKFLOW_BUNDLE, resources. getPackageMediaType ( ) )
assertTrue ( "Rule Delegation Bo fetched correctly", ruleDelegationBos!= null && ruleDelegationBos. size ( ) == 1 )
assertThat ( actual, is ( equalTo ( "/ab/CD" ) ) )
assertThat ( keyValueType. getValue ( ), equalTo ( aString ) )
Assert. assertEquals ( "SELECT TO_DAYS('2007-10-07');", text )
assertThat ( engine, is ( notNullValue ( ) ) )
Assert. assertEquals ( query, interpretedQuery )
Assert. assertEquals ( "0", result. getReturnCode ( ) )
assertThat ( context, value, is ( RESULT_MSG ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertFalse ( value. isReplaceableBy ( 99L, 9, ComparableComparator. INSTANCE ) )
assertTrue ( response. isPresent ( ) )
assertEquals ( "201 Created a new order", orderId )
assertEquals ( 987889550999L, q. getLastMillisecond ( calendar ) )
assertNotNull ( testClass )
assertEquals ( tstName, ent. getCatalog ( ) )
assertTrue ( BatchUtil. evaluate ( batch ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true}]}]", content )
assertEquals ( 43.1, result, 0.000001 )
assertThat ( notification, containsString ( "\\"caption\\":\\"foobar\\"" ) )
assertEquals ( "/_nodes/_all/shutdown?delay=5s", action. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertEquals ( "document/literal", encodingStyle )
assertNotNull ( graph. variables ( ) )
assertNull ( sut. getIconFileName ( ) )
assertTrue ( ex. isPrime ( s ) )
assertEquals ( qb, qa )
Assert. assertTrue ( errors. hasFieldErrors ( "encounterDatetime" ) )
assertThat ( hasNativeSupportForPseudo, is ( false ) )
assertEquals ( exp, TYPING_MAPPER. readValue ( json, ZoneId. class ) )
Assert. assertTrue ( this. commandFacade. hasCommand ( command, key ) )
assertTrue ( e. getMessage ( ). contains ( "TemplateDirectory not null" ) )
assertNull ( "find by url with non existing gd is returning null", gd )
Assert. assertEquals ( 1, streams. length )
assertThat ( MODEL. findNextTransition ( utc ). get ( ), is ( AUTUMN_1996 ) )
assertEquals ( "Failed on [" + i + "] iteration", expected, merged )
assertThat ( jvm. isDebugMode ( ), is ( false ) )
assertThat ( pages. getAt ( 0 ). getUrl ( ), is ( "http://www.apache.org" ) )
assertTrue ( "Add and get relation are equal", relation. equals ( testRelation ) )
Assert. assertNull ( config. getProperties ( ) )
Assert. assertNotNull ( "should be a description", actual )
assertArrayEquals ( expectedOutput1, output1 )
assertEquals ( "Hello {name}", ResponseBodyInterpolator. interpolate ( "^{name}", req ) )
assertNull ( response. getHeaders ( ). get ( "link" ) )
assertEquals ( "catch", getValue ( ) )
Assert. assertEquals ( tokenList. size ( ), 3 )
assertEquals ( Math. sqrt ( 4 ), distance. compute ( point1, point2 ), EPSILON )
assertFalse ( fs. unlink ( "foo" ) )
assertEquals ( "1,2,3", getInorderForm ( tree ) )
assertEquals ( encoded. length, fixture. prepareToEncode ( context ) )
assertThat ( tracker. getAll ( ) [ secondElementOfArray ], is ( new Task ( "test1", "testDescription", 1234L ) ) )
Assert. assertEquals ( expectedSlot, slot )
assertEquals ( val. apply ( m ), m )
context. assertIsSatisfied ( )
assertEquals ( value, actualValue )
Assert. assertFalse ( errors. isEmpty ( ) )
assertEquals ( ( 4.0 - 4.1 ) / ( 4.0 + 4.6 ), r, 0.000001 )
assertTrue ( encodingDetector instanceof TXTEncodingDetector )
assertNotNull ( path )
assertTrue ( specification. stats ( ). hasFailed ( ) )
assertEquals ( expected, actual )
assertEquals ( scIdentifier, result )
Assert. assertEquals ( 401, response. getStatus ( ) )
assertEquals ( expectedUri, uri )
assertEquals ( expResult, result )
assertEquals ( 1, count. get ( ) )
assertTrue ( "Authentication context should be created", ops. exists ( TEST_AUTHENTICATION_CONTEXT_ADDRESS ) )
assertEquals ( "Element not found", 0, collection. getSize ( ) )
assertTrue ( filter. accept ( good ) )
assertTrue (! cs. isLast ( ) )
Assert. assertTrue ( redisd. isRunning ( ) )
assertTrue ( FileUtils. contentEqualsIgnoreEOL ( new File ( "src/test/resources/reference/test-normalized-nocitations-no-dump.dump" ), outputFile, "UTF-8" ) )
assertE ( "�尖�尖�尖�尖��" + "�尖��  ��" + "��   ��" + "�尖��  ��" + "�尖�尖�尖�尖��" )
Assert. assertEquals ( "hello,world", result. getName ( ) )
assertTrue ( hasResourceProvidableType )
assertEquals ( consumed, resourceRelationType. get ( ) )
Assert. assertEquals ( "Class should not be considered: ", false, new DifferenceAccumulatingHandler ( inclusionSet, exclusionSet ). isClassConsidered ( "de/test/java/regex/code/*" ) )
assertEquals ( tmap, readValue )
assertTrue ( "Sidebar item should be selected", isElementPresent ( By. className ( "v-grid-sidebar-item" ) ) )
assertNotNull ( as )
assertEquals ( 3, postCommentScores. size ( ) )
assertTrue ( wasEmpty. get ( ) )
assertArrayEquals ( new String [ ] { "singleton" }, treeContent )
Assert. assertTrue ( matcher instanceof UriPatternMatcher )
assertEquals ( Sets. newHashSet ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tree. createSet ( ) )
Assert. assertEquals ( StringUtils. trimAllWhitespace ( result. toString ( ) ), "{\\"$or\\":[{\\"age\\":{\\"$lte\\":50}}]}" )
assertTrue ( Arrays. equals ( expectedPrivs, privs ) )
assertTrue ( suspendables. contains ( method ) )
assertEquals ( 2, searchService. search ( "alex" ). size ( ) )
Assert. assertEquals ( "cissy", el. getAsString ( ) )
assertEquals ( Sets. newHashSet ( new InstantiatedComponent ( thirdLevelA, ConfigFactory. empty ( ), "tlA" ), new InstantiatedComponent ( thirdLevelB, ConfigFactory. empty ( ), "tlB" ) ), secureComponents )
Assert. assertEquals ( 5, analyser. getLoadRightAfterActivity ( route. getEnd ( ), route ). get ( 0 ) )
assertThat ( page. getTotalElements ( ), is ( equalTo ( 1L ) ) )
assertEquals ( content, IOUtils. toString ( ungzippedStream, Charset. forName ( "UTF-8" ) ) )
assertEquals ( "incorrect result", result, aNumber. compareTo ( bNumber ) )
assertEquals ( constraintViolations. size ( ), 1 )
assertEquals ( 1, port. doubleIt ( "test", 1, 100 ) )
assertThat ( classes. size ( ), is ( 3 ) )
assertObjectEquals ( "{type:'number'}", x. getSchema ( ) )
assertJsonEquals ( "{\\"int\\":3,\\"double\\":2.7,\\"bool\\":true,\\"map\\":{\\"hello\\":\\"world\\",\\"foo\\":\\"bar\\"},\\"string\\":\\"hello!\\"}", JsonSerializer. serialize ( map ) )
assertEquals ( 0, violations. size ( ) )
assertStates ( "existing", NOT_IN_DB_etag, LINKED_BUT_NOT_SYNCED, LINKED_BUT_NOT_SYNCED, null )
assertEquals ( "Black", dto. getColors ( ) [ 0 ] )
assertArrayEquals ( expected, fixture. getServerAddresses ( ) )
assertEquals ( document, mapper. readValue ( JSON_MEDIA_INFO_LABEL, MediaInfoDocumentImpl. class ) )
assertTrue ( true )
assertTrue ( svc. isStopped ( ) )
assertNotNull ( sessionFactoryBean. getObject ( ) )
assertTrue ( shouldAnalyze )
assertEqualsSet ( "Incorrect mapping of class to dataProperty/objectProperty", propP, propQ, cls. mappingKey ( ) )
assertions. isNotLessThan ( expected )
assertEquals ( "names do not match!", "myComponent", component. getName ( ) )
assertEquals ( "No test cases should fail", 0, runTestsResults. getFailedTests ( ). size ( ) )
assertEquals ( "", result )
assertEquals ( 1, events. size ( ) )
assertEquals ( "", csv )
Assert. assertNotNull ( config )
assertEquals ( "Unexpected primary style name", "v-tree", state. primaryStyleName )
assertJson ( json )
assertEquals ( "https://50.0.0.1:5683", server. getUri ( ) )
Assert. assertEquals ( journalTable. getListOfKeys ( ). size ( ), 7 )
assertEquals ( "Wrong parameters", 0, provider. getParameters ( ). size ( ) )
Assert. fail ( "RuntimeException expected" )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff12_" ) )
assertEquals ( ( test [ 1 ] ), numResults )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( properties, room. getProperties ( ) )
Assert. assertEquals ( expected. replace ( '\\'', '"' ), result. trim ( ) )
assertMatches ( written, resolved )
assertEquals ( "hello", result )
assertEquals ( "", result )
assertTrue ( strategy instanceof ShardStrategy. DefaultShardStrategy )
assertThat ( domain. getValidationFailures ( resourceLookup ), contains ( stringContainsInOrder ( "log home", "/shared/logs" ) ) )
assertThat ( statistics. getDistinctEdgeCount ( ), is ( 7L ) )
assertEquals ( expectedData, ChartDataBuilder. buildBarData ( chartData ) )
assertEquals ( "Mismatched normalized path at iteration " + i, expected, actual )
assertEquals ( ManipulationScope. FIELD, manipulation. getManipulationScope ( ) )
Assert. assertEquals ( new Long ( 42L ), term. getIndexedValue ( ) )
assertEquals ( "SELECT ID\\nFROM PERSON\\nWHERE (SEX =?)", args. get ( 0 ) )
assertEquals ( 100, ( ( Number ) proxy ). intValue ( ) )
assertEquals ( "Unexpected principal name returned from servlet call", "servlet", servletResponse )
assertTrue ( suitable )
assertEquals ( true, classUnderTest. isShowConstraintNames ( ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
assertSame ( stsClient, i. getStsClient ( ) )
Assert. assertEquals ( prefixes. getNsPrefixURI ( "ex" ), query. getNsPrefixURI ( "ex" ) )
assertFalse ( subject. getDelay ( ). isPresent ( ) )
assertThat ( version, equalTo ( "unknown version, could not find property version.properties in module.properties" ) )
assertBeanValidation ( json, "query.metric[0].group_by[0].group_count may not be null" )
assertNotNull ( "Returned console reader cannot be null", reader )
assertEquals ( "Expected another type of analyzer", StopAnalyzer. class, analyzer. getClass ( ) )
assertMandatoryElements ( targetProduct, false )
assertSame ( t. toLocalTime ( ), TEST_2007_07_15_12_30_40_987654321. toLocalTime ( ) )
assertThat ( traversal. toList ( ), containsInAnyOrder ( likeVertex ( ). withTimId ( "id1" ), likeVertex ( ). withTimId ( "id2" ), likeVertex ( ). withTimId ( "id3" ) ) )
assertEquals ( expected, getString ( TestExistsCriteriaImpl. example ( ) ) )
assertIssues ( result. getIssues ( ), "Null source." )
assertTrue ( user. hasRole ( "Some Role" ) )
assertEquals ( o1, o2 )
assertThat ( result. hasErrors ( ), is ( false ) )
assertTrue ( set. isEmpty ( ) )
assertTrue ( "Keyword not found", result. getKeywordId ( )!= null )
assertEquals ( 1, violations. size ( ) )
assertEquals ( 0, ksession. fireAllRules ( ) )
assertEquals ( "9208675309", parsedTelephoneNumber )
assertArrayEquals ( "3". getBytes ( ), jedisCluster. get ( byteKey ) )
assertEquals ( 0, array. length )
assertFocusModificationSanity ( context )
assertEqualsIgnoreWhitespace ( expected, real )
assertEquals ( "Mismatched data", expected, res )
assertEquals ( response. getStatus ( ), STATUS200 )
Assert. assertEquals ( button. getTagName ( ), "button" )
assertEquals ( "matches(\\"\\\\s+\\")", buffer. toString ( ) )
assertEquals ( "{\\"a\\":[1,1]}", n )
assertEquals ( "Test message ab c", result )
assertEquals ( "SELECT gt1 FROM SOHeader soh JOIN soh.soItem soi JOIN soi.material mat WHERE soh.shId = soh.soId AND mat.id = 'abc'", jpqlStatement. toString ( ) )
assertEquals ( "00000012000000000014009000900090009000900090009000900090009000", this. banco. geraCodigoDeBarrasPara ( this. boleto ). substring ( 19, 44 ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 07" ) )
assertEquals ( BIG_DATA, result )
Assert. assertEquals ( "!bitset {\\n" + "  \\"10\\": \\"10\\"\\n" + "}\\n", wire. toString ( ) )
Assert. assertEquals ( new Double ( 65535.65535d ), _c. convert ( "65535.65535" ) )
assertTrue ( exceptionReport. getHTTPStatusCode ( ) == HttpServletResponse. SC_INTERNAL_SERVER_ERROR )
assertTrue ( ontology. containsAxiom ( df. getOWLObjectPropertyAxiom ( "uniqueProperties" ) ) )
Assert. assertEquals ( Constants. HEADER_SIGN_IN_PATH, actualSignInPath )
assertTrue ( entity. getSex ( ) == null )
assertEquals ( expected, loops )
assertEquals ( documentOrganizations, retDocumentOrganizations )
Assert. assertEquals ( "OK", result. get ( 1, TimeUnit. SECONDS ) )
assertThat ( response. getStatus ( ), is ( Response. Status. NOT_FOUND. getStatusCode ( ) ) )
assertEquals ( value, new Integer ( i ) )
assertDeclaration ( ss, "no-value" )
assertThat ( actual, containsInAnyOrder ( "DR", "Patient/P" ) )
assertEquals ( "OK", jedisCluster. scriptFlush ( byteKey, sha1 ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, Right. VIEW, this. doc ) )
objects. assertIsOfAnyClassIn ( someInfo ( ), actual, types )
assertNoCause ( "value of    : myObject.grandchild\\nmessage\\nmyObject was: root" )
assertThat ( i, is ( 2 ) )
assertNotNull ( image )
AssertResults. assertResults ( scanner, expectedResults )
assertThat ( markdown, containsString ( tableEntry ( "`anInt`", "number" ) ) )
assertEquals ( 0, p. getFoo ( ) )
assertEquals ( "Accumulated rows", 10000, accumulated )
assertEquals ( TEAM_CITY_URL + "/app/rest/projects/id:project54", projectUrl )
assertNotNull ( "Country is null", entity )
Assert. fail ( e. getMessage ( ) )
assertThat ( values, contains ( beginYear ) )
assertOut ( "\\n/**\\n * @const\\n * @type {*}\\n */\\na = 42" )
assertEquals ( true, result )
assertTrue ( pattern. matches ( "-1.1" ) )
assertResultSet ( res )
assertNotNull ( responseContent )
assertEquals ( 1, kieSession. fireAllRules ( ) )
assertEquals ( expected, actual )
assertTrue ( contains ( url, "?key=123.5" ) )
assertEquals ( Tuple3. of ( 17.29f, 14.5, - 0.98 ), Iterables. getOnlyElement ( applyAggregator ( a, input ) ) )
assertTrue ( s. getRequiredSkills ( ). containsSkill ( "skill1" ) )
assertThat ( responseObject, is ( nullValue ( ) ) )
Assert. assertEquals ( protocoloInfo, protocolo. getProtocoloInfo ( ) )
assertFalse ( msg1. isIgnoreUnmappedSegments ( ) )
Assert. assertEquals ( s, normalizer. normalizeLocale ( s ) )
Assert. assertNull ( "user group returned", actual )
Truth. assert_ ( )
assertEquals ( "Jersey/7.0", response )
assertThat ( date. getMinimum ( CommonElements. RELATED_GREGORIAN_YEAR ), is ( - 539422.5 ) )
N4CliHelper. assertExpectedOutput ( expectedString, out )
assertThat ( transferSuccessful, is ( true ) )
assertTwoProcesses ( manager )
assertNoDummyAccount ( ACCOUNT_JACK_USERNAME )
assertEquals ( FTPFile. DEFAULT_SIZE, ftpFiles. length )
assertNull ( value )
Assert. assertEquals ( 1, ( int ) conceptName. getConceptNameId ( ) )
assertTrue ( str. contains ( "x" ) )
assertEquals ( 0, units. size ( ) )
Assert. assertNotNull ( node )
assertTrue ( "hotmail contacts are empty", contacts. size ( ) > 0 )
Assert. assertEquals ( new Long ( Long. MAX_VALUE ), RequestObjectHelper. getEndOffset ( requestObject ) )
assertFailureLogPresent ( instance, "failingTask" )
assertThat ( parsers, is ( standardDdlParsers ) )
assertThat ( spec. getImagePullPolicy ( ), equalTo ( Optional. of ( "test:1.0" ) ) )
assertFalse ( authenticator. authenticate ( "username", "password" ) )
assertEquals ( expectedGhostTable, ghostTable )
assertThat ( records, is ( empty ( ) ) )
assertThat ( root, hasType ( Type. COMPLETELY_SCHEDULED_SUPERELEMENT ) )
assertEquals ( previous + 2, list. size ( ) )
assertTrue ( filter. shouldInclude ( source, "some.property" ) )
Assert. assertArrayEquals ( cplxData_ovsmp_EXPECTED. toDoubleArray ( ), cplxData_ovsmp_ACTUAL. toDoubleArray ( ), DELTA_08 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + filename, sourceFolder + "cmp_" + filename, destinationFolder, "diff_" ) )
assertTrue ( properties. shouldCreateNewChat ( ) )
assertEquals ( "wrong text", view. details. getText ( ), builder. toString ( ) )
assertTrue ( "Literal not escaped correctly", XSDFunc. isLiteral ( v ) )
Assert. assertEquals ( "Invalid result. Expected " + operands, row. expected, expr. evaluate ( ). booleanValue ( ) )
assertEquals ( expected, actual )
assertNull ( processor. getTables ( ) )
assertEquals ( label + " serialize-normal failed", e1, r )
assertEquals ( wpDocument, read )
assertEquals ( expectedSource, instrumentedSource )
assertThat ( ( String ) getter. invoke ( instance ), is ( equalTo ( "defaultString" ) ) )
Assert. assertEquals ( element. getText ( ), "click me" )
assertTrue ( "pool should be cleared", pool. isEmpty ( ) )
assertThat ( reading. getQuery ( ), is ( "offset=10" ) )
assertEquals ( 200, tagCache. size ( ) )
assertNotNull ( p )
assertEquals ( expected. trim ( ), output. trim ( ) )
assertThat ( manager. getPartitionSubPath ( new Path ( partition1. getSd ( ). getLocation ( ) ) ), is ( new Path ( partition1. getSd ( ). getLocation ( ) ) ) )
Assert. assertEquals ( 0, person. getAttributes ( 1 ). size ( ) )
assertDegenerate ( scan )
assertEquals ( "9 3\\n", found )
assertEquals ( "Expected 1 result!", 1, n )
assertFalse ( aCM. _package ( "" ). isEmpty ( ) )
assertThat ( cursor. hasNext ( ), equalTo ( false ) )
assertEquals ( "irida workflow is invalid", iridaWorkflow, iridaWorkflowFromFile )
assertEquals ( null, Iter. last ( data, filter ) )
assertTrue ( true )
Assert. assertTrue ( is. available ( ) > 0 )
assertEquals ( date, containerRequest. getDate ( ) )
assertNotNull ( "operator should not be null", tba1 )
assertEquals ( "immediateResume", str )
Assert. assertEquals ( 0, this. outputDir. listFiles ( ). length )
assertThat ( javaDocComment, containsString ( "A description for this type" ) )
assertEquals ( - 1, askLevel1. compareTo ( askLevel2 ) )
assertEquals ( expected, actual )
assertEquals ( original, newone )
assertEquals ( currentTimeMillis, ts. getTime ( ). getTime ( ) )
assertTrue ( selectedCells. isEmpty ( ) )
Assert. assertEquals ( "var simulation gave the wrong answer", - 3.0, ( Float ) r, 0.001 )
assertEquals ( val1, point. getValue ( ), 0.001 )
Assert. assertTrue ( row. matches ( new Guess ( colors ) ) )
assertEquals ( 3, position )
assertThat ( pathElement. getCompletePath ( ), is ( "/d/e" ) )
assertEquals ( 16, acc. get ( ) )
testHelper. assertProcessEnded ( testHelper. snapshotBeforeMigration. getProcessInstanceId ( ) )
Assert. assertEquals ( "No nodes should be free since the run is new at this point ", 5, freeThreads )
assertNotNull ( currentGroup )
Assert. fail ( "Failed to get command lines for " + errorCode )
assertSame ( expected, rc )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFInfoCupomFiscalReferenciado ( ). toString ( ) )
assertThat ( instance. resolve ( "./example/http://example.org/b/c.xsd" ), is ( "./example/b/c.xsd" ) )
assertEquals ( witness, map )
Assert. assertEquals ( 1, results. size ( ) )
assertScoreAndParse ( content, null, 1 )
assertArrayEquals ( EXPECTED_SIGN_SIGNED_BYTES, encodedBytes )
assertEquals ( 1, kieBuilder. getResults ( ). getMessages ( Message. Level. ERROR ). size ( ) )
assertThat ( decoderEncoder. decodeToArray ( qa [ 1 ] ), equalTo ( ecodedSuffix ) )
mockOutput. assertIsSatisfied ( )
assertSearch ( "1", query, null, new String [ ] { "ACT[1]/SCENE[2]/SPEECH[3]/SPEAKER", "1" }, new String [ ] { "1", "2", "3" }, new String [ ] { "count(//ACT[1]/SCENE[2]/SPEECH[3]/SPEAKER)" } )
assertEquals ( testString, cv. getValue ( 0 ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( expectedRemoteCallReturn, remoteCallReturn )
assertDisplayValues ( "fi.gif", "Commit ID 1" )
assertThat ( validationList, is ( Collections. singletonList ( INVALID_DB_SERVER_NAME ) ) )
assertTrue ( doc. isSameNode ( doc ) )
assertTrue ( "Multi-threading should be optimal when using multi-threading", concurrency > 3 )
assertEquals ( "123", converter. getAsString ( facesContext, new UIPanel ( ), null ) )
Assert. assertEquals ( "http://example.com/events/Wiesbaden?eventName=Revo+Tour&location=Schlachthof#description", expanded. toString ( ) )
assertFalse ( nodeExists ( path ) )
assertArrayEquals ( expected, actual, EPS )
assertEquals ( "string", array. getString ( 0 ) )
assertEquals ( "239104761", nossoNumeroCompleto )
assertThat ( result, contains ( new Interval ( RangeBoundary. CLOSED, 0, 4, RangeBoundary. CLOSED, 0, 0 ) ) )
assertNotNull ( Fleet. fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( response. getStatus ( ), STATUS200 )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
assertEquals ( 0, time. getTime ( ) )
assertTrue ( "Expected HostCapacityReport", obj instanceof HostCapacityReport )
assertFalse ( workReportTypeDAO. exists ( workReportType. getId ( ) ) )
assertTrue ( true )
assertReflectionEquals ( result, component )
assertEquals ( true, getLoadLayerDefinitionAction ( ). isEnabled ( ) )
assertEquals ( resp. getCode ( ), 204 )
assertEquals ( expected, answer )
assertEquals ( roles. size ( ), 0 )
assertTrue ( "Tx write should have completed", write2Complete. await ( 5, TimeUnit. SECONDS ) )
assertTrue ( notifier. wasPerformed ( ) )
assertEquals ( map1, map2 )
helper. assertAttributeValue ( EXPECT_NoAttributeValue, orderLine. getM_AttributeSetInstance ( ), attr_Country )
Assert. assertEquals ( expected, actual. toString ( ) )
Assert. assertEquals ( expected [ i ], new String ( digest ) )
Assert. assertFalse ( principal1. equals ( principal2 ) )
assertThat ( result, is ( true ) )
assertEquals ( currentUser. getPostCount ( ), before + 1 )
Assert. assertEquals ( "Compilation failed", 0, result )
assertTrue ( e instanceof E_Version )
assertEquals ( "candidate took 1 millis to execute\\n" + "control took 1 millis to execute\\n" + "example: candidate and control both executed successfully, but the messages don't match\\n", s )
Assert. assertEquals ( 2, inter. size ( ) )
BufferedImageAssert. assertMatches ( result, new float [ ] { 1, 1, 1, 1, 1, 1, 1, 0, 0 } )
Assert. assertTrue ( providerService. isProviderIdentifierUnique ( provider ) )
assertEquals ( getExplain ( delete, table. getSchemaName ( ) ), "\\n  Delete_Returning()\\n" + "    GroupLookup_Default(Index(c.PRIMARY) -> c)\\n" + "      IndexScan_Default(Index(c.PRIMARY), cid = $1)" )
assertEquals ( "preferred width must be same for duplicate margin", comp. getPreferredWidth ( ), table. getPreferredColumnWidth ( ) )
assertEquals ( "func code() {}", element. getValueAsString ( ) )
assertArrayEquals ( new String [ ] [ ] { { "A", "B", "C" }, { "1", "2", "3" } }, event. getMatrix ( ) )
assertEquals ( 0, songList. getContent ( ). size ( ) )
assertEquals ( "abaac\\n", found )
assertEquals ( numCalls + 1, newNumCalls )
Assert. assertEquals ( SslMode. MIXED, mode )
assertViewName ( mav, "redirect:/posts/" + POST_ID )
assertThat ( "unencoded field has type String", field. getType ( ), equalToType ( String. class ) )
assertEquals ( returnedNumber, numberOfOperations )
Assert. assertTrue ( rPr. getSz ( ). getVal ( ). intValue ( ) == 24 )
assertEquals ( Type. PRIVACY_PREFERENCE_FILE, Type. get ( preference ) )
assertOut ( "delete a" )
Assert. fail ( "Expected SQL exception" )
assertFailureValue ( "value of", "array.length" )
assertNotNull ( host )
assertEquals ( "Expected ratcheting to have been updated", 15, config. getTypeConfigs ( ). get ( CHECKSTYLE ). getMax ( ) )
assertEquals ( 0xff, keyInfo. getMaxSubKeyLen ( ) )
assertThat ( metrics. size ( ), is ( 6 ) )
assertThat ( mapOfProperties. keySet ( ), containsInAnyOrder ( "leveluplunch.java.examples", "leveluplunch.java.exercises", "leveluplunch.java.tutorials" ) )
Assert. assertEquals ( "unexpected XML protocol result", sb. toString ( ), tagOut )
assertEquals ( testNewUrl, jobEntryHadoopCopyFiles. loadURL ( testUrl, testNcName, mappings, metaStore ) )
assertThat ( localization. getLocale ( ), equalTo ( PT_BR ) )
assertEquals ( 4, booleans. size ( ) )
AssertJUnit. assertTrue ( "filter does not match object, but it should", match )
assertFalse ( source. isSnapshotsDisabled ( ) )
assertThat ( noOfSolutions, is ( 81 ) )
assertEquals ( actual, report )
assertThat ( fileContent, is ( "����������������������������������������������������������������������������������
assertEquals ( TEST_CONTENT, CharStreams. toString ( result ) )
assertObjectEquals ( "{'in':'header',name:'H',type:'object',schema:{properties:{f1:{type:'string'}}}}", x )
Assert. assertFalse ( PublisherSoapServerUtils. gpPublisherClient. publishStyle ( "STYLE_MOCK_MOCKITO_TEST_SOAP", "STYLE_NAME_MOCK_SOAP", Boolean. FALSE ) )
assertEquals ( "Hello :name", ResponseBodyInterpolator. interpolate ( "Hello ^:name", req ) )
assertThat ( diffs. toString ( ), equalTo ( "[Diff(EQUAL,\\"[a, b]\\"), Diff(DELETE,\\"[c, d]\\")]" ) )
Assert. assertFalse ( pf. passesFilter ( p1 ) )
assertThat ( itemTypeDAO. getTypes ( TENANT_ID, false ), is ( expectedTypes ) )
assertEquals ( HELLOWORLD_URI + "iterationstrategystack/0/0/0", uri. toASCIIString ( ) )
assertEquals ( "Patient/1", patient. getId ( ) )
assertTrue ( success )
Assert. assertTrue ( result. get ( ) )
assertEquals ( new File ( toResolve ), DockerPathUtil. resolveAbsolutely ( toResolve ) )
Assert. notNull ( department )
assertEquals ( false, result )
assertThat ( driver. findElement ( By. id ( "halfwidth" ) ). getText ( ), is ( "����笺����锛�" ) )
assertEquals ( null, min )
Assert. assertEquals ( "[John, Doe, Koby, Alice, Bill, Koby]", resultList. toString ( ) )
Assert. fail ( )
assertThat ( classesToParse. isEmpty ( ), is ( true ) )
assertNotNull ( User. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertNull ( e. getEnableCounting ( ) )
assertEquals ( expResult, result )
assertFalse ( victim. includeBaseDirOptionLength ( mockIterator ) )
assertEquals ( "", result )
assertEquals ( request. getUri ( baseURI ), expectedURI )
Assert. assertEquals ( 1, service. operation ( "qualify" ). getReceivedCount ( ) )
Assert. assertTrue ( "Failure expected true", r. getLeft ( ) )
assertRowCount ( results, 1 )
assertNotNull ( Member. fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
this. assertAnalyzesTo ( _a, "{\\"foo\\":true}", new String [ ] { TypeAttribute. DEFAULT_TYPE, "<TRUE>" } )
assertEquals ( renderJarTypeOnlyResult ( ), result )
assertEquals ( ImmutableList. of ( Pair. of ( 1, 3.0 ) ), Lists. newArrayList ( it ) )
Assert. assertEquals ( 2, analyser. getLoadRightAfterActivity ( route. getActivities ( ). get ( 2 ), route ). get ( 0 ) )
Assert. assertEquals ( "@", model. getOptions ( ). getEscapeAtRightCurly ( ) )
assertEquals ( body. toString ( ), "1test final" )
Assert. assertEquals ( 2, violations. size ( ) )
assertions. contains ( value, index )
Assert. assertEquals ( "/test?queryParams=a%2Cb%2Cc&1%2C2%2C3", result )
assertThat ( count, is ( 1L ) )
assertTrue ( Iterables. elementsEqual ( result. getSteps ( ), Lists. newArrayList ( new Step ( 0L, 1L, 2L, 3L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>", result )
assertEquals ( "value", exp. asDynamic ( ). asNavigationPropertyPath ( ). getValue ( ) )
Assert. assertNull ( caixa )
classes. assertHasSuperclass ( someInfo ( ), clazz )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
assertThat ( selectionModel. getSelectedClass ( ), is ( Optional. empty ( ) ) )
assertTrue ( filter. matches ( "resilient_pool-0", poolOperation ) )
assertEquals ( expectedNewCookie, parsedNewCookie )
Assert. assertTrue ( response. toString ( ), response. result ( ) )
Assert. assertTrue ( isReferenced )
assertSeven ( result, testContext, async )
assertEquals ( sinkFactory. getBaseDir ( ), this. sinkFactory. getBaseDir ( ) )
assertNull ( registrationProperties. getValue ( ). get ( "configurationAdmin" ) )
assertEquals ( "OK", r )
assertEquals ( 2, new NQueens ( solution ). attackedQueens ( ) )
Assert. assertEquals ( null, ev. get ( "a" ) )
assertEquals ( expected, e. evaluate ( ), 0.0 )
Assert. fail ( "Expected to fail, but didn't" )
Assert. assertEquals ( expectedOutputValues, RheemCollections. asSet ( outputValues ) )
assertEquals ( 123, row. getValue ( ) )
assertEquals ( expected, b )
assertEquals ( uri, path )
assertThat ( reader, is ( notNullValue ( ) ) )
assertSame ( MockChooser1. class, delegate. getClass ( ) )
assertEquals ( formatedValue, "26637142000158" )
assertTrue ( FileUtil. findPatternInFile ( new File ( resultFilename ), "org/suhua/errorprone.xml" ) )
assertFalse ( executor. shouldExecute ( action, javax. faces. event. PhaseId. RESTORE_VIEW, false ) )
assertTrue ( str. contains ( "public class QGroup {\\n" + "  public QGroup(String s) {\\n" + "    return new QGroup(s);\\n" + "  }\\n" + "}" ) )
assertEquals ( "Homer", exp. evaluate ( person ) )
assertOut ( "this.b = this.b + 1" )
Assert. assertEquals ( "PersonAddressName", result )
assertEquals ( 'a', in. readByte ( ) )
assertNull ( result )
Assert. assertNull ( gran )
assertThat ( response, containsString ( "81.80.117.237" ) )
assertNotNull ( result )
assertThat ( givenStories. getPaths ( ), equalTo ( Arrays. asList ( GIVEN_STORY_PATH1, GIVEN_STORY_PATH2 ) ) )
assertFalse ( isEditable )
assertEquals ( "success", response )
assertEquals ( "Failed at " + i, reduced. getDouble ( i ), res, 0.001 )
Assert. assertEquals ( state. IDLE, state )
Assert. isTrue ( getUser. getGroups ( ). size ( ) == 0 )
assertLinkWithSameUnitsOk ( LinkInfo. UNIT_TYPE. NETWORK, units )
assertEquals ( DEFAULT_POPULATION_SIZE + evaluations, algorithm. getEvaluations ( ) )
assertEquals ( "Period of time < 1 second", "1 seconds", DateTimeUtils. millisecondsToHumanTime ( period ) )
assertEquals ( "V1 Track", wrapper. getTrack ( ) )
assertEquals ( buildInfo. getName ( ), BUILDINFO. getName ( ) )
assertTrue ( closed. await ( 10, SECONDS ) )
assertEquals ( "3 minggu yang lalu", t. format ( new Date ( 0 ) ) )
Assert. assertEquals ( "1 futureday ago", p. format ( new Date ( 1000 * 60 * 60 * 24 * 365 * 1000 * 1 ) ) )
assertEquals ( "-2", expr. getParameterValue ( ) )
assertEquals ( "resKey", container. getPmResKey ( ) )
Assert. assertEquals ( config, result )
assertEquals ( "HTTP @ proxyhost:1234", client. getHeader ( "Proxy-Host" ) )
assertEquals ( r1, r2 )
assertNotNull ( rs )
assertEquals ( component. getStyleName ( ), "style1 style2" )
Assert. fail ( "IllegalArgumentException should be thrown." )
assertThat ( new File ( job. getCoverallsDir ( ) ). exists ( ), is ( true ) )
assertEquals ( expectedUrl, url )
Assert. assertEquals ( "There should be 10 insert vertices", 10, insertPoolPerGraphsExecutorCompletionService. get ( ). size ( ) )
assertEquals ( coder. parse ( "(s2*s3)^2 + s2*s3^2 + s3^2 + s2*s3^2 + s2*s3^2 + s3^2 + s2^2 + s3^2)" ), coder. parse ( "(s2*s3^2 + s2^2 + s3^2)" ) )
assertEqualsIgnoreLineEnding ( output, "{\\n" + "  \\"additionalProp1\\" : \\"Yet Another Property\\"\\n" + "}" )
Assert. assertEquals ( first. hashCode ( ), bc. hashCode ( ) )
assertEquals ( "{test;param;}", result )
assertThat ( main. getClasspath ( ), equalTo ( new File ( classPathUrls [ 0 ] ). toURI ( ) ) )
assertEnvelopeEquals ( expected, actual, STRICT )
assertFalse ( optional. isPresent ( ) )
assertEquals ( service. getSize ( new String [ ] { "", "", "" } ), 3 )
assertThat ( actual, notNullValue ( ) )
assertEquals ( "/alluxio/zk/foo/bar/baz", output )
Assert. assertFalse ( conceptService. hasAnyConceptAttribute ( conceptAttributeType ) )
assertFalse ( selector. evaluate ( source ) )
assertFalse ( "Created MulticastSocket", context. datagramSocket instanceof MulticastSocket )
Assert. assertEquals ( 5.1f, value, 0 )
assertCard ( expectedCard, "http://magiccards.info/dgm/en/3.html", expectedCard. getRarity ( ). toDisplayName ( ), expectedCard. getName ( ) )
assertEquals ( "nonce=nonce,timestamp=ts,scope=feeds,realm=some-realm", request. getOauthParameters ( ). get ( OAuthConstants. OAUTH_PARAMETER ) )
assertEquals ( "SELECT\\n" + "c.id, c.name, c.tags, c.description, \\n" + "c.division, c.experience_level as \\"experienceLevel\\", \\n" + "c.division_level as \\"experienceLevel\\", \\n" + "g.latitude as \\"latitude\\", g.longitude as \\"longitude\\"\\n" + "FROM campaign c\\n" + "LEFT OUTER JOIN campaign g on g.id = c.campaign.id\\n" + "WHERE g.latitude IS NOT NULL AND g.longitude IS NOT NULL AND g.latitude IS NOT NULL AND g.longitude IS NOT NULL AND g.latitude IS NOT NULL AND g.longitude IS NOT NULL AND g.latitude IS NOT NULL AND g.longitude IS NOT NULL AND g.longitude IS NOT NULL AND g.latitude IS NOT NULL AND g.longitude IS NOT NULL AND g.latitude IS NOT NULL AND g.longitude IS NOT NULL AND g.latitude IS NOT NULL AND g.longitude IS NOT NULL", actual )
Assert. fail ( "Should not be able to generate a negative length String" )
context. assertIsSatisfied ( )
assertNull ( retry )
Assert. assertFalse ( ModuleUtil. matchRequiredVersions ( openmrsVersion, requiredVersion ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertThat ( renderLayers. getLayers ( ). isEmpty ( ), is ( true ) )
Assert. assertNull ( job )
Assert. assertEquals ( eqd2. getEvent ( ), repo. findEvents ( eqd2 ). get ( 0 ) )
assertEquals ( expResult, result )
assertEquals ( a1, a2 )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, n ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertThat ( underTest. execute ( underTest, null, null, new Object [ ] { PATH, FORMAT, "group_repo" }, null ), is ( false ) )
assertTrue ( Pattern. matches ( "(?s).*/messages01.jsp PASSED.*", page. asXml ( ) ) )
mockery. assertIsSatisfied ( )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertOut ( "a.splice(2, 0, 1)" )
Assert. assertNull ( foundPid )
assertEquals ( asList ( Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE, Segment. SIZE ), segmentSizes )
assertEquals ( "super", hpi. getStartActivityId ( ) )
assertDocument ( session. getSessionFactory ( ), "Enterprise", "{ '_id' : 'enterprise-1', " + "'name' : 'Sawing', " + "'sale' : { 'age' : 7 }," + "'company' : { 'name' : 'Sawing', " + "'age' : 2 }," + "'deployed' : { 'name' : 'Sale', " + "'birthTime' : 0" + "}" )
Assert. assertEquals ( strExpected, strActual )
assertEquals ( calendar. getTime ( ), toml. getDate ( "a_date" ) )
assertNotNull ( doc )
Assert. assertTrue ( status. toString ( ). contains ( "ForceSwitchable" ) )
Assert. assertNotNull ( annotation )
AssertJUnit. assertEquals ( expectedEdge. getEdgeId ( ), actualEdge. getEdgeId ( ) )
runner. assertNotValid ( credentialsService )
Assert. assertTrue ( "output contains version",! listOutput. isEmpty ( ) )
assertTrue ( "Peter not correctly sorted", result )
assertNotNull ( result )
assertEquals ( "a b\\n", found )
assertEquals ( 7, vrp. getJobs ( ). get ( "1" ). getSize ( ). get ( 0 ) )
assertEquals ( "abca", res )
assertEquals ( JobStatus. ENQUEUED, job. status )
assertEquals ( expected, content )
assertEquals ( expResult, result )
assertEquals ( XML, writer. toString ( ) )
assertEquals ( source, select. getSource ( ) )
assertEquals ( "The index should be built correctly", new AvroIndexKey ( TestConstants. INDEX2, QueryType. EXACT_KEY, key ). getIndexName ( ), TestConstants. INDEX_2 )
Assert. assertFalse ( p1. isSameAs ( p2 ) )
assertRoundtrip ( input )
assertSame ( ctrlC, accelerator )
assertThat ( domain. getServer ( "server1", "cluster1" ). getServerStartState ( ), equalTo ( "server" ) )
assertEquals ( before, after )
Assert. assertEquals ( b, a )
assertEquals ( asList ( foo1, foo2 ), results )
assertEquals ( String. valueOf ( number ), new Long ( number ). toString ( ) )
assertThat ( converter. convert ( "05/06/2010", Date. class, bundle ), is ( equalTo ( new SimpleDateFormat ( "yyyy-MM-dd" ). parse ( "05/06/2010" ) ) ) )
Assert. assertEquals ( "choob-plugin", Utils. loadClass ( url ). getName ( ) )
assertEquals ( map. keySet ( ). size ( ), 34 )
assertEquals ( defaults, config. getDefaults ( ) )
assertThat ( version1. compareTo ( version2 ), equalTo ( 0 ) )
Assert. fail ( "Should throw FileNotFoundException" )
assertThat ( uri. getPath ( ), endsWith ( "testing" ) )
assertNotNull ( result )
Assert. assertEquals ( siteFinder. hasResults ( ), true )
assertEquals ( "Expected 400 but got " + response. getStatus ( ), 400, response. getStatus ( ) )
assertTrue ( endpoint. isSiteStream ( ) )
assertEquals ( "Expected 5 results!", 5, n )
assertTrue ( latch. await ( 4, SECONDS ) )
assertThat ( time. with ( PlainTime. COMPONENT. setToNextFullHour ( ) ), is ( PlainTime. midnightAtEndOfDay ( ) ) )
Assert. assertEquals ( "John Doe", customer )
assertMockEndpointsSatisfied ( )
assertThat ( parsed, is ( equalTo ( original ) ) )
assertNotNull ( modelFamilyDTOs )
Assert. assertEquals ( ERROR_MESSAGE + input + '"', expected, filter ( input ) )
Assert. assertTrue ( pss. toString ( ). contains ( Integer. toString ( c. get ( Calendar. HOUR_OF_DAY ) ) ) )
assertEquals ( "Did not match expected URIs", expected, lookups )
assertEquals ( new Short ( ( short ) 3 ), t )
assertEquals ( "icmp-rule-desc-update", policyRule. getDescription ( ) )
assertEquals ( 0, DistributedUtils. getMonitorData ( from, to ). length )
assertEquals ( ",", testDelimiter )
Assert. assertEquals ( decompressFlag, methodCalled. get ( 0 ) )
assertThat ( channel. isLongString ( ), equalTo ( true ) )
assertEquals ( HttpStatusCode. OK_200, response. getStatus ( ) )
assertEquals ( "/parent/dir/a/b/c", path. toString ( ) )
assertTrue ( output. isIsomorphicWith ( source ) )
assertArrayEquals ( message, payload )
Assert. assertEquals ( "(aa_change_substitution (aa_point_location (aa_char Cys) 123) (aa_char Arg))", aa_change_substitution. toStringTree ( parser ) )
assertEquals ( "true", Property. buildAll. getValue ( new Properties ( ) ) )
assertions. hasSize ( 5 )
assertThat ( description. toString ( ), is ( "a stage that completed with an exception that is an " + "instance of java.lang.RuntimeException" ) )
assertLabelQueryResult ( query. toString ( ), both ( binds ( "xLabel", Literal. class ) ). and ( binds ( "x", URI. class ) ) )
assertEquals ( "requests size", 4, requests. size ( ) )
assertEquals ( MultiStringPropertyState. stringProperty ( "source", Arrays. asList ( "1", "2", "3" ) ), builder. getPropertyState ( ) )
Assert. assertEquals ( fromJson. getNested ( ), test. getNested ( ) )
assertThat ( error. getCode ( ), is ( "DuplicatedTag" ) )
assertEquals ( 0, stk. size ( ) )
assertEquals ( 1234, get ( url ). intHeader ( "malformed", 1234 ) )
assertEquals ( profilePage. getUsername ( ), "test-admin" )
assertTrue ( cal instanceof Calendar )
assertNotNull ( output. list ( ) )
assertEquals ( "foo.war", result. get ( RESULT ). asString ( ) )
assertThat ( "testSetPrimaryBitstreamID 0", b. getPrimaryBitstreamID ( ), equalTo ( bs ) )
assertThat ( columnCombination. getContainedOneColumnCombinations ( fixture. getMaxNumberOfColumns ( ) ), IsIterableContainingInAnyOrder. containsInAnyOrder ( fixture. getExpectedOneColumnCombinations1 ( ) ) )
assertEquals ( Optional. empty ( ), nextExecution )
Assert. assertFalse ( rw. isValidUtf8 ( ( char ) ( 'a' + ( char ) ( 'b' + ( byte ) ( 'c' + ( byte ) ( 'd' + 'e' + 'f' ) ) ) ). getResult ( ), buf ) )
Assert. assertEquals ( jdkHand, acHand )
assertEquals ( expectedHome, config. getHome ( ) )
assertEquals ( AuthenticationTypeParser. SAS, parserSAS. getAuthenticationParser ( ). getType ( ) )
assertThat ( "Failed to match bogus source '" + bogusSources [ i ] + "' pattern '" + bogusPatterns [ i ] + "'", result, is ( true ) )
assertTrue ( status. equals ( HardActivityConstraint. ConstraintsStatus. FULFILLED ) )
assertTrue ( worker. getFirstAssignment ( ) == another )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 06" ) )
assertThat ( props. getProperty ( COLA_REPORT_METHOD ), is ( nullValue ( ) ) )
Assert. assertEquals ( 100., time, 0.01 )
assertEquals ( expected, actual )
assertThat ( instanceConstraintViolationsList. size ( ), equalTo ( 0 ) )
assertEquals ( 0, getMessageQueueSize ( ) )
assertTrue ( jiffle. isCompiled ( ) )
assertThat ( CurrentInstance. get ( String. class ), is ( "Set in task" ) )
assertThat ( response, not ( containsString ( "Unreferenced" ) ) )
assertFalse ( objJPAEdmProperty. isConsistent ( ) )
Assert. assertEquals ( val1 + "_" + val2, index )
assertNotNull ( factoryBean. createKey ( ) )
Assert. assertEquals ( 0, actual, 1e-10 )
assertEquals ( dn, dnExpected )
assertEquals ( a1. getName ( ), a2. getName ( ) )
assertTrue ( ex. getCause ( ) instanceof MutationsRejectedException )
Assert. assertTrue ( validator. invalidMessagesFor ( cpf ). isEmpty ( ) )
assertEquals ( auth1. hashCode ( ), auth2. hashCode ( ) )
Assert. assertEquals ( "Verify that the default registered container is returned as a registered container", name, container. getName ( ) )
Assert. assertTrue ( true )
assertMockEndpointsSatisfied ( )
Assert. assertTrue ( o. equals ( obj ) )
assertEquals ( "Wrong URL address", "http://somewhere.different/", con. getURL ( ). toString ( ) )
Assert. assertNull ( "Cookie should not have been deleted", driver ( ). manage ( ). getCookieNamed ( "name" ) )
assertTrue ( onBindCalled )
assertTrue ( deserializedList. isEmpty ( ) )
assertEquals ( 0.0, aiResponse. getResultScore ( ), 0.0 )
assertHelpLines ( "Option                   Description        ", "------                   -----------        ", "-date [MM/dd/yy: your basic date pattern]   a date     ", EMPTY )
assertThat ( anyTS. contains ( CLOCK_HOUR_OF_AMPM ), is ( true ) )
Assert. assertEquals ( value1, value2 )
assertThat ( action. hashCode ( ), is ( other. hashCode ( ) ) )
assertEquals ( "Connection per hosts", 70, ioConfig. getMaxConnPerHosts ( ) )
assertEquals ( expectedSource, instrumentedSource )
assertEquals ( ValidationResult. OK. getStatus ( ), validationResult. getStatus ( ) )
assertEquals ( 2L, actual )
Assert. assertSame ( COLLABORATOR, c. getAccessLevel ( ) )
assertTrue ( JSONObject. isEqual ( data, null ) )
Assert. assertNotNull ( options. getSubOptions ( ConverterRegistry. class ) )
assertEquals ( "scheme://:123/path", uri. toString ( ) )
assertNotNull ( ref )
assertTrue ( cf1. hasChildren ( ) )
Assert. assertTrue ( getException )
assertEquals ( "A\\nB\\nC", output )
assertions. doesNotContainNull ( )
assertEquals ( 0, ret. size ( ) )
assertEquals ( result, subject. unmodifiableSet ( ) )
assertArrayEquals ( msg1, deserializedComm. getCommitmentValue ( ) )
assertTrue ( containerConfigService. isUpdateContainerAllowed ( CONTAINER_ID, new KieContainerInstanceImpl ( CONTAINER_ID, KieContainerStatus. STARTED, mode ) ) )
assertTrue ( difference. toString ( ), difference. identical ( ) )
assertThat ( highlander. getProperty ( PropertyNames. UUID ), is ( nullValue ( ) ) )
assertTrue ( cache. getResourceActivities ( ). containsKey ( "id" ) )
Assert. assertEquals ( "12 啶�啶苦え啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 12 ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\\n  var /** @type {number} */ a = NaN;\\n  var /** @type {number} */ b = NaN;\\n  var /** @type {number} */ c = NaN;\\n  //var /** @type {number} */ a = NaN;\\n  //var /** @type {number} */ b = NaN;\\n}" )
assertEquals ( 1, interceptAnnotations. size ( ) )
assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
assertEquals ( "testing", removeSentenceDecorator. toDisplay ( ) )
Assert. assertTrue ( "The camel context was not created", camelctx!= null )
assertEquals ( "the notification handler unexpectedly receives the " + RESOURCE_ADDED_NOTIFICATION, 1, handler. getNotifications ( ). size ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 10" ) )
assertTrue ( Bean81V3BindMap. class. getName ( )!= null )
assertAccessorsCorrect ( multi, "maxSelect", Integer. class, "isMaxSelect", false )
Assert. assertTrue ( count1. equals ( count2 ) )
assertEquals ( config. getOozieWorkflowConfig ( ), event. getValue ( ). getNewValue ( ) )
assertEquals ( "ISA03", s. getElement ( ) )
assertTrue ( fileSystem. isClosed ( ) )
assertEquals ( "123涓���浜烘��卞����", deserialize. readUTF ( ) )
assertTrue ( "Expected hierarchy validation failure did not succeed", hierarchySchema. validate ( hierarchyEntity ) )
assertEquals ( "Smiles", foundName )
assertThat ( result, is ( lines ( new String [ ] [ ] { { "\\\\\\t" } } ) ) )
assertEquals ( "", mojo. execute ( "package" ) )
Assert. assertEquals ( "M-PKG-7897A-78-entries-and-one-private-key.jks", tm. getAlias ( ) )
assertEqualsIgnoreWhitespace ( result, KnowledgeHelperFixerTest. fixer. fix ( raw ) )
assertThat ( result, is ( data ) )
assertEquals ( "id", item. getId ( ) )
assertArrayEquals ( getPixels ( expected, 0, 0, expected. getWidth ( ), expected. getHeight ( ), null ), getPixels ( actual, 0, 0, actual. getWidth ( ), actual. getHeight ( ), null ) )
assertNotNull ( cat )
assertEquals ( expectedPanel, actualPanel )
assertTrue ( "testSnappyBlockCompression error!!!", out. toByteArray ( ). length > 0 )
Assert. assertEquals ( "Incorrect Type", ActivityType. NULL, sut. objectToString ( activity ) )
Assert. assertEquals ( rawInput, text )
assertEquals ( expected, elements )
Assert. isTrue ( organizations. size ( ) > 0 )
assertEquals ( "foo", obj )
assertThat ( destination. getBodyText ( ), is ( "Navigation Destination from : from the rule link" ) )
assertEquals ( "涓���", value )
assertEquals ( 1, Evaluator. evaluate ( ex ). size ( ) )
assertThat ( result, equalTo ( "setDValue" ) )
assertEquals ( expected, model )
assertEquals ( "PaZZwor6", user. getPassword ( ) )
assertEquals ( "root.parentq", policy. assignAppToQueue ( "root.default", "user1" ) )
assertOut ( "id=\\"myBtn\\"" )
Assert. assertEquals ( expectedIp, AgentUtils. findIpAddress ( "default" ) )
assertNullOrEquals ( "��小懈��械屑邪 �械芯写械�懈�械�泻懈� �芯芯�写懈薪胁� 谐芯写邪 1995(小�-95)��]", crs. getDatum ( ). getNormalized ( ) )
assertEquals ( encoded. length, fixture. prepareToEncode ( context ) )
assertEquals ( biography, dbAbba. getBioSummary ( ) )
Assert. assertEquals ( "<a-b-c>", eval ( ) )
assertNull ( jdbcSource )
assertFalse ( handler. containsMessageSubstring ( message, "testing" ) )
assertThat ( result. size ( ), is ( equalTo ( 2 ) ) )
assertNotNull ( result )
assertThat ( reply ( ), is ( anAppendReply ( ). withResult ( false ) ) )
assertNotNull ( result )
Assert. assertEquals ( string, table. getFilterVar ( ) )
assertEquals ( "UUID value(s) must be not equal", error )
assertEquals ( 2, states. size ( ) )
assertTrue ( res instanceof List )
assertEquals ( ExpressionFactory. matchExp ( "path", Arrays. asList ( artist1, artist2 ) ), exp )
assertEquals ( expected, request. toJSON ( ) )
assertEquals ( originalFetchCount, timeline. getFetchCount ( ) )
Assert. fail ( "Exception expected" )
assertFalse ( isValid )
assertThat ( unix ( instance, strategy ), equalTo ( "ec2-0-0-0-0.compute-1.amazonaws.com" ) )
assertEquals ( false, result )
assertThat ( employee. getSalary ( ), is ( 100.50D ) )
assertThat ( request. getTimestamp ( ), equalTo ( now ) )
assertEquals ( "(& [* fo.*] [*.*oo] [= foo])", m. toString ( ) )
assertThat ( advisor. getAdvice ( ), instanceOf ( TpicPreAdvisor. class ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoItemProdutoCombustivel ( ). toString ( ) )
assertNull ( "No device was removed", _poolDeviceMap. getOrCreateDS ( name, 0, ip ) )
assertTrue ( "exp(" + arg + ") is " + vFM + " instead of " + vM, Precision. equalsIncludingNaN ( vM, vFM ) )
assertTrue ( digits. size ( ) == 6 )
Assert. assertEquals ( "Hello World!", result )
assertTrue ( resultComparator. compare ( od1, od2 ) > 0 )
assertEquals ( 4, nuOfType1Vehicles )
assertEquals ( "dois undecilh玫es de inteiros", actual )
assertThat ( model2. getMyBytes ( ), is ( value ) )
assertEquals ( "Block size", 16, ecipher. getBlockSize ( ) )
assertEquals ( "Compression/Decompression error", inputLine, readLine )
assertThat ( foundResources, contains ( p2id. getValue ( ) ) )
assertEquals ( expectedQuery, actualQuery )
assertTrue ( actionsTriggered. get ( ) )
assertThat ( transMeta. getName ( ), is ( "testTrans" ) )
assertEquals ( "where() do not match", "?:contentAuth=false", query. toString ( ) )
assertThat ( ramlResponse. getBody ( ), is ( equalTo ( "test/more?param=value&param=v2&p2=盲枚眉+$% " ) ) )
assertions. isSorted ( )
assertEquals ( htmlDoc, new String ( output ) )
arrays. assertContainsOnly ( description, actual, null )
assertEquals ( "Unexpected status code in HTTP response.", SC_UNAUTHORIZED, statusCode )
assertFalse ( validatorLoadbalancer. validate ( meta, PUT ). passedValidation ( ) )
assertEquals ( 20, result )
assertThat ( instance. getId ( ), is ( "natural key" ) )
assertEquals ( "value", entry. getValue ( ) )
assertThat ( cut. getJobResource ( JOB_ID ), is ( nullValue ( ) ) )
assertNotNull ( WorkerChannel. reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertEquals ( "{" + "\\"@odata.context\\":\\"../$metadata#ESMixPrimCollComp(32767)/olingo.odata.test1.CTBase\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"PropertyInt16\\":111,\\"PropertyString\\":\\"TEST A\\"}", resultString )
assertEquals ( "<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc. body ( ). html ( ) )
assertTrue ( usl. getValueWidth ( ) == 0.15 )
assertEquals ( "user1", decoded. getUserid ( ) )
assertEquals ( expectedOutput, timeConversion. getFormattedTime ( input. split ( ":" ) ) )
assertTrue ( container. getItemIds ( id ). contains ( id ) )
assertEquals ( expResult, result )
Assert. assertTrue ( newSql. equals ( "SELECT * FROM cpcplan" + suffix + "@dblink WHERE name = '12'" ) )
Assert. assertEquals ( StringUtils. trimAllWhitespace ( result. toString ( ) ), "{\\"$or\\":[{\\"age\\":{\\"$regex\\":\\"^Mistic\\"}}]}" )
assertEquals ( LibUsb. ERROR_RETURN, LibUsb. init ( context ) )
assertNotNull ( "No exception thrown!", e )
assertEquals ( "Null should be compatibilized to 0", 0, val )
assertEquals ( "city()", city. toString ( ) )
assertThat ( result, equalTo ( false ) )
Assert. assertEquals ( new ArrayList < > ( Arrays. asList ( new Tag ( "myInvalidTag", 0 ) ) ), tagsList )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertSame ( "wrapping renderer must use combo's default on null", combo. getWrappedListCellRenderer ( ), renderer )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). resolveVisibility ( "unknown" ) )
assertEquals ( "Table should be populated by announcements table", 1, tableManager. getTableCount ( ) )
assertNull ( subject. preProcess ( "sql", mock ( Statement. class ), mock ( ResultSetInternalMethods. class ), mock ( Connection. class ), true, null ) )
assertEquals ( "b+7", r )
org. junit. Assert. assertEquals ( expected, actual )
assertFalse ( rootNode. isAuthenticationEnabled ( ) )
assertEquals ( PERSON_COUNT, personCount )
assertEquals ( 1, branch_conditions. size ( ) )
assertEquals ( TEST_MD5, computedDigest )
Assert. assertEquals ( expected, actual )
context. assertSentrySemanticException ( statement, "create view view1 as select a from " + DB1 + ".tb1", semanticException )
assertThat ( result, is ( Arrays. asList ( "getMyField", "isMyField" ) ) )
assertThat ( specification. getUnits ( ), is ( BYTE. multiply ( 1L << 50 ) ) )
Assert. assertEquals ( "Failed to guess entropy for " + match, expected, computed, 0.000001d )
assertEquals ( 2, jobsToSubmit. size ( ) )
assertThat ( studies. size ( ), is ( 0 ) )
assertThat ( score > 0.0f, is ( true ) )
assertEquals ( ServiceState. DISABLED, svc. getState ( ) )
assertEquals ( "SELECT f1, f2 FROM Class", q. toString ( ) )
Assert. assertTrue ( hGrowSpace. createSpacer ( hFixedSpace, vGrowSpace ) instanceof HGrowSpace )
Assert. assertTrue ( servers. equals ( loadBalancerRoutes ) )
assertTrue ( dnsCache1. equals ( dnsCache2 ) )
assertEquals ( SchemaFromInd2AndSubfield2. class, field. getDefinition ( ). getFieldIndexer ( ). getClass ( ) )
assertEquals ( "Base value is not properly parsed", Long. valueOf ( 1000L ), parsed )
assertEquals ( CheckoutResult. SUCCESS, action. checkout ( ) )
assertThat ( estimator. getCardinality ( ), is ( 0L ) )
assertFalse ( JexlASTHelper. equals ( one, two ) )
assertThat ( connection, is ( notNullValue ( ) ) )
Assert. assertTrue ( Math. abs ( maxAbsDeviation ) < 1E-3 )
assertTrue ( rem. equals ( new LineParameters ( 2, 1 ) ) )
assertEquals ( 12, BasicClock. DEFAULT. get ( ) )
Assert. assertEquals ( 2, count )
assertThat ( getWindowHeaderMarginRight ( ), is ( "15px" ) )
assertThat ( elasticSearchDownloader. createQuery ( ), is ( QUERY ) )
assertThat ( source. getRetryLimit ( ), is ( i ) )
assertAnnotations ( 0, Location. class, new TestEntity < > ( 0, "Sam" ) )
Assert. assertEquals ( expectedResult, result )
assertHasFooMethod ( dst, dstClass )
assertEquals ( request. getUri ( baseURI ), expectedURI )
assertEquals ( 11, count )
assertEquals ( "en", setArgs. getLangs ( ) )
assertTrue ( printError ( report ), report. hasItems ( ) )
assertEquals ( 0, pairs. size ( ) )
assertNotNull ( builder )
assertNotNull ( result )
assertNotNull ( plugin. getPlugin ( PluginImpl. DEFAULT_SERVER_NAME ) )
Assert. assertEquals ( Integer. valueOf ( 9 ), f. getLowestRanked ( ) )
assertEquals ( "Should return the correct number of fetched messages", 3, results. get ( "count" ) )
assertTrue ( serviceWadl. length ( ) > 0 )
Assert. assertEquals ( users. get ( 0 ). getName ( ), testUser. getName ( ) )
assertEquals ( expectedRegister, newRegister )
assertEquals ( expResult, result )
assertEquals ( "um milh茫o e cento e cinquenta e nove centavos", actual )
assertNotNull ( getStdOut ( ) )
Assert. assertEquals ( "<times><creationTime>2016-01-15T00:00:00Z</creationTime><expiryTime>2016-01-16T00:00:00Z</expiryTime><lastAccessTime>2016-01-17T00:00:00Z</lastAccessTime><lastModificationTime>2016-01-18T00:00:00Z</lastModificationTime><locationChanged>2016-01-19T00:00:00Z</locationChanged><usageCount>23</usageCount></times>", xml )
assertThat ( prefixDeclarations, hasItems ( new PrefixDeclaration ( "foo", "bar" ), new PrefixDeclaration ( "foo", "bar" ) ) )
assertTrue ( ret )
assertEquals ( "Mr. Horatio Test Hornblower", providerAttribute. getName ( ) )
assertThat ( out. toString ( ), is ( String. format ( "Queen%s", sep ) ) )
assertArrayEquals ( new int [ ] { 12345, 54321, 678768 }, factory. createDummyInt ( new ClassBindings ( ) ) )
assertEquals ( expected, Util. underscoredToJava ( "_propNameIdentifier123", false ) )
assertEquals ( expectedResult, result )
Assert. assertTrue ( "Capacity should be truncated to 10 elements", ( ( CapacityBalancingEvictor < Integer > ) evictor ). getCapacity ( ) > 10 )
assertEquals ( map. size ( ), n * nThreads )
Assert. assertEquals ( xml, FabricaDeObjetosFake. getNFEventoLote ( ). toString ( ) )
assertEquals ( 5, sum )
assertEquals ( expResult, result )
assertThat ( connection. getConnectionProperties ( ). get ( "sentry.client.dsn" ), is ( notNullValue ( ) ) )
assertTrue ( AuthzResolver. authorizedInternal ( session, "test_security_team_admin" ) )
assertThat ( formatter. format ( PlainDate. of ( 2015, 10, 1 ) ), is ( "Luga 00:00" ) )
assertTrue ( "Failed to match with compatible IPv6 subnet", match )
Assert. assertEquals ( "did not get expected column id", "id", actualColumn )
Assert. assertTrue ( _c. canConvertTo ( Long. class ) )
assertNotNull ( service. prepare ( query ). asSingleEntity ( ) )
assertEquals ( "foobar", s )
assertTrue ( intercepted. get ( TIMEOUT_MS, TimeUnit. MILLISECONDS ) )
assertThat ( status, is ( 201 ) )
assertFalse ( result )
Assert. assertNotNull ( migrationPlan )
N4CliHelper. assertExpectedOutput ( "express properties: init, defaultConfiguration, lazyInit, defaultConfiguration1, defaultConfiguration2, defaultConfiguration3, defaultConfiguration4, defaultConfiguration5, defaultConfiguration6, defaultConfiguration7, defaultConfiguration8, defaultConfiguration9, defaultConfiguration10, defaultConfiguration11, defaultConfiguration11, defaultConfiguration11, defaultConfiguration12, defaultConfiguration13, defaultConfiguration14, defaultConfiguration15, defaultConfiguration16, defaultConfiguration17, defaultConfiguration17, defaultConfiguration17, defaultConfiguration17, defaultConfiguration18, defaultConfiguration19, defaultConfiguration19, defaultConfiguration20, defaultConfiguration21, defaultConfiguration22, defaultConfiguration22, defaultConfiguration22, defaultConfiguration21, defaultConfiguration22, defaultConfiguration21, defaultConfiguration21, defaultConfiguration22, defaultConfiguration21, defaultConfiguration22, defaultConfiguration22, defaultConfiguration22, defaultConfiguration22, defaultConfiguration21, defaultConfiguration21, defaultConfiguration21, defaultConfiguration21, defaultConfiguration21, defaultConfiguration20, defaultConfiguration21, defaultConfiguration21, defaultConfiguration21, defaultConfiguration20, defaultConfiguration21, defaultConfiguration21, defaultConfiguration22, defaultConfiguration22, defaultConfiguration22, defaultConfiguration22, defaultConfiguration22, defaultConfiguration
assertEquals ( 5, cheeses. size ( ) )
Assert. assertEquals ( expected, actual, TOl )
assertThat ( registerList. getPrivileges ( ), is ( set ) )
assertThat ( MomentInterval. parseISO ( "P4DT1H45M/2012-096T16:00Z" ), is ( expected ) )
assertTrue ( entities. size ( ) == 1 )
assertThat ( crownStreetAddress. equalsContent ( rileyStreetAddress ), is ( false ) )
assertEquals ( "The list of history entries are not empty", 0, changes. size ( ) )
assertEquals ( RangeDefinition. RangeKind. DOCUMENT_SPECIAL, definition. getRangeKind ( ) )
assertThat ( jobConfig. exists ( ), is ( false ) )
assertRollupBeanValidation ( json, "rollup[0].range[0].aggregators[0].bogus invalid aggregate name" )
assertTrue ( reader. isLost ( ) )
assertTrue ( set. isEmpty ( ) )
assertNotNull ( document )
Assert. assertNull ( session, "No session should have been created when proxy set is empty" )
Assert. assertEquals ( expected, actual )
assertEquals ( s, r. toString ( ) )
assertFalse ( innstillinger. checkNoPagesForPrintIfCheckDisabled ( ) )
assertEquals ( "Detail message", imposter. getMessage ( ) )
assertEquals ( actual, expected, "Wrong substitution" )
assertEquals ( 1, statistics. size ( ) )
assertNull ( customPanelDef. getParent ( ) )
assertions. containsSequence ( sequence )
assertEquals ( "Response HTTP status code should be 200 (OK)", clientResponse. getStatus ( ), 200 )
assertTrue ( CollectionUtils. diff ( correctResults, results ). isEmpty ( ) )
Assert. assertEquals ( "Hash value", "BQHJJYKKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXXVYDLFSZYYTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQNDWRYLCA", hash )
assertEquals ( "3 写薪� �邪蟹�邪蟹", t. format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertSame ( shouldFind, selection. textInput ( By. id ( "test" ) ) )
XMLAssert. assertXMLEqual ( content, result. toString ( ) )
assertEquals ( p01. getContent ( ), "" )
assertNull ( "The resource was not deleted", searchedNode )
assertEquals ( pkgId, cache. getPkgId ( orgName, pkgName ) )
assertThat ( value, isOneOf ( "45/" ) )
assertNotNull ( dao. findByDemographicNo ( 1 ) )
assertThat ( bufferedEvents. size ( ), equalTo ( 0 ) )
assertEquals ( expectedSource, instrumentedSource )
assertTrue ( message, message. contains ( "type" ) )
assertEquals ( DummyModel. where ( new Object [ ] { "column1", "test123", "column2", "test" } ), Arrays. asList ( model ) )
assertEquals ( actual1, actual2 )
assertArrayEquals ( plaintext, result )
assertSeen ( visible )
assertNotEquals ( r1, r2 )
Assert. assertEquals ( clickMe. getText ( ), buttonText )
assertEquals ( docs. getResults ( ). size ( ), 1 )
assertEquals ( keyExpected, keyBuilt )
testRunner. assertAllFlowFilesTransferred ( EncodeContent. REL_FAILURE, 1 )
assertSame ( "control", choice. get ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( postResponse. getStatus ( ), is ( 201 ) )
assertFalse ( checker. isFormat ( stream ) )
assertComponentDoesNotExist ( COMPONENT_NAME )
assertThat ( description. toString ( ), is ( "a stage that completed with an exception that is an " + "instance of java.lang.RuntimeException" ) )
assertEquals ( Response. Status. NOT_FOUND. getStatusCode ( ), target. request ( MediaType. TEXT_PLAIN ). get ( ). getStatus ( ) )
Assert. isTrue ( grade. getEmployments ( ). size ( ) > 0 )
assertSame ( initialProperties, contextParameterResolver. resolve ( parameter, applicationContext ) )
assertEquals ( 0.0, rmsd, 0.0001 )
assertTrue ( Modifier. isPrivate ( c. getModifiers ( ) ) )
assertEquals ( 0, commandDocument. getCommands ( ). size ( ) )
assertTrue ( "Agent-based allocation should have failed", plan. getAllReservations ( ). size ( ) == 0 )
assertThat ( matcher. matches ( mockResponse ), is ( false ) )
assertEquals ( "d 42\\n", found )
assertThat ( count, is ( 3 ) )
assertThat ( defaultJobIdPartitioner. partition ( "test job id" ), is ( "test" ) )
assertNotNull ( exchange. getOut ( ). getHeader ( TENANT_POLL_HEADER ) )
assertThat ( HystrixPlugins. getInstance ( ). getAdminServletPath ( ), equalTo ( adminServletPath ) )
assertEquals ( "    rt2\\n    rt1\\n", drl )
assertEquals ( 1, counter )
assertEquals ( expectedList, customerDAO. getAll ( ) )
assertEquals ( "Bef&ore [Link&1](#dest1?a=b&c=d) Mid&dle [Link&2](http://xyz/abc?x=y&z=w) Aft&er", result )
Assert. assertNotNull ( json. getString ( "startFollowing" ) )
Assert. assertEquals ( expectedNode. toString ( ), pdoc. toString ( ) )
assertEquals ( "aTestString", classUnderTest. getSchemaName ( ) )
assertCompletionsDisplayString ( "my:\\n" + "  background: <*>", "color<*>", "color<*>", "default:\\n" + "  background: <*>" )
assertThatCellReaderWasCalled ( )
assertEquals ( "璁＄���璇�", 3, rs )
assertArrayEquals ( new String [ ] { Tag. Image, Tag. SourceInstanceID, "1", Tag. SourceInstanceID, "1-TEST" }, query. getMetaData ( Tag. Image ) )
assertArrayEquals ( respIdList, serializer. getResponderIdList ( ) )
assertEquals ( "/db/a/", xmldbURI. resolveCollectionPath ( uri ). toString ( ) )
assertEquals ( "Failed on i = " + i + " on bit " + x, x, ret )
Assert. assertNotNull ( out. getD15 ( ) )
Assert. assertFalse ( "Get Profile  returned no results", json. isEmpty ( ) )
Assert. assertEquals ( decryptedStringExpected, decryptedStringActual )
Assert. assertEquals ( "�驻�� 3 砖注�转", t. format ( new Date ( 0 ) ) )
assertEquals ( expected, service. getTimestampInSeconds ( ) )
Assert. assertTrue ( response. getStatus ( ) == OK. getStatusCode ( ) )
assertEquals ( expected, s )
assertFalse ( "empty data source contains records", it. hasNext ( ) )
assertThat ( serializeWith ( dateTime. format ( formatter ), formatter ), containsString ( dateTime. format ( formatter ) ) )
assertEquals ( "1,9223372036854775808,-9223372036854775808,null", s. serialize ( ( HttpPartSchema ) null, new Short [ ] { new Short ( ( short ) 1, Short. MAX_VALUE ) } ) )
assertEquals ( "DRIVER", cli. driver )
Assert. assertEquals ( 0, ret )
assertEqualsIgnoreLineEnding ( xmlString, "<?xml version='1.1' encoding='UTF-8'?><string>foo</string>" )
assertFalse ( "Configuration is empty", plist. isEmpty ( ) )
assertEquals ( VALID_DIR, mockPrefHandler. getPref ( IPreferenceHandler. TD_PATH ) )
assertThat ( subtree, hasSize ( 0 ) )
assertThat ( ( EOTemporaryGlobalID ) editingContext. __globalID ( ), is ( notNullValue ( ) ) )
assertNotNull ( result )
assertTrue ( isCorrectEnqLinkRequest )
assertTrue ( payload. needsBuild ( getProject ( ) ) )
runner. assertAllFlowFilesTransferred ( TailFile. REL_SUCCESS, 1 )
Assert. fail ( "exception expected" )
assertSelected ( get ( 0 ) )
assertEquals ( 0, aNumber. compareTo ( bNumber ) )
assertEquals ( scale ( value ), ra. get ( ). get ( ) )
assertEquals ( "PaintingId", p1. getPaintingId ( ) )
assertNotNull ( ds. getAvailableDataStoreList ( ) )
assertEquals ( "lead a tail...", example. output ( ) )
assertEquals ( Result. PASS, name. apply ( item, - 1 ) )
assertEquals ( 1, result. size ( ) )
assertEquals ( "Six rules are set", 6, ss. size ( ) )
assertTrue ( isContainerPrincipalTypeInResponse ( resp, true ) )
assertNull ( "Required profiles is not null", new KnopflerfishPlatformBuilderF300 ( m_bundleContext, "version" ). getRequiredProfile ( m_platformContext ) )
assertEquals ( NaCl. Sodium. CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE, result )
assertNull ( song. getName ( ) )
assertThat ( result, is ( true ) )
assertThat ( encryptedPasswordPass1, not ( equalTo ( encryptedPasswordPass2 ) ) )
assertTrue ( c. isErrorFree ( ) )
assertEquals ( "en", metadata. getLanguage ( ) )
assertAnnotations ( 1, Location. class, new TestEntity < > ( 0, "GR SU02194 45374", "time" ) )
assertEquals ( true, results. contains ( "[INSERT], Return=OK, 1" ) )
assertDepth ( "sub-tree", callTree, expectResult )
assertArrayEquals ( expected, actual, DELTA )
Assert. assertEquals ( RobeHibernateBundle. getInstance ( ). getDataSourceFactory ( ), dataSourceFactory )
assertEquals ( "nl:surfnet:diensten:hallo", group20Entry. getEntry ( ). get ( 0 ). getId ( ) )
assertEquals ( s, bs. getSheep ( 0 ) )
assertEquals ( "Hello, Earth!", config. getString ( DEFAULT_CONTAINER, "expression" ) )
assertThat ( response. getStatus ( ), is ( 200 ) )
assertLoadAndInstallMessage ( distributionSet. getModules ( ), controllerId )
assertThat ( r. hasUnrestrictedChild ( LIST, FsPath. create ( "/foo" ) ), is ( equalTo ( false ) ) )
assertEquals ( Unpooled. buffer ( ), actual )
assertEquals ( test, expected )
assertFalse ( ( boolean ) testedMethod. invoke ( tasksManagerImpl, STARTING_BYTE_OF_2_BYTE_CHAR ) )
assertSqlCanBeParsedAndDeparsed ( statement )
Assert. assertEquals ( "Hello NAR World!", app. sayHello ( ) )
assertEquals ( expResult, result )
assertEquals ( 1, dataset. getDefaultModel ( ). size ( ) )
assertEquals ( expected, cacheManager. resolveDefaultMaxSize ( ), 0.1 )
assertEquals ( "$metadata#ESAllPrim(PropertyInt16,PropertyString,PropertyInt16)", ContextURLBuilder. create ( contextURL ). toASCIIString ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertThat ( actualEnums, is ( expectedEnums ) )
assertNull ( object )
assertEquals ( 1, deployments. size ( ) )
assertEquals ( doc1, io. getDocument ( q1 ) )
assertEquals ( LocalDate. now ( zone ). getDayOfYear ( ), test. getValue ( ) )
assertEquals ( expected [ i ] [ y ] [ x ] [ i ], ra. get ( ). get ( ), 0 )
assertErrorEventDefinition ( "end", "myErrorCode" )
assertEquals ( expected, service. getAllIds ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "foo", result )
assertTrue ( ic. imageEqualToReference ( screenshotImage, referenceImage, "google1-masked.png", 0 ) )
mini. assertReadFile ( mini. getLocalFs ( ), fileSpec, "part-0000" )
Assert. assertTrue ( billingService instanceof BillingCalculation )
assertEquals ( expected, actual )
assertArgumentParserException ( args )
assertTrue ( true )
assertEquals ( tmap, readValue )
assertOut ( "var a:String = unescape('%25')" )
MatcherAssert. assertThat ( ( TraceeBackend ) FieldAccessUtil. getFieldVal ( interceptor, "backend" ), is ( Tracee. getBackend ( ) ) )
assertTrue ( page. asText ( ). indexOf ( "This is the current text" )!= - 1 )
assertEquals ( 1, groupsToBeProxied. size ( ) )
assertEquals ( layerId, result )
assertEquals ( 1, saved. getUpdatesCount ( ) )
assertPathExists ( "/lockable" )
assertThat ( isTransactionRelated, is ( false ) )
assertFalse ( subject. isShortHand ( ) )
assertTrue ( ( Boolean ) result )
assertThat ( ClockInterval. parseISO ( "2013-07-20T24:00:00" ), is ( interval ) )
assertEquals ( "public void main(String[] args) {}", actualContent )
assertThat ( injector. getInstance ( Key. get ( TestConfiguration. class ) ), is ( expectedConfiguration ) )
assertEquals ( "Hello ^there", ResponseBodyInterpolator. interpolate ( "Hello ^there", req ) )
assertEquals ( "SELECT CURRENT_DATE + CASE WHEN CAST(RAND() * 3 AS INTEGER) = 1 THEN 100 ELSE 0 END DAY AS NEW_DATE FROM mytable", CCJSqlParserUtil. parse ( sql ). toString ( ) )
assertTrue ( xml. matches ( "(?i)<\\\\?xml.*?version=\\"1.0\\".*?\\\\?>.*" ) )
assertSame ( copy. get ( Gender. FEMALE ), value )
result. assertErrorFreeLog ( )
assertThat ( actual, is ( equalTo ( "/ab/CD" ) ) )
Assert. assertFalse ( "Failure expected true", r. getLeft ( ) )
assertThat ( target, is ( notNullValue ( ) ) )
assertEquals ( "master", job. getBranch ( ) )
assertEquals ( 1, result. getTotalHits ( ) )
assertEquals ( "Aaa,Bbb,Ccc", StringUtils. join ( list, "," ) )
assertFailureValue ( "value of", "[[A], [5]]" )
assertEquals ( "endLoc", v. getEndLocation ( ). getId ( ) )
Assert. assertEquals ( "Hello ", I18N. eval ( "'Hello 'world'" ) )
assertEquals ( "[1,2,3]", returnResult. get ( RETURN_RESULT ) )
assertTrue ( val. isPresent ( ) )
assertEquals ( expecteds, actuals )
assertEquals ( "Decorator", decorator. getClass ( ). getSimpleName ( ) )
assertThat ( "Should validate ascii key", StringUtils. validateKey ( "mykey1234", false ), is ( true ) )
assertEquals ( "TEST.", result )
assertLife ( playerB, 17 )
Assert. assertThat ( control, is ( - 7 ) )
assertNotNull ( connection )
assertEquals ( "100000000000000000000.0/3.0", AviatorEvaluator. execute ( "100000000000000000000.0/3.0" ) )
assertEquals ( 0, searchResultsConverter. getNotDoneCount ( ) )
assertEquals ( "library.xqm", mainSource. getFilename ( ) )
assertNull ( request. getVisitorRegion ( ) )
assertTrue ( road. equals ( road2 ) )
assertEquals ( - 1, stats. getIncreasingBlockSize ( ) )
assertEquals ( "unsortable must be unsorted", SortOrder. UNSORTED, table. getSortOrder ( 0 ) )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ). format ( dt ), new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ). format ( dueDate ) )
assertThat ( actual, is ( expected ) )
Assert. assertTrue ( lrsRes. getSuccess ( ) )
Assert. fail ( "Exception should have been thrown" )
assertEquals ( expected, actual )
Assert. assertEquals ( expected, actual )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3]}", result. get ( RETURN_RESULT ) )
assertEquals ( "JOHN + SUPERCLASS", object. getName ( ) )
arrays. assertContainsSequence ( description, actual, sequence )
assertTrue ( result. getBounds ( ). equals ( nonEmpty. getBounds ( ) ) )
assertSame ( expected, result )
assertTrue ( getNoErrorMsg ( ), result )
assertThat ( out. exists ( ), is ( false ) )
assertTrue ( Files. isRegularFile ( destDir, f1. getName ( ) ) && Files. isRegularFile ( destDir, f2. getName ( ) ) )
assertEquals ( Arrays. asList ( "a" ), results )
assertEquals ( 8_000_000, version )
assertEquals ( truth, deserialized )
assertNull ( song. getName ( ) )
assertEquals ( TestClass. class. getName ( ), service. injectedLogger. getName ( ) )
assertFalse ( sut. execute ( request ) )
assertEquals ( property, new Diff ( property, new DiffOptions ( ) ). toString ( ) )
assertEquals ( response. getStateToken ( ), siteAdminShortName )
Assert. assertEquals ( false, retval )
assertEquals ( topicsPage. getContent ( ). size ( ), 0 )
assertEquals ( expectedPolicy, builtPolicy )
assertTrue ( true )
assertEquals ( obj. toString ( ), "LPQueryServiceConfigW{lpServiceType: 1, lpStartType: 2, lpErrorControl: 3, lpBinaryPathName: \\"BinaryPathName1\\", lpLoadOrderGroup: \\"LoadOrderGroup1\\", lpDependencies: [S1, S2], lpDisplayName: \\"DisplayName1\\"}" )
Assert. assertEquals ( ipvo. getIpStatus ( ). getStatus ( ), Status. Inventories. READY )
assertNotNull ( entity. getId ( ) )
Assert. assertNotNull ( field )
assertTrue ( conn. prepareBooleanQuery ( QueryLanguage. SPARQL, "ask {?s xxx:name \\"Alice\\" } " ). evaluate ( ) )
assertFalse ( permissionService. hasPermission ( 0, null, "" ) )
Assert. assertEquals ( "API ID should be recorded", API_ID, spanEvent. getApiId ( ) )
assertEquals ( 2, bs. capacity ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertTrue ( "future selection must be stopped", model. isSelectionEmpty ( ) )
assertFalse ( emptySerializable. asOptional ( ). isPresent ( ) )
assertEquals ( Double. valueOf ( 1.5 ), day. inverse ( ). getValue ( ) )
Assert. assertEquals ( "", json, winphone. toJSON ( ) )
assertTrue ( connection ( ). exists ( RDFS. Resource, RDF. type, ex1, null, false ) )
assertEquals ( numWatchersToStart - 1, consumersListOfActiveWatchers. size ( ) )
Assert. assertEquals ( IsolationLevel. SERIALIZABLE, connection. getIsolationLevel ( ) )
assertEquals ( f. apply ( first, second ), "3" )
assertEquals ( "longitude", variableName )
Assert. assertTrue ( in. isDigestValid ( ) )
files. assertHasDigest ( INFO, actual, algorithm, expected )
assertEquals ( OPERATION, EndpointUtil. decodeEndpointOperation ( result ) )
assertTrue ( validator. isValid ( "123-7992739871-3-456", null ) )
assertEquals ( "Wrong property list", list, conf2. getStringList ( prop ) )
Assert. assertEquals ( "0 0 5 * * *", result )
assertEquals ( functionImportList. size ( ), 0 )
assertEquals ( expected, ZonedDateTime. of ( 0, 0, 0, 0, 0, zoneId ) )
assertThat ( logger1, is ( logger2 ) )
Assert. assertFalse ( s. containsPrivateIdentifiableInformation ( ) )
assertArrayEquals ( "test password", result, authed )
assertEquals ( "geo shape condition serialization is wrong", expected, actual )
assertEquals ( "a b\\n", found )
assertTrue ( new File ( "target/export11" ). exists ( ) )
Assert. assertEquals ( 0, analyser. getTimeWindowViolationAtActivity ( route. getStart ( ), route ), 0.01 )
assertThat ( accessor. isMutable ( ), is ( false ) )
assertThat ( results, is ( new String [ ] { "%Hello, world!\\"}" ) )
assertNotNull ( metadata )
assertThat ( read ( format, written ), contains ( 1.25f ) )
assertEquals ( p1. element0 ( ), m2 )
assertNotNull ( deviceRegistration. getAttestationCert ( ) )
assertEquals ( 82, new AcceptsLambda < Integer > ( ). accept ( ( a, b ) -> x + a + b ). intValue ( ) )
assertEquals ( expected, actual )
assertTrue ( getNoErrorMsg ( ), result )
assertTrue ( rlg. next ( ) == labels [ i ] )
assertEquals ( 1, integer. get ( ) )
assertThat ( cut. getNumberOfFields ( ), is ( 2 ) )
assertEquals ( "case when (cat.toes =?1) then?1 when (cat.toes =?2) then?2 when (cat.toes =?3) then?3 else?4 end", serializer. toString ( ) )
assertEquals ( "Should have same hash code for patternStr passed in.", patternStr. hashCode ( ), pH. hashCode ( ) )
assertEquals ( 0, content. refCnt ( ) )
assertEquals ( asList ( trace ( mdcValues, marker, message, args ) ), testLogger. getLoggingEvents ( ) )
assertEquals ( "The value is not correct.", date, value )
assertEquals ( times, result )
assertTrue ( project. getComponents ( ). isEmpty ( ) )
assertEquals ( "Object has been revoked.", change. getConfirmationMessage ( ) )
Assert. assertEquals ( expectedJsonTree, actualJsonTree )
assertEquals ( "TEXT", sb. toString ( ) )
Assert. assertEquals ( expectedResult, result. getValue ( ) )
AssertEx. assertDoubleEquals ( 10.5, dist, 1e-10 )
Assert. assertEquals ( "bob", properties. bob )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
Assert. assertTrue ( id. length ( ) == length )
assertEquals ( 2, context. getTableCount ( ) )
assertEquals ( "Accumulator was not properly freed", 0, weakMap. size ( ) )
Assert. assertThat ( control, is ( massive ) )
assertTrue ( "Unexpected @Stateless annotation for EJB3.", stateful!= null && stateless. getClass ( ). equals ( stateful. getClass ( ) ) )
assertEquals ( expectedClientConfig, actualClientConfig )
assertEquals ( "null", sb. toString ( ) )
assertEquals ( false, result )
assertEquals ( "fooValue", entity. getValue ( ) )
assertEquals ( 0, result )
assertEquals ( expResult, result )
assertSerializeDeserialize ( ext )
assertEquals ( 0, types. size ( ) )
assertDecimalEquals ( dup. getValue ( 1 ), 1 )
assertTrue ( denormalizer. denormalization ( "studentSectionAssociation" ). insert ( entity ) )
assertFalse ( rpcException. hasErrorCode ( ) )
assertThat ( ClockInterval. parse ( "72024/2400", ChronoFormatter. ofPattern ( "MMMM/dd/yyyy", PatternType. CLDR, Locale. US ), BracketPolicy. SHOW_WHEN_NON_STANDARD, plog ), is ( interval ) )
assertEquals ( "foo", fStep. getValue ( ) )
assertFalse ( pgql. parse ( query ). isQueryValid ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertContains ( e. getMessage ( ), "'id'" )
assertArrayEquals ( new int [ ] { 2, 3 }, event. getValues ( ) )
Assert. assertEquals ( HiveRunnerConfig. TIMEOUT_SECONDS_DEFAULT, config. getTimeoutSeconds ( ) )
assertEquals ( expected, Sets. newHashSet ( chunks ) )
assertTrue ( "checking hasChildChanged returns true for new child", _scs. hasChildChanged ( METRIC_NAME ) )
Assert. assertFalse ( errors. hasErrors ( ) )
assertNull ( request. getParameters ( ). get ( "name3" ) )
assertEquals ( expResult, result )
assertEquals ( name, user. get ( "name" ) )
assertTrue ( ic. imageEqualToReference ( screenshotImage, referenceImage, "google1.png", 0 ) )
Assert. assertEquals ( String. format ( "a %s text", this. html ( bb, "10", "sized" ) ), formatter. format ( "a [size=\\"10]sized[/size] text", defaultOptions ( ) ) )
Assert. assertEquals ( "com.foo.bar.baz/.ActivityName", resolved )
assertTrue ( requestResult )
Assert. assertEquals ( "should be merged with new one", string1 + string2, actual )
assertTrue ( filter. shouldInclude ( source, "some.property" ) )
Assert. assertEquals ( config. getTheClazz ( ), Object. class )
Assert. assertTrue ( "getShardName", reg1. getShardName ( ). equals ( "default" ) )
assertThat ( extractor, is ( sameInstance ( result ) ) )
assertFalse ( row. equals ( otherRow ) )
iterablesWithCaseInsensitiveComparisonStrategy. assertContainsAnyOf ( someInfo ( ), actual, array ( "Luke", "Yoda", "Leia" ) )
assertEquals ( "_cat/allocation?h=shards%2Cdisk.indices%2Cdisk.used", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertThat ( lines, hasSize ( 1 ) )
assertEquals ( 101, keyCount. get ( ) )
assertEquals ( "Result", RDFS. xsdfloat, dt. getDatatypeURI ( ) )
assertEquals ( "%r [%t] %p %notEmpty{%ndc }- %m%n", layout. getConversionPattern ( ) )
assertTrue ( analysis. isTestPassing ( ) )
assertEquals ( "recoveredResult must be Success(42)", recoveredResult, new Try. Success < > ( 42 ) )
Assert. assertEquals ( "��广�广�裤����������������������������������������������������������������������������
assertEquals ( 0, drugs. size ( ) )
assertThat ( result, containsInAnyOrder ( likeTriple ( ANY, uri ( "http://www.example.org/mapping1" ), uri ( EXAMPLE_CLASS ) ), likeTriple ( ANY, uri ( "http://www.example.org/example/2" ) ) ) )
assertTrue ( true )
assertSame ( Code. ERROR, res. code ( ) )
assertLine ( "great lakes brewery\\nSdogfishhead", b, false )
assertNull ( schemaRegistry. getHostnameVerifier ( ) )
assertEquals ( msg, myMessage )
assertEquals ( model, RdfTestHelpers. parseRdf ( RdfTestHelpers. getResourceFromFile ( "Items.rdf" ) ) )
assertNull ( cert )
assertEquals ( expectedMessageString, rawTranslation )
assertSame ( MockChooser1. class, delegate. getClass ( ) )
assertThat ( new JcrValue ( factories, PropertyType. DATE, date ). getDouble ( ), is ( date. getTime ( ) ) )
Assert. assertEquals ( "START TRANSACTION WITH CONSISTENT SNAPSHOT;", text )
assertEquals ( expected, statement. toString ( ) )
assertEquals ( "{\\"ns1:tags\\":{\\"@xmlns\\":{\\"ns1\\":\\"http://tags\\"}," + "\\"@tagName\\":{\\"@xmlns\\":\\"http://tags\\"}," + "\\"@type\\":\\"TagVO2\\",\\"name\\":{\\"@xmlns\\":\\"http://tags\\"},\\"b\\":{\\"@xmlns\\":\\"http://tags\\"},\\"a\\":{\\"@xmlns\\":\\"http://tags\\"},\\"b\\":{\\"@xmlns\\":\\"ns1\\"},\\"b\\":{\\"@xmlns\\":\\"http://tags\\"}}}}", s )
assertEquals ( "Boolean", result )
assertThat ( generated, is ( "P(item{count(P)}" ) )
Assert. assertFalse ( isOk )
assertEquals ( path, "/module/motechmodule/addfacility" )
assertEquals ( "We are testing...", out )
assertThat ( beanClass, typeCompatibleWith ( ApplicationDecorator. class ) )
assertTrue ( true )
assertThat ( lines. size ( ), is ( 1 ) )
assertNotNull ( method )
assertEquals ( expected, encoder. encode ( plainText ) )
assertEquals ( 0.5d, response, 0.0001d )
Assert. assertEquals ( ServerParse. REPLACE, sqlType )
assertEquals ( sparseRep, rep1. toSparseFormat ( 11 ) )
assertEquals ( subThing, newThing )
Assert. assertEquals ( "new-entry-3", ByteBufUtil. hexDump ( res ) )
Assert. assertEquals ( expected, found )
assertEquals ( "content", content. getTitle ( ) )
assertEquals ( "successfulUser1@successfulHost1", this. authenticationHelper. generateSuccessfulAuthenticationMessage ( successfulToken ) )
Assert. assertEquals ( 2, s. getPriority ( ) )
assertEquals ( 0, count ( graph. vertices ( ) ) )
assertEquals ( "7::::", result )
assertNotNull ( result )
assertEquals ( Bytes. asList ( new byte [ ] { 3 } ), bytes ( producer. getValue ( ). next ( ) ) )
assertEquals ( expectatedMessage. trim ( ), e. getMessage ( ). trim ( ) )
assertEquals ( false, context. isResult ( ) )
assertNotNull ( filter )
assertEquals ( "1", getValue ( ) )
assertEquals ( 2., Solutions. bestOf ( solutions ). getCost ( ), 0.01 )
assertEquals ( null, result )
assertTrue ( "Http authentication factory should be created", ops. exists ( TEST_AUTHENTICATION_FACTORY_ADDRESS ) )
assertFalse ( id1. equals ( null ) )
assertEquals ( 6, tokens. size ( ) )
QualityExpectations. newInstance ( ). aggregatedExpectation ( aggregatedExpectations ). copyFrom ( partsExpectations. aggregatedExpectation ( ) ). copyFrom ( aggregatedExpectations. aggregatedExpectation ( ) ). copyFrom ( partsExpectations. aggregatedExpectation ( ) ). copyFrom ( aggregatedExpectations. aggregatedExpectation ( ) ). copyFrom ( aggregatedExpectations. aggregatedExpectation ( ) ). copyFrom ( partsExpectations. aggregatedExpectation ( ) ). copyFrom ( aggregatedExpectations. aggregatedExpectation ( ) ). copyFrom ( aggregatedExpectations ) )
Assert. assertEquals ( obj. getDate ( ). getTime ( ), obj2. getDate ( ). getTime ( ) )
switchyard. assertModelValid ( )
assertThat ( nonSerializableResult, instanceOf ( ExampleInterface. class ) )
assertions. isNull ( )
Assert. assertTrue ( ( byte ) 0 == _c. convert ( "" ) )
assertEquals ( "<table> <colgroup> <col> <colgroup> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\"rowgroup\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr></tbody></table>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
Assert. assertEquals ( "Hello! World", result )
Assert. assertEquals ( json, writer. toString ( ) )
assertEquals ( "Options should be equal to itself", options, options )
assertTrue ( objAssociation. getConsistentEdmAssociationList ( ). size ( ) > 0 )
assertEquals ( "Column after", "column_after", statement. getColumnName ( ) )
assertFailureCatalogContains ( AsyncSuspendWithoutForgetBean. class, "should use complementary annotation.*(suspend)" )
Assert. assertNotNull ( "ThreadName value is missing", jsonObject. get ( "threadName" ) )
Assert. assertEquals ( new URI ( url + "/" + suffix ), UriUtils. buildNewURI ( new URI ( url ), suffix ) )
assertThat ( result. isPresent ( ), is ( false ) )
assertTrue ( check )
Assert. assertTrue ( percolateQueryBuilder. toString ( ). contains ( "tag=cool,percolate=1,field=dude" ) )
assertEquals ( 0, app. executeApplication ( args ) )
assertEquals ( expected, result )
Assert. assertEquals ( "did not get expected permission", FilePermissionEnum. OWN, enumVal )
assertEquals ( "group:artifact:1.0.0:classifier:compile", model. toString ( ) )
Assert. assertTrue ( expectedTextFound )
Assert. assertEquals ( "eins\\nzwei\\ndrei\\ndrei\\nvoenf", result )
Assert. assertEquals ( 2, scenario. check ( ). size ( ) )
Assert. notNull ( wschu )
assertEquals ( "1.0", display. getText ( ). toString ( ) )
assertEquals ( "encoded", encoder. toString ( ), expected )
assertFalse ( validator. validate ( certificateMapping, POST ). passedValidation ( ) )
Assert. assertFalse ( "The filter should not have been initialized", TestFilter. INITIALIZED )
assertEquals ( "138853600000", partition )
assertEquals ( "<csv-set><csv-record number=\\"1\\"><name>name</name><email>email</email><address>@example.com</address><age>32</age></csv-record><csv-record number=\\"2\\"><name>2</name><email>3</email><age>40</age></csv-record></csv-set>", result )
assertEquals ( expectedDateString, actualDateString )
assertEquals ( 3, violations. size ( ) )
assertEquals ( URI. create ( "http://localhost:8080/a/b/c?a=x&b=y#hi" ), u )
assertOut ( "<Button label=\\"Click me\\"></Button>" )
assertEquals ( "Hello", ( ( BizException ) read ). getMessage ( ) )
Assert. assertEquals ( "hello", result. hello ( ) )
assertThat ( entityFromElasticSearch, is ( notNullValue ( ) ) )
assertThat ( actualAlgorithms, IsIterableContainingInAnyOrder. containsInAnyOrder ( expectedAlgorithms ) )
assertNull ( "no project was found", foundProject )
Assert. assertEquals ( bd, value )
Assert. assertEquals ( req. getStatus ( ), Response. Status. OK. getStatusCode ( ) )
assertThat ( cut. apply ( pageObject ), is ( true ) )
assertEquals ( "updatedName", list. get ( 0 ). getName ( ) )
assertTrue ( "yahoocn contacts are empty", contacts. size ( ) > 0 )
assertEquals ( "[1, 2, 3]", JsonbProvider. provider ( ). create ( ). build ( ). toJson ( list ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( field ( object, "output" ), is ( equalTo ( "output" ) ) )
assertEquals ( "Default instance", categories. getName ( ) )
assertEquals ( output, processed )
Assert. assertEquals ( vector, new Vector ( - 10, - 10, - 10 ) )
Assert. assertTrue ( pss. toString ( ). contains ( "123" ) )
assertEquals ( message2, checkMessage )
assertEquals ( - 1L, nodeId. getId ( ) )
assertEquals ( okResponseText, testResponse. getStatus ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 10, result. getTotalCount ( ) )
assertArrayEquals ( data, ( short [ ] ) deserialize. readObject ( ) )
assertFalse ( violation )
assertEquals ( expResult, result )
assertTrue ( Arrays. equals ( array, t. split ( "-" ) ) )
assertEquals ( 3, types. size ( ) )
assertEquals ( uri1, uri2 )
assertThat ( t1. atom ( 1 ), is ( ( Atom ) TH1 ) )
Assert. assertEquals ( expected, pluginForREST. getTypeName ( "test", false, false ) )
assertEquals ( deleteReason, hpi. getDeleteReason ( ) )
assertTrue ( logger. isWarnEnabled ( ) )
assertNotNull ( amqpsConnection )
assertEquals ( "I am a simple text message", "BPR*DATA*NOT*VALID*RANDOM*TEXT^" + "TRN*1*0000000000*1999999999^" + "N1*PR*ALWAYS INSURANCE COMPANY^" + "LX*1^" + "CLP*PCN123456789**5555.55**CCN987654321^" + "CAS*PR*909099*100.00^" + "NM1*QC*1*PATIENT*TREATED*ONE***34*333333333^" + "DTM*273*20020824^" + "AMT*A1*10.10^" + "AMT*A2*40.40^" + "AMT*A1*30.30^" + "AMT*A2*40.40^" + "SE*24*000000001^" + "GE*1*000000001^" + "GE*1*000000001^" + "IEA*1*000000001^" )
assertNull ( filter. filter ( desc ) )
assertSame ( testSubject, moved )
Assert. assertFalse ( consumeInfoList. isEmpty ( ) )
assertEquals ( "name", name )
assertNotNull ( logStream1 )
assertEquals ( 1, set2. size ( ) )
assertFalse ( syncOpt. isDbVersionPresent ( ) )
assertEquals ( "Helles酶y", Files. readAllLines ( tmp, Charset. forName ( "UTF-8" ) ). get ( 0 ) )
assertEquals ( resource, cache. getResourceEditorActivities ( "1" ). get ( 0 ). getName ( ) )
Assert. assertEquals ( "Hello World!", myBean. getString ( ) )
assertEquals ( expectedResult, result, 0.00001 )
assertNotEquals ( "ComboBox width should not have changed after button click", oldStyle, newStyle )
assertEquals ( HELLO_URI + "processor/Hello/", uri. toASCIIString ( ) )
assertEquals ( 100, session. getMaxInactiveInterval ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertArrayEquals ( new String [ ] { "input", "output" }, remaining )
Assert. assertTrue ( edOrgContextRights. isEmpty ( ) )
Assert. assertTrue ( "Number of entities: " + count, count == 2 )
assertEquals ( Credentials. Status. VALID, credentials. getStatus ( ) )
bytes. assertLessThan ( description, actual, expected )
assertEquals ( testPlaylist, playlist )
Assert. assertEquals ( expr, "Hello \\nDimitri", value )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
assertThat ( person, is ( nullValue ( ) ) )
assertEquals ( "John Doe", actual )
Assert. assertEquals ( "multipart/form-data", actualValue )
assertTrue ( vs. getSpaceId ( ) > 0 )
assertEquals ( "bar", indexSpec. getName ( ) )
assertNotEquals ( reindex1, reindex2 )
assertEquals ( "Concrete Action", value. asIs ( ) )
Assert. assertTrue ( "The re-generated and the read record do not match.", k1. equals ( k2 ) && v1. equals ( v2 ) )
assertNotNull ( scrollUI )
assertEquals ( s, r )
assertEquals ( "1.407", version )
assertEquals ( file, VirtualDirTgz. getFilenameFromPath ( file ) )
assertEvidence ( evidence, 1, 1, 0, 0, MIN_BASE_QUALITY, 1 )
assertEquals ( "A B", f. toString ( ) )
assertThat ( text, allOf ( containsString ( "Attacker" ), containsString ( "action" ), containsString ( "III" ), containsString ( "aim" ), containsString ( "锌芯谢��邪械�" ), containsString ( "锌懈蟹写�" ) ) )
assertThat ( validator, is ( notNullValue ( ) ) )
assertThat ( arguments. resolve ( null, null ), contains ( "foo", "bar" ) )
assertTrue ( Misc. containsNulls ( collection ) )
assertEquals ( Arrays. asList ( "1970-01-01", "1970-01-02", "1970-01-02", "1970-01-02" ), getOutputStrings ( ) )
assertTrue ( method. getReturnType ( ) == Priority. class )
assertions. containsOnly ( values )
rule. assertScenarioEnded ( )
assertEquals ( Integer. valueOf ( 5 ), reference. getRetries ( ) )
assertEquals ( dummyPath, dao. getPath ( ) )
assertThat ( content, is ( equalTo ( numberOfElements ) ) )
assertThat ( getValues ( query ( "bla", "mntner" ), "key" ), contains ( "bla-bla-mnt" ) )
assertTrue ( closed. await ( 2, SECONDS ) )
Assert. assertNotNull ( req )
assertEquals ( expectedTimestamp, actualTimestamp )
assertTrue ( s. toString ( ). contains ( "patient-info: Name, Identifier, age, Indication for referral, Patient information" ) )
assertEquals ( 400, response. statusCode ( ) )
Assert. assertEquals ( i, this. sqlgGraph. traversal ( ). V ( ). hasLabel ( "A" ). count ( ). next ( ), 0 )
assertEquals ( "hello", proxy. echoBack ( "hello" ) )
assertEquals ( i1, i2 )
assertArrayEquals ( new Object [ ] { 1, 2, 3 }, e. toList ( ). toArray ( ) )
assertEquals ( documentoVO, infoDocumentoCSV )
assertEquals ( 0, report. getItems ( ). size ( ) )
assertTrue ( constraint. fulfilled ( iContext ) )
assertCoordinates ( 9, TOP_Y - 1 )
Assert. assertEquals ( "Node{edge=FOO, value=null, edges=[]}", node. toString ( ) )
org. junit. Assert. assertEquals ( expected, actual )
assertEquals ( 1, listener. getReceivedCount ( ) )
assertThat ( xmlResult, CompareMatcher. isSimilarTo ( out. toString ( ) ). ignoreWhitespace ( ). withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors. byNameAndText ) ) )
assertTrue ( children. isEmpty ( ) )
assertions. isLessThan ( new Float ( 10f ) )
assertTrue ( vosManagerEntry. getDirectAdmins ( sess, createdVo ). contains ( user ) )
Assert. assertArrayEquals ( bytes, result )
Assert. assertFalse ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isErrorEnabled ( ) )
assertEquals ( UNESCAPED_USER_VALUE, substituter. substitute ( Substitutions. Type. USER_PREF, USER_NAME ) )
assertMockEndpointsSatisfied ( )
assertEquals ( D, fit. getDiffusionCoefficient ( ), 0.01 )
assertNull ( loadedFile )
assertEquals ( expectedDate, formatDate ( "yyyy-MM-dd HH:mm", result ) )
assertEquals ( Arrays. asList ( "A", "B", "C", "D" ), list )
Assert. assertEquals ( "_ANYFIELD_ == 'email' && ANOTHER_FIELD == 'blah' && filter:includeRegex(FIELDA, '.all_.*')", JexlStringBuildingVisitor. buildQuery ( result ) )
assertEquals ( result, "2007-12-03" )
assertSame ( injectable, injectionTarget. injectable )
assertMockEndpointsSatisfied ( )
assertNull ( loggedInUser )
assertEquals ( asList ( foo4 ), results )
assertTrue ( v1. equals ( v2 ) )
assertEquals ( 4, result. get ( ). getList ( ). size ( ) )
assertNotNull ( dialectConverterForEveryoneElse. get ( "brat" ) )
assertThat ( type, is ( String. class ) )
assertTrue ( validator. validate ( certificateMapping, POST ). passedValidation ( ) )
assertThat ( bar, is ( 2 ) )
assertThat ( hasJsonPath. matchesSafely ( json ), is ( false ) )
assertEquals ( CompressionType. Zip, compressionType )
assertModelEqualsFile ( EXAMPLE_DMN )
assertEquals ( "[10:123:1:54]", StringUtils. formatLocalSocket ( socket ) )
Assert. assertNotSame ( registry1, registry2 )
assertTrue ( inactiveQuestion. isCurrentTouched ( ) )
Assert. assertNotNull ( counterManager )
assertThat ( registry. register ( "org/junit/plugin/TestPlugin", new TestPlugin ( "org/junit/plugin/TestPlugin2", "org/junit/plugin/TestPlugin3" ) ), is ( Arrays. asList ( firstPlugin, secondPlugin ) ) )
assertTrue ( valid )
assertEquals ( expResult, result )
assertEquals ( desc, request. getTableSchema ( ) )
assertEquals ( "name", name )
assertEquals ( "", result )
Assert. assertNotNull ( rb )
assertEquals ( opponent. getMinions ( ). size ( ), 0 )
assertThat ( changes, contains ( ontologyChange ) )
assertEquals ( expected, dotfileWriter. formatPCollectionDeclaration ( inputCollection, jobPrototype ) )
assertAxisEquals ( 0.9, 1.3, new double [ ] { 0.0, 0.1, 0.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9 }, new String [ ] { "0.0", "0.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9" }, axis )
assertEquals ( "Bean1", runtimeService. getVariable ( pi. getId ( ), "bean1" ) )
assertEquals ( "2f4c8a2d47c47c8a2d9e0e4f9c8a0e4f9c8a", new String ( Hex. encodeHex ( message ) ) )
assertEquals ( 19, maximum )
assertArrayEquals ( myMessage. getTrailer ( ). getFieldOrder ( ), Arrays. asList ( Trailer. FIELD, SignatureLength. FIELD, CheckSum. FIELD ) )
assertEquals ( resource, response )
assertThat ( getProcessingError ( ), equalTo ( HTTP_NOT_FOUND ) )
assertEquals ( "Weka instances not empty", 0, events. size ( ) )
assertResultSet ( res )
assertThat ( result, is ( principalCollection ) )
Assert. assertEquals ( operator. getJobExecution ( id ). getState ( ), JobStatus. ABANDONED )
assertFalse ( actualNativeClient. hasProxy ( ) )
assertEquals ( 5, songs. getContent ( ). size ( ) )
assertions. containsSequence ( 16, 16, 18 )
assertEquals ( expected, actual )
assertThat ( actual, is ( expected ) )
Assert. assertEquals ( "Hello World", lt. sayHello ( "World" ) )
assertEquals ( expResult, result )
assertEquals ( "The world loves and not a sore loser.", this. realiser. realise ( completeSen ). getRealisation ( ) )
assertEquals ( MediaType. APPLICATION_XML_TYPE, response. getType ( ) )
Assert. assertEquals ( icms10, icms. getIcms10 ( ) )
assertThat ( unlocked. newLockedObjectWithPrivateConstructor ( ). getMyField ( ), equalTo ( "privateField" ) )
assertEquals ( 99, result )
assertThat ( context, body, contains ( "hello", "world" ) )
assertEquals ( 1, i )
assertEquals ( expResult, result )
assertFalse ( "Two violations with different begin column should result in not equal nodes", node1. equalsNode ( node2 ) )
assertArrayEquals ( expected, encoder. getEncoded ( ) )
assertEquals ( "/genPath", path )
assertFalse ( job1. addDependingJob ( new ControlledJob ( conf ) ) )
assertThat ( results, containsInAnyOrder ( "Hello, world!" ) )
assertThat ( options. isHelp ( ), is ( true ) )
assertTrue ( notifier. getNotifications ( alert ). size ( ) == count )
assertEquals ( "this is my rule name", result )
assertThat ( story. getTimeout ( ), is ( equalTo ( - 1L ) ) )
assertThat ( hasJsonValue. matchesSafely ( json ), is ( false ) )
assertTrue ( drl. indexOf ( "Empty FreeFormLine" ) > 0 )
assertFalse ( result )
Assert. assertEquals ( 13L, value )
Assert. assertEquals ( "Vra�ar", browser. findElement ( By. xpath ( "//h1" ) ). getText ( ) )
assertEquals ( KnightScorer. targetScores [ 2 ], scorer. scorePosition ( board, context ) )
service. callCounter. assertCalls ( "{findIds=1, getItems=1}" )
assertEquals ( args, ImmutableList. of ( "-y", "-v", "error", "-i", "input", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-v", "2", "-an", "-v", "2", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "-an", "2", "-an", "3", "-an", "3", "-an", "4", "5", "-an", "5", "-an", "5", "-an", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17",
assertThat ( Duration. between ( d1, d2 ), is ( Duration. ofPositive ( ). months ( 1 ). days ( 2 ). build ( ) ) )
assertQuery ( false, "deep-equal(/test/*[1], /test/*[2])" )
Assert. assertTrue ( Math. abs ( valueMonteCarlo - valueAnalytic ) < 1E-02 )
assertEquals ( Collections. emptyList ( ), list )
assertEquals ( doc. getLastPublicationDate ( ), parseDateTime ( "/fixtures/language.json" ) )
assertThat ( ct. getStdMonths ( TextWidth. WIDE, OutputContext. FORMAT ). print ( Month. JANUARY ), is ( "1" ) )
Assert. assertEquals ( expected, actual )
Assert. assertArrayEquals ( new byte [ ] { 1, 2, 3, 4 }, argb. get ( ). get ( ) )
assertEquals ( "b", r. get ( "name" ) )
assertEquals ( originalByteStrings, sortedByteStrings )
assertTrue ( CsrfProtectionRefererFilter. isAllowedUri ( uris, uuid ) )
assertThat ( translatedStatement, is ( expectedTranslatedStatement ) )
assertThat ( provider. getSubject ( axiom ), is ( iriOptional ) )
assertResultSet ( res )
assertThat ( resourcePermission. toString ( ), is ( systemPermissionName ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 09" ) )
assertEquals ( result1, result2 )
Assert. assertEquals ( "[1, 2, 3, 4, 6, 7, 5]", result. toString ( ) )
assertNotNull ( transaction )
Assert. assertEquals ( expectedNormalized, actualNormalized )
assertTrue ( pojo. testService. interrupted. get ( ) )
assertFalse ( g1. equals ( g2 ) )
Assert. assertEquals ( 3, books. size ( ) )
Assert. assertEquals ( "should not have found tags", 0, irodsTagValues. size ( ) )
Assert. fail ( "Expected a handler exception due to incompatible policy" )
objects. assertIsEqualToComparingFieldByFieldRecursively ( someInfo ( ), actual, other, noFieldComparators ( ), defaultTypeComparators ( ), "home.address.number" )
assertThat ( lines. size ( ), is ( tuples. size ( ) + 4 ) )
Assert. assertTrue ( exists )
assertFalse ( "Handler was run", ran. get ( ) )
assertThat ( uut. getColaInjected ( ), is ( true ) )
assertFalse ( zero. exec ( input ) )
assertTrue ( theSelectedPoolsWere ( allPoolsNotOnSameReplicaAsOriginalPool ( ) ) )
assertCapturedMessage ( eventMessage ( "sess1", "/topic", "eventMessage" ), eventMessage ( "sess2", "/topic", "eventMessage" ) )
assertThat ( longProperty, is ( equalTo ( 42L ) ) )
Assert. assertEquals ( ServerParse. SELECT, sqlType )
assertFalse ( "Workflow should not be in add mode when selected", actual )
assertTrue ( b. isTrue ( ) )
assertThat ( a. overlaps ( b ), is ( false ) )
Assert. assertNull ( dataModelLoadBalancer. getSessionPersistence ( ) )
Assert. assertEquals ( "{\\"ds.test.fromHome\\":\\"withLove\\",\\"deltaspike_ordinal\\":123}", IOUtils. toString ( getClass ( ). getResourceAsStream ( dsHomeConfig. getAbsolutePath ( ) ) ) )
Assert. assertNotNull ( "Wallets list is null", wallets )
assertNull ( client. getJob ( id ) )
assertEquals ( "Print Character not evaluated correctly", "65", result. toString ( ) )
assertThat ( shrinks, contains ( newArrayList ( 1, 2, 3 ), newArrayList ( 4, 5 ) ) )
assertThat ( tokens. matches ( BasicTokenizer. WORD, BasicTokenizer. WORD ), is ( true ) )
assertEquals ( TEST_STRING, actual )
assertFalse ( b )
assertEquals ( "A", foInline. getNodeName ( ) )
assertThat ( domainCreatePermissions_post, is ( domainCreatePermissions_pre ) )
Assert. assertTrue ( Precision. equals ( 5.0, MathArrays. distance ( p1, p2 ), 1 ) )
assertEquals ( e. getFreeVars ( ), "b" )
assertEquals ( HttpStatusCodes. TEMPORARY_REDIRECT. getStatusCode ( ), response. getStatusLine ( ). getStatusCode ( ) )
Assert. assertEquals ( "Old table name is the same", newTableName, TestConstants. TABLE_NAME )
VertxAssert. assertEquals ( "The retrieval of the specified document header resulted in an error: " + response. getString ( "message" ), "ok", response. getString ( "status" ) )
Assert. assertNotNull ( cumulates )
assertEqualTokenFeatureLengths ( "ahgsfdajhgsfd�������涓�����������������������涓������������������������������������������������
assertEquals ( "find by created date not returning any events", 1, eventRepos. findByCreatedBetween ( now - 86400000, now + 86400000 ). size ( ) )
assertEquals ( e. getFreeVars ( ), "y" )
TestCase. assertEquals ( 1, attribute. match ( t ) )
assertEquals ( 200, response. getStatusCode ( ) )
assertOut ( "/**\\n * @export\\n * @type {*}\\n */\\nRoyaleTest_A.prototype.a = undefined" )
assertEquals ( 255, fixture. readUI32 ( ) )
assertEquals ( d, Duration. ZERO )
assertTrue ( BufferedImageComparer. isRGBSimilar ( sourceImage, img ) )
assertArrayEquals ( "a\\r\\n.\\r\\n". getBytes ( "US-ASCII" ), out. toByteArray ( ) )
Assert. assertEquals ( - 1, i )
assertEquals ( "c\\n", found )
assertThat ( a, equalTo ( a1 ) )
assertFalse ( endpoints. isEmpty ( ) )
assertEquals ( new BigDecimal ( 12345 ), result )
assertTrue ( allOf. matches ( "Yoda" ) )
assertEquals ( seconds, testResult )
assertThat ( resourcePermissions. isEmpty ( ), is ( true ) )
assertEquals ( "Expected 1 result!", 1, n )
assertEquals ( expected, seq. getSpans ( ) )
Assert. assertEquals ( "Ioc �� Car ��", car. getName ( ) )
assertSame ( toBeThrown, ex. getCause ( ) )
assertEquals ( "Bob123", query ( ). from ( employee ). where ( employee. firstname. eq ( name ) ). set ( name, "Bob123" ). select ( employee. firstname ). fetchFirst ( ) )
assertEquals ( Path. builder ( ). path ( path ). build ( ), path. getQuery ( ) )
assertTrue ( applications. size ( ) > 0 )
assertNull ( query. getResultSet ( ) )
response. then ( ). assertThat ( )
Assert. assertEquals ( false, retval )
assertTrue ( "objectClass should still be in the registry after move failure", getObjectClassRegistry ( ). contains ( OID ) )
test. assertResponse ( )
assertNotNull ( configuration )
assertTrue ( "Expected WebSocket close to fire within session lifetime", timePassed < k3po. getDelay ( ) )
assertEquals ( "public enum Company {; private Company(String name){\\n  this.name=name;\\n  this.count=count;\\n}\\n}\\n", cu. toString ( ) )
assertEquals ( in. readObject ( ). getClass ( ), Bean. class )
assertThat ( dbPath, equalTo ( Paths. get ( root. resolve ( "db/test/dummy" ), "/db/test/dummy" ). toString ( ) ) )
Assert. assertTrue ( cmd. apply ( bkFlags, new String [ ] { "-bs", "127.0.0.1:8000", "-f", "-l", "1" } ) )
assertNotNull ( projects )
assertEquals ( "p.setSomething($param);", builder. build ( ) )
assertThat ( "A Session with an HTTPSession from the Request should have been created because create parameter " + "was set to false", request. session ( false ), is ( httpSession ) )
assertEquals ( 1, rm. getResultsList ( ). size ( ) )
assertEquals ( "void f(void* target, void* ret) {\\n" + "    return ((void (*)(void)) target)();\\n" + "}\\n", BridgeMethodCompiler. createBridgeCWrapper ( functionType. getReturnType ( ), functionType. getParameterTypes ( ), functionType. getParameterTypes ( ), "f" ) )
assertThat ( userPermissions, hasItem ( permission. toString ( ) ) )
Assert. assertTrue ( bnet. getConditionalDistributionTimeT ( var ). equalDist ( dynamicNB. getConditionalDistributionTimeT ( var ), 0.5 ) )
assertEquals ( "www.leveluplunch.com/java/examples/?test=a&test=b", uri. toString ( ) )
assertTrue ( services. size ( ) > 0 )
Assert. assertEquals ( getElement ( "OBR.7", "XPN.1" ), handler. getFillerOrderNumber ( ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( optimizedQuery, query2 ) )
assertEquals ( false, result )
assertFalse ( validator. validate ( EntityNames. STUDENT_COHORT_ASSOCIATION, cohortIds ). equals ( cohortIds ) )
Assert. assertNotNull ( result )
assertFalse ( e1. equals ( e2 ) )
assertEquals ( Arrays. asList ( "foobar" ), scan. getRecord ( ). getFields ( ) )
assertThat ( sampleEntities. size ( ), is ( equalTo ( 30 ) ) )
assertEquals ( ( long ) 8, result. getLongValue ( ) )
assertMockEndpointsSatisfied ( 1, TimeUnit. MINUTES )
assertEquals ( 4, i )
assertNull ( lookup )
assertEquals ( 0, rule. match ( langTool. getAnalyzedSentence ( "empty string" ) ). length )
assertNotNull ( connector )
assertEquals ( "<csv-set><csv-record number=\\"1\\"><firstname>Tom</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>4</age><country>Ireland</country></csv-record><csv-record number=\\"2\\"><firstname>Mike</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>2</age><country>Ireland</country></csv-record></csv-set>", result. getResult ( ) )
assertEquals ( errorMsg, dataXException. getMessage ( ) )
assertNotNull ( Channel. fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertTrue ( "Got children", node. getChildren ( ). isEmpty ( ) )
Assert. assertArrayEquals ( ENCODED_VALUE, byteOutputStream. toByteArray ( ) )
assertResultSet ( res )
Assert. assertEquals ( 0, activityListAdapter. getHeaderPositionForItem ( 0 ) )
assertFalse ( "This test has failed.", failed )
assertSame ( li, interceptor )
assertEquals ( 204, delete. getStatus ( ) )
assertTrue ( arr. length == 10 )
assertTrue ( validator. validate ( "student", ids ). containsAll ( ids ) )
assertEquals ( 1, SnowcastSequenceUtils. compareTimestamp ( sequence1, sequence2 ) )
Assert. assertEquals ( "with", queryName. getImage ( ) )
assertEquals ( expected, uri )
assertEquals ( cfProvider. getConfiguredProperties ( ), ImmutableMap. of ( "connectionNameList", MULTIPLE_IBM_MQ_BROKERS ) )
assertions. isNotLessThan ( new Double ( 2d ) )
assertThat ( drbdXml. getPossibleChoices ( option ), is ( new Value [ ] { new StringValue ( ), new StringValue ( "/usr/lib/drbd/crm-become-primary-on.sh" ) } ) )
assertFalse ( n. exists ( ) )
assertNull ( next )
assertThat ( inSignature, is ( true ) )
Assert. assertArrayEquals ( bytes, result )
assertEquals ( expectedResults, actualResults )
assertNotNull ( result )
assertTrue ( collection. containsAll ( input ) )
assertEquals ( "test", refNodeId )
assertNotNull ( EntityProvider. readServiceDocument ( in, "application/atom+xml" ) )
assertEquals ( "this is the book title", source. getDocumentText ( ) )
assertOutWithMetadata ( "/**\\n" + " * foo.bar.baz.A\\n" + " *\\n" + " * @fileoverview\\n" + " *\\n" + " * @suppress {checkTypes|accessControls}\\n" + " */\\n" + "\\n" + "\\n" + "goog.provide('foo.bar.baz.A');\\n" + "\\n" + "\\n" + "/**\\n" + " * @constructor\\n" + " */\\n" + "foo.bar.baz.A = function() {\\n" + "};\\n" + "\\n" + "/**\\n" + " * Prevent renaming of class. Needed for reflection.\\n" + " */\\n" + "goog.exportSymbol('foo.bar.baz.A', foo.bar.baz.A);\\n" + "\\n" + "\\n" + "/**\\n" + " * @export\\n" + " * @type {Object.<string, Array.<Object>>}\\n" + " */\\n" + "foo
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.A.prototype.foo1 = function() {\\n  return null;\\n};\\n\\n\\n/**\\n * @return {Object}\\n */\\norg.apache.royale.A.prototype.foo1a = function() {\\n  return null;\\n};\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.A.prototype.foo1b = function() {\\n  return org.apache.royale.A.base(this, 'foo1b');\\n};\\n\\n/**\\n * @export
assertEquals ( expected, exts )
assertThat ( restored, is ( p ) )
assertNull ( result )
assertEquals ( currSize, fct. getSize ( ) )
Assert. assertEquals ( source, dist )
assertFalse ( id. equals ( oldid ) )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
assertTrue ( StringUtils. isNotBlank ( content ) )
assertThat ( subjectOf ( axiom ), isOptionalOf ( individual ) )
BaseTest. assertEqualsUnordered ( "find(po)", quads1, quads2 )
assertThat ( list. get ( 1 ), is ( 1 ) )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
Assert. assertEquals ( 100., time, 0.01 )
assertRequestWithCookie ( endpoint, HttpMethod. GET, name, value )
assertEquals ( "testTagOwner 0", 1, tagInode. stat ( ). getUid ( ) )
assertEquals ( 307, cr. getStatus ( ) )
assertThat ( PlainTimestamp. of ( date, time ). getCalendarDate ( ), is ( date ) )
assertEquals ( 0, loaded. size ( ) )
assertNotNull ( facility )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertNotNull ( plasmapheresis. getId ( ) )
assertTrue ( page. getBody ( ). asText ( ). indexOf ( "Inserting children" )!= - 1 )
Assert. assertTrue ( "incorrect number of variants were removed", bn. getVariants ( ). size ( ) == 1 )
assertFalse ( validator. validate ( EntityNames. TEACHER_SCHOOL_ASSOCIATION, teacherSchoolAssociations ). equals ( teacherSchoolAssociations ) )
Assert. assertEquals ( 0, points. size ( ) )
assertEquals ( "", result )
org. junit. Assertions. assertThat ( indexCreationDate )
assertEquals ( "http://example.com/fallback", uri. getFallbackUrl ( ) )
assertTrue ( list. isEmpty ( ) )
assertEquals ( "be-greeting-the-seats-troublesome-seats-troublesome-seats-troublesome-seats-troublesome-seats-troublesome-seats-troublesome-seats", slug )
assertThat ( archetypeElementVO, equalTo ( ArchetypeElementVO. builder ( ). description ( "elementIdTest2" ). type ( "DV_TEXT" ). idArchetype ( TEST_ARCHETYPE_ID ). path ( "/archetypeElementPath2" ). build ( ) ) )
assertEquals ( registerBrokerBody. getTopicConfigSerializeWrapper ( ). getTopicConfigTable ( ). size ( ), decodeRegisterBrokerBody. getTopicConfigSerializeWrapper ( ). getTopicConfigTable ( ). size ( ) )
assertEquals ( expectedResItem. close ( ), ODataChangesetResponseItem. EXPECTED )
assertThat ( command. accept ( state ), is ( true ) )
assertEquals ( 1, taskService. deleteOldFormsProtectionIds ( "scheduledTask" ). size ( ) )
Assert. assertEquals ( factory. getRuleParsers ( ). get ( 0 ), testParser )
assertEquals ( "2015-09-08T00:00:00.000Z", esTimestampFormatted )
assertTrue ( s. contains ( "<parameter>1234</parameter>" ) )
assertTrue ( client. stop ( ) )
assertEquals ( expectedActivityCosts + expectedTransportCosts, iCosts, 0.01 )
assertEquals ( TEST_IOS_APP_METADATA, iosApp. getMetadata ( ) )
assertNull ( entityId )
assertEquals ( ChannelzProtoUtil. extractChannelData ( stats ), protoStats )
assertNull ( entity )
assertEquals ( false, CatalogTreeUtils. isCatalogReferenceNode ( noDapNode ) )
assertEquals ( "1.234", doublePrecisionFloat. toString ( ) )
assertNotNull ( Conversation. fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( Arrays. asList ( 1, 2, 3 ), query ( ). from ( cat ). select ( num ). fetch ( ) )
assertEquals ( 1, fixture. mark ( ) )
assertEquals ( NOT_DECODED, PASSWORD, object. getPassword ( ) )
assertNotNull ( model )
assertEquals ( "test", article. getEditSummary ( ) )
assertEquals ( testReply, replyCapture. getValue ( ). getPayload ( ) )
assertEquals ( expected, result )
assertEquals ( 41, p. getAge ( ) )
assertEquals ( "[null,{\\"a\\":999999999999,\\"b\\":123,\\"c\\":-4444444444,\\"d\\":-123}]", new String ( baos. toByteArray ( ) ) )
assertEquals ( true, result )
assertEquals ( expected, response. getValue ( ) )
assertEquals ( expectedBounds, actualBounds )
assertThat ( serverMock. getRequestHeaders ( ). get ( "X-DeleteService" ), nullValue ( ) )
assertSame ( tileSize, renderingHints. get ( GPF. KEY_TILE_SIZE ) )
assertEquals ( LATIN1_STRING, response. getResponseAsString ( Charset. forName ( "utf-8" ) ) )
assertEquals ( 0.011, gst. getLongitudeError ( ), 0.001 )
assertNotEquals ( "Scroll position should be the same after click", item40Location, item40Location2 )
assertEquals ( "[{\\"a\\":123.123,\\"b\\":true,\\"c\\":3312,\\"d\\":\\"Mystring\\"}]", new String ( baos. toByteArray ( ) ) )
Assert. assertEquals ( 10000, getRowCount ( ) )
Assert. assertTrue ( thriftTransportConfig. isTcpCommandAcceptorEnabled ( ) )
assertThat ( value, is ( valueOfDesc2 ) )
assertEquals ( data, data2 )
Assert. assertEquals ( false, b )
Assert. assertNotNull ( asientoRecibido )
assertEquals ( "Hello " + name, greeter. getMessage ( ) )
assertTrue ( resultComparator. compare ( fd1, fd2 ) > 0 )
assertEquals ( 82, new AcceptsLambda < Integer > ( ). accept ( l ). intValue ( ) )
arrays. assertContainsOnly ( description, actual, emptyArray ( ) )
assertArrayEquals ( this. description, ByteArray. readAllBytes ( output ) )
assertEquals ( "OK", r )
assertOut ( "var a:Boolean = new Boolean(1)" )
assertEquals ( request. getUri ( baseURI ), expectedURI )
Assert. assertTrue ( "exception should be thrown ", false )
assertEquals ( period, start. until ( end ) )
Assert. assertEquals ( 1, postList. size ( ) )
assertJsonEquals ( ImmutableMap. of ( ), message )
assertNull ( expression. evaluate ( record ) )
assertEquals ( m1, m2 )
assertEquals ( result. size ( ), 2 )
assertEquals ( false, result )
assertEquals ( 0, table. getHeight ( ) )
assertSame ( element. getChildren ( ), element. getChildren ( ) )
assertTrue ( log. isDebug ( ) )
editor. assertProblems ( "my-repo|Unused", "other-repo|Unused" )
assertFalse ( tokenizer. hasHeader ( ) )
assertFalse ( ucd. getChild ( 0 ) instanceof ASTImplementsList )
assertNotNull ( classUnderTest. getPluginStatuses ( ) )
assertEquals ( org [ i ], Revert. invert ( rep [ i ] ) )
Assert. assertEquals ( 0, result. length ( ) )
assertEquals ( "Hello World!", child. result ( ). get ( ) )
assertEquals ( "/com.zeroturnaround/jrebel.commons/target/classes", actualObj )
assertThat ( target. parse ( ), is ( false ) )
assertTrue ( json. contains ( query ) )
assertFalse ( filter. isSimplePnfsMatch ( ) )
Assert. assertEquals ( EventType. UNSUSPEND, eventType )
assertNotNull ( createdBreaker )
runner. assertNotValid ( )
assertSame ( newUrl, url )
assertEquals ( value, anotherValue )
assertTrue ( endpointRef. toString ( ). equals ( expectedRef. toString ( ) ) )
assertEquals ( dbName, nameService. getSPARQLName ( dbName ) )
Assert. assertNotNull ( trazas )
Assert. assertEquals ( binomial, jacobi. value ( v, w, i ), 1e-5 )
assertTrue ( "at recovery loop " + recoveryLoop + " failed with puts and removes", putCounter > removeCounter )
assertThat ( DatastoreUtil. getOrNull ( ds, null, lock. getKey ( ) ), is ( nullValue ( ) ) )
assertEquals ( "document-metadata-id", doc. getId ( ) )
assertTrue (! result )
assertEquals ( 10.81, fontSize, 0.1 )
Assert. assertEquals ( "A:1,B:2,C:1", networks )
assertEquals ( "Wrong result", defaultValue, config. getInt ( Integer. class, KEY_PREFIX, defaultValue ) )
assertOut ( expected )
assertEquals ( "foo", keyID. getValue ( ) )
assertTrue ( rc. request ( ). host ( ). equals ( host ) )
Assert. fail ( "Should have thrown an exception" )
assertEquals ( 1, ml. length )
assertThat ( subject. getMessages ( ), hasSize ( 1 ) )
assertEquals ( 1, fooDao. queryForAll ( ). size ( ) )
Assert. assertEquals ( Constants. GENERIC_SERIALIZATION_BEAN, url. getParameter ( Constants. GENERIC_KEY ) )
assertTrue ( result. isEmpty ( ) )
Assert. assertNull ( actual )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff31_" ) )
assertEquals ( 0, latch. getCount ( ) )
assertThat ( json, is ( "{" + NEWLINE + "  \\"foo\\" : \\"bar\\"}" ) )
Assert. assertEquals ( "fakeStream:12345", myTask. getMessageId ( envelope ) )
Assert. assertNotNull ( addressResultsDto )
Assert. assertEquals ( RD, rd. getRD ( ), 0.0 )
assertTrue ( site. login ( "email@example.com", "password", http ) )
assertThat ( givenProgram. getChildPrograms ( ), contains ( stringProgram ( "0123" ), stringProgram ( "X" ) ) )
assertThat ( provider. getValue ( context ), is ( "I'm a string." ) )
Assert. assertEquals ( 2, response. getTotalHits ( ). value )
assertTrue ( page. asXml ( ). contains ( "com.sun.faces.config.WebConfigurationResolver" ) )
Assert. assertEquals ( 7, result. length )
assertFieldValues ( new String [ ] { "id", "title" }, showView. getFieldValuesExcludingId ( ) )
maps. assertHasEntrySatisfying ( info, actual, key, Matchers. containsString ( key ) )
assertNotNull ( Insurance. fetcher ( "BXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( expected, query. export ( ) )
assertEquals ( "POST /controllink HTTP/1.1\\r\\n" + "Host: fake\\r\\n" + "Content-Type: text/xml\\r\\n" + "SOAPAction: service:type#AddPortMapping\\r\\n" + "Connection: Close\\r\\n" + "Cache-Control: no-cache\\r\\n" + "Pragma: no-cache\\r\\n" + "Content-Length: 384\\r\\n" + "\\r\\n" + "<?xml version=\\"1.0\\"?>" + "<soap:Envelope xmlns:soap=\\"http://schemas.xmlsoap.org/soap/envelope/\\" soap:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">" + "<soap:Body>" + "<u:AddPortMapping xmlns:u=\\"service:type\\">" + "<NewRemoteAddress>102:304:57:90a:b0c:d0e:f10</NewRemoteAddress>" + "<NewExternalPort>12345</NewExternalPort>" + "<NewLeaseTime>0</NewLeaseTime>" + "<New
assertTrue ( query. toString ( ). contains ( "FROM [\\"foo\\"]" ) )
assertEquals ( Time. valueOf ( "00:00:00" ), time )
assertTrue ( resultMessage ( result, POST ), result. passedValidation ( ) )
assertThat ( userObject. getPassword ( ), is ( equalTo ( password ) ) )
Assert. assertEquals ( msg, handler. getRcv ( ). toString ( ) )
assertOut ( "var /** @type {string} */ a = String(100)" )
assertEquals ( "WKT", ( dump ( ( Node ) r. get ( "node" ) ) ). getProperty ( "layer" ) )
assertEquals ( "dois decilh玫es de inteiros", actual )
assertThat ( combined, returnsSameItems ( expectedNodes ) )
Assert. assertEquals ( 0, conf. getMaxTotalFs ( ) )
assertContains ( expect, rs )
assertTrue ( resourcesManager. getAdminGroups ( sess, resource, group ). contains ( group ) )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
assertEquals ( "setCharAt(0,b,a,r) expected char", "foo", sb. toString ( ) )
assertThat ( ranking, is ( Integer. MIN_VALUE ) )
assertThat ( list, is ( simples ( "Hello, world!" ) ) )
Assert. assertEquals ( "col", intersect. getPath ( ) )
assertTrue ( pojo. testService. interrupted. get ( ) )
assertEquals ( "[\\"foo\\",2]", JSONUtils. toJSONString ( list ) )
assertEquals ( "[Cookie{name='name', value='test1', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}]", httpRequest. getEffectiveCookies ( ). toString ( ) )
assertTrue ( getBody ( response ). length ( ) > 100 )
assertTrue ( cleanExit )
assertEquals ( "my title", configuration. getyAxis ( ). getTitle ( ). getText ( ) )
assertEquals ( "user1,user1", result )
Assert. assertEquals ( "did not set resource redirects", true, transferOptions. isAllowPutGetResourceRedirects ( ) )
Assert. assertEquals ( describe, n. toJSONString ( false ) )
assertEquals ( readFile ( "src/test/resources/graal3" ), out )
assertThat ( output. toString ( ), is ( "my good little bad son" ) )
assertTrue ( QueryUtil. getExplainPlan ( rs ). contains ( "    SERVER ARRAY ELEMENT PROJECTION" ) )
assertTrue ( FstUtils. fstEquals ( fstB, fstReversed, 0.1, FstUtils. LOG_REPORTER ) )
Assert. assertEquals ( result, collector. output )
assertNull ( result )
Assert. assertEquals ( "a test.css", br. readLine ( ) )
Assert. assertTrue ( output. contains ( "mychain" ) && output. contains ( "mychain" ) )
Assert. assertEquals ( expectedFileName, actualFileName )
Assert. assertEquals ( configNew. getData ( ), configOld. getData ( ) )
context. assertIsSatisfied ( )
assertEquals ( ChatStatus. ready, chat. getStatus ( ) )
assertEquals ( expected, actual )
assertTrue ( videos. contains ( video ) )
Assert. assertEquals ( expected, getString ( writer ) )
assertTrue ( connectFuture. isConnected ( ) )
assertEquals ( JSON. serialize ( result ), "[ \\"value1\\", 12]" )
Assert. assertTrue ( "Body validation failed", isValid )
assertSame ( testTable, column. getTable ( ) )
assertValidationFailures ( deriver, config )
testHelper. assertProcessEnded ( testHelper. snapshotBeforeMigration. getProcessInstanceId ( ) )
assertEquals ( "Fusco", lambdaList. get ( 0 ). getLastName ( ) )
assertNotNull ( response )
Assert. assertEquals ( expectedAttempts, actualAttempts )
assertTrue ( ret2. equals ( t1 ) )
assertEquals ( "Hello ^[request?name1] Doe", ResponseBodyInterpolator. interpolate ( "Hello ^[request?name1] ^[request?name2]", req ) )
assertFalse ( filter. getExpr ( ) instanceof ExprInfo )
assertEquals ( "No test cases should fail", 0, runTestsResults. getFailedTests ( ). size ( ) )
assertThat ( proc. context ( ). contextAttrs ( ). get ( "__retryCount" ), is ( retryCount ) )
Assert. assertEquals ( "failures", 1, failures. size ( ) )
Assert. assertEquals ( "3 乇�夭 15 爻丕毓鬲 38 丿�� 丿�诏乇", t. format ( durations ) )
assertEquals ( Collections. emptyList ( ), FieldParser. parse ( EMPTY_STRING, schema ) )
assertEquals ( Result. FAIL, nogroup. apply ( item ) )
assertEquals ( "ARTIST_ID = 2 AND SERIAL = 1", jpa. eq ( id ) )
assertNotNull ( Settings. fetcher ( ). fetch ( ) )
assertNotNull ( result )
assertTrue ( discretionary )
Assert. assertFalse ( itemsGet. accept ( element ) )
assertEquals ( Collections. singletonList ( value. build ( ) ), myTestInstance. groupBy ( builder ). toList ( ) )
assertEquals ( "true", mockMonitoringRequest. getAsText ( ) )
assertFalse ( result. isPresent ( ) )
assertEquals ( "text/csv; charset=UTF-8", layout. getContentType ( ) )
assertEqualsWithoutWhiteSpaces ( "(added)", newUnion )
Assert. assertTrue ( buckets. size ( ) > 0 )
assertEquals ( meta2, meta1 )
Assert. assertEquals ( config, result )
assertNotNull ( InstalledAddOnExtension. reader ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertThat ( DateInterval. between ( start, end ). getEnd ( ), is ( Boundary. of ( IntervalEdge. OPEN, end ) ) )
assertEquals ( true, MapUtils. isEmpty ( map ) )
assertThat ( result, is ( jedis ) )
assertEquals ( LockMode. WRITE, mLockList. getLockMode ( ) )
assertNotNull ( categories )
assertThat ( books. getContent ( ). size ( ), is ( 2 ) )
assertEquals ( 12.077264, julDate. getJulianDate ( ), TOLERANCE )
assertThat ( "getChildCount", node. getChildCount ( ), is ( 0 ) )
assertThat ( testOutcome. getResult ( ), is ( FAILURE ) )
assertSimpleTerm ( result, "term1", false, false )
Assert. assertTrue ( String. format ( "failed to force bad verification error for file %s: expected message '%s...', actual message: '%s'", jsonFile, Application. VERIFY_ERROR, message ), isErrorMessage )
assertTrue ( epsgDescription. equals ( "EPSG:4326" ) )
assertSame ( alternative, choice )
Assert. assertEquals ( "a%2Aa=b%2Ab", getLine ( QUERY_LINE, canonicalRequest ) )
Assert. assertThat ( table. toString ( ), is ( "Hello: World" ) )
assertTrue ( resource + " is not valid", result. isValid ( ) )
assertTrue ( c. isValidForSqlQuery ( ) )
runner. assertAllFlowFilesTransferred ( PutHiveStreaming. REL_FAILURE, 1 )
assertEquals ( "{\\"schema\\":\\"string\\",\\"schemaType\\":\\"AVRO\\"}", request. toJson ( ) )
Assert. assertTrue ( bos. toString ( ). contains ( expectedXML ) )
org. junit. Assert. assertEquals ( expected, actual )
Assert. assertEquals ( "SELECT " + fixedColumns + ",COUNT(`foo.bar`) FROM v WHERE _user_ ='me' ORDER BY `foo.bar` DESC", sql )
assertFalse ( jxm. isValid ( ) )
assertEquals ( "weeks of header row must be 0", BasicMonthViewUI. WEEK_HEADER_ROW, dayGridPosition. y )
assertXMLEqual ( new StringReader ( "<body></body>" ), new StringReader ( html ( processed ) ) )
assertEquals ( expected, actual )
assertThat ( predicate. getPartitionPredicate ( ), is ( nullValue ( ) ) )
Assert. assertTrue ( exceptionThrown )
assertThat ( actual, is ( 0L ) )
assertEquals ( "Hash is invalid", TestVectors. SHA256_DIGEST_EMPTY, DigestUtils. sha256Hash ( buffer, buffer. length ) )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", doc. body ( ). html ( ) )
Assert. assertEquals ( "Session Application-Id should be the same as indicated.", SH_APPID, sessionAppId )
assertEquals ( expResult, result )
assertEquals ( expResult, result )
assertEquals ( "Should have found correct component", 1, m. getComponents ( ). size ( ) )
assertEquals ( "Testing for correct handling of syslog messages ", example5424Syslog, ls5424Parser ( ). parseLine ( example5424Syslog ) )
assertThat ( editor. getValue ( ), is ( getExistingObject ( ). getId ( ). toString ( ) ) )
assertEquals ( "wrong message", "Test message", dut. getMessage ( ) )
assertTrue ( ex. isPrime ( s ) )
Assert. assertEquals ( "Invalid result", true, predicate. test ( new Object ( ) ) )
assertEquals ( testVariable, lookup. getVariable ( testVariable ) )
assertThat ( axioms. isEmpty ( ), is ( true ) )
assertEquals ( expResult, result )
assertEquals ( 4, employees. size ( ) )
assertEquals ( test. getStrings ( ), ImmutableList. of ( "A", "B" ) )
assertEquals ( "^(a 2) b 4 5\\n", found )
assertEquals ( response. getStatus ( ), Status. SUCCESS. getValue ( ) )
Assert. assertEquals ( 0, new ObservationCount ( names ). getObservationCount ( ) )
assertNull ( shouldBeNull )
assertTrue ( context. getClientHeartbeatMode ( ) == 0xFF )
assertEquals ( HttpStatusCode. INTERNAL_SERVER_ERROR. code, response. getStatus ( ) )
assertEquals ( "Testing Course", courses. get ( 0 ). getName ( ) )
assertTrue ( arr. every ( callbackfn ) )
assertEquals ( place, controller. edit ( deleteAction, edit ) )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertSame ( fieldVar, result )
Assert. assertEquals ( message, actualMessage )
assertEquals ( URI. create ( "http://localhost:8080/base/resource" ), u )
assertTrue ( commandLine. hasOption ( "explicit" ) )
assertFalse ( validator. isValid ( resource, MetadataSection. COLLECTIONS_SECTION ) )
assertEquals ( "foo/bar", ref. getReference ( ). toString ( ) )
Assert. fail ( e. getMessage ( ) )
assertTrue ( "There should be errors", countErrors ( chain ) > 0 )
assertEquals ( new HashSet < String > ( Arrays. asList ( "staff1", "staff2", "staff3" ) ), underTest. filterConnectedViaProgram ( new HashSet < String > ( staffIds ), new HashSet < String > ( staffIds ), null ) )
assertEquals ( LocalDate. of ( 2012, 7, 5 ), test )
Assert. assertFalse ( activeLedgers. containsKey ( lh. getId ( ) ) )
assertEventEqualAfterSerializeDeserialize ( event )
assertEquals ( expected, mergeAclEntries ( existing, aclSpec ) )
assertThat ( results, samePaths ( new File ( root, "b.txt" ) ) )
assertThat ( result, is ( "2.3.0" ) )
assertSame ( de, reg. build ( e ) )
assertThat ( leaseType, is ( leaseType ) )
assertEquals ( expectedQuery, actualQuery )
Assert. fail ( "JBAS011509 should not have been written to file, but found: " + line )
assertEquals ( result, range. exclude ( other ) )
assertEquals ( "aMethod", response )
assertTrue ( result. matches ( ) )
assertTokenStreamContents ( tokenizer, input )
assertEquals ( false, check. isRequired ( ) )
assertFalse ( resultMessage ( result, PUT ), result. passedValidation ( ) )
this. assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher. class ) ) )
assertEquals ( 400, r. getStatus ( ) )
Assert. assertEquals ( timeoutCommand, shexc. getCommand ( ) )
Assert. assertEquals ( 2, i )
assertEquals ( Sets. newHashSet ( "table2", "table3" ), service. getTablesToRepair ( cluster, unit ) )
Assert. assertEquals ( 1, i. intValue ( ) )
Assert. assertEquals ( projectorForward. getTranscriptStartingAtCDS ( ), resultTranscript )
assertEquals ( orce, ownerRegistrationControlEntryManager. update ( orce ) )
assertEquals ( mockResponse, testResponse )
assertEquals ( 0, cacheStorage. size ( ) )
assertEquals ( ContainerTop. QNAME, bindingII. getContainerTop ( ). toString ( ) )
assertEquals ( expected, elements )
assertTrue ( "Workflow is not in an error state", workflowStatus. errorOccurred ( ) )
assertEquals ( 0, response. size ( ) )
assertEquals ( expResult, result )
assertTrue ( "Identity realm should be created", ops. exists ( TEST_IDENTITY_REALM_ADDRESS ) )
assertEquals ( expect, cpcClass. getText ( ) )
assertEquals ( "PaintingId", p1. getPaintingId ( ) )
assertSimpleTerm ( result, "term% term_ %term_", false, false )
Assert. assertFalse ( skipResult )
assertThat ( errors, not ( hasFieldErrors ( "degree" ) ) )
Assert. assertTrue ( intersect instanceof SegmentRange )
assertFalse ( isEmoji )
assertArrayEquals ( expectedResults, actualResults, 0.00001 )
assertTrue ( ex. isPrime ( 81 ) )
assertEquals ( false, actualReturnValue instanceof Boolean )
assertEquals ( qn, qnExpected )
assertTrue ( value. size ( ) > 0 )
assertEquals ( this. unpacked, unpacked )
Assert. assertEquals ( setProperties, subscription. getSubscriptionProperties ( ) )
assertEquals ( "SELECT * WHERE {?user?_c2?_c3 ;?_c4?user_gender. FILTER(?user_gender =?_c6 ||?user_gender =?_c7) }" )
assertPorts ( "specific-ports", DEFAULT_COMMAND_API_PORT + offset, DEFAULT_INTERNAL_API_PORT + offset, DEFAULT_MONITORING_API_PORT + offset, DEFAULT_MONITORING_API_PORT + offset )
assertEquals ( 2, filteredMatches. size ( ) )
Assert. assertEquals ( expected, new String ( encoded ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0", applicationWadl. length ( ) > 0 )
assertEquals ( 1., end. getTheoreticalEarliestOperationStartTime ( ), 0.01 )
Assert. assertEquals ( Option. NO_INTEGER, a0. optionalInteger ( ) )
assertThat ( confirmation. getStatus ( ), equalTo ( remoteStartStopStatus ) )
assertEquals ( 8, tool. heapCaculation ( ) )
assertEquals ( new HashSet < String > ( Arrays. asList ( "silver" ) ), all )
assertTrue ( tc. isJUnit48 ( ) )
assertTrue ( getNoErrorMsg ( ), result )
assertTrue ( checker. isZipInputStream ( bufferedInputStream ) )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getPrivileges ( set ( "producer_group1" ), ActiveRoleSet. ALL ) ). toString ( ) )
assertNull ( array )
assertEquals ( resp, ack + " " + ae. getLeader ( ) )
assertEquals ( "Testing", txtRes )
assertEquals ( true, ( ( DropDownImageListEditor ) presenter ). isEditMode )
Assert. assertEquals ( demoService. getExportedUrls ( ). get ( 0 ). getPort ( ), helloService. getExportedUrls ( ). get ( 0 ). getPort ( ) )
BufferedImageAssert. assertMatches ( result, new float [ ] { 1, 1, 1, 1, 1, 1, 1, 0, 0 } )
assertEquals ( Collections. emptyMap ( ), doc. getLabels ( ) )
this. assertIndices ( im ( 0, 0 ), im ( 1, - 1 ), im ( 2, 1 ), im ( 3, 2 ), im ( 4, 3 ) )
assertThat ( codePoints. containsAll ( "����������������������������������������������������������������������������������
assertEquals ( 0, getOptimisticLockCount ( ) )
assertEquals ( UNSUPPORTED_MEDIA_TYPE, argumentCaptor. getValue ( ). getStatusInfo ( ) )
assertNull ( found )
assertNotFound ( client. executePost ( "/foo", "{}", ContentType. TEXT_PLAIN ) )
Assert. assertEquals ( false, obs. getValueAsBoolean ( ) )
assertEquals ( 0.0, c. get ( 0 ), 0.00001 )
assertEquals ( testPersonName, sut. objectToString ( activity ) )
assertThat ( inputStream, is ( notNullValue ( ) ) )
Assert. assertTrue ( true )
assertLabelQueryResult ( query. toString ( ), both ( binds ( "p", URI. class ) ). and ( binds ( "pLabel", Literal. class ) ) )
Assert. assertEquals ( dataMap. keyValues ( ). size ( ), expectedKeys. size ( ) )
assertEquals ( "x", new Experiment ( ). doIt ( "x" ). join ( ) )
assertEquals ( "helloworld\\nsay hello\\nhelloworld2\\nsay hello2", FileUtils. readFileToString ( testFile, Charset. forName ( "UTF-8" ) ) )
assertEquals ( expected, formatted )
Assert. assertEquals ( Integer. valueOf ( 1 ), fromJson. getValue ( "count" ). intValue ( ) )
Assert. assertEquals ( 2147483647, res )
assertFalse ( problem )
assertEquals ( expected, actual )
assertEquals ( BYTE_FIELD_VALUE, storedValue )
assertThat ( nonInfo, hasSize ( 2 ) )
assertTrue ( sba instanceof ThickSBA )
assertEquals ( "OK", response. getTitle ( ) )
Assert. assertNull ( deployment )
assertTrue ( validator instanceof ValidationError )
Assert. assertTrue ( fail )
assertEquals ( 3, obj. foo )
assertArrayEquals ( Arrays. copyOf ( os. toByteArray ( ), 4 ), MAGIC_NSEC )
assertEquals ( "Please input service name, eg: \\r\\ninvoke xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})\\r\\ninvoke XxxService.xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})\\r\\ninvoke com.xxx.XxxService.xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})", result )
Assert. assertFalse ( itemsGet. accept ( element ) )
assertThat ( instance. getValue ( ), equalTo ( TEST_VALUE ) )
assertArrayEquals ( packet, Proto. arraylist_to_array ( payload ) )
Assert. assertEquals ( row. length, length )
assertTrue ( Configurator. compareFs ( fs1, fs2 ) )
assertEquals ( insertNum, results. size ( ) )
assertEquals ( "Common exception", ms. getText ( ) )
assertEquals ( destroyed. get ( ), 1 )
assertEquals ( Character. valueOf ( '|' ), CsvBulkImportUtil. getCharacter ( conf, "conf.key" ) )
Assert. assertEquals ( 3, outStream2. toByteArray ( ). length )
assertEquals ( 2, context. getTableCount ( ) )
assertTrue ( validator. validate ( EntityNames. STAFF, ids ). equals ( ids ) )
assertNotNull ( Region. knownRegions ( ) )
AssertUtil. assertNoJSError ( )
assertTrue ( reader. is. isClosed ( ) )
assertEquals ( Arrays. asList ( "D", "B" ), pis )
assertEquals ( 240, sumOfType1Cap )
assertDirectories ( "hello", "hello" )
Assert. assertEquals ( expected, super. parse ( " good.path.here" ) )
assertEquals ( 10., newVrp. getInitialVehicleRoutes ( ). iterator ( ). next ( ). getDepartureTime ( ), 0.01 )
assertE ( "       " + "       " + "       " + "��      " + "=======" + "       " + "#######" )
assertEquals ( "instance.test(1, 2, 3)", callTest. toJavaSrc ( ) )
assertTrue ( jobService. getJobServerStatus ( namespace, jobName ). size ( ) > 0 )
assertNotNull ( Conference. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( "Configuration not found", "notExist", configuration )
assertThat ( errors. toString ( ), containsString ( "No response found for required item with id = 'link0'" ) )
assertAccessorsCorrect ( table, "expandedRows", rows1, rows2 )
assertEquals ( cmp. recordCount. intValue ( ), 0 )
assertEquals ( 0, list. size ( ) )
assertEquals ( expResult, result )
assertThat ( instances. getRunningDatabase ( ), is ( not ( nullValue ( ) ) ) )
Assert. assertArrayEquals ( new String [ ] { "5" }, a. getStrings ( ) )
assertEquals ( "http://www.example.com/q/10001?q=10001", url )
assertThat ( maxSide. getPointsLength ( ), is ( equalTo ( 6 ) ) )
assertTrue ( integer2 == integer3 )
assertEquals ( expResult, result )
Assert. assertThat ( header. getCipher ( ), is ( "AES" ) )
assertTrue ( conn instanceof DBConnection )
assertThat ( new ArrayIterator < LocalDateTime > ( Arrays. asList ( fromTime, toTime ) ). iterator ( ), contains ( fromTime, toTime ) )
assertNotNull ( injector )
assertEquals ( 0.0, instance. inclusiveHypervolume ( ind ), 0.0 )
Assert. assertNotNull ( simpleMapPOJO. getBytesMap ( ) )
assertTrue ( currTime > 0 )
Assert. assertNotNull ( str )
Assert. assertEquals ( configuration, result )
assertEquals ( TextChecker. getLanguage ( ), "lid.176" )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED_BREAK, status )
assertEquals ( "[10, 8, 6, 4, 2]", IteratorToGeneratorAdapter. adapt ( range ). toCollection ( ). toString ( ) )
assertFalse ( "Should produce different random bytes", Arrays. equals ( new Random ( ). randomBytes ( ), new Random ( ). randomBytes ( size ) ) )
Assert. assertEquals ( "select next_one(pet_id) from Pet pet  order by pet_id", sql )
assertTrue ( result > 0 )
assertTrue ( "Wrong info: " + result. info, result. info. startsWith ( "2 document" ) )
assertThat ( studies. size ( ), is ( 1 ) )
assertEquals ( field, formField. getField ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo, jobSpec ), allOf ( hasEnvVar ( "item1", "value1" ), hasEnvVar ( "item2", "value2" ), hasEnvVar ( "WL_HOME", "/u01/custom_wl_home/" ), hasEnvVar ( "MW_HOME", "/u01/custom_mw_home/" ) ) )
FixtureAsserts. assertStringMatchesJsonFixture ( "Customer retrieve their User as HAL+JSON", actualResponse, "/fixtures/hal/user/expected-customer-retrieve-user.json" )
assertEquals ( cliLoadJob. getJobSpec ( ), createTestSpec ( ) )
assertNotNull ( "Previous step failed", uri_conferenceInstance )
assertNotNull ( Credential. reader ( ). read ( ) )
assertEquals ( "{\\"a\\":{\\"b\\":1}}", n )
assertEquals ( "Parsing of long option does not match expected result.", PROPERTY_LONG_EXPECTED, parseResult )
Assert. assertEquals ( expected, returned )
assertEquals ( "no-cache", wrapper. getFirstHeader ( "Cache-Control" ). getValue ( ) )
runner. assertValid ( service )
assertEquals ( "{\\"data\\":[{\\"x\\":80,\\"y\\":80,\\"name\\":80},{\\"x\\":20,\\"y\\":20,\\"name\\":20}]}", toJSON ( containerSeries ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert. assertEquals ( expected, actual )
assertThat ( node, isBrowseNodeWith ( asset ) )
assertFalse ( fieldAccessor. fieldIsPrimitive ( ) )
assertEquals ( true, out. firstElement ( ). get ( ) )
assertActualNodeConflictConflictEvent ( workingCopy )
assertEquals ( randomMaster. reduce ( percentile ), pSquare. reduce ( percentile, aggregates ), 1e-5 )
Assert. assertEquals ( NUM_SHIRT_THREADS, collector. size ( ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( secretMap. get ( "foo" ), "bar" )
assertEquals ( expected, getString ( TestSelectImpl. example ( ) ) )
assertParseTree ( rootNode ( "hello world", stringNode ( "greeting", "hello world", stringNode ( "hi you", "hello world" ) ) ), tree )
assertEquals ( "firstName", res. get ( "lastName" ) )
Assert. assertEquals ( ans [ i ], count )
assertEquals ( "", contactEditText. getText ( ). toString ( ) )
assertEquals ( before, after )
Assert. fail ( "Missing required input" )
assertThat ( relevant, is ( true ) )
assertTrue ( closed. await ( 2, SECONDS ) )
assertThat ( applied, is ( RuntimeContext. DEFAULT ) )
assertThat ( DateInterval. parseISO ( "2012-W01-1/W05-4" ), is ( expected ) )
JSONAssert. assertEquals ( expectedJson, json, false )
assertThat ( actual, is ( expected ) )
assertTrue ( e. getMessage ( )!= null )
assertEquals ( 0.945f, result, 0.001f )
assertTrue ( result. getEndTime ( ). equals ( now. toDate ( ) ) )
assertTrue ( masterCommits. hasNext ( ) )
assertEquals ( title, testObj. getTitle ( mem, createURI ( "a/b/c" ) ) )
assertNotEquals ( options1, options2 )
assertTrue ( sets. contains ( message3 ) )
assertTrue ( meta. isNullable ( ) )
assertTrue ( String. format ( "[%s] should be valid.", coord ), validator. isValid ( coord, null ) )
assertTrue ( instantiator instanceof ObjenesisClassInstantiator )
assertNotNull ( userDTO )
assertEquals ( 2, objects. size ( ) )
assertEquals ( 200, response. getStatusLine ( ). getStatusCode ( ) )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( "putValue", region. get ( "putKey" ) )
Assert. assertEquals ( msg, n )
assertThat ( converter. convert ( v ), is ( 1L ) )
assertEquals ( "Should get a NOT_IMPLEMENTED response", HttpStatus. NOT_IMPLEMENTED, response. getResponseStatus ( ) )
Assert. assertEquals ( BatchStatus. COMPLETED, exec. getStatus ( ) )
Assert. assertArrayEquals ( bytes, result )
assertTrue ( p. getStatusSimple ( ). toString ( ). equals ( "active" ) )
assertEquals ( list, list2 )
Assert. assertEquals ( "Verify that the servlet was deployed and returns expected result", "hello", result )
files. assertIsEmptyFile ( someInfo ( ), notAFile )
Assert. assertFalse ( itemsGet. accept ( element ) )
assertEquals ( NetPlan. getNetworkElements ( NetPlan. Type. Q ), Arrays. asList ( n1, n2 ) )
assertArrayEquals ( new int [ ] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, updateExecution. getUpdateCounts ( ) )
assertTrue ( videos. contains ( video ) )
assertEquals ( check. getValue ( ), actual )
assertEquals ( "class CompanyException {\\n}\\n", td. toString ( ) )
Assert. assertNotNull ( addressResultsDto )
assertThat ( context. statement ( ), is ( "'b c'" ) )
assertFalse ( str. endsWith ( "\\0" ) )
Assert. assertTrue ( "Group item should have been added to sub menu", subMenu. getMenuItems ( ). contains ( group ) )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertThat ( underTest. getLabel ( ), is ( "test" ) )
assertTrue ( "Proposition not found by rule", propositionFound )
assertCitationMatchingResult ( actualOutputDocIdPicOuts, expectedOutputDocIdPicOuts )
assertSingleResult ( op, Statistic. SDEV, expSD )
assertEquals ( value2, updatedConfigState. value )
assertTrue ( result )
assertThat ( stats, sameInstance ( performanceStatistics ) )
Assert. assertTrue ( jumlah == 0 )
assertThat ( base. thenSupplyCancelledCancelled ( supplier ), is ( new ImmediateFailed < > ( caller, cause ) ) )
Assert. assertEquals ( 40., solution. getCost ( ). get ( 0 ), 0.01 )
Assert. assertFalse ( result )
assertEquals ( expected. build ( ), doc )
assertEquals ( expected, actual )
assertTrue ( tasks. size ( ) == 5 && tasks. get ( 0 ). getCompletionDate ( ). getTime ( ) == tomorrow )
assertIgnore ( editor, "hello", "world", "message" )
assertLoadBalanced ( restTemplate )
Assert. assertNotNull ( "null data object, was not found", dataObject )
assertThat ( result, is ( notNullValue ( ) ) )
assertEquals ( "�驻��� ��", t. format ( new Date ( 0 ) ) )
assertArrayEquals ( shorts, decoded )
assertEquals ( expected, actual )
assertEquals ( "[5]", list. toString ( ) )
assertNull ( w )
assertNotSame ( 0, count )
context. assertFalse ( handled, "The request to not registered resource should not be handled" )
assertThat ( response. getStatus ( ), is ( Response. Status. OK. getStatusCode ( ) ) )
assertThat ( uut. getFeatures ( ). isEmpty ( ), is ( true ) )
Assert. assertTrue ( "Incorrect number of tests run: " + count, count == 0 )
assertThat ( subject. getCleanValue ( ). toString ( ), is ( "foo       bar" ) )
assertEquals ( 0, result. size ( ) )
Assert. assertEquals ( "{\\"" + entityType. getPropertyNames ( ). get ( 0 ) + "\\":{" + "\\"type\\":\\"MultiLineString\\",\\"coordinates\\":[[1.0,1.0],[2.0,2.0],[3.0,3.0],[4.0,4.0],[5.0,5.0]]}}", IOUtils. toString ( serializerNoMetadata. entity ( metadata, entityType, entity, null ). getContent ( ) ) )
assertTrue ( "queued.push() blocks", ( time2 - time1 ) < delay )
assertThat ( response. getCode ( ), is ( "a test 23" ) )
Assert. assertEquals ( "Error while getting Thesaurus Type!", expectedThesaurusTypeTitle, actualThesaurusTypeTitle )
assertPostEdgeProducesJson ( response, false, false )
Assert. assertEquals ( "123,0.00", result. getText ( ) )
assertProcessInstanceCompleted ( processInstance )
assertMockEndpointsSatisfied ( )
assertNull ( result )
assertArrayEquals ( new String [ ] { ".*", ".*ha", ".*hb" }, ruleSet2. getIncludePatterns ( ). toArray ( new String [ 0 ] ) )
assertNotNull ( a )
assertTrue ( inventory. contains ( mat, amount ) )
Assert. assertTrue ( ( ( Person ) result [ 0 ] ). equals ( ( Person ) array [ 0 ] ) )
Assert. assertEquals ( "[1, 2, 3, 4]", equals )
assertTrue ( page. getBody ( ). getTextContent ( ). contains ( "Redirect Works!" ) )
assertEquals ( map, map2 )
assertEquals ( 1, testList. size ( ) )
assertEquals ( "should be the same age in days", expected. intValue ( ), result. intValue ( ) )
Assert. assertNull ( nullValue )
Assert. assertEquals ( result. getResultSize ( ), 0 )
assertThat ( repository. getDescriptor ( Repository. SPEC_PROPERTY_DESC ), is ( "value" ) )
assertThat ( MockI18n. passthrough. text ( str ), is ( str ) )
assertTrue ( actual. entrySet ( ). containsAll ( expected. entrySet ( ) ) )
assertEquals ( 0, FileChunkUtil. getNumberOfChunks ( file, 0L ) )
assertThat ( strategy, is ( instanceOf ( ActiveOntologyLocationStrategy. class ) ) )
Assert. assertEquals ( ValidationResult. Result. ERROR, snowflakeSourceOrSink. validate ( ). getStatus ( ) )
assertEquals ( "", result )
Assert. assertTrue ( AVLib2Assert. compare ( image, reference ) )
Assert. assertEquals ( expResult, result )
Assert. assertEquals ( 2, result. length ( ) )
assertNull ( output )
assertEquals ( "192.168.0.123/24", event. getIp ( ). getAddress ( ) )
assertEquals ( 1, Thread. currentThread ( ). getContextClassLoader ( ). getContextClassLoader ( ). doNothing ( ) )
assertFalse ( param. isRequired ( ) )
assertEquals ( "milestone", activityType )
assertEquals ( "straks", t. format ( date ) )
assertEquals ( builder. buildResponse ( ). getErrors ( ). size ( ), 0 )
assertSame ( reply, myTestInstance. runAdminCommand ( "command", "name" ) )
assertNotNull ( result )
assertEquals ( 10, slice. events. size ( ) )
assertEquals ( result, result2 )
assertEquals ( "Length is not correct", 3, tis. getCount ( ) )
assertEquals ( origWriteSet, reorderSet )
assertThat ( archetypeCatalog, not ( nullValue ( ) ) )
Assert. assertEquals ( "OK", returnT. getReturnTStr ( ) )
assertFalse ( "Testing ModuleNotFoundException", everything. contains ( "ERROR" ) )
assertEquals ( "0FFFFF212", Evaluator. evaluate ( ex ) )
assertTrue ( action. isCheckAreaVisible ( ) )
assertEquals ( builder. type. toString ( ), ExperimentType. SAVE_MODEL. toString ( ) )
assertEquals ( "Order count does not match", 3, encounter. getOrders ( ). size ( ) )
assertTrue ( asyncTask. isDone ( ) )
assertThat ( userId, is ( Optional. of ( USER_ID ) ) )
assertTrue ( downloader. waitForReportReady ( ) )
assertEquals ( "SGVsbG8gV29ybGQ==", s )
assertEquals ( 5, pendingPosts. size ( ) )
assertEquals ( Permissions. UPDATE, testProcessEngineCfg. getDefaultUserPermissionForTask ( ) )
assertFalse ( "The getChanges() method reported a change", hasChange )
assertEquals ( new TransportAddress [ 0 ], result )
assertThat ( families, arrayContaining ( "Processing" ) )
Assert. assertTrue ( aaModifiedOn > aa2. getModifiedOn ( ). getTime ( ) )
assertEquals ( "3 vuosikymmenen p盲盲st盲", t. format ( new Date ( 0 ) ) )
assertNotNull ( EndUser. fetcher ( "ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 1, packetIn. getCount ( ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
assertEquals ( 5l, d. asInt8 ( ) )
assertEquals ( expected, actualQuery )
Assert. assertEquals ( json. getAsInt ( "status" ), 204 )
assertEquals ( Number. class, numberTypeConverter. getClass ( ) )
assertEquals ( getLoggingEvent ( ). getFormattedMessage ( ), "Exception: NullPointerException(null)" )
assertEquals ( 0, peopleIds. size ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( 2, numberOfUsers )
Assert. assertEquals ( Arrays. asList ( "start", "after", "test", "foo", "bar", "baz", "cool" ), collected )
assertOut ( "this.b = this.b + 1" )
assertTrue ( id > 1 )
assertEquals ( "Wrong encoding", XmlEventDecoder. ENCODING, eh. get ( 0 ). getEncoding ( ) )
assertEquals ( maxEventId, task. dataSent. get ( SiteToSiteProvenanceReportingTask. LAST_EVENT_ID_KEY ) )
assertEquals ( expected, result )
Assert. assertTrue ( "Bad cost - expected 4.0 but was " + cost, 4.0 == cost && cost <= 2.0 )
assertEquals ( Atom. of ( "recv" ), result )
assertArrayEquals ( TEObjectUtil. TE_LSP_FAST_REROUTE1, ByteArray. getAllBytes ( output ) )
assertEquals ( "", json, ios. toJSON ( ) )
assertDeleteMessage ( sendMessage )
assertEquals ( expected, MD5Utils. computeMD5Of ( s ) )
assertFalse ( hasPermission )
assertEquals ( expected, actual )
Assert. assertEquals ( "w", ret )
assertEquals ( url, newUrl )
assertEquals ( expectedJson, document. json ( ) )
Assert. assertEquals ( "{\\"alice\\":[\\"bob\\"]}", writer. toString ( ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient. reassignWhenNotCompleted ( CONTAINER_ID_V2, task. getId ( ), "2ssss", reassign ), "Error code: 400", "Error parsing time string:" )
assertArrayEquals ( "replace and replace is replace". getBytes ( ), actuals )
assertThat ( markedWord, is ( "louper" ) )
assertEquals ( TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. GTE, v, TERM_FACTORY. getConstantLiteral ( "3", XSD. LONG ) ), translation. get ( 0 ) )
assertThat ( path, is ( "../foo-1.0-SNAPSHOT.woa/Contents/test" ) )
assertEquals ( BuilderFactory. start ( ). add ( "a", 12345678901L ). build ( ), doc )
assertEquals ( ZippelGCD ( gcd, a, b ). monic ( ), intrp. monic ( ) )
assertThat ( command. accept ( state ), is ( false ) )
assertThat ( PlainTimestamp. of ( 2014, 4, 21, 9, 15 ). with ( MICRO_OF_SECOND, 999999999 ), is ( PlainTimestamp. of ( date, time ) ) )
assertContentType ( actual )
assertEquals ( testGenre, song. getGenre ( ) )
assertTrue ( components. isEmpty ( ) )
assertThat ( ( Boolean ) getter. invoke ( instance ), is ( equalTo ( false ) ) )
assertEquals ( "  0xXX\\n", b. asString ( ) )
assertEquals ( "http://example.com/images/test/test-1.22.png", imageInfo. getImageUrl ( ) )
assertTypeListsEqual ( params, expectedParams )
assertArrayEquals ( expected, actual )
assertThat ( comparator. compare ( axiom3, axiom1 ), is ( lessThan ( 0 ) ) )
assertFalse ( actual )
assertTrue ( "Content should contain same layout: " + fieldFontSetting + ", " + contentAsString, contentAsString. indexOf ( fieldFontSetting )!= - 1 )
Assert. assertTrue ( contains )
assertEquals ( "From is not properly parsed", new Date ( 2015, 2, 28, 01, 02, 03.004, GMT ), mapper. readFrom ( columns ) )
assertTrue ( instance. isHTTPRawSamplerEnabled ( ) )
assertEquals ( 0, tasks. size ( ) )
assertEquals ( reservationName, "res_1" )
assertTrue ( "no exception was thrown", exception )
assertThat ( database. isClean ( ), is ( false ) )
Assert. assertNull ( "Unexpected distinct name", jBossWebMetaData. getDistinctName ( ) )
assertTrue ( Files. exists ( target ) )
assertEquals ( query1, query2 )
Assert. assertNull ( person. getAttribute ( "name1" ) )
Assert. assertEquals ( "Test template val1 and val2", output )
Assert. assertEquals ( Arrays. asList ( "hey", "bye" ), searchRequestBuilder. request ( ). routing ( ) )
assertNotNull ( res )
Assert. assertEquals ( 0, target. getChildren ( ). size ( ) )
assertThat ( parseArguments. size ( ), not ( 0 ) )
assertNull ( item. getList ( ) )
assertTrue ( descriptor. hasConstrainedParameters ( ), "Setting given for cross-parameter should take precedence" )
Assert. assertEquals ( expected, HttpUtils. getPortalHome ( ) )
assertEquals ( Integer. valueOf ( 3 ), Integer. valueOf ( list. size ( ) ) )
assertThat ( rendering, is ( "1st September 2011" ) )
assertFalse ( d1. equals ( d2 ) )
assertThat ( payload, containsString ( "compressionMode=active" ) )
assertThat ( output, containsString ( "\\"name\\":[{\\"family\\":\\"Smith\\",\\"given\\":\\"John\\"}]}" ) )
Assert. assertEquals ( window1, window2 )
Assert. assertEquals ( 1000, total )
assertEquals ( "foo", invokeResult )
assertFalse ( "our group shouldn't have set our attribute", retAttr. contains ( attributes. get ( 0 ) ) )
assertNull ( doc )
assertTrue ( results. size ( ) > 1 )
assertEquals ( joinFileDescriptorBo, JoinFileDescriptorBo. EMPTY_JOIN_FILE_DESCRIPTOR_BO )
assertTrue ( plugin. getNameBanStorage ( ). getBan ( player. getName ( ) ). isSilent ( ) )
assertNotEquals ( insertAction, retractAction )
assertEquals ( NodeValue. FALSE, r )
assertEquals ( 2, numberOfElephants )
assertThat ( def. isSingleValueProperty ( ), is ( true ) )
assertNotNull ( bindingDOMDataTreeProducerAdapter. createProducer ( any ( ) ) )
assertTrue ( elapsed < 5 * 1000 )
Assert. assertEquals ( getCssFileContents ( cmpFile ), styleSheet. toString ( ) )
assertEquals ( Version. valueOf ( "1.0.0-alpha+build" ), builder. build ( ) )
assertEquals ( publicationDate, mods. get ( 0 ). getRevisionDate ( ) )
context. assertIsSatisfied ( )
assertNotNull ( result )
Assert. assertEquals ( "service", s. getType ( ) )
assertEquals ( "2", x. toString ( ) )
assertThat ( foundResources, contains ( p2id. getValue ( ) ) )
assertThat ( result. getPersonIdItems ( ). size ( ), is ( 1 ) )
assertEquals ( LifecycleState. DISABLED, node. connect ( ). toBlocking ( ). single ( ) )
assertCompletionsDisplayString ( "foo:\\n" + "  data:\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "    data:\\n" + "      -\\n" + "    data:\\n" + "    data:\\n" + "    data:\\n" + "    data:\\n" + "    data:\\n" + "    data:\\n" + "    data:\\n" + "    data:\\n" + "    data:\\
Assert. assertNull ( queryResult. getExplanations ( ) )
assertThat ( expression. toString ( ), is ( "/prefix1:root/prefix2:otherchild" ) )
assertOut ( "goog.provide('org.apache.royale.A');\\n\\n/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);\\n\\n\\n" + "org.apache.royale.A);\\n\\n\\n" + "\\n" + "/**\\n" + " * @export\\n" + " * @type {Object.<string, Array.<Object>>}\\n" + " */\\n" + "org.apache.royale.A.prototype.royale_init_as_static_init_sprite_0.prototype.royale_init_as_static_1 = function() {\\n" + "  flash.display.Sprite;\\n" + "};\\n\\n\\n" + "/**\\n" + " * Prevent renaming of class. Needed for reflection.\\
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertEquals ( asList ( Segment. SIZE / 2, Segment. SIZE / 2, Segment. SIZE / 2 ), segmentSizes )
assertThat ( fe, notNullValue ( ) )
assertEquals ( 1, response. getEntry ( ). size ( ) )
assertThat ( itr. hasNext ( ), is ( false ) )
Assert. fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert. assertNotNull ( addressResultsDto )
assertTrue ( tasks. size ( ) == 10 && tasks. get ( 0 ). getCreated ( ) == tomorrow && tasks. get ( tasks. size ( ) - 1 ). getCreated ( ) == dayAfterTomorrow )
assertEquals ( true, ScanResult. isErrorDetected ( scanResult ) )
assertThat ( wrapper. get ( 1 ), is ( ( byte ) 0x24 ) )
assertThat ( output, containsString ( "\\"name\\":[{\\"family\\":\\"Smith\\",\\"given\\":\\"John\\"}]" ) )
assertThat ( renderer. getShortForm ( entity ), is ( "xsd:negativeInteger" ) )
assertThat ( versionedIdsOf ( units ), bagEquals ( versionedIdList ( LAUNCHER_FEATURE, LAUNCHER_FEATURE_JAR, LAUNCHER_BUNDLE, LAUNCHER_BUNDLE_LINUX ) ) )
assertEquals ( "select cat\\nfrom Cat cat fetch all cat1\\nfrom Cat cat1", query2. toString ( ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) >= 'literal'" ) )
assertEquals ( 0, SnowcastSequenceUtils. compareTimestamp ( sequence1, sequence2 ) )
assertEquals ( testSet, testSet. stream ( ). collect ( Collectors. toList ( ) ). get ( 0 ) )
assertEquals ( 1, appender. getLoggingEvents ( ). get ( Level. WARN ). getCount ( ) )
assertEquals ( vNum, pdfNum )
assertTrue ( equals ( statEntity, nativeEntity ) )
Assert. assertEquals ( queue, testQueue )
assertEquals ( "UPDATE EntityWithRelations SET \\"name\\" =? WHERE \\"id\\" =?", Utils. singleLine ( sql ) )
assertFailureValue ( "missing (1)", "array(1)" )
assertEquals ( Arrays. asList ( "http://somelink", "" ), new JsonLinkConsumer ( ). readLinks ( reader, null ) )
assertThat ( fileName, is ( "base_bla.ssdump2" ) )
Assert. assertEquals ( 6, elements. size ( ) )
assertEquals ( "getProcessList timeout", latch. getCount ( ), 0 )
assertEquals ( true, result )
assertEquals ( 0, suggestedConfigUpdates. size ( ) )
assertThat ( tableNames, is ( empty ( ) ) )
Assert. assertTrue ( mock )
assertThat ( returned. getX ( ), is ( 2l ) )
assertEquals ( ( new SparseSet ( "-a +a/b" ) ). getPattern ( ), set. getPattern ( ) )
assertEquals ( "Failed on rows: [" + rows + "], columns: [" + columns + "], accumulators: [" + res + "]", 1f, res, 0.001f )
assertNotNull ( faultUnMarshaller )
CheckstyleTestUtils. assertSimilarXmlWithResource ( "/org/sonar/plugins/checkstyle/CheckstyleProfileExporterTest/" + "noCheckstyleRulesToExport.xml", sanitizeForTests ( writer. toString ( ) ) )
service. callCounter. assertCalls ( "{findIds=2, getItems=6}" )
Assert. assertNotNull ( irodsTaggingService )
assertEquals ( 2, timers. size ( ) )
assertThat ( newUser. getViewedBooks ( ). size ( ), is ( 1 ) )
Assert. assertEquals ( TimeValue. NEG_ONE_MILLISECOND, d )
assertThat ( CompositeBlobStore. StoreSuitabilityCheck. ENABLED, equalTo ( invocation. getArgument ( "suitability" ) ) )
assertInEqualsOut ( )
assertEquals ( "groupId:artifactId", softwareProjectId. getKey ( ) )
assertEquals ( "flush()", methodCall )
assertEquals ( expected [ counter ++ ], actual )
assertEquals ( "" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n", raster. toString ( ) )
assertTrue ( "Failed to retrieve DOI metadata.", result )
assertFalse ( target. isModify ( newSettings ) )
assertTrue ( gl. size ( ) > 0 )
assertEquals ( "EXEC \\"DIAL\\"", execCommand. buildCommand ( ) )
assertEquals ( "utf-8", mediaType. charset ( ). name ( ) )
assertUserSettingsCount ( 0 )
assertEquals ( STANDART, decoded )
assertEquals ( expectedResult, resultString )
Assert. assertTrue ( expect ( o, true ) )
assertMakeImageCanReadImage ( imageData )
Assert. assertNull ( character. getData ( ) )
assertEquals ( 0, app. executeApplication ( args ) )
assertNotNull ( action )
assertThat ( request. getConnectorId ( ), equalTo ( someInteger ) )
Assert. assertEquals ( orderMap. get ( name ), order )
assertNull ( avroField. convertToKettleValue ( array, schema, mock ( Schema. class ), mock ( Schema. class ), false ) )
assertEquals ( i, o )
arrays. assertContainsSequence ( someInfo ( ), actual, emptyArray ( ) )
assertIsAborted ( tx )
Assert. fail ( "unrecognized syntax: foo" )
assertEquals ( new HashMap < String, String > ( ), props )
Assert. assertEquals ( Type. ACCOUNT, Type. get ( account ) )
assertEquals ( expectedResult, result )
assertEight ( result, testContext, async )
assertEquals ( "{\\"id\\":1,\\"label\\":\\"MyButton\\",\\"x\\":2,\\"y\\":2,\\"color\\":0,\\"width\\":2,\\"height\\":2,\\"pushMode\\":false}", result )
assertEquals ( exp, arrayX )
assertEquals ( "some return path", mockResult. included ( "returnPath" ) )
assertE ( "----------" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "----------" )
assertEquals ( NUM_ITERATIONS, count )
Assert. assertTrue ( intersect instanceof CompositeRange )
assertTrue ( result. isEmpty ( ) )
assertEquals ( "{\\"key\\":\\"value\\"}", target. toString ( ) )
assertEquals ( expected, result )
assertThat ( hospitalModel. getAddress ( "01" ), is ( "CPCT Recip" ) )
assertEquals ( "hello, world!", out )
assertEquals ( token0, token1 )
Assert. assertEquals ( Arrays. asList ( "y=1" ), results )
assertTrue ( Bytes. equals ( opened, data ) )
Assert. assertEquals ( 1234, multicastSocket. getLocalPort ( ) )
assertEquals ( "a", example. getContent ( ) )
assertEquals ( result, expected )
assertEquals ( expected, result )
Assert. assertEquals ( embedding. getInputParameters ( ), udf. getKey ( embedding ) )
Assert. assertEquals ( 65., tdCosts. getBackwardTransportTime ( loc ( "from" ), loc ( "to" ), 100., null, null ), 0.01 )
assertEquals ( Lists. newArrayList ( 1 ), listBad )
assertThat ( result. getBins ( ), equalTo ( Collections. EMPTY_LIST ) )
Assert. assertTrue ( "Did not expect optimal coverage", best. getCoverage ( ) < 1.0 )
assertTrue ( "pattern=" + patterns. get ( index ) + " is not equal to " + sb. toString ( ), HostPatternsHolder. isHostMatch ( patterns. get ( index ) ) )
assertTrue ( results. size ( ) > 1 )
assertThat ( Files. exists ( list ), is ( true ) )
assertEquals ( "test", new String ( sentBytes ) )
assertNotNull ( result )
assertions. containsSequence ( 16, 16, 18 )
assertEquals ( "void dest5(@A @B @C int, @B @C @D int)", toString ( dest ) )
Assert. assertTrue ( "Incorrect file types were not modified", CollectionUtils. isEqualCollection ( expected, widget. getFileTypes ( ) ) )
Assert. assertThat ( job. sendCommandStr ( "test command" ), is ( false ) )
assertThat ( summed. getDouble ( 0 ), equalTo ( 5.0 ) )
assertThat ( options. isIgnoreFailures ( ), is ( true ) )
assertEquals ( column, fromProto )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5 ) ) )
Assert. assertTrue ( "There should be no GRE service if no gre is specified", greServices. isEmpty ( ) )
assertThat ( g. toSmiles ( ), is ( "CC=[C@@]=CC" ) )
assertThat ( f. format ( time ), is ( "17:45 PDT" ) )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
Assert. assertEquals ( "SELECT USER();", text )
assertTrue ( filteredEvidenceItemMap. isEmpty ( ) )
assertEquals ( 0, errors. size ( ) )
Assert. assertTrue ( id2 < id )
assertTrue (! plan1. equals ( plan2 ) )
assertTrue ( size > getFileSize ( "testUnalignedWrites", size ) )
assertTrue ( Futures. getUnchecked ( collector ) )
assertThat ( propertyVariable, is ( "alex" ) )
assertNotNull ( test. getMockedObject ( ) )
assertNull ( study )
assertNotNull ( bean. getSchema ( ) )
assertTrue ( retCode == 0 )
assertFalse ( rolesPrivileges. isEmpty ( ) )
assertEquals ( 2, branches. size ( ) )
assertNull ( supplier. authForImage ( IMAGE_NAME ) )
assertEquals ( 1234, unprocessed. getExpected ( ) )
assertEquals ( HttpStatus. SC_OK, response. getStatus ( ) )
assertTrue ( kbuilder. getErrors ( ). toString ( ). contains ( "Memory leak detected" ) )
Assert. assertTrue ( "did not find the one data object", entries. size ( ) >= 1 )
assertTrue ( clas. getClass ( ). getName ( ), clas instanceof Integer )
runner. assertAllFlowFilesTransferred ( PublishKafka_0_11. REL_SUCCESS, 3 )
Assert. assertNull ( tags )
assertEquals ( "Max Mustermann", result )
assertTrue ( result. length ( ) > 0 )
assertEquals ( map1, map2 )
Assert. assertEquals ( "org.jboss.as:jboss-as-arquillian-container-domain-remote:7.1.1.Final", adapter. dependencies ( ) [ 0 ] )
assertThat ( zonedDateTime, is ( ZonedDateTime. parse ( "1969-07-21T12:56:00+10:00[Australia/Brisbane]" ) ) )
assertEquals ( "<b>1</b><p>2</p><p>3</p>", doc. body ( ). html ( ) )
assertEquals ( 401, r. getStatus ( ) )
assertEquals ( 1, res. getInt ( "nbHits" ) )
Assert. assertEquals ( "2011-11-01 00:00:00", formater. format ( date. getTime ( ) ) )
Assert. assertFalse ( "server shouldnt supoort case sensitive", isSupport )
assertEquals ( "28.0", data. getValue ( ) )
assertThat ( Foo. class. getDeclaredMethods ( ). size ( ), is ( 2 ) )
Assert. assertTrue ( newSql. equals ( "SELECT * FROM cpcplan WHERE name = :name" ) )
assertThat ( getRecordedDomain ( ), hasCondition ( Available ). withStatus ( "True" ) )
assertNotNull ( text )
assertThat ( problems. size ( ), is ( 0 ) )
assertEquals ( - 300, scorer. scorePosition ( board, context ) )
assertEquals ( 0, importHandler. cachedImports. size ( ) )
assertEquals ( df. getIRI ( "http://www.w3.org/2001/07/owl#rdf-type" ), mapper. getOntologyIRI ( ). getIRI ( ) )
Assert. assertTrue ( isValid ( resp, FORMAT_JSON, false, 1 ), "Response is not valid" )
assertTrue ( loc. contains ( "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" ) )
assertEquals ( "image", new String ( os. toByteArray ( ) ) )
assertEquals ( "2", elValue )
assertSame ( out, result )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertTrue ( latch. await ( WAIT_SEC, TimeUnit. SECONDS ) )
Assert. assertTrue ( result. toString ( ), result. isSuccess ( ) )
assertEquals ( factory, new FakeResolverProvider ( "bbb://", null ) )
assertEquals ( expected, got )
Assert. assertNull ( "Therapy object was not null", therapy )
AssertiveInstance. init ( )
Assert. assertNull ( userService. getUser ( 502 ) )
ctx. assertEquals ( 1000, res. size ( ) )
Assert. assertFalse ( policy. isResponseCacheable ( request, response ) )
assertEquals ( inc. get ( ). get ( ), outRA. get ( ). get ( ), 0.0 )
assertFalse ( parameter. isNamed ( ) )
assertEquals ( 1, out. size ( ) )
assertEquals ( 2, livePostManager. getAll ( ). size ( ) )
Assert. assertTrue ( this. manager. connectAll ( this. person1, Arrays. asList ( null, this. family1, null, this. family2 ) ) )
assertArrayEquals ( new byte [ ] { 1, 2, 3, 4 }, sink. toByteArray ( ) )
assertThat ( axioms, hasItem ( annotationAssertion ) )
assertEquals ( result, "{7,date,short} {7,time}" )
assertEquals ( value, returned )
assertEquals ( "onetwo", sb. toString ( ) )
assertThat ( unmarshal ( sb ), allOf ( hasEntry ( "mdc key", "mdc" + HACK_ATTEMPT ), hasEntry ( "explicit key", "explicit" + HACK_ATTEMPT ) ) )
assertEquals ( "NOT (x = 5 AND y = 5)", c. toString ( ) )
assertNotNull ( jobProperties )
Assert. assertTrue ( fields. size ( ) > 0 )
assertTrue ( estimator. getRootNodes ( ). size ( ) == 1 )
Assert. assertEquals ( "Application name", "MyApp", dag. getAttributes ( ). get ( Context. DAGContext. APPLICATION_NAME ) )
assertEquals ( "[10:123:1:54]:80", StringUtils. formatSocket ( socket ) )
Assert. assertEquals ( 0, result. getEntities ( ). size ( ) )
assertTrue ( vret. isPassed ( ) )
assertSelect ( tq, binding ( vars, "\\"Alice\\"", "\\"Smith\\"" ) )
assertEquals ( expected, location )
assertFalse ( column. toString ( ). contains ( "id" ) )
assertThat ( taskLogsFilter. decide ( event ), equalTo ( DENY ) )
assertEquals ( 201, c. getResponseCode ( ) )
assertEquals ( "tpc/incoming/2014/02/01/03", path )
assertEquals ( "128.5.0.4/32/10.5.4.0-10.5.15.255", subject. ipAddressFamilyToDer ( resources ) )
assertThat ( p1, is ( p2. inverse ( ) ) )
assertTrue ( lineOffsetExpected. equals ( lineOffset ) )
assertEquals ( m1, m2 )
assertEquals ( "http://example.org/{X}/{Y}//", URITemplates. getUriTemplateString ( f1 ) )
assertEquals ( 1, result )
assertEquals ( 0, recognizedPattern1. compareTo ( recognizedPattern2 ) )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( url ) )
assertEquals ( expected, cls )
Assert. assertEquals ( "True", obs. getValueAsString ( Locale. US ) )
assertEquals ( end - start, 100 * getWaitForRatio ( ), 50 * getWaitForRatio ( ) )
assertTrue ( element. getElements ( ). isEmpty ( ) )
Assert. assertEquals ( 42, result )
Assert. assertEquals ( 8, result. intValue ( ) )
assertEquals ( HttpStatus. CREATED, statusCode )
assertThat ( renderer. getShortForm ( entity ), is ( "owl:backwardCompatibleWith" ) )
assertEquals ( "auditOperationType must not be null.", e. getMessage ( ) )
assertTrue ( reindeerHeight < valoHeight )
BrowserAgentTestUtils. assertBrowserAgent ( containsString ( "Headless" ) )
assertNull ( result )
Assert. assertTrue ( expected. similar ( actual ) )
assertEquals ( expectedId, newId )
Assert. assertEquals ( 1, countNumberOfOccurence ( fullyQualifiedName, "adm2Name" ) )
Assert. assertEquals ( "123\\n\\n\\n\\n[0:1,1:2,2:3]", html )
assertEquals ( geojsonRDD. rawSpatialRDD. count ( ), 736 )
assertEquals ( runtimeInformation. getRuntimeClassName ( ), "SerializableSessionDataParallelLoop" )
assertEquals ( "{\\"alerts\\":[{\\"type\\":\\"GET\\",\\"url\\":\\"http://localhost:8080/actionbazaar-servlet-test/alerts\\",\\"query\\":{\\"user_id\\":\\"1111\\"}}]}", response. toString ( ) )
assertLookup ( breaks, values, srcImg, DataBuffer. TYPE_DOUBLE )
assertEquals ( "Unexpected base URL", appbase. toString ( ), app. getBase ( ) )
assertTrue ( map. isEmpty ( ) )
assertNotNull ( relatedResult )
assertThat ( foundResources, contains ( p2id. getValue ( ) ) )
assertEquals ( expResult, result )
assertEquals ( expected, result )
assertTrue ( actual. isEmpty ( ) )
assertThat ( getCreatedPod ( ). getSpec ( ). getNodeName ( ), is ( "kube-01" ) )
assertEquals ( "127.0.0.1:255.255.255", CommandParser. parseLine ( pattern, 1, "127.0.0.1", "127.0.0.1", "127.0.0.2" ) )
assertTrue ( "Can't use '" + cmd + "' for this command.", help. contains ( cmd ) )
assertFalse ( encoded. endsWith ( "\\n" ) )
assertEquals ( "[(AppNode:test:0>4)>(file:test:6>11)]", sn. stringify ( true ) )
assertEquals ( flavour, flavour2 )
assertViewName ( mav, "redirect:/topics/" + TOPIC_ID )
assertEquals ( 1, map. size ( ) )
assertThat ( result, is ( false ) )
Assert. assertEquals ( 3, queue. size ( ) )
Assert. assertEquals ( 2, violations. size ( ) )
assertEquals ( "Find by UoM label not returning a list with one value descriptor", 1, valueDescriptors. size ( ) )
assertThat ( results, is ( Arrays. asList ( "@[2]-", "@[0]-", "@[1]-", "B", "C" ) ) )
Assert. assertNull ( this. component. resolveEntity ( this. currentDocumentReference ) )
assertThat ( bout. toString ( ), CoreMatchers. not ( containsString ( "Error during quick start:" ) ) )
assertThat ( cut. apply ( pageObject ), is ( true ) )
assertTrue ( resultMessage ( result, PUT ), result. passedValidation ( ) )
assertThat ( Visitors. readable ( query ), is ( "SELECT * FROM A UNION SELECT * FROM B" ) )
assertThat ( comparator. compare ( axiom1, axiom2 ), is ( lessThan ( 0 ) ) )
assertEquals ( "a<V>\\n", found )
assertThat ( event. isStarted ( ), is ( true ) )
Assert. assertTrue ( Models. isomorphic ( expected, actual ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, Right. EDIT, this. doc ) )
assertEquals ( 0.0, dataSet. collect ( ). get ( 0 ), 0.001 )
assertThat ( output. toString ( ), is ( "\\"RUNNING\\"" ) )
Assert. assertEquals ( 3, a. getNumberOfMethods ( ) )
assertEquals ( "Wrong number of visible vars", 1, vars. size ( ) )
Assert. assertEquals ( 1, events. size ( ) )
assertThat ( c1. call ( 1, 2, 3 ), returns ( 19823 ) )
assertEquals ( toml. getDouble ( "double" ), + 5.25D )
Assert. assertEquals ( 0, BufferUtils. size ( data ) )
assertEquals ( d1, d2 )
assertThat ( ListNumbers. toListNumber ( array ), equalTo ( ( ListNumber ) new ArrayShort ( array ) ) )
assertArrayEquals ( data, stream. toByteArray ( ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( params, instance. getParams ( ) )
Assert. assertEquals ( xmlEsperado, icms51. toString ( ) )
assertNotNull ( Query. fetcher ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "UHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 01" ) )
authRule. assertScenario ( scenario )
assertThat ( result, is ( false ) )
assertFalse ( "isLoaded should return false if only element displayed is not " + "required when RequireAll annotation is used.", testView. isLoaded ( ) )
Assert. assertEquals ( "Median of 3 should be used", PivotType. MEDIAN, kthSelector. selectType ( "row" ) )
assertEquals ( DecodeQualification. UNABLE, this. decoder. getDecodeQualification ( stReader ) )
assertEquals ( globalDirectory, result )
Assert. assertEquals ( "Hello ejbthree1852", result )
AsserterWithLazyInitialisationAlgorithm. ASSERTER. assertImmutable ( klasse )
assertTrue (! branch_conditions. isEmpty ( ) )
assertTrue ( "Expected ClusterVirtualIps", obj instanceof ClusterVirtualIps )
assertNotNull ( factory. createContext ( file ) )
assertThat ( underTest. isValid ( Collections. singleton ( "nx-repository-admin-maven2-maven-public-*" ), context ), is ( true ) )
assertThat ( channelDTO, nullValue ( ) )
assertEquals ( expResult, result )
Assert. assertNotNull ( service )
assertNull ( factoryReference. creator ( ) )
Assert. assertSame ( DefaultWroManagerFactory. class, AbstractDecorator. getOriginalDecoratedObject ( victim. getWroManagerFactory ( ) ). getClass ( ) )
assertTrue ( getSingleton ( resource. getAssignments ( ) ). isEmpty ( ) )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + BASE_URI + "Rooms('1')\\"," + "\\"uri\\":\\"" + BASE_URI + "Rooms('1')\\",\\"type\\":\\"RefScenario.Room\\"," + "\\"etag\\":\\"W/\\\\\\"1\\\\\\"\\"}," + "\\"Id\\":\\"1\\",\\"Name\\":null,\\"Seats\\":2,\\"Version\\":3," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + BASE_URI + "Rooms('1')/nr_Employees\\"}}," + "\\"nr_Building\\":{\\"__deferred\\":{\\"uri\\":\\"" + BASE_URI + "Rooms('1')/nr_Building\\"}}}}", json )
assertEquals ( 1, branch_conditions. size ( ) )
assertEquals ( "bear and steady gene test", bearAndSteadyGene. toString ( ) )
assertTrue ( Modifier. isPrivate ( constructor. getModifiers ( ) ) )
Assert. fail ( "IllegalStateException should have been thrown." )
assertTrue ( v == v1 )
assertEquals ( "Generator should have been called once", 1, generator. callCount )
assertThat ( infos. length, is ( 0 ) )
Assert. assertEquals ( "Incorrect title", TITLE_TEXT, fieldSet. getTitle ( ) )
assertEquals ( fields. size ( ), entity. getNrCols ( ) )
Assert. assertEquals ( "8080", result )
assertOperation ( ( ) -> roleClient. getSpace ( this. spaceName ) )
assertFalse ( credentials. isPresent ( ) )
assertEquals ( 3, list. getSize ( ) )
assertFalse ( tokenizer. hasNext ( ) )
assertUrl ( url, "http", "localhost", 443, "/" )
Assert. fail ( )
Assert. assertNull ( loadedModule )
assertEquals ( tagList1, tagList2 )
assertTick ( 1 )
Assert. assertEquals ( m1, m2 )
assertNotNull ( stream )
assertEquals ( "encoded/decoded long do not match", value, decoded )
when ( ). get ( "tests/gateleen/cors/TestResource" ). then ( ). assertThat ( )
assertEquals ( builtSrCollection, srCollection )
assertEqualsIgnoreWhitespace ( drl, RuleModelDRLPersistenceImpl. getInstance ( ). marshal ( model ) )
Assert. assertEquals ( 5, reporter. getSpans ( ). size ( ) )
assertThat ( result. endsWith ( "[inNode=node01,inPort=port01]" ), is ( true ) )
assertEquals ( sqe, result )
assertOut ( expected )
assertEquals ( ints, ints2 )
assertEquals ( timezone, "GMT+03" )
assertThat ( arguments. getResources ( ), hasSize ( 2 ) )
assertEquals ( 1, query ( ). from ( cat ). where ( path. eq ( new Double ( 1 ) ) ). fetchCount ( ) )
assertEquals ( Arrays. asList ( "/dest/test1.txt", "/dest/woo/test2.txt", "/dest/woo/woo.txt" ), walker. paths )
assertTrue ( provider. getSetterNames ( ). contains ( "convencience" ) )
assertEquals ( ProductData. TYPE_INT8, tiffIFD. getBandDataType ( ) )
assertNotNull ( southboundProvider. getDb ( ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertNotNull ( instance. getBackground ( ) )
assertThat ( RpslObjectFilter. diff ( original, updated ), is ( "@@ -1,3 +1,3 @@\\n" + " mntner:         UPD-MNT\\n" + "-description:    descr\\n" + "-mnt-by:         UPD-MNT\\n" + " source:         TEST\\n" ) )
assertEquals ( expResult, result )
assertTrue ( Initialize. checkInit ( fs, sconf, conf ) )
assertEquals ( defaultExtension0. hashCode ( ), defaultExtension1. hashCode ( ) )
assertEquals ( 0, elements. size ( ) )
assertEquals ( c, a )
assertEquals ( JodaBeanUtils. collectionTypeTypes ( test, Person. class ), expected )
Assert. assertEquals ( "1:2.5", ret. toString ( ) )
assertTrue ( result. contains ( "CURRENT LOG APPENDER" ) )
assertNull ( this. testTarget. cutValue ( null ) )
Assert. assertTrue ( dictionary. containsWord ( "word2" ) )
assertEquals ( unwrapClass, unwrappedCacheEntry. getClass ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertThat ( ourServer. getReplicas ( ). get ( 0 ). getReplicas ( ), contains ( connection ) )
Assert. assertEquals ( resourceContent, writer. toString ( ) )
assertNotNull ( SyncListPermission. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( buf. toString ( ), "{\\"a\\":\\"aa\\",\\"b\\":{},\\"c\\":\\"cc\\"}" )
assertTrue ( SpriteUtils. isAliasSprite ( sprite1, sprite1 ) )
assertEquals ( object, cache. get ( url ) )
assertEquals ( TEST_CUSTOM_PAYLOAD, Deencapsulation. getField ( testResult, "payload" ) )
assertUnderflow ( ( long ) x + ( long ) y, result )
assertEquals ( "hello world", result )
assertEquals ( "user2", result )
assertTrue ( "updateAllComponentTreeUIs() - updateAllComponentTreeUIs() - " + rootPane, rootPane. isComponentTreeActive ( ) )
assertNull ( parsedArg )
assertEquals ( "testValue", value )
assertEquals ( 2, all. size ( ) )
assertEquals ( Seconds. of ( - 4 ), test12. dividedBy ( - 3 ) )
assertThat ( results, hasSize ( 0 ) )
Assert. assertEquals ( polygon, result. getValue ( ) )
assertEquals ( val, sut. writeList ( val. getBytes ( ) ) )
Assert. assertSame ( reply1, reply2 )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":\\"insert\\",\\"name\\":\\"Bicycle\\",\\"isDefaultColor\\":\\"red\\",\\"price\\":19.95}},\\"arrayTest\\":[1,2,3]}", result. get ( RETURN_RESULT ) )
Assert. assertEquals ( expected, outValue )
Assert. assertEquals ( PdfTextExtractor. getTextFromPage ( new PdfDocument ( new PdfReader ( new ByteArrayInputStream ( bytes ) ) ). getPage ( 1 ), createRenderListenerForTest ( ) )
arrays. assertContains ( description, new short [ 6 ], null )
assertNotNull ( node )
assertEquals ( 0L, runtimeService. createProcessInstanceQuery ( ). or ( ). involvedGroups ( Collections. singleton ( "nonInvolvedGroup" ) ). involvedGroupsCount ( 2 ). count ( ) )
assertThat ( rendered, is ( test [ 1 ] ) )
Assert. assertEquals ( rtpPacket. getTimestamp ( ), 0L, "Timestamp should be 0." )
assertMockEndpointsSatisfied ( 1, TimeUnit. MINUTES )
assertEquals ( arr, resultArr )
assertEquals ( input. acceptObjectKey ( JsonEvent. STRING ), expected )
assertEquals ( expected, roads )
assertEquals ( String. class, t. getType ( ) )
assertNull ( TYPE_HANDLER. getResult ( rs, 1 ) )
assertEquals ( "The test IDs", first, test )
assertNotNull ( user )
assertEquals ( "John", e. getName ( ) )
Assert. assertEquals ( pong. getPongState ( ), ProxyPongState. PONG )
assertEquals ( expectedJson, rp. toJson ( ) )
assertTrue ( call ( ( ) -> call ( ( ) -> assetRepository. unlinkAsset ( asset. getId ( ) ) ) ) )
assertThat ( result, is ( notNullValue ( ) ) )
assertEquals ( computeTMTextUnitMD5, "9f4e0a7f0a0f0f0f0f0f0f" )
assertEquals ( expected, MultiRFileOutputFormatter. getCompressionType ( ) )
assertEquals ( 1, salaboyTasks. size ( ) )
assertFalse ( results. getAttribute ( ValidationActionTypeService. VALIDATIONS_ACTION_ATTRIBUTE ) == null )
assertThatListContains ( "foo" )
assertEquals ( "km", s )
Assert. assertFalse ( InstanceValidationUtil. hasResourceAssigned ( mock. dataAccessor, TEST_CLUSTER, TEST_INSTANCE ) )
assertTrue ( "Failed to match with compatible IPv6 address", match )
assertXMLEqual ( expected, actual )
assertEquals ( "The custom metadata map should be equal", inputCustomMetadataMap, outputCustomMetadataMap )
assertSame ( o. getValue ( ), MethodTestUtils. callOverriddenMethod ( o, "value" ) )
assertTrue ( consumerFile. exists ( ) )
assertEquals ( "31.Jul.2014 13:58:14 UncaughtException in thread: main (id 1, priority 5)\\n" + "java.lang.RuntimeException: Second\\n" + "\\tat SecondClass.secondMethod(SecondClass.java:12)\\n" + "\\tat SecondClass.firstMethod(SecondClass.java:10)\\n" + "\\tat SecondClass.secondMethod(SecondClass.java:12)\\n" + "\\tat SecondClass.firstMethod(SecondClass.java:10)\\n" + "\\tat FirstClass.secondMethod(FirstClass.java:12)\\n" + "\\tat FirstClass.firstMethod(FirstClass.java:10)\\n" + "\\tat FirstClass.secondMethod(SecondClass.java:10)\\n" + "\\tat FirstClass.firstMethod(FirstClass.java:10)\\n" + "\\tat SecondClass.secondMethod(SecondClass.java:10)\\n", exceptionTextPane. getText ( ) )
assertNotNull ( object )
assertEquals ( expStr, valStr )
assertFalse ( jsonElement. isJsonNull ( ) )
datesWithCustomComparisonStrategy. assertIsInTheFuture ( someInfo ( ), actual )
assertEquals ( 5, record. size ( ) )
Assert. assertEquals ( "Region (RS Index)", command. getLoad ( ). getLevelClass ( ). getLevelTypeString ( ) )
assertEquals ( table. getColumn ( 1 ). getIdentifier ( ), adapter. getColumnIdentifier ( - 1 ) )
assertThat ( ( Integer ) prop0. getClass ( ). getMethod ( "getSeedRatio" ). invoke ( prop0 ), is ( 1500 ) )
assertThat ( "response contains a non-empty fullName", StringUtils. isNotBlank ( response. getFullName ( ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertThat ( results, is ( new String [ ] { "A,B", "C,D" } ) )
assertEquals ( testName + testExtension, actual )
assertThat ( fe, notNullValue ( ) )
SetSpanReceiver. assertSpanNamesMatch ( expectedSpanNames, buf )
assertEquals ( params. getResponseObj ( ), response )
Assert. assertNotNull ( connection. getWarnings ( ) )
assertNotNull ( ConfigUtils. newInstance ( this, "testProperty", InnerClass. class ) )
assertThat ( formatterOutput, sameJSONAs ( expected ) )
Assert. assertEquals ( expected, result )
Assert. fail ( "RuntimeException should be thrown" )
assertThat ( actualResult, equalTo ( expectedResult ) )
assertNotNull ( presenter. listEditor )
Assert. assertEquals ( Arrays. asList ( "unit", "command" ), commands. getArgs ( ) )
assertEquals ( desc. name ( ), "Linting sensor for TypeScript files" )
assertTrue ( outAny. equal ( inAny ) )
assertTrue ( versions. contains ( version ) )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
AssertiveInstance. init ( )
assertTrue ( str. contains ( "rdf:type rdf:resource" ) )
assertTrue ( config. isAdvancedClusterConfigSet ( ) )
assertFalse ( newVrp. getInitialVehicleRoutes ( ). containsKey ( "4" ) )
Assert. assertEquals ( expected, actual )
assertEquals ( expected, actual )
Assert. assertNotNull ( ewd )
Assert. assertEquals ( Redirect. Status. USE_PROXY. intValue ( ), response. status )
assertEquals ( ( ( Number ) records. get ( 0 ). get ( "value" ) ). intValue ( ), 4 )
Assert. assertEquals ( 1, list. size ( ) )
assertTrue ( "Looks like the expected service XML isn't correct", serviceXml. length ( ) > 0 )
assertEquals ( "foo", res. get ( "foo" ) )
assertEquals ( "{\\"d\\":{\\"EntitySets\\":[" + "\\"Employees\\",\\"Teams\\",\\"Rooms\\",\\"Managers\\",\\"Buildings\\"," + "\\"Container2.Photos\\"]}}", getBody ( response ) )
assertEquals ( expected, result )
assertEquals ( "https://java.example.com/buz/qux", got. toString ( ) )
assertThat ( ChatColor. stripColor ( subject. toString ( ) ), is ( expected. toString ( ) ) )
Assert. assertEquals ( null, new CompareTool ( ). compareByContent ( output, cmp, outputPath, "diff" ) )
assertEquals ( "b", ( ( Text ) ext. getValue ( null, obj ) ). getText ( ) )
assertEquals ( true, bean. getPrimitiveBoolean ( ) )
assertEquals ( "columnControl must have a ui resource", UIResource. COLUMN_CONTROL_BUTTON_UI, control. getColumnControlUIResource ( ) )
assertTrue ( this. remotingClient. isConnected ( ) )
assertNotNull ( VirtualSchemaTO )
assertThat ( ruleManager. getRule ( id [ 0 ] ), is ( notNullValue ( ) ) )
assertTrue ( propertiesConfigurationProperties. remove ( key ) )
Assert. assertEquals ( TimeZone. getTimeZone ( "America/New_York" ), config. getTimeZone ( ) )
assertEquals ( TEST_2007_07_14_PONE, t )
assertSuccess ( services. executeOperation ( udpOperation ) )
Assert. assertFalse ( compatibilityResult. isCompatible ( ) )
assertEquals ( "SELECT * WHERE {?user?_c2?_c3 ;?_c4?user_id. FILTER(?user_id!=?_c6) }" )
Assert. assertTrue ( testFailed )
assertEquals ( "Privacy policy retrieved but it should not be.", null, requestorService. getPrivacyPolicy ( targetedNode ) )
assertNull ( transaction )
Assert. assertEquals ( "null", writer. toString ( ) )
Assert. assertEquals ( new IntNode ( 1 ). add ( new IntNode ( 2 ). add ( new IntNode ( 3 ) ) ), node )
assertContains ( indels, 100, "GGATCATTACA" )
assertCallTree ( callTree, callStack. getStackEvents ( ), true )
assertMockEndpointsSatisfied ( )
assertNotNull ( objJPAEdmProperty. getEdmKeyView ( ) )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"record\\":{\\"url\\":\\"http://sendme.com/tropo\\",\\"beep\\":true,\\"interdigitTimeout\\":5.0,\\"maxTime\\":300.0,\\"asyncUpload\\":true}}]}" )
Assert. assertEquals ( new Partition ( "0-0" ), partition )
assertBridJFaster ( pBridJ, pJNA, pNIO, 0.0001 )
assertSame ( error, failingStream. getError ( ) )
assertEquals ( expectedQuery, actualQuery )
tc. assertEquals ( thread, Thread. currentThread ( ). getName ( ) )
assertTrue ( result. getResponse ( ). getContentAsString ( ). contains ( "isbn=true" ) )
assertTrue ( ex. isPrime ( 37 ) )
assertEquals ( "Return the correct page number", 1, projectService. getSpecificProjectPage ( projectId, principal ) )
assertThat ( result, is ( "prevComponent" ) )
assertEquals ( 15, result )
assertEquals ( "simpleList:\\n" + "  - Value1\\n" + "    - Value2\\n" + "    - Value3\\n", root. toString ( ) )
connection. assertBufferEndsWith ( "Option required" + Config. getLineSeparator ( ) )
Assert. assertTrue ( notAnOjbObject. getClass ( ). getName ( ) + " is not a JPA Object", PersistenceStructureService. isBeanClassPresent ( notAnOjbObject. getClass ( ) ) )
assertEquals ( slice1Assert, slice1Test )
assertEquals ( "192.168.0.123/24", event. getIp ( ). getAddress ( ) )
verifier. assertFilePresent ( GENERATED_SCHEMA )
assertEquals ( "Expected another type of analyzer", StandardAnalyzer. class, analyzer. getClass ( ) )
assertEquals ( meta. getTransName ( ), subTrans. getName ( ) )
assertTokenStreamContents ( ts, new String [ ] { "vitajt", "vo", "wikip茅di" }, new int [ ] { 0, 11 }, new int [ ] { 0, 11 }, null, new int [ ] { 1, 1 }, null, new int [ ] { 0, 1 }, null, null, 15, null, null, true )
assertEquals ( count, actual )
Assert. assertEquals ( msg, result )
assertEquals ( expectedResult, verifyOscar. invoke ( audit ) )
assertScenario ( )
Assert. assertEquals ( "class1", title )
assertEquals ( 2., matrix. getTransportCost ( loc ( 1 ), loc ( 2 ), 0.0, null, null ), 0.1 )
assertEquals ( "000001", r )
assertEquals ( list, o )
assertThat ( replacedQuery, is ( "a =? AND (`b.c` =? OR d IN?) ORDER BY x" ) )
assertEquals ( "All changes", ( Integer ) 10, ref. deref ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "myValue", store. get ( "test", "test", String. class ) )
assertEquals ( c1, c2 )
Assert. areEqual ( 1, st. getInt ( 1 ), "验证无数据" )
assertEqualsIgnoreWhitespace ( expected, real )
assertTrue ( baselineData. isEmpty ( ) )
Assert. assertNull ( actual )
assertThat ( response. getHits ( ). get ( 0 ). toString ( ), equalTo ( "[{\\"name\\":\\"Arpa Duke\\",\\"type\\":\\"domain\\",\\"id\\":\\"d8ebd23734871-514285-46602-9f2424061\\",\\"name\\":\\"arpa 1-5ebd2373487\\"}]" ) )
assertObjectEquals ( "{type:'object',additionalProperties:{type:'object',properties:{f1:{type:'string'}}},description:'org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$BeanMap<java.lang.String,org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$SimpleBean>'}", s. getSchema ( BeanMap. class ) )
Assert. assertEquals ( signature, JsonUtil. writeValueAsString ( desc ) )
assertEquals ( "SessionListener session count must be 0", sessionCount, SessionListener. getSessionCount ( ) )
assertThat ( TestI18n. testMessage. text ( "Test", "Message" ), is ( "Message Test Message" ) )
assertTrue ( "Ognl runtime version", majorJavaVersion >= 1 )
assertEquals ( DataDictionary. Type. ANY, dd. getType ( ) )
assertSamples ( )
this. assertVerification ( )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( optionB, SelectListUtil. getFirstOption ( options ) )
assertEquals ( 2, tokens. size ( ) )
assertEquals ( 0.0, FrontUtils. distanceToClosestPoint ( point2, front ), EPSILON )
assertTrue ( toml. getList ( "a" ). isEmpty ( ) )
assertNull ( "Wrong date format", conf. getDate ( DataConfiguration. DATE_FORMAT_KEY ) )
assertTrue ( Double. isNaN ( percentile. evaluate ( emptyArray ) ) )
assertEquals ( "org.opengis", resources. getString ( "metadata.language" ) )
assertEquals ( expectedTextResult, new String ( result ) )
assertTrue ( true )
assertEquals ( expected, transformed )
assertEquals ( first, builder. getValue ( ) )
assertThat ( bomb. state ( ), is ( "kaboom!" ) )
assertNotNull ( colportor. getId ( ) )
Assert. assertEquals ( urlEsperada, nota. getInfoSuplementar ( ). getQrCode ( ) )
assertTrue ( p. sameAs ( pDft ) )
assertEquals ( true, p. getActive ( ) )
assertTrue ( dbCon. contains ( "some_id" ) )
assertTrue ( "Successful permission check was not logged", loggedSuccessfulPermissionCheck ( AUDIT_LOG_FILE, USER ) )
assertEquals ( 0, userList. indexOf ( user ) )
assertEquals ( "Failed to ping on closed port", ProbeStatus. FAIL, status )
assertEquals ( TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. NOT, TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. GTE, v, TERM_FACTORY. getConstantLiteral ( "1", XSD. LONG ) ) ), translation. get ( 0 ) )
mockery. assertIsSatisfied ( )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + fileName, sourceFolder + "cmp_" + fileName, destinationFolder, "diff_" ) )
assertEquals ( "ThinkTimeStep : , " + fixture. getMinTime ( ) + ", " + fixture. getMaxTime ( ) )
Assert. assertEquals ( "��瑁�|��|��瑁�", words )
assertEquals ( cells. getTable ( ), "myTable" )
assertEquals ( expResult, result )
assertEquals ( stat, fromJson )
assertEquals ( ConnAckMessage. UNNACEPTABLE_PROTOCOL_VERSION, m_returnCode )
assertTrue ( string, string. contains ( "Undefined parameter: foo" ) )
assertFalse ( validator. isValid ( resource, MetadataSection. GEOGRAPHIC_COVERAGE_SECTION ) )
assertNull ( auth. getIssuer ( ) )
assertEquals ( URLDecoder. decode ( dest, "utf-8" ), src )
assertThat ( Modifier. isPrivate ( constructor. getModifiers ( ) ), is ( true ) )
assertTrue ( "The mesage should have been received by the client", mesageReceivedByClient )
assertTrue ( page. asXml ( ). indexOf ( "myString" )!= - 1 )
assertFalse ( "Expected ListSchema integer validation failure did not succeed", schema. validate ( integerEntity ) )
assertEquals ( color, osmt. getBackgroundColor ( speed ) )
assertThat ( "Locations created with identical paths and different properties must be equal", locationA1. equals ( locationA2 ), is ( false ) )
assertEquals ( "Failed to generate invocation on literal", "foo.toString()", result )
assertThat ( pactFoder. exists ( ), is ( true ) )
assertEquals ( CubeEdge. i, edge )
assertEquals ( expecting, found )
assertEquals ( unitTestTablePojoRead. isBooldata ( ), true )
assertEquals ( expResult, result )
assertEquals ( p, p2 )
Assert. assertEquals ( entity. ttl, reloaded. ttl )
assertThat ( changes. size ( ), is ( 1 ) )
Assert. assertTrue ( iterated )
assertTrue ( multiMap. remove ( key, value ) )
assertTrue ( messages. stream ( ). anyMatch ( p -> p. getMessageType ( ). equals ( DMNMessageType. ERROR ) && p. getSourceId ( ). equals ( "invalid_source" ) && p. getSourceId ( ). equals ( "invalid_target" ) )
assertEquals ( true, testClass. isUnableToCreateMoreTransactions ( ) )
assertThat ( xray. getInterfaceMethods ( ). keySet ( ), hasSize ( 2 ) )
assertEquals ( expResult, result )
Assert. assertTrue ( "User should be logged in!", browser. findElements ( By. xpath ( "//li[contains(text(), 'Warp Login', 'Main', " + "Username: demo, " + "Password: demo')]" ) ). size ( ) > 0 )
assertThat ( versionedIdsOf ( units ), bagEquals ( versionedIdList ( REFERENCED_BUNDLE_V1, OPTIONAL_BUNDLE ) ) )
assertThat ( response. getStatus ( ), is ( 301 ) )
assertTrue ( testResults. getInvoked ( ) )
Assert. assertEquals ( 1, term. getConceptReferenceTermMaps ( ). size ( ) )
assertNotNull ( resultMap )
assertTrue ( cv. supports ( Date. class ) )
assertEquals ( 0.0, score, 0 )
Assert. assertEquals ( 0, found )
assertEquals ( 10, toTest. deserialize ( ) )
Assert. assertNull ( result )
assertEquals ( 10, instrumentation. getMaxBlockTransferRate ( ) )
assertThat ( driver. findElement ( MobileBy. id ( "progress_bar_report" ) ). getText ( ), is ( "100%" ) )
assertNotNull ( nestedAnnotation )
AssertAnnotations. assertToken ( tokens, select ( jcas, Token. class ) )
assertEquals ( 654321, ws. getReceiveBufferSize ( ) )
assertFalse ( output. isEmpty ( ) )
Assert. assertEquals ( 200, handler. getMessages ( ). get ( 0 ). getStatus ( ) )
assertEquals ( 2, jobs. size ( ) )
assertTrue ( "isDisplayed should return true if at most a number of elements are displayed as" + " specified to be required, with any number of non-displayed elements.", element. isDisplayed ( ) )
assertEquals ( expected, getString ( TestIElementImpl. example ( ) ) )
assertEquals ( Sets. newHashSet ( testWorkflow1v1, testWorkflowPhylogenomics ), workflows )
assertArrayEquals ( TEObjectUtil. TE_LSP_ASSOCIATION_2, ByteArray. getAllBytes ( output ) )
assertArrayEquals ( huginProbabilities. toArray ( ), amidstProbabilities. toArray ( ) )
assertEquals ( "E.25", orgl. getOrg ( "E.25" ) )
assertTrue ( smsSettings. isConfigured ( ) )
assertThat ( currentPage. isCurrentPageAt ( ), is ( true ) )
Assert. assertEquals ( 3, result )
Assert. assertEquals ( "21175/29739", magic. toString ( ) )
assertEquals ( "server-name", listParser. next ( ) )
assertEquals ( "TGVhcm4uIEVhdC4gQ29kZS4=", encodedURL )
assertTrue ( infoList. isEmpty ( ) )
assertNull ( future. get ( ). getResult ( ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( query, expectedQuery ) )
Assert. assertTrue ( users. size ( ) >= 0 )
Assert. assertEquals ( "Unexpected coverage: ", 2d / 3d, best. getCoverage ( ), 0.001 )
assertTrue ( permissionEvaluator. hasProjectPermission ( authentication, "project", Permission. EDIT_PAGE ) )
assertEquals ( "", WebUtilities. mapToQuery ( map ) )
assertEquals ( "3", new RatingFunction ( ). transform ( input ) )
assertSame ( base. abs ( base ), Duration. ZERO )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 07" ) )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertEquals ( activityList, result )
assertTrue ( userCanDeleteBranch )
assertThat ( timeline. getLastUpdate ( ), is ( 0L ) )
assertEquals ( "Select scripts are not the same", expectedMergeSimple ( ), testDialect. convertStatementToSQL ( stmt ) )
assertEquals ( "1:xxxy\\n", found )
assertEquals ( expected, bos. toString ( ) )
org. junit. Assert. assertEquals ( expected, tHandler. getLastRecord ( ). getThrown ( ) )
assertEquals ( "Simple Report With OutputWriter =================================", FileUtils. readFileToString ( outputFile, Charset. forName ( "UTF-8" ) ) )
assertNumEquals ( 0, mdd. calculate ( series, tradingRecord ) )
Assert. assertEquals ( 0, violations. size ( ) )
assertEquals ( "{ \\"hello\\" : [1, 2]}", writer. toString ( ) )
assertNotNull ( key )
assertRoundtrip ( input, false )
assertEquals ( ( 2 + 26 + 57 + 77 + 90 + 114 + 144 + 20 ), violation, 0.01 )
assertEquals ( Boolean. valueOf ( true ), result )
assertNotNull ( aCSS )
assertNotNull ( "Should not be null", parser )
assertFalse ( rule. shouldProceed ( request, response ) )
assertEquals ( displayer. isRefreshOn ( ), false )
assertAnnotations ( 2, Quantity. class, new TestQuantity ( 0, "400 square millimetres", 400, "mm^2", 400 * Area. MM2_TO_M2, "m^2", "area" ), new TestQuantity ( 1, "400mm^2", 400, "mm^2", 400 * Area. MM2_TO_M2, "m^2", "area" ) )
assertTrue ( true )
Assert. assertFalse ( "multipart/byteranges". equalsIgnoreCase ( elt. getName ( ) ) )
assertEquals ( "id", id )
assertEquals ( 1, manager. getAll ( ). size ( ) )
assertFalse ( status. equals ( HardActivityConstraint. ConstraintsStatus. FULFILLED ) )
assertNull ( lookUpManager. lookUpWorkingObjectOrReturnNull ( object ) )
assertEquals ( l1, l2 )
approver. assertApproved ( data, new TableFormatter ( ). withHeaders ( "Content-Type", "application/octet-stream" ) )
assertEquals ( attributes, repositoryRecord. getCurrent ( ). getAttributes ( ) )
assertEquals ( expected, sanitized )
assertTrue ( result. toString ( ). contains ( "HEALTHY" ) )
assertEquals ( "Expected response not seen.", 404, response. getStatus ( ) )
assertEquals ( "topology/nodes", WebUtilities. getDestinationCompId ( path ) )
assertThat ( sut. getName ( ), is ( "SUT" ) )
assertEquals ( Arrays. asList ( "first", "second-0", "second-1" ), sink1. getOutputs ( ) )
assertNull ( person2 )
assertNotNull ( "IDPSSODescriptor is not null", sp )
context. assertIsSatisfied ( )
Assert. assertEquals ( 200, response. status )
assertEquals ( "OS 4.1.2", os )
assertTrue ( i + ", " + src. getAbsolutePath ( ), src. delete ( ) )
assertEquals ( 10L, target. get ( ). longValue ( ) )
Assert. assertTrue ( pss. toString ( ). contains ( "test" ) )
assertThat ( result, is ( "((item_0:* IN *)" ) )
Assert. assertEquals ( "", updatedUser. getUserInfo ( ) )
assertTrue ( AcceptanceTestUtil. isInterested ( peerComponent, remoteWorkerOID. getServiceID ( ), remoteWorkerMonitorOD. getDeploymentID ( ) ) )
assertEquals ( 1.2e22, ( ( DoubleValue ) ( ( SelectExpressionItem ) ( ( PlainSelect ) select. getSelectBody ( ) ). getSelectItems ( ). get ( 0 ) ). getExpression ( ) ). getValue ( ), 0 )
assertTrue ( "Found nested declarations for a reserved character", nested. containsKey ( "address" ) )
assertEquals ( nonAdminTestingAccountClientId, answer. getReturnVal ( ) )
assertEquals ( true, ( allforums. size ( ) > 0 ) )
assertTrue ( startState )
assertThat ( res. toString ( ), is ( equalTo ( "my last response transactionId is: 3" ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + destName + ".pdf", sourceFolder + "cmp_" + destName + ".pdf", destinationFolder, "diff_" ) )
assertEquals ( "", result )
assertFalse ( iter. hasNext ( ) )
assertThat ( partitionKeyValue. toJson ( ), equalTo ( mapper. writeValueAsString ( Collections. singletonList ( ( byte ) 0x7A ) ) ) )
assertEquals ( originalFetchCount, timeline. getFetchCount ( ) )
assertTrue ( "The new datstream was not created successfully",! page1. asText ( ). contains ( "abcdef" ) )
Assert. assertEquals ( "http://localhost/" + SonarNavigator. RESOURCE_PATH + "123", url )
assertThat ( "missing owner detected", validation. hasErrorAbout ( "no", "owner" ) )
assertEquals ( testSet, monitorNames )
assertThat ( findFeature ( features, "ChangeAvailability" ), is ( instanceOf ( ChangeAvailabilityFeature. class ) ) )
assertEquals ( "twitter/tweet/_search", search. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertReplacement ( input, regex, replacement, lookBehind, capacityCharBuf, expectedOutput, flags )
assertEquals ( V8Value. V8_OBJECT, type )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
Assert. assertTrue ( isValid, "Poll with empty title and empty items must be valid" )
assertEquals ( expected, toJSON ( series ) )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 0 ) ) )
assertThat ( request. getTargetClass ( ). getName ( ), is ( equalTo ( clazz. getName ( ) ) ) )
assertEquals ( null, params. getString ( new Parameter ( "foo.alias" ), null ) )
assertThat ( o, nullValue ( ) )
Assert. assertEquals ( entity. publicValue, actualValue )
Assert. assertEquals ( false, result )
Assert. assertTrue ( "builder should have empty topics", topicCollection. isEmpty ( ) )
Assert. assertNotNull ( cu )
Assert. assertNull ( new CompareTool ( ). compareByContent ( filename, sourceFolder + "cmp_copyFields01.pdf", destinationFolder, "diff_" ) )
assertEquals ( "The average should be equal to the original value", Double. valueOf ( 1.5 ), outputValues. get ( 0 ), 0.0000001 )
assertTrue ( Arrays. equals ( data, ( boolean [ ] ) deserialize. readObject ( boolean [ ]. class ) ) )
assertions. containsSequence ( sequence )
assertEquals ( expected, actual )
assertEquals ( expResult, result )
assertNotNull ( myBean )
assertThat ( errors, hasFieldErrors ( "givenName", "GivenName.invalid" ) )
Assert. assertEquals ( 0, stat )
Assert. assertEquals ( shard, reconnectCohort. getShardID ( ) )
Assert. assertEquals ( 1, new QueryRunner ( this. em ( ). unwrap ( DataSource. class ) ). query ( "SELECT COUNT(*) FROM Foo", new SingleValueHandler < Number > ( ) ). intValue ( ) )
assertTrue ( "failed to delete file", f. toPath ( ). delete ( pathOnFileSystem ) )
assertEquals ( "2", table. getTfoot ( ). getTr ( ). get ( 0 ). getColspan ( ) )
assertLongArrayEquals ( expected, toLongArray ( splits ) )
assertEquals ( "Must be Equal", interfaceTypeClass, InterfaceTypeStruct. class )
Assert. assertEquals ( 2, tables. size ( ) )
assertThat ( rowCount, is ( 0L ) )
assertEquals ( 0, tp. size ( ) )
assertEquals ( "non-object", b. nonObject ( new Object [ ] { } ) )
assertGameOver ( )
Assert. assertEquals ( "master", hudsonMasterFinder. findNode ( "", masterNode ). getName ( ) )
assertNull ( spanBuilder )
assertFalse ( isAuthenticated )
assertFalse ( voter. voteMatch ( affiliation, organization ) )
Assert. assertTrue ( queueResponse. isOk ( ) )
assertEquals ( 0.5 * 0.4, instance. inclusiveHypervolume ( ind ), 0.0 )
assertEquals ( "und", metadata. getLanguage ( ) )
Assert. assertTrue ( comparator. compare ( cell2, cell1 ) == 1 )
assertEquals ( expResult, result )
assertEquals ( expected, actual )
assertThat ( list. size ( ), is ( 2 ) )
assertEquals ( expectedResult, verifyTomcat. invoke ( audit ) )
Assert. assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \\"A multi\\\\nline string\\". }", query. toString ( ) )
Assert. assertEquals ( 2, prefixes. size ( ) )
assertTrue ( cut. getAttributes ( ). isEmpty ( ) )
assertEquals ( expectedIds, Ids )
assertServiceResource ( resource )
Assert. assertEquals ( icmsSetado, icms. getIcmssn102 ( ) )
assertContains ( e. getMessage ( ), "'id'" )
assertThat ( bitSet. isOneCharacter ( ), is ( true ) )
Assert. assertEquals ( false, objectSet. isEmpty ( ) )
assertThat ( browsers. size ( ), is ( 2 ) )
assertNotNull ( photoRepository )
Assert. isTrue ( true )
assertSame ( Robolectric. getShadowApplication ( ), getController ( ) )
assertEquals ( expected, ListUtils. generateCommaSeparatedList ( actual ) )
assertEquals ( profile. getName ( ), copy. getName ( ) )
assertEquals ( "Select with order by", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
Assert. assertEquals ( 0, analyser. getWaitingTimeAtActivity ( route. getStart ( ), route ), 0.01 )
Assert. assertEquals ( "center", cell. getHorizontalAlign ( ) )
assertThatSql ( query, is ( "SELECT nodes.col1,nodes.col2 FROM table AS nodes" ) )
assertEquals ( 4.3, result, 0.000001 )
assertThat ( end, is ( PlainDate. of ( 2011, Month. DECEMBER, 31 ). at ( PlainTime. midnightAtStartOfDay ( ) ). inTimezone ( ZonalOffset. ofHours ( AHEAD_OF_UTC, 2 ) ) ) )
repository. findByLastname ( "White" ). test ( ). awaitCount ( 2 ). assertNoErrors ( )
Assert. assertEquals ( h1. toString ( ), h2. toString ( ) )
Assert. assertEquals ( createArrayNode ( 3, 4 ), result )
assertTrue ( "Path for added node is wrong: actual=" + listener. getEvents ( ). get ( 0 ). getPath ( ) + ", expected=" + addedNode. getPath ( ), containsPath ( listener, addedNode. getPath ( ) ) )
assertTrue ( span. asText ( ). contains ( "NullPointerException" ) )
assertTrue ( tocFile. exists ( ) )
assertEquals ( 0, _receiver. getReceivedEvents ( ). size ( ) )
assertEquals ( vr. getValidity ( ), Validity. VALID )
assertEquals ( 1, testResults. getDeliveries ( ) )
Assert. assertEquals ( 1, statusTuples. size ( ) )
assertEquals ( expResult, result )
assertEquals ( expectedOutput, actualOutput )
Assert. assertEquals ( 0, terms. size ( ) )
assertNull ( eventScanConfig )
assertTrue ( localServer. get_jca_server ( ). get_jca_server_id ( ). equals ( oid ) )
assertViolationsThat ( report. getValidationViolations ( ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ), equalTo ( "Root definition has no docTitle" ) )
assertTrue ( nodes. split ( "\\n" ). length > 0 )
assertEquals ( 1, eventSubscriptions. size ( ) )
assertThat ( issues, is ( empty ( ) ) )
assertEquals ( 0.0, tsne. mean ( X [ 3 ] ), epsilon )
assertNotNull ( formattedMessage )
assertSomeDatas ( expected, actual )
assertEquals ( message, 1, sink. getReceivedBuildSucceededCount ( ) )
assertEqualsIgnoreWhitespace ( expectedDRL, RuleModelDRLPersistenceImpl. getInstance ( ). marshal ( model ) )
assertEquals ( data, new HelloWorldEncoder ( ). encode ( data ) )
assertNull ( data )
Assert. assertNotNull ( zipfile )
Assert. fail ( "WaitForExistenceInteraction.perform should have thrown a TimeoutException" )
assertThat ( subject. getMaxSerial ( ), is ( 1 ) )
Assert. assertEquals ( "d36e8f598e0c4b9e0f598e2b9e3b9e0f0a", result. toStringUtf8 ( ) )
assertEquals ( 4, extension. getHandlersForExceptionType ( IllegalArgumentException. class, bm, bm, bm. size ( ), bm ). size ( ) )
Assert. assertEquals ( newLastModificationTimeMs, inodeDirectory. getLastModificationTimeMs ( ) )
assertEquals ( expResult, result )
assertEquals ( "hello world", extractedString )
assertTrue ( "testCanEditBooleanAuth2_useInheritance 0", collectionService. canEditBoolean ( context, collection ) )
assertEquals ( 2, cache. listPrivileges ( null, null, new Server ( "server1" ), new Server ( "server1" ), new Server ( "server1" ), new Server ( "server1" ), new Server ( "uri", "hdfs:///uri/path1" ), new Server ( "uri", "hdfs:///uri/path2" ) ). size ( ) )
assertEquals ( expected, actual )
assertFalse ( cli. getCredentials ( ). isPresent ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import java.util.Collection;\\n" + "import java.util.List;\\n" + "import java.util.Collection;\\n" + "public abstract class ClazzName extends java.util.Collection {\\n" + "    public List<Integer> asList(Collection<Integer> values);\\n" + "  }\\n" + "}", cu. toString ( ). trim ( ) )
assertThat ( localization. getLocale ( ), equalTo ( PT_BR ) )
assertEquals ( false, attributes. other ( ) )
assertThat ( result, is ( notNullValue ( ) ) )
assertTrue ( latch. await ( 4, SECONDS ) )
assertEquals ( f1, f2 )
assertEquals ( expecteds, actuals )
assertTrue ( "InetSocketAddress should be the same as in VirtualBox", inetSocketAddress1 == inetSocketAddress2 )
assertNotNull ( conf. getClassLoader ( ) )
assertEquals ( packet, p )
assertEquals ( "25", empty. getCommand ( ) )
assertEquals ( ForwardSecrecyBlackList. CipherIdentifierType. AES_128_CBC_SHA256, cipher. getCipherIdentifier ( ) )
assertEquals ( "Hello ^^there", ResponseBodyInterpolator. interpolate ( "Hello ^^there", req ) )
assertArrayEquals ( expected, result )
assertEquals ( "file://localhost/etc/password", one. absUrl ( "href" ) )
assertEquals ( address, address2 )
assertThat ( domain. getValidationFailures ( resourceLookup ), empty ( ) )
Assert. assertEquals ( stop, receivedStop )
assertFalse ( "SystemTray is not supported", SystemTray. isSupported ( ) )
assertNotNull ( result )
assertNotNull ( "Previous step failed", uri_userInstance )
assertEquals ( expected, actual )
assertEquals ( Proxy. NO_PROXY, result. get ( 0 ) )
assertNull ( result )
assertEquals ( expected, out )
assertEquals ( expected, actual )
assertThat ( mFileHelper. mImageFile, is ( nullValue ( ) ) )
assertNull ( store. get ( key1 ) )
assertThat ( matcher. matches ( "{\\"number\\":1}" ), is ( false ) )
assertEquals ( 1, dir. getNextServer ( ) )
assertThat ( duration. isNegative ( ), equalTo ( true ) )
assertEquals ( "* :123: Arthur Dent\\nHe's a jerk.\\nA complete kneebiter.", toWikiText ( note ) )
assertEquals ( expResult, result )
assertThat ( actualPort, is ( expectedPort ) )
Assert. assertTrue ( "The rate of the false positive item were not equal to the expected value", falsePositiveRate < 0.9 )
assertEquals ( "", cfg. story ( ) )
assertThat ( e. getCause ( ), Matchers. instanceOf ( ArangoDBException. class ) )
assertNull ( start. getErrorResponseBody ( ) )
assertEquals ( "test", content )
Assert. assertEquals ( "Unknown source queue", MicroPipelineValidationResult. UNKNOWN_SOURCE_QUEUE, new MicroPipelineValidator ( ). validateComponent ( cfg, queues, components ) )
assertEquals ( 0, inclusionTerms. size ( ) )
assertEquals ( logs. get ( i ), message )
Assert. assertEquals ( expectedResult, resultString )
assertThat ( DateInterval. parseISO ( "2012-01-01/2014-02-14" ), is ( expected ) )
assertions. containsSequence ( sequence )
assertEquals ( 1, result. size ( ) )
assertThat ( tracker. findTask ( itemTask. getName ( ) ), is ( itemTaskEdited ) )
assertNotNull ( f. getRecordWriter ( config, mockCollection, new Holder ( "test", "test" ), ugi ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
Assert. assertTrue ( unicodeString. equals ( unicodeString ) )
assertThat ( output, containsString ( "FHIR resource created:" ) )
assertEquals ( "5", exec. getNumMapTasks ( ) )
assertTrue ( fixture. hasSubscriptionId ( ) )
assertParseOneDoc ( editor, "DOC(0): ", "  KEY(0): world:", "    KEY(2): europe:", "      KEY(4): france:", "      KEY(4): cheese", "      KEY(4): belgium:", "      KEY(4): beer", "      KEY(2): canada:", "      KEY(4): montreal: poutine", "      KEY(4): vancouver:", "      KEY(4): salmon", "      KEY(2): moon:", "      KEY(2): moonbase-alfa:", "      RAW(-1): moonstone" )
Assert. assertArrayEquals ( "original array not equals compress/decompressed array", result, bytes )
assertThat ( status, equalTo ( GGDataSource. Status. OK ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "xfdfWithFieldsWithValue.pdf", sourceFolder + "cmp_xfdfWithFieldsWithValue.pdf", destinationFolder, "diff_" ) )
assertEquals ( "XQuery: " + query, 1, result. getSize ( ) )
assertThat ( count, is ( 1L ) )
Assert. assertEquals ( 4, possibleOutcomes. size ( ) )
assertEquals ( expectedExperimentContents, testExperimentResults. getExperiments ( ) )
assertNotNull ( result )
assertForbiddenResponse ( response )
assertTrue ( true )
assertArrayEquals ( expecteds, actuals, 1e-4f )
assertEquals ( expected, uri. toString ( ) )
assertXMLIdentical ( new Diff ( result, combineWithIdKey ( recessive, dominant ) ), true )
assertEquals ( lines - 1, results )
assertTrue ( ndefMessage. getNdefRecords ( ). length == 0 )
assertThatNothingHappened ( jobExecution, lastCreatedJobId, 1 )
assertEquals ( "Wrong result", value, interpolator. interpolate ( TEST_NAME ) )
assertTrue ( "it should contain 1 config", all. size ( ) == 1 )
Assert. assertEquals ( 1, dependences. size ( ) )
assertEquals ( "RED BLACK YELLOW", builder. toString ( ) )
assertNotNull ( strategy )
assertFalse ( node. equals ( "abc" ) )
assertThat ( testResponse, is ( expectedResponse ) )
assertSame ( o. getValue ( ), MethodTestUtils. callOverriddenMethod ( o, "value" ) )
assertEquals ( escapedFilename, response )
assertEquals ( RaftState. Leader, follower. getState ( ) )
assertEquals ( BAD_REQUEST_400, response. getStatus ( ) )
assertEquals ( 5, calculator. getResult ( ) )
assertEquals ( response. asString ( ), SUCCESS, response. get ( OUTCOME ). asString ( ) )
assertXMLIdentical ( new Diff ( result, combineWithIdKey ( recessive, dominant ) ), true )
assertNull ( res )
assertEquals ( "{\\n    key2: value2\\n}", target. toString ( ) )
assertThat ( resultedQuery, is ( expectedQuery ) )
assertNotNull ( "Clinical data is null", clinicalData )
Assert. assertNull ( alertMessage )
assertEquals ( new Rectangle ( - 2, 0, 10, 100 ), pos )
assertTrue ( r1 instanceof PublicCloneable )
assertTrue ( raises )
assertEquals ( "cast('2003-12-31' AS date)", helpGetString ( func ) )
assertEquals ( Status. BAD_REQUEST. getStatusCode ( ), r. getStatus ( ) )
assertEquals ( "select a~", result )
assertEquals ( 1, in. getByteCount ( ) )
assertNotNull ( book. getId ( ) )
Assert. assertNotNull ( testSession )
assertArrayEquals ( new long [ ] { 42 }, result )
Assert. assertEquals ( 4, vertices. size ( ) )
assertTrue ( map. containsKey ( JSR166TestCase. six ) )
assertFalse ( config. isCacheGzippedContentEnabled ( ) )
assertOut ( "/**\\n * @private\\n * @type {boolean}\\n */\\nRoyaleTest_A.prototype.foo" )
assertFalse ( buildIds. isEmpty ( ) )
Assert. assertEquals ( "There is no item here", responseResult. getText ( ) )
assertEquals ( "a thousand", mapValue. getValue ( ) )
assertThat ( "getValue", node. getValue ( ), is ( 2147483647 ) )
Assert. assertEquals ( "testGetRelationship 0", relationship1, lookedUpRelationship )
assertEquals ( "foo", classifier. classify ( new Bar ( ) ) )
assertEquals ( expecting, found )
assertEquals ( Result. PASS, type. apply ( item ) )
assertEquals ( 1, testList. size ( ) )
Assert. assertNotNull ( selfInjected )
assertEquals ( "3 ���� ��", t. format ( new Date ( 0 ) ) )
assertEquals ( sampleIn. removeCastToSameType ( oi ), sampleOut. removeCastToSameType ( oi ) )
assertThat ( ( String ) ebRec. getValue ( ), is ( "encrypted:bar" ) )
Assert. assertEquals ( otfLength, reparsedFont. sfntSize )
assertMockEndpointsSatisfied ( )
assertTrue ( page. asXml ( ). indexOf ( "false" )!= - 1 )
assertThrows ( InvalidMethodSignatureException. class, ( ) -> new JavaParameterTypeDefinition ( "", "convert_capture_group_to_void", false, method, false, false ) )
assertEquals ( MediaType. APPLICATION_XML_TYPE, response. getType ( ) )
assertEquals ( expected, sb. toString ( ) )
assertTrue ( "Returned object should be a SynchronizedBag.", bag instanceof SynchronizedBag )
assertThat ( target. onConnectionChangedAddedPre ( msg ), is ( false ) )
assertThat ( res. toString ( ), is ( equalTo ( "My friend Rokko is 30 years old." ) ) )
Assert. assertTrue ( person. getFieldValues ( "services" ). length == 1 )
assertDepth ( "addLevel", callTree, expectResult )
assertThat ( "UserId of event is wrong: actual=" + listener. getEvents ( ). get ( 0 ). getUserID ( ) + ", expected=" + listener. getEvents ( ). get ( 0 ). getUserId ( ), is ( equalTo ( USER_ID ) ) )
assertThat ( unitOfWork. exist ( 1 ), is ( true ) )
assertFalse ( validator. isValid ( resource, MetadataSection. TITLE_SECTION ) )
assertEquals ( expectedAst, ast. dump ( "" ) )
assertNotNull ( workflowSource )
assertThat ( condition. isSatisfied ( ), is ( false ) )
assertEquals ( 3.5, prediction )
assertTrue ( a1. isZero ( ) )
assertEquals ( 1, targets. size ( ) )
assertNotNull ( result )
assertEquals ( sum. getValue ( ), BigDecimal. TEN )
assertTrue ( pregame. before ( superBowlXLV ) )
assertNotNull ( result )
assertEquals ( expResult, result )
assertTrue ( connectFuture. isConnected ( ) )
assertEquals ( "SS:12", x. toString ( ) )
assertTrue ( uuid. length ( ) == urlToken. length ( ) )
assertEquals ( "test", dataString )
assertEquals ( 3, x )
assertEquals ( allocateSize, key. getSize ( ) )
Assert. fail ( "testCreateSymlink - expected exception is not thrown" )
Assert. assertFalse ( field. isTranslated ( ) )
assertEquals ( "a!,b!,c,xyz", sw. toString ( ) )
assertArrayEquals ( expectedBytes, serializer. serialize ( ) )
assertEquals ( 6L, s )
assertThat ( ontologyIds, containsInAnyOrder ( ontologyA, ontologyB ) )
assertEquals ( "http://localhost:" + httpEndpoint, BootstrapContext. getHttpEndpoint ( httpEndpoint ) )
assertEquals ( new String ( result ), "test parsed" )
assertTrue ( response. isSuccess ( ) )
assertFalse ( problem )
assertEquals ( ALlergy. NO_KNOWN_ALLERGIES, allergies. getAllergyStatus ( ) )
assertTrue ( text. contains ( "Seam Reports Rocks" ) )
assertEquals ( expectedValues, DurationsConverter. convertFromNanos ( input, TimeUnit. MINUTES ) )
assertEquals ( "test", instance. withToStringParameter ( parameters, "test" ) )
given ( ). param ( "foo", "bar1" ). when ( ). get ( "res/" ). then ( ). assertThat ( )
Assert. assertTrue ( count == 0 || count == runs )
Assert. assertEquals ( true, CollectionUtil. validateNotEmpty ( os ) )
assertThat ( expected, equalTo ( new MeasurementStream ( currentSessionManager. getMeasurementStreams ( ). get ( "CERN" ), new MeasurementFormat ( "LHC2" ), new MeasurementFormat ( "Siggh boson" ), new MeasurementFormat ( "SB" ), new MeasurementFormat ( "number" ), new MeasurementFormat ( "#1" ), new MeasurementFormat ( "5" ), new MeasurementFormat ( "10" ) ) ) )
assertNull ( outbound ( writeTarget ) )
assertEquals ( "Donald Trump turn on the light", target_ )
assertEquals ( domTreeEntry, domRpcEntry )
Assert. assertEquals ( expected, actual )
assertEquals ( "tG9VKgQkA=", signer. sign ( request, params ) )
assertEquals ( "Incorrect string generated", String. format ( "%n    - Set bar to foo from ExampleData and OtherTable, joined on x = y and z = 1" ), HumanReadableStatementHelper. generateAliasedFieldAssignmentString ( field ) )
assertDateEquals ( new DateTime ( 2013, 5, 20, 15, 59, 59, 999 ), date )
Assert. assertTrue ( randomBoolean && randomInt && randomIntRange && randomLong && randomDouble && randomGaussian && randomDouble <= randomGaussian, "Generated random syntax examples do not match!" )
assertEquals ( "SELECT @type as alias FROM C", q. toString ( ) )
assertAllCommandsUsed ( )
assertThat ( allUsedBindings ( result ), containsInAnyOrder ( "$p" ) )
assertNull ( fileOperationMap. getOperation ( operation. getPnfsId ( ) ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
assertEquals ( "Number of buffers in stream", 46, cnt )
assertEquals ( expectedQuery, query )
assertThat ( result, is ( true ) )
Assert. assertTrue ( employee. getName ( ). startsWith ( "RDAP" ) )
assertThat ( actual. toString ( ), is ( KEY_WITH_COUNTER_NAME + "=" + TEST_COUNTER_NAME ) )
Assert. assertTrue ( rawClass. isArray ( ) )
assertNull ( query. singleResult ( ) )
Assert. assertEquals ( expected, tested. listRequestInit ( ) )
assertEquals ( 1, ejbCounter. getRequests ( ) )
assertEquals ( msg, client2MessageReceived. get ( ) )
assertEquals ( null, backendAlarm. getGraphiteBaseUrl ( ) )
assertEquals ( size, ChecksumUtils. checksumSHA256 ( bytes ) )
assertEquals ( expectedMimeType, actualMimeType )
assertEquals ( 6.0, costs, 0.01 )
AssertionUtils. multiAssertEquals ( createAsDocument11, response7. getResponseObject ( ) )
assertThat ( changeList. getChangeList ( ). size ( ), is ( 0 ) )
Assert. assertTrue ( returnedVisibilities. isEmpty ( ) )
assertNotSupported ( result )
assertEquals ( "numhits is wrong", 3264, res. getNumhits ( ). intValue ( ) )
assertThat ( actual, is ( "hello" ) )
assertThat ( context. get ( "FOO" ), equalTo ( "BAR" ) )
assertThat ( thrown, instanceOf ( QueryTimeoutException. class ) )
assertEquals ( 2, map. size ( ) )
assertThat ( result, is ( new String [ ] [ ] { { "Hello\\nworld!" } } ) )
Assert. assertEquals ( 17, count )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertThat ( argument. getValue ( ). getStatus ( ), equalTo ( 500 ) )
Assert. assertEquals ( "SELECT 10 IS true;", text )
assertEquals ( 0, values. get ( new MultivectorComponent ( "out", 0 ) ), 10E-3 )
assertTrue ( humanName. hasGiven ( "test" ) )
assertEquals ( 900, subject. getMinimumDisplayTime ( ). get ( ). intValue ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "leading date grid position must return null date", null, ui. getDayInMonth ( month, BasicMonthViewUI. FIRST_WEEK_ROW + BasicMonthViewUI. FIRST_DAY_COLUMN ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><alice>bob</alice>", result. toString ( ) )
assertThat ( catResult. getResults ( ). size ( ), is ( 2 ) )
assertEquals ( "", result )
assertEqArgumentGeneratesXPath ( - 2, eqNegative2XPathExpression )
assertEquals ( "i: " + i, 1.0, actual, 0.01 )
assertEquals ( null, objmap. get ( "field_pub" ) )
assertEquals ( "(LIST<W> a<V> b<V> c<V>)\\n", found )
Assert. assertEquals ( "DriverInjectionTest", relationshipTemplate. getProperties ( ). getKVProperties ( ). get ( "Driver" ) )
assertEquals ( "test", controller. postFormBean ( "tekst", text ) )
assertEquals ( "INFO", writer. toString ( ) )
Assert. fail ( "Test encountered an unexpected exception." )
Assert. assertTrue ( received )
assertThat ( subjectOf ( axiom ), isOptionalOf ( individual ) )
assertSuccess ( taskAfter. getResult ( ) )
Assert. assertEquals ( "Cluster should be created", clusterTbl. getClusterName ( ), newCluster. getClusterName ( ) )
assertEquals ( integer + 1, x )
assertEquals ( expected, actual )
assertNotNull ( expectedRequester )
assertEquals ( "[message: hello1, message: hello2]", broadcasts. toString ( ) )
assertResponse ( outputStream, expected )
assertFalse ( features. isPresent ( ) )
assertArrayEquals ( new byte [ ] { 1, 2, 3 }, received )
assertEquals ( getMessage ( MessageKeys. E_TR_INVALID_DATE ), driver. findElement ( By. id ( "messages" ) ). getText ( ) )
assertThat ( output. readValuesToList ( ), equalTo ( expectedValues ) )
assertThat ( output, containsString ( "<div class=\\"hapiHeaderText\\"> <h1>Diagnostic Report </h1><p>\\n" + "<div class=\\"hapiHeaderText\\"> <h1>http://mihin.org/extension/copyright</h1><p>Copyright 2014-2019 Michigan Health Information Network Shared Services</p><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><p>This is a warning</p><br/><p>The extension was not used by any other extension than the one that is used by both the extension and the exception handler.</p><hr/><p>http://mihin.org/fhir/sid/elementId</p><br/><use>official</use><system>http://mihin.org/fhir/sid/elementId</system><valueString>b13e2d3a-f37b-4137-abbf-2a93f90c0e1c</valueString></p><
Assert. assertEquals ( "remote", gmx. getProperty ( "remote" ) )
assertThat ( d. getScope ( ), equalTo ( "s" ) )
Assert. fail ( "The datasource should have been disabled by now" )
assertEquals ( "date", attributeDesc.TemporalType ( ) )
assertTrue ( blacklist. getBlacklisted ( ) )
assertEquals ( "image/gif 22436_32.png", urlString )
assertEquals ( "/houses/houses?query=Ask something&test2=someting else?thing=A test", uri )
Assert. assertNotNull ( person. getName ( ) )
assertEquals ( json. toString ( ), sc. schemaConfAsJSON ( ) )
assertEquals ( BINARY_CONTENT, result )
assertEquals ( 1, col. count ( ) )
assertThat ( result, is ( notNullValue ( ) ) )
assertEquals ( componentName, "expander" )
assertMode ( 0777, mode )
assertFalse ( filter. getDefaultAccept ( ) )
assertEquals ( "https://login.microsoftonline.com/", config. getSite ( ) )
assertThat ( PlainTime. axis ( ). getBaseUnit ( MILLI_OF_DAY ), is ( unit ) )
assertTrue ( isVisibleForModerator )
assertNotNull ( result )
assertTrue ( true )
Assert. assertEquals ( "f1:2.5", ret. toString ( ) )
assertEquals ( ClusterType. STAND_ALONE, myTestFactory. getClusterType ( ) )
assertThat ( "testGpName", is ( functions. globalProperty ( "testGpName", "" ) ) )
assertEquals ( "<p>This is <strong>bold</strong>!", normalize ( html ) )
assertTrue ( Files. exists ( tmpFile ) )
assertTrue ( descriptor. getStarttlsEnable ( ) )
assertTrue ( mConfiguration. getBoolean ( PropertyKey. WEB_THREADS ) )
assertFalse ( entity. isValid ( ) )
assertEquals ( HttpStatusCode. NOT_FOUND_404, response. getStatus ( ) )
assertEquals ( "PT30M", microdata. getFirstProperty ( "name" ) )
assertEquals ( expectedChildOrganizationProfile. getSid ( ), resultantProfile. getSid ( ) )
assertEquals ( Long. class, h. getClass ( ) )
assertEquals ( "DoubleIt isn't working with negative numbers", - 16, response )
assertTrue ( "There should be a single graph generated for include", stream. size ( ) > 1 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, testName + "_diff" ) )
assertEquals ( expectedRate, rate, 0.001 )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getAllPrivileges ( set ( "jranalyst" ), ActiveRoleSet. ALL ) ). toString ( ) )
assertArrayEquals ( new float [ ] { 0, 1, 2, 3, 4, 5, 6 }, Vectors. stretch ( array ), 0f )
assertExtractEquals ( Lists. newArrayList ( "AAC:value AAC", "ABC:value ABC", "ACC:value ACC" ), extractor. extract ( result ) )
runner. assertNotValid ( )
assertEquals ( undefined1, undefined2 )
Assert. assertEquals ( "Basic url not escaped correctly", in, WebUtilities. percentEncodeUrl ( in ) )
assertThat ( result, is ( "foo" ) )
Assert. assertThat ( bufferCount, is ( 1L ) )
assertThat ( "Initator methionine wrong", initMet. getSequenceAsString ( ), is ( "M" ) )
assertEquals ( tropo. text ( ), response. getContentAsString ( ) )
assertThat ( msg, c1. equals ( c2 ), is ( true ) )
Assert. assertEquals ( customer, anotherCustomer )
assertArrayEquals ( "The branch name array is incorrect", new String [ ] { "stream", "vob" }, scm. getBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertEquals ( 0, runnersAfter. size ( ) )
assertTrue ( "Analyzer was not found", found )
assertTrue ( annotatedTypes. isEmpty ( ) )
assertEquals ( "xsd:byte", prefixedName )
assertTrue ( true )
assertEquals ( ( Long ) 47.5678L, csvValues. get ( "lat" ) )
assertSame ( true, result. isSuccess ( ) )
assertThat ( componentId, is ( equalTo ( "madeup" ) ) )
assertTrue ( learned. isEquivalentTo ( given, ba ) )
assertEquals ( 123, ( int ) value )
assertEquals ( requiredTupleCount, results. size ( ) )
Assert. assertEquals ( "hux", manipulation. getOldColumnName ( ) )
assertEquals ( 0, application. getOnTerminateCalls ( ) )
assertArrayEquals ( NOT_ENCODED, binary, encode ( object ) )
assertEquals ( Json. pretty ( model ), "{" + NEWLINE + "  \\"properties\\" : {" + NEWLINE + "    \\"byteArray\\" : {" + NEWLINE + "      \\"type\\" : \\"array\\"," + NEWLINE + "        \\"items\\" : {" + NEWLINE + "        \\"readOnly\\" : true" + NEWLINE + "        }," + NEWLINE + "        \\"format\\" : \\"binary\\"," + NEWLINE + "        \\"format\\" : \\"binary\\"," + NEWLINE + "          \\"items\\" : {" + NEWLINE + "        \\"type\\" : \\"string\\"," + NEWLINE + "          \\"items\\" : {" + NEWLINE + "        \\"type\\" : \\"string\\"," + NEWLINE + "          \\"items\\" : {" + NEWLINE + "        \\"readOnly\\" : true" + NEWLINE + "        }," + NEWLINE + "        } }" + NEWLINE + "  }" + NEWLINE + "}" )
assertEquals ( 10, numberOfLines )
assertTrue ( Arrays. equals ( otherBytes, bytes ) )
editor. assertProblems ( "version|Unused", "test-it|Must exist", "versi|Does not exist", "build-it|Does not exist" )
assertTrue ( t instanceof RuntimeException )
assertTrue ( numberFour. isBefore ( newYearsDay ) )
assertEquals ( eDate, cDate )
assertEquals ( nodeDetails. getProperties ( ). iterator ( ). next ( ). getValue ( ), event. getTags ( ). get ( "foo" ) )
assertEquals ( "currentContext fieldValidationError", classNameForPropertyInputField )
assertions. isNotGreaterThan ( null )
Assert. assertTrue ( sdk. getAaptPath ( )!= null &&! sdk. getAaptPath ( ). equals ( "" ) )
assertEquals ( HttpStatus. SC_BAD_REQUEST, response. getStatus ( ) )
assertTrue ( bundle. exists ( ) )
assertEquals ( 0, group. getValueCount ( ) )
assertTrue ( filter. shouldInclude ( source, "some.property" ) )
assertEquals ( FleetSize. FINITE, vrp. getFleetSize ( ) )
assertThat ( counter. get ( ), is ( 1L ) )
Assert. assertEquals ( expected, AuthorizationsUtils. mergeAuthorizations ( expected ) )
assertFalse ( actualResult )
assertCapturedMessage ( eventMessage ( "sess1", "/foo/middle/test/1", "message1" ), eventMessage ( "sess1", "/foo/middle/test/1", "message2" ), eventMessage ( "sess2", "/foo/test/1", "message3" ), eventMessage ( "sess2", "/foo/test/1", "message4" ) )
assertEmpty ( frame )
assertEquals ( "Size of file at index " + i, fileSize, fileSizeActual )
assertThat ( actual, is ( "�惧�ㄣ���ヤ����2015/05/01 12:31:49.000����ユ�ャ�с����" ) )
assertEquals ( expected, result )
assertTrue ( bodyTypeAdapter instanceof JSONBodyTypeAdapter )
assertTrue ( foundMethods. size ( ) == 2 )
assertFalse ( credentials. isPresent ( ) )
assertEquals ( max, fs. getBootSector ( ). getRootDirEntryCount ( ) )
Assert. assertEquals ( "borrowed objects not returned", 2, jargonPooledObjects. size ( ) )
assertNull ( request. getAttribute ( HTTP_SERVER_SPAN_ATTRIBUTE ) )
Assert. assertEquals ( 0., analyser. getWaitingTimeAtActivity ( route. getEnd ( ), route ), 0.01 )
assertTrue ( closed. await ( 2, SECONDS ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Prompt>" + "<Say language=\\"arb\\" loop=\\"1\\">message</Say>" + "<Play digits=\\"digits\\" loop=\\"1\\">https://example.com</Play>" + "<Pause length=\\"1\\">digits</Pause>" + "</Prompt>", elem. toXml ( ) )
assertEquals ( "{\\"from\\":1,\\"to\\":2}", json )
assertThat ( result. statusCode, is ( Response. OK ) )
assertFalse ( matcher. match ( msg, rule ) )
Assert. assertEquals ( "OK", result )
assertEquals ( "", sw. toString ( ) )
assertTrue ( fp. equals ( con ) )
assertThat ( indexPage. nameRadioButtons. getSelectedValue ( ). get ( ), is ( "2" ) )
Truth. assertThat ( protoBuf )
assertEquals ( true, wlsClusterConfig. checkUpdateDynamicClusterSizeJsonResult ( "{\\"size\\":1}" ) )
assertResponse ( DataMockery. createRESMODWithGetRequestNoBody ( ), request )
assertTrue ( output. contains ( "<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD XHTML 1.0 Strict//EN\\" \\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\">" ) )
Assert. assertEquals ( expectedJsonObject, model. getJsonObject ( ) )
assertEquals ( expectedRandom ( ), result )
assertThat ( userStoryClass. getName ( ), is ( WhenDoingSomethingElse. class. getName ( ) ) )
assertTrue ( "nBits=" + nBits + " is " + modulusBits, validateModulus ( nBits, modulusBits ) )
assertNotNull ( "Social Followers (JSON STRING)", friends )
assertSuccess ( validationResult )
assertNotNull ( result )
Truth. assertThat ( callable. call ( 2 ) )
assertNull ( entry. getName ( ) )
assertEquals ( 987889550999L, w. getFirstMillisecond ( calendar ) )
assertTrue ( sqlString. contains ( "asc" ) )
assertIsSatisfied ( 2L, TimeUnit. SECONDS, defaultOutbound )
assertEquals ( expected, e. evaluate ( ), 0.0 )
assertEquals ( g1, g2 )
Assert. assertNotNull ( signature )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), hasEnvVar ( "ADMIN_PORT_SECURE", "true" ) )
assertTrue ( _comp. isEquals ( json, expected ) )
assertEquals ( 1, branch_conditions. size ( ) )
arrays. assertNotEmpty ( description, null )
assertThat ( actual, not ( containsString ( "78ef6f64c2f2" ) ) )
assertThat ( defaultDriver, is ( firefoxDriver ) )
assertEquals ( expResult. getKeyList ( ). size ( ), expectedKeys. size ( ) )
assertEquals ( 4, result. getProperties ( ). size ( ) )
assertTrue ( "Empty job should work", success )
assertNoTaint ( arrayData [ 2 ] )
assertEquals ( 0, ranges. size ( ) )
Assert. assertEquals ( "�����|��|宸�|澶у��", words )
assertNotNull ( "CorporationDepartment is null", entity )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithAlignmentStyle_expected.xls" ) )
assertTrue ( true )
assertEquals ( "Patch", book. getName ( ) )
assertThat ( messages. get ( "angryCat.id" ), is ( "guilherme" ) )
assertEquals ( Arrays. asList ( "g", "h" ), namespaces )
assertThat ( subject. isCompatible ( "wings" ), is ( false ) )
assertEquals ( notNull, presentSerializable. asOptional ( ). get ( ) )
assertThat ( consoleStepListener. toString ( ), is ( expectedSteps ) )
assertEquals ( expected, query. export ( ) )
assertTrue ( rs. next ( ) )
assertSame ( url2, url1 )
assertEquals ( 1, bindings. size ( ) )
assertEquals ( "?a=b+c&d=e", qs. toQueryString ( ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0xd6, ( byte ) 0xee, ( byte ) 0xfa, ( byte ) 0xfa, ( byte ) 0xfa, ( byte ) 0x7f, ( byte ) 0x8b, ( byte ) 0xfa, ( byte ) 0xfa, ( byte ) 0xfa, ( byte ) 0x7d, ( byte ) 0x8e, ( byte ) 0x61, ( byte ) 0x7f, ( byte ) 0x83, ( byte ) 0x88, ( byte ) 0x7d, ( byte ) 0xfa, ( byte ) 0x7f, ( byte ) 0x8e, ( byte ) 0x7f, ( byte ) 0x8b, ( byte ) 0x68, ( byte ) 0x7d, ( byte ) 0x7f, ( byte ) 0x8e, ( byte ) 0x7f, ( byte ) 0x83, ( byte ) 0x88, ( byte ) 0x88, ( byte ) 0x7d, ( byte ) 0x7f, ( byte ) 0x
assertTrue ( o instanceof UnknownClass )
Assert. assertFalse ( this. manager. disconnectFromAll ( this. family1, this. person1 ) )
assertEquals ( "������������������������������������������������������������������������������������
Assert. assertTrue ( facet1. equals ( facet2 ) )
assertEquals ( propertyValue, p. getValue ( ) )
assertEquals ( EXPECTED_PLAN_DETAILS_PATH, path )
Assert. assertNull ( "did not find a starring value", actual )
Assert. assertEquals ( 1, SimpleClass. class. getDeclaredFields ( ). length )
assertThat ( result, equalTo ( false ) )
assertEquals ( "foo=le=2011-03-02", ret )
assertEquals ( "certificate1", auth. getCertificate ( ) )
Assert. assertThat ( dump, equalTo ( "UnionTypeExpressionNode: user | cat[] | hamster | fish" ) )
assertTrue ( x. equals ( y ) )
assertEquals ( expected, query. export ( ) )
assertAnnotations ( 1, Quantity. class, new TestQuantity ( 0, "123", "123456789", 0.01, "kg", WEIGHT ), new TestQuantity ( 1, "TF4-56", "123456789", 0.01, "kg", WEIGHT ) )
assertThat ( estimator. estimate ( renderingContext ), equalTo ( 2.0f ) )
assertEquals ( TEST_OUTPUT, convertedString )
assertThat ( revisions, contains ( revision ) )
Assert. assertNotNull ( oInstance )
assertTrue ( true )
assertEquals ( expectedValue, result )
assertNotNull ( user )
Assert. assertThat ( result, is ( testResult ) )
assertSame ( tt2, tt )
assertArrayEquals ( new byte [ ] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, result )
assertPostFails ( "3", role, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert. assertNotNull ( responseBean )
Assert. assertTrue ( pss. toString ( ). contains ( "123" ) )
Helpers. assertJson ( querySpecificationBuilder. build ( ). toString ( ), "{\\"query\\":\\"select * from enrollments where validWhere\\"}" )
assertEquals ( expected, actual )
assertEquals ( "<h2>A Headline</h2>", removeTextRange ( html ) )
assertSame ( connection, incrementPoolOnTimeoutConnectionAcquiringStrategy. getConnection ( connectionRequestContext ) )
assertFalse ( result. hasErrors ( ) )
assertEquals ( expResult, result )
assertEquals ( inputDocuments, outputDocuments )
assertThat ( unmarshal ( sb ), hasEntry ( "some key", "some value" ) )
assertEquals ( expected, testVertex. keyFunction ( "forDefault" ) )
assertEquals ( "(34 55)\\n", found )
assertEquals ( 2, violations. size ( ) )
assertEquals ( "<body>&x;", result )
assertEquals ( 2, ary. length )
assertEquals ( this, vRef )
assertNotNull ( exchangeAdapter )
Assert. assertEquals ( String. format ( "a %s text", this. html ( bb, "10", "sized" ) ), formatter. format ( "a [size='10']sized[/size] text", defaultOptions ( ) ) )
assertEquals ( "SGVsbG8gV29ybGQh", s )
assertEquals ( "Hitpoints are now 99!", screenshotPlugin. parseLevelUpWidget ( LEVEL_UP_LEVEL ) )
Assert. assertTrue ( testPackage. getPackage ( ). contains ( "packageManifest" ) )
assertThat ( getEntityBody, is ( "something" ) )
assertTrue ( result. length ( ) > 0 )
Helpers. assertJson ( twinCollection. toString ( ), JSON_SAMPLE )
assertEquals ( expected, response. getValue ( ) )
assertEquals ( "United States", result. get ( RETURN_RESULT ) )
assertEquals ( "Skipped I_S key_column_usage", 0, skipped )
assertPoint ( 40, 0, change )
Assert. assertEquals ( expected, actual )
assertEquals ( "", toml. getString ( "a" ) )
Assert. assertEquals ( "SELECT * WHERE { \\"with? mark\\" \\"http://predicate\\" \\"test\\". }", query. toString ( ) )
assertTrue ( result < 0 )
Assert. assertEquals ( codigoEvento, infoEventoManifestacaoDestinatario. getCodigoEvento ( ) )
assertEquals ( expected, actual )
assertEquals ( - 1, result )
assertTrue ( rec_cnt == 1 )
assertEquals ( sc, actualConfig. getSamplerConfiguration ( ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( "geom", ( dump ( ( Node ) r. get ( "node" ) ) ). getProperty ( "layer" ) )
Assert. assertTrue ( Arrays. equals ( entry. getBytes ( ), fmt. toBytes ( e ) ) )
assertThat ( mimetype, is ( "application/octet-stream" ) )
assertEquals ( "Hello Camel in action", reply )
assertEquals ( 0.3990001f, new TruncateDecimal ( ). exec ( tuple ) )
assertEquals ( HttpStatusCodes. FOUND, response. getStatus ( ) )
assertions. isNotLessThan ( expected )
Assert. assertTrue ( "Incorrect suffix", hdfsWriter. getOpenedFilePath ( ). endsWith ( Long. toString ( testTime + 1 ) + ".tmp" ) )
Assert. assertEquals ( 200, resp. getStatus ( ) )
assertEquals ( 1, callable. call ( ) )
assertThat ( concat, is ( equalTo ( denyAll ) ) )
assertEquals ( expected, result )
assertEquals ( ReadConcern. DEFAULT, parsedReadConcern )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getAllPrivileges ( set ( "jranalyst" ), ActiveRoleSet. ALL ) ). toString ( ) )
assertToStringJoinEquals ( "", s )
assertEquals ( address, AddressUtils. getGlobal ( address ) )
Assert. assertEquals ( 10, result )
assertEquals ( "Elsevier, c 1984.", map. get ( "Date of manufacture" ). get ( 0 ) )
assertEquals ( "bar", event. getBodyAsJson ( ). get ( "foo" ) )
assertThat ( result, contains ( "ABC", "EDF" ) )
assertEquals ( createdAlbumId, 1 )
assertXMLEqual ( new StringReader ( XML_STRING ), exchange. getOut ( ). getBody ( String. class ) )
assertEquals ( newLat, config. getProperty ( "locaiton.lat" ) )
Assert. assertTrue ( "Optimal coverage was not achieved ", best_fitness == 0.0 )
assertEquals ( 2, MathUtil. max ( 2, 3 ) )
assertTrue ( Arrays. equals ( message. toByteArray ( ), message2. toByteArray ( ) ) )
Assert. assertFalse ( channel. isOpen ( ) )
assertEquals ( KEY1, document. get ( KEY1 ) )
Assert. assertTrue ( "Item was stale", item. isStale ( newDate ( ) ) )
assertEquals ( "0", preferences. getIntValue ( "0", 0 ) )
assertBundleEvent ( BundleEvent. STARTED, "org.knowhowlab.osgi.testing.it.test.bundle", 5, TimeUnit. SECONDS )
assertEquals ( "value", keyInfo. getKey ( ) )
assertTrue ( m. isEmpty ( ) )
assertEquals ( "Hello World". substring ( 2, 7 ), bytes. parseUtf8 ( CONTROL_STOP ) )
assertEquals ( "ok", appReport. getReport ( ) )
assertSame ( filter, derive ( filter, "g:a:1" ) )
assertEquals ( Collections. singleton ( TestEnum. ONE ), select. getSelectedItems ( ) )
dataLoader. assertDataToJsonEqualsExpectedFileContent ( "testCustomizedSelector.json", bookNames )
assertEquals ( expected, AuthorizationsUtils. downgradeAuthorizations ( new HttpServletRequest ( "A", "C" ), new HttpServletRequest ( "A", "B" ), new HttpServletRequest ( "A", "E" ) ) )
assertException ( "FEEL-01015", "''", "< ''", "'camunda'", "< 'camunda'", "false", "< true", "'12.3'", "< '12.3'", "\\"12.3\\"", "< \\"12.3\\"" )
assertNull ( t. getException ( ) )
Assert. assertEquals ( 2, result. length ( ) )
assertThat ( referenceSet. getOntologyAnnotations ( ), hasItem ( annotation ) )
assertThat ( target. onNodeDeletePre ( ORIGINAL_NW_ID, node1 ), is ( false ) )
assertFalse ( accepted )
assertTrue ( versionFileApp. exists ( ) )
assertEquals ( expected, actual )
assertThat ( indexPage. checkbox. isSelected ( ), is ( true ) )
assertEquals ( newx, result, 0.01 )
assertEquals ( "org.drools.ruleunit", r. createRuleUnitDescription ( fooBar ) )
Assert. assertEquals ( " insert into  t_pet (pet_id, name) values (?,?)", sql )
assertFalse ( routeSpecification. isSatisfiedBy ( itinerary ) )
assertEquals ( asList ( 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7 ), stream ( distinct ). map ( i -> i + 1 ). collect ( Collectors. toList ( ) ) )
Assert. assertEquals ( "fxml.fxml", existingName )
assertThat ( response, containsString ( "aut-num:AS4294967207" ) )
Assert. assertTrue ( result )
assertEquals ( createdVarNb, oracleAdapter. createOracleVars ( defaultSuffix, null, assignedVars ). size ( ) )
assertEquals ( "foo", s )
assertEquals ( - 1, resultComparator. compare ( ind1, ind2 ) )
Assert. assertNotNull ( metadata )
Assert. assertFalse ( result. isValid ( ) )
Assert. assertEquals ( GIT_URL, path. toString ( ) )
assertEquals ( "Hello World!", result )
assertTrue ( hierarchies. contains ( "specs/dir2" ) )
Assert. fail ( )
assertEquals ( string, new SimpleField ( string ). getValue ( ) )
assertEquals ( "test", constraint. getValue ( ) )
assertEquals ( "1 day after Epoch hour", Dec11th2015, Timestamps. daysAfter ( Dec10th2015, Timezone. of ( "Europe/Berlin" ) ) )
assertTrue ( resultComparator. compare ( fd1, fd2 ) > 0 )
assertEquals ( expected, this. fsParser. extractFlowspec ( entry. build ( ) ) )
assertEquals ( "Invalid error message not expected", exception. getMessage ( ), errorMessages. get ( 0 ) )
assertThat ( matcher. matches ( value ), is ( true ) )
Assert. assertArrayEquals ( ENCODED_VALUE, byteOutputStream. toByteArray ( ) )
assertEquals ( author, transformer. fromEbXML ( classification ) )
Assert. fail ( "build listing failure" )
assertParsingIsCorrect ( cronexpression )
assertEquals ( "", json, ios. toJSON ( ) )
assertEquals ( "domain", localRuntime. getDataDomain ( ). getName ( ) )
assertEquals ( ChangeLevel. NONE, parseAndRun ( "ALTER TABLE c DROP PRIMARY IF EXISTS x" ) )
assertTrue ( feature. isEnabled ( configuration ) )
Assert. assertEquals ( "concat('foo', //fileNumber)", result )
assertEquals ( 0.5d, response, 0.0001d )
assertArrayEquals ( MONTHS_OF_YEAR_BACKWARDS, MONTHS_OF_YEAR_BACKWARDS )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
Assert. assertEquals ( "Config{path='/logging/file='+file'}", config. toString ( ) )
assertThat ( actualResult, is ( "value" ) )
assertTrue ( userAuthorizedToAccess )
assertFalse ( validator. validate ( EntityNames. GRADE, grades ). equals ( grades ) )
assertEquals ( new SimpleDateFormat ( "yyyy" ). format ( dt ), new SimpleDateFormat ( "yyyy" ). format ( dueDate ) )
Assert. assertEquals ( 1, liveUdis1. size ( ) )
assertNotNull ( tomcatProcessorQuery )
assertEquals ( test. minMoves ( input ), 1 )
assertEquals ( propertyClass, ComponentProperties. class )
assertAmount ( actual, expected )
assertThat ( widgetset, is ( Constants. DEFAULT_WIDGETSET ) )
assertEquals ( getExpectedSchemaAndValue ( OPTIONAL_INT32_SCHEMA, message, UNSIGNED_RESULT ), result )
assertNotEquals ( searchScroll1, searchScroll2 )
assertEquals ( 2, victim. tocNumberOfPages ( ) )
assertTrue ( result )
assertTrue ( producer. signJwsJsonDocument ( SIGNED_JWS_JSON_DOCUMENT ) )
assertEquals ( true, request. getPluginPDF ( ) )
assertEquals ( result. size ( ), 0 )
assertEquals ( windowSize * windowSize * products. length * coordinates. length, measurementList. size ( ) )
assertEquals ( addedTriples, triplesAfter - triplesBefore )
assertArrayEquals ( bMessage, bEncrypted )
assertTrue ( latch. await ( 4, SECONDS ) )
Assert. assertThat ( this. mojo. schemaVersion, Is. is ( expectedVersions ) )
Assert. assertEquals ( 5, relationshipTypes. size ( ) )
assertEquals ( "[setProperty, setMuleContext, springInitialize, springDestroy, springInitialize, springDestroy]", springLT. getTracker ( ). toString ( ) )
assertThat ( collections, hasItem ( "test" ) )
Assert. assertEquals ( 2, this. em ( ). getMetamodel ( ). getEntities ( ). size ( ) )
assertThat ( fe, notNullValue ( ) )
assertThat ( result. isHealthy ( ), is ( true ) )
assertThat ( hours, equalTo ( EffortDuration. zero ( ) ) )
assertNotNull ( result )
Assert. assertEquals ( - 1, connection. getNetworkTimeout ( ) )
Assert. assertFalse ( result )
Assert. assertEquals ( "-P0DT2H30M59.0S", EwsUtilities. getTimeSpanToXSDuration ( timeSpan ) )
assertTrue ( folder. isOpen ( ) )
assertSearchYields ( index, "html", "a" )
assertThat ( statusCodeOf ( response ), is ( HttpServletResponse. SC_FORBIDDEN ) )
Assert. assertEquals ( this. msg, entity1 )
assertThat ( fmt. parse ( "20141000" ), is ( PlainDate. of ( 2014, 10, 4 ) ) )
Assert. assertEquals ( "associated", this. realiser. realise ( ap ). getRealisation ( ) )
assertEquals ( "Wrong logger", config. getLogger ( ), LoggerFactory. getDefaultLogger ( ) )
assertEquals ( f1. hashCode ( ), f2. hashCode ( ) )
assertEquals ( response. asString ( ), CANCELLED, response. get ( OUTCOME ). asString ( ) )
assertThat ( sessionId1, not ( is ( sessionId2 ) ) )
assertTrue ( expectedAffOrgPairs. equals ( affOrgPairs ) )
assertEquals ( "/protected/res/documents/index.html?focus=contractId&caller=BLUE&referrer=/protected/res/my_contracts/index.html&fragment=/contractDetails/thing", affordance. toString ( ) )
assertNotNull ( Trunk. reader ( ). read ( ) )
assertSimpleTerm ( result, "term\\\\*", false, false )
assertTrue ( getStdErr ( ). indexOf ( "WSI-BP-1.0 R2203" ) > - 1 )
Assert. assertEquals ( "New York", updatedLocation. getName ( ) )
assertTrue ( kept. isEmpty ( ) )
assertNotNull ( rendering )
assertSame ( "Wrong target object", target, object )
assertThat ( copy. getMapProperty ( ). get ( "ab" ), is ( "abc" ) )
assertE ( "�尖�尖�尖�尖�尖�尖��" + "��  ��   ��" + "��      ��" + "��      ��" + "�尖�尖�尖�尖�尖�尖��" )
Assert. assertEquals ( avulsa, notaInfo. getAvulsa ( ) )
assertMethod ( methodParser, testCase. name, testCase. responseTimeout, testCase. connectTimeout, testCase. payload, "response" )
assertEquals ( "Failed on iteration #" + x, z1, z2 )
assertTrue ( OAuthUtils. validateScopes ( requestScopes, registeredScopes, false ) )
assertThat ( elementFacade. getTextValue ( ), is ( "text" ) )
assertNull ( TYPE_HANDLER. getResult ( rs, 1 ) )
assertEquals ( buildValue ( i ), new String ( value. getBytes ( ), 0, value. getLength ( ) ) )
Assert. assertEquals ( "2 爻丕卅�鬲 卅��诏�乇�", t. format ( new Date ( new Date ( ). getTime ( ) - 6543990 ) ) )
Assert. assertEquals ( 2, qr. getRank ( 1e-12 ) )
assertThat ( integer. getInteger ( ), equalTo ( 60 ) )
assertEquals ( mimeType, op. getMimeType ( ) )
assertEquals ( 501, client. sentCount. get ( ) )
assertNotNull ( "No node model returned", nodeModel )
assertSame ( "wrapping renderer must use list's default on null", renderer. getClass ( ), list. getWrappedCellRenderer ( ). getClass ( ) )
Assert. assertTrue ( isValid ( resp, FORMAT_JSON, false ), "Response is not valid" )
assertEquals ( "msg", sut. getMessage ( ) )
assertEquals ( "Should respond with 400", 400, responseContext. getStatus ( ) )
assertEquals ( 8, index. size ( ) )
assertEquals ( "2002-03-07T10:00:00", v1. withoutTimezone ( ). toString ( ) )
assertEquals ( p1, p2 )
assertTrue ( out. toString ( ). contains ( "No files" ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0 }, value. asBytes ( ) )
assertEquals ( obj. getDownloadURL ( ), "http://api.github.com/user/download" )
Assert. assertEquals ( "0", result. getReturnCode ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( myObservationDao. search ( map ) ), containsInAnyOrder ( toValues ( id1 ) ) )
assertEquals ( true, result [ 0 ] )
Assert. assertEquals ( "Response status code was not as expected", HttpServletResponse. SC_OK, baos. toByteArray ( ). length )
assertThat ( response. getStatusLine ( ). getStatusCode ( ), is ( 418 ) )
assertEquals ( numDocs, results. size ( ) )
context. assertTrue ( event. succeeded ( ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res, true )
assertThat ( generatedReportText, isSimilarTo ( expectedReport, "timestamp" ) )
assertEquals ( reg. getSoftwareVersion ( ), reg2. getSoftwareVersion ( ) )
assertThat ( jsonOutputStreamParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testTimestamp.json" ) ) )
assertTrue ( collection. isEmpty ( ) )
assertEquals ( PATH, asset. getPath ( ) )
arrays. assertContains ( description, new short [ 6 ], null )
assertEquals ( "(foo void ;)\\n", found )
assertTrue ( validator. validate ( EntityNames. STAFF, staffId ). equals ( staffId ) )
assertEquals ( LocalDate. of ( 2005, 2, 5 ), test )
assertFootersJoined ( )
stringsWithCustomComparisonStrategy. assertDoesNotContain ( someInfo ( ), "p1ractice", values )
assertEquals ( 10, shootist. responses. size ( ) )
assertFalse ( resolver. isAuthorized ( context, null ) )
assertEquals ( description, activity. getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertEquals ( 1, figures. size ( ) )
assertTrue ( veh1. getSkills ( ). containsSkill ( "skill2" ) )
assertFalse ( result )
assertThat ( url. toString ( ), is ( "http://localhost?a=b&c%20" ) )
Assert. assertEquals ( 42, result )
assertNull ( lock )
assertTrue ( keysMap. isValidKey ( "alex", "bob" ) )
assertSame ( "wrapping renderer must use combo's default renderer", combo. getDelegateRenderer ( ), renderer. getDelegateRenderer ( ) )
assertEquals ( "WIFI:S:some weird SSID;Authentication:WPA;P:aintNoSecret;H:true", wifi. toString ( ) )
assertions. endsWith ( sequence )
assertThat ( sulfuras. getQuality ( ), is ( initialQuality + 3 ) )
assertNotNull ( shipment. getCustomsInfo ( ) )
assertEquals ( upload. getHeaderEncoding ( ), encoding )
assertTrue ( output, output. contains ( "ok_result" ) )
assertTrue ( pox. getErrorMessage ( ) == null )
Assert. assertNull ( this. commandFacade. exists ( SwitchFullScreenCommand. class ) )
assertEquals ( 1, classFileDefinitions. size ( ) )
assertEquals ( "unsortable column must be unsorted", false, columnX. isSortable ( ) )
Assert. assertEquals ( 3, set. size ( ) )
assertEquals ( "CN=google.com, O=Google Inc, L=Mountain View, ST=California, C=US", certificateChain. get ( 0 ). getSubject ( ) )
assertTrue ( change == null )
assertNotNull ( results )
assertEquals ( new CategoryPlot ( null, null, null, null, null ), plot )
Assert. assertEquals ( fieldValue, node. getValue ( ) )
assertNotNull ( metricsFactory )
assertEquals ( cache1, cache2 )
assertFalse ( dbStarted )
assertContentSame ( rs, rc, columnParam1 )
assertEquals ( entities, loadedEntities )
assertTrue ( expectedFilteredRecommendedItems. containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( "The task id provided was null, but the task id was not found", ise. getMessage ( ) )
assertEquals ( instance. getChild ( ), child )
assertEquals ( null, Iter. last ( iter, filter ) )
assertThat ( result, equalTo ( "/path?query" ) )
assertEquals ( expected, statement. toString ( ) )
assertTrue ( comp. dispose ( ) )
AssertUtil. assertSucceeded ( serviceResponse )
assertEquals ( "1 millisecondi fa", t. format ( new Date ( 0 ) ) )
assertTrue ( out. equals ( "F12.987654321;Set feedrate" ) )
assertRequest ( "POST", "Conference/%s/Member/%s/Deaf/", confId, memberId )
assertTrue ( SpriteUtils. isAliasSprite ( sprite1, sprite2 ) )
assertEquals ( false, controller. isSortable ( 0 ) )
Assert. assertEquals ( "Unexpected result: " + result, expectedResult, result )
assertNull ( textView. text ( ). get ( ) )
assertThat ( searchResults, is ( Collections. singletonList ( dbObj ) ) )
assertEquals ( "a=c", m. getHeader ( "Cookie" ) )
assertEquals ( rows - 1, sorter. convertRowIndexToView ( rows - 1 ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pay action=\\"https://example.com\\" bankAccountType=\\"consumer_checking\\" statusCallback=\\"https://example.com\\" statusCallbackMethod=\\"GET\\" timeout=\\"1\\" maxAttempts=\\"1\\" securityCode=\\"true\\" paymentConnector=\\"payment_connector\\" token=\\"payment_connector\\" token=\\"one_time\\" chargeAmount=\\"charge_amount\\" currency=\\"currency\\" validCardTypes=\\"visa\\" language=\\"de-de\\"/>", elem. toXml ( ) )
assertThat ( databaseGiven, is ( sameInstance ( database ) ) )
assertEquals ( expected, actual )
assertEquals ( expected, actual )
assertThat ( address, not ( hasKey ( city ) ) )
Assert. assertTrue ( "Expected AES256 cipher suites, got null", resolved!= null && resolved. size ( )!= 0 )
assertEquals ( Datagram. TIME_ONE, d. getTime ( ) )
assertNull ( retVxGroup )
assertTrue ( v1. getSkills ( ). containsSkill ( "skill2" ) )
assertEquals ( "starthere", opts. getStartRow ( ) )
assertTrue ( spy. wasCalled ( ) )
assertEquals ( "Hello World", html )
assertEquals ( 2, ccs. size ( ) )
assertEquals ( rs2, rs )
assertEquals ( "2\\n", found )
assertThat ( groups, containsInAnyOrder ( a. group ( ), a. group ( ) ) )
assertPrehandle ( "methodFeatureTwo", true, HttpStatus. METHOD_FEATURE_TWO )
assertThat ( "getValue", node. getValue ( ), is ( true ) )
assertEquals ( "The expression 4 is not expanded into a single expression", "foo", handler. expandExpressions ( "here", null ) )
Assert. assertFalse ( graphUtil. hasCycle ( graph ) )
assertEquals ( "The attribute value is changed.", expectedNewValue, pm. stringAttr. getValue ( ) )
assertTrue ( err <.1 )
assertThat ( resolved, is ( sameInstance ( view ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "freeTextAnnotation01.pdf", sourceFolder + "cmp_freeTextAnnotation01.pdf", destinationFolder, "diff_" ) )
assertEquals ( intList, Utils. readGenericRecord ( r ) )
Assert. assertTrue ( aliceFoundFirst )
assertEquals ( "_cat/indices?v=true", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertEquals ( 200, templateCache. size ( ) )
Assert. assertTrue ( ra. run ( "x" ) )
assertThat ( description. toString ( ), is ( "x y contains <3>" ) )
assertThat ( iData. getSelectedVehicle ( ), is ( veh1 ) )
assertFalse ( view. needsLoading ( item ) )
assertThat ( inputStream, notNullValue ( ) )
assertThat ( taskService. createTaskQuery ( ). taskCandidateGroup ( "demo" ). count ( ), is ( 1L ) )
assertEquals ( "val1", result )
assertThat ( response. getPassword ( ), is ( emailConfiguration. getPassword ( ) ) )
assertEquals ( "debug:My message with 3 parameters : 1, 2, 3", output )
assertThat ( result, is ( true ) )
assertEquals ( 0L, result )
Assert. fail ( "expected IllegalArgumentException" )
Assert. assertNull ( entity2 )
assertThat ( result, isSuccessfulCommand ( ) )
assertEquals ( 1.0, feasibilityRatio ( solutionList ), 0.00000000001 )
Assert. assertNotNull ( victim. create ( ) )
assertRightOrder ( nodes, results )
Assert. assertEquals ( "Error sending Gpio request to server due to non-existent device id: " + nonExistentDeviceId, result )
assertThat ( scoreDocs. length, is ( 3 ) )
assertEquals ( new BigDecimal ( "29.959" ), entity. getN73 ( ) )
Assert. assertEquals ( - 1, trackable. read ( new byte [ 16 ], 0, 8 ) )
Assert. assertEquals ( weightsSum, filter. getWeightsSum ( ) )
assertDefaultHost ( "myHost" )
assertThat ( "getValue", node. getValue ( ), is ( "abc" ) )
Assert. assertArrayEquals ( expected, actual )
mockery. assertIsSatisfied ( )
assertThat ( listPager. getPageIndex ( ), is ( 0 ) )
Assert. assertEquals ( uri1, uri2 )
assertNull ( newTransports. poll ( ) )
assertThat ( result, is ( jsonString ( "hello" ) ) )
assertions. isNotGreaterThan ( new Integer ( 2 ) )
assertEquals ( 0, d. getMeasurementStreams ( ). size ( ) )
assertFalse ( violation )
assertEquals ( "register", jsp )
Assert. assertEquals ( result, test )
Assert. fail ( "should be complex" )
assertEquals ( "application/zip; charset=UTF-8", dataSource. getContentType ( ) )
Assert. assertEquals ( 0, errors. size ( ) )
assertNotEquals ( first, second )
assertFalse ( "Edits dir exists already", fs. exists ( regionEdits ) )
assertThat ( result. iterator ( ). next ( ). getString ( "value" ), is ( "myValue01" ) )
Assert. assertEquals ( 403, response. getStatus ( ) )
assertTrue ( driver instanceof JDBC2Driver )
Assert. assertFalse ( secure )
assertOut ( "var a:Boolean = new Boolean(1)" )
assertEquals ( expectedQuery, actualQuery )
assertThat ( cut. apply ( hasText ), is ( true ) )
assertEquals ( EXPECTED_STOPWORDS, stopwords )
assertNotNull ( NonTerminal. IF_COMMAND. buildAbstractSyntaxTree ( tokenStream ) )
assertEqualsJFiglet ( asciiArt )
assertEquals ( Status. NOT_FOUND, response. getClientResponseStatus ( ) )
assertTrue ( _comp. isEquals ( json, expected ) )
assertTrue ( hasLineStartingWith ( "longest-mention:bill clinton", lines ) )
assertThat ( formatter. predict ( 0.0, 1 ), is ( "1" ) )
arrays. assertContainsOnly ( description, actual, null )
assertTrue ( param2. getValue ( ). equals ( param ) )
assertEquals ( "?p1=v1&p2=v2", query. toString ( ) )
assertEquals ( nodeId, logicalNodeId )
assertEquals ( RPCTransport. DEFAULT_MAX_RECV_FRAG, transport. getMaxRecvFrag ( ) )
assertThat ( clientBuilder. buildClient ( ), instanceOf ( ResteasyGitLabApiProxy. class ) )
assertEquals ( unfiltered, OAuthFilter. filterDeniedParams ( unfiltered ) )
assertEquals ( testTxtContents, new String ( contents ) )
assertThat ( baos. toString ( ), endsWith ( String. format ( "6 Scenarios:%n" + "6 Steps:%n" + "6 Failed" + "6 AMBIGUOUS%n" + "6 Skipped" + "6 UNDEFINED%n" ) ) )
assertTrue ( sourceFolderKeys1. compareTo ( sourceFolderKeys2 ) < 0 )
assertThat ( "There should be no tray matching anymore", trayMatchings. isEmpty ( ), is ( true ) )
Assert. assertEquals ( 2, analyser. getLoadRightAfterActivity ( route. getActivities ( ). get ( 0 ), route ). get ( 0 ) )
assertEquals ( expected, actual )
assertTrue ( latch. await ( 10, SECONDS ) )
assertEquals ( "Base for float is wrong", Integer. valueOf ( 3 ), parsed )
assertThat ( allUsedBindings ( result ), containsInAnyOrder ( "$p" ) )
assertEquals ( "1", max. get ( ) )
assertEquals ( 0, threadOne. getExecutions ( ). size ( ) )
Assert. assertEquals ( 0, data. length )
assertEquals ( result, string )
Assert. assertEquals ( "second", res. getStringData ( ) )
assertThat ( options. getGlue ( ), contains ( URI. create ( "classpath:/com.example" ) ) )
assertEquals ( ECHO_THIS_IS_HANDY, getStdOut ( ) )
assertTrue ( isAuthenticated )
assertThat ( asyncContext. process ( request ), is ( true ) )
Assert. assertNull ( caixa )
Assert. assertEquals ( expectedPortNoStrings [ i ], portNoString )
assertThat ( result, is ( notNullValue ( ) ) )
assertFalse ( noneExistingFile. exists ( ) )
assertEquals ( betweenness [ index2 ], 1.0 )
assertEquals ( job. jobId, lastRecentJob. jobId )
assertNull ( result )
assertEquals ( '!', formatWithRecordSeparator. getRecordSeparator ( ) )
assertEquals ( "win32", PlatformDetector. OS. getName ( ) )
assertNull ( array )
assertTrue ( file. exists ( ) )
assertEquals ( 6, actual. size ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
Assert. assertEquals ( "Testing � special. chars = also at the end =", toString ( bos. toByteArray ( ) ) )
Assert. assertFalse ( this. component. isTableTypeSupported ( this. constraints, - 1 ) )
assertThat ( webApiClient. getWebApiUrl ( ), is ( not ( "http://localhost:8080" ) ) )
assertEquals ( expected, result )
assertTrue ( unreadMessages. size ( ) == 1 )
assertThat ( result, is ( nullValue ( ) ) )
assertEquals ( "High-Performance Java Persistence", book. getTitle ( ) )
assertPaths ( finder. findAllPaths ( start, end ), "a,g,f,e,d,c,b,a" )
assertEquals ( "A on", $ ( LabelElement. class ). first ( ). getText ( ) )
assertEquals ( urlWithPath, urlString )
assertEquals ( Form. class, ferp. getEncoderClass ( ) )
assertTrue ( WroUtil. matchesUrl ( request, "wroApi/test" ) )
assertMultipartHasSize ( 3, original. getHeaders ( ). getLength ( ) )
assertEquals ( "case " + "when true then new Object() " + "else null ", expr. toString ( ) )
Assert. assertEquals ( 10, result. getResultSize ( ) )
Assert. assertEquals ( "multipart/form-data", actualValue )
assertEquals ( "com.example.DefaultUI", uiClass. getName ( ) )
assertEquals ( cryptor. getIterations ( ), iterations )
Assert. assertFalse ( this. manager. disconnectFromAll ( this. family1, this. person1 ) )
MatcherAssert. assertThat ( PodHelper. isReady ( pod ), is ( true ) )
assertEquals ( 2, myPm. minLen2. getMinLen ( ) )
assertThat ( lines, is ( Arrays. asList ( "This is a long line that cannot fit on a single line", "could be wrapped" ) ) )
assertEquals ( "other", e. getAttributeNode ( "name" ). getValue ( ) )
assertTrue ( resultMessage ( res, PUT ), res. passedValidation ( ) )
assertTrue ( true )
Assert. assertNotNull ( response )
assertEquals ( privilege, p )
assertEquals ( "Wrong URL", file. getAbsoluteFile ( ). toURI ( ). toURL ( ), url. toURI ( ) )
assertEquals ( p1, p2 )
Assert. fail ( )
assertThat ( DateInterval. atomicOpen ( date ). withOpenEnd ( ). isEmpty ( ), is ( true ) )
assertEquals ( "All received messages are correct.", 0, messageVerifier. getFailures ( ) )
assertEquals ( BPResultType. FAIL, testResult. getResultType ( ) )
assertThat ( result, is ( false ) )
assertEquals ( USERNAME, username )
assertEquals ( "VALUE_TO_TEST", rsp. getHeaderField ( HEADER ) )
assertEquals ( "Expected another type of analyzer", NorwegianAnalyzer. class, analyzer. getClass ( ) )
assertGalleries ( galleries )
assertResult ( session )
Assert. assertEquals ( "{\\"value\\":\\"test\\"}", json )
Assert. assertFalse ( "No ejb loaded class", ejbService. isOjbLoadedClass ( ) )
assertEquals ( 0, engineRule. getHistoryService ( ). createUserOperationLogQuery ( ). count ( ) )
assertNull ( statusFail )
assertOrder ( order, length, comparator )
assertEquals ( HttpStatusCodes. UNSUPPORTED_MEDIA_TYPE. getStatusCode ( ), response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "function sample1 ()", functionLibrary. getFunctionLibraryScript ( ) )
assertEquals ( "Count.getReplacementCommand", expected, actual )
Assert. assertTrue ( files. size ( ) > 0 )
assertTrue ( encoded. indexOf ( "\\r\\n" ) == encoded. lastIndexOf ( "\\r\\n" ) )
Assert. fail ( "Expecting NonSquareMatrixException" )
Assert. assertEquals ( 10, KafkaConsumerUtils. INSTANCE. getNumRead ( ) )
assertTrue ( shouldVote )
assertEquals ( future, underTest. doEventuallyCollectEmpty ( consumer, supplier ) )
assertEquals ( "2\\n", found )
Assert. assertEquals ( 11, patients. size ( ) )
assertThat ( bic. toString ( ), is ( equalTo ( "BIC-8" ) ) )
assertEquals ( "2016-01-15T21:49:24Z", DateConverter. format ( dateTime ) )
files. assertHasDigest ( INFO, actual, digest, expected )
Assert. assertEquals ( FileUtils. readFileToString ( file0, Charset. forName ( "UTF-8" ) ), expected )
assertNotNull ( result )
assertEquals ( 10L, result )
Assert. assertNull ( "Should not have a default constructor", tabset. getTab ( ) )
assertNull ( removeFirst )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), hasEnvVar ( ITEM1, END_VALUE_1 ) )
assertEquals ( "http://help.pentaho.com", spyAppConfigProperties. getHelpUrl ( ) )
assertNull ( javaHomeResolver. resolve ( toolchain, new Properties ( ) ) )
assertions. isNotLessThan ( expected )
assertStat ( result )
Assert. assertEquals ( "monkey", mAuthenticator. getAuthToken ( ) )
assertEquals ( "", result. toString ( ) )
assertEquals ( numbers, new Numbers ( 0 ) )
assertEquals ( 5, readCount )
assertEquals ( "", this. taskExecutionService. getLog ( platformName, taskDeploymentId ) )
assertTypeEquals ( expected, actual )
assertFalse ( "Permission denied", updateSamplesFromAnalysisSubmissionPermission. isAllowed ( authentication, analysisSubmission ) )
assertEquals ( expectedDatetime, strategy. getNextBusinessDay ( ldt ) )
assertEquals ( expectedCount, issues. size ( ) )
editor. assertProblems ( "notBoolean|boolean|boolean", "subprop|boolean|boolean" )
assertEquals ( "https://server/articlepath/abc%20com.example.abc%20com.example.abc", underTest. provideLink ( "abc" ) )
assertNull ( user )
assertEquals ( 19, maximum )
assertEquals ( 0, expansion. getExpansion ( ). getExpansion ( ). getCodes ( ). size ( ) )
assertNotNull ( Event. fetcher ( "AEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
Assert. assertEquals ( first, second )
assertThat ( key. verify ( Algorithm. HMAC_SHA256, "hello1". getBytes ( UTF_8 ), sig ), is ( false ) )
assertEquals ( expectedIDs, m_vector. getAllFeatureIds ( ) )
JSONAssert. assertEquals ( "{\\"results\\":[{\\"name\\":\\"test\\",\\"url\\":\\"http://localhost:8080/stream/test\\"},{\\"name\\":\\"test\\",\\"url\\":\\"http://localhost:8080/test\\"}]}", result, false )
assertEquals ( 1, results. getUpdatesCount ( ) )
Assert. fail ( e. getMessage ( ) )
Assert. assertEquals ( 2.0, n, 0.0000001 )
Assert. assertEquals ( 3L, log. get ( ). longValue ( ) )
assertNull ( links )
assertThat ( result, is ( expectedResult ) )
Assert. assertEquals ( new Double ( Integer. MIN_VALUE ), _c. convert ( "-32768.9999" ) )
assertEquals ( expected, elements )
assertEquals ( Result. ERROR, source. validate ( container ). getStatus ( ) )
Assert. assertTrue ( nodeService. isDuplicateNode ( lb2, node1 ) )
assertTrue ( rm instanceof TranslucentRepaintManager )
assertTrue ( "Error config not empty", setUpErrorConfig ( ). isEmpty ( ) )
assertEquals ( "jdbc:hive2://testhost:21050/;auth=ldap;kerberosAuthType=fromSubject", connectionString )
assertTrue ( diff. toString ( ), diff. similar ( ) )
Assert. assertEquals ( rtpPacket. getVersion ( ), 2, "Expect version = 2" )
Assert. assertEquals ( "Error updating community file", file. getVersion ( ), version + 1 )
assertEquals ( 4, reader. readFields ( ). size ( ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "LocationSearchFeed [locationList=[]]", result )
context. assertIsSatisfied ( )
Assert. assertNotNull ( lookup )
assertEquals ( "", expression. evaluate ( record ) )
assertEquals ( 10 * 3, pixel. get ( ) )
assertThat ( headlineOf ( view ), is ( "2 builds have failed since the last build has failed" ) )
assertTrue ( "Expect mapping generated by CoveredbyMapper to be equal to reference mapping", mapper. getMapping ( s, t, "?x", "?y", "top_within(x.asWKT, y.asWKT)", 1.0d ). equals ( referenceMapping ) )
assertEquals ( "baz", config. getString ( "foo.bar" ) )
assertEquals ( "maven", dependency. getGav ( ). getSoftwareIdentifier ( ). getSoftwareName ( ) )
assertEquals ( "/" + ORCID + "/funding/123", x. getFundingGroup ( ). get ( 0 ). getFundingSummary ( ). get ( 0 ). getPath ( ) )
assertNull ( apiForUrl )
assertEquals ( 4, exceptions )
assertEquals ( 1, logs. size ( ) )
assertEquals ( 200, response. getStatus ( ) )
assertTrue ( getStdOut ( ). contains ( "This file contains the description of the application" ) )
assertThat ( output, is ( bytesPayload ) )
assertThat ( manager. getCurrentSfc ( ), is ( "select * from [*]" ) )
assertTrue ( shouldVote )
assertFalse ( "hasFacet should return false", hasFacet )
assertTrue ( setCookie == null || setCookie. startsWith ( sessionCookieName + "=" ) )
assertTrue ( m. isVoiceConfig ( ) )
Assert. assertEquals ( 0, chronicle. getNumEvents ( 0, 1000 ) )
assertFalse ( fixture. removeSuffix ( 1 ) )
assertEquals ( "<val1 val2:bar>", result )
assertNotNull ( relapse. getId ( ) )
assertEquals ( ( short ) 2, classUnderTest. getCompatibilityLevel ( ) )
Assert. assertEquals ( 0, b. length )
assertEquals ( "child field value", ObjectUtils. getValue ( object, "childField" ) )
assertEquals ( 3, documentCount )
assertEquals ( result, expectedResult )
assertThat ( request. equals ( request2 ), is ( false ) )
assertEquals ( expResult, result )
assertEquals ( "", result )
assertNotNull ( node. getMetadata ( ) )
assertEquals ( 3, breakpointID )
assertEquals ( "10.555", bigInteger. toString ( ) )
Assert. assertEquals ( EJB_INTERCEPTED, bean. test ( ) )
assertEquals ( 1, executedActionCount. get ( ) )
assertEquals ( result, expecting )
assertEquals ( "[1]", writer. toString ( ) )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( "12 minutami", t. format ( new Date ( 0 ) ) )
assertNotNull ( "The result should not be null.", result )
assertThat ( argument. getValue ( ). getName ( ), is ( "step_with_array(Integer[], Integer[])\\n" + "execution time: 200, TimeUnit: %3$s\\n" + "steps:\\n" + "  - 1, 2, 3\\n" ) )
assertions. isNotEqualTo ( actual )
assertTrue ( binlogEvent. equals ( EventFactory. dml ( 1, 1, "f.1", 1, "a", "b", false, false, DMLType. INSERT ) ) || binlogEvent. equals ( EventFactory. dml ( 1, 1, "f.1", 3, "a", "b", false, false, DMLType. INSERT ) ) )
assertXMLEqual ( new StringReader ( "<body></body>" ), new StringReader ( html ( processed ) ) )
assertEquals ( gavs. size ( ), gavSchema. validateGroup ( ). size ( ) )
assertEquals ( opponent. getHero ( ). getHp ( ), 8 )
assertNull ( property )
assertNull ( author )
assertEquals ( in. toString ( ), out. toString ( ) )
assertFalse ( HttpMessageUtils. isText ( message ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertTrue ( "Response is not correct.", response. contains ( "jacc" ) )
assertThat ( actual, is ( expected ) )
assertTrue ( "Login empty", constraintViolations. size ( ) == 1 )
assertEquals ( new Integer ( 1 ), collection. add ( "value" ) )
assertEquals ( doc1, io. getDocumentById ( id1, false ) )
assertThat ( traversal. toList ( ), containsInAnyOrder ( VertexMatcher. likeVertex ( ). withDateRange ( new DateRange ( "too_late", 2000, 2050 ) ), VertexMatcher. likeVertex ( ). withDateRange ( new DateRange ( "just_right", 1900, 1950 ) ) ) )
assertEquals ( "response string", d_client. callUpdateHandler ( "functionName", params ) )
assertEquals ( 0L, fileSize )
assertEquals ( label, bs. getVolumeLabel ( ) )
assertTrue ( matches )
assertThat ( errorResponse1, is ( errorResponse2 ) )
assertNotNull ( result )
editor. assertProblems ( "spring|Unused", "cloud|Unused", "rabbit|'stream'", "bindings|'map'", "input|'map'", "consumer|'map'", "auto-bind-dlq|'true'" )
assertEquals ( expected, settings )
Assert. assertEquals ( 0.0, a. transposeMultiply ( b ). subtract ( a. transpose ( ). multiply ( b ) ). getNorm ( ), 1.0e-15 )
assertTrue ( isPropsSupportedByDefault )
assertEquals ( 3, count )
assertEquals ( 2, artists. size ( ) )
assertEquals ( expected, result )
assertTrue ( MatrixUtils. equals ( p, pinvRnk1, 0.05 ) )
assertCompilationMessage ( diagnostics, Kind. ERROR, 16, "must use @WorkbenchPanels or parts." )
assertActionKey ( HttpVerb. GET, "root-collection-params", true, keys. get ( 0 ) )
assertFalse ( hasPermission )
Assert. assertEquals ( true, retval )
Assert. assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf. getCumulativeLoss ( ), udtf. getCumulativeLoss ( ) < 800 )
Assert. assertFalse ( "GetConnections returned no results", jsonList. isEmpty ( ) )
assertEquals ( encoded. length, fixture. prepareToEncode ( context ) )
assertEquals ( new File ( f, "src/myxcode/code/index.xcode" ), new File ( project. getBasedir ( ), "code/index.xcode" ) )
assertEquals ( 2L, count )
Assert. assertEquals ( this. mocker. getComponentUnderTest ( ). getDefaultOntologyLocation ( ), location )
Assert. assertEquals ( "user.zone", info. toString ( ) )
assertEquals ( b10, b2 [ 0 ] )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
assertTrue ( tagUC. getId ( ) > 0L && tagUC. getUser ( ). getId ( ). equals ( tagUC. getUser ( ). getId ( ) ) )
assertTrue ( writeMethod. getReturnType ( ) == AwsProxyRequest. class )
assertEquals ( 1, application. informAttributeAdded. get ( ) )
assertThat ( result, is ( sameInstance ( foreignKeysRequest ) ) )
assertFalse ( "Tab with deleted flag is still present in DB", deletedFlag. booleanValue ( ) )
assertTrue ( page. asXml ( ). indexOf ( "SUCCESS" )!= - 1 )
assertEquals ( list, parser ( "// comment\\n ( str)" ). object ( "" ) )
assertEquals ( 2, itemsets. size ( ) )
assertEquals ( 'a', r. readChar ( ) )
assertEquals ( "Hello World", metadata. get ( TikaCoreProperties. TITLE ) )
Assert. assertEquals ( "https://foo.com:8080/things/123/456?anchor1=value5&anchor2=value6", result )
assertTrue ( like. passesFilter ( "id", item ) )
assertThat ( schema, allOf ( containsString ( "input TypeReplacementsInput {\\n" + "  short_multiValueList: [type1, type2]\\n" + "}\\n\\n" ) ) )
assertVisitorSatisfied ( )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertEquals ( 1, inverses. size ( ) )
assertEquals ( COSNull. NULL, result. getItem ( COSName. R ) )
Assert. assertEquals ( CLOUD_SDK_HOME, sdk. getPath ( ) )
assertNotNull ( user )
Assert. assertSame ( "ClassLoader not set", ClassLoader. getSystemClassLoader ( ), session. getClassLoader ( NAME1 ) )
Assert. assertEquals ( "admin", admin. getRole ( ) )
assertEquals ( 3, output )
Assert. assertNull ( beanDescriptor )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( "dropwizard", metrics. baseName ( ) )
assertTrue ( rowStandalone. isLoggedIn ( ) )
assertEquals ( 0, serverStatus. getVolume ( ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res, true )
Assert. assertEquals ( "{" + "\\"@odata.context\\":\\"../$metadata#ESAllPrim(32767)/PropertyDecimal\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"34\\"}", resultString )
assertEquals ( "The subscription name should be set correctly", "jms:queue:Foo.Bar", endpoint. getDurableSubscriptionName ( ) )
Assert. assertTrue ( true )
assertEquals ( 0, p. getMaskGroup ( ). getNodeCount ( ) )
assertEquals ( "testchunksize", 1024, IcapDecoderUtil. readChunkSize ( new ByteArrayInputStream ( s. getBytes ( ) ) ) )
assertTrue ( s. isSubTree ( root ) )
Assert. assertFalse ( "Shouldn't exceed - " + LONG_TEXT_2. getBytes ( ). length, payload. isGlobalExceedLength ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( ShoppingProductChannel. LOCAL, channel. getChannel ( ) )
Assert. assertArrayEquals ( message, msgSerialize )
assertEquals ( "concat() Text is Test", Text. valueOf ( "Test" ), _text )
assertTrue ( dim. getWidth ( ) > separator. getPreferredSize ( ). getWidth ( ) )
assertTrue ( testSupport. isBooted ( ) )
assertThat ( pkgClasses. size ( ), is ( defaultClasses. size ( ) ) )
assertEquals ( new DcCoordinates ( DcCoordinates. D_HOST, DcCoordinates. D_PORT, DcCoordinates. D_ZONE ), coordinate )
assertEquals ( 1, rpt. size ( ) )
assertSame ( expected, actual )
assertTrue ( instance == null )
assertEquals ( witness, tl )
assertEquals ( expected, actual )
JSONAssert. assertEquals ( expected, response. getBody ( ), false )
Assert. assertNotNull ( id )
Assert. assertEquals ( pixel_EXPECTED, pixel_ACTUAL, eps05 )
assertEquals ( 0.5, similarWordRatio, 0.0 )
assertEquals ( result, "10.2" )
Assert. assertEquals ( "foo", set. getName ( ) )
assertEquals ( "field.asMap()", p. toString ( ) )
assertEquals ( 400, response. getStatus ( ) )
Assert. assertEquals ( "(aa_change_indel (aa_point_location (aa_char Cys) 123) del (aa_string Cys ins Arg))", aa_change_indel. toStringTree ( parser ) )
Assert. assertEquals ( 1, find. getCount ( ) )
Assert. assertEquals ( "29/29/fbc5dc6a2e9c620069b24e2a143af4285f", time )
assertEquals ( "[Cookie{name='foo', value='bar', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}]", httpRequest. getEffectiveCookies ( ). toString ( ) )
assertEquals ( new BigDecimal ( "0.5" ), customer. getRate ( ) )
Assert. assertEquals ( expectedTimelineSegments, timeline. getTimelineSegments ( ) )
Assert. assertNotNull ( cm )
assertTrue ( model1. isIsomorphicWith ( model2 ) )
assertEquals ( "Find by unknown label not returning a list with one reading", 0, readings. size ( ) )
assertEquals ( generatedName, extractedName )
assertTrue ( out. contains ( "ERROR: Applications are not authorized to view the logs for admin" ) )
assertEquals ( 1, nodes. size ( ) )
assertThat ( MODEL. findNextTransition ( utc ). get ( ), is ( AUTUMN_1947 ) )
assertEquals ( expResult, result )
Assert. assertTrue ( returnedVisibilities. isEmpty ( ) )
assertEquals ( Optional. of ( "master" ), result )
Assert. assertEquals ( 2, segments. size ( ) )
Assert. assertEquals ( expected, discipline )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 07" ) )
assertThat ( tokens, equalTo ( Arrays. < Object > asList ( "This is a test", "Another test", "No spaces", "Between these two" ) ) )
assertNotNull ( result )
assertMockEndpointsSatisfied ( )
assertEquals ( count1. get ( ), count2. get ( ) )
assertEquals ( USERNAME, profile. getId ( ) )
assertFalse ( arrayType. isPrimitive ( ) )
Assert. fail ( "distcp failure" )
assertNotNull ( session )
assertEquals ( CREATED_PODCAST_RESOURCE_ID, createPodcast )
assertTrue ( exists )
assertEquals ( sortedSinged, result )
assertEquals ( body. toString ( ), POST_VAL )
assertEquals ( expResult, result )
assertSame ( t, TEST_2007_07_15 )
assertEquals ( "[\\"bla\\",\\"blub\\"]", json )
assertFalse ( status. equals ( HardActivityConstraint. ConstraintsStatus. FULFILLED ) )
assertTrue ( pointQuadTree. getLevel ( ) == nodeQuadTree. getLevel ( ) )
assertEquals ( "Spark distributor should have been created", 5, results. count ( ) )
Assert. assertTrue ( irodsFileForSecondaryUser. canWrite ( ) )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {}}", bson. toJson ( writerSettings ) )
assertEquals ( 2, parent. getChildren ( ). size ( ) )
assertEquals ( 1, result. size ( ) )
assertEquals ( actualSimplePage, samplePage, "The simple page is correct" )
assertNotNull ( perms )
assertNull ( entry )
Assert. assertEquals ( 6, lexicon. getRoots ( ). size ( ) )
assertThat ( updatedSearchFormat, equalTo ( "(somefield:(%1$s)^5)" ) )
assertThat ( principals, hasItem ( new UserNamePrincipal ( "user" ) ) )
JSONAssert. assertEquals ( expected, result. getResponse ( ). getContentAsString ( ), false )
assertThat ( fileWithSize. getSize ( ), is ( fileOfKnownSize ) )
assertEquals ( 1.0, result, 0.1 )
assertEquals ( expectedValue, generatedValue )
assertThat ( session, is ( EmptyChangeSetEntityCrudSession. get ( ) ) )
assertEquals ( expected, actual )
assertThat ( url. toString ( ), is ( "http://localhost/foo/bar" ) )
assertThat ( listener. getPartitionSpecFilter ( ), is ( "(p1='val1' AND p2=val2) OR (p1='val11' AND p2=val22) OR (p1='val111' AND p2=val222)" ) )
Helpers. assertJson ( result. toString ( ), json )
assertEquals ( new ModelId ( "com.bosch.Car", "1.0.0" ), ModelId. fromPrettyFormat ( modelId ) )
assertEquals ( testValue. trim ( ), result )
assertEquals ( 1, auc. updatesSize ( ) )
assertEquals ( expected, postRestart )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
Assert. assertFalse ( t. sameContent ( ) )
assertEquals ( "193d9e3c485-7d61-43df-43d25f81e378eb67e", orderId )
Assert. assertTrue ( isEqual ( distance, 0.6 ) )
assertNotNull ( service )
assertThat ( result, is ( true ) )
assertEquals ( expectedPrefix, actualPrefix )
assertNotNull ( regResponse )
assertEquals ( obj, value )
assertFalse ( baseUri. handles ( dodgyBase ) )
assertMockEndpointsSatisfied ( )
assertThat ( cr. toString ( ), is ( "Comune Amministrativo-1.2.3" ) )
assertEquals ( "@{foo()}", s )
assertEquals ( "thevalue", retrievedValue )
Assert. assertEquals ( date1, timeZoneDefinition. compare ( first, second ) )
assertOrecValue ( orec, orecValue )
Assert. assertNull ( nullConverted )
assertEquals ( CudaGridExecutioner. MetaType. NOT_APPLICABLE, executioner. getMetaOpType ( opB ) )
Assert. assertTrue ( "Expression position position > position on expression " + arg. toString ( ) + " at position " + pos, pos > arg. getBeginColumn ( ) )
assertEquals ( 0, issues. size ( ) )
assertTrue ( "A line should be destroyed even in given direction", isMineInDirection )
Assert. assertEquals ( true, objectSet. isEmpty ( ) )
assertEquals ( "Hello\\r\\n!", mustache. render ( null ) )
assertEquals ( "1b5b334566d611b5b6d", Hex. encodeHexString ( TextUtils. green ( "a" ). getBytes ( ) ) )
assertThat ( sentinelHello1, not ( equalTo ( sentinelHello2 ) ) )
assertEquals ( stat, stat2 )
assertEquals ( Collections. emptySet ( ), map. keySet ( ) )
assertFalse ( "No clip found", result. isEmpty ( ) )
assertThat ( jsonComparator. compare ( expected, actual ), is ( false ) )
assertEquals ( Level. INFO. toString ( ), level. toString ( ) )
assertFilesRevision ( workingCopy, SVNRevision. create ( 1 ), SVNRevision. create ( 2 ) )
assertTrue ( MethodChecksUtils. hasBooleanVariableInFied ( methodDeclarationNode ) )
Assert. assertEquals ( "*3*5*7*9*10*11*14*15*16*17*19*28*20*23*26*29*32*35*34*35*34*35*36*35*34*35*36*35*35*36*35*32*35*34*35*35*36*35*35*34*35*35*36*35*35*34*35*35*35*35*35*35*35*36*35*36*35*34*35*36*35*36*35*36*35*34*35*35*36*35*34*35*35*36*35*35*36*35*35*36*35*36*35*35*36*35*35*36*35*34*35*35*35*36*35*35*36*35*36*35*36*35*35*36*35*35*36*35*36*35*36*35*36*35*36*35*35*35*36*35*35*36*35*35*
assertThat ( comparator. compare ( axiom1, axiom2 ), is ( greaterThan ( 0 ) ) )
assertEquals ( "jede sekunde", t. describe ( cron ) )
assertEquals ( 10, pow )
assertEquals ( expected, successors )
assertEquals ( asList ( "xyz", "foo", "blah", "yermom" ), options. nonOptionArguments ( ) )
Assert. assertNull ( userService. getUser ( 502 ) )
Assert. assertEquals ( "Resource not removed", 1, set. size ( ) )
Assert. assertEquals ( new File ( "src/test/resources/http/mypath" ). toURI ( ), uri )
assertEquals ( CompressionType. TarGz, compressionType )
assertTrue ( shell. disposed )
assertEquals ( expected, actual )
Assert. assertEquals ( metrics. size ( ), 2 )
endpoint. assertIsSatisfied ( )
assertEquals ( timeFrameView, timeFrameEditor. view )
assertEquals ( expectedNode, actualNode )
Assert. assertEquals ( expectedMessage, new CompareTool ( ). compareByContent ( licensed, agpl, "iText", "iText" ) )
assertThat ( outcome. getIssues ( ), hasItems ( "#ISSUE-123", "#ISSUE-456" ) )
assertTrue (! result. hasErrors ( ) )
Assert. assertTrue ( msgAndResponse. isSuccess ( ) )
Assert. assertTrue ( "OS should match", first. getOs ( ). matchesCapabilities ( capabilities ) )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
PSLTest. assertRule ( rule, "@Sum[1.0, 1.0] * SINGLECLOSED(+A) = 1.0.   {A : 1, Foo : 1.0 }" )
assertTrue ( output, output. matches ( "(?s).*<0>.*" + times + ".*</0>.*" ) )
assertEquals ( "myTestAlias", delegate. getAlias ( ) )
assertFalse ( new JavaAssistClass ( fakeClass ). canInstantiate ( fakeClass ) )
Assert. assertEquals ( InetAddress. getLoopbackAddress ( ). getHostAddress ( ), tchannel. getHostInfo ( ) )
Assert. assertEquals ( dataLen, valuesCopied - valuesWritten )
assertNotNull ( metadata )
Assert. assertFalse ( this. manager. isConnected ( this. person1, this. family1 ) )
assertEquals ( fixture, this. libshout. getFormat ( ) )
assertEquals ( "vehLoc", route. getEnd ( ). getLocation ( ). getId ( ) )
assertEquals ( expecting, found )
assertTrue ( countDownLatch. await ( 10, TimeUnit. SECONDS ) )
assertionsFailure ( resultMap )
assertNull ( entry )
assertEquals ( lastValue, "EndNode8" )
assertNotNull ( UIContextRootView. getCurrentInstance ( ) )
assertEquals ( expectedMap, map )
assertEquals ( "Hello :John :Doe", ResponseBodyInterpolator. interpolate ( "Hello :firstName :lastName", req ) )
assertFalse ( listOutput. isEmpty ( ) )
assertEquals ( LONG_STRING, trie2. get ( cat ). toString ( ) )
assertEquals ( CONN_PATH + "/config/test", cp )
assertEquals ( abort. isUserResourceLimitation ( ), duplicate. isUserResourceLimitation ( ) )
Assert. fail ( )
assertThat ( stringOf ( sut. toDevice ( msg ) ), is ( lua ( powerPinMessage ( anyAnalogPin. pinNum ( ), anyValue ) ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\\n  var self = this;\\n  function a() {\\n  };\\n}" )
assertEquals ( "Testing Course", courses. get ( 0 ). getName ( ) )
Assert. assertEquals ( ( Float ) 1.0f, res )
assertSearchYields ( index, "foo:aaa", "fooaaa" )
arrays. assertContains ( description, null, values )
Assert. assertEquals ( functionColumn, ( ( String [ ] ) result ) [ 0 ] )
assertTrue ( success )
assertEquals ( expected, result )
assertEquals ( expectedLong, value )
assertNotNull ( error )
assertEquals ( 3, n )
sensei. assertWriteJson ( property )
assertSame ( expr. accept ( visitor ), visitResult )
assertPutFails ( role, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEquals ( "utf-8", originalEncoding )
Assert. assertEquals ( "2015-11-23 00:00", results )
assertTrue ( Futures. getUnchecked ( collector ) )
assertThat ( requestHeader ( REQUEST_HEADER ). retrieveValue ( req ), is ( nullValue ( ) ) )
assertPartialOrdered ( storeWithoutCommitThenDelete_expected ( stored, deleted ), readLatestJournalEntries ( ) )
Assert. fail ( )
assertEqualsJson ( expected, actual )
assertEquals ( "Wrong number of visited nodes", nodeCount, visitor. getVisitedNodes ( ). size ( ) )
assertEquals ( ( Integer ) 43, ksession. fireAllRules ( ) )
assertEquals ( resultMock, result )
assertTrue ( result. isEmpty ( ) )
assertVisitorSatisfied ( )
assertEquals ( "54321", arr. reduceRight ( callbackfn ) )
context. assertIsSatisfied ( )
assertNull ( flow )
assertEquals ( xs, ys )
assertThat ( compatibility. getIncompatibility ( ), both ( containsString ( "time" ) ). and ( not ( containsString ( "20" ) ) ) )
Assert. assertEquals ( "{\\"stringValue\\":\\"abc\\"}", result )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
assertNotNull ( actualPublicKeyCertificate )
assertEquals ( text. getText ( ), "" )
Assert. assertEquals ( 10L, template. execute ( callable, retryState ) )
assertTrue ( "Gradient is " + gradIdx + " on class " + cls, gradIdx < 1. )
assertEquals ( "Select script should match expected", expectedConcatenationWithNestedConcatenations ( ), result )
assertFactorization ( poly, UnivariateSquareFreeFactorization. SquareFreeFactorization ( poly ) )
assertNotNull ( constraints. getExpiryTime ( ) )
assertArray ( new double [ ] { 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5 }, p. getPotentials ( ) )
assertTrue ( roads. containsAll ( adjacentRoad ) )
assertNotNull ( kidless. name )
assertEquals ( 2, hashMap. size ( ) )
assertEquals ( data1, data2 )
assertEquals ( state. prefix. length ( ), 100 )
assertTrue ( true )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( "Unexpected result: " + result, expectedResult, result )
assertEquals ( "ws://localhost:8000", acceptOptions. get ( "http.server.header" ) )
assertEquals ( expected, actual )
Assert. assertEquals ( json, writer. toString ( ) )
Assert. assertEquals ( "true", result )
assertNotNull ( entity. getId ( ) )
UmaTestUtil. assert_ ( pat )
Assert. assertSame ( service, mixer. getService ( "clientId" ) )
assertEquals ( expResult, result )
Assert. assertTrue ( grd_EXPECTED [ i ] [ i ] == grd_ACTUAL [ i ] [ i ], DELTA_06 < 1e-10 )
assertThat ( infos. length, is ( 0 ) )
Assert. assertEquals ( 1, liList. size ( ) )
assertTrue ( retryPolicy. getRetryCondition ( ). shouldRetry ( null, e, 1 ) )
assertEquals ( "Next mid was not returned after the lifetime", firstMid, mid. get ( ) )
assertEquals ( s, r. toString ( ) )
assertTrue ( handler. canProcessEvent ( event ) )
assertFalse ( result )
assertTrue ( output. contains ( "0" ) )
assertEquals ( 0, result. getMappingsCount ( ) )
assertEquals ( position, returnedPosition )
assertEquals ( "myseq.nextval", new SQLSerializer ( new Configuration ( new SQLServerTemplates ( ) ) ). handle ( nextval ). toString ( ) )
assertEquals ( "bar", jsonConfiguration. getString ( "foo" ) )
Assert. assertEquals ( null, new CompareTool ( ). compareByContent ( output, cmp, outputPath, "diff" ) )
Assert. fail ( e. getMessage ( ) )
assertTrue ( validator. isValid ( modelId ) )
assertEquals ( "TokenExpirationDate not changed", newExpireDate, sut. getTokenExpirationDate ( ) )
assertMessageAndPath ( constraintViolationCreationContextList. get ( 0 ), message, pathWith ( ). property ( "foo" ). property ( "bar", true, 3 ) )
assertTrue ( sink. getInvalidConfiguration ( ) )
assertEquals ( expected, actual )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( "foo", s )
assertEquals ( result, true )
assertDtoAndMapConstructorAreSame ( 1 )
assertJsonEquals ( ImmutableMap. of ( "topic", "test-topic", "webpush", data ), message )
assertThrows ( IllegalStateException. class, funnel :: run )
assertEquals ( 4, result. getProperties ( ). size ( ) )
assertBrownGCD ( gcd, a, b )
assertEquals ( "Base for strings is wrong", "192.168.0.1", parsed )
assertEquals ( 1.5f, entry. getEffectiveDurationHours ( ), Float. MIN_NORMAL )
assertEquals ( HttpStatus. SC_OK, response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "one-group-by-single-field-hash", hash )
Assert. assertEquals ( 2, batches. size ( ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertAnnotations ( 1, Coordinate. class, new TestCoordinate ( 0, "51-30,26 N", "dd", TYPE_POINT_COORDINATES_0_1251_51 ), new TestCoordinate ( 1, "51-30,26 N", "dd", TYPE_POINT_COORDINATES_2_1251_26 ), new TestCoordinate ( 2, " 000-07,39 W", "dd", TYPE_POINT_COORDINATES_39_07_39_000 ) )
Assert. assertFalse ( context. getResult ( ) )
runner. assertAllFlowFilesTransferred ( AbstractGCPProcessor. REL_FAILURE, 1 )
assertEquals ( someField. toString ( ), "test" )
assertNull ( task. getCloser ( ) )
assertEquals ( automaticWorkQueue1. getHighWaterMark ( ), threadCount. get ( ) )
assertEquals ( "Mon", d. getDescription ( ) )
assertTrue ( dao. existsRemoteFileFile ( "path" ) )
assertTrue ( e. getCause ( ) instanceof IOException )
tester. assertRenderedPageMessage ( HomePage. class, "Username/Password incorrect." )
result. assertIsSatisfied ( )
assertThat ( prop. satisfiesConstraints ( value, session ), is ( true ) )
assertEquals ( 0, tableNames. size ( ) )
assertNotNull ( error )
assertEquals ( expected, result,.000001 )
assertEquals ( 1, result )
Assert. assertTrue ( e. getMessage ( ). contains ( "Invalid namespace reference found" ) )
org. junit. Assert. assertEquals ( expected, actual )
assertFalse ( album1. equals ( album2 ) )
assertTrue ( newRecipe. getTags ( ). isEmpty ( ) )
assertEquals ( "http://localhost.jenkins/git/notifyCommit?" + "url=http%3A%2F%2Fsome.stash.com%2Fscm%2Ffoo%2Fbar.git" + "&branches=refs%2Fheads%2Fmaster" + "&sha1=sha1&TARGET_BRANCH=production", captor. getValue ( ). getURI ( ). toString ( ) )
assertNotNull ( injector )
assertEquals ( expResult, result )
assertTrue ( ( ( BooleanType ) respParam. getParameter ( ). get ( 0 ). getValue ( ) ). booleanValue ( ) )
assertEquals ( "Unexpected cause code in SchematronProfile.schematron-test-rules.xml: 0", cause [ 0 ]. getCode ( ) )
assertEquals ( "Echo this...", response. body ( ) )
assertEquals ( "A", z )
Assert. areEqual ( "getd bmode,zone", zdalDataSource. getdBmodeZone ( ), "getd bmode,zone" )
assertThat ( result, hasSize ( 0 ) )
assertTrue ( "Snapshots with greater timestamps", greaterSnapshot. compareTo ( snapshot ) > 0 )
Assert. assertEquals ( bolt. getSrcDestFieldMapping ( ). size ( ), 2 )
assertTrue ( sba instanceof ThickSBA )
Assert. assertTrue ( "canonicalizing the test file " + name + " gives a different result than canonicalizing the cxtm export of " + cfg + " " + baseline, TestFileUtils. compareFileToResource ( cxtm, baseline ) )
assertEquals ( "4.2.1", model. getVersion ( ) )
assertTrue ( prov instanceof MonetaryConversions. ExchangeRateProviderImpl )
assertEquals ( expected, result )
assertEquals ( getLabel ( ), 0.0, prod. minus ( b ). getRMS ( ), TOLERANCE )
assertions. containsSequence ( sequence )
assertThat ( os. size ( ), not ( 0 ) )
assertEquals ( "double mapper serialization is wrong", expected, actual )
assertNotNull ( res )
assertEqualLines ( "invalid updating " + textFileName, newContent. toString ( ), definedContent )
assertEquals ( "very obese", string0 )
assertEquals ( "UNI___md_university_in", orgSectionHasher. hash ( section ) )
assertEquals ( Orientation. typeOf ( 7 ), orientation )
Assert. assertEquals ( expResult, result )
assertTrue ( e instanceof StateMachineException )
assertArrayEquals ( expected, actual )
Assert. assertTrue ( Models. isomorphic ( expected, actual ) )
assertThat ( metaMessage. getDuration ( ), is ( 1000L ) )
assertThat ( instance. size ( ), is ( i ) )
assertEquals ( "8.1.0", revision )
helper. assertAttributeValue ( EXPECT_NoAttributeValue, invoiceLine. getM_AttributeSetInstance ( ), attr_Country )
assertEquals ( "NOT default", ret )
assertEquals ( "should be same project", project2, shareAnalysisSubmissionWithProject. getAnalysisSubmission ( ) )
assertNotNull ( obj )
assertEquals ( input. parseString ( ), expected )
assertTrue ( checkDisconnected ( ) )
assertThat ( cursor. asListRemaining ( ), hasItems ( "movies/TheMatrixRevolutions", "movies/TheMatrixReloaded", "movies/TheMatrix" ) )
assertTrue ( Arrays. equals ( getPacketData
Assert. assertEquals ( 0, a. getNosi ( ) )
assertEquals ( sb. toString ( ), whereSb. toString ( ) )
assertEquals ( str, "text/plain" )
assertTextEquals ( "[S1]|#k1a|", cm )
assertTrue ( true )
assertEquals ( "0:0:0:0:0:0:0:0:0:0:0:0:0:0", ip. toString ( ) )
assertEquals ( NUM_WRITERS * ENTRIES, countHLog ( logfile, fs, conf ) )
assertEquals ( 2, branch_conditions. size ( ) )
assertFalse ( translationResult. getResult ( ). booleanValue ( ) )
assertEquals ( true, r. avalie ( avaliaveis, null ). get ( "a" ). booleanValue ( ) )
assertEquals ( 1, shacl. nbResult ( gg ) )
assertTrue ( entity. isValid ( ) )
assertThat ( description. toString ( ), is ( "equal to <1>" ) )
assertEquals ( position, workbenchMenuCompactNavBarView. getMenuItemPosition ( menuId ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. FUNDING_READ_LIMITED )
mock. assertIsSatisfied ( )
assertThat ( target. getQueueId ( ), is ( new Integer ( 1234 ) ) )
assertEquals ( "Hello Tim", resp. getResponseBody ( ). trim ( ) )
Assert. assertEquals ( expected, actual )
assertSelectResultKeys ( selector, "abc", "edf" )
assertEquals ( Transaction. DEFAULT_TX_FEE, request. tx. getFee ( ) )
assertNotNull ( MessageInteraction. reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "KCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "KPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertNotNull ( result )
assertEquals ( expected, actual )
assertNull ( map )
assertNotNull ( subject )
assertThat ( MessageSupport. paddedData ( " \\t\\n\\r\\f \\f \\f \\f \\f \\f \\"\\"", 16 ), is ( expected ) )
assertTrue ( events. size ( ) == 3 )
assertEquals ( "Steven Frederic Seagal", victim. readLiteralString ( ) )
assertTrue ( acceptor. validate ( controllerMethod, controllerInstance ) )
assertEquals ( DUMMY_URL, endpoint )
assertEquals ( "out must be a Failure", out, new Try. Failure ( "out must be a Failure" ) )
assertThat ( tester. request. getParameter ( "aaa" ), is ( "111" ) )
assertEquals ( expected, result )
Assert. assertTrue ( pinyinSet1. size ( ) > 0 )
assertEquals ( "ABCDEF", PropertiesUtils. substituteProp ( props, "${X}" ) )
assertTrue ( "Error returned", error )
Assert. assertEquals ( new TableName ( "bar", "foo" ), manipulation. getOriginalTableName ( ) )
assertEquals ( 6, outSize )
assertTrue ( learner. fuzz ( equiv ) )
assertThat ( pathsInSource, hasItems ( pathInSource1, pathInSource23 ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( out, cmp, destinationFolder, "diff" ) )
assertEquals ( "1 event should be returned with no events", 0, events. size ( ) )
Assert. assertEquals ( 2, count. get ( ) )
Assert. assertTrue ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
assertTrue ( "Syslog audit log should be created", ops. exists ( TEST_SYSLOG_AUDIT_LOG_ADDRESS ) )
Assert. assertTrue ( id1. equals ( id2 ) )
assertEquals ( 0, argList. size ( ) )
Assert. assertTrue ( conn. isClosed ( ) )
Assert. assertEquals ( filters, scope. getFilters ( ) )
assertEquals ( "pong!", reply. body ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])", m. toString ( ) )
assertNotNull ( result )
assertEquals ( generatedJavascript, expectedJavascript )
assertNotNull ( oracleEngine )
assertTrue ( desc. isEmpty ( ) )
assertNotNull ( result )
assertTrue ( "isPresent should return true if only element not present is not " + "required when RequireAll annotation is used.", testView. isPresent ( ) )
assertNull ( future. get ( ) )
Assert. assertEquals ( 1, JSONUtils. getInt ( jsonObject, "salary" ) )
assertTrue ( rewrite ( gadget, context ) )
Assert. assertEquals ( 2, keeperAdvancedService. addKeepers ( dc, cluster, new ShardTbl ( ). setShardName ( shard ) ) )
Assert. fail ( "Expecting MathIllegalStateException" )
assertTrue ( 12345.0f == d. asFloat8 ( ) )
assertThat ( q, is ( equalTo ( "meeting_register_form:[{\\"meeting_id\\":10,\\"participants\\":[{\\"name\\":\\"灞辩��\\",\\"age\\":20,\\"date\\":\\"2001-01-01T00:00:00Z\\",\\"date\\":\\"2001-01-01T00:00:00Z\\",\\"birthDate\\":\\"2001-01-01T00:00:00Z\\",\\"birthDate\\":\\"2001-01-01T00:00:00Z\\",\\"gender\\":\\"Male\\",\\"role\\":\\"Nigel Rees\\",\\"role\\":\\"William Munny\\"}]}" ) ) ) )
assertTrue ( evaluator. evaluate ( ae ) )
assertEquals ( Result. STOP, or. apply ( pathData ) )
assertEquals ( 1, x. size ( ) )
assertThat ( results, contains ( mrId ) )
assertTrue ( versionFileLib. exists ( ) )
assertThat ( child2. exists ( ), is ( false ) )
Assert. assertEquals ( "value", properties. get ( "namesrv.domain" ) )
Assert. assertEquals ( "Content-Type: text/plain", event. getContentType ( ) )
assertEquals ( "/", root. getString ( ( NamespaceRegistry ) null, encoder, encoder ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( 0, intList. size ( ) )
assertEquals ( "public boolean equals(Object obj) {\\n" + "return true;\\n" + "}\\n", mthd. toString ( ) )
assertObjectEquals ( "{'in':'header',name:'If-Unmodified-Since',type:'string'}", pi )
assertEquals ( expected, result. getTime ( ) )
assertNotSame ( this. target1, this. target2 )
assertEquals ( 1, type. getCapacityDimensions ( ). getNuOfDimensions ( ) )
assertGraph ( "" + "digraph G1 {\\n" + "  label: \\"10\\" tall\\n" + "  style: filled\\n" + "  color: lightgrey\\n" + "  edges:\\n" + "    LATERHeater -> Heater\\n" + "    CoffeeMaker -> Pump\\n" + "  edges:\\n" + "    CoffeeMaker -> Heater\\n" + "  edges:\\n" + "  label: \\"10\\" tall\\n" + "  style: filled\\n" + "  color: lightgrey\\n" + "}\\n" )
assertFalse ( loadconstraint. fulfilled ( context ) )
MetadataTableConfigHelper. assertConfigure ( tops )
assertThat ( result, is ( instanceOf ( Success. class ) ) )
assertTrue ( barrier. isAborted ( ) )
assertThat ( specification. getUnits ( ), is ( MILLI ( SECOND ) ) )
assertEquals ( 1, branch_conditions. size ( ) )
assertEquals ( 3, paragraphElement. getElementCount ( ) )
assertEquals ( "Both filters should be used", 50, size )
Assert. assertEquals ( Status. NOT_FOUND. getStatusCode ( ), resp. getStatus ( ) )
assertEquals ( new SchemaAndValue ( Schema. BOOLEAN_SCHEMA, true ), avroData. toConnectData ( avroSchema, true ) )
assertTrue ( result. contains ( "\\"1-0-v0\\":{\\"type\\":\\"LCD\\",\\"values\\":[\\"1\\",\\"2\\"]}" ) )
Assert. assertEquals ( true, 0 == partition. calculate ( "2014-01-01 12:00:00" ) )
Assert. fail ( "Expected exception to be thrown." )
assertEquals ( mk, mk2 )
Assert. assertEquals ( expected, name )
Assert. assertEquals ( HttpServletResponse. SC_INTERNAL_SERVER_ERROR, response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "foo", this. classifier. classify ( new IllegalStateException ( "Foo" ) ) )
assertFalse ( attributes. isNew ( ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( "[5.0, 4.0, 3.0, 2.0, 1.0]", IteratorToGeneratorAdapter. adapt ( range ). toCollection ( ). toString ( ) )
assertEquals ( 114., violation, 0.01 )
assertEquals ( Float. valueOf ( 81.56891f ), testVal )
assertNull ( expr. exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertArrayEquals ( centuryAndTitlesFromInput, centuryAndTitlesFromHadoop )
assertThat ( generated, is ( "Count<arquillian:[item]>" ) )
assertEquals ( expected, results )
assertTrue ( details. hasCompensated ( ) )
assertTrue ( "Location not defined", handler. isLocationDefined ( ) )
assertThat ( "interface inherited method", obj, equalTo ( 44 ) )
Assert. assertTrue ( "No results when search for people", success )
assertEquals ( true, fr. getFeed ( "/feed/author_A" ). contains ( a ) )
assertEquals ( "readonly", exp. toString ( ) )
assertTrue ( result. isSuccess ( ) )
assertEquals ( expectedResult, actualResult )
assertEquals ( "Failed to generate for loop with initializer and counting expression", FOR_INITIALIZER_NO_COUNTING_EXP_EMPTY, s )
assertNotNull ( transferer )
assertThat ( actual, is ( "ABC_ID" ) )
assertEquals ( "Base for doubles is wrong", Double. valueOf ( 3.5d ), parsed )
assertEquals ( IP, profile. getId ( ) )
assertEquals ( 3, getCount ( ) )
assertEquals ( 3, books. size ( ) )
assertEquals ( expected, got )
Assert. assertTrue ( scope. isEmpty ( ) )
assertEquals ( 500, fixedRate )
assertThat ( testOutcome. getCompleteName ( ), is ( "My user story" ) )
assertEquals ( "backOff value is " + i, factor, nextBackoffMillis )
assertTrue ( isSorted )
Assert. assertTrue ( res. isEmpty ( ) )
assertTrue (! result. isEmpty ( ) )
assertEquals ( "Float value does not match", bookmark. getVisitRatio ( ), loadedBookmark. getVisitRatio ( ), 0.001 )
assertThat ( result, containsInAnyOrder ( "Jane", "Adam" ) )
assertEquals ( f3Rec, r )
Assert. assertTrue ( myRecordList. size ( ) == 2 )
Assert. assertEquals ( Arrays. asList ( new Token ( "test", Comment. LINE_SEPARATOR ) ), parser. parse ( "test", new Token ( "test", Comment. LINE_SEPARATOR ) ) )
assertThat ( sessionFactory. getCurrentSession ( ). get ( TaskSourceElement. class, task. getId ( ) ), nullValue ( ) )
assertArrayEquals ( "odd terminated compact decode fail", expected, CompactEncoder. unpackToNibbles ( test ) )
assertEquals ( new SubmissionSet ( ), result )
assertEquals ( "0fb7", result )
assertNotNull ( loader )
assertEquals ( "System configuration not updated", after, read )
assertNotNull ( Member. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "QUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertTrue ( qr == q1 )
Assert. assertEquals ( payLoad, TEST_STRING_VALUE )
Assert. assertSame ( o, p. getExpectedValue ( ) )
assertTrue ( "incorrect value", aNumber. toString ( ). equals ( result ) )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( 2, model. getObjects ( Conversion. class ). size ( ) )
Assert. assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:2.2.0.Final", adapter. dependencies ( ) [ 0 ] )
assertFalse ( resp )
Assert. assertEquals (TrafficClass. TCP, socket. getTrafficClass ( ) )
assertEquals ( "bar", p. pull ( ) )
assertEquals ( true, classUnderTest. getSavePreferencesImmediately ( ) )
Assert. assertEquals ( c1, c2 )
assertEquals ( expResult, result )
assertEquals ( r1, r2 )
assertCorrectBinaryString ( data, expected )
assertFalse ( clusterStatus. isInSafeMode ( false, DEFAULT ) )
assertEquals ( "raw() content-type-header=[application/custom] accepts-header=[*/*]", actual )
Assert. assertEquals ( element. getText ( ), "click me" )
assertEquals ( "163.152.23.222", ip. asChars ( ) )
assertNotNull ( userDetails )
assertEquals ( "TDP-3", searchCallback. state )
Assert. assertEquals ( c. getValue ( ), "checked" )
assertEquals ( "test", echo. echo ( "test" ) )
context. assertIsSatisfied ( )
Assert. assertEquals ( "DragMe", destination. getText ( ) )
assertNotNull ( Transcription. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
Assert. assertTrue ( kernelServices. isSuccessfulBoot ( ) )
assertThat ( registered, is ( false ) )
assertTrue ( "unexpected value", value )
assertNull ( result )
assertInvocations ( invocations )
assertThat ( builder, is ( not ( nullValue ( ) ) ) )
TestUtils. assertEquals ( interesado, interesadoCreado )
assertThat ( testExecutor. invokeTest ( 1000L, ImmutableMultimap. of ( "a", "b", "c" ) ), is ( true ) )
assertEquals ( transformedQuery, expectedQuery )
assertThat ( po. get ( ). getRegisteredCount ( ), is ( 200 ) )
assertEquals ( "POST should return 201 response code", 201, response. getStatus ( ) )
Assert. assertNull ( prewritePrimaryRow ( ) )
assertEquals ( expResult, result )
assertEquals ( "Generator is not a generator", out, generator. getOutput ( ) )
assertTrue ( true )
assertThat ( axioms, hasItem ( axiom ) )
assertEquals ( tags, taggedMetric. getTags ( ) )
assertEquals ( expected, json )
assertNotNull ( form )
assertFalse ( sut. isAccountNonLocked ( ) )
assertFalse ( ( boolean ) testedMethod. invoke ( tasksManagerImpl, STARTING_BYTE_OF_4_BYTE_CHAR ) )
assertEquals ( "(1,2,3,4,5)", asSequenceStr ( result ) )
assertTrue ( traceHeaderLatch. await ( 5, TimeUnit. SECONDS ) )
Assert. assertEquals ( expected, actual )
assertTrue ( rs. next ( ) )
assertEquals ( count, session. from ( $ ( u ) ). count ( ) )
Assert. assertEquals ( fsAccess. serviceHadoopConf. get ( "foo" ), "bar" )
assertThat ( output. format ( "failed", "", "red" ), Matchers. is ( "\\033[32msuccess\\033[0m" ) )
Assert. fail ( "Was able to create two fields with same alias!" )
assertThat ( sortDependencies. toString ( ), is ( "DependencySortOrder{childElementNames=[groupId, scope]}" ) )
assertThat ( frame. getData ( ), is ( notNullValue ( ) ) )
Assert. assertTrue ( Double. isNaN ( MathUtils. numericallySafeSum ( numbers ) ) )
assertTokensEqual ( of ( integer ( 1 ) ), lastSeenTokens. get ( ) )
assertNull ( result )
assertMatrixEquals ( A, qr. factor ( new DenseMatrix ( A ) ) )
assertThat ( writer. toString ( ), equalTo ( "one\\ntwo\\nthree" ) )
assertEquals ( expectedPosition, actualPosition, 0 )
assertEquals ( "Server returned unacceptable response", HttpURLConnection. HTTP_UNACCEPTABLE, urlConnection. getResponseCode ( ) )
Assert. assertEquals ( 0, applicationAction. getAlertStreamList ( ). size ( ) )
arrays. assertDoesNotContain ( description, actual, other )
assertEquals ( 1, query. count ( ) )
assertTrue ( "Should return body of element", docElement. getBody ( ) instanceof Element )
assertTrue ( future. isDone ( ) )
assertEquals ( TextFileMetricsPersister. FILE_FORMAT_SHORT, manager. getFileFormat ( prefix + "test.metric.type.metric.type.name.Log" ) )
assertEquals ( expectedDate, formatDate ( "yyyy-MM-dd HH:mm", result ) )
assertNotNull ( wkt )
Assert. assertTrue ( newPointAvailable )
assertEquals ( 1, statistics. size ( ) )
assertTrue ( lt. interpret ( Version. valueOf ( "1.2.3" ) ) )
assertThat ( result, is ( false ) )
assertXsltOutput ( "D", "I" )
assertThat ( "Count of customer", res, is ( 0 ) )
assertEquals ( "3 啶�啶苦え啶�啶苦え 啶�啶距う", t. format ( new Date ( 315569259747L * 3L ) ) )
Assert. assertEquals ( 1, s. x )
assertEquals ( HttpStatus. SC_MOVED_PERMANENTLY, response. getStatus ( ) )
assertEquals ( r1. hashCode ( ), r2. hashCode ( ) )
assertFalse ( Intersects. lineIntersectsCircle. call ( a, c ) )
Assert. assertTrue ( pss. toString ( ). contains ( Integer. toString ( Calendar. getInstance ( ). get ( Calendar. HOUR_OF_DAY ) ) ) )
assertEquals ( acceptor, typedMap. get ( accKey ) )
assertEquals ( history, unmarshalledHistory )
Assert. assertEquals ( check, result )
assertEquals ( "555", tk. next ( ) )
arrays. assertNotEmpty ( description, null )
assertNull ( adminAccess. getKeyPair ( ) )
assertEquals ( "other", v. getProp ( NAME ). getHandler ( ). getName ( ) )
assertEquals ( signatureValue, certificate. getSignature ( ) )
Assert. assertTrue ( hasIndexHashKeyEqualCondition )
assertNotNull ( "Date cannot be null", date )
assertEquals ( expected, testIndex. getPatternMap ( ) )
assertThat ( result. size ( ), is ( userRoleList. size ( ) ) )
rule. assertScenarioEnded ( )
assertEquals ( "http://host/sentry/api/293b4958-71f8-40a9-b588-96f004f64463/store/", sentryApiUrl. toString ( ) )
assertRows ( sequencedPath, 1, TEST_COLUMNS )
assertEquals ( new TrackPosition ( 1 ), changeEvent [ 0 ] )
assertTrue ( entity. getId ( ) > 0 && entity. getArea ( ) == - Double. MIN_VALUE )
Assert. assertEquals ( VAL6 [ j ] [ 0 ] + "->" + j, VAL6 [ j ] [ 1 ], result. getText ( ) )
assertSame ( DeSerializer. class, deserializer. getClass ( ) )
Assert. assertEquals ( "Authentication with user and password failed", Result. SUCCESS, authentication. authenticate ( user, password ) )
assertNotNull ( result )
assertEquals ( violations. iterator ( ). next ( ). getMessage ( ), "No violations were found" )
assertEquals ( 1, dataStore. getIndices ( MOCK_DATA_TYPE_1 ). length )
Assert. assertEquals ( decryptedPayload, decryptedPayload )
assertEquals ( expected, filterAclEntriesByAclSpec ( existing, aclSpec ) )
Assert. assertEquals ( "Hello, world!", html )
Resp. assertOk ( result )
assertEquals ( "^(.*)$", regex )
assertTrue ( h. getNewURL ( ). equals ( "/NewSimpleRegex" ) )
assertArrayEquals ( new String [ ] { "1.2.0.0", "466.0", "Moritz's Abstract" }, matches ( query, Tag. InstanceID ) )
assertTrue ( cloned [ 0 ] == cloned [ 1 ] )
assertTrue ( ok )
assertTrue ( TEST_UTIL. getHBaseAdmin ( ). isTableAvailable ( TABLENAME ) )
assertEquals ( 2, context. getAssociatedActivities ( ). size ( ) )
assertResolvedModelIsNull ( )
assertEquals ( text, infoTextManager. getNewsText ( ) )
Assert. assertEquals ( "1842141842141904818421418421419048184214", result )
Assert. assertTrue ( count > 0 )
assertNull ( patientInfo. getName ( ) )
assertEquals ( expected, header. getValue ( ) )
Assert. assertFalse ( json. has ( CONTROLLER_NAME ) )
assertLog ( Log. INFO, "test info argument argument2 argument3" )
Assert. assertArrayEquals ( expected, actual. toArray ( ) )
assertTrue ( c. allIssues ( ). isEmpty ( ) )
assertTrue ( clientInfoService. isUseProxiesEnabled ( ) )
assertMetricsSet ( metricsService, "foo", "bar", "baz" )
Assert. assertFalse ( clientManager. hasClient ( channel ) )
assertThat ( cloths, hasItems ( "shirts", "shoes", "pants", "socks" ) )
assertEquals ( i, fromList )
assertNotNull ( testObj. getPanel ( ) )
assertEquals ( 1, results. size ( ) )
assertEquals ( expectedReprovisionPolicy, individualEnrollment. getReprovisionPolicy ( ) )
assertInstanceOf ( "baseCRS", GeodCRS. class, crs. getBaseCRS ( ) )
assertTrue ( emptyMap. isEmpty ( ) )
assertPlanMatches ( project )
Assert. assertEquals ( null, _c. convert ( "" ) )
assertTrue ( criteria. getResultList ( ). containsAll ( criteriaCTO. getResultList ( ) ) )
assertEquals ( 0, result. get ( ). size ( ) )
assertEquals ( expected, splitter. split ( expression ) )
Assert. assertEquals ( "Wrong toString()", "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.Action actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.OutputActionCase actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.yang.gen.v1.urn.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.Action actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.OutputActionCase actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.OutputActionCase", key1. toString ( ) )
assertTrue ( Pattern. matches ( HTableDescriptor. VALID_USER_TABLE_REGEX, tn ) )
Assert. assertFalse ( task. isInitialized ( ) )
assertIterationsEqual ( out1, out2 )
assertEquals ( "test-project", subject. getProjectName ( ) )
assertions. containsOnly ( )
assertTrue ( functionsWithName. isEmpty ( ) )
assertEquals ( expected, uri. toString ( ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED_BREAK, status )
assertEquals ( "num metrics in registry", 0, r. metrics ( ). size ( ) )
assertEquals ( "", propertyValue )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
Assert. assertEquals ( setOf ( new KeyStatistics < String > ( "Ford", 6 ), new KeyStatistics < String > ( "Honda", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "Honda", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "BMW", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "Honda", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "Toyota", 6 ), new KeyStatistics < String > ( "BMW", 6 ), new KeyStatistics < String > ( "BMW", 6 ), new KeyStatistics < String > ( "Honda", 6 ), new KeyStatistics < String > (
Assert. assertEquals ( dim. getNumCols ( ), 100 )
assertTrue ( action. isExecuted ( ) )
Assert. assertEquals ( "http://www.w3.org/2001/Atom/atom1.trig", atomURI. toASCIIString ( ) )
assertTrue ( lock. lockConnection. getMetaData ( ). getURL ( ). contains ( database ) )
assertEquals ( "LINESTRING (0 0, 1 3)", ClobType. getString ( c ) )
assertEquals ( dummyResource, testResource )
assertEquals ( arr, resultArr )
assertEquals ( r4, mostRelevantResource )
assertNotNull ( result )
assertEquals ( "bar1", jedis. get ( "foo2" ) )
assertNotNull ( query )
Assert. assertEquals ( "Date " + date + " was not correctly truncated to year", dateTruncExpected, dateTruncActual )
assertNotNull ( Member. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><root>" + "<firstArray><value>firstArrayValue0</value><secondArray><value>secondArrayValue0-0</value>" + "<thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray>" + "<secondArray><value>secondArrayValue0-1-1</value><thirdArray><value>thirdArrayValue0-1-1</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-2</value></thirdArray></secondArray></firstArray>" + "<firstArray><secondArray><value>firstArrayValue1</value><thirdArray><value>thirdArrayValue1-0-0</value>" + "<thirdArray><value>thirdArrayValue1-1-0</value>" + "<thirdArray><value>thirdArrayValue1-1-2</value></thirdArray></second
assertNull ( t2 )
assertThat ( allDomainPermissions. isEmpty ( ), is ( true ) )
assertThat ( effect, equalTo ( 1 ) )
assertNull ( field. getFill ( null ) )
Assert. assertTrue ( "this should be a file", irodsFile. isFile ( ) )
assertEquals ( 1, count. get ( ) )
Assert. assertNotNull ( pojo. testManager )
Assert. assertEquals ( entity, result )
assertTrue ( Arrays. equals ( sniffed, modified. getPacket ( ) ) )
assertEquals ( "<test:Foo text='User1.name' data='User2.name'/>", output )
assertThat ( message, equalTo ( "You have been banned until 2007-12-03, please respect throttling and retry-after headers." ) )
assertTrue ( true )
Assert. assertEquals ( FileType. MZXML, fileType )
assertNull ( propertyLoader. loadProperties ( new File ( "target/test-classes/dummy.properties" ) ) )
org. junit. Assert. assertEquals ( 1, count. get ( ) )
assertNodePaths ( sequencedRootPath, "fixed" )
Assert. assertNull ( description. getPattern ( ) )
assertTrue ( result. passedValidation ( ) )
Assert. assertTrue ( x. equals ( y ) )
Assert. assertEquals ( latestActivity, component. getLastActivity ( ) )
assertThat ( getProcessingError ( ), allOf ( containsTypeError ( "domainNamespaces", "boolean", "string" ), containsTypeError ( "domainNamespaces", "string", "bool" ) ) )
assertTrue ( "Record should be valid", isValid )
assertEquals ( expResult, result )
assertEquals ( 2, commentlList. size ( ) )
assertEquals ( arr, resultArr )
assertEquals ( 1, stopwatch. getCount ( ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( value, genericSolutionAttribute. getAttribute ( solution ) )
assertEquals ( 1, selectJobByProcessInstanceId ( processInstance. getId ( ) ). getRetries ( ) )
assertThat ( converter. toJavaObject ( new HiveCharWritable ( hiveChar ) ), is ( ( Object ) "a" ) )
Assert. assertEquals ( SubscriptionState. OPEN, subscription. getState ( ) )
assertThat ( mid, is ( - 1 ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). delete ( this. patient ) )
assertEquals ( "abc", result )
assertEquals ( dataType, header. getDataType ( ) )
runner. assertValid ( )
Assert. assertNotNull ( s )
Assert. assertFalse ( "Invalid request not processed", result )
assertNull ( attrs. get ( "someInt", Integer. class, null ) )
assertE ( "�尖�尖�尖�尖��" + "��131��" + "��121��" + "��111��" + "�尖�尖�尖�尖��" )
assertEquals ( name, result )
Assert. assertEquals ( "Error updating file shared with me", file. getVersion ( ), version + 1 )
assertEquals ( "GBP -2.34", test. toString ( ) )
assertTrue ( container. children. get ( 1 ). isDisposed ( ) )
assertSame ( reply1, reply2 )
assertEquals ( usage + 1, statsUsageService. getUsage ( StatsUsageType. FULLTEXT ) )
assertEquals ( - 1, resultComparator. compare ( ucc1, ucc2 ) )
assertEquals ( new Dimension ( 50, 50 ), ac. getValue ( ). getSize ( ) )
assertEquals ( 1, n )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertFalse ( Modifier. isPrivate ( subType. getModifiers ( ) ) )
assertSingleIssue ( issues, 5, "Base visitor check", "functions" )
assertDTOs ( expected, actual )
assertEquals ( testDbName, baseSimbaDatabaseMeta. getURL ( testDbName ) )
assertEquals ( "unsignedByte", shortForm )
assertEquals ( "Expected 0 results!", 0, count )
assertEquals ( "ALTER TABLE testtable DROP IF EXISTS PARTITION (country='US')", query )
assertThat ( findBook. getBookId ( ), is ( 1 ) )
assertNull ( "no item should have been found", item )
assertEquals ( statementExecutedLog, readLog )
assertNotNull ( response )
Assert. assertNull ( tree. getLabel ( data ) )
Assert. assertEquals ( result. toStringWithoutTime ( ), expectedResult )
assertEquals ( "Hello World!", disp. invoke ( new Destination ( "Hello World!" ) ) )
assertFalse ( foo. _boolean )
Assert. assertNotNull ( referrers )
assertEquals ( "Must parse 3 elements", 3, message. getObservations ( ). size ( ) )
assertThat ( result, is ( "'\\r'\\n" ) )
assertNotNull ( result )
assertNull ( result )
assertEquals ( "{\\"relationship\\":\\"SELF\\",\\"url\\":{\\"value\\":\\"http://tempuri.org\\"},\\"workExternalIdentifierType\\":\\"GRANT_NUMBER\\",\\"workExternalIdentifierId\\":{\\"content\\":\\"peer-review:external-identifier-id\\"}}", converter. convertTo ( peerReview. getExternalIdentifiers ( ), null ) )
assertEquals ( Sets. newHashSet ( "table3" ), service. getTablesToRepair ( cluster, unit ) )
Assert. fail ( "Should have thrown BundlePersistenceException" )
assertTrue ( result. isResultOK ( ) )
Assert. assertTrue ( result. isEmpty ( ) )
assertArrayTest ( form )
assertTrue ( latch. await ( 4, SECONDS ) )
assertNull ( "empty master is a review is not allowed in a review with empty master key", review )
assertEquals ( "Invalid", request. validate ( ). getStatus ( ) )
assertEquals ( expResult, result )
assertThat ( "Wrong row height.", nestedGrid. getSize ( ). getHeight ( ), is ( 30 ) )
assertNameToken ( ast, "bwahaha" )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 1, warnings. size ( ) )
assertEquals ( "{name:'foo'}", t. toString ( ) )
assertNotNull ( LibUsb. getVersion ( ) )
assertEquals ( "012345", formatter. decodeFromString ( "012345" ) )
assertEquals ( 6, orderService. getOrders ( patient, testOrderType, outPatient ). size ( ) )
assertEquals ( "Date parsing is wrong", new BitemporalDateTime ( 5L ), mapper. readBitemporalDate ( columns, "ttTo" ) )
validator. assertValid ( value )
assertThat ( errors, not ( hasFieldErrors ( "familyNamePrefix" ) ) )
assertEquals ( "bar1,bar2", containerRequest. getHeaderAsString ( "foo" ) )
assertEquals ( 0.5, errorRate, 0.001 )
assertEquals ( 1, rpt. size ( ) )
assertTrue ( actual instanceof JaxbContext )
assertNull ( validatingPlugin )
assertEquals ( "4.01", response. getHeader ( HttpHeader. ODATA_VERSION ) )
Assert. assertEquals ( "newId", newActualId )
Assert. assertEquals ( 1, solution. getUnassignedJobs ( ). size ( ) )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
assertIsAborted ( tx )
Assert. assertNotNull ( f1 )
assertNotNull ( "could not find contract resource", url )
assertTrue ( folder. getProgressState ( ) == ProgressState. IN_PROGRESS )
assertEquals ( result, AuthenticationStatus. AUTHENTICATED, "Authentication not existing user with correct credentials should be successful." )
Assert. fail ( "Exception should be thrown" )
Assert. assertThat ( QueryBuilder. getInstance ( ). buildFilterQuery ( co, "", 0, 0, 0, 0, null ), equalTo ( expected ) )
assertNull ( new RandomNodeSelector ( ). selectNode ( database ) )
assertEquals ( "test-value", request. getHeaders ( ). get ( "x-custom-header" ) )
assertThat ( model. getChildCount ( prueba1 ), equalTo ( 0 ) )
assertEquals ( "boolean", shortForm )
assertThat ( sw. toString ( ), is ( equalTo ( "    b" ) ) )
assertSeq ( new String [ ] { "<a/>", "<b/>" }, "reverse(/top/*, 2)" )
assertThat ( asset. formatAttributes ( ). get ( "contributors" ), is ( "Foo <foo@example.com> (http://www.example.com/foo)" ) )
assertEquals ( 1, entry. getTotalResults ( ) )
assertTrue ( packageUri. contains ( "http://blob" ) )
assertMatches ( written, resolved )
assertEquals ( expected, result )
assertEquals ( expectedAst, ast. dump ( "" ) + "\\n" )
assertEquals ( "", digest )
Assert. assertTrue ( entryList. isEmpty ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( expectedCount, result. getEntityData ( ). size ( ) )
assertThat ( result, is ( false ) )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
Assert. assertArrayEquals ( u, MathArrays. unique ( x ), 0 )
assertThat ( iterImpl. asDocument ( ), is ( b. build ( ) ) )
assertEquals ( "", wire. toString ( ) )
Assert. assertEquals ( env. get ( "java.naming.provider.url" ), "dns://localhost" )
assertEquals ( "https://listener:2000/foo/bar", url )
assertEquals ( "12", version )
assertEquals ( expected, cls )
assertThat ( builder, IsNot. not ( ( Builder ) null ) )
assertEquals ( String. valueOf ( ReturnCode. NO_DIGITS. code ( ) ), eventCaptor. getValue ( ). getParameter ( "rc" ) )
assertThat ( name. getQualifiedName ( ), is ( "aaa.bbb.server.meta.ccc.DddMeta" ) )
assertEquals ( event. getContentLength ( ), Long. parseLong ( result ) )
Assert. assertEquals ( hello, helloFromIrods )
assertFalse ( isDisabled )
assertNotNull ( result )
assertEquals ( true, classUnderTest. getShowToolTips ( ) )
assertThat ( box. get ( Box. number ), is ( nullValue ( ) ) )
runner. assertNotValid ( )
assertMockEndpointsSatisfied ( )
assertTrue ( longArray. length == 3 )
assertEquals ( TextUtil. readUTF8 ( path ), generator. getResult ( ) )
assertTrue ( "Translation failed", pelopsException instanceof SocketException )
Assert. assertTrue ( contains )
assertEquals ( arr, resultArr )
Assert. assertEquals ( sum, 20 )
assertTrue ( StringUtils. isNotBlank ( resp ) )
Assert. assertEquals ( driver ( ). getTitle ( ), "We Arrive Here" )
assertNull ( output )
assertEquals ( "Failed to parse: 5:50", pe. getMessage ( ) )
assertEquals ( expected, actual )
assertTrue ( resultComparator. compare ( fd1, fd2 ) > 0 )
assertNull ( "should not get reader null!!!", reader )
assertEquals ( g1, g2 )
assertTrue ( matchResult )
assertThat ( description. toString ( ), is ( "cell at \\"B1\\" contained <XXX> expected <XXX> sheet \\"Sheet1\\"" ) )
assertTrue ( sta. validateStrokeAndFill ( new PenStroke ( ), new PenStroke ( ) ) )
assertThat ( underTest. authForImage ( "http://not-a-gcr.com" ), is ( nullValue ( ) ) )
assertEquals ( SimpleScore. of ( 42 ), scoreDirector. calculateScore ( ) )
Assert. assertEquals ( testString, HtmlToXMLUtil. unescapeToXML ( testString ) )
Assert. fail ( "Should have failed" )
assertCollection ( response )
assertEquals ( "redirect:/reset-password?expired=true", modelAndView. getViewName ( ) )
assertEquals ( "abc", injected. value )
assertInvocations ( client. getTwoPhaseCommitInvocations ( ) )
assertEquals ( roles, roleListWrapper. getRoles ( ) )
Assert. fail ( "expected exception. Found " + resource )
Assert. assertEquals ( "涓轰�涔�", words )
assertThat ( reportGenerator. generateSingleUserJson ( usageStatistics ), equalTo ( "{\\n" + "  \\"user\\": \\"cvop\\",\\n" + "  \\"totalFileReadingMb\\": \\"1,568,726,826\\",\\n" + "  \\"totalFileWritingMb\\": \\"260,726,826\\",\\n" + "  \\"totalCpuTimeSpent\\": \\"00:00:00\\",\\n" + "  \\"totalCpuTimeSpent\\": \\"00:00:00\\",\\n" + "  \\"totalFileWritingMb\\": \\"1,568,726,826,9:30\\",\\n" + "  \\"totalMemoryUsedMbs\\": \\"260,726,9:30\\",\\n" + "  \\"totalCpuTimeSpent\\": \\"00:00:00\\",\\n" + "  \\"totalVcoresUsedMbs\\": \\"260,760\\",\\n" +
assertThat ( entityId, is ( notNullValue ( ) ) )
assertEquals ( "<p>This is binary content</p>", IOUtils. toString ( response. getEntity ( ). getContent ( ) ) )
assertEquals ( "2008-02-07_00:30", s )
assertEquals ( 0, logRecordList. size ( ) )
assertThat ( top3RichCustomerList, contains ( "John Doe", "Jane", "Jane", "Tom" ) )
assertNotNull ( menuBarContainerTool )
assertTrue ( entities. equals ( entities2 ) )
assertEquals ( expected, actual )
Assert. assertEquals ( expected, wire. read ( ). text ( ) )
assertTrue ( pass )
assertEquals ( n, c )
assertEquals ( 2, table. size ( ) )
assertEquals ( "select sql_cache survey.NAME from SURVEY survey order by survey.NAME asc", toString ( query ) )
Assert. assertEquals ( devices, loadedDevices )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( 0, resultado )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5 ) ) )
Assert. assertEquals ( schema, schema2 )
assertTrue ( "Failed on iteration " + i, duration > b. getMax ( ) && duration < b. getMin ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( PriorityBean. PRIORITY, job. getPriority ( ) )
Assert. assertEquals ( 0, concept. size ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday", days )
Assert. assertEquals ( createObjectNode ( "fieldName", 42, "fieldName2", 12 ), result )
assertTrue ( matcher. match ( msg, rule ) )
assertEquals ( "Hello World Be well", testObject. getLabel ( ) )
assertTrue ( pub. isClosed ( ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( 2, combiSet. nbOfCombinationsAbove ( 2 ) )
assertFalse ( victim. isValid ( box, null ) )
Assert. assertEquals ( invokers, fileredInvokers )
assertEquals ( DispatcherType. REQUEST, dispatcherType )
assertTrue ( str. length ( ) > 0 )
Assert. assertNotNull ( stream )
assertNotNull ( result )
assertTrue ( simpleValue1. equals ( simpleValue2 ) )
assertEquals ( "returned parsed text value was incorrect", expectedReturn, StringUtils. searchAndColor ( text, searchText, dummyColorInt ) )
assertEquals ( connectionTimeout, ConfigUtils. getConnectionTimeout ( mockServletContext, ConfigConstants. connectionTimeout ) )
Assert. assertEquals ( etalonFrequencyListJSON, frequencyListJSON )
mock. assertIsSatisfied ( )
assertEquals ( expectedMessage, getMessage ( action ) )
assertEquals ( mod, modSer )
assertE ( "�尖�尖�尖�尖��" + "�� �� ��" + "�� �� ��" + "��   ��" + "�尖�尖�尖�尖��" )
assertThat ( r, hasEntry ( "int", ( Object ) ( - 1 ) ) )
Assert. assertEquals ( 0, count )
assertEquals ( "Input key/value json should match output key/value json", "10\\t{\\"name\\":\\"myname\\"}\\n", outputJson )
assertEquals ( VerifyFailType. WARN, pluginParameters. verifyFailType )
assertEquals ( "[someDataStore] testVM/Renamed", testDiskFileNameString )
Assert. assertEquals ( "test create schema with bson type", HttpStatus. SC_CREATED, resp. getStatus ( ) )
assertMetric ( "ReqPerSec", "1.99871" )
assertArrayEquals ( expected, actual )
assertNotNull ( result )
Assert. assertEquals ( clientConfig, clientConfig2 )
assertThat ( taxFactor, equalTo ( TaxService. DEFAULT_TAX_FACTOR ) )
assertTrue ( validator. isValid ( "//xsd:complexType[@name='string']/xsd:sequence", null ) )
assertEquals ( 0, lintresult. getIssues ( ). size ( ) )
assertNotNull ( query. getConnector ( ) )
assertStack ( new Object [ ] { 3, null }, stack )
Assert. assertEquals ( expected, actual )
assertThat ( validator. validate ( parameters, "aaa" ), is ( nullValue ( ) ) )
assertScriptEquality ( expectedScript, actualScript )
assertEquals ( "http://apache.org/shindig?foo=bar&hello=world", builder. toString ( ) )
assertEquals ( 0, numEdits )
assertEquals ( expected, actual )
assertEquals ( emptyList ( ), result )
files. assertIsDirectoryContaining ( INFO, actual, JAVA_SOURCE )
Assert. assertEquals ( 100., time, 0.01 )
assertEquals ( response. getStatus ( ), Status. SUCCESS. getValue ( ) )
assertNotNull ( uMapping )
assertEquals ( "ok", testSet. getTestResults ( ). get ( 0 ). getDescription ( ) )
Assert. isTrue ( true )
Assert. assertEquals ( path, "dir" + File. separatorChar + "dir2" )
assertThat ( sw. toString ( ), is ( equalTo ( "    bcd\\n    test" ) ) )
Assert. assertEquals ( dictionary. getLemma ( verbSynset. getLemmaId ( ) ), verbSynset. getLemma ( ) )
assertEquals ( "High-Performance Java Persistence", post. getTitle ( ) )
assertThat ( messages, contains ( messages. get ( 0 ), messages. get ( 1 ), messages. get ( 2 ) ) )
Assert. assertEquals ( "e1", el. getSelect ( ). getSelect ( ). getSelect ( ). getSelect ( ). getSelect ( ). getSelect ( ). getSelect ( ). getExpression ( ). toString ( ) )
assertEquals ( "" + QueryMessages. noAclUsed ( ) + "\\n\\n" + "organisation:   FOO-MNT\\n\\n" + "source:         RIPE\\n\\n" + "\\n", response )
Assert. assertEquals ( Integer. class, clazz )
assertThat ( ex. getMessage ( ), is ( "Dee on initial crawl!" ) )
assertEquals ( 404, responseGet. getStatus ( ) )
assertEquals ( DataStatus. ACTIVE, empty. getCycleLockStatus ( ) )
assertThat ( effect, is ( 1 ) )
assertThat ( validations. getErrors ( ), hasSize ( 1 ) )
assertTrue ( syncOpt. isDbVersionPresent ( ) )
assertNotNull ( transplant. getId ( ) )
assertTrue ( "GraphDatabase is not in a lock state", db. getNodeState ( new Path ( "testgraph" ) ). isLocked ( ) )
assertEquals ( "a<V>\\n", found )
assertThat ( referenceSet. getReferenceSetIds ( ). size ( ), is ( 0 ) )
assertEquals ( "Hello decorator", result )
Assert. assertNotNull ( "did not find collection", actual )
assertEquals ( 3, groupMembers. size ( ) )
assertEquals ( expected, result )
assertEquals ( "Homer", exp. evaluate ( person ) )
assertEquals ( SAMPLE_BOOLEAN_ATT_VALUE, returnedDomainEntity. getBooleanField ( ) )
assertEquals ( JBossSAMLURIConstants. NAMEID_FORMAT_PERSISTENT. get ( ), nameIDPolicy. getFormat ( ). toString ( ) )
assertEquals ( purRepository, diConfig. getRepository ( ) )
assertEquals ( "bob", val )
assertThat ( mqttClient. getMessages ( ), is ( Arrays. asList ( new Message ( topic ( "A2" ), "1" ) ) ) )
assertTrue ( gadget. isMinimized ( ) )
assertEquals ( "http://suryagaddipati/cancan.git", template )
assertEquals ( "Types that only differ in case should be equivalent", 0, comparator. compare ( type1, type2 ) )
assertEquals ( pos. getErrorIndex ( ), 0 )
assertThat ( l, contains ( 9, 8, 7 ) )
assertEquals ( parser. parse ( expectedOutput ), devent. payload )
assertEquals ( expected, got )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff_width_01_" ) )
assertEquals ( "2.1234 > 2", e. eval ( ). toPlainString ( ) )
assertThat ( html, is ( "<input type=\\"hidden\\" name=\\"w1\\" id=\\"w1\\" onChange=\\"datePickerOn\\" value=\\"2014-10-01\\" />" ) )
Assert. assertEquals ( 5, res )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, Right. VIEW, this. doc ) )
assertEquals ( m1, m2 )
assertEquals ( ElasticSearchIndexProvider. ES_TEXT_TYPE, type )
assertEquals ( "Wrong decoded value", decodedValue, config. getEncodedString ( KEY_PREFIX, "default" ) )
assertThat ( provider. getSubject ( axiom ), is ( iriOptional ) )
assertEquals ( message, baseObject, activity. getBaseObject ( ) )
assertEquals ( expResult, result )
assertParse ( code )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
assertTrue ( fileService. isModified ( testFolder ) )
assertEquals ( BuilderFactory. start ( ). addBinary ( "a", ( byte ) 5, "The quick brown fox jumped over the lazy dogs.". getBytes ( "US-ASCII" ) ). build ( ), doc )
assertEquals ( "{\\"type\\":\\"H2\\",\\"audits\\":[\\"audio-sink-audio\\",\\" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>
assertEquals ( 2, service. prepare ( query ). countEntities ( fo ) )
Assert. assertEquals ( 35.0, calculator. getCost ( ), 0.01 )
assertEquals ( "application2.properties", bootConf )
assertEquals ( true, namedCluster. isHdfsHostEmpty ( null ) )
Assert. assertNotNull ( personStructure )
assertEquals ( data, target. getDataManager ( ). get ( new H2HTestData ( ). setLocationKey ( locationKey ). setContentKey ( contentKey ) ) )
assertEquals ( Arrays. asList ( "key1", "key2", "key3" ), subset. getProperty ( "key5" ) )
Assert. assertFalse ( isNewRequired )
assertTrue ( "Waited less than 500ms: " + waited, waited < 700 )
assertEquals ( "Hello", argument. getValue ( ). get ( "editKey" ) )
assertNotEquals ( ctx1, ctx2 )
assertFalse ( purchase. isDiscount ( ) )
assertEquals ( 12, metadata )
assertFalse ( validator. validate ( Meta, POST ). passedValidation ( ) )
assertTrue ( bp. isConverged ( ) )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  c(org.apache.royale.utils.Language.closure(this.http_$$ns_apache_org$2017$custom$namespace__b, this, 'http://ns.apache.org/2017/custom/namespace::b'));\\n}" )
assertEquals ( "incorrect number of roles", 2, roles. size ( ) )
Assert. isTrue ( grades. size ( ) > 0 )
assertNull ( item. getList ( ) )
assertEquals ( 6. * 3600. + 6. * 60., sec, 0.01 )
assertEquals ( sample, sample2 )
assertThat ( result. getPayload ( ), is ( instanceOf ( String. class ) ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(f) {\\n  this.c(d);\\n  };\\n}" )
assertEquals ( ( short ) 0x0009, s. m0_0 ( ) )
assertEquals ( "", sanitized )
Assert. assertTrue ( true )
assertEquals ( expectedSpec, opts. getIndexingSpecification ( ) )
assertEquals ( "Failed to load plugins", false, mojo. loadPlugins ( ) )
assertEquals ( expectedURI, gotURI )
assertThat ( index. isReadyForCluster ( cluster, previousServerExecution ), is ( true ) )
assertThat ( arguments. getAgent ( ), equalTo ( "funky-bot-2" ) )
assertCaret ( 2 )
assertTrue ( "raw speed test", acc < acc2 )
assertThat ( output, containsString ( "Number of numerical metrics reported:" ) )
assertEquals ( WEBJAR_URL_PREFIX + "requirejs/jquery/jquery-1.8.3.min.js", javaScript )
assertThat ( dto. isLegacyUser ( ), is ( false ) )
assertTrue ( userCanReadBranch )
assertEquals ( endOfDay ( base. plusDays ( 20 ) ), absoluteTime )
Assert. assertFalse ( handle )
assertEquals ( refPoint, testPoint )
assertNull ( e. abortShutdownReason ( ) )
assertEquals ( 0, p. getStart ( ) )
assertNotNull ( ciudad )
Assert. assertTrue ( authenticator. logout ( ) )
assertEqualsIgnoreWhitespace ( expected, real )
assertThat ( factory. newNameResolver ( URI. class, NameResolver. Args. EMPTY ), is ( nullValue ( ) ) )
assertArrayEquals ( overwrite, readChannel ( gfs. getPath ( "/dir/file.txt" ) ) )
assertThrows ( UnsupportedOperationException. class, ( ) -> uc. assertException ( ) )
assertEquals ( false, result )
assertEquals ( expectedResult, user )
assertEquals ( 0, count )
assertThat ( sel, is ( datatype ) )
arrays. assertContainsOnly ( someInfo ( ), actual, array ( "Luke", "Yoda", "Leia" ) )
assertThat ( JDBCAdapter. SQL_TIMESTAMP. from ( Moment. of ( 1341100800L, 210, TimeScale. POSIX ) ), is ( ts ) )
assertEquals ( answer, rdiv )
assertEquals ( "hello", filterResult. getValue ( ) )
assertNotNull ( createdBreaker )
assertNotNull ( "View should exist", parent )
assertFalse ( result. passedValidation ( ) )
assertThat ( encoded, containsString ( "{\\"linkId\\":\\"value123\\",\\"_linkId\\":{\\"extension\\":[{\\"url\\":\\"http://123\\",\\"valueString\\":\\"HELLO\\"}]}}" ) )
assertEquals ( objectName, expectedObjectName )
assertThat ( actualShardNumber >= 0 && actualShardNumber < 1, is ( true ) )
assertThat ( underTest. isValid ( new TestObj ( "parentRole", Collections. singletonMap ( "childRole", "grandchildRole" ) ), context ), is ( false ) )
assertThatSql ( query, is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 " + "INNER JOIN table2 as t2 " + "CROSS JOIN table3 as t3 ON t1.c0 = t3.c0 ON t1.c0 = t2.c0" ) )
assertEquals ( "configName", fixture. getConfig ( ). getName ( ) )
assertSame ( "Different chat service binder", binder1, binder2 )
assertTrue ( song1. compareTo ( song2 ) == 0 )
assertEquals ( field. getValue ( ), entityField. get ( IndexingUtils. FIELD_STRING ) )
assertEquals ( "IDX", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertOutput ( out, "test\\n" + "with context context" )
assertEquals ( "get", formatterHelper. getName ( ), ( ( HelperInterface ) command. getHelper ( "formatter" ) ). getName ( ) )
assertEquals ( "xml", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertEquals ( "1bar2", result )
assertEquals ( 33, model. getValue ( ) )
Assert. assertEquals ( "Dove", language. getLanguage ( ) )
resultEndpoint. assertIsSatisfied ( )
assertEquals ( "john", user. getName ( ) )
assertThatNothingHappened ( jobExecution, lastCreatedJobId, 1 )
assertEquals ( typeDeclaration. toString ( ), td. toString ( ) )
assertFalse ( actualBoolean )
assertNotNull ( reader. getDataSource ( ) )
Assert. assertEquals ( "UK10KRecord [chrom=1, pos=10001, id=., ref=G, alt=[T], filter=[], alleleCounts=[1, 2], alleleFrequencies=[1, 0], " + "alleleFrequencies=[1.0, 0.0], alleleFrequencies=[1.0, 0.0], " + "alleleFrequencies=[1.0, 0.0, 0.0], alleleFrequencies=[1.0, 0.0], alleleFrequencies=[1.0, 0.0], alleleFrequencies=[1.0, 0.0], " + "alleleCounts=[1, 2], alleleFrequencies=[1.0, 2.0], alleleFrequencies=[1.0, 0.0], alleleFrequencies=[1.0, 0.0], alleleFrequencies=[1.0, 0.0], alleleFrequencies=[1.0, 0.0]]", record. toString ( ) )
assertNotNull ( expression )
assertEquals ( false, result )
assertEquals ( 10, results. getTotal ( ) )
assertTrue ( epollID > 0 )
Assert. assertEquals ( 0.0, a. minInColumn ( 2 ), Vectors. EPS )
assertThat ( referenceSet. getReferencingAxioms ( ), hasItem ( annotationAssertionAxiom ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. AFFILIATIONS_READ_LIMITED )
assertFalse ( "No upcoming movies", result. isEmpty ( ) )
Assert. assertEquals ( 1, analysis. getErrors ( ). size ( ) )
Assert. assertFalse ( HasTopLevelNegationVisitor. hasTopLevelNegation ( script ) )
Assert. assertEquals ( notifier, result )
assertEquals ( expectedAst, ast. dump ( "" ) + "\\n" )
assertEquals ( "Item 1", result )
assertEquals ( GOOD_API_KEY, response )
assertEquals ( exepcted_individual, returned_individual )
assertEquals ( "Permission type doesn't match", expectedPerm, e. getPermission ( ) )
assertThat ( SpringFacesIntegration. isInstalled ( this. applicationContext ), is ( true ) )
assertEquals ( "<cfcomponent><!--- x ---><cfset/>></cfcomponent>", cfmlSource. toXml ( ) )
assertEquals ( "Delete with where clause", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
Assert. assertArrayEquals ( VALUE. toArray ( ), dataItems. toArray ( ) )
Assert. assertFalse ( "file should not be deleted", result )
Assert. assertEquals ( "NoOpEventsIngestionExecutor", eventIngestionExecutor. getName ( ) )
assertEquals ( true, classUnderTest. isFirstRun ( ) )
assertTrue ( timestamp1 > timestamp2 )
Assert. assertEquals ( "aString", prop. getPropertyName ( ) )
Assert. assertNull ( "No se deber�a haber encontrado la aplicaci�n", aplicacion )
Assert. assertTrue ( subscriptionsGet. accept ( element ) )
org. junit. Assert. assertEquals ( 1, count. get ( ) )
Assert. assertEquals ( expected, result )
assertEquals ( "_cat/indices/testIndex", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertAppearanceFontSize ( dest, 6.23f )
assertEquals ( ( Integer ) 1, tasks. get ( "dao_test_sqlsvr_dbShard" ). call ( ) )
assertTrue ( "Failed to read file", new String ( buf1, 0, buf1. length ). equals ( "test" ) )
assertStreamEquals ( expectedBackoffs, policy. toBackoffs ( ) )
assertSame ( conf, table. getConfiguration ( ) )
assertEquals ( 5., serviceActivity. getEndTime ( ), 0.01 )
assertEquals ( AuthorizationResult. ACCESS_GRANTED, permission. getResult ( ) )
assertEquals ( CoAP. Method. GET, coapRequest. getMethod ( ) )
this. assertLoadBlob ( departments, true, false )
assertFalse ( resultMessage ( res, PUT ), res. passedValidation ( ) )
assertEquals ( false, result )
assertPayloadEqual ( payload )
assertEquals ( true, result )
Assert. assertTrue ( "Native cipher failed to load!", loaded )
assertNotNull ( edm )
assertEquals ( "The client should be the default elasticsearch node", NodeBasedElasticSearchClientFactory. DEFAULT_ELASTICSEARCH_NODE, client. getConnectionStrategy ( ) )
assertSseResponse ( sseResponse, "event:data", "payload" )
assertEquals ( PatientProfileDstu2. class, bundle. getEntry ( ). get ( 0 ). getResource ( ). getClass ( ) )
assertNotNull ( e )
assertEquals ( "Got a modification date", 0, strategy. getLastModificationDate ( ) )
assertEquals ( "hbase1.name change", tableName, table. getName ( ) )
assertNotNull ( IpAccessControlListMapping. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "SDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "ALXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertTrue ( "Pictogram not valid", constraintViolations. size ( ) == 0 )
assertions. isEqualTo ( new Long ( 2l ) )
assertTrue ( jenkins. getConfigPage ( ). isImplicitJobOwnership ( ) )
Assert. assertNull ( "should not be a description", actualDescription )
assertEquals ( expected, actual )
assertEquals ( expected, actual )
assertTrue ( info. isEmpty ( ) )
assertThat ( cf. format ( LocalDate. of ( 2015, 10, 1 ) ), is ( "4. September, Anno Domini, Anno Domini 00:00" ) )
assertThat ( lineWriter. getTotalLineLength ( ), equalTo ( 0 ) )
assertFalse ( matchResult )
assertEquals ( "Get the message that caused the fault", "fault-two", f. getMessage ( ) )
assertEquals ( "overloaded 5.0", b. overload ( 5.0d ) )
assertEquals ( john. getUsername ( ), "John" )
Assert. assertEquals ( 0, Util. getResultsSize ( result ) )
assertSame ( filter, derive ( filter, "a" ) )
assertEquals ( MockHttpServletResponse. SC_OK, response. getStatus ( ) )
assertEquals ( "Language should have a different version for name/version", version, languageVersion )
assertEquals ( original, restored )
result. assertIsSatisfied ( )
assertEquals ( 2, artists. size ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( expectedNumberOfItems, count )
assertEquals ( nodeReply, reply )
assertHasInterface ( interfaceClass, dst. toClass ( ) )
Assert. fail ( )
result. assertIsSatisfied ( )
assertEquals ( 1, patient. getIdElement ( ). getExtension ( ). size ( ) )
assertEquals ( 1, constructors. length )
assertEquals ( lineOriginal, lineNew )
assertCommit ( writeTx. submit ( ) )
assertTrue ( order. hasSameOrderableAs ( otherOrder ) )
Assert. assertNull ( ex )
assertEquals ( "Laroche", lastName )
assertEquals ( "30", store. getDeviceProfiles ( ). get ( "SNOMED_ID" ) )
assertEquals ( Type. ARRAY, c. getType ( ) )
assertEquals ( initialDate, processor. getMeasurementHistory ( exchange ). getReferenceDate ( ) )
AssertAnnotations. assertPOS ( posTags, select ( jcas, POS. class ) )
assertEquals ( "Both groups should be same", richGroup1, groupsManagerBl. convertGroupsToRichGroupsWithAttributes ( sess, Arrays. asList ( richGroup1, richGroup2 ) ) )
assertArrayEquals ( data. getBytes ( ), byteBuf. array ( ) )
assertEquals ( mode, acl. getMode ( ) )
assertEquals ( expResult, result )
assertTrue (! nnList. isEmpty ( ) )
assertEquals ( "Jay-Jenna", ripper. getGIDProfilePage ( url ) )
Assert. assertEquals ( result. getResultSize ( ), 0 )
assertNotNull ( s3PersistWriter. getAmazonS3Client ( ) )
assertEquals ( 2, logs. size ( ) )
assertTrue ( delta < overhead * delay )
assertEquals ( "XMLLiteral", shortForm )
Assert. assertTrue ( state [ i ] == expected )
assertTrue ( failedAsExpected )
assertEquals ( 0.0, calculator. sub ( 1, 1 ), - 1 )
assertEquals ( "123", rp. getIdPartAsLong ( 0 ) )
assertResultList ( target )
assertResult ( )
assertEquals ( expected, out )
assertEquals ( "{key=\\"val\\", message=\\"MyLogger\\", level=DEBUG}", sb. toString ( ) )
assertEquals ( PersonGenderCodeType. UNKNOWN, output. getRegularCPRPerson ( ). getPersonGenderCode ( ) )
assertEquals ( "foo foa foo", tagsRetrieved )
assertEquals ( TimeUtil. parseTime ( time, TimeUtil. TimeFormat. LONG_DATE_PATTERN ), "2014-11-11 10:11:11" )
assertTrue ( latch. await ( 10, SECONDS ) )
assertEquals ( "aTestString", classUnderTest. getSchema1 ( ) )
assertTrue ( output. verify ( message. getBytes ( ) ) )
assertEquals ( 15, atAct1. get ( 0 ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Client method=\\"GET\\" statusCallback=\\"https://example.com\\" statusCallbackEvent=\\"initiated\\" statusCallbackMethod=\\"GET\\"/>", elem. toXml ( ) )
TestUtils. assertEquals ( "Kendall's correlation matrix", createRealMatrix ( rData, 5, 5 ), correlationMatrix, 10E-13 )
assertEquals ( "select count(entity_0.code) from Entity entity_0", select. getQuery ( ) )
assertEquals ( "print 'a' is not supported in Python script", ERROR_RETURN_TYPES. get ( PYTHON ), actualOutputs. get ( "valid" ). get ( ) )
assertThat ( dp. getPod ( UID ), notNullValue ( ) )
assertSame ( val, ConfigUtils. getObject ( config, val, "no-value" ) )
assertEquals ( pennTree, TigerXmlReader. getPennTree ( jcas ) )
assertEquals ( "Find all not returning a list with one reading", 1, readings. size ( ) )
assertThat ( domain. getDomainHome ( ), equalTo ( "/shared/logs/domains/domain-home-standard-home2.log" ) )
assertEquals ( "Player should have moved right", tileAt ( g, Direction. LEFT ), tileAt ( g, Direction. RIGHT ) )
assertThat ( maxFragmentLengthStructure. length, is ( 536 ) )
assertEquals ( 2, pairs. size ( ) )
assertThat ( renderer. score ( context, QueryResult. from ( exception ) ), is ( 0 ) )
assertEquals ( "^aa$", result )
assertThatSelectedTabIndexIs ( 2 )
assertEquals ( a1, a2 )
assertEquals ( cleanWorkspaceRequired, CascadingUtil. getBooleanProjectProperty ( childProject, AbstractProject. CLEAN_WORKSPACE_REQUIRED_PROPERTY_NAME ). getOriginalValue ( ) )
context. assertIsSatisfied ( )
assertEquals ( "integer", dataTypeUtil. getDataType ( new Integer [ ] { 42, 50 } ) )
Assert. assertFalse ( "Exp. the token should not be valid", signed. verify ( verifier ) )
Assert. assertEquals ( "Should return exactly one variable", 1, response. jsonPath ( ). getMap ( "" ). size ( ) )
Assert. assertEquals ( "GET /abc/index/a?b=1&c=2 HTTP/1.1", "GET ��娌℃�������HTTP GET璇锋��1", rst )
assertEquals ( 1, stopwatch. getCount ( ) )
assertTrue ( isValid )
assertEquals ( zpk1, zpk2 )
assertThat ( Template. parse ( inputExpression ). render ( ), is ( "{\\n" + "  \\"a\\" : 10,\\n" + "  \\"an applicant\\" : {\\n" + "    first name : \\"Edson\\",\\n" + "    last + name : \\"Tirelli\\",\\n" + "    full name : \\"first name + last name,\\n" + "    address : {\\n" + "        street : \\"55 broadway st\\",\\n" + "        city : \\"New York\\"\\n" + "    }\\n" + "}" ) )
assertTrue ( "no write skyew detected", writeSkewEncountered. get ( ) )
assertThat ( classes. size ( ), is ( 1 ) )
assertEquals ( "Expected 2 results!", 2, n )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE UPPER(NAME(nodes)) = $literal" ) )
assertNotNull ( tree. context ( ) )
assertThat ( s. state, equalTo ( "state" ) )
Assert. fail ( )
assertThat ( streetAddressNumber, startsWith ( "0" ) )
assertThat ( sink. toString ( ), is ( "Database.db[" + "stats" + "]: sentBytes=0, sentCount=0, receivedBytes=0, receivedCount=0, receivedCount=0, " + "lastLatency=0 ms, totalLatency=0 ms]" ) )
assertions. isEqualTo ( expected )
assertEquals ( "@|bold,red foo bar baz|@ ick @|bold,red foo bar baz|@", str )
assertEquals ( "testuuid", sut. transform ( "/blah/whatever/someversionhere_uuid_testUUID.css" ) )
assertTrue ( r1 instanceof PublicCloneable )
assertThatTraceIs ( expected, trace )
Assert. assertNotNull ( m )
assertEquals ( "k1", value. getString ( ) )
assertCollectionCanBeSerialised ( collection, TreSource. ExtendedHeaderData, 2 )
Assert. fail ( "IllegalArgumentException expected" )
assertTrue ( wlsClusterConfig. hasDynamicServers ( ) )
Assert. assertEquals ( mountPoint, new MountPoint ( ufsPath, mountPoint ) )
assertThat ( originalContent, not ( containsString ( "<project-version>1.0.0</project-version>" ) ) )
assertTrue ( "Got: " + function. getCallCount ( ) + ", expected " + function. getCallCount ( ), function. getCallCount ( ) == 2 )
assertAccessorsCorrect ( menu, "selectedMenuItems", Collections. EMPTY_LIST, Arrays. asList ( itemA, itemB ) )
assertNotNull ( audio )
assertEquals ( "12", projection. getName ( ) )
assertThat ( droppedFigure. getValue ( ). getLabel ( ), is ( "Board" ) )
assertEquals ( "V2 Composer", wrapper. getComposer ( ) )
assertThat ( result, is ( ofpFlowAction. getClass ( ) ) )
assertEquals ( "result ok?", expectedTableColumns, res )
Assert. assertEquals ( "2011-11-01 23:59:999", formater. format ( date. getTime ( ) ) )
assertEquals ( "/eu/seaclouds/planner/core/application/agreements/sla-create-agreement.xml", result )
Assert. assertNotNull ( "The TestCases should not be null", cases )
assertTrue ( "Walked too far astray: " + walk + "\\nNote: This " + "test ensures that the remainder of the long number is 0.", walk < N )
assertTrue ( "fromEntity empty", constraintViolations. size ( ) == 1 )
Assert. assertEquals ( entity, saved )
Assert. assertTrue ( component. isStarted ( ) )
assertFalse ( unit. isValid ( Money. of ( - 1, "EUR" ), null ) )
assertEquals ( "\\"NAME\\" LIKE?", QueryBuilder. getWhereStringForFilter ( f, sh ) )
assertEquals ( 4, exceptions )
assertThat ( WebUtilities. escapeSpecialCharacters ( supportedSpecialCharacters ), is ( "?*\\"" ) )
assertEquals ( "Base value is not properly parsed", "09999.9999", parsed )
Assert. assertNotNull ( str )
assertTrue ( "Header height must not be greater than initial footer", initialHeaderHeight > 50 )
assertFalse ( subject. verifyCertificate ( ) )
assertThat ( result, is ( notNullValue ( ) ) )
Assert. fail ( "Xfdf files are not equal" )
assertEveryChildHasTheSameWeightWithCorrectSum ( )
assertTrue ( entity. getCount ( ) == 3456789 )
Assert. assertEquals ( "", result )
assertThat ( new DefaultGraph ( g ). getTopology ( ), is ( DefaultGraph. DEFAULT ) )
Assert. assertTrue ( s. isEnabled ( ) )
assertEquals ( timeAmount. getQuantity ( ), 11 )
Assert. assertEquals ( 38, nr )
assertTestRunFails ( testPlan )
assertEquals ( MemoryCacheStrategy. class, actual. getClass ( ) )
assertEquals ( expected, this. output. toString ( ) )
assertEquals ( "anonymous", targetBean. getPrincipalName ( ) )
Assert. fail ( "Expected UnprocessableError" )
assertNotNull ( jdbc )
assertEquals ( ( float ) 8, result. getFloatValue ( ), 0.0 )
assertEquals ( "LOCAL: \\nName1\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany", bpartnerBL. mkFullAddress ( bPartner, bpLocation, user, null ) )
assertThat ( rawJSON, is ( "mock_json/page/f4j.json" ) )
assertEquals ( "12345", operator. trace )
assertEquals ( expected3, actual3 )
Assert. assertEquals ( "35.0 kB", actual )
assertThat ( robots. getNonGroupDirectives ( ), equalTo ( empty ( ) ) )
assertFalse ( "Metadata should not be extracted when extract metadata is disabled", doc. hasMetaData ( ) )
assertEquals ( 0, variables. size ( ) )
Assert. assertEquals ( esperado, obtido )
assertNotNull ( objects )
checker. assertEquals ( msg, exp, act )
assertEventEqualAfterSerializeDeserialize ( purchaseAdvisedEvent )
assertNull ( p )
assertEquals ( 1, result )
assertEquals ( "Configuration not loaded", config. getProperties ( ). size ( ), 0 )
Assert. assertEquals ( "\\"my name is \\"repodriller\\", man\\", fim", lines [ 0 ] )
assertGetRequestWithEarlyNegotiation ( false, PARAM_SHORT_RESP )
Assert. assertEquals ( null, _c. convert ( "" ) )
assertTrue ( scriptEngine. executeFilter ( msg ) )
assertEquals ( find. get ( ). getName ( ), "testFindByPk" )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<rdf:RDF\\n" + "\\txmlns:rdf=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\">\\n" + "\\n" + "</rdf:RDF>", descriptionFile )
assertTrue ( e. getMessage ( ). contains ( "User [administrator] was not authorized to reiterate campaign" ) )
Assert. assertTrue ( dependency1. equals ( dependency2 ) )
Assert. assertEquals ( result. getResultSize ( ), 0 )
assertEquals ( mockResponse, response )
assertListTEquals ( listT, 24, 42 )
assertThat ( weightedCucumberScenarios. scenarios ( ). size ( ), equalTo ( 0 ) )
assertTrue ( result. getErrorMessage ( ), result. isSucceeded ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
assertThat ( result, is ( Collections. singletonList ( "setMyField" ) ) )
assertTrue (! result )
Assert. assertEquals ( getElement ( "OBR.2", "C" ), handler. getOrderStatus ( ) )
assertEquals ( "submission should be valid", AnalysisSubmissionStatus. VALID, submission. prepareAnalysisWorkspace ( ) )
PositionCollectorTestUtil. assertEmpty ( collector2 )
assertThat ( result, equalTo ( false ) )
assertEquals ( 0, sut. computeSearchGoalBonus ( current ) )
assertEquals ( "Topology name", "test", conf. getTopologyName ( ) )
assertThat ( array2, equalTo ( new short [ ] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } ) )
Assert. assertEquals ( "qy[0] = 1, qy[1] = 2, qy[2] = 3, qy[3] = 4, qy[4] = 5, qy[5] = 6, qy[6] = 7, qy[8] = 8, qy[9] = 9, qy[10] = 10, qy[11] = 11, qy[12] = 12, qy[9] = 9, qy[10] = 10, qy[11] = 11, qy[12] = 12, qy[9] = 1, qy[10] = 1, qy[11] = 1, qy[12] = 1, qy[14] = 1, qy[15] = 1, qy[15] = 2, qy[16] = 1, qy[17] = 1, qy[17] = 2, qy[17] = 3, qy[16] = 1, qy[17] = 2, qy[17] = 3, qy[16] = 1,
assertEquals ( true, conn. isOpen ( ) )
assertTrue ( "Returned object should be a PredicatedSortedBag.", bag instanceof PredicatedSortedBag )
assertEquals ( "Johannes", nameField. getValue ( ) )
assertFalse ( response. cancel ( ) )
assertEquals ( expecteds, actuals )
assertions. containsOnly ( entries )
assertEquals ( Arrays. asList ( new Path ( "true", "true" ), new Path ( "true", "true" ), new Path ( "false", "true" ) ), s. findPath ( grid ) )
assertEquals ( expectedAwql, serviceQuery. toString ( ) )
assertEquals ( MAXIMUM, jcache. size ( ) )
assertEquals ( on ( 4, 3 ), next )
assertEquals ( new Integer ( "2147483647" ), result )
assertArrayEquals ( ArrayConverter. hexStringToByteArray ( "c2b4e0d0f4e5a8c6c69330a753b308f5e3a83aa2ef6979" ), expand )
assertMockEndpointsSatisfied ( )
assertEquals ( this. out, byteTally. getConsoleOutput ( ) )
assertThat ( cursor. proceedTo ( 'b' ), is ( false ) )
assertEquals ( "diff", out. get ( "T" ) )
Assert. assertTrue ( "No video found", foundVideo )
assertTrue ( comparator. isDifferent ( lhs, rhs ) )
assertEquals ( "foobar", instance. getJMeterProperty ( element ) )
assertEquals ( result, expected, 0.0000001 )
assertDelete ( )
Assert. assertEquals ( "John Doe", customer )
Assert. assertEquals ( String. format ( "search %s in google", this. html ( bb, "java", "java" ) ), formatter. format ( "search [google]java[/google] in google", defaultOptions ( ) ) )
Assert. assertEquals ( false, isConnected )
assertThat ( result. isCompletedExceptionally ( ), is ( true ) )
assertEquals ( expected, actual )
assertEquals ( 1, g. queryDescendants ( obj ). size ( ) )
assertThat ( result. statusCode, is ( Response. NO_CONTENT ) )
assertEquals ( 400, response. getStatus ( ) )
assertEquals ( expected, replacing. transform ( subject ). getType ( ) )
assertThat ( daNull, nullValue ( ) )
Assert. assertNull ( bucket )
assertEquals ( expect, result )
assertEquals ( 5, buffer. getBufferSize ( ) )
assertEquals ( 10, atAct. get ( 0 ) )
assertTrue ( sf. check ( r ) )
assertTrue ( pool. isClosed ( ) )
Assert. assertEquals ( d1, d2 )
assertThat ( subject. getFormattedKey ( ). toString ( ), is ( "route: 10/8\\norigin: AS333" ) )
assertEquals ( input. size ( ), output. size ( ) )
assertTrue ( zkOperations. exists ( "/test1" ) == null )
assertEquals ( Objects. hashCode ( s ), s. hashCode ( ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertThat ( actualResult, is ( expectedResult ) )
Assert. assertTrue ( result )
context. assertNotNull ( ip )
assertThat ( readedValue, is ( value ) )
assertFalse ( collector. isMessageComplete ( ) )
assertEquals ( true, result )
assertEquals ( "jersey", result )
assertThat ( date, is ( expected ) )
assertTrue ( "Filesystem realm should be created", ops. exists ( TEST_FILESYSTEM_REALM_ADDRESS ) )
Assert. assertNull ( processor. getCurrentEnv ( ) )
assertFalse ( Files. exists ( child ) )
assertEquals ( "/context/provider/" + PROVIDER_ID, rc. getPath ( ) )
testContext. assertTrue ( cause instanceof AuthenticationFailedException )
assertions. isNotLessThan ( new Double ( 2d ) )
assertThat ( matches. size ( ), is ( 1 ) )
Assert. assertTrue ( "Failure - expected to be true", result. nested. get ( ) )
assertTrue ( exceptionThrown )
assertNotNull ( actual )
assertEquals ( "Must return self", sut, result )
assertEquals ( 2, new Provider < Integer > ( provider ). getField ( fixture ) )
assertEquals ( expected, actual )
assertThat ( allEvents. stream ( ). map ( e -> e. event ). collect ( toList ( ) ), containsInOrder ( events ) )
assertEquals ( mboss. getCar ( ). getBrand ( ), "浜诧�����������������������������������������������������������������������������
assertEquals ( "{a:'fooXXtrueX123XnullXtrueX123Xnull',b:'fooXXtrueX123XnullXtrueX123Xnull',c:'foo||true|123|null|true|123|null',d:'',f:'fooXXtrueX123XnullXtrueX123Xnull',g:'foo||true|123|null|true|123|null',h:''}", r )
assertEquals ( assertion, array )
Assert. assertEquals ( "beeline --showHeader FAILED. \\n" + results. get ( "outputStream" ), true, consoleMsg. contains ( "not found" ) &&! consoleMsg. contains ( "exception" ) )
Assert. assertEquals ( result. getResultSize ( ), 0 )
Assert. assertEquals ( "You must be able to be able to say you were first.", result )
assertTrue ( "Subnetwork has selected attribute", subNodes. get ( 0 ). get ( CyNetwork. SELECTED ) )
Assert. assertFalse ( line. contains ( "DEVICE0,METRIC0,0,20150203.235809.985-0500,0,20150203.235809.985-0500,1,1001" ) )
assertTrue ( closed. await ( 2, SECONDS ) )
assertNotNull ( certificate )
assertEquals ( expectedDDL, ddl )
assertEquals ( "Message: 123", ResponseBodyInterpolator. interpolate ( "Message: [request.minor]", req ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). getPatientByExternalId ( "Neuro123" ) )
Assert. assertEquals ( config. getDecodeUrl ( ), "https://github.com/sonatype/sonatype-decode" )
Assert. assertNull ( connectionManager. getConnectionDetailsByScheme ( "" ) )
assertTrue ( "Comparator did not reorder the List correctly", orderedList. equals ( randomList ) )
Assert. assertNotNull ( serializedNetwork )
assertNull ( map. findPrev ( null, null ) )
assertEquals ( result, "" )
assertNotNull ( fileOperationMap. getOperation ( operation. getPnfsId ( ) ) )
test. assertValue ( expected )
assertTest1 ( )
assertThat ( value, equalTo ( "development" ) )
assertNull ( requestImpl. accepts ( "text/html", "application/xhtml+xml", "application/xml;q=0.9" ) )
assertEquals ( 3, result )
assertEquals ( "Billie", result )
assertResourceWasAdaptedToModel ( )
assertTrue ( corrOzone == 0.0 )
assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 3155692597470L * 3L ) ) )
assertEquals ( "value1", ( ( TextValue ) value1 ). getValue ( ) )
assertBrownGCD ( gcd, a, b )
assertArrayEquals ( expectedObjects, array )
assertEquals ( NOT_DECODED, object, new ColorTransform ( decoder, context ) )
Assert. assertEquals ( rel. getEndNode ( ), nodes. iterator ( ). next ( ) )
assertEquals ( 10, classUnderTest. getIndex ( ) )
assertTrue ( range instanceof DiscreteValueRange )
Assert. assertEquals ( Arrays. toString ( new int [ ] { 0, 2, 2, 2, 2 } ), Arrays. toString ( this. getCounts4 ( ) ) )
assertArrayEquals ( data, ( int [ ] ) deserialize. readObject ( int [ ]. class ) )
assertThat ( propertyValues. isEmpty ( ), is ( true ) )
testRunner. assertAllFlowFilesTransferred ( PutCassandraQL. REL_FAILURE, 1 )
assertTrue ( AutnumUtil. isValidAutnum ( validAutnum ) )
assertTrue ( "no exception was thrown", exception )
assertEquals ( "Rewritten command was not expected", rewritProc, procReturned )
assertTrue ( min. isEquivalentTo ( left, ba ) )
assertThat ( domain, is ( notNullValue ( ) ) )
assertEquals ( testId, song. getId ( ) )
assertEquals ( 0.0, trend [ i ], 1.0e-12 )
assertSame ( name, expected, Classes. forName ( name ) )
Assert. assertEquals ( new PhoneNumber ( "12345678910" ), pn )
assertEquals ( 3, jobExecutor. getAllJobExecutions ( ). size ( ) )
assertFalse ( sut. isEnabled ( ) )
objects. assertIsInstanceOfAny ( mock ( Description. class ), actual, null )
assertTrue ( isOpened )
assertNotNull ( result )
assertThat ( target1. equals ( target2 ), is ( false ) )
assertEquals ( 0L, pipeline. getTotalBuildTime ( ) )
assertEquals ( 3, filterStrings. size ( ) )
Assert. assertTrue ( serviceConf. getBoolean ( "test.service.enabled", false ) )
Assert. assertEquals ( 0, testHelper. snapshotAfterMigration. getVariables ( ). size ( ) )
assertThat ( response, is ( "" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n" + "<whois-resources xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n" + "    <link xlink:type=\\"locator\\" xlink:href=\\"http://rest.db.ripe.net/test/aut-num/AS102\\"/>\\n" + "    <source id=\\"test\\"/>\\n" + "    <attributes>\\n" + "        <attribute name=\\"aut-num\\" value=\\"AS102\\"/>\\n" + "        <attribute name=\\"aut-num\\" value=\\"AS102\\"/>\\n" + "    </attributes>\\n" + "</whois-resources>\\n" ) )
assertNull ( result )
Assert. assertEquals ( "Value is incorrect", map ( "3141-05", "test" ), value )
assertEquals ( "MurmurHash.hash64() returns wrong hash value", expectedHash, actualHash )
assertTrue ( comparator. isDifferent ( lhs, rhs ) )
Assert. fail ( "should have failed" )
assertTrue ( result. contains ( "CURRENT LOG APPENDER" ) )
assertTrue ( temp. length ( ) > 0 )
assertThat ( actual, hasSize ( 10 ) )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
Assert. assertEquals ( "999999999999.99", produto. getValorTotalBruto ( ) )
assertEquals ( sb. toString ( ), param. getValue ( ) )
assertEquals ( "First Full Functional Build", version. getDescription ( ) )
assertThat ( converted, equalTo ( expected ) )
Assert. assertSame ( EDIT_ACCESS, this. component. getAccessLevel ( this. entity, COLLABORATOR ) )
Assert. assertNotNull ( newProxyInstance )
Assert. assertEquals ( expected, component )
assertEquals ( DependendencyStatus. UNKNOWN, oracle. assess ( access ( "foo", "bar" ) ) )
assertTrue ( predicate. test ( pickle ) )
context. assertIsSatisfied ( )
assertEquals ( "Number of threads is not set correctly.", numThreads, ThreadsEngine. getNumberOfThreads ( ), 0 )
Assert. assertEquals ( cons, e )
Assert. assertFalse ( "no query result returned", result. isEmpty ( ) )
assertEquals ( 0, listeners. length )
assertEquals ( expected, f. format ( ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<dummyNode eh=\\" 'a &amp;> b&quot; \\"  />\\n" + "</dummyNode>\\n", out. toString ( ) )
assertThat ( backend. get ( "/index.html" ), is ( "/config/FOO" ) )
Assert. assertTrue ( contains )
Assert. fail ( "Mechanism name should not be null" )
Assert. assertTrue ( irodsFile. canRead ( ) )
assertEquals ( PduType. NONE, request. getPduType ( ) )
assertEquals ( "Select first with descending order by", expectedSelectFirstOrderByNullsLastDesc ( ), testDialect. convertStatementToSQL ( stmt ) )
assertEquals ( dto, dto2 )
assertNull ( "Intersection between lines is incorrect", pi )
assertEquals ( 82799999L, m. getLastMillisecond ( ) )
assertTrue ( rec_cnt == 4 )
assertEquals ( "\\"2014-03-10T23:32:47+00:00\\",\\"hello\\"", csv )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( expected, actual )
assertEquals ( 1, OldClass. NUM_FOR_TEST_THREADS )
assertEquals ( model, actual )
Assertions. assertFalse ( result )
assertThat ( new JcrValue ( factories, PropertyType. LONG, 0L ). getDate ( ). getTime ( ), is ( expectedValue. getTime ( ) ) )
assertEquals ( 0, memberships. size ( ) )
AssertAnnotations. assertToken ( tokens, select ( jcas, Token. class ) )
Assert. assertTrue ( context. getResult ( ) )
assertEquals ( "console", rpt. getRecords ( ). get ( 0 ). getMessage ( ) )
Assert. assertEquals ( Arrays. toString ( new int [ ] { 1 } ), Arrays. toString ( this. getCounts1 ( ) ) )
Assert. assertEquals ( 400, response. getStatus ( ) )
assertFalse ( config. isCacheGzippedContentEnabled ( ) )
assertEquals ( expectedMsg, faultSoap12 )
assertEquals ( "DebugClassLoading", false, config. isDebugClassLoading ( ) )
assertEquals ( bytes. readableBytes ( ), results. size ( ) )
assertEquals ( 200, ( int ) caller. getSentError ( ) )
Assert. assertEquals ( options. getTargetPath ( ), new Path ( "hdfs://localhost:8020/target/" ) )
assertThat ( "Combined vars", IteratorUtils. transformedIterator ( combined. iterator ( ), VarDef :: getPathName ), visitsMembers ( "Color.*", "Color.Hue" ) )
Assert. assertEquals ( 65., tdCosts. getTransportTime ( loc ( "from" ), loc ( "to" ), 0., null, null ), 0.01 )
Assert. assertArrayEquals ( expected, values )
assertThat ( getServers ( ), empty ( ) )
Assert. assertEquals ( "\\"name=name\\" \\"event_id=event-id\\" \\"key=129\\"", event. toString ( ) )
Assert. assertArrayEquals ( b, a, MathUtils. EPSILON )
assertEquals ( "íóú", result )
assertThat ( extractMonitorables ( histogramAdapter ). get ( COUNT ). get ( ), Matchers. < Object > is ( newCount ) )
assertEquals ( expectedSource, instrumentedSource )
assertEquals ( 5, i. intValue ( ) )
Assert. assertEquals ( Scope. BY_ORIGIN, authscope. getOrigin ( ) )
assertTrue ( registry. getMonitorables ( ). isEmpty ( ) )
assertTrue ( failedAsExpected )
assertEquals ( expected, filterAclEntriesByAclSpec ( existing, aclSpec ) )
assertEquals ( "Response body is not correct.", USER_IN_REALM1_WITH_INFIX_AND_SUFFIX, Utils. makeCallWithBasicAuthn ( principalServlet ( webAppURL ), USER_IN_REALM1_WITH_INFIX_AND_SUFFIX, CORRECT_PASSWORD, SC_OK ) )
assertEquals ( expResult, result )
assertThat ( unescaped, is ( "\\\\thello\\\\nworld\\\\x" ) )
assertGridIndexes ( data, new boolean [ ] { false, true, true, true, true }, new boolean [ ] { false, false, false, false, false }, new Expected [ ] [ ] { { Expected. build ( true, 3, false ) }, { Expected. build ( true, 0, true ) }, { Expected. build ( true, 0, false ) }, { Expected. build ( true, 0, true ) }, { Expected. build ( true, 0, false ), Expected. build ( true, 0, false ) } } )
assertEquals ( "test", echo. echo ( "test" ) )
assertFalse ( constraint. fulfilled ( iContext ) )
assertEquals ( 4.0, median, 0.0000001 )
assertTrue ( listener. getEvent ( )!= null )
Assert. assertEquals ( datahoraRecebimento, dados. getDatahoraRecebimento ( ) )
Assert. assertEquals ( "1", eventoCancelamento. getIdLote ( ) )
Assert. assertEquals ( 0.0, a. transposeMultiply ( b ). subtract ( a. transpose ( ). multiply ( b ) ). getNorm ( ), 1.0e-15 )
assertEquals ( "", result )
assertThat ( dateTime. toString ( ), is ( "2015-06-24T23:07:00" ) )
assertThat ( certList, is ( context. getClientCertificateTypes ( ) ) )
assertThat ( retrieved, isPresent ( infoEquals ( 2 ) ) )
Assert. assertTrue ( "occurrence had ID but one was not added", topic2. getTopicIDs ( ). isEmpty ( ) )
Assert. assertEquals ( "0", prefix. getPrefix ( ) )
Assert. assertTrue ( actual. canRead ( ) )
assertE ( "�尖�尖�尖�尖�尖��" + "��    ��" + "��    ��" + "�� ��  ��" + "�尖�尖�尖�尖��" )
assertEquals ( request. getUri ( baseURI ), expectedURI )
Assert. assertEquals ( content, result )
assertTrue ( st. isDir ( ) )
assertEquals ( 0, content. refCnt ( ) )
assertThat ( isEquals, is ( true ) )
assertEquals ( "{\\"workflowRule\\":[{\\"skill\\":\\"HR\\",\\"targets\\":[{\\"name\\":\\"WQXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\"}]},{\\"friendlyName\\":\\"4354\\",\\"priority\\":54333,\\"timeout\\":30}}", mapper. writeValueAsString ( workflow ) )
assertNotNull ( result )
assertEquals ( expectedSize, size )
assertEquals ( "SELECT *\\nWHERE {\\n ?s?p?o,?o2, <toto> ;\\n ?b?c;<name> ;\\n ?e }", processed )
assertThat ( converters. existsFor ( MyConverter. class ), is ( true ) )
Assert. assertEquals ( "Hallo, Welt", oembedService. executeRequest ( request ) )
assertFalse ( String. format ( "[%s] should be valid.", coord ), validator. isValid ( coord, null ) )
assertDeletedIDs ( expDeletedIIDs, deletedIDs )
assertNull ( p )
assertEquals ( expected, d_meas. toString ( ) )
Assert. assertEquals ( 2, collectorManager. collectorsByCorrelationId. size ( ) )
assertEquals ( DefaultFlipConditionEvaluator. class, flipConditionEvaluator. getClass ( ) )
assertTrue ( "rule should have been declared", rule. hasDeclaredCodegen ( ) )
Assert. assertEquals ( expectedDate, newConceptSource. getDateCreated ( ) )
assertNotNull ( injector )
assertThat ( proxy. wasCalled ( ), is ( true ) )
assertEquals ( HttpStatus. SC_FORBIDDEN, response. getStatus ( ) )
assertXmlMarshaling ( referenceObjectBinding, XML )
assertNotNull ( initializer )
ctx. assertEquals ( 0, records. size ( ) )
assertTrue ( details. hasCancelled ( ) )
assertSame ( hello, uriTools. resolveUri ( HELLO_URI. resolve ( "processor" ), wfBundle ) )
assertEquals ( 1, dao. getAllAnnouncements ( ). size ( ) )
assertEquals ( request. getUri ( baseURI ), expectedURI )
assertEqualsIgnoreLineEnding ( output, "{\\n" + "  \\"additionalProp1\\" : \\"v-e\\",\\n" + "  \\"additionalProp2\\" : \\"v-e\\",\\n" + "  \\"additionalProp3\\" : \\"v-e\\",\\n" + "  \\"additionalProp4\\" : \\"v-e\\",\\n" + "  \\"additionalProp5\\" : \\"v-e\\",\\n" + "  \\"additionalProp6\\" : \\"v-e\\",\\n" + "  \\"additionalProp7\\" : \\"v-e\\",\\n" + "  \\"additionalProp6\\" : \\"v-e\\",\\n" + "  \\"additionalProp6\\" : \\"v-e\\",\\n" + "  \\"additionalProp6\\" : \\"v-e\\",\\n" + "  \\"additionalProp7\\" : \\"v-e\\",\\n" + "  \\"additionalProp8\\" : \\"v-e\\",\\n" + "
assertThat ( "Expected SerializablePrincipal from Kermit principal", rmap, hasItem ( KERMIT_PRINCIPAL ) )
assertEquals ( "Thread count did not match", 2, semaphores. getReady ( ). getCount ( ) )
Assert. assertEquals ( prtition_num, 2 )
assertNotNull ( entityGroup )
Assert. assertEquals ( "{\\"universe\\":0,\\"time\\":0,\\"uuid\\":1,\\"data\\":{\\"name\\":\\"MySmartCity\\",\\"districts\\":[3,4]}}\\n", buffer. toString ( ). replaceAll ( "\\r\\n", "\\n" ) )
assertThat ( config. getFailTopic ( ), is ( "y" ) )
assertTrue ( "Match should have succeeded.", match )
assertTrue ( "Failed to report property value without error", cli. getFailureMessage ( ). contains ( "property value not found" ) )
assertEquals ( "foo", sharedMap. get ( "key" ) )
assertEquals ( Action. SUCCESS, action. execute ( ) )
Assert. assertTrue ( "canonicalizing the test file " + out + " and " + cxtm + " produces " + baseline, TestFileUtils. compareFileToResource ( out, baseline ) )
Assert. assertEquals ( "client:AP123;foo=bar", scope. toString ( ) )
assertNull ( "treeTable must auto create sorter if not enabled", table. getRowSorter ( ) )
Assert. assertEquals ( result. getResultSize ( ), 0 )
assertNull ( mergeReport )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {}}", bson. toJson ( writerSettings ) )
assertNull ( val )
Assert. assertEquals ( HttpServletResponse. SC_FORBIDDEN, response. getStatus ( ) )
assertEquals ( expResult, result )
assertNotNull ( objJPAEdmProperty. getEdmNavigationPropertyView ( ) )
Assert. assertEquals ( THIRTEEN_BYTE, pi. getThirteenByte ( ) )
assertEquals ( "{'some':'data'}", json. toString ( ) )
assertThat ( baseStepListener. hasFailed ( ), is ( false ) )
assertEquals ( new Date ( pastDate ), job. getNextRun ( ) )
assertEquals ( this. w2Y1900, previous )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( asList ( "a", "b", "c" ), toml. < String > getList ( "a.b.c" ) )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
Assert. assertFalse ( FlowDifferenceFilters. FILTER_ADDED_REMOVED_REMOVED_REMOTE_PORTS. test ( flowDifference ) )
assertFalse ( "No movie keywords found", result. isEmpty ( ) )
assertEquals ( rows, sorter. getViewRowCount ( ) )
assertEquals ( expResult, result )
assertNotNull ( source )
assertEquals ( new HashMap < String, Integer > ( Arrays. asList ( 12345, 54321 ) ), simpleGet ( keyEquiv ( 12345 ) ) )
assertOut ( "/**\\n * @constructor\\n * @implements {custom.TestInterface}\\n * @implements {custom.TestOtherInterface}\\n */\\norg.apache.royale.A = function() {\\n\\torg.apache.royale.A.base(this, 'constructor');\\n};\\ngoog.inherits(org.apache.royale.A, custom.TestInterface);\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
assertEquals ( 0, acquiredTriggers. size ( ) )
assertEquals ( out, frame2 )
assertEquals ( "", instance. getErrorMessage ( ) )
assertThat ( readBytes ( testee, 4 ), is ( "" ) )
assertEquals ( geo, expResult )
assertValueModelFires ( model, interval, expected )
assertArrayEquals ( content, readContent )
assertEquals ( 3, fattest. getCalories ( ) )
Assert. assertArrayEquals ( expected, result )
assertThat ( age, is ( 35 ) )
assertThat ( plugin. getClass ( ), is ( equalTo ( HtmlFormatter. class ) ) )
assertEquals ( PCEPErrors. UNKNOWN_PLSP_ID, this. errorsSession1. get ( 0 ) )
assertTrue ( "value was " + Arrays. toString ( target ), Arrays. equals ( expected, target ) )
Assert. assertFalse ( errors. hasGlobalErrors ( ) )
assertEquals ( "Hello world", wire. bytes ( ). readUtf8 ( ) )
assertEquals ( "OK", reply. getStatus ( ) )
assertEquals ( 1, this. chartChangeEvents. size ( ) )
assertEquals ( 2, resultList. size ( ) )
assertFalse ( fail )
assertSame ( list, Args. collectionNotEmpty ( list ) )
assertNull ( tr. resolve ( null, null ) )
assertEquals ( 200, r. getStatus ( ) )
assertEquals ( i, number )
Assert. assertTrue ( errors. hasFieldErrors ( "loser" ) )
Assert. assertArrayEquals ( new byte [ ] { 0x00, 0x22, 0x34, 0x55, 0x11, 0x11 }, result )
assertEquals ( expected, this. fsParser. extractFlowspec ( entry. build ( ) ) )
assertThat ( items, arrayContainingInAnyOrder ( Item. READ, Item. BUILD ) )
Assert. assertTrue ( "Datasource discovered", resultFound )
assertThat ( issues, hasItems ( "#123", "#456", "#789" ) )
assertArrayEquals ( location, floorOffset )
assertEquals ( "[Jedi, Bob, Bong, Foo]", powers. toString ( ) )
assertEquals ( total, result, 0.0001 )
Assert. assertFalse ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
assertTrue ( patterns. isEmpty ( ) )
assertEquals ( "2005-10-11T10:00:00.5", v. getStringValue ( ) )
Assert. fail ( "DalRuntimeException expected" )
assertThat ( attributes, contains ( new Attribute ( AttributeType. MNT_ROUTES, "OWNER-MNT {10.0.0.0/8}" ), new Attribute ( AttributeType. MNTNER, "OWNER-MNT {10.0.0.0/8}" ) ) )
Assert. assertNull ( queue. poll ( ) )
assertEquals ( expected, readOutputFile ( conf ) )
assertSame ( toTest, toTest. setMethodsRetryHandler ( RetryHandler. class ) )
assertEquals ( out. readableBytes ( ), 0 )
assertTrue ( orgToCreate. getId ( )!= null )
assertEquals ( HttpStatusCodes. UNSUPPORTED_MEDIA_TYPE. getStatusCode ( ), result. getStatusLine ( ). getStatusCode ( ) )
assertValid ( response )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
Assert. assertFalse ( conceptService. isRetired ( drug. getUuid ( ) ) )
assertFalse ( validator. isValid ( resource, MetadataSection. ADDITIONAL_PART_ALT_IDENTIFIERS ) )
assertLookup ( breaks, values, srcImg, DataBuffer. TYPE_DOUBLE )
assertEquals ( "Wrong number of nodes added", 1, c2. getNodeCount ( "test.autosave" ) )
Assert. assertEquals ( node, r. get ( "node" ) )
assertNotNull ( EndUserType. reader ( ). read ( ) )
Assert. assertNotNull ( out. getD6 ( ) )
assertByteArraysEquals ( Lists. newArrayList ( "colfam:qualifier" ), extractor. extract ( value ) )
assertNotNull ( state )
Assert. assertEquals ( 100, terminatedAfter )
assertOperation ( ( ) -> roleClient. getRepository ( SPACE_NAME, name ) )
assertEquals ( 654321, wsss. getReceiveBufferSize ( ) )
PSLTest. assertModel ( dataStore, input, expected )
assertEquals ( HttpURLConnection. HTTP_NOT_FOUND, connection. getResponseCode ( ) )
assertEquals ( 3, count )
assertThat ( table. asString ( ), equalTo ( "|one|\\n|two|\\n|11|\\n|12|\\n|21|\\n|22|\\n" ) )
assertTrue ( FlagDelegate. isVisited ( ) )
Assert. assertEquals ( 5, set. size ( ) )
Assert. assertTrue ( "WebServerTestingFrameworkException should have been thrown", requestHandler. isRequestSupported ( "http://www.apache.org" ) )
Assert. assertTrue ( threadPoolConfig. getQueue ( ) instanceof SynchronousQueue )
Assert. assertNotNull ( result. getFirstHeader ( "Warning" ) )
Assert. assertFalse ( "failure - expected numbers to be diff", CMC. equals ( CMC2 ) )
assertions. isNotEqualTo ( expected )
context. assertIsSatisfied ( )
assertEquals ( ColumnDifference. getCol1Type ( ), ColumnDifference. COLUMN_TYPE_INTEGER )
assertEquals ( Double. doubleToLongBits ( resultKthSelector ), Double. doubleToLongBits ( resultSort ) )
Assert. assertEquals ( "Expected no rights", 0, auths. size ( ) )
assertTrue ( uploadResult. isUploaded ( ) )
assertEquals ( "2012-01-02", date. getValueAsString ( ) )
assertThat ( numFound ( query ( "q=company, Ltd" ) ), is ( 1L ) )
assertThat ( actual, is ( expected ) )
assertTrue ( "Agent-based allocation should have failed", plan. getAllReservations ( ). size ( ) == numJobsInScenario )
assertEquals ( expected, reference. get ( ) )
assertEquals ( "m Foo, Foo, {2}, {3}, {4,number,#.00}, 123 {foe}", msg. getMessage ( ) )
assertTrue ( s. length ( ) > 0 )
assertEquals ( "someHost", requestImpl. host ( ) )
Assert. assertEquals ( false, retval )
Assert. assertTrue ( ff4j. getCurrentContext ( )!= null )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
Assert. assertNull ( caixa )
assertEquals ( ConfigUtils. getConfigClass ( mockStormApplication ), MockStormApplication. class )
assertEquals ( "field1", name )
assertDtoAndMapConstructorAreSame ( 1 )
assertions. doesNotHaveDuplicates ( )
assertE ( "�尖�尖�尖�尖�尖�尖��" + "��     ��" + "��  ��  ��" + "��  ��  ��" + "��     ��" + "��     ��" + "�尖�尖�尖�尖�尖�尖��" )
assertEquals ( tenantId, connection. getAttribute ( PhoenixRuntime. TENANT_ID_ATTRIB ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( component. getStyleName ( ), "style1 style2" )
Assert. assertTrue ( got. contains ( "Created device: {" ) )
assertEquals ( expected, actual )
assertTrue ( loaded )
assertThat ( "repo", getLocalRepo ( ), hasItem ( "github.com/alibaba/pr/4.1.0/open" ) )
assertTrue ( true )
Assert. assertTrue ( deadLockDetected. booleanValue ( ) )
assertMessageAndPath ( constraintViolationCreationContextList. get ( 0 ), message, pathWith ( ). property ( "foo" ). property ( "bar", true, "test", null ). property ( "fubar", true, null ) )
assertEquals ( "Expected version 2", 2, version. split ( "." ). length )
assertTrue ( namedClusterManager. loadUrl ( testNcName, null, metaStore, mappings, null ) )
assertEquals ( "http://www.effektif.com/", link )
assertTrue ( handler. canProcessEvent ( event ) )
assertTrue ( expectedMaxPoolingActivation. compare ( poolingActivation, TOLERANCE ) )
assertThat ( restfulServerConfig. getPort ( ), is ( 1080 ) )
assertTrue ( prefs. matches ( t ) )
Assert. assertEquals ( expected, MessageFormatter. format ( message, "p1", "p2", "p3", "p4" ) )
assertEquals ( "Invalid selection timeout", MongoClientOptions. DEFAULT_SERVER_SELECTION_TIMEOUT, clientOptions. getServerSelectionTimeout ( ) )
Assert. assertEquals ( expected, printer. toString ( ) )
assertEquals ( Arrays. asList ( "abc", "def", "ghi" ), removeEmpty )
assertEquals ( ".outer { margin: 2px; }.inner { padding: 3px; }", normalize ( css ) )
Assert. assertEquals ( 1, compareResult )
assertEquals ( 20, header. getCallID ( ) )
assertEquals ( actual, expected, "Wrong substitution" )
assertTrue ( cli. isConnected ( ) )
assertEquals ( rs2, rs )
Assert. assertEquals ( expectedResult, resultString )
Assert. assertNull ( testPatientData )
assertThat ( tuple. getSetOrEmpty ( "field" ), empty ( ) )
assertEquals ( 0, buf. size ( ) )
assertEquals ( expectedMessage, result )
assertEquals ( 400, response. getStatus ( ) )
assertEquals ( expResult, result )
Assert. assertArrayEquals ( oldbb, bb )
assertThatExtensionHasMaxFragmentLength ( )
assertEquals ( expected, actual )
assertEquals ( "[Function released]", v8Object. toString ( ) )
Assert. assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf. getCumulativeLoss ( ), udtf. getCumulativeLoss ( ) < 800 )
assertEquals ( 1, fired )
assertXMLStringsEquals ( ( "<Root>\\n" + "   <X>Passed</X>\\n" + "   Value\\n" + "</Root>\\n" ), test. toString ( ) )
assertFalse ( violation )
assertEquals ( - 113858255368, con. hashCode ( ) )
assertNull ( actual )
Assert. assertEquals ( expected, component )
assertThat ( defn. getDeclaringNodeType ( ), is ( nullValue ( ) ) )
assertThat ( anchors, hasSize ( 5 ) )
N4CliHelper. assertExpectedOutput ( "moduleClient {\\n" + "  name: 'client',\\n" + "  version: '1.0'\\n" + "}", out )
Assert. assertEquals ( 200, newMergedRecord. getIncomingTransferSsl ( ) )
assertEquals ( packet, p )
Assert. assertNotNull ( "no environmental info accessor", target )
assertFalse ( condition. evaluate ( new MockRewrite ( ) ) )
assertTrue ( Boolean. FALSE. equals ( value ) )
assertEquals ( expResult, result )
assertEquals ( expectedNumber, numberOfItems )
assertThat ( studies. size ( ), is ( 1 ) )
assertEquals ( 2, set. size ( ) )
Assert. assertEquals ( 0, inventoryItems. size ( ) )
assertThat ( reader. nextKeyValue ( ), is ( false ) )
assertEquals ( 10, getCache ( provider, "foo" ). capacity )
Assert. assertTrue ( evaluator. hasPermission ( authentication, targetId, targetType, permission ) )
assertions. contains ( value, index )
assertEquals ( "{a:'b'}", Utils. transform ( m, Steps. class ) )
assertEquals ( 0, sentryStore. createSentryPrivilegeQuery ( ). where ( "server", "server", grantor ). where ( "sentryPrivilege.dbName", "db1" ). count ( ) )
assertDateEquals ( result, dateTime )
Assert. assertEquals ( Type. High, type )
assertEquals ( nullInfo. getName ( ), info. getName ( ) )
assertTrue ( "user in admin group should have access", val )
Assert. fail ( "Can't cd to non existing file" )
assertStat ( result )
assertArrayEquals ( output, output2 )
assertEquals ( timeInstant. getTimeMode ( ), TimeInstant. TimeMode. NOW )
assertEquals ( result, toTypedExpression ( "someB.ICB.onlyConcrete()", ICA. class ). getExpression ( ). toString ( ) )
assertEquals ( 0, response. getReturn ( ). size ( ) )
assertEquals ( "Method #toString is wrong", "PrefixCondition{boost=0.5, field=name, value=tr}", condition. toString ( ) )
assertEquals ( "Should get a 200 response", HttpStatus. OK, mongodbFeedSource. getEntry ( getEntryRequest ). getResponseStatus ( ) )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
assertArrayEquals ( new byte [ ] { 0x02, 0x03, 0x04, 0x08, 0x03, 0x04, 0x08, 0x04, 0x03, 0x04, 0x08, 0x04, 0x03, 0x04, 0x04, 0x03, 0x04, 0x04, 0x03, 0x04, 0x04, 0x0A, 0x0C, 0x0D, 0x0A, 0x03, 0x08, 0x0D }, MessageEncoder. encodeFlags ( msg ) )
assertFalse ( strategy. isCrawable ( url, "test" ) )
assertEquals ( "JSON Form", result, json. toString ( ) )
Assert. assertNotNull ( mediaId )
assertDepth ( right, rightSource, 2 )
Assert. assertTrue ( wordsFedFound )
Assert. assertTrue ( fallbackRan )
assertTrue ( "Member should have been complete", ids. contains ( createdMember. getId ( ) ) )
assertEquals ( "chrome", result. getUserAgent ( ) )
Assert. assertEquals ( "Invalid output returned", TransformXMLTestHelper. TEST_XML, output )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
Assert. assertEquals ( decompressFlag, methodCalled. get ( 0 ) )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertEquals ( "check plugins empty", 0, _plugins. size ( ) )
Assert. assertTrue ( "value~~~~~~~". equals ( value ) )
assertEquals ( "category", deleteCategory. getName ( ) )
assertAnnotationCompletions ( "@Value(\\"#{345${spring.prop1<*>}}\\")", "@Value(\\"#{345${else.prop2<*>}}\\")", "@Value(\\"#{345${spring.prop3<*>}}\\")", "@Value(\\"#{345${spring.prop1<*>}}\\")" )
assertEquals ( ordered, result )
assertEquals ( "396min", op. getAsDate ( ). toString ( ) )
Assert. assertTrue ( "It should return Parameter Values", parameterValues!= null )
tester. assertRenderedPage ( HomePage. class )
assertThat ( text ( written ), is ( "on_unmappable_output = report\\n" ) )
assertEquals ( "/t/test", templateUri. toString ( ) )
assertEquals ( 545, result )
assertIdentical ( "/reason_exclude_tautologies_structural.owl", input )
testRunner. assertNotValid ( )
assertEquals ( refPoint, testPoint )
assertThat ( throwable. getMessage ( ), is ( "value" ) )
assertTrue ( "module was not successfully registered", module. getKualiModuleService ( ). getInstalledModuleServices ( ). contains ( this ) )
assertEquals ( domainRoles, result )
assertEquals ( 1, ( ( ObjectWithOptions2 ) ( ( ObjectWithOptions ) options. optOp ). optionsOp ). value )
context. assertIsSatisfied ( )
assertEquals ( 0.0, epsilon. evaluate ( front ), EPSILON )
assertFalse ( orchestrator. isRunning ( ) )
assertTrue ( testModelView instanceof MyModelView )
assertEquals ( "PluginClassLoader should have same protection domain", pd1, pd2 )
assertEquals ( Integer. valueOf ( 1 ), deque. getLast ( ) )
assertEquals ( "a\\t\\"b\\t\\"c\\",\\"d\\"", out. toString ( ) )
assertEqualDoubleArrays ( pymin, min, epsilon )
assertEquals ( MyMedication. class, mo. getContained ( ). get ( 0 ). getClass ( ) )
Assert. assertFalse ( subscriptionsGet. accept ( element ) )
assertThat ( testValues, is ( expectedValues ) )
assertEquals ( expectedContainers, actualContainers )
assertThat ( parsed. properties ( ), is ( nullValue ( ) ) )
assertEquals ( "duzentos e um", actual )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<samlp:Response Consent=\\"urn:oasis:names:tc:SAML:2.0:consent:unspecified\\" Destination=\\"https://samlcent/Shibboleth.sso/SAML2/POST\\" ID=\\"_fd601e21-5f81-469e-88c7-da72dccf1357\\" InResponseTo=\\"_545e60fe3602a06d25f241b622c5a773\\" IssueInstant=\\"2015-04-06T06:42:39.213Z\\" Version=\\"2.0\\" xmlns:samlp=\\"urn:oasis:names:tc:SAML:2.0:protocol\\"><Issuer xmlns=\\"urn:oasis:names:tc:SAML:2.0:assertion\\">http://SAMLWIN.saml.lan/adfs/services/trust</Issuer><samlp:Status><samlp:StatusCode Value=\\"urn:oasis:names:tc:SAML:2.0:status:Success\\"/></samlp
assertTrue ( String. format ( "test %d, test %d", j, tests ), ratio < 0.01 )
assertThat ( testListener. isCalled ( ), is ( true ) )
assertThat ( logRecords, containsInfo ( DOMAIN_Presence_SERVICE_EXISTS ) )
GenericTestUtils. assertExceptionContains ( "The reported exception is not a IncorrectVersionException", ive )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 06" ) )
resultEndpoint. assertIsSatisfied ( )
assertEquals ( ALICE_PUBLIC_KEY, mult )
Assert. assertNotNull ( this. session )
Assert. assertFalse ( pti. equals ( null ) )
assertTrue ( isValid )
assertGameOver ( )
assertTrue ( "Configurable sasl server factory should be created", ops. exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertions. isNotLessThan ( new Float ( 10f ) )
assertEquals ( 7, nn. lpDist ( 5, 9 ), 1e-5 )
assertCallTree ( callTree, callStack. getStackEvents ( ), true )
assertEquals ( simple. getName ( ), find. getName ( ) )
assertDependencyIsResolvedToEmpty ( )
assertThat ( mode, is ( equalTo ( BatchMode. from ( Arrays. asList ( "-b", "replay", "-c", "c:\\\\Users\\\\franckc\\\\script.txt" ) ) ) ) )
assertEquals ( expected, wire. read ( ( ) -> "VALUE" ). int64 ( ) )
Assert. assertEquals ( 0, p. evaluate ( d ), Double. MIN_VALUE )
assertEquals ( "Empty", dsc. getDisplayName ( ) )
assertTrue ( ( Boolean ) result )
verify ( messages ). assertAbsenceOfErrors ( )
assertThat ( tags, is ( empty ( ) ) )
Assert. assertNull ( formEntryContext. getLocation ( ) )
assertEquals ( expected, actual )
Assert. assertTrue ( "lookup returned wrong topic: " + found, topic == found )
assertUserDn ( USER_BARBOSSA_USERNAME, USER_BARBOSSA_FULL_NAME )
assertTrue ( "Failed authentication with wrong user was not logged", loggedFailedAuth ( UNKNOWN_USER ) )
assertTrue ( getRecordsAsXmlString. contains ( "hopCount=\\"2\\"" ) )
assertEquals ( originalSize + 1, tags. all ( ). size ( ) )
assertEquals ( 4, result. getProperties ( ). size ( ) )
assertEquals ( expResult, result )
Assert. assertEquals ( expect, cnt )
assertResultSet ( res )
assertTrue ( Bytes. compareTo ( bytes1, bytes2 ) < 0 )
assertEquals ( "subSubName", expr. exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertEquals ( "asdf", obj. get ( "jsonNode" ). asText ( ) )
Assert. assertEquals ( node, r. get ( "node" ) )
Assert. assertTrue ( service. isAlertSystemOn ( ) )
mockery. assertIsSatisfied ( )
assertFalse ( "Privilege should not have changed after editing the administrator main page.", checkField ( "enterName", null ) )
assertEquals ( expected, actual )
Assert. assertTrue ( true )
Assert. assertEquals ( "The database size is incorrect", NUM_WINDOWS, databaseSize )
assertTrue ( e instanceof E_StrUcase )
Assert. assertTrue ( parameter. evaluate ( rewrite, context ) )
assertSame ( GBP_2_34, test )
assertEquals ( expected, result )
assertTrue ( check ( "note", input, output ) )
assertFalse ( report. contains ( "" ) )
assertEquals ( expResult, result )
assertEquals ( 2, builder. getAddedVehicleTypes ( ). size ( ) )
assertEquals ( test. expected ( ), test. actual ( ) )
assertEquals ( creditCardXML, writer. toString ( ) )
assertEquals ( inverse. get ( fields [ 0 ]. getId ( ) ), inverse. get ( fields [ 0 ]. getId ( ) ) )
assertEquals ( "-something", commandLine. getOptionValue ( "t" ) )
assertEquals ( sqe, convertResult. get ( 0 ) )
assertThat ( connectionProperties. getDatabaseName ( ), is ( "H2_EMBEDDED" ) )
Assert. assertEquals ( 0, reactorHandlerRegistry. getEntrypoints ( ). size ( ) )
assertEquals ( "dois undecilh玫es de inteiros", actual )
assertEquals ( EmailState. DELETED, result. getState ( ). getState ( ) )
assertPermanentCount ( playerB, "Elite Vanguard", 0 )
assertNotNull ( result )
Assert. assertEquals ( 256.633, result, 0 )
assertThat ( getRecordedDomain ( ), not ( hasCondition ( Progressing ) ) )
assertArray ( new double [ ] { 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5 }, scaleDouble ( a, b, c ) )
assertEquals ( expResult, result )
assertEquals ( expected, actual )
Assert. assertEquals ( String. valueOf ( obj ), quantidade, tamanho )
assertEquals ( expected, identity )
assertThat ( catResult. getColumns ( ). size ( ), is ( 1 ) )
assertEquals ( a1, a2 )
assertEquals ( "AES-256-CBC", property )
assertThat ( info. isRequired ( ), is ( true ) )
assertTrue ( inv1. fire ( ) )
assertEquals ( 8, someNotSoRandomAsciiAsList. size ( ) )
Assert. assertEquals ( "Hello World", ejbInstance. sayHello ( ) )
assertFalse ( selector. evaluate ( source ) )
Assert. assertEquals ( EstadoAsientoRegistralEnum. RECHAZADO. getValue ( ), estado. getEstado ( ) )
assertEquals ( Math. sqrt ( 0.01 ), distance. compute ( point1, point2 ), EPSILON )
assertEquals ( 4, encounters. size ( ) )
assertThat ( notSent. size ( ), is ( 1 ) )
assertNotNull ( dummy. target )
assertThat ( terminalStep. wasRun ( ), is ( false ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "<Header xmlns=\\"http://www.springframework.org\\"><NotUnderstood xmlns=\\"http://www.springframework.org\\"><Header name=\\"spring-ws\\"/></Header>", result. toString ( ) )
assertNull ( monitor. getZk ( ) )
Assert. assertSame ( this. lockingUser, this. mocker. getComponentUnderTest ( ). getLock ( this. currentDocumentReference ) )
assertTrue ( config. isAdvancedClusterConfigSet ( null ) )
assertThat ( sampleTestClass. driver, is ( not ( nullValue ( ) ) ) )
rule. assertScenarioEnded ( )
assertTrue ( cp. isReadOnly ( ) )
assertEquals ( "Hello :name Tim", ResponseBodyInterpolator. interpolate ( "Hello :name :name", req ) )
Assert. assertEquals ( 1, rows )
Assert. assertNotNull ( version )
assertEquals ( connectionTimeout, ConfigUtils. getConnectionTimeout ( mockServletContext, ConfigConstants. connectionTimeout ) )
assertEquals ( expected, result )
assertEquals ( "return proposition is not same as proposition created", propositionDefinition, returnPropositionDefinition )
assertEquals ( IS_NULL. toString ( ), res. getHibernateCriterion ( ). toString ( ) )
logSpy. assertInfoWithExceptionWasLogged ( )
assertEquals ( 1, constraints. size ( ) )
assertTrue ( collection. isEmpty ( ) )
Assert. assertEquals ( "Fail count record of room", i, cr )
Assert. assertFalse ( tcpConnectivity. supports ( requirement ) )
assertEquals ( LineText. LEFT, lineText. getAlignment ( ) )
assertThat ( anyTS. contains ( SECOND_OF_DAY ), is ( true ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "[0, 1, 2]", p. toString ( ) )
assertEquals ( 0, curatedDrugs. size ( ) )
assertAxisEquals ( 0.9, 1.3, new double [ ] { 0.00, 0.02, 0.04, 0.06, 0.08, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.24, 0.25, 0.26, 0.25, 0.26, 0.25 }, new String [ ] { "0.9", "0.04", "0.06", "0.08", "0.10", "1.0", "1.1", "1.2", "1.3" }, axis )
assertAllCommandsUsed ( )
assertThat ( selectedCell, is ( "B2" ) )
assertThat ( new SearchArgumentFilter ( searchArgument, structTypeInfo ). accept ( corc ), is ( true ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff_overflowNewContent02_" ) )
assertEquals ( DataTypeManager. DefaultDataClasses. STRING, command. getProjectedSymbols ( ). get ( 0 ). getType ( ) )
assertExtendedEquals ( expected, dd, STRICT )
assertEquals ( 2, numberOfTests. getLength ( ) )
assertNull ( result )
assertEquals ( 0, tasks. size ( ) )
assertEquals ( "must be able to set vertical scrollbar policy", JScrollPane. VERTICAL_SCROLLBAR_ALWAYS, scrollPane1. getVerticalScrollBarPolicy ( ) )
Assert. assertEquals ( 2, tables. size ( ) )
assertNotNull ( result )
r. assertEqualBeans ( orig, received, "ami,zone,description,remoteFS,type,jvmopts,stopOnTerminate,securityGroups,subnetId,useEphemeralDevices,useDedicatedTenancy,useDedicatedTenancy,useDedicatedTenancy" )
assertEquals ( expected, actual )
assertTrue ( rs. next ( ) )
assertEquals ( 1368, Evaluator. evaluate ( ex ) )
assertEquals ( "Wrong number of sources returned", 0, config. getSources ( CHILD1 ). size ( ) )
assertThat ( result, is ( "Network2" ) )
assertEquals ( 2, instance. getNeurons ( ). size ( ) )
context. assertIsSatisfied ( )
assertTrue ( ModuleTestUtils. compare ( x, topo. getInputs ( ), 1e-13 ) )
assertNull ( encryption )
Assert. assertNotNull ( instance. getFirstAtomMapping ( ) )
assertTrue ( followInitiativeDao. getFollow ( initiativeId ). getFollowCount ( ) == 2 )
dataLoader. assertDataToJsonEqualsExpectedFileContent ( "shouldReturnFieldsOnlyWithPropertys.json", result )
assertNull ( "Unexpected value in outputTriple: " + outputTriple, outputTriple )
assertTrue ( map instanceof HashMap )
Assert. assertTrue ( map. get ( usage1. getId ( ) ). get ( 1 ). isEmpty ( ) )
assertThat ( type, equalTo ( DBR_String. TYPE ) )
assertEquals ( "Wrong super type", Event. RESET, builderResetType. getSuperType ( ) )
assertEquals ( 3, allClasses. size ( ) )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), allOf ( hasItem ( createConfigMapKeyRefEnvVar ( "VARIABLE1", "my-env", END_VALUE_1 ) ), hasItem ( createSecretKeyRefEnvVar ( "VARIABLE2", "my-secret", END_VALUE_1 ) ), hasItem ( createFieldRefEnvVar ( "MY_NODE_IP", END_VALUE_1 ) ) ) )
assertEquals ( expected, actual )
assertThat ( getPodSpec ( jobSpec ). getContainers ( ), empty ( ) )
Assert. assertTrue ( elapsed < 500 )
assertEquals ( BatchStatus. COMPLETED, execution. getStatus ( ) )
assertThat ( groupUnderTest. isFeatureEnabled ( ), is ( equalTo ( false ) ) )
assertEquals ( content. get ( numberOfContent - 1 ), nodeB. getDataManager ( ). get ( parameters ). getVersionKey ( ) )
assertEquals ( "6.3 - (3 + 1)/5 + 3.14)*600 (2 + 3 - (6 + (4.3 - 9)))", this. codeGenerator. getPostFixExpression ( ) )
assertNotNull ( context. getBean ( "service" ) )
assertNull ( processEngine. getRuntimeService ( ). createProcessInstanceQuery ( ). singleResult ( ) )
Assert. assertEquals ( expected, actual. getName ( ) )
assertEquals ( literal, builder. toString ( ) )
assertEquals ( 9, aggregator. generateId2OutcomeFile ( ). split ( "\\n" ). length )
assertEquals ( expResult, stringBuilder. toString ( ) )
assertThat ( page. clickSingleClickButton. isVisible ( ), is ( true ) )
assertEquals ( expectedFolderPath, buildFolderPath )
assertChildren ( moveTo, moveTo. resolve ( "newFile" ) )
assertEquals ( p, pws. getProgram ( "program name" ) )
assertEquals ( "Latitude is not properly parsed", 5.3f, mapper. readLatitude ( columns ), 0 )
assertEquals ( testcrypt, client. getCryptoSuite ( ) )
assertThat ( result ( ), not ( containsString ( "\\"client\\"" ) ) )
assertThat ( updatedSearchFormat, is ( "((somefield:10) fieldwithweight:1)^5 superfield:(10000)^8797" ) )
assertThat ( result, notNullValue ( ) )
Assert. fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertThat ( Material. matchMaterial ( String. valueOf ( material. getId ( ) ) ), is ( material ) )
assertNotNullOrEmpty ( "Tags should never be null.", tags )
Assert. isTrue ( users. size ( ) > 0 )
assertTrue ( ( "actual count: " + count ), count <= 2 )
assertTrue ( "Audit log count should be 0.", auditLogs. size ( ) == 0 )
assertEquals ( 0., iCosts, 0.01 )
Assert. assertEquals ( "Mismatch between system property (or default) and OgnlRuntime _usFirstMatchGetSetStateFlag: " + OgnlRuntime. getUseFirstMatchGetSetLookupValue ( ), optionDefinedInEnvironment? flagValueFromEnvironment : defaultValue, OgnlRuntime. getUseFirstMatchGetSetLookupValue ( ) )
assertEquals ( 1, cache. listPrivileges ( null, null, new Server ( "server1" ), new Database ( "db1" ) ). size ( ) )
assertEquals ( "Hello There. Here is some text.", text )
assertEquals ( "456.5!~[d\\\\.]+ =~", this. codeGenerator. getPostFixExpression ( ) )
mockery. assertIsSatisfied ( )
assertEquals ( 100, total )
assertXmlEqual ( expected, formatterOutput )
assertEquals ( publisher, result )
assertTrue ( AbstractAnalyticsService. hasMetrics ( css1 ) )
assertTrue ( setCookie. startsWith ( ";HttpOnly" ) )
assertThat ( PlainDate. of ( 2000, 12, 2 ). with ( model. weekOfYear ( ). atFloor ( ) ), is ( PlainDate. of ( 2000, 12, 2 ) ) )
assertEquals ( "LOCAL: \\nName1\\nName2\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany", bpartnerBL. mkFullAddress ( bPartner, bpLocation, user, null ) )
Assert. assertFalse ( FileUtil. gitDirectoriesAreEqual ( neq1, neq2 ) )
assertEquals ( asList ( info ( mdcValues, marker, message ) ), testLogger. getLoggingEvents ( ) )
assertNull ( t )
Assert. assertEquals ( "Multi-Part Request to large error: " + response, "myValue", response )
Assert. assertEquals ( "Old Server Name", serverName, authServerName )
assertThat ( confirmation. validate ( ), equalTo ( true ) )
Assert. assertEquals ( "HomeScreenActivity", defaultApp )
assertEquals ( "hello, world!", result )
assertTrue ( "Repository should contain newly added statement", testCon. hasStatement ( name, name, nameBob ) )
assertEquals ( expectedValue, advice. cacheGetSingle ( pjp ) )
assertEquals ( expected, actual )
assertEquals ( "A Value with real data added then removed should return interpolated value on getValue().", interpolatedValue, victim. getValue ( ), EPSILON )
assertEquals ( "pd1", dao. getPdName ( "pd1" ) )
assertThat ( result, is ( jsonBoolean ( false ) ) )
assertTrue ( pattern. matches ( "-1.1" ) )
assertEquals ( "Hello adapter from design pattern", adapterHelloWorld. hello ( ) )
assertThat ( sel, is ( cls ) )
assertThat ( result, is ( 7L ) )
assertBeanValidation ( json, "end_time must be greater than or equal to 1" )
assertTrue ( "mark failed", cr. markSupported ( ) )
assertEquals ( 20, rs. getInt ( 1 ) )
assertTrue ( output, output. matches ( "(?s).*int.*" ) )
assertThat ( ( String ) dest. get ( "ccc" ), is ( "111" ) )
Assert. assertEquals ( "[a, b, c, d]", inv. invokeFunction ( "split", "a.b.c.d" ). toString ( ) )
assertEquals ( list, parser ( "//s//tr" ). object ( "" ) )
assertEquals ( workspaceNames, repository. listWorkspaces ( workspaceNames ) )
assertThat ( branchFilter. getClass ( ). getName ( ), is ( "org.apache.juneau.branchfilter.AllBranchesFilter" ) )
Assert. assertEquals ( host. getUuid ( ), vo. getUuid ( ) )
assertFalse ( resolver. resolve ( ) )
Assert. assertEquals ( 0, analyser. getVariableTransportCostsAtActivity ( route. getStart ( ), route ), 0.01 )
assertNotNull ( fileOperationMap. getOperation ( operation. getPnfsId ( ) ) )
assertEquals ( 0, errors. get ( ) )
assertEquals ( "INFO\\n" + "First line\\n  Indented line\\n" + "Last line\\n", formatted )
Assert. assertEquals ( AgentConstants. PLATFORM_VMWARE, this. agent. parameters )
assertEquals ( 0.7, predict. get ( 0 ) )
assertEquals ( "<p><img src=\\"http://example.com/\\" alt=\\"Image\\" /></p><p><img src=\\"ftp://ftp.example.com\\" /></p>", TextUtil. stripNewlines ( cleanHtml ) )
assertEquals ( FieldType. FIELD, f. getFieldType ( ) )
assertEquals ( 0, errors. size ( ) )
assertTrue ( ScriptBuilder. validate ( script, new ByteArrayOutputStream ( ) ) )
assertNotNull ( start. getLastBuild ( ) )
assertThat ( boundSql. getSql ( ), Matchers. equalTo ( "select  id in (?,?)" ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED, status )
assertEquals ( generatedJavascript, expectedJavascript )
assertEquals ( expected, actual )
Assert. assertEquals ( ( Long ) 1, res )
assertTrue ( false )
assertEquals ( 6. * 3600. + 6. * 60. + 12., sec, 0.01 )
assertEquals ( str, stream )
assertThat ( result. size ( ), is ( 2 ) )
assertEquals ( 1, findings. size ( ) )
assertValid ( "//xsd:element[@name='s'][@type='xsd:string']", doc )
assertNoErrors ( )
assertEquals ( "123 Some Road", result )
assertThat ( selected, is ( infoPresenter2 ) )
assertEquals ( body. toString ( ), "<html><body><h1>Resource not found</h1></body></html>" )
assertNull ( "EngineFactory is not configured.", factory )
assertEquals ( 1, objects. size ( ) )
assertEquals ( "StructType is not correct", schema, subset )
assertFalse ( "Algorithm content equality should not work", algorithm. contentEquals ( equalAlgorithm ) )
TestCase. assertTrue ( result )
assertTrue ( result )
assertTrue ( slice. events. isEmpty ( ) )
assertEquals ( "", conversions. newInstance ( "strPath", "intPath" ). toString ( ) )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
assertThat ( POSIX_FORMATTER. format ( utc ), is ( "2012-06-30 23:59:59.123456789Z" ) )
assertEquals ( message, sentFrame. toString ( Charset. forName ( "UTF-8" ) ) )
assertTrue ( determinized. equals ( fstDeterminized ) )
assertTrue ( ok )
assertEquals ( "", result )
assertEquals ( "x", vdb. getAdminMO ( ). getName ( ) )
Assert. assertEquals ( "Value is incorrect", map, value )
assertFalse ( tagNode. isSelfClosing ( ) )
Assert. assertEquals ( "in", listLoopStatement. getLoopList ( ). get ( 0 ). getName ( ) )
assertPermanentCount ( playerA, "Amoeboid Changeling", 1 )
assertThat ( testUriStr, is ( expectedUriStr0 + "/" + expectedUriStr1 ) )
assertNotNull ( store. get ( key, new String [ 0 ] ) )
Assert. assertEquals ( 1, factory. getNumCarvedTestCases ( ) )
assertEquals ( expFilter, filter )
assertNotNull ( base64 )
assertEquals ( 1, result. getNuOfDimensions ( ) )
assertEquals ( "server-test-1", server. getName ( ) )
assertEquals ( "����", person. getMyname ( ) )
assertTrue ( inProgressMessages. isEmpty ( ) )
Assert. assertEquals ( sample. toString ( ), importedSample. toString ( ) )
assertThat ( repo1, is ( sameInstance ( repo2 ) ) )
assertTrue ( rec_cnt == 1 )
Assert. assertFalse ( result )
assertMatrixEquals ( Ad, A )
assertNull ( twinMetadata )
assertNotNull ( "First Transcript in the collection must be returned", transcript )
assertThat ( control. matches ( "/clients/3" ), is ( true ) )
assertEquals ( "testade", pm_ade. getName ( ) )
assertThatCommitIndexWasCommitted ( )
assertArrayEquals ( expected, result, 0.000001 )
assertTrue ( Transforms. abs ( sub1. sub ( arr2 ). div ( sub1 ) ). maxNumber ( ). doubleValue ( ) < 0.01 )
Assert. assertEquals ( dataHoraRecibo, consultaRetorno. getDataHoraRecibo ( ) )
assertArrayEquals ( expected, numbers )
Assert. assertNotNull ( "Default module not found", def )
assertEquals ( "Hello, world", message. toString ( ) )
assertEquals ( "BitcodinApiTest.settings.apikey should be set", BitcodinApiTest. settings. apikey, bitApi. getApiKey ( ) )
assertThat ( valid, is ( equalTo ( false ) ) )
assertEquals ( 100d * SCROLL_LEFT / ( SCROLL_WIDTH - CLIENT_WIDTH ), position, 0 )
assertFalse ( array. isView ( ) )
assertEquals ( new Response ( ), result )
assertEquals ( ChargingCapability. V_480V_3_PHASE_32A, ChargingCapability. fromConnector ( connector ) )
assertFalse ( faceted. register ( ) )
assertEquals ( 204, response. getStatus ( ) )
assertThat ( abc, is ( "eureka" ) )
assertEquals ( expResult, result )
assertTrue ( hash64_1. equals ( hash64_2 ) )
Assert. assertEquals ( "136.5", response )
assertEquals ( "world&bar", builder. getQuery ( ). get ( "hello+world" ) )
assertEquals ( "<html><head><title>One</title></head><frameset><frame /><frame /></frameset></html>", TextUtil. stripNewlines ( doc. html ( ) ) )
assertEquals ( "Value is incorrect", map, value )
assertTrue ( baseConsumerClass. exists ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
Assert. assertEquals ( motivo, consultaRetorno. getMotivo ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "/my/foo/bar", rewriteEngine. processInbound ( null, null, c, url ) )
assertTrue ( true )
assertIsSatisfied ( 2L, TimeUnit. SECONDS, secondOutbound )
Assert. assertEquals ( expected, actual )
assertThat ( qualifier, is ( "org.apache.cucumber.core.plugin.simple-data-driven" ) )
context. assertIsSatisfied ( )
assertEquals ( Sets. newHashSet ( 1, 2 ), Sets. newHashSet ( q. asList ( ) ) )
assertThrown ( val, promise2 )
assertNotNull ( result )
assertEquals ( "Mismatched results for index=" + index, expected, actual )
assertEquals ( "private=\\"a;b\\"", cc. toString ( ) )
assertThat ( response. getBody ( ), containsString ( "Hello World, Buddy" ) )
assertNotNull ( cs. getWarnings ( ) )
assertEquals ( featureService1, aspect. getFeatureService ( ) )
arrays. assertNotEmpty ( description, null )
assertNull ( result )
Assert. assertEquals ( b, m. getBook ( ) )
assertEquals ( new Float ( 123.4F ), result )
Assert. assertEquals ( expResult, result, 0.0 )
assertTrue ( actionServiceRegistered )
Assert. assertEquals ( new Path ( "obj1.nestedSimpleInteger" ), fullPath )
Assert. assertEquals ( "Block result is wrong", new Integer ( 1 ), o )
assertEquals ( 0, maxByColumns. length )
assertEquals ( ( map. get ( "child" ) ), ( ( Object ) child ) )
assertEquals ( - 1, tree. getBeforePosition ( ZERO ) )
assertEquals ( "{k1:1}", o )
assertThat ( emptyDatabase. isClean ( ), is ( false ) )
assertEquals ( "jsmith@aaa.$3", mappedIdentity )
assertThat ( txId1. get ( ), is ( txId2. get ( ) ) )
assertThat ( uri. isTemplate ( ), equalTo ( true ) )
Assert. assertTrue ( true )
assertEquals ( "Expected 5 results!", 5, n )
assertEquals ( req, wrapper )
assertEquals ( "graph has wrong average value, should be 0.0", 0.0, average, 0.0 )
assertEquals ( "testpass", FileUtils. readFileToString ( passwordFile. toPath ( ), Charset. forName ( "UTF-8" ) ) )
assertFalse ( violation )
assertTrue ( fs. exists ( srcFilePath ) )
assertEquals ( actual, pluginConfiguration )
assertEquals ( expectedQuery, actualQuery )
assertNotEquals ( getMapping1, getMapping2 )
assertEquals ( "[{}, {}, {}]", actual )
assertEquals ( tag. doStartTag ( ), Tag. EVAL_BODY_INCLUDE )
assertTrue ( events. size ( ) == 1 )
assertEquals ( false, result )
assertEquals ( 2, searchScreenshots. size ( ) )
assertEquals ( "Expected 4 results!", 4, n )
Assert. assertTrue ( children. size ( ) > 0 )
Assert. assertNotNull ( rangerServiceDef )
Assert. assertNotNull ( endpoint )
assertEquals ( "blah", result. getOut ( ). getBody ( ) )
Assert. assertEquals ( "current", authzDepConf. get ( currentVar. getVar ( ) ) )
iterables. assertIsSubsetOf ( someInfo ( ), actual, newArrayList ( "Yoda", "C-3PO" ) )
assertEquals ( 2, em. createQuery ( query ). getResultList ( ). size ( ) )
assertEquals ( "GET: Server Error", response )
assertTrue ( true )
Assert. assertEquals ( getElement ( "PV1.7", "XPN.2" ), handler. getPatientLocation ( ) )
Assert. assertArrayEquals ( expected, actual. toArray ( ) )
Assert. assertEquals ( builder. toString ( ), expected, actual, tol )
assertEquals ( count1 + 1, repository. execute ( countOp ). longValue ( ) )
Assert. assertEquals ( "(nt_change_duplication (nt_point_location (nt_base_location (nt_number 123))) dup)", nt_change_duplication. toStringTree ( parser ) )
assertThat ( repository. findByTrackNameLike ( "foo" ), is ( albums ) )
assertEquals ( newValue, rot. getRateOfTurn ( ), 0.1 )
Assert. assertEquals ( expected, new HtmlFormatter ( ). format ( input, options ) )
assertEquals ( 0, accumulators. length )
Assert. assertEquals ( expected, FileCommands. ftGetFileInfoArray ( channelIds, channelPasswords, filePaths ) )
assertEquals ( server. getConfig ( ). get ( "testserver.a" ), "default" )
assertThat ( response. getStatus ( ), is ( Response. Status. BAD_REQUEST. getStatusCode ( ) ) )
assertTrue ( extractorInstance1 instanceof testExtractor )
Assert. assertTrue ( success )
assertEquals ( "SSN, SSM FROM '11111111111111' AND (SSM.ID IN ('22222222222222'))", result. toString ( ) )
Assert. assertEquals ( "涓�|瑗�|浼�|��|��|浜�", words )
Assert. assertThat ( values, Matchers. contains ( "gzip", "gzip", "compress", "gzip" ) )
assertEquals ( uploadLocation + FileUtils. toDir ( stateToken ) + filename + pngExtension, absFile )
assertTrue ( MessageEncodeDecode. checkIsSameList ( m1. trackerDataList ( ), m2. trackerDataList ( ) ) )
assertNotNull ( result )
assertCapturedHint ( expected, capture, EncodeHintType. CHARACTER_SET )
Assert. assertNull ( httpServerAuthenticationMechanism )
Assert. assertEquals ( "select from test where sym=`sym`", select. toQ ( ) )
assertEquals ( "Thai Montag, 1970-01-01 00:00:00", DateUtils. formatFriendlyDate ( new Date ( 0 ), Locale. FRANCE ) )
assertTrue ( getExecutableModelBuildResult ( ksession ). isEmpty ( ) )
assertTrue ( factory. getClass ( ). getName ( ). startsWith ( ExtraDataPropertyAccessorFactory. class. getName ( ) ) )
assertTrue ( newYearsEve. isBefore ( newYearsDay ) )
assertLookup ( breaks, values, srcImg, DataBuffer. TYPE_USHORT, roi, defaultV )
assertEquals ( "No services discovered for bad container", 0, multimap. size ( ) )
assertThat ( subject. toString ( ), is ( "" + "***RDNS: (related to to 0.2.193.in-addr.arpa) CRITICAL: Fatal error in delegation for zone 0.2.193.in-addr.arpa.\\n" + "\\n" + "No name servers found at child or at parent. No further testing can be performed." ) )
Assert. assertEquals ( DEFAULT_CONTENT_TYPE, connection. getHeaders ( ). get ( "Content-Type" ) )
assertTrue ( getNoErrorMsg ( ), result )
assertThat ( qsCallback. asDocument ( ), is ( b. build ( ) ) )
Assert. assertEquals ( fileComparer. replaceAbstractPartialClasses ( file1AsList ), expectedResult )
Assert. assertEquals ( getDao ( ). count ( ), count - 1 )
assertEquals ( "[true]", actualObj ( ). toString ( ) )
Assert. assertFalse ( policy. isResponseCacheable ( "GET", response ) )
assertEquals ( i1, i2 )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Sms action=\\"https://example.com\\" statusCallback=\\"https://example.com\\" method=\\"GET\\" to=\\"+15558675310\\" from=\\"+15017122661\\"/>", elem. toXml ( ) )
assertSame ( cache, nativeCache )
Assert. assertEquals ( score, smsd1. getFragmentSize ( 0 ) )
Assert. assertFalse ( "Capabilities should match", first. matchesCapabilities ( map ) )
assertEquals ( true, bm. isBitSet ( 63 ) )
Assert. assertEquals ( expected, Strings. unCapitalizeFirstChar ( data ) )
assertEquals ( instantiator, pi. getInstantiator ( ) )
Assert. fail ( "Test encountered an unexpected exception." )
assertEquals ( 0, spy. getSchemaNames ( ). size ( ) )
assertEquals ( "[\\"bla\\",\\"string\\"]", param. toJson ( ) )
Assert. assertTrue ( report. isSuccess ( ) )
assertNull ( token )
assertThat ( type, is ( notNullValue ( ) ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "distance(x, y, 1.1, 1.2)", p. toString ( ) )
Assert. assertNotNull ( url )
assertEquals ( testNewUrl, jobEntryHadoopCopyFiles. loadURL ( testUrl, testNcName, metaStore, mappings ) )
assertThatSql ( query, is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 JOIN table2 as t2 ON t1.c0 = t2.c0" ) )
assertEqualsIgnoreWhitespace ( expected, drl )
assertEquals ( 0, changes. size ( ) )
assertThat ( collectionName, not ( startsWith ( ADMIN_VRE ) ) )
assertThat ( value. getMessage ( ), is ( equalTo ( "test" ) ) )
assertSame ( value, XenqttUtil. validateGreaterThan ( "integer", value, max ) )
Assert. assertEquals ( ( Integer ) 1, res )
assertThat ( testOutcome. getTags ( ), hasItem ( TestTag. withName ( "a feature" ). andType ( "feature" ) ) )
Assert. assertEquals ( "selenium.goBack(\\"\\",\\"\\");", result )
assertEquals ( expected, result )
assertScheduleWhenTuplesAvailableStrategy ( strategy, 1 )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertEquals ( testQueryValue, rval )
assertThat ( tester. response. getStatus ( ), is ( equalTo ( HttpServletResponse. SC_OK ) ) )
assertEquals ( linearChainFg, fgfile )
Assert. assertEquals ( "other", config. getString ( "name" ) )
assertEquals ( "Required profiles", "tui", new ConciergePlatformBuilder ( m_bundleContext, "version" ). getRequiredProfile ( m_platformContext ) )
assertThat ( route, canHandle ( ClientsController. class, "list" ) )
assertEquals ( expectedResult, result )
assertContains ( e. getMessage ( ), "'first'" )
assertBuildException ( "boolean", "password" )
assertEquals ( "Wrong path", "mypath/db2jcc.jar,$${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar", config. getString ( "mypath" ) )
assertEquals ( "both ext sources should be same", extSource, extSource2 )
Assert. fail ( "Should have thrown exception" )
assertEquals ( "bar", lr. get ( 2 ). get ( ) )
assertNotSame ( fixture, copy )
assertNotEquals ( update1, update2 )
assertTrue ( "result must be a Failure", result. isFailure ( ) )
assertEquals ( "Base for floats is wrong", Double. valueOf ( 3.6d ), parsed )
assertThat ( response. getStatusLine ( ). getStatusCode ( ), is ( 200 ) )
Assert. assertNotNull ( this. userService )
assertThat ( result, is ( jsonArrayOfStrings ( "0", "1", "2", "3" ) ) )
assertEquals ( "Bearer 4adc339e0", rc. request ( ). header ( "Authorization" ) )
assertEquals ( outerJson, BsonCodec. bsonObjectToJsonObject ( outerBson ) )
Assert. assertEquals ( "Remote invocation of EJB was not successful", StatefulBeanRemote. ANSWER, response )
assertEquals ( "le plus lentement", realiser. realise ( lentement ). getRealisation ( ) )
assertEquals ( "Could not find expected error", SyncopeClientExceptionType. NotFound, exception. getType ( ) )
assertEquals ( 10, b. join ( ) )
assertSame ( is, this. testee. getData ( cn ) )
assertPermanentCount ( playerB, "Lightning Bolt", 1 )
assertEquals ( "X=foo%3Dbar%3Dquz", s. serialize ( m ) )
assertNotEquals ( putMapping1, putMapping2 )
assertObjectEquals ( "{}", t )
assertEquals ( 1, posts. size ( ) )
assertThat ( results, is ( Arrays. asList ( "@[2]-", "@[0]-", "@[1]-", "B", "C" ) ) )
assertArrayEquals ( array, data. getData ( type ) )
Assert. assertEquals ( "9f3d4e8b9f9f9e0d49f9e0f9e9d9f", fp )
assertFalse ( post. isVotedUpBy ( user ) )
assertEquals ( 7, p. getTotalPages ( ) )
assertEquals ( 1, handler. getCalledTimes ( ) )
assertThat ( testOutcome. lastStep ( ). getDescription ( ), is ( "Step 3" ) )
assertTrue ( wasException )
assertThat ( aggregator. reports. size ( ), equalTo ( 0 ) )
assertThat ( result, isFailedCommand ( ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( 0, articles. size ( ) )
assertEquals ( "", printer. toString ( ) )
Assert. assertEquals ( 0, resources. size ( ) )
assertEquals ( "Should return FAILURE", "failure", jsonObj. get ( "status" ). getAsString ( ) )
Assert. assertEquals ( "Value is incorrect", map, value )
assertEquals ( "getNumBatched", 1, batchedModifications. size ( ) )
assertThat ( result, is ( original ) )
assertEquals ( expResult, result )
assertEquals ( "{\\"uniqueItems\\":true,\\"minItems\\":5,\\"maxItems\\":10,\\"allItemSchema\\":{\\"type\\":\\"boolean\\"}}", actual )
assertNotNull ( referenceObjectBinding )
assertTvShowResultsPage ( results )
assertThat ( house. cat. firstLeg. birthDay, is ( equalTo ( ( Calendar ) new GregorianCalendar ( 2010, 2, 10 ) ) ) )
assertEquals ( mockPom, converter. convertFromModuleName ( moduleName ) )
assertThat ( migration. migrateUserTemplate ( beforeFile, afterFile ), is ( true ) )
this. assertLoadBlobViaTuples ( tuples, false, true )
assertTrue ( "should compare password types without any password types", jdbcAuthProvider. comparePasswords ( PASSWORD, UNKNOWN_PASSWORD ) )
Assert. assertNotNull ( json. getString ( "uid" ) )
assertTrue ( runtimeExceptionCalled [ 0 ] )
Assert. fail ( "Expected to fail for version " + version )
assertEquals ( "3.yes,1.A;3.yes,1.C;3.yes,1.D;3.yes,5.hello;3.yes,5.world;", stringWriter. toString ( ) )
assertNull ( container. getMetaData ( new StatementHelper ( ) ) )
assertEquals ( converter. format ( null ), converter. format ( null ) )
assertEquals ( provider, comboBox. getDataProvider ( ) )
assertEquals ( initialSize - 1, taskScheduler ( ). list ( ). size ( ) )
assertEquals ( 1, counter. count )
assertArrayEquals ( expected, one. split ( ) )
assertEquals ( Long. valueOf ( 67 ), resultMap. get ( "Age" ) )
assertions. containsSequence ( sequence )
assertEquals ( 6, tokens. size ( ) )
assertTrue ( Arrays. equals ( searchTrits, transactionViewModel. trits ( ) ) )
Assert. assertTrue ( systemUnderTest. propertyOverridesExist ( ) )
assertThat ( results. size ( ), is ( 0 ) )
assertions. hasSize ( 5 )
Assert. assertFalse ( policy. isResponseCacheable ( request, response ) )
assertEquals ( "Expected resolved parent", parent, instance. getParent ( ) )
assertTrue ( writer. isClosed ( ) )
assertEquals ( "Wrong result", TEST_VALUE, interpolator. resolve ( TEST_NAME ) )
Assert. assertFalse ( isOk )
assertEquals ( Color. BLACK, value. intValue ( ) )
assertEquals ( BAD_REQUEST. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( "[= foo]", m. toString ( ) )
assertEquals ( "Counts [follows=1, followed_by=1, media=1]", result )
Assert. assertEquals ( orderStream. size ( ), collector. actualResults. size ( ) )
assertFalse ( checkTest )
Assert. assertEquals ( 0.0, getMetric ( ). calculate ( getSession ( ) ), getDelta ( ) )
Assert. fail ( "Have not found 'doDynamic' in the returned function list" )
assertMock ( a, builder )
assertThat ( token. isStillActive ( ), is ( false ) )
assertEquals ( 1, hookClass. count )
assertNotNull ( NonTerminal. MULTI_STATEMENTS. buildAbstractSyntaxTree ( tokenStream ) )
assertTrue ( resourceRelationBoundary. isAddableAsProvidedResourceToResourceGroup ( master, slaveName ) )
assertNull ( cache. get ( key ) )
Assert. assertTrue ( true )
assertTrue ( findElement ( By. className ( "v-slot-0" ) ). getText ( ). contains ( "Powered by Powered by" ) )
assertTrue ( result instanceof XMLTextChunkBuilder )
assertFalseForPropertyValidation ( )
assertThat ( properties, is ( expected ) )
assertThat ( ids, contains ( pid. getValue ( ) ) )
assertThat ( log. getLogEntries ( 1, 5 ), is ( equalTo ( entries ) ) )
assertEquals ( NOT_FOUND. getStatusCode ( ), response. getStatus ( ) )
assertThat ( noOfSolutions, is ( 81 ) )
assertThat ( exitCode, is ( 0 ) )
assertThat ( date2. toString ( ), is ( "2014-05-29T08:54:09.764+02:00" ) )
Assert. assertEquals ( "Value is incorrect", map ( MONTH_DAY_STRING, "test" ), value )
assertEquals ( result, "10 years ago" )
assertEquals ( VALUE2 + VALUE1, client. get ( KEY1 ). toCompletableFuture ( ). get ( ) )
assertEquals ( su. getSubusers ( ). get ( 0 ). getPermission ( ), result. getPermission ( ) )
Assert. assertEquals ( results. size ( ), 1 )
assertEquals ( lastProgress, 100 )
assertEquals ( 2, ( long ) user. getTotalUnreadPrivateMessages ( ) )
assertThat ( result, is ( expected ) )
assertTrue ( con. getAutoCommit ( )!= null )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"conference\\":{\\"id\\":\\"1234\\",\\"mute\\":false,\\"playTones\\":false,\\"interdigitTimeout\\":3.5,\\"required\\":true,\\"terminator\\":\\"#\\"}}]}" )
assertEquals ( "One revision should have been deleted", 1, revisions. getNumberOfElements ( ) )
assertThat ( underTest. lastDownloadedInterval ( ), is ( equalTo ( standardHours ( 0 ) ) ) )
Assert. assertEquals ( "select babyfish_shared_alias_0 " + "from org.babyfishdemo.jpacriteria.entities.Employee babyfish_shared_alias_0 " + "inner join babyfish_shared_alias_0.department babyfish_shared_alias_0.department babyfish_shared_alias_0.name like babyfish_shared_alias_0.name " + "where " + "babyfish_shared_alias_0.babyfish_literal_0 " + "or " + "babyfish_shared_alias_0.babyfish_literal_1 " + "or " + "babyfish_shared_alias_0.department babyfish_shared_alias_0.name like babyfish_literal_1 " + "or " + "babyfish_shared_alias_0.name = babyfish_literal_2", createQueryTemplate ( cq ). toString ( ) )
assertEquals ( "?p1=v1&p2=v2&p3=v3", query. toString ( ) )
assertThat ( tag. getCommit ( ). getTag ( ), equalTo ( "annotated-tag-of-2nd-commit" ) )
assertEquals ( 1, instance. evaluations )
assertEquals ( testOntology, helper. construct ( testEntity ) )
assertThat ( fe, notNullValue ( ) )
assertNoDataValue ( targetPoduct. getBand ( FLOAT_BAND_NAME ), new PixelPos ( 23.5f, 13.5f ), 299.0, 299.0 )
Assert. assertEquals ( 0, testHelper. snapshotAfterMigration. getVariables ( ). size ( ) )
assertEquals ( 1L, query ( ). from ( entity ). where ( entity. primitive ( ). eq ( true ) ). fetchCount ( ) )
assertThat ( result, contains ( v_121, v_122 ) )
Assert. assertEquals ( 4, map. size ( ) )
assertEquals ( 1, query ( ). from ( survey ). where ( survey. firstname. eq ( "Foo" ) ). select ( survey. firstname ). fetchCount ( ) )
Assert. assertEquals ( "bob", token. getUserName ( ) )
assertFalse ( canHandle ( handlerInput ) )
assertEquals ( "Wrong name", newName, root. getName ( ) )
Assert. assertNotNull ( savedTenant2 )
assertXMLIdentical ( expected, result. getReport ( ) )
assertResultSet ( res )
assertEquals ( "this is a test", pnr. getProperty ( "test" ). get ( ) )
assertTrue ( diff < messageTimes. get ( i ). getTime ( ) )
assertEquals ( expectedQuery, actualQuery )
Assert. assertEquals ( 0.0, getMetric ( ). calculate ( getSession ( ) ), getDelta ( ) )
assertEquals ( dataSet. getRowCount ( ), 50 )
assertTrue ( "Headers tar file '" + headersTarFile + "' for sdk '" + sdk + "' configuration '" + configuration + "' does not exist.", headersTarFile. exists ( ) )
assertEquals ( 0.0, lq. factor ( new DenseMatrix ( Ac ) ), 1.0e-5 )
assertEquals ( "Hawk id=\\"x\\",mac=\\"qVfHawk=\\",hash=\\"t8cGFzd3dG4gFyMqYW5vYXh3dG9qYXh3dG9qYW5vYW5vYW5vYW5vYW5vYW5vYW5vYW5vYW5kW5kW5kW5kW5kdGFzNlM3l3NzDzDzDzDzNzdW3dW3dW3dW3dW3dW3dW3dW3dW3dW3dW3dW3dW3dW3vYW5vYW5vYW5vYW5vYW5vYW5vYW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW5kW
assertTrue ( "Failed permission check was not logged", loggedFailedPermissionCheck ( AUDIT_LOG_FILE, USER ) )
assertEquals ( "x\\n", found )
Assert. assertEquals ( jsonString, "[{\\"name\\":\\"涓���\\",\\"id\\":1,\\"brithDate\\":null,\\"money\\":1.1}]" )
assertEquals ( ( VecTools. multiply ( newOutput, outputGrad ) - VecTools. multiply ( outputGrad, outputGrad ) ) / eps, grad. get ( i ), 1e-5 )
assertTrue ( check )
assertFalse ( identityService. createUserQuery ( ). userId ( user. getId ( ) ). count ( ) )
Assert. assertEquals ( "test", stack. get ( "test" ) )
assertNull ( entry )
assertEquals ( 30.0, v. getLatestArrival ( ), 0.01 )
assertThat ( result, is ( jsonString ( "null" ) ) )
Assert. assertEquals ( expectedOutput, output )
assertEquals ( response. getHeader ( SecWebSocketVersionInterceptor. SEC_WEB_SOCKET_PROTOCOL_HEADER ), protocol )
assertEquals ( "<p>Hello</p>\\n<p>There</p>", divs. html ( ) )
assertEquals ( "template_value_updated", customUiTemplate. getTemplateValue ( ) )
assertEquals ( "regexp condition serialization is wrong", expected, actual )
assertFalse ( "WorkflowDocument should not indicate quickstart as SuperUser", document. isValidAction ( ActionType. SU_APPROVE ) )
assertThat ( description. toString ( ), is ( "A JSON array with size: <2>" ) )
org. assertj. core. api. Assertions. assertThat ( searchResponse. getHits ( ). totalHits ( ) )
assertAllCommandsUsed ( )
assertTrue ( getNoErrorMsg ( ), result )
Assert. assertNull ( vm. getInstanceOfferingUuid ( ) )
assertNotNull ( entity. getId ( ) )
assertEquals ( encoded. length, fixture. prepareToEncode ( context ) )
assertThat ( formatter. parse ( "01/29/4, G y" ), is ( expected ) )
assertMedianIs ( 108 + 109 )
assertEquals ( false, test5. equals ( null ) )
Assert. assertArrayEquals ( answer, result, 1e-5 )
assertEquals ( testGen1. group ( testLSN ), testGen2. group ( testLSN ) )
assertEquals ( header, conditionals. toHeader ( ) )
assertEqualsIgnoreWhitespace ( expected, real )
assertEquals ( "<!DOCTYPE html><!-- a comment -->One <qux />Two", TextUtil. stripNewlines ( doc. html ( ) ) )
Assert. assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass\\">A1</td>\\n" + "</tr>\\n" + "</table>", TableTestUtils. getHtml ( this. tableVerifier, "table" ) )
assertEquals ( fileFixture. getColumnInformationContent ( ), columnInformation. getContent ( ) )
assertTrue ( page. getContent ( ). contains ( "ENABLED_FOR_CK = true" ) )
assertEquals ( 2, graph. countVertices ( "V" ) )
assertMockEndpointsSatisfied ( )
Assert. assertTrue ( permissions. toString ( ), permissions. isEmpty ( ) )
assertEquals ( "dois nonilh玫es de inteiros", actual )
assertProductHasCode ( result, product )
assertThat ( result. getExperimentStatistics ( ), equalTo ( experimentCounts ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( 1, result )
assertEquals ( null, maybeName. orElse ( null ) )
assertThat ( page. hasError ( ), is ( false ) )
assertTrue ( exitCallHook. exitCalled )
assertTrue ( list. isEmpty ( ) )
assertNotNull ( result )
assertEquals ( 1, getStartBatchCount ( ) )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
assertTrue ( result instanceof V8Function )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"transfer\\":{\\"to\\":\\"tel:+14157044517\\"}}]}" )
assertFalse ( Files. exists ( source ) )
assertNotNull ( result )
Assert. assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-managed:2.2.0.Final", adapter. dependencies ( ) [ 0 ] )
Assert. assertTrue ( ad. parse ( ) )
Assert. assertEquals ( "distributedTransactionTimeout=42", getReplHeader ( ) )
assertThat ( webbitException, is ( nullValue ( ) ) )
assertEquals ( "(SOURCEFIELD1 =='sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD1 =='sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD2 == 'enrichValue2')", transformed )
assertEquals ( maxTries, failedAt )
iterables. assertIsSubsetOf ( someInfo ( ), actual, newArrayList ( ) )
assertFalse ( blobStore. delete ( tileRange ) )
assertTrue ( "Timezone offset was not parsed correctly", offsetMillis > 0 )
assertEquals ( true, classUnderTest. isSelected ( ) )
Assert. assertFalse ( "did not pass filter when no last good path", testControlBlock. filter ( "" ) )
assertEquals ( 1, tree. calculateDepth ( ) )
assertEquals ( afterAesEncrypt2, pc. encrypt ( randomStr, replyMsg2 ) )
assertEquals ( content, e. getContent ( ) )
assertTrue ( responseBody. contains ( "Created" ) )
Assert. assertTrue ( expect ( o, false ) )
assertResourceContains ( "modelregistry/static/script.js" )
assertEquals ( expected, result )
assertCorrectList ( )
assertPaintingResult ( objects )
assertEquals ( ( short ) 0xffff, result )
assertArrayEquals ( "The view paths array is incorrect", new String [ ] { "tools", "test" }, scm. getViewPaths ( ) )
assertEquals ( id, act. getId ( ) )
assertEquals ( "x=(b a)\\n", found )
assertTrue ( result. getErrorMessage ( ), result. isSucceeded ( ) )
assertThat ( m1. equals ( m2 ), is ( false ) )
assertNotNull ( rh )
softly. assertThat ( skipInstallationChecker )
Assert. assertTrue ( "Out of bounds (" + result [ 0 ] + " > " + sigma [ 0 ] + ")", result [ 0 ] <= 2.0 )
assertEquals ( resources, parser. derToIpAddressBlocks ( Asn1Util. decode ( RFC3779_APPENDIX_B_EXAMPLE_1 ) ) )
testHelper. assertProcessEnded ( testHelper. snapshotBeforeMigration. getProcessInstanceId ( ) )
Assert. fail ( "2: Superclass must be a class" )
Assert. assertEquals ( expResult, result )
assertNull ( mostRecentId )
assertThat ( values, contains ( patientId. getValue ( ), encId. getValue ( ), conditionId. getValue ( ), epId. getValue ( ) ) )
assertEquals ( "Patch with sparql update did not allow non SMT types.", CONFLICT. getStatusCode ( ), getStatus ( patchReq ) )
assertTrue ( store. evictable ( APPLICATION_ID_1 ) )
assertEquals ( "This is a test", sb. toString ( ) )
assertGroups ( ldapUserGroupCallback, true, true, true, true )
Assert. assertArrayEquals ( expected, MathArrays. reverse ( array ), 0 )
assertNotEquals ( column1, column2 )
Assert. assertEquals ( urlEsperada, nota. getInfoSuplementar ( ). getQrCode ( ) )
assertEquals ( expected, sorted )
assertEquals ( expected [ i ] [ y ] [ x ] [ i ], ra. get ( ). get ( ), 0 )
Assert. assertFalse ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
assertEquals ( USERNAME, principal. getName ( ) )
assertEquals ( 5, result. get ( ). intValue ( ) )
assertEquals ( 3, kSession. fireAllRules ( ) )
assertFalse ( appender. isStarted ( ) )
assertEquals ( "CFBundleVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'.", dynamicVersion, new PListAccessor ( infoPList ). getStringValue ( PListAccessor. KEY_BUNDLE_VERSION ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "OK", close )
assertThat ( c. name, is ( nullValue ( ) ) )
assertEquals ( id, sut. getId ( ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ). as ( "count" ) ). from ( tableRef ( "WindowFunctionTable" ) ), "1", "2", "3", "4", "5" )
assertTrue ( filter. matches ( operation, poolInfoMap ) )
assertFalse ( fs. deleteOnExit ( path ) )
assertTrue ( "Wrote incorrect char[] string: " + s, s. equals ( "Hello World" ) )
ValidationTestUtils. assertPatternMatches ( pattern, expected )
assertThat ( result, is ( true ) )
should. assertEquals ( 2, res. result ( ). principal ( ). getInteger ( "provider" ) )
assertEquals ( tags. get ( ), Maps. newArrayList ( "zenoss_tenant_id", "1" ) )
assertEquals ( expResult, result )
assertEquals ( name, simple. getName ( ) )
assertEquals ( 25, cap. get ( 0 ) )
assertThat ( coords, equalTo ( actualCoords ) )
assertEquals ( "http://tempuri.org", w. getWorkGroup ( ). get ( 0 ). getWorkSummary ( ). get ( 0 ). getUrl ( ). getValue ( ) )
Assert. assertEquals ( this. pi, this. ghci. pullRaw ( "my_pi" ). get ( ) )
assertEquals ( 0, result. size ( ) )
assertEquals ( 200, test. val )
assertMockEndpointsSatisfied ( )
assertThat ( newValues, hasSize ( 0 ) )
assertEquals ( MLContextUtil. BUILD_TIME_NOT_AVAILABLE, buildTime )
assertEquals ( "select * from `user` " + "order by id asc limit? rows fetch next? rows only", query. toString ( ) )
assertThat ( new SelectBest ( ). selectSolution ( Arrays. asList ( sol1, sol2 ) ), is ( sol1 ) )
assertEquals ( "12345;as=thrift", new TomlWriter ( ). write ( carrier ) )
assertEquals ( expected, actual )
assertEquals ( 1, comparator. compare ( null, solution2 ) )
Assert. assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CPlose%2F%3E", elem. toUrl ( ) )
assertNotNull ( post )
assertEquals ( "Should have 2 additional records now", 2, finalNumberOfRecords - initialNumberOfRecords )
assertEquals ( goldenResponse, responseObserver. firstValue ( ). get ( ) )
assertNotNull ( testObj. getPanel ( ) )
Assert. assertEquals ( "ORU_R01 must be an ORU error", error. getCode ( ) )
assertEquals ( 1, branch_conditions. size ( ) )
assertEquals ( actual, new JSONObject ( "{\\"title\\":\\"my title\\",\\"description\\":\\"my description\\",\\"id\\":\\"my/id\\"}" ) )
assertEquals ( 2d * Math. cos ( Math. E ), e. evaluate ( ), 0d )
assertEquals ( "myTestId", history. getId ( ). getIdPart ( ) )
assertArrayEquals ( refar, d. getResult ( ) )
this. assertLoadBlob ( departments, false, true )
assertEquals ( 8, metrics. size ( ) )
assertThat ( result, is ( true ) )
assertNotNull ( "Must not have updated the dummy node", dummyNode. getLastUpdateNode ( ) )
assertEquals ( count1 + 1, count2 )
assertTrue ( "Choke Rate is less than expected: " + maxRate + " actual: " + actualRate, actualRate < maxRate )
assertEquals ( "padRight() To 10", Text. valueOf ( "******Test" ), _text )
assertTrue ( doc. getStatementGroups ( ). isEmpty ( ) )
assertTrue ( "Can't find statement", m. contains ( expectedStatement ( APP_BASE ) ) )
assertProcessInstanceCompleted ( instance )
assertFalse ( selectedFile. exists ( ) )
assertEquals ( NO_CONTENT. getStatusCode ( ), getStatus ( put ) )
assertThat ( resultCommand, is ( expectedCommand ) )
assertEquals ( 1305, result )
assertTrue ( resp. isSuccess ( ) )
MockInterceptor. assertContent ( new String [ ] { "Mock1", "Mock2", "Mock3" }, new String [ ] { "Mock4", "Mock5", "Mock6", "Mock7" } )
assertFalse ( connectorConfig. isS3StorageURL ( ) )
assertThat ( tester. getMessages ( FeedbackMessage. ERROR ). size ( ), is ( 1 ) )
assertEquals ( "Expected another type of analyzer", KeywordAnalyzer. class, analyzer. getClass ( ) )
Assert. assertEquals ( "T AND (ID =?)", last. toString ( ) )
assertAnnotations ( 2, Quantity. class, new TestQuantity ( 0, "2 cubic metres", 2, "cubic", 0.000002, "m^2", "area" ), new TestQuantity ( 1, "2 cubic metres", 2, "cubic", 0.000002, "m^2", "area" ) )
assertEquals ( dt. toLocalTime ( ), t )
assertFalse ( "other capability should not be equal", otherCapabilityFqans [ 0 ]. equals ( otherCapabilityFqans [ 1 ] ) )
assertEqualsWithoutWhiteSpaces ( "", union )
assertEquals ( "hello", result )
assertTrue ( subject. contains ( "first" ) )
Assert. assertTrue ( logLatch. await ( 5, TimeUnit. MINUTES ) )
assertThat ( result, equalTo ( true ) )
out. assertIsSatisfied ( )
assertSame ( t, TEST_2007_07_15 )
assertEquals ( BigDecimal. TEN, dto. getQty ( ) )
assertArrayEquals ( new double [ ] { 1, 2, 3, 4 }, sparseView. sparseInfoDataBuffer ( ). asDoubleArray ( ) )
assertTrue ( "Token realm should be created", ops. exists ( TEST_TOKEN_REALM_ADDRESS ) )
assertEquals ( "activity", process. getExpressionLanguage ( ) )
assertNull ( placeHolder. getParentClass ( ) )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"message\\":{\\"say\\":[{\\"value\\":\\"This is an announcement\\"}],\\"to\\":\\"+13055551212\\",\\"from\\":\\"3055551000\\",\\"voice\\":\\"KATE\\",\\"timeout\\":10.0,\\"answerOnMedia\\":false}}]}" )
assertThat ( supers, contains ( superProperty ) )
Assert. assertEquals ( "metadata should be merged", testFM. fileMetaDataMock, testFM. underTest. getFileMetaData ( ) )
assertEquals ( 400, response. getStatus ( ) )
SerializableObjects. assertEquals ( bar, parsedBar )
assertEquals ( expected, e. evaluate ( ), 0.0 )
Assert. assertEquals ( "Result is not last evaluated expression", "World", o )
assertEquals ( "pong!", reply. body ( ). getString ( "address" ) )
assertEquals ( 32, program. getMemSize ( ) )
assertTrue ( "Did not sleep for 100ms, took " + duration + "ms", duration < 100 )
assertThat ( exists, is ( false ) )
Assert. assertTrue ( queryResult. getTotalRecords ( ) >= 1 )
assertEquals ( MediaType. APPLICATION_XML_TYPE, response. getType ( ) )
Assert. assertEquals ( 3, ( int ) sync ( list. get ( 0 ) ) )
assertEquals ( 0, results. length )
Assert. assertTrue ( id > 0 )
assertTrue ( gStore. getDefaultGraph ( ). isEmpty ( ) )
assertThat ( scriptContent, is ( "Selective Annotation" ) )
assertEquals ( 1, result )
assertTrue ( true )
assertEquals ( "Message not found", "Please enter a value", driver. findElement ( By. cssSelector ( ".error" ) ). getText ( ) )
assertTrue ( passed [ 0 ], passed [ 0 ] == null )
assertTrue ( result. isResultOK ( ) )
assertEquals ( prefix + "hello", result )
assertNotNull ( match )
assertEquals ( "a,a,a,a,a,c", out )
assertEquals
assertThat ( candidates. size ( ), is ( 0 ) )
assertEquals ( "Caption should be selected", "Null", getTextBox ( ). getText ( ) )
assertEquals ( "Value not as expected!", Long. valueOf ( 1L ), bi. getValue ( ) )
assertEquals ( DataTypeManager. DefaultDataClasses. STRING, ( ( Expression ) query. getProjectedSymbols ( ). get ( 0 ) ). getType ( ) )
assertNull ( GerritVersionChecker. checkGerritVersion ( GerritVersionChecker. Feature. fileTrigger, testServer ) )
Assert. assertEquals ( unidadeFederativa, eventoRetorno. getOrgao ( ) )
assertObjectEquals ( "{type:'string'}", x )
assertTrue ( listener. completed )
assertEquals ( new ByteArrayInputStream ( "hello world". getBytes ( ) ), result. getBinaryStream ( ). toByteArray ( ) )
assertEquals ( 0, score ( ) )
assertTrue ( ( Boolean ) result )
Assert. assertEquals ( expected, actual, 0 )
assertEquals ( stream, streamAfterParse )
assertNotEquals ( playlist1. hashCode ( ), playlist2. hashCode ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + destPdf, sourceFolder + cmpPdf, destinationFolder ) )
assertEquals ( inputGraphHead, outputGraphHead )
assertNotNull ( testObj. getFieldDataManager ( ) )
assertContainsAllGames ( games )
assertThat ( taskService. createTaskQuery ( ). taskAssignee ( "demo" ). count ( ), is ( 1L ) )
Assert. assertEquals ( displayNameExpected, displayNameActual )
assertTrue ( matchResult )
assertFalse ( satisfiesPrecondition ( cu ) )
assertEquals ( expResult, result, 0.001F )
Assert. assertEquals ( "Wrong key created", comparationKey, createdKey )
assertEquals ( new org. apache. http. client. utils. URIBuilder ( SERVICE_ROOT + "/$metadata" ). addParameter ( "$metadata", "true" ). build ( ), uri )
assertFalse ( resultMessage ( res, PUT ), res. passedValidation ( ) )
assertEquals ( dataset, expectedDataset )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Say>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Say>", elem. toXml ( ) )
assertNotSame ( targetEnv, testConfig. newEnvironment ( "targetRepo" ) )
assertEquals ( "junit", sprites. get ( "junit" ). get ( 0 ) )
assertTrue ( "The entityGroup should be present in online entityGroups list.", fs. getOnlineEntityGroups ( ). contains ( eg ) )
assertTrue ( wkt, wkt. contains ( "OGC:def:crs:epsg::4326" ) )
Assert. assertEquals ( d, voidable. getDateVoided ( ) )
assertEquals ( str, decrypted )
Assert. assertEquals ( "0", result. getReturnCode ( ) )
Assert. assertTrue ( lostWorkersInfo. isEmpty ( ) )
assertThat ( testInstance. getMyInjection ( ), nullValue ( ) )
assertTrue ( s1. containsNetwork ( this ) )
assertCloseTo ( "Scroll position should be 0", newRowLocation, rowLocation0 )
assertEquals ( 0, v. count )
runner. assertAllFlowFilesTransferred ( PublishKafka_0_11. REL_FAILURE, 3 )
assertEquals ( "3.141592653589793", method. invoke ( normalizer, literal, false ) )
Assert. assertEquals ( "�驻�� 40 �拽�转", prettyTime. formatUnrounded ( prettyTime. calculatePreciseDuration ( new Date ( new Date ( ). getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( reservation )
assertThat ( result. fullName ( ), is ( "double" ) )
assertEquals ( "[s,e,c]", s. getContext ( ). toString ( ) )
Assert. assertEquals ( ExchangePhase. OUT, exchange. getPhase ( ) )
assertThat ( PrettyTime. of ( Locale. US ). print ( duration, TextWidth. WIDE ), is ( "1 year and 1 day" ) )
assertThat ( isEquals, is ( true ) )
assertTrue ( p1. implies ( p2 ) )
Assert. assertEquals ( CORSFilter. CORSRequestType. INVALID_CORS, requestType )
assertTrue ( reportData. size ( ) > 0 )
assertEqualsWithoutWhiteSpaces ( "translate([10,20,30]) rotate([10,20,30]) (empty)", moved )
assertEquals ( 1, postIds. size ( ) )
Assert. assertTrue ( isFile ( fc, f ) )
assertIpAddress ( )
Assert. assertEquals ( schema. getSubsequentVersionField ( ), "version_number" )
assertEquals ( expResult, result )
assertTrue ( icheck. getFaults ( ). length > 0 )
assertEquals ( "Invalid body tag", "Envelope", reader. getName ( ) )
assertArrayEquals ( ARRAY2, syncMemcache. get ( KEY1 ) )
assertEquals ( expResult, result )
Assert. assertEquals ( patientPrograms. size ( ), Util. getResultsSize ( result ) )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertFalse ( "CompareTo is not Comparable", cmpTo. compareTo ( 5 ) == 0 )
assertTrue ( value. contains ( "cas" ) )
assertEquals ( expected, actual )
assertEquals ( s, s1 )
assertEquals ( "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country3-a>", val )
assertEquals ( 0.5, density,.001 )
assertTrue ( Futures. getUnchecked ( collector ) )
assertEquals ( mod, modSer )
assertEquals ( expected, modelWriter. toString ( ) )
Assert. assertThat ( reader. readLine ( ), is ( "Hello World" ) )
assertHasMethod ( model, "com.artemis.E proofGen(java.lang.Object p0)" )
assertTrue ( connectFuture. isConnected ( ) )
Assert. assertEquals ( jscs. size ( ), 2 )
assertEquals ( wrapWithMarkdownClassDiv ( "<p>This is deleted  text</p>\\n" ), result. message ( ). get ( 0 ). getData ( ) )
assertEquals ( "Platform for server not found", testPlatform. getName ( ), pValue. getName ( ) )
assertFalse ( object. containsKey ( "level" ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 09" ) )
Assert. assertEquals ( 1, notifyOfConceptChange ( 1 ) )
assertThat ( result. statusCode, is ( Response. OK ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10", sql )
assertResultsEqual ( net, 3.0, 0.0 )
assertTrue ( "admin should not exist", u. getAdmins ( ). isEmpty ( ) )
assertThat ( content, is ( equalTo ( "a" ) ) )
assertThat ( testObject. findConc ( " 'May' 'Bob' ", nums ), Matchers. is ( "May 'Bob' " ) )
assertTrue ( page. getBody ( ). asText ( ). indexOf ( "Hello World" )!= - 1 )
assertTrue ( this. requirejsManagerInitIsCalled ( response, null ) )
assertThat ( duration. isNegative ( ), equalTo ( true ) )
assertNotNull ( todo )
Assert. assertEquals ( aString, sut. getName ( ) )
Assert. assertEquals ( msg, msgAndResponse )
assertDurationEquals ( d, t1. minus ( t2 ) )
assertEquals ( "en-US", h. getLanguage ( ) )
assertEquals ( "{\\"error\\":{\\"a\\":\\"b\\",\\"msg\\":\\"c\\"}}", s )
assertThat ( configuration. isPresent ( ), is ( false ) )
assertNotNull ( diagnosis. getId ( ) )
assertEquals ( list, result )
Assert. assertThat ( vm. getStack ( ). size ( ), is ( 2 ) )
assertEquals ( 0, connectionFactory. getConnectionMap ( ). size ( ) )
assertNotNull ( HostedNumberOrder. fetcher ( "HRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
Assert. assertEquals ( HttpServletResponse. SC_OK, response. getStatus ( ) )
assertTrue ( twoBackoffIntervalsMs < ( endTimeMs - startTimeMs ) )
assertEquals ( 0, components. get ( 0 ). getComponentIndex ( ). intValue ( ) )
assertThat ( node. getEntities ( ), is ( Collections. singleton ( owlBottomClass ) ) )
assertYaml ( "", Samples. PROJECT_STRATEGY_ROLESMAPPING_UNIQUE_KIBANA_MODE. getContent ( ), rolesMapping )
assertThat ( slider. getValue ( ), is ( 5.0 ) )
assertDecimalEquals ( highestValue. getValue ( 12 ), "1" )
assertEquals ( "Expected another type of analyzer", SimpleAnalyzer. class, analyzer. getClass ( ) )
assertThat ( handledResponse, is ( equalTo ( response ) ) )
assertEquals ( expectedSqlForMathOperations15 ( ), result )
assertEquals ( mockQuery, queryPlan. getQuery ( ) )
assertEquals ( Result. PASS, nogroup. apply ( item ) )
assertEquals ( 20000L, testLong )
assertRows ( filePath, 6, TEST_COLUMNS )
assertEquals ( "Wrong attribute value", ATTR_VALUE, node2. getAttributes ( ). get ( "attr" ) )
Assert. assertEquals ( "1 futureday ago", p. format ( new Date ( 1000 * 60 * 60 * 24 * 365 * 1000 * 1 ) ) )
assertEquals ( "OK", reply )
assertResponseContainsModel ( "<div class=\\"componentStatus\\">nt:unstructured</div>", Model. class, 123L, "modelName" )
assertEquals ( "Expected 2 results!", 2, n )
assertNull ( inprogressNodePath )
assertEquals ( BRIGHT_RED, style )
arrays. assertContainsOnly ( description, actual, emptyArray ( ) )
assertEquals ( "simple test", entries. get ( 0 ). getMessage ( ) )
assertEquals ( Collections. singletonList ( "A" ), descendants )
Assert. assertEquals ( "MD5 mismatch", expectedDigest, sb. toString ( ) )
assertEquals ( jsonFromObject, jsonFromString )
assertEquals ( expResult, result )
Assert. assertEquals ( identificador, protocoloInfo. getIdentificador ( ) )
assertNull ( f. evaluate ( ) )
assertIsCommitted ( tx )
assertEquals ( expected, service. getUser ( ) )
assertResult ( metrics )
assertEquals ( "yes", html )
assertEquals ( expected, bsos. toBitString ( ) )
assertEquals ( 17, instance. evaluations )
assertEquals ( expected, uri. toString ( ) )
assertThat ( filter. include ( artifact ), is ( false ) )
assertEquals ( "{\\"field\\": \\"column\\", \\"joinName\\": \\"name\\", \\"order\\": [\\"column\\", \\"name\\", \\"direction\\", \\"asc\\" ]}", options. toString ( ) )
assertThat ( confirmation. getStatus ( ), equalTo ( clearCacheStatus ) )
assertFalse ( "Result should be false for public method.", result )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( InterpreterResult. Code. SUCCESS, spyInterpretJob. getResult ( ). getCode ( ) )
assertTrue ( page. asText ( ). contains ( "MESSAGE 1" ) )
assertTrue ( GenomeWarpTestUtils. equivalentRanges ( query, actual ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
Assert. assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 2</th>\\n" + "</tr>\\n" + "<tr>\\n" + "<td class=\\"pass\\">A1</td>\\n" + "<td class=\\"pass\\">A2</td>\\n" + "</tr>\\n" + "</table>", TableTestUtils. getHtml ( this. tableVerifier, "table" ) )
assertEquals ( data, baos. toString ( StandardCharsets. UTF_8 ) )
assertEquals ( "{\\n" + "  'player2':{\\n" + "    'board':'some_board2',\\n" + "    'boardSize':13,\\n" + "    'gameName':'game',\\n" + "    'heroesData':{\\n" + "      'coordinates':'coordinates1',\\n" + "      'group':[\\n" + "        'player2'\\n" + "      ]\\n" + "    },\\n" + "    'info':'some_info2',\\n" + "   'score':546,\\n" + "   'scores':{\\n" + "      'player2':300\\n" + "    },\\n" + "   'score':546,\\n" + "    'gameName':'game',\\n" + "    'heroesData':{\\n" + "      'coordinates':'coordinates1',\\n" + "      'player2':300\\n" + "    }\\n" + "  },\\n" + "  'player
Assert. assertTrue ( strategy. shouldRetry ( null, null, 0, null ) )
assertTrue ( it. next ( ). asText ( ). contains ( "Not Found" ) )
assertThat ( target. parse ( ), is ( true ) )
assertThat ( new CodePrinter. Builder ( statement ). setCompilerOptions ( options ). build ( ), equalTo ( "_$jscoverage['test.js'].branchData['4'][2].init(12,15)" ) )
Assert. assertEquals ( "Jack", lambda. getString ( ) )
assertEquals ( expected, actual )
assertEquals ( 2, i )
Assert. assertNotNull ( t )
assertEquals ( "Invalid number of arguments", 1, new ClassArrayValidator ( ). validateArgTypes ( argTypes ). size ( ) )
assertEquals ( "200", sc. getCode ( ) )
assertEquals ( entry, result )
assertTrue ( ok )
assertEquals ( "zero", actual )
assertEquals ( 10, ( int ) version )
assertEquals ( 0, classpath. findClasses ( ). size ( ) )
assertEquals ( new AffineTransform ( 1, 3, 2, 10, 20 ), g2. getTransform ( ) )
Assert. assertTrue ( cubes. size ( ) <= 1000 )
assertNull ( "unexpected response for command " + cmd, response )
assertResponse ( outputStream, expected )
Assert. assertEquals ( SPECIFICATION, shape. decompress ( ). build ( ). getSpecification ( ) )
assertThat ( t, is ( u ) )
Assert. assertEquals ( expected, testIndex. findConc ( " 'jumps|jumps' " ) )
assertFalse ( oracle. isDependencyAllowed ( "foo" ) )
assertNotNull ( result )
assertEquals ( originalService, event. getServiceForData ( ) )
PSLTest. assertRule ( rule, "|A| * SINGLECLOSED(+A) + |B| * SINGLECLOSED(+B) = 1.0." )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) < 'literal'" ) )
assertThat ( new SearchArgumentFilter ( searchArgument, structTypeInfo ). accept ( corc ), is ( false ) )
assertUrlsEqual ( expected, url )
Assert. assertEquals ( expected, testIndex. findConc ( " 'May' 'the' " ) )
assertSqlCanBeParsedAndDeparsed ( statement )
assertTrue ( "Differences: " + differences + "/" + rounds, differences > rounds * 0.9 && differences <= rounds )
assertTrue ( "ShortTitle empty", constraintViolations. size ( ) == 1 )
Assert. fail ( "Expected to fail, but didn't" )
assertEquals ( EdmServiceMetadata. version. toString ( ), serviceMetadata. getServiceVersion ( ). toString ( ) )
assertSame ( test1, test2 )
assertEquals ( asList ( foo4, foo5 ), results )
assertEquals ( null, deltaDays )
assertEquals ( "[(AppNode:foo --name=value:0>11)]", ast. stringify ( true ) )
assertThat ( testDescription. getName ( ), is ( "MyTestingClass.should_do_this" ) )
assertThat ( envelope. getValue ( ). getMessage ( ), is ( "test" ) )
assertEquals ( "operator", operator. getValue ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 04" ) )
assertThat ( locationManager. getTableLocation ( ), is ( new Path ( TABLE_BASE_PATH + "/partition" ) ) )
assertEquals ( exValues, possibleValues )
Assert. assertEquals ( String. format ( "a %s text", this. html ( bb, "http://something", "url description" ) ), formatter. format ( "a [url='http://something]url description[/url] text", defaultOptions ( ) ) )
Assert. assertEquals ( expected, result )
assertThat ( target, is ( instanceOf ( OFPFlowActionPopPbbQuery. class ) ) )
assertEquals ( val, results. getTimestamp ( colN ) )
assertEquals ( 2, tasks. size ( ) )
Assert. assertTrue ( nullObserver. get ( ) )
Assert. assertTrue ( response. contains ( "not found" ) )
assertEquals ( 1, stream. counter )
Assert. assertArrayEquals ( data, dataActual )
assertEquals ( Arrays. asList ( objectFactory ), everrestApplication. getFactories ( ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertEquals ( expectedScriptNode, actualScriptNode )
Assert. assertSame ( configuration, victim. getConfiguration ( ) )
assertEquals ( mockReader. toString ( ), content )
assertEquals ( expResult, result )
Assert. fail ( "Expecting an UnknownReferenceException" )
assertEquals ( "{X}", URITemplates. getUriTemplateString ( f1 ) )
assertArrayEquals ( new int [ ] { 0, 0, 1 }, closed )
assertWorldIsSatisfied ( )
assertTrue ( ScriptTestUtil. scriptIsInstanceOfScript ( testScript, expectedScript ) )
assertNotNull ( resolved )
assertEquals ( 0, sqlMetadataQueryExec. driverClassesToForceMeta. size ( ) )
Assert. assertEquals ( dbvEnum. size ( ), xaEnumUtil. enumList. size ( ) )
Assert. assertEquals ( ImportConfirmAction. SUCCESS_VIEW, action. execute ( ) )
assertTrue ( page. asXml ( ). contains ( "foo:bar" ) )
org. junit. Assert. assertEquals ( expected, tHandler. getLastRecord ( ). getThrown ( ) )
assertNotNull ( caught )
Assert. assertEquals ( "Shadow Button 1", button. getText ( ) )
assertEquals ( expecteds, actuals )
assertEquals ( 2, getHistoryLength ( ) )
assertEquals ( "dest_name1", conf. getDestinationName ( ) )
assertEquals ( 2, x )
assertTrue ( m. nextInt ( 4 ) < 4 )
assertTrue ( "Expected the report to be generated.", report. exists ( ) )
assertNotNull ( foo. tList )
assertEquals ( "Option value should contain a '=' sign", "80", commandLine. getOption ( "simpleOption" ) )
Assert. assertEquals ( 1, count )
assertAllTargetsCount ( 0 )
assertTrue ( resultComparator. compare ( fd1, fd2 ) > 0 )
assertThat ( sut. isMatch ( real, expected ), is ( false ) )
Assert. assertEquals ( expectedGeoJson, geoJson )
assertShapeCoordinates ( boundaryEventBounds, 218, 140 )
assertEquals ( "tz: " + tz. getDisplayName ( ) + " locale: " + locale, expected, actual )
assertNotNull ( "Request instance is null", request )
assertEquals ( "street1 + city1", me. getLikes ( ) )
assertValidQuery ( query )
assertEquals ( url, RestService. getRemoteEndpoint ( url, params ) )
assertTrue ( result )
assertNotNull ( binding )
assertThat ( formattedValue, is ( "A big story (<a target=\\"_blank\\" href=\\"http://my.issue.tracker/MYPROJECT/browse/MYPROJECT-123\\">#MYPROJECT-123</a>,<a target=\\"_blank\\" href=\\"http://my.issue.tracker/MYPROJECT/browse/MYPROJECT-456\\">#MYPROJECT-456</a>)" ) )
assertFalse ( result. getMap ( ). getGlyph ( ). isEmpty ( ) )
assertEquals ( expectedLineItem, actualLineItem )
assertTrue ( statisticManager. findTaskRunningStatisticsWeekly ( ). isEmpty ( ) )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.B = function() {\\n  org.apache.royale.B.base(this, 'constructor');\\n};\\ngoog.inherits(org.apache.royale.B, custom.TestOtherInterface);\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.B', org.apache.royale.B);" )
assertEquals ( 1, response. size ( ) )
assertEquals ( "org.junit.Assert", c. resolveType ( "org.junit.Assert" ) )
assertThat ( map. size ( ), is ( 0 ) )
assertEquals ( "messages", Arrays. asList ( "starting", "starting", "stop", "messages" ), guicer. alerts ( ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE (nodes.col1 IS NOT NULL " + "AND (nodes.col2 IS NOT NULL " + "AND nodes.col3 IS NOT NULL))" ) )
assertEquals ( new BigDecimal ( "9.0" ), ticket. getDiscountPrice ( ) )
assertThat ( localTime. toString ( ), is ( "2015-06-18T23:07:30" ) )
assertThat ( driver. findJobStatusTraceEvents ( "test-job" ). size ( ), is ( 1 ) )
assertEquals ( ref, item )
Assert. assertEquals ( profile. getId ( ), 1 )
Assert. assertTrue ( "Listener was not called", listenerAdded. get ( ) )
assertEquals ( true, clusterBarrierManager. manageAckBarrier ( barrierPath, nodesExpected ) )
assertEquals ( Double. valueOf ( "1.5" ), result. getValue ( ) )
assertEquals ( columnInfoList, fromConfig )
assertThat ( found, is ( equalTo ( method ) ) )
assertEquals ( "name", paramConfigProxy. toString ( ) )
assertEquals ( "1", counter. toString ( ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) = 'literal'" ) )
assertThat ( classUnderTest. read ( ), is ( equalTo ( "/x/WEB-INF/classes/" ) ) )
assertEquals ( test, npLoad )
assertEquals ( 5, count )
assertThat ( tableMetas, is ( Collections. singletonList ( tableMeta ) ) )
Assert. assertEquals ( "1\\n2\\n3\\n", eval ( sb. toString ( ) ) )
assertEquals ( "", result )
assertEquals ( expected, actual )
assertThat ( jsonOutputStreamParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testEnvironment.json" ) ) )
assertSingleElementCollection ( regionClientId, executeIds )
assertEquals ( Quaternionf. IDENTITY, readQuaternion ( buf ) )
assertNotEmptyAndClear ( output )
assertEquals ( "payload" + i, result )
assertEquals ( "The value of the pruning snapshot delay in the config is incorrect", 10000, iotaConfig. getLocalSNAPSHOTS_PRUNING_DELAY ( ) )
assertNotNull ( processInstanceId )
assertTrue ( slice. events. isEmpty ( ) )
assertEquals ( "Wrong result", result, BindingResult. BindingResultType. INVALID )
assertEquals ( witnessList, partList )
Assert. assertEquals ( "StringColumns:\\n" + "InputColumn:\\n" + "OutputRow:\\n" + "InputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\n" + "OutputRow:\\
assertNumEquals ( 2, getCriterion ( ). calculate ( series, tradingRecord ) )
assertEquals ( 1.0, errorRatio. evaluate ( FrontUtils. convertFrontToSolutionList ( frontApproximation ) ), EPSILON )
assertThat ( options. toJSON ( ), is ( ( JsonElement ) json ) )
listener. assertTestFailedWith ( AssertionError. class )
Assert. assertEquals ( newValue, readValue, 0.001f )
assertEquals ( "activity", process. getTargetNamespace ( ) )
assertEquals ( expected, mapper. valueToTree ( resource ) )
assertThat ( content, is ( nullValue ( ) ) )
runner. assertValid ( )
assertEquals ( expResult, result )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( 1, violations. size ( ) )
Assert. assertTrue ( portA < portB )
assertEquals ( "{\\"f1\\":\\"J\\",\\"f2\\":100,\\"f3\\":true}", s. serialize ( a ) )
assertThat ( output, CoreMatchers. containsString ( "Successfully wrote 2 rows" ) )
assertEquals ( body. toString ( ), "123" )
Assert. assertTrue ( asyncResult ( ). succeeded ( ) )
assertEquals ( 250, map. getf ( 190, 210 ) )
assertEquals ( "Set of bytes not matching any bitmask " + bitmask, expected, result )
MatrixTestAbstract. assertMatrixEquals ( eI, c )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='AMOUNT' value='1000'>\\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/callback'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CURRENCY' value='USD'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/callback'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result'>\\n
assertDateEquals ( r, t. plus ( d ) )
assertEquals ( String. class. getName ( ), propertyType. getName ( ) )
Assert. assertFalse ( reuseStrategy. keepAlive ( null, response, context ) )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertThat ( candidateSteps. size ( ), Matchers. equalTo ( 0 ) )
Assert. assertEquals ( icmsSetado, icms. getIcms90 ( ) )
Assert. assertEquals ( expected, actual )
assertThat ( h. toSmiles ( ), is ( "CCC" ) )
assertThat ( ChronoHistory. from ( history. getVariant ( ) ), is ( history ) )
assertEquals ( "(| (& [* fo.*] [*.*oo]) [= bar])", m. toString ( ) )
assertThat ( TimestampInterval. parseISO ( "P4DT1H45M/2012-096T16:00" ), is ( expected ) )
mockOutput. assertIsSatisfied ( )
assertNull ( resolvedMatrixParameter )
assertEquals ( expectedDocument, document )
assertSearch ( tmid, "xtm" )
assertEquals ( 1, result )
assertTrue ( result. isEmpty ( ) )
assertEquals ( flag, result )
container. assertObservation ( )
assertEquals ( Integer. valueOf ( 2 ), transform. evaluate ( new HashMap < > ( ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "colorTest03.pdf", sourceFolder + "cmp_colorTest03.pdf", destinationFolder, "diff_" ) )
assertEquals ( "a0bc", nodeToStringTransformer. transform ( ) )
Assert. assertEquals ( DefaultJobPriorityProvider. DEFAULT_PRIORITY, job. getPriority ( ) )
assertArrayEquals ( longKeyAlt. getBytes ( ), password. getEncodedPassword ( ) )
assertThat ( parser. parsePath ( identifier ), is ( identifier ) )
assertVideos ( videos )
Assert. assertTrue ( exclusion1. hashCode ( ) == exclusion2. hashCode ( ) )
assertThat ( int_gt_1. description ( ), is ( "a value greater than <1>" ) )
assertEquals ( expected, emptyGraph. getSuccessors ( ) )
assertRequest ( "POST", "Call/%s/Speak/", callId )
assertEquals ( expected, actualQuery )
assertEquals ( DecodeQualification. UNABLE, plugIn. getDecodeQualification ( path ) )
assertEquals ( "V1 Title", wrapper. getTitle ( ) )
assertTrue ( cvs. size ( ) > 0 )
assertEquals ( "Auditor re-election is not performed for auditor crashes", auditor, newAuditor2 )
assertThat ( actual. size ( ), is ( 0 ) )
assertEquals ( argumentCaptor. getValue ( ). getExposedPorts ( ), expectedExposedPorts )
assertNotNull ( getStdOut ( ) )
Assert. assertEquals ( assinatura, eventoManifestacaoDestinatario. getAssinatura ( ) )
assertEquals ( service1, service2 )
TestUtil. assertSuccess ( result )
assertThat ( result, is ( "LowerNwNodeId" ) )
assertEquals ( expected, actual )
assertEqualsIgnoreWhitespace ( expected, real )
assertNotNull ( result )
assertThat ( event. getExtra ( ). get ( key ), equalTo ( expectedValue ) )
Assert. assertEquals ( "Decode brackets not correct", out, WebUtilities. doubleDecodeBrackets ( in ) )
assertEquals ( "<foo>world</foo>", engine. compileMustache ( "embed_custom_source", "{{foo}}" ). render ( ImmutableMap. of ( "template", "{{foo}}" ) ) )
assertNotNull ( Session. reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( "Wrong type", Type. create ( q [ 0 ] ), Type. create ( q [ 1 ] ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( filename, sourceFolder + "cmp_copyLargeFile.pdf", destinationFolder, "diff_" ) )
assertEquals ( 0, result. size ( ) )
assertTrue ( mapCell. equals ( other ) )
assertEquals ( c1, c2 )
assertThat ( returnedMode, is ( AvroMode. SPECIFIC ) )
assertEquals ( org, sub. substitute ( "value$${escaped}" ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
assertTrue ( page. isPluginInBrowser ( "breakjs" ) )
assertEquals ( NOWHERE, dest. getAddress ( ) )
assertEquals ( "1", r )
assertEquals ( hash, new String ( Hex. encodeHexString ( s ), "US-ASCII" ) )
assertEquals ( Collections. singletonList ( 9L ), result )
assertEquals ( change. getChangeData ( ), data )
assertEquals ( expected, errorChecker. getErrorList ( id ) )
assertThat ( c. toString ( ), is ( "myString >= aaa" ) )
assertTrue ( worker. getTime ( ) > 0 )
assertEquals ( 2, cc. getValue ( ) )
assertEquals ( Node. NULL, n )
assertEquals ( 1, value. getValue ( ) )
assertThat ( resultFilters. isEmpty ( ), is ( true ) )
assertSizes ( validator, double [ ]. class )
assertTrue ( "Model is not an RdfGraph", parsed. isIsomorphicWith ( createRdfGraph ( ) ) )
assertThat ( actual, is ( equalTo ( n ) ) )
assertEquals ( 1, stat. getDev ( ) )
assertThat ( e. getMessage ( ), equalTo ( "Rejecting unexpected invocation of constructor: private Subclass(java.lang.Object)" ) )
assertEquals ( Color. blue. getRGB ( ), thumbnail. getRGB ( 49, 99 ) )
assertFalse ( lhs. equals ( rhs ) )
assertSame ( expectedResp, FutureUtils. result ( rrStore. getNamespace ( expectedReq ) ) )
assertThat ( result, is ( true ) )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertEquals ( Collections. singletonList ( value. build ( ) ), myTestInstance. groupByAsync ( builder ). get ( ). toList ( ) )
Assert. assertEquals ( Character. valueOf ( 'F' ), node. getIncomingEdgeFirstCharacter ( ) )
assertOut ( "visible=false" )
assertEquals ( value. hashCode ( ), doublePrecisionFloat. hashCode ( ) )
assertEquals ( ( ( Number ) results. iterator ( ). next ( ). getValue ( ) ). intValue ( ), 43 )
assertThat ( storedProcResultAsString, equalTo ( "a is my temp value" ) )
assertEquals ( getExpectedItemSize ( allStrings ), DynamoDBUtil. getItemSizeBytes ( item ) )
assertTrue ( latch. await ( 4, SECONDS ) )
Assert. assertEquals ( result, aggregator. getResult ( 0 ) )
assertEquals ( "4>5 \\r\\n 6", AviatorEvaluator. execute ( "4>5 \\r\\n 6" ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TagUtils. getTaggedCommit ( "source_tag", repo ), BranchUtils. getHeadCommit ( "test_branch", repo ) )
assertNotNull ( "PlacementChangeRequest is null", entity )
assertEquals ( date, avg )
assertNull ( ent. getId ( ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( 1, listener. updatedInjectedFilters. size ( ) )
assertEquals ( CONTENT, readAsString ( gfs. getPath ( "/test_file.txt" ) ) )
Assert. fail ( "Expected HelixException" )
assertTrue ( instance. getInterfaces ( ). isEmpty ( ) )
assertNotNull ( result )
Assert. assertNull ( "User should be deleted", MCRUserManager. getUser ( this. user. getUserName ( ), this. user. getRealm ( ) ) )
assertFalse ( kieModule instanceof CanonicalKieModule )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
Assert. assertEquals ( expResult, result )
assertTrue ( "not found setting in configuration", foundSetting )
assertNotNull ( mch. getMondrianXmlDocument ( new StringBufferInputStream ( xml ) ) )
assertNotNull ( response )
assertThat ( referenceSet. getAxiomReferences ( ), hasItem ( entity ) )
assertTrue ( connectFuture. isConnected ( ) )
mockEndpoint. assertIsSatisfied ( )
assertEquals ( "Wrenn and Six: First loyalty ability rule text is wrong", firstLoyaltyAbilityRulesText )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "No test cases were found.", 1, foundTestCases. size ( ) )
assertViewName ( mav, "redirect:/outbox" )
Assert. assertFalse ( context. getResult ( ) )
assertArrayEquals ( result, ByteArray. getAllBytes ( aggregator ) )
assertNotNull ( Country. reader ( ). read ( ) )
assertThat ( p. getNameFirstRep ( ). getFamilyFirstRep ( ). getValueAsString ( ), containsString ( "uuml 眉" ) )
assertEquals ( expected, result )
Assert. assertEquals ( "AroundConstruct_A", bean. executeOne ( ) )
Assert. assertTrue ( "Invalid result", result )
assertEquals ( "<div>foo</div>", unrender. getFirst ( ). getContent ( ) )
assertEquals ( one, result. element ( ) )
assertEquals ( "abc", sb. toString ( ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
Assert. assertNotNull ( addressResultsDto )
paths. assertHasDigest ( INFO, actual, digest, expected )
assertArrayEquals ( "Document is not the expected bytes", arrayDocument, out. toByteArray ( ) )
assertCurrentTestFileName ( currentHtmlFileName )
assertEquals ( 1, buffer. get ( ) )
assertThat ( ages, everyItem ( greaterThan ( 18 ) ) )
assertXAxisEventIsType ( X_AXES_EXTREM, 1 )
assertTrue ( onto. containsAxiom ( factory. getOWLDatatypeDatatypeAxiom ( factory. getOWLDatatypePropertyAxiom ( factory. getOWLDatatypeDatatype ( OWL2Datatype. XSD_ENUM, "de.kr.kr.k.s", "de.kr.k.s", "de.kr.k.s", "de.kr.k.s", "de" ), OWL2Datatype. XSD_ENUM, "de" ) ) )
assertThat ( manager. register ( "foo" ), is ( 123L ) )
this. assertServiceInstanceGetRequest ( serviceInstance, false, "failed" )
assertFalse ( post. getTopic ( ). getSubscribers ( ). contains ( user ) )
Assert. assertEquals ( 0.0, a. diagonalProduct ( ), Matrices. EPS )
assertEquals ( 1, countValue )
assertTrue ( closed. await ( 2, SECONDS ) )
Assert. fail ( "should have thrown SQLFeatureNotSupportedException" )
assertOut ( "var a:* = ((a + b) - (c + d)) * e" )
assertThat ( p, is ( nullValue ( ) ) )
assertEquals ( "onetwo", sb. toString ( ) )
assertNull ( testee )
assertEquals ( i, list. head ( ). get ( ) )
assertEquals ( expResult, result )
assertNotNull ( entity. getId ( ) )
Assert. assertEquals ( itemExportacaoIndireta, detalheExportacao. getExportacaoIndireta ( ) )
assertTrue ( Double. valueOf ( f ). equals ( output. get ( ) ) )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
Assert. assertTrue ( result. equals ( "10 �拽�转" ) )
assertTrue ( hasNoise )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThat ( actualExceptionCode, is ( "bus001" ) )
assertThat ( result ( ), not ( containsString ( "\\"comments\\"" ) ) )
Assert. assertTrue ( false )
assertEquals ( 8, someNotSoRandomAsciiAsList. size ( ) )
assertTrue ( stack. getDurability ( ) == potion. toDamageValue ( ) )
Assert. assertEquals ( Arrays. asList ( record5, record4, record3, record2, record1 ), listToSort )
Assert. assertEquals ( "MonitorName", monitorConfig. getName ( ) )
assertNotNull ( result )
Assert. fail ( "Was able to set properties when using sensitive parameter from within EL" )
assertTrue ( isKeyEntity )
assertThat ( s1, containsString ( str ) )
assertThat ( enabled, is ( true ) )
assertEquals ( 1, membersFiltered. getMembers ( ). size ( ) )
assertArrayEquals ( expected, actual )
assertEquals ( RESULT, result )
assertions. isNotEqualTo ( actual )
assertTrue ( lines. contains ( "SF: Hello World!" ) )
assertEquals ( expected, result )
assertEquals ( 37.5, calc. getInsertionData ( route, job, nVehicle, 0.0, null, Double. MAX_VALUE ). getInsertionCost ( ), 0.01 )
assertTrue ( detector. evaluate ( "", 10, 10 ) )
assertThat ( parse ( contents ), contains ( map ( "value", "1.0" ) ) )
assertEquals ( r1, r2 )
assertTrue ( true )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( new ParseResult ( ParseResult. Kind. ERROR, result. getErrorType ( ) ), result. getParseResult ( ) )
assertEquals ( ko1, ko2 )
assertEquals ( indexRollover1, indexRollover2 )
assertNull ( "The result should be null.", config )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), allOf ( hasEnvVar ( "item1", "value1" ), hasEnvVar ( "item2", "value2" ) ) )
assertEquals ( 591, orbitFiles. length )
assertEquals ( "FRED", name )
Assert. assertTrue ( match )
Assert. assertTrue ( "this should be a directory", isDir )
Assert. assertNotNull ( savedBook. getBookId ( ) )
Assert. assertEquals ( 0, errors. size ( ) )
assertArrayEquals ( expected, dest. toByteArray ( ) )
Assert. assertEquals ( value + 1, nextValue )
assertNull ( "Analyzer must be null", mapper. analyzer )
Assert. fail ( "RuntimeException should be thrown!" )
assertNotNull ( reporter )
assertThat ( decorator, is ( instanceOf ( ExampleBean. class ) ) )
assertEquals ( "test email", reply )
Assert. assertEquals ( 2, result. size ( ) )
assertNotNull ( proveedorFacturas. getId ( ) )
Assert. assertEquals ( 2 * FastMath. log ( 1.5 ) / ( hi - lo ), f15. getPartialDerivative ( 1 ), 0 )
assertSame ( tokenCell ( 0 ), sync. getPair ( ( TextTokenCell ) tokenCell ( 1 ) ) )
assertEquals ( keyExpected, keyBuilt )
assertEquals ( expect, strategy. write ( new FunctionData6 ( ) ) )
assertEquals ( expectedKeys, actualKeys )
assertFalse ( "syntaxChecker OID should no longer be present", schemaManager. getSyntaxCheckerRegistry ( ). contains ( OID ) )
assertParser ( twig )
assertTrue ( diff. toString ( ), diff. similar ( ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"newCategory\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3]}", result. get ( RETURN_RESULT ) )
assertEquals ( expResult, result )
assertThat ( del. getDeadline ( ), is ( - 1L ) )
assertTrue ( task. get ( ) instanceof AvroFileReader )
assertNull ( "was supposed to pass", status )
assertNull ( GeodeticDatum. ANCHOR_POINT_KEY, properties. put ( GeodeticDatum. ANCHOR_POINT_KEY, "Origin Z" ) )
assertEquals ( 1, result. size ( ) )
Assert. assertEquals ( "whole file not read back", fileLength, bytesRead )
assertThat ( builder, hasToString ( "<a class=\\"flattr-button\\" href=\\"https://flattr.com/thing/123546/a-demo-thing\\">" + "<img src=\\"http://api.flattr.com/button/flattr-badge-large.png\\"" + " width=\\"93\\" height=\\"20\\" alt=\\"Flattr this\\" border=\\"0\\" />" + "</a>" ) )
assertThat ( allowed, equalTo ( true ) )
assertTrue ( listEditor. getList ( ). isEmpty ( ) )
assertThat ( DatastoreUtil. referenceToKey ( reference ), is ( key ) )
Assert. assertEquals ( dbLoadBalancers. get ( 0 ). getStatus ( ), dbLoadBalancers1. get ( 0 ). getStatus ( ) )
Assert. assertTrue ( detailC. size ( ) == 2 )
Assert. assertEquals ( "8999", cnx. getPort ( ) )
assertEquals ( 1, idx )
assertTrue ( fetchIterationLimit > 0 )
assertArrayEquals ( data, ( short [ ] ) deserialize. readObject ( short [ ]. class ) )
assertThat ( condition. isSatisfied ( ), is ( true ) )
assertArrayEquals ( new String [ ] { "1.2.0", "1.2.0", "1.2.1", "1.2.2", "1.2.2", "1.2.3", "1.2.4", "1.2.5", "1.2.3", "1.2.4", "1.2.2", "1.2.4" }, query. getResultAttributes ( ) )
assertResultSet ( res )
assertThat ( underTest. extract ( request ), is ( nullValue ( ) ) )
assertThat ( cb. getForwardCallback ( ), sameInstance ( mockResults ) )
Assert. assertEquals ( true, a. compareTo ( b ) < 0 )
Assert. assertEquals ( "somethingmock", ret. getValue ( ) )
assertOut ( "var a:Object = Object(\\"1\\")" )
Assert. assertEquals ( expect_sql, sql )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
Assert. fail ( e. getMessage ( ) )
assertTrue ( outputs. size ( ) == 10 )
assertEquals ( 1.0, results. get ( 0 ) )
assertTrue ( true )
assertEquals ( Arrays. asList ( "mickey@disney.com" ), descriptor. getRecipients ( ) )
assertNull ( recordResultSet )
Assert. assertEquals ( forwardInfo. getForwardServers ( ), clone. getForwardServers ( ) )
assertEquals ( "fileName-" + TIMESTAMP + ".js", result )
assertEquals ( "first", service. getProperties ( "result" ). iterator ( ). next ( ). getValue ( ) )
assertEquals ( Status. NO_CONTENT. getStatusCode ( ), updated. getStatus ( ) )
Assert. assertEquals ( "10.0.0.3", i. toString ( ) )
assertEquals ( null, result )
assertFeatureValues ( expected, testQuery, testText, getChain ( ) )
assertArrayEquals ( result, new byte [ ] { ( byte ) 0x0, ( byte ) 0x1 } )
assertEquals ( "table must have changed background", tableColor, scrollPane. getViewport ( ). getBackground ( ) )
Assert. assertEquals ( 404, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
Assert. assertEquals ( "(nt_point_location (nt_base_location * (nt_number 123)) (nt_offset - (nt_number 4)))", loc. toStringTree ( parser ) )
Assert. assertThat ( list, Is. is ( Arrays. asList ( "1", "1_1", "1_2", "1_3", "1_4", "2_1", "2_2", "2_3", "2_4", "3", "4", "5", "6", "7" ) ) )
assertThat ( f. format ( PlainDate. of ( 2017, 10, 1 ) ), is ( "Sunday, October 1, 2560 BE" ) )
assertEquals ( 0, dureation )
assertEquals ( "Id 6 is a valid wiki id", content )
assertThat ( subject. getUri ( ObjectType. AUT_NUM, "AS3546" ), equalTo ( URI. create ( "urn:x-example:universe-1" ) ) )
Assert. assertEquals ( behavior. getHistory ( 0L ), historyProxy )
assertThat ( router. allRoutes ( ), hasItem )
assertEquals ( expected, result )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Rooms('3')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Rooms('3')\\",\\"type\\":\\"RefScenario.Room\\"," + "\\"etag\\":\\"W/\\\\\\"3\\\\\\"\\"}," + "\\"Id\\":\\"3\\",\\"Name\\":\\"Room 3\\",\\"Seats\\":2,\\"Version\\":3," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + getEndpoint ( ) + "Rooms('3')/nr_Employees\\"}}," + "\\"nr_Building\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Buildings('2')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Buildings('2')\\",\\"type\\":\\"RefScenario.Building\\"}," + "\\"Id\\":\\"2\\",\\"Name\\":\\"Building 2\\",\\"Image\\":null," + "\\"nb_Rooms\\":{\\"__
assertEquals ( 1, tasks. size ( ) )
assertEquals ( "lux/reader-test.xml:0", normalize ( doc. asString ( ) ) )
assertFalse ( empty. containsGene ( "unknown_gene" ) )
assertEquals ( n1. getAttributeValues ( "att" ), n2. getAttributeValues ( "att" ) )
assertTrue ( expectedTag )
assertEquals ( HttpURLConnection. HTTP_FORBIDDEN, conn. getResponseCode ( ) )
assertNotNull ( data. getString ( 0, data. length ( ) ) )
assertEquals ( first, builder. getValue ( ) )
assertNull ( userArg. getValue ( ). getId ( ) )
assertEquals ( tree. getModelObject ( ). getChildCount ( tree. getModelObject ( ). getRoot ( ) ), 1 )
assertEquals ( "aTestString", classUnderTest. getClientName ( ) )
Assert. assertEquals ( "curl -X GET -L -H \\"test-cookie\\" = \\"test-value\\"\\n -c \\"test-cookie3\\" = \\"test-value4\\"", curl )
assertThat ( parse ( contents ), contains ( map ( "a", "12" ) ) )
assertEquals ( timeFrameEditor. isFirstMonthAvailable ( ), true )
assertColumnFamilyResource ( resource )
assertThat ( result. isEmpty ( ), is ( true ) )
assertEquals ( String. format ( p, r. getMillis ( ) ), cf. format ( r ) )
assertThat ( formatMsg ( jmc, OBJ_MSG ), is ( OBJ_MSG ) )
assertEquals ( expected, actual )
assertEquals ( HttpStatusCode. CREATED_201, response. getStatus ( ) )
assertThat ( result, is ( nullValue ( ) ) )
assertOut ( "/**\\n * @export\\n * @type {*}\\n */\\nRoyaleTest_A.prototype.a = undefined" )
Assert. assertEquals ( 5, es. size ( ) )
TestUtils. assertBuildSuccess ( build )
assertNull ( user )
assertTrue ( properties. isEmpty ( ) )
assertEquals ( originalText, scriptPanel. getText ( ) )
assertEquals ( 1, ( int ) manager1. getLoggedNodes ( ). get ( "logical1" ) )
assertEquals ( personList. length, 2 )
assertResponseIs ( "[message=Unsupported argument type: String]" )
assertEquals ( 0, database. getNumberOfEmployees ( ) )
assertNotNull ( namespace )
Assert. fail ( "IllegalArgumentException should occur but didn't!" )
assertEquals ( "failed on purpose", reason )
assertEquals ( "Select scripts are not the same", expectedSelectForUpdate ( ), testDialect. convertStatementToSQL ( stmt ) )
assertArrayEquals ( asciiData, binaryData, 0.0001f )
assertEquals ( instance. getChild ( ), child )
assertEquals ( "flavour_sALTY", helper. getStringValue ( "flavour_sALTY" ) )
assertResponse ( outputStream, expected )
assertOut ( "this[\\"knownMember\\"]" )
assertMockEndpointsSatisfied ( )
assertThat ( requests, is ( 1 ) )
assertEquals ( "All items should be selected", "[a, b, c, d, e, f]", IterableUtil. shallowCopy ( selection ). toString ( ) )
assertEquals ( 80., stateManager. getActivityState ( route. getActivities ( ). get ( 1 ), vehicle, InternalStates. LATEST_OPERATION_START_TIME, Double. class ), 0.01 )
assertEquals ( "Incorrect number of roles", 0, roles. size ( ) )
assertThat ( c. toString ( ), is ( "myString = aaa" ) )
assertSame ( expectedT, t )
assertEquals ( runningInForumPlugins, plugins )
assertOptionsSetViaConfigurator ( )
Assert. assertEquals ( createArrayNode ( 1, 2, 3 ), result )
assertEquals ( "Conversion did not match", value, to )
Assert. assertEquals ( 0, fileredInvokers. size ( ) )
this. assertAnalyzesTo ( _a, "{\\"foo\\":true}", new String [ ] { TypeAttribute. DEFAULT_TYPE, "<TRUE>" } )
assertEquals ( result, "10:15:30" )
assertEquals ( value, evaluated )
assertException ( "FEEL-01015", "''", "< ''", "'camunda'", "< 'camunda'", "false", "< true", "'12'", "< '12'", "\\"12\\"", "< \\"12\\"" )
assertResponseContainsExpectedPayload ( response, respPayload )
Assert. areEqual ( true, countA < 10 && countB < 10, "countA值" )
assertEquals ( "failed to generate class with method using JSNI", CLASS_WITH_METHOD, cls )
assertEquals ( asList ( warn ( mdcValues, marker, message, args ) ), testLogger. getLoggingEvents ( ) )
assertEquals ( "2017-01-01 00:00:00", spec. interpret ( "1484802359000" ) )
assertNotNull ( render. getRuleRenderOptions ( ) )
assertEquals ( expected, actual )
assertEquals ( 0, jobStore. getFiredJobs ( ). size ( ) )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( expected, result )
assertEquals ( now, target. getCreatedOn ( ) )
assertNull ( binningFormModel. getRegion ( ) )
Assert. assertEquals ( position, lastPosition )
assertEquals ( "bug", berr. toString ( ). trim ( ) )
assertUrl ( url, "http", "localhost", 80, "/" )
assertEquals ( "locationUpdate", subscriptionRequest. getValue ( ). getSubscriptionName ( ) )
assertThat ( result, is ( Arrays. copyOfRange ( data, 1, 2 ) ) )
Assert. assertTrue ( exp. equals ( bd ) )
assertEquals ( "Cha_rs_in_File_Name", person. getName ( ) )
assertEquals ( "sort field condition serialization is wrong", expected, actual )
assertThat ( result. statusCode, is ( Response. OK ) )
assertEquals ( NOT_FOUND. getStatusCode ( ), response. getStatusCode ( ) )
assertTrue ( in. isOpen ( ) )
assertEquals ( 400, fail )
assertTrue ( "Member field should have been bound", form. firstName. getValue ( ). equals ( "This" ) )
Assert. assertEquals ( spill + MAP_TASKS * 8, out )
assertFalse ( outputGraphExecutor. equals ( nullOutput ) )
Assert. assertTrue ( httpAcceptor. emptyBindings ( ) )
assertEquals ( 1, result )
assertThat ( codes, containsInAnyOrder ( "USA", "LAB" ) )
assertEquals ( "Mismatched message at line #" + i, message, line )
assertTrue ( "Button was not pressed", getLogRow ( 0 ). contains ( "Clicked" ) )
assertEquals ( expResult, result )
assertEquals ( 1, cfg. primeNumber ( ) )
assertTrue ( requestContext. isSecure ( ) )
assertEquals ( field. getXrefLabelNames ( ), Arrays. asList ( "xrefEntity.1", "xrefEntity.2", "xrefEntity.3" ) )
assertEquals ( HttpStatusCode. INTERNAL_SERVER_ERROR. code, response. getStatus ( ) )
Assert. assertEquals ( PRIO_NODE, compoundWrite. apply ( new Path ( "priority" ) ) )
assertThat ( runtime. exitStatus ( ), is ( equalTo ( ( byte ) 0x0 ) ) )
Assert. assertEquals ( "2147483647", result. toPlainString ( ) )
assertFalse ( agent. needModel ( ) )
assertTrue ( enumValuesSet. isEmpty ( ) )
Assert. assertNotNull ( zoo )
assertThat ( underTest. execute ( underTest, null, null, new Object [ ] { assetDocument, "jexlexpression", "*", repoToContainedGroupMap }, null ), is ( false ) )
Assert. assertEquals ( 0L, n )
assertFalse ( parser. isToken ( ) )
assertThat ( contributors. size ( ), equalTo ( 0 ) )
assertEquals ( expecting, result )
assertEquals ( "<foo\\n" + "  'completed'->kill\\n" + "  '*'->custard\\n" + "  'bar'->bar\\n" + "/>", ctn. stringify ( ) )
assertEquals ( "str in com.querydsl.core.DefaultQueryMetadata@c", s )
assertNotNull ( compassDropController. dropTarget )
assertEquals ( 1, filterA. filter ( aciContext, OperationScope. ENTRY, null ). size ( ) )
assertTrue ( references. isEmpty ( ) )
assertEquals ( 0, g. size ( ) )
assertOut ( "a *= b" )
assertEquals ( "(int a 3)\\n", found )
assertThat ( g2. count ( i ), is ( g1. count ( i ) ) )
assertEquals ( item, returnedItem )
Assert. assertNotNull ( data. opt ( "user" ) )
assertThat ( entities. getTotalElements ( ), equalTo ( 1L ) )
Assert. assertEquals ( 0, results. size ( ) )
assertTrue ( deleteSecurityGroupIPSetsResponse. getRet_code ( ) == 0 )
assertEquals ( 0, result. size ( ) )
assertEquals ( HttpStatusCode. BAD_REQUEST_400, response. getStatus ( ) )
Assert. assertTrue (! dict. contains ( entry2 ) )
assertNotNull ( services )
assertEquals ( 10, routeState. get ( 0 ) )
assertNull ( dsc. getPanel ( ) )
assertThatErrorDetails ( GraphQLError. class, request, new GraphQLError ( ) )
assertEquals ( user, cache. get ( id ) )
assertTrue ( outXml. indexOf ( "w:Whee(price > 0) > 0" ) > 0 )
BufferedImageAssert. assertMatches ( result, new float [ ] { 1, 1, 1, 1, 1, 1, 1, 0, 0 } )
assertEquals ( aNumber, result, 1E7 )
Assert. assertEquals ( "John,Doe", result. trim ( ) )
assertEquals ( 6, hg19. size ( ) )
assertEquals ( l1, l2 )
assertEquals ( row. isPresent ( ), false )
assertNull ( topicService. getDraft ( currentUser ) )
assertEquals ( "Removal failed", 0, newPerms & Perms. CREATE )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "test", echo. echo ( "test" ) )
Assert. assertEquals ( 4, p. h ( 4 ) )
assertEquals ( ExitStatus. FAILED, exec. getExitStatus ( ) )
assertThat ( digest, is ( instanceOf ( MD5Digest. class ) ) )
Asserts. check ( targetHosts. size ( ) > 0, "fail. Get list bad size " )
assertEquals ( 2, trends. size ( ) )
assertEquals ( "A1 text", sheetController. getCellContent ( "A1" ) )
assertEquals ( request. getRemoteHost ( ), result )
assertEquals ( "00000000a6e5e4fbc8949000001e0af55e8801e592b9a3e093a49dcc48501e592", block. getHashAsString ( ) )
assertThat ( emptySession. getEnd ( ), equalTo ( date ) )
assertThat ( convertedSalt, is ( base16 ) )
assertEquals ( "range condition serialization is wrong", expected, actual )
Assert. assertEquals ( result1. get ( 0 ), result2. get ( 0 ) )
Assert. assertFalse ( nodes. isEmpty ( ) )
assertEquals ( "test-value", clientWrapper. get ( "key1" ) )
Assert. assertTrue ( result )
assertNull ( getParameterRepositoryService ( ). getParameterValueAsBoolean ( key, "foo" ) )
assertEquals ( "Hibernate Master Class", _post. getTitle ( ) )
assertStyleEquals ( ".xyz {}", styleSheet )
assertEquals ( expected, actual )
assertDepth ( "addComplex", callTree, expectResult )
assertEquals ( 1, capturedEvent. getValue ( ). getFirstIndex ( ) )
Assert. assertEquals ( "Highlighted", b. getText ( ) )
Assert. fail ( "InvalidFormatException must be thrown" )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
lowLevelElasticSearchOperations. assertThatConnectionToElasticsearchIsPossible ( anyString ( ), anyInt ( ) )
assertThat ( localName, is ( "thename" ) )
assertEquals ( DecodeQualification. SUITABLE, readerPlugIn. getDecodeQualification ( headerFile. getName ( ) ) )
assertOut ( "a.setTime(10)" )
assertTrue ( true )
assertEquals ( Long. valueOf ( 1 ), myTestInstance. insertAsync ( doc ). get ( ) )
assertEquals ( BigDecimal. ONE. add ( 1 ), lambda. apply ( BigDecimal. ZERO ) )
Assert. assertTrue ( new File ( jar ). exists ( ) )
assertStat ( result )
assertGridBodyCellEditContext ( editContextArgumentCaptor. getValue ( ), 0, 1, ROW_HEIGHT * 2, col2. getWidth ( ), GRID_ABSOLUTE_Y + HEADER_HEIGHT, visibleBounds. getX ( ) )
assertScoreAndParse ( content, null, 1 )
Assert. assertEquals ( "[1, 2, 3, 4, 6, 7, 5]", result. toString ( ) )
Assert. assertTrue ( isEqual ( distance, 0 ) )
assertValidLicenseKeyFormat ( licenseKey )
assertThat ( fileConfig. getConfigProperties ( ), contains ( configProperty ( INSERT_FINAL_NEWLINE, false ) ) )
assertThat ( downstreamJobs, Matchers. containsInAnyOrder ( "my-downstream-pipeline-1" ) )
assertEquals ( "echo 'hello world'", cmds. getLuaString ( "/bin/sh foo.sh" ) )
assertNotNull ( "Could not find resource 'Normal.def'", in )
assertEquals ( 1, reports. size ( ) )
assertMigratedTo ( migrationJob, targetDefinition )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Message action=\\"https://example.com\\" from=\\"from\\" method=\\"GET\\" statusCallback=\\"https://example.com\\" to=\\"to\\">body</Message>", elem. toXml ( ) )
Assert. assertEquals ( absoluteDir, fSys. getWorkingDirectory ( ) )
assertEquals ( ImmutableList. of ( 1, 2, 3 ), ImmutableList. copyOf ( evaluate ( "${iter}", Iterable. class ) ) )
arrays. assertStartsWith ( description, actual, null )
assertEquals ( "Wrong constructed key", "key..test..more.tests", key. toString ( ) )
assertEquals ( foundEntry. getParticipantId ( ), participantId2 )
assertThat ( testOutcome. getPendingCount ( ), is ( 3 ) )
assertThat ( ebs1, not ( equalTo ( ebs2 ) ) )
assertSame ( "wrapping renderer must use list's default on null", renderer. getDelegateRenderer ( ), list. getWrappedCellRenderer ( ) )
assertTrue ( c. createNewAlert ( testPlatformAlertDef ) )
assertEquals ( bestStats, stats1 )
assertEquals ( Collections. singletonList ( "phase_" + phaseName + "_1" ), events )
assertFalse ( payload. getTags ( ). isEmpty ( ) )
assertThat ( result, isFailedCommand ( ) )
assertEquals ( expected, json )
assertEquals ( "2015-10-05", mo. getDateWrittenElement ( ). getValueAsString ( ) )
assertThat ( document, is ( nullValue ( ) ) )
assertTrue ( s. isStopped ( ) )
assertEquals ( "getSongsBySongId", Names. resourceMethodName ( resource, method ) )
assertTrue ( or. isDefined ( ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, slices, rows, columns ) + ", rmse = " + rmse, 0.0, rmse, EPSF )
assertTrue ( "Check alphabet are equal", result )
assertFalse ( ByteArrayCharSequence. COMPACT. knownFormat ( bytes, 0, 2 ) )
assertHeader ( header, name, value )
assertThat ( config. getBasePackages ( ), is ( nullValue ( ) ) )
assertThat ( r. reduce ( Arrays. asList ( 1.0 ) ), equalTo ( 1.0 ) )
assertTrue ( descriptor. isBeanConstrained ( ) )
assertThat ( objectMapper. writeValueAsString ( dto ), equalTo ( "{\\"twoWords\\":\\"value\\"}" ) )
assertEquals ( fileId, mFileSystemMaster. getFileInfo ( NESTED_FILE_URI ). getFileId ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( BigInteger. valueOf ( 2 ), bookCount )
assertEquals ( expectedSqlForMathOperations7 ( ), result )
assertEntityHasValue ( key, value )
assertEquals ( 124L, proxy. getBookStore ( ). getId ( ) )
assertEquals ( count, 1 )
assertEquals ( "Invalid result", Result. FAILURE, incompleteActivationRule. getResult ( ) )
assertThat ( builder. toSettings ( ). isAllowRespondByVRK ( ), is ( true ) )
assertSame ( "Edit type was not set for an unknown element", EditType. UNKNOWN, element. getEditType ( ) )
assertEquals ( "../subFolder1/fileName1", relPath )
assertNotNull ( obj )
assertRequest ( "POST", "Conference/%s/Member/%s/Speak/", confId, memberId )
assertEquals ( "Chuck Norris", victim. readLiteralString ( ) )
assertEquals ( 200, containerResponse. getStatus ( ) )
assertEquals ( res, 52 )
assertMessage ( "<type>DELEGATED</type>", 4 )
assertions. isEqualTo ( ( short ) 2 )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( expectedRestriction, restriction )
assertEquals ( "inet mapper serialization is wrong", expected, actual )
assertEquals ( expectedScriptNode, actualScriptNode )
Assert. assertFalse ( hasIndexRangeKeyCondition )
assertEquals ( GOOD_IP, credentials. getIp ( ) )
assertEquals ( "message with 2 cookies and milk", logRecord. getMessage ( ) )
assertNotNull ( crsStore. get ( Ntf2. class ) )
assertEquals ( expectedJson, json )
assertEquals ( "test.outcome", configuration. getString ( "include.outcome" ) )
Assert. assertEquals ( Permission. YES, providerPermission )
assertEquals ( cal. getTime ( ), d. getEnd ( ) )
assertEquals ( "/a/b/c", path. toString ( ) )
assertEquals ( value, things. getFirstResult ( ). getProp ( "testprop" ) )
assertObjectEquals ( "[{f1:'x1'}]", p. run ( bs, in, sa ) )
assertTrue ( ex. isPrime ( 37 ) )
assertTrue ( resultFromJPQL. size ( ) == 1 )
assertEquals ( allocator. wrap ( allocator. allocate ( 203 ) ). put ( ( byte ) 0x80 ). put ( ( byte ) 0x81 ). put ( ( byte ) 0x48 ). flip ( ), out )
assertEquals ( "URI is not built correctly", "http://bar/", newUri. toString ( ) )
assertThat ( result, is ( jsonBoolean ( false ) ) )
assertEquals ( expected, result )
assertEquals ( "dd-MMM-2017 23 45 12 345", format. format ( new Date ( ) ) )
Assert. assertTrue ( state [ i ] == expected )
assertThat ( target. matchExactly ( ( FlowAction ) action ), is ( true ) )
assertEquals ( "UVWXY", targetId. getOSuffix ( ) )
assertEquals ( m1, m2 )
Assert. assertTrue ( isEqual ( distance, 0 ) )
Assert. assertFalse ( "SearchByTags returned no results", jsonList. isEmpty ( ) )
Assert. assertEquals ( 1f, vm. getStack ( ). pop ( ) )
assertThat ( token. getType ( ), is ( PCRELexer. POSIXNegatedNamedSet ) )
assertEquals ( TestModel. class, model. getModelClass ( ) )
assertFalse ( OpenmrsUtil. isInNormalNumericRange ( 5.64f, concept ) )
assertEquals ( as, result. toString ( ) )
assertTrue ( p1. equals ( p2 ) )
assertEquals ( expResult, result, 0.0 )
assertTrue ( authorizer. isAuthorized ( MockWebContext. create ( ), profiles ) )
assertNotEquals ( 0, tokenLists. size ( ) )
assertThat ( t. getTitle ( ), notNullValue ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "Empty collection returned", Collections. EMPTY_LIST, IterableUtil. shallowCopy ( selection ) )
assertTrue ( "p1 has assigned to g1 and assigned to g2", roleService. principalHasRole ( "p1", roleIds, Collections. < String, String > emptyMap ( ) ) )
assertEquals ( "dubbo://127.0.0.1:20887", result )
Assert. assertEquals ( RheemCollections. asSet ( - 1 + expectedOffset, 1 + expectedOffset, 5 + expectedOffset ), RheemCollections. asSet ( result ) )
assertSame ( TestService. getStatus ( ), server. getStatus ( ) )
assertTrue ( instance. runCommand ( ) )
assertNotNull ( rootNode )
assertEquals ( 3, index. estimateTotalCount ( ) )
assertEquals ( "XML Equals", jdkXml, javolutionXml )
assertEquals ( new HashSet < > ( Arrays. asList ( "INFORMATION_SCHEMA.system_tables" ) ), tables )
assertEquals ( "http://home.dir.com", client. getBasePath ( ) )
assertEquals ( 208, stopTimes. size ( ) )
assertEquals ( 0, peopleIds. size ( ) )
Assert. assertEquals ( 1, count )
assertEquals ( 1, new ArrayList < > ( results. values ( ) ). get ( 0 ). getWidgetUsages ( results. values ( ) ). size ( ) )
assertTrue ( aNumber == - Float. MAX_VALUE )
assertUpdate ( result, 1 )
assertNotNull ( response )
assertAllTargetsCount ( 0 )
assertTrue ( attributes. isNew ( ) )
Assert. assertEquals ( 1, gid )
assertEquals ( TEST_STRING, Marktr. marktr ( TEST_STRING ) )
assertEquals ( "Does not compare " + nv5 + " & " + nv7, NodeValue. CMP_LESS, NodeValue. compare ( nv5, nv7 ) )
Assert. assertEquals ( '\\\\\\', decChar )
assertEquals ( ANY, desc. getImplementation ( ) )
assertContainsCodesOfNeverEndingSubChainSelector ( subChainSelector, "[a1, a2]", "[a2, a3]", "[a3, a4]", "[b1, b2]" )
assertArrayEquals ( new String [ ] { userAddCL1. toString ( ), userAddCL2. toString ( ) }, userAddCL1. toStrings ( ) )
assertEquals ( 5, docksBars. dockList. size ( ) )
assertEquals ( 0., violation, 0.01 )
assertEquals ( "one 2 three 4", elr. getMessage ( ). toString ( ) )
assertTrue ( m. isIsomorphicWith ( m2 ) )
assertTrue ( "Checksums should be equal", Arrays. equals ( actual, TEST_CONTENT_SHA256_CHECKSUM ) )
assertThat ( gson. fromJson ( gson. toJson ( ldt ), LocalDateTime. class ), is ( ldt ) )
assertEquals ( expResult, result )
assertTrue ( userCanBuildProject )
assertEqualDoubleArrays ( pydiv, div, epsilon )
Assert. fail ( "should have failed " + src + " " + o )
assertTrue ( oc. myClassList. size ( ) == oc2. count )
Assert. assertEquals ( result, "file" )
Assert. assertSame ( o, p. getExpectedValue ( ) )
Assert. assertEquals ( "foo", response. body ( ) )
assertTrue ( b )
Assert. assertTrue ( "The modifaction group should be present", driver. findElement ( By. xpath ( "//*[@data-id='viewGroup']" ) ). isDisplayed ( ) )
assertEquals ( "fre_01.xz", res )
context. assertEquals ( Arrays. asList ( "ba" ), candidates )
Assert. assertEquals ( 2, terms. size ( ) )
assertHelpLines ( "Option                   Description        ", "------                   -----------        ", "-d [Integer: double dizzle]  (2, 3, 5, 7)", EMPTY )
Assert. assertEquals ( 0, total )
assertEquals ( "lesson_05/_json_configs/smooks-config-reader-only.xml", uri. toString ( ) )
assertThat ( requestedShutdownCallable. call ( ), equalTo ( false ) )
assertEquals ( 2393, size )
assertTrue ( "name was not added", manufacturerService. getManufacturer ( name ). getId ( )!= null )
JSONAssert. assertEquals ( "{a:[[9]]}", ARRAY_OF_JSONARRAYS, new CustomComparator ( JSONCompareMode. LENIENT, customization ) )
assertEquals ( prefix_not_search_result, result )
assertFalse ( CascadingUtil. getBooleanProjectProperty ( childProject, AbstractProject. BLOCK_BUILD_WHEN_UPSTREAM_BUILDING_PROPERTY_NAME ). getOriginalValue ( ) )
assertThat ( targetLocator. getUntargetedDriver ( ), instanceOf ( FirefoxDriver. class ) )
assertEquals ( "test", v. getName ( ) )
Assert. assertFalse ( result. isEmpty ( ) )
assertEquals ( theme, sut. getTheme ( ) )
Assert. assertNotNull ( PropertyUtils. getProperty ( newObs, "allergen" ) )
assertEquals ( 500, page. getWebResponse ( ). getStatusCode ( ) )
assertImage ( null, destImg, e )
assertEquals ( c1, c2 )
Assert. assertEquals ( expectBucketName, bucketName )
Assert. assertTrue ( testPage. element. isDisplayed ( ) )
assertThat ( DoubleTypeValidator. INSTANCE. validate ( parameters, "aaa" ), is ( "Aaa must be a double." ) )
assertNotNull ( mvcResult )
assertEquals ( 1, statements. size ( ) )
assertFalse ( one. equals ( two ) )
Assert. assertEquals ( 1, patientCount )
Assert. assertEquals ( "Hasan", person. getName ( ) )
assertThat ( result, is ( validValidationResult ( ) ) )
assertEquals ( sentPayload, receivedPayload )
assertEquals ( expResult, result )
Assert. isTrue ( organizations. size ( ) > 0 )
assertFieldsCount ( 0 )
assertEquals ( expectedJson, actualJson )
Assert. assertEquals ( jsonString, expected )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
Assert. assertEquals ( expected, actual )
Assert. assertTrue ( theFlows. isEmpty ( ) )
assertNull ( svn. getProperty ( "svnrevision" ) )
assertThat ( count - 1, is ( 3 ) )
assertThat ( "\\"09-15-2013T13:00:00\\" == 2013-15-2013 13:00:00 GMT", 1379250000000L, is ( date. getTime ( ) ) )
assertEquals ( s, LittleEndianInputStream. wrap ( b ). readUnsignedShort ( ) )
assertTrue ( group. isStudent ( student. getId ( ) ) )
assertEquals ( HttpStatus. SC_OK, result. getStatusLine ( ). getStatusCode ( ) )
approver. assertApproved ( "banana" )
assertFalse ( "Model should contain RDF types", rdfTypes. isEmpty ( ) )
Assert. assertEquals ( 1L, ctx2. tQueryForLongValue ( "select count(*) from users where name=? and address=?", bind ( "name", "Tom" ), bind ( "address", "China" ), bind ( "address", "China" ) ) )
assertEquals ( this. view, view )
assertEquals ( "numhits is wrong", 5777, res. getNumhits ( ). intValue ( ) )
assertEquals ( "123", map. get ( "v" ) )
assertPostFails ( added, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEntityHasValue ( key, value )
assertSuggestions ( suggestions, "foo", "fooba" )
assertSame ( defaultDurability, result )
assertEquals ( 1, metaView3. getSd ( ). getColumns ( ). size ( ) )
assertThrows ( InvalidMethodSignatureException. class, ( ) -> new JavaDefaultParameterTransformerDefinition ( threeArg, lookup, new String [ 0 ] ) )
assertEquals ( "Failed to generate array", "new String[][] { 1, 2 }", s )
assertEquals ( 1, tags. size ( ) )
assertEquals ( entityBundle, clone )
assertTrue ( new Matcher ( ). matchRelationshipInstance ( output, input ) )
assertFalse ( objmap. containsKey ( "field_priv" ) )
assertEquals ( "unexpected error: " + msg. getText ( ), 0, equeue. warnings. size ( ) )
Assert. assertEquals ( any, map )
assertEquals ( "Running on control port " + port + " but responded with: \\"ok\\"", response )
assertTrue ( "uri was not contained in application", ti. wasContainedIn ( uri ) )
Assert. fail ( e. getMessage ( ) )
assertEquals ( "table.name", HiveDatabaseMeta. formatTableName ( "table", "test", "test", null ) )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
assertTokenStreamContents ( ts, new String [ ] { "hello", "world" }, new int [ ] { 0, 1, 1 }, new int [ ] { 0, 1, 1 }, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, new int [ ] { 1, 1, 1 }, null, true, true } )
assertEquals ( r1, r2 )
Assert. assertEquals ( 2, buttons. size ( ) )
Assert. assertTrue ( deal. isAccepted ( ) )
Assert. assertNotSame ( exporter, exporter2 )
assertEquals ( "Matching", VersionMatchResult. MATCHED, p. matches ( info ) )
assertEquals ( 0x00, acia. read ( 0x0001, true ) & 0x80 )
Assert. assertEquals ( 2, count )
Assert. assertEquals ( 1, issues. length )
assertEquals ( "z", getFocusedItemText ( ) )
assertThat ( sentryStore. getVersion ( ), is ( equalTo ( SentryStore. SENTRY_VERSION ) ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertThat ( PrettyTime. of ( Locale. ENGLISH ). withReferenceTimezone ( tzid ). print ( Moment. UNIX_EPOCH ), is ( expected ) )
assertNull ( lease. getTenancyDuration ( ) )
assertEquals ( expected, x )
assertTrue ( "a vote should be allowed", voteGenericTest ( authorities, configAttributes, AccessDecisionVoter. ACCESS_VISIBILITY ) )
assertEquals ( 1, traverseCount )
assertEquals ( 0, theValue. getValue ( ) )
assertNotNull ( DocumentPermission. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( new ComparisonExpression ( b ), orPredicate. getRhs ( ) )
assertEquals ( modulus, certificate. getPublicKeyModulus ( ) )
assertNull ( "NetworkElement id was not null", SG_SFC_UNBIND_DELETE_SFC. getNetworkElementId ( ) )
assertTrue ( entity. getId ( ) > 0 && entity. getCity ( ) == null )
assertNotNull ( target )
assertFalse ( result. isSucceeded ( ) )
assertNull ( query )
assertEquals ( expected. substring ( 0, 5 ), sb. toString ( ) )
Assert. assertNull ( changed. getReifier ( ) )
assertEvalTrue ( new File ( "abssamples/backend/ObjectTests/classRecover1.abs" ) )
assertTrue ( redis. objectIdletime ( key ). get ( ) > 0 )
assertTrue ( "content-type application/json; charset=wtf-8 should be valid", mediaTypeChecker. isContentTypeValid ( mockHeaders ) )
assertEquals ( "{\\"resourceType\\":\\"Observation\\",\\"value\\":{\\"type\\":\\"Observation\\",\\"attachment\\":{\\"data\\":\\"AAECAw==\\",\\"url\\":\\"http://foo\\",\\"size\\":123}}}", encoded )
assertEquals ( xs, ys )
Assert. assertFalse ( bpInfo1. equals ( bpInfo2 ) )
assertNull ( "days of the week UI must be null.", monthView. getDaysOfTheWeek ( ) )
assertThat ( comment, equalTo ( "Simple field comment from classpath" ) )
assertThat ( info. isRequired ( ), is ( true ) )
assertEquals ( BigInteger. valueOf ( 536879104L ), work )
assertEquals ( same, sum )
assertEquals ( PrimitiveTypeProducer. class, typeProducer. getClass ( ) )
assertEquals ( n, c. getThreads ( ). size ( ) )
assertEquals ( VLWSentence. KM, empty. getTotalUnits ( ) )
assertThat ( readFile ( retry ), is ( "Hello, world!" ) )
assertTrue ( unk1. length == unk2. length )
assertEqualsJson ( expected, actual )
assertThat ( res. toString ( ), is ( equalTo ( "my last response statusCode is: 200" ) ) )
Assert. assertEquals ( 0, cloudStackRequest. getExpiration ( ). size ( ) )
assertEquals ( expResult, result )
assertFalse ( hasConfigurationChanged )
assertThat ( target. getBodyAsMap ( String. class ), is ( nullValue ( ) ) )
Assert. fail ( "Xfdf files are not equal" )
assertEquals ( 3, result. getSize ( ) )
assertThat ( dns, hasItems ( "dc=myroot" ) )
assertEquals ( "V", data. getUnit ( ) )
assertDependencyWasResolvedToNull ( )
assertEquals ( AM_UXS, 1, rd. size ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( string2, string1 )
assertEquals ( Arrays. asList ( "INSERT INTO " + tableName ( "TableOne" ) + " (id, value) VALUES (3, 1 + 2)" ), testDialect. convertStatementToSQL ( testStatement, schema, null ) )
Assert. assertEquals ( expected, filterResult )
assertTrue ( req_108_Util. isPeerInterestedOnRemoteWorker ( rwmOID. getServiceID ( ) ) )
Assert. assertTrue ( value!= null && value. equals ( "" ) )
assertTrue ( credit. getVotes ( ). get ( 0 ). getVotes ( ). size ( ) == 1 )
assertEquals ( ExpressionFactory. exp ( "path not in (1,2,3)" ), exp )
assertNull ( createSchema ( map, 1 ). convert ( ). getName ( ) )
assertEquals ( "admin", jsp )
assertEquals ( 200, code )
Assert. assertEquals ( "SELECT '0' = 0;", text )
assertEquals ( ProcessInstance. STATE_COMPLETED, processInstance. getState ( ) )
assertEquals ( expected, actual )
assertThat ( sslContextSelector. select ( httpContext ), is ( sslContext ) )
assertEquals ( "UTF-8 encode fail", out, Encoding. encode ( in ) )
assertNotNull ( WorkerRealTimeStatistics. fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( 0, walEdit. size ( ) )
assertServiceInstanceCreateRequest ( serviceInstance )
assertMockEndpointsSatisfied ( )
assertOut ( "B.prototype.royaleTest_a = function() {\\n\\tthis.royaleTest_a = new RoyaleTest_A();\\n};" )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( metric, metric2 )
assertThat ( normalize ( results ), is ( path ( "a/a.csv", "c/c.csv" ) ) )
assertThat ( DateUtil. clearDatePart ( date ), is ( cal. getTime ( ) ) )
Assert. assertEquals ( expected, rewriter. rewriteCookie ( cookie ) )
assertEquals ( 2, ( ( List ) session. getGlobal ( "messages" ) ). size ( ) )
assertNotNull ( actual )
assertNull ( error )
assertEquals ( branches, Functions. getBranchesPageSharedWith ( PROJECT, BRANCH, PAGE ) )
assertObjectEquals ( "{type:'array',items:{type:'object',properties:{f1:{type:'string'}}},'x-example':[{f1:'foobar'}]}", s. getSchema ( BeanList. class ) )
assertEquals ( expected, actual )
assertEquals ( 4, doubler. doubleIt ( 2 ) )
assertEquals ( foo, deserialized )
assertTrue ( "haveLifetime after setLifetime", _info. haveLifetime ( ) )
assertEquals ( 2, actualExpectedWorkerLinkCount )
assertThat ( p. getContent ( ). size ( ), is ( greaterThanOrEqualTo ( 0 ) ) )
Assert. assertEquals ( 2, result. length )
assertThat ( consoleHandlerMemento. getLogRecords ( ), contains ( testFacade. getServiceCreateLogMessage ( ) ) )
assertEquals ( "Select with null where field is null", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
Assert. assertEquals ( "define stream testStreamName(object,attrName1 string,attrName2 long);", siddhiStreamDef )
assertSame ( first, second )
assertFalse ( params. doesCodingListMatch ( codings ) )
context. assertIsSatisfied ( )
assertEquals ( - 1, t. indexOfUnquoted ( str, ">>" ) )
assertEquals ( aNumber, result, 1E14 )
assertThat ( document. get ( "_id" ), notNullValue ( ) )
assertEquals ( - 1L, estimatedSizeBytes )
assertEquals ( "Expected response not seen.", 404, res. getStatus ( ) )
assertArrayEquals ( new double [ ] { 1, 2, 3 }, degToRads, 0.00001 )
Assert. assertTrue ( cmd. apply ( bkFlags, new String [ ] { "-l", "1" } ) )
assertTrue ( resourceBundle. getObject ( "org.datacleaner.branding.FileType" ) instanceof Image )
assertEquals ( topic, topics. get ( 0 ) )
Assert. assertTrue ( "RunJar failed", outFile. exists ( ) )
assertThat ( ContractClass. privateInstanceMethod ( ), is ( true ) )
assertEquals ( expectedBindingString, builder. getBinding ( ). getName ( ) )
assertThat ( applicationSettings. getProjectCreationSetting ( ), is ( ProjectCreationSetting. PROJECT_CREATION_NOT_ALLOWED ) )
assertResults ( chain )
assertEquals ( "test", databaseMeta2. getName ( ) )
assertEquals ( "?a=b&c=d", qs. encode ( ) )
assertThat ( json, equalTo ( out. toString ( ) ) )
assertResult ( - 1, - 1 )
assertEquals ( "Expected 4 results!", 4, n )
assertThat ( value. isPresent ( ), is ( false ) )
assertEquals ( HttpStatus. BAD_REQUEST, response. getStatusCode ( ) )
assertEquals ( 5, testDescriptor. getChildren ( ). size ( ) )
assertThat ( "Bitmap should be cached by WeakReference event if it exceeds size limit of UniversalWeakMemoryCache", hit, is ( image ) )
assertEquals ( "test (REG_SZ)", value. toString ( ) )
assertFalse ( iter. hasNext ( ) )
Truth. assert_ ( )
assertNull ( result )
assertEquals ( "JUnit 5", driver. getTitle ( ) )
assertTrue ( "Row 5 is visible", isElementPresent ( By. className ( "v-grid" ) ) )
Assert. assertEquals ( tree. predict ( x [ loocv. test [ i ] ] ), tree. predict ( x [ loocv. test [ i ] ] ), 1e-2 )
assertTrue ( e instanceof E_NotGreaterThan )
assertThat ( "default 64-os", sut. is64Os ( ) )
assertEquals ( 1, result. size ( ). intValue ( ) )
assertEquals ( types, expectedTypes )
assertEquals ( "Learn. Eat. Code.", phraseDecodedToString )
assertThat ( result. message ( ). get ( 0 ). getData ( ), CoreMatchers. containsString ( "<img src=\\"http://yuml.me/diagram/" ) )
assertEquals ( "Expected 2 results!", 2, n )
assertEquals ( date, result. getModified ( ) )
CallTreeAssert. assertDepth ( "corrupted", callTree, expectResult )
context. assertIsSatisfied ( )
assertContainsOnly ( testee. getFileFilters ( ), filter1, filter2, filter3 )
assertEquals ( "<y-axis><plot-line><value>0</value></plot-line></y-axis>", removeWhitespacesBetweenTags ( parent. child ( 0 ). toString ( ) ) )
assertNull ( scanner. parse ( "/*" ) )
assertThat ( whereClause, is ( equalTo ( WHERE + OPEN_CURLY + "FILTER" + SPACE + var ( "id" ) + SPACE + var ( "name" ) + SPACE + "id" ) ) )
Assert. assertEquals ( instancesCount, InstanceHelpers. getAllInstances ( this. app ). size ( ) )
assertNotNull ( descuento. getId ( ) )
assertAccessorsCorrect ( control, "delay", new Delay ( ), new Delay ( ) )
assertAccessorsCorrect ( table, "currentPage", 0, 1, 2 )
assertThat ( response. getStatus ( ), equalTo ( Response. Status. OK. getStatusCode ( ) ) )
assertEquals ( "Error notification", heading. getText ( ) )
assertThat ( iter. hasNext ( ), is ( true ) )
assertThatIsMaximized ( )
assertTrue ( true )
assertEquals ( "default value", settings. getString ( "default" ) )
Assert. assertEquals ( value + 1, value1 )
Assert. assertTrue ( appTableColumnsMeta. indexOf ( "natural" )!= - 1 )
assertTrue ( codeGenFailedEx. getMessage ( )!= null )
assertThat ( credentials, is ( notNullValue ( ) ) )
assertNotNull ( actual )
assertNotNull ( mpp )
assertTrue ( "No wait", System. currentTimeMillis ( ) - start < STOP_WAIT_SEC )
assertThat ( result, is ( alicia ) )
assertEquals ( "MediaRegistry", sut. getName ( ) )
assertEquals ( MediaType. APPLICATION_JSON_TYPE, response. getType ( ) )
assertTrue ( ( fTime - sTime < 7000L ), "Immediate trigger did not fire within a reasonable amount of time." )
Assert. assertTrue ( evaluator. evaluate ( offsets ) )
assertEquals ( 0, x. size ( ) )
assertNotNull ( "Skill is null", entity )
Assert. assertEquals ( SamlConstants. AttributeType. ASSIGN, assign. getActionClass ( ) )
assertEquals ( "History filename provider", name )
Assert. assertTrue ( ( max - min ) <= defaultCapacity / 100 )
Assert. assertEquals ( 1, analysis. getErrors ( ). size ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. AFFILIATIONS_UPDATE )
assertEquals ( result, instance. unwrap ( String. class ) )
assertThat ( validationErrors. size ( ), equalTo ( 0 ) )
assertNull ( entity. getProperty ( "user" ) )
assertSetDirty ( )
assertThat ( node, is ( not ( new DefaultNodeMatcher ( new DefaultNodeMatcher ( otherDecls ) ) ) ) )
assertEquals ( new SchemaExample ( definitions ), new SchemaExample ( "User" ) )
assertEquals ( 3, checkNumberUnreadMessages )
assertThatContains ( archive, scriptPath )
assertNotNull ( struct )
assertEquals ( timeOut, mpd. getTimeout ( ) )
assertEquals ( 0, t. getOutputError ( ). getTotalNetworkError ( ), 0.1 )
assertTrue ( ex. isPrime ( 41 ) )
assertEquals ( detailMethods, result )
N4CliHelper. assertExpectedOutput ( expectedString, out )
assertEquals ( HttpStatus. OK, responseEntity. getStatusCode ( ) )
assertThat ( st. thing, is ( st. tag ) )
assertEquals ( expectedResult, result )
Assert. assertEquals ( 20, analyser. getLoadAtEnd ( route ). get ( 0 ), 0.01 )
assertEquals ( URL + "?param+1=&param+2=\\"", uri. toString ( ) )
assertNotNull ( x509Attestation )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4 ) ) )
Assert. assertEquals ( Status. FORBIDDEN. getStatusCode ( ), resp. getStatus ( ) )
assertThat ( windows. minusEarlierInterval ( earlier ), is ( windows ) )
Assert. assertNull ( connection )
assertEquals ( value, result )
assertArrayEquals ( result1, result2 )
assertThat ( javaDocComment, not ( containsString ( "(Required)" ) ) )
assertRange ( q, Long. class, time ( "2000-01-01" ), time ( "2010-02-04" ) )
PatternAssert. assertThat ( H2_CONNECTION_STRING )
assertEquals ( actual1, actual2 )
assertEquals ( 0, container. receive ( ) )
Assert. assertEquals ( "simpleInteger", found. getName ( ) )
Assert. assertEquals ( "true", answer. getReturnVal ( ) )
Assert. assertEquals ( Response. Status. BAD_REQUEST. getStatusCode ( ), response. getJerseyResponse ( ). getStatus ( ) )
assertTrue ( value. length == count * v1. length )
assertEquals ( "2007-12-03 - 10:15:30", result )
assertEquals ( 5, res. getInt ( "nbHits" ) )
assertThat ( exitStatus. exitStatus ( ), is ( equalTo ( ( byte ) 0x1 ) ) )
assertIncluded ( node )
assertThat ( nextToken, is ( nullValue ( ) ) )
assertFailureValue ( "differs at index", "[1, 2, 3]" )
assertEquals ( 1L, result )
Assert. assertNotNull ( page. getPageTimings ( ) )
Assert. assertNotNull ( xhtmlOptions )
Assert. assertEquals ( "Wrong port", 0x00010203, out. readUnsignedShort ( ) )
assertEquals ( "Limit is 200", trigger. getPolicyLimit ( ). get ( 0 ) )
assertEquals ( selectedInterval. getName ( ), "Engineering" )
assertThat ( tester. request. getServletPath ( ), is ( "/" ) )
assertTrue ( msg, dynAny. equal ( dynAny2 ) )
assertTaskEvents ( task, TaskListener. EVENTNAME_COMPLETE )
assertEquals ( "Thank you!", email. getVisibleText ( ) )
Assert. fail ( "MathIllegalArgumentException expected" )
TestUtils. assertResponseStatus ( response, Response. Status. NOT_FOUND )
Assert. assertEquals ( 20., route. getActivities ( ). get ( 0 ). getEndTime ( ), 0.01 )
Assert. assertEquals ( 3, count )
assertTrue ( Script. matchNamed ( MatchType. EQUALS, "bar", null, "{ hello: null, world: null }", ctx ). pass )
Assert. assertTrue ( errors. hasErrors ( ) )
assertEquals ( mockedJobResult, jobResult )
Assert. assertTrue ( "XML are similar " + myDetailedDiff, myDetailedDiff. similar ( ) )
assertFalse ( guangdong. exists ( ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( null, annotation )
iterablesWithCaseInsensitiveComparisonStrategy. assertDoesNotContainSubsequence ( someInfo ( ), actual, sequence )
assertTrue ( handler. getLabel ( ). isUidNotSticky ( ) )
assertEquals ( singleQuotedString, ocsvTransformer. getCellContent ( unQuotedString ) )
assertThat ( result, is ( nullValue ( ) ) )
assertThat ( parent. getNodes ( ). hasNext ( ), is ( false ) )
assertEquals ( Location. LOCATION_LHS_INSIDE_CONDITION_START, getLastIntegerValue ( parser. getEditorInterface ( ). get ( 0 ). getContent ( ) ) )
assertEquals ( 1.2, cs. getX ( 0 ), TOL )
assertTrue ( notify. matches ( 10, TimeUnit. SECONDS ) )
Assert. assertEquals ( "12345.6789", getCell ( 0, 10 ). getPureText ( ) )
Assert. assertTrue ( conceptService. isRetired ( drug. getUuid ( ) ) )
Assert. assertEquals ( "[3, 2, 4, 1, 5]", result. toString ( ) )
assertEquals ( "OK", reply )
Assert. assertTrue ( mod. exists ( ) )
assertEquals ( "file", sut. getFile ( ). getName ( ) )
assertEquals ( "\\"a\\",\\"b\\\\c\\"" + recordSeparator, sw. toString ( ) )
assertEquals ( AbstractActionOut. TYPE, actionOut. getType ( ) )
assertEquals ( "https://127.0.0.1:6443", builder. getBasePath ( ) )
assertMsg ( )
assertEquals ( expectedArg, parsedArg )
assertNull ( objmap. get ( "field_unknown" ) )
assertThat ( PrettyTime. of ( Locale. GERMANY ). withReferenceClock ( clock ). printRelative ( PlainTimestamp. of ( 2014, 9, 1, 14, 0 ). atUTC ( ), ZonalOffset. UTC ), is ( "in 8 days" ) )
assertThat ( deletes, StreamMatchers. empty ( ) )
assertQuotientReminder ( MultivariateDivision. divideAndRemainder ( dividend, divider ), dividend, divider )
assertThat ( redisServer. isActive ( ), is ( true ) )
assertTrue ( writer instanceof SLDWriter )
assertEquals ( "Max Time", result )
assertAllCommandsUsed ( )
assertEquals ( car, ( Object ) car )
assertEquals ( cVector, normalizedCVector )
assertNull ( myDtoInstance )
assertEquals ( "", writer. toString ( ) )
assertEquals ( PathJoint. class, o. getClass ( ) )
assertThat ( representation. getString ( "display" ), is ( "200.05" ) )
assertEquals ( ModelInterceptor. exists ( DummyModel. class. getMethod ( "exists", Object [ ]. class ), model2. getId ( ) ), true )
Assert. assertEquals ( expected, actual )
assertEquals ( endpoint. filterLevel ( ), Constants. FilterLevel. Medium )
assertMatch ( e, s )
assertEquals ( 200, connection. getResponseCode ( ) )
assertEquals ( expected, sql [ 0 ]. toSql ( ) )
assertThat ( orderLine. getAdvancePercentage ( ), sameValueAs ( division. divide ( 20, 100 ) ) )
assertEquals ( 1, cc. size ( ) )
assertEquals ( builder. getMaxEvaluations ( ), 20000 )
assertFalse ( accepted )
assertFalse ( validationErrors. hasErrors ( ) )
assertEquals ( "", doc. text ( ) )
assertEquals ( actualMime, "bundle/mime-from-bundle" )
assertEquals ( 2, results. size ( ) )
assertEquals ( filter, config. getBuildConfiguration ( ). getFilter ( ) )
Assert. assertEquals ( Sets. newHashSet ( 1 ), parser. getSecureResultIndices ( ) )
assertEquals ( "foo", jc. get ( "51" ) )
assertEquals ( true, result )
assertTwoInstancesAreStarted ( firstProcessDefinition, secondProcessDefinition )
assertTrue ( Double. isNaN ( victim. get ( ) ) )
assertTrue ( plan. getRootNode ( ) instanceof ProjectNode )
assertEquals ( 0, profile. getIdTokenString ( ). length ( ) )
Assert. assertEquals ( "Podolski", result )
assertEquals ( 1, result )
assertTrue ( expectedDirection. equals ( reflectedDirection ) )
assertOut ( "var /** @type {boolean} */ a = isFinite(1000000.9)" )
assertEquals ( FAILING, collector. getStatus ( ) )
assertNull ( nullResourceComposite. getValue ( ) )
assertTrue ( "Expected stop to take at least as long as there is no active queue", timeTaken >= stopTimeout && timeTaken < stopTimeout )
result. assertIsSatisfied ( )
assertThat ( iframeStr, is ( "<iframe src=\\"//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js?id=iframe-iframe" ) )
Assert. assertEquals ( 202, response. getStatus ( ) )
assertStat ( result )
assertEquals ( "Response body is not correct.", SimpleSecuredServlet. RESPONSE_BODY, Utils. makeCallWithBasicAuthn ( servletUrl, "elytron1", "password", 200 ) )
assertEquals ( "Should have not constraint violation", 0, validator. validate ( product ). size ( ) )
assertTrue ( language. contains ( country ) )
assertThat ( uri. getPath ( ), endsWith ( "testing" ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION, testConfiguration. get ( "dfs.replication.initial" ) )
Assert. assertEquals ( 2, patients. size ( ) )
assertTrue ( a. equals ( b ) )
Assert. assertTrue ( pss. toString ( ). contains ( "true" ) )
assertEquals ( expResult, result )
assertNotEquals ( otherHashCode, foreignableFieldHashCode )
assertThat ( step. getScreenshots ( ). size ( ), is ( 0 ) )
assertNotNull ( emptyChain )
assertSame ( val, ConfigUtils. getObject ( config, null, "no-object", "some-object" ) )
assertClean ( servicesB )
assertThat ( errors, not ( hasFieldErrors ( "familyName2" ) ) )
assertTrue ( configurationDeserialized )
assertEquals ( HTML, result )
Assert. assertEquals ( s, klass. getFieldInfo ( s ). getValue ( ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient. addPotentialOwnerUsers ( BAD_CONTAINER_ID, task. getId ( ), Arrays. asList ( "Not a valid container", "Container" ), add ), "Container '" + BAD_CONTAINER_ID + "' is not instantiated or cannot find container for alias '" + BAD_CONTAINER_ID + "'", "Container '" + BAD_CONTAINER_ID + "' is not instantiated or cannot find container for alias '" + BAD_CONTAINER_ID + "'" )
Assert. assertEquals ( "true", result )
assertThat ( exitStatus. exitStatus ( ), is ( equalTo ( ( byte ) 0x0 ) ) )
Assert. assertTrue ( passwordResetPage. checkSuccess ( ) )
assertThat ( applied, is ( RuntimeContext. DEFAULT ) )
assertEquals ( 2, deltas. size ( ) )
assertTrue ( dashboardService. insert ( dashboardCondition, dashboardCondition2, 0L ) )
assertNotEquals ( original, objectId ( "/dir" ) )
assertEquals ( "select textcat('a', 'b'), textcat('a', 'b')", result )
assertEquals ( 0.5, c. getLinks ( ). get ( 0 ). getValue ( ), 0.01 )
assertEquals ( Status. NOT_FOUND. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( "000202", request. getSequence ( ) )
assertRequest ( "POST", "Message/" )
assertEquals ( expected, actual )
assertEquals ( "toplevel", v2Schema. getName ( ) )
assertEquals ( "<#function name ></#function>", result )
assertTrue ( transactionClosed. get ( ) )
assertEquals ( 403, r. getStatus ( ) )
assertEquals ( TEST_CONTENTS, contents )
Assert. assertEquals ( "4", head. getId ( ) )
assertEquals ( 0, requestParameterService. getAll ( ). size ( ) )
assertThat ( resources, contains ( patientId, orgId ) )
assertEquals ( "test", val )
assertEquals ( Arrays. asList ( "testa", "testb" ), list )
Assert. assertTrue ( Point3d. distance ( realSet1 [ i ], point2 ) < 0.001 )
assertThat ( terminologyService. isSupported ( cp ), is ( true ) )
Assert. assertNotNull ( cacheConfig )
assertNull ( runtimeService. createProcessInstanceQuery ( ). processInstanceId ( processInstance. getId ( ) ). singleResult ( ) )
assertEquals ( ( byte ) 34, s. m0_0 ( ) )
assertEquals ( TPM2, ph. getTpm2Timeout ( ) )
assertThat ( readEmailAddress, is ( equalTo ( ADDRESS ) ) )
assertEquals ( 5, interfaces. size ( ) )
assertFalse ( result )
assertEquals ( "(deployment1 in " + deploymentId1 + ", deployment2 in " + deploymentId2 + ")", dataSetLookup. getFirstFilterOp ( ). getColumnFilterList ( ). get ( 0 ). toString ( ) )
assertEquals ( "Expected 4 results!", 4, n )
assertFloatMatrixEquals ( result, solution )
assertExec ( "Methods: toString, toString, toStr, listObject()", methods, String. class, "toStr" )
assertEquals ( revision. json ( ), "{\\"_id\\":1,\\"_rev\\":2}" )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( s, Murmurhash3. murmurhash3 ( s ) )
assertEquals ( "CONTENT", r. get ( String. class ) )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��***��\\n" + "��***��\\n" + "��***��\\n" + "��***��\\n" + "�尖��\\n" )
Assert. assertTrue ( contains )
assertTrue ( container. children. isEmpty ( ) )
assertTrue ( result )
assertTrue ( dump, dump. contains ( JP_TEXT ) )
Assert. assertEquals ( 5, analyser. getLoadRightAfterActivity ( route. getEnd ( ), route ). get ( 0 ) )
TestUtil. assertEquals ( exp, getSpans ( ) )
assertEquals ( 16, profile. dashBoards [ 0 ]. widgets. length )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.b = function() {\\n  var /** @type {custom.TestProxy} */ a = new custom.TestProxy();\\n  a.setProperty('foo', 'bar');\\n}" )
assertThat ( ( double ) stopwatch. getMinimumDuration ( ). getDuration ( TimeUnit. MILLISECONDS ), is ( closeTo ( 50, 50 ) ) )
assertTrue ( axioms. containsSubProperty ( chain, E ) )
assertEquals ( "Base for integers is wrong", Double. valueOf ( 3 ), parsed )
assertEquals ( - 6, values. get ( new MultivectorComponent ( "out", 0 ) ), 10E-3 )
assertFalse ( handler. process ( null, consumer, Direction. In, null, null ) )
assertEquals ( toUpdated. getId ( ), 1 )
assertNotNull ( result )
assertThat ( cursor. asListRemaining ( ), hasItems ( "actors/Keanu", "actors/Hugo", "actors/Carrie", "actors/Laurence", "actors/Carrie", "actors/Carrie", "actors/Carrie", "actors/Charlize", "actors/Carrie", "actors/Charlize" ) )
assertTrue ( equals ( stat, nativeEntity ) )
assertThat ( axioms, hasSize ( 0 ) )
assertGridIndexes ( data, new boolean [ ] { true, true, true }, new boolean [ ] { false, false, false }, new Expected [ ] [ ] { { Expected. build ( false, 1, "(0, 2)" ), Expected. build ( false, 1, "(1, 0)" ), Expected. build ( false, 1, "(1, 1)" ) }, { Expected. build ( true, 0, "(0, 2)" ), Expected. build ( false, 1, "(0, 2)" ), Expected. build ( false, 1, "(1, 2)" ) } } )
assertEquals ( 2, p. getDirectiveByType ( PluginTypesDirective. class ). size ( ) )
assertEquals ( LocaleHelper. getLocale ( ), TEST_LOCALE_COUNTRY )
assertThat ( now. getZone ( ), is ( DateTimeZone. forID ( "UTC" ) ) )
assertEquals ( 1, one. getAsDouble ( ), 0 )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( pendingAddOpReceived )
assertEquals ( "Method #toString is wrong", "GeoDistanceCondition{boost=0.4, field=name, latitude=-1D, longitude=9, minDistance=3km}", condition. toString ( ) )
assertEquals ( expResult, result )
assertThat ( properties. getPaths ( ). size ( ), is ( 0 ) )
assertThat ( config. getMaxFileSizeBytes ( ), equalTo ( maxFileSizeBytes ) )
Assert. assertNull ( getReplHeader ( ) )
assertTrue ( "Accumulator was not found in tree after release", weakMap. containsKey ( accumulator ) == null )
assertArrayEquals ( expectedResult, output )
Assert. assertEquals ( "[1, 2, 3, 4, 5]", result. toString ( ) )
assertThat ( generatedReportText, containsString ( "<error>Oh nose!</error>" ) )
assertEquals ( liveSearchDropDown. isSearchEnabled ( ), false )
assertEquals ( 4, results. size ( ) )
Assert. assertEquals ( test, expected )
assertThat ( queryMapping. transformOutboundDatabaseName ( metaStoreMapping, query ), is ( "SELECT " + PREFIX + "bdp.hellobdp1(), " + PREFIX + "bdp.hellobdp2()" ) )
assertEquals ( project. getName ( ), cardRepository. findById ( eventId ). getTitle ( ) )
this. assertLoadBlobViaTuples ( tuples, true, true )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "Value: b", resp. getResponseBody ( ). trim ( ) )
assertEquals ( RDF. type. getId ( ), editor. getValue ( ) )
assertTrue ( tpk. getWindowing ( ) instanceof Time )
assertEquals ( TMP, A )
assertEquals ( group, identity )
assertEquals ( "Should have found 2 converters", 2, converters. size ( ) )
tester. assertRenderedPage ( TestClient. class )
assertEquals ( asList ( asList ( 1, 0, 0 ), asList ( 2, 0, 0 ), asList ( 3, 0, 0 ), asList ( 4, 0, 0 ), asList ( 5, 0, 0 ), asList ( 6, 0, 0 ) ), result )
assertFalse ( property. isPersistent ( ) )
assertNull ( log )
Assert. assertEquals ( "TestHello", cdiEjb. sayHello ( ) )
assertOutput ( expected )
assertTrue ( out. contains ( "user@address:owner@127.0.0.1:19000/api/user/logs/application_0_0001/container_0_0001_01_000001" ) )
assertStack ( new Object [ ] { Integer. valueOf ( 3 ), null }, stack )
Assert. assertThat ( actualUrl, containsString ( MAIL_OF_ENABLED_USER ) )
assertEquals ( status, new Docker18Status ( ). process ( null, status, repo ) )
assertEquals ( 10, vrp. getJobs ( ). get ( "1" ). getSize ( ). get ( 0 ) )
assertEquals ( 1, result. size ( ) )
assertEquals ( origItemsJson, outJson )
assertTrue ( "Failed to start the DS Client", result )
assertThat ( schema, allOf ( hasEntry ( is ( UNKNOWN ), hasProperty ( "predicates", allOf ( hasItem ( predicate ( ). withName ( PROP_I ). withDirection ( OUT ). withReferenceCount ( 1 ) ) ) ), hasEntry ( is ( UNKNOWN ), hasProperty ( "predicates", allOf ( hasItem ( predicate ( ). withName ( PROP_I ). withDirection ( OUT ). withReferenceCount ( 1 ) ) ) ) ) ) ) )
Assert. assertEquals ( expected, f. value ( i ), 0d )
assertThat ( targetSubdirectory, is ( expectedTargetSubDirectory ) )
assertThat ( dummified. getAttributes ( ), contains ( new RpslAttribute ( "inetnum", "193.0.0.0 - 193.0.7.255" ), new RpslAttribute ( "netname", "RIPE-NCC" ), new RpslAttribute ( "descr", "RIPE Network Coordination Centre" ), new RpslAttribute ( "descr", "Amsterdam, Netherlands" ), new RpslAttribute ( "country", "NL" ), new RpslAttribute ( "admin-c", "JDR-RIPE" ), new RpslAttribute ( "admin-c", "BFD-RIPE" ), new RpslAttribute ( "tech-c", "OPS4-RIPE" ), new RpslAttribute ( "notify", "ncc@ripe.net" ), new RpslAttribute ( "status", "ASSIGNED PI" ), new RpslAttribute ( "source", "TEST" ) ) )
Assert. assertEquals ( 0, set. getSize ( ) )
assertTrue ( problemState )
assertEquals ( 1, newSize - initialSize )
assertThat ( aClass. getCompilationUnitAsString ( ), equalToIgnoringWhiteSpace ( expectedResult ) )
assertThat ( view, is ( nullValue ( ) ) )
assertEquals ( callingClass. getName ( ), "java.lang.CallingClass" )
Assert. assertTrue ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isInfoEnabled ( ) )
assertInjectsCollectionsOfCollaborators ( exampleTest. objectUnderTest )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertEquals ( 17, map. size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 1, warnings. size ( ) )
assertFalse ( rootDAO. existsDatabase ( DB_NAME ) )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 )", select. getQuery ( ) )
assertThat ( problems. size ( ), is ( 0 ) )
assertEquals ( 10, count )
assertEquals ( "", result )
assertThat ( output. toString ( ), is ( "/* error-message */\\n" ) )
Assert. assertEquals ( expect_sql, sql )
assertThat ( ChronoFormatter. ofPattern ( "yyyy", PatternType. CLDR, Locale. ROOT, CalendarYear. chronology ( ) ). format ( cy ), is ( "2016" ) )
assertEquals ( 0.0001, r, 0.00001 )
assertThat ( out. toPlainString ( ), startsWith ( "0.05000000" ) )
assertCheckScopesFailForOtherScopes ( ScopePathType. READ_PUBLIC, ScopePathType. ACTIVITIES_READ_PUBLIC, ScopePathType. AFFILIATIONS_READ_PUBLIC, ScopePathType. FUNDING_READ_PUBLIC, ScopePathType. ORCID_PATENTS_READ_PUBLIC, ScopePathType. PEER_REVIEW_READ_PUBLIC, ScopePathType. ORCID_WORKS_READ_PUBLIC, ScopePathType. ORCID_BIO_READ_PUBLIC, ScopePathType. ORCID_WORKS_READ_PUBLIC, ScopePathType. PERSON_READ_PUBLIC, ScopePathType. ORCID_BIO_READ_PUBLIC, ScopePathType. PEER_REVIEW_READ_PUBLIC, ScopePathType. PEER_REVIEW_READ_PUBLIC, ScopePathType. ORCID_WORKS_READ_PUBLIC, ScopePathType. PEER_REVIEW_READ_PUBLIC, ScopePathType. READ_PUBLIC )
assertEquals ( 5, actualEntries. size ( ) )
assertNotNull ( methodInjectable. getInjectionTarget ( ) )
assertEquals ( "OFF", level. toString ( ) )
assertThatWritableIs ( false )
assertTrue ( "DataField clone passed", dataFieldCopy. equals ( dataFieldOriginal ) )
assertEquals ( topicServiceImpl. getTopcicCount ( ), test )
JSONAssert. assertEquals ( expected, flowsJson, false )
Assert. fail ( "The MBean call should have failed" )
assertEquals ( 0, firehoseItemCount )
assertThat ( wrapped, is ( equalTo ( this. pagedDataRows ) ) )
assertNull ( principal )
assertEquals ( 10, totalNumberOfLines )
assertThat ( PlainTimestamp. of ( date, time ). getCalendarDate ( ), is ( date ) )
assertEquals ( expectedKeys, globalTags )
assertEquals ( "Value {1}", result )
Assert. assertEquals ( "Incorrect condition", "((WTextField=\\"1\\" or (WTextArea=\\"2\\") and (WDropdown=\\"3\\") or WMultiSelect=\\"4\\"))", builder. build ( ). toString ( ) )
assertEquals ( "1 minute 1 seconds", repairStatus. getDuration ( ) )
assertEquals ( CONSTRUCTOR_DECLARATION, sink. result ( ) )
assertEquals ( cls. getNNF ( ), nnf )
assertEquals ( ImmutableList. of ( new QuotedID ( "ALMAES001.IDART", "ALMAES001.UPC", "ALMAES001.PVP1", "ALMAES001.PVP2", "ALMAES001.PVP3", "ALMAES001.PVP4", "ALMAES001.PVP5", "ALMAES001.FECALTA", "FECBLO1", "LESFO001.PRECIOFINAL", "ALMAES001.IDART" ) ), res )
Assert. assertEquals ( threadName, doAsync. get ( ) )
Assert. assertEquals ( 0, doc. getFirstPage ( ). getResources ( ). getPdfObject ( ). size ( ) )
assertEquals ( "1.3.0", vers )
assertThat ( outputTopic, equalTo ( serializedInputValues. stream ( ). map ( Bytes :: toLong ). collect ( toList ( ) ) ) )
assertEquals ( 10000, connStr )
assertNotNull ( entryRelationship )
assertFalse ( ref. requires ( ) )
assertGenerators ( result, generator. getClass ( ) )
assertEquals ( nrOfProcessInstances * 2, activityService. createActivityBehaviorQuery ( ). activityBehaviorKey ( "A" ). count ( ) )
assertEquals ( "ODataDemo.ODataDemoFunctionImport", fullyQualifiedFunctionImportName )
assertEquals ( "9208675309", parsedTelePhoneNumber )
assertEquals ( OperatingSystem. MAC_OSX, OperatingSystem. get ( ) )
Assert. areEqual ( 1, rownum, "验证验证" )
assertEquals ( "Expected 0 results!", 0, n )
assertThat ( terminologyService. isSubclassOf ( c1, c2 ), is ( false ) )
assertTrue ( fortyNinersSuck. after ( superBowlXLV ) )
assertTrue ( output. contains ( "<!DOCTYPE html PUBLIC \\"-//W3C//DTD XHTML 1.0 Strict//EN\\" \\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\">" ) )
assertEquals ( Boolean. TRUE, validator. isValid ( "false" ) )
assertEquals ( r1, r2 )
assertTrue ( skillConstraint. fulfilled ( insertionContext ) )
assertThat ( result, is ( false ) )
assertThat ( isTransactionRelated, is ( false ) )
assertMockEndpointsSatisfied ( )
assertTrue ( prefs. matches ( t ) )
Assert. assertArrayEquals ( expected, actualNames )
Assert. assertNotNull ( t )
assertThat ( result. _id, equalTo ( object. _id ) )
Assert. assertEquals ( "Value is incorrect", map ( OFFSET_0_STRING, "test" ), value )
assertThat ( printer. toString ( ), is ( "1970-01-01 00:00:00" ) )
assertResultSet ( res )
assertEquals ( x, z )
assertTrue ( mockedProvider. getExternal ( ) )
assertEquals ( violations. size ( ), 0 )
assertNotNull ( Worker. fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( expResult, result )
Assert. fail ( "Should throw IllegalStateException" )
Assert. assertNotNull ( token )
assertEquals ( 1.2, cs. getX ( 0 ), TOL )
Assert. assertEquals ( 1, countNumberOfOccurence ( fullyQualifiedName, "adm2Name" ) )
assertEquals ( ( short ) 0, mutNum. shortValue ( ) )
assertEquals ( response, webRespose )
assertTrue ( latch. await ( 4, SECONDS ) )
assertThat ( of, is ( "target/test-app-1/target/test-classes/test-app-1.jar" ) )
assertEquals ( "110", converter. getAsString ( null, null, testEntity ) )
assertCapturedMessage ( eventMessage ( "sess2", "/topic", "eventMessage" ) )
assertEquals ( 0, flowFileQueue. size ( ) )
assertEquals ( SimpleScore. of ( 42 ), scoreDirector. calculateScore ( ) )
assertEquals ( "bar", objectColumn. getId ( ) )
Assert. assertEquals ( "�驻�� 3 砖注�转", t. format ( new Date ( 0 ) ) )
assertEquals ( "blob mapper serialization is wrong", expected, actual )
assertOut ( "with (a)\\n  b;" )
assertEquals ( "AB", mat. group ( ) )
assertEquals ( "Greetings Tenka.", response. body ( ). asString ( ) )
assertTrue ( yt. getCaptions ( video ). size ( ) > 0 )
assertTrue ( "Random braces - three", "Paired { begin an escaped sequence". equals ( result ) )
Assert. assertTrue ( children. size ( ) > 0 )
assertEquals ( "1 写薪� �邪蟹�邪蟹", t. format ( then ) )
assertEquals ( String. class, con. getParameterTypes ( ) [ 0 ] )
assertTrue ( Files. exists ( reconstructed ) )
assertFalse ( jxm. isValid ( ) )
assertTrue ( ParseUtil. paramClassesMatch ( false, memberClassList, sigclassList, true ) )
Assert. assertEquals ( 0, uniqueUnits. size ( ) )
assertEquals ( 200, response. getStatusCode ( ) )
assertEquals ( s_expected_1, Hex. toHexString ( item1. getData ( ) ). toUpperCase ( ) )
assertEquals ( "238 9 10 104 141 254 208 129 35 47 254", visualized )
assertNull ( result )
assertEquals ( ResultType. ERROR, result. getType ( ) )
Assert. assertTrue ( this. ontologyService. getReindexing ( this. ontology ). isEmpty ( ) )
assertEquals ( 1, runtimeService. createProcessInstanceQuery ( ). processInstanceId ( processInstance. getId ( ) ). count ( ) )
assertTrue ( abc. size ( ) == 3 )
assertMockEndpointsSatisfied ( )
assertEquals ( wrappedTemplate + " )", test. build ( ) )
assertEquals ( parent. relativize ( fixture ), fixture )
assertThat ( target, notNullValue ( ) )
assertEquals ( mRNAPos, cds )
assertNull ( myTestInstance. restart ( b ) )
assertThat ( isPresent, is ( false ) )
assertEquals ( change, data. addAxiom ( data ) )
assertTrue ( "Sortable column should be removed", sortable )
Assert. assertEquals ( 404, response. getStatus ( ) )
Assert. assertEquals ( 2, testedStore. getAllFeatures ( ). size ( ) )
assertEquals ( "tajo.rootdir", consoleResult )
assertTrue ( "Credential store should be created", ops. exists ( TEST_CREDENTIAL_STORE_ADDRESS ) )
assertEquals ( "addon count was changed", addonCount + 1, registry. getAddons ( ). size ( ) )
assertEquals ( 2, c. getRowCount ( ) )
assertions. contains ( )
assertTrue ( isDisabled )
this. assertList ( response )
Assert. assertEquals ( "some [img]text", formatter. format ( "some [img]text", defaultOptions ( ) ) )
assertNotNull ( AuthCallsCredentialListMapping. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( "Expected 0 results!", 0, n )
assertFalse ( entry. containsAttribute ( "administrativeRole" ) )
assertEquals ( "application/json;odata.id=/Photos(11)", request. getURI ( ). toString ( ) )
assertEquals ( expectedDescription, description )
Assert. assertEquals ( "DB number is not correct", 2, ( int ) redisURI. select ( ) )
assertEquals ( in. value, out. value )
assertTrue ( output. contains ( "<!DOCTYPE html PUBLIC \\"-//W3C//DTD XHTML Basic 1.1//EN\\">" ) )
assertNotNull ( getFixture ( ). review ( null, master, slave ) )
assertArrayEquals ( TEST_DATA, actualBytes )
assertEquals ( Jmp. ARRAY_RUNTIME_TYPE, jmp. getTypeRuntimeType ( new StringBuilder ( ). append ( "VARCHAR" ). append ( "VARCHAR" ). toString ( ) ) )
maps. assertHasEntrySatisfying ( info, actual, null, isNull )
assertPutResult ( ResponseCode. MESSAGE_ILLEGAL )
assertThat ( email. getSubject ( ), is ( "ErrorMail" ) )
assertEquals ( text, adapter. getStringAt ( 2, 2 ) )
Assert. assertEquals ( 200, li. getValue ( 50 ), 1e-5 )
assertArrayEquals ( array1, array )
assertThat ( "��浠���������������������������������������������������������������������������������
assertEquals ( Unpooled. EMPTY_BUFFER, frame )
Assert. assertEquals ( result, collector. output. get ( Utils. DEFAULT_STREAM_ID ) )
assertEquals ( 83, x. value )
assertThatLineHasBeenDisplayed ( "Nazwa: filename.txt" )
assertEquals ( "Test of \\"quotes '' 'in quotes\\" in title", actualResult )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Stream>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Stream>", elem. toXml ( ) )
assertEquals ( "check by-pass", Status. BYPASS, impl. getStatus ( ) )
assertNotNull ( fixture )
Assert. assertTrue ( e. getObs ( ). size ( ) > 0 )
assertEquals ( localeImportHandler. loadPropertiesByXml ( repFileBundleMock ). size ( ), 1 )
assertThat ( unlockKey. getId ( ), notNullValue ( ) )
test. assertResult ( )
assertThat ( z_F4JInternalParseUtil. getPrimitiveLong ( "Long", json ), is ( 0l ) )
assertEqualLines ( "invalid renaming in a package", getFileContents ( getOutputTestFileName ( folder ) ), cu. getSource ( ) )
assertThat ( testDataSourcePath. getInstanciatedPath ( "${user.dir}/simple-semicolon-data.csv" ), is ( "/home/john/work/simple-semicolon-data.csv" ) )
assertSame ( node, transform ( node ) )
assertEquals ( fileRequest. getByte ( Files. size ( file ) - 1 ), ( byte ) 255 )
assertNull ( c )
assertEquals ( expResult, result )
assertEquals ( expression, new TomlWriter ( ). write ( expression ) )
assertEquals ( "http://localhost/?foo=test", uri. toString ( ) )
assertNotNull ( ShortCode. fetcher ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
Assert. assertEquals ( 403, response. getStatus ( ) )
Assert. assertEquals ( "cloneed attr did not match original", attr, clonedAttr )
assertEquals ( body. toString ( ), "hello" )
assertTrue ( permitted )
assertEquals ( Integer. MAX_VALUE, victim. readInt ( ) )
assertEquals ( selector. getHref ( ), queriedAnnotation. getHref ( ) )
Assert. assertSame ( bitmap, ic. getBitmap ( ) )
Assert. assertXMLEqual ( "Invalid WSDL returned", expectedDocument, result )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertNull ( sourceLoader )
assertEquals ( 3, count )
assertEquals ( identifier1, identifier1 )
assertObjectEquals ( "[{f:'a'},{f:'1'},{f:'true'}]", p. run ( bs, in, sa ) )
assertThat ( "no modifications", checkModifications ( artifacts ), is ( false ) )
assertEquals ( Arrays. asList ( 5 ), procedureExecution. getOutputParameterValues ( ) )
assertTrue ( "Closure class 'GO:0004004' not in class 'BFO:0000050' in class 'BFO:0006200'", found )
assertTrue ( s1. equals ( s2 ) )
assertArrayEquals ( d. toString ( ). getBytes ( ), d. asTextBytes ( ) )
assertEquals ( 2, rv. size ( ) )
assertRequest ( "POST", "Call/%s/Play/", callId )
assertThat ( ValidatorUtil. formatMessages ( validate ), validate. size ( ), is ( 0 ) )
Assert. assertTrue ( store [ 0 ]. acquireLock ( k, c1, null, tx [ 0 ] [ 0 ] ) )
assertEquals ( 1, session. from ( $ ( noteVar ) ). where ( where ). list ( $ ( noteVar ) ). size ( ) )
assertNotNull ( result )
assertGreater ( "Spacer should've been pushed down (oldTop: " + oldTop + ", newTop: " + newTop + ")", oldTop, newTop )
assertFalse ( Files. isHidden ( path ) )
assertEquals ( Math. sqrt ( 5 ), p1. distance ( r ), PRECISION )
assertThat ( event, is ( expected ) )
assertEquals ( "pub field value", objmap. get ( "field_pub" ) )
assertEquals ( "#23C48E", widget. color )
assertEquals ( expected. getTime ( ), actual. getTime ( ) )
assertTrue ( "Value descriptor controller unable to update value descriptor", controller. update ( valueDescriptor ) )
Assert. assertNotNull ( node )
assertEquals ( p1, p2 )
assertThat ( fieldDefinition. createElementString ( actual ), Is. is ( expected ) )
assertTrue ( writer. toString ( ). contains ( "public Class<T> entityField = Property<T> collectionField = Property<T> listField = Property<T> listField, T> setField = Property<T> setField, T> mapField = Property<T> mapField = Property<T> mapField</T>;" ) )
assertTrue ( correct. get ( namedEntity. getLabel ( ) ). equals ( disambiguatedURL ) )
assertEquals ( expected, actual )
Assert. assertThat ( e. getMessage ( ), containsString ( expected ) )
assertEquals ( testStr, dpidStr )
Assert. assertEquals ( "/lincoln/orders/24", path. build ( map ) )
assertThat ( sheet. sheetName, is ( "���������������������������������������������������������������������������������
assertEquals ( expected, actual )
Assert. assertEquals ( warning, result. getFirstHeader ( "Warning" ). getValue ( ) )
context. assertTrue ( gotit. get ( ) )
assertTrue ( count > 0 )
assertTrue (! _event. hasStartTime ( ) )
assertEquals ( expected, actualQuery )
assertEquals ( 0.5, Capacity. divide ( cap1, cap2 ), 0.001 )
assertSeen ( visible )
assertThat ( databaseHelper. lookupObject ( ObjectType. PERSON, "PP1-TEST" ). containsAttribute ( AttributeType. CHANGED ), is ( true ) )
assertCapacityUnitEqual ( cu, new CapacityUnit ( 1, 0 ) )
assertNotNull ( result )
runner. assertAllFlowFilesTransferred ( PutHiveQL. REL_RETRY, 1 )
assertEquals ( mockJaxbList, response )
assertEquals ( expResult, result, 0.000001 )
assertThat ( result. getValueForAttribute ( AttributeType. ROUTE ). toString ( ), is ( "212.166.64.0/19" ) )
assertEquals ( "file Name,fileName1,fileName2", message )
assertEquals ( "Inconsistent input", d. get ( ROW_INDEX_KEY ), ( Double ) 1.0 )
assertNull ( encodedText. decode ( ) )
assertNotNull ( "Social Profile list is null", profiles )
assertThat ( appl, is ( JavaSignatureComparator. MATCH_WILDCARD ) )
assertThat ( findFeature ( features, "StatusNotification" ), is ( instanceOf ( StatusNotificationFeature. class ) ) )
assertThat ( isEquals, is ( true ) )
assertNodeExists ( DEEP_WILDCARDED_PATH )
assertEquals ( userKey1, userKey2 )
assertThat ( reporters, not ( sameInstance ( reporters2 ) ) )
assertThat ( option, is ( new IntOption ( 100 ) ) )
Assert. fail ( "Caught unexpected exception: " + e. getClass ( ). getSimpleName ( ) )
assertEquals ( caseDefinitionKey, activity. getKey ( ) )
assertEquals ( "https://www.test.com/logins/" + test, titaProject. getIssueTracker ( ). getUrl ( ) )
Assert. assertEquals ( expected, user )
assertEquals ( child, mStore. getChild ( mRoot. getId ( ) ) )
Assert. assertEquals ( shifted. getPos ( ), 89 )
assertNotNull ( result )
assertEquals ( expectedQuery, actualQuery )
assertThat ( description. toString ( ), is ( "a stage that completed to a value that was <2>" ) )
assertEquals ( expect, src )
assertTrue ( workTree. contains ( fi ) )
assertEquals ( expectedQuery, actualQuery )
assertTrue ( files. length >= maxUpdates )
assertMockEndpointsSatisfied ( )
assertEquals ( expected, actual )
assertNoProblems ( )
assertFiles ( "audit", "audit.1970-01-01.2", "audit.1970-01-01.3" )
assertions. doesNotContain ( values )
editor. assertProblems ( "bogus|Unknown property" )
assertExpectedResponse ( r, Response. Status. OK. getStatusCode ( ), Boolean. FALSE. toString ( ) )
assertNotNull ( result )
assertNotNull ( header )
assertThat ( rendered, is ( test [ 1 ] ) )
Assert. assertNotNull ( dbRangerPolicyList )
assertEquals ( 10, cap. get ( 0 ) )
assertEquals ( obj. getNetName ( ), netName )
assertEquals ( map, map2 )
assertThat ( foundResources, contains ( p1id. getValue ( ) ) )
assertTrue ( future. isCancelled ( ) )
assertEquals ( "dump is complete", dumpException )
assertEquals ( person, found )
assertEquals ( value, new Long ( value ). longValue ( ) )
assertEquals ( 0, messageLatch. getCount ( ) )
assertTrue ( r. getMap ( "map1" ). get ( "yes" ) )
assertEquals ( "13.05.2014 23:52:28", dateAsString )
Assert. assertEquals ( simpleModel, models. get ( SIMPLE_MODEL ) )
assertEquals ( "Serialized state does not match the original", state, InstantiationUtil. deserializeObject ( serialized ) )
assertThat ( query. count ( ), is ( 3L ) )
Assert. assertEquals ( testEstimated, testEstimator. getEntropy ( ), testEstimator. getEntropy ( ), 0.000001 )
assertTrue ( contextMapRef. get ( ). isEmpty ( ) )
assertEquals ( expected, query. export ( ) )
assertMessage ( "<type>FORWARDED</type>", 4 )
assertEquals ( 200, output. getStatusCode ( ) )
assertTrue ( entity. getId ( ) > 0 && entity. getDistanceFromEarth ( ) == 2400000000000000L )
assertEquals ( expectedQuery, actualQuery )
assertTrue ( result )
Assert. assertFalse ( StraightOrder. is ( p1, p2, p3, IntegerNumberSystem. getInstance ( ) ) )
assertThat ( any. contains ( DAY_OF_QUARTER ), is ( true ) )
assertEquals ( 255, result. getVoxel ( 0, 4, 0 ),.01 )
assertEquals ( "tableName", database. escapeTableName ( "tableName" ) )
assertEquals ( "Date parsing is wrong", new BitemporalDateTime ( 5L * 24L * 60L * 60L * 1000L ), mapper. readBitemporalDate ( columns, "ttFrom" ) )
Assert. assertEquals ( "content", explodeDeploymentContentAndGetOutcome ( TEST_DEPLOYMENT_NAME, CONTENT_ARCHIVE_NAME ) )
Assert. assertTrue ( optimum. getValue ( ) > 0.1 )
assertTrue ( configuration. buildDownstream )
assertPutFails ( occurrence, OntopiaRestErrors. MANDATORY_OBJECT_IS_NULL )
Assert. assertEquals ( "{\\"statusCode\\":400,\\"code\\":\\"ERR10001\\",\\"description\\":\\"ERR10001\\",\\"description\\":\\"\\"}", status. toString ( ) )
assertEquals ( "An ���awesome ��string with a few ���emojis!", result )
assertLog ( Log. VERBOSE, "test trace argument argument2" )
assertEquals ( Months. of ( - 4 ), test12. dividedBy ( - 3 ) )
assertEquals ( "value", requestImpl. getCookie ( "key" ). getValue ( ) )
assertTrue ( remotingAbstract. responseTable. containsKey ( dummyId ) )
Assert. assertArrayEquals ( convert ( convert ( rhs ) ), r )
assertFalse ( result )
assertEquals ( URI. create ( "http://example.com/test/headSub" ), uri )
assertEquals ( exp, arr2 )
assertEquals ( expected, output )
Assert. assertEquals ( car, received. getPayload ( ) )
Assert. assertTrue ( ExpectedConditions. textToBePresentInElement ( By. id ( "indexPage" ), "You arrived at index page" ). apply ( driver ) )
assertEquals ( "test", cmd. apply ( conf, args ) )
assertEquals ( ( short ) 0x8000, result )
assertEquals ( 1, constructors. length )
assertEquals ( new BigDecimal ( "1234.45" ). toBigInteger ( ), bigD. toBigInteger ( ) )
assertEquals ( "/abc", result )
assertEquals ( androidAppMetadata, ANDROID_APP_NO_DISPLAY_NAME_METADATA )
Assert. assertEquals ( dataString, new String ( read ) )
assertEquals ( true, result [ 0 ] )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertEquals ( 1, count )
assertThat ( subject. getProcessingTime ( ), is ( "2013-03-03 12:55:55" ) )
assertThat ( resolver. getResolver ( ). getResolver ( ), is ( sameInstance ( resolver. getResolver ( ) ) ) )
Assert. assertEquals ( legacyVariantString, variant. toLegacyString ( ) )
assertThat ( target. parseActionType ( ), is ( FlowActionOutputQuery. ActionType. ERROR ) )
Assert. assertTrue ( errorMessage, check. contains ( CheckUtil. CHECKSTYLE_CHECK_NAME_PREFIX + CheckUtil. HASH ) )
assertTrue ( "File handler should be created", ops. exists ( TEST_FILE_HANDLER_ADDRESS ) )
assertEquals ( 4, fixture. mark ( ) )
assertThat ( builder. toString ( ), is ( "0123" ) )
assertThat ( builder. getOptimizedMethods ( ). size ( ), equalTo ( 1 ) )
assertSame ( fieldVar, result )
Assert. assertEquals ( testEx, infEx. getCause ( ) )
assertEquals ( expected, actualQuery )
assertArrayEquals ( new Object [ ] { 5, "five" }, ( Object [ ] ) execution. next ( ). get ( 0 ) )
assertThat ( checkFailed, is ( true ) )
assertSame ( val, ConfigUtils. getMap ( config, null, "no-object", "some-map" ) )
Assert. assertTrue ( r. isLastPublishedVersionPublic ( ) )
assertEquals ( 4, indexLoader. getNumFound ( ) )
assertEquals ( "z", newVal. val. get ( ) )
assertEquals ( "test", read. getString ( db. DATA. VALUE ) )
Assert. fail ( "server-group with unrecognized property should fail" )
assertThat ( options. isANSIColorsEnabled ( ), equalTo ( true ) )
assertEquals ( expResult, result )
assertEquals ( "NaN", sb. toString ( ) )
assertEquals ( 10, all. size ( ) )
Assert. fail ( )
assertThat ( db. getUserInfo ( orderby, i ), notNullValue ( ) )
assertEquals ( nativeQuery, engine. transform ( projection ) )
assertEquals ( "<p>This is <em>Sparta</em></p>\\n", renderer. render ( document ) )
get ( uri + "/stats" ). then ( ). assertThat ( )
assertTrue ( isReady )
assertTrue ( "Act and value should be updated", checkUpdateValues ( latch ) )
assertEquals ( "Configuration of schema-repo server", properties. getProperty ( "server.url" ) )
assertTrue ( entity. isValid ( ) )
assertResponseContains ( "<div class=\\"alert alert-success\\"><img src=\\"/api/user/notification.png\\"></img></div>" )
assertArrayEquals ( uncompressed, data )
assertEquals ( "Rooted Android Data Collector", testResult )
assertSame ( cause, CRestException. handle ( e ) )
assertTrue ( result )
Assert. assertEquals ( TxMediaType. TX_STATUS_MEDIA_TYPE, content )
assertThat ( delegate. parameter ( "x", 3 ), equalTo ( 4 ) )
this. assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodemplates%252Ffruits/baobab_serviceTemplate/boundarydefinitions/properties/", "servicetemplates/boundarydefinitions/serviceTemplateWithProperties.json" )
assertEquals ( mp. getCount ( ), 2 )
assertTrue ( dest. exists ( ) )
assertEquals ( 0, exporter. getExportManifest ( ). getMetadataList ( ). size ( ) )
Assert. assertEquals ( deserializedSpec, boltSpec )
arrays. assertContains ( description, new byte [ 1 ], new byte [ 0 ] )
assertions. isNotLessThan ( expected )
assertNotNull ( "Social Friends (JSON STRING)", friends )
assertEquals ( "%F0%9F%98%83", Encoder. encode ( s ) )
assertEquals ( inStatus. getNumBytes ( ), outStatus. getNumBytes ( ) )
assertEquals ( input, nodeToStringTransformer. transform ( ) )
assertEquals ( expectedFrequency, determiner. determineFrequency ( ) )
assertNotNull ( "Messages are not null", messages )
assertEquals ( schedulingIterations * noOfAlerts, list. size ( ) )
Assert. assertEquals ( false, GeneralUtilities. firstOperator ( zero, null ) )
assertSame ( sseq, manager. getSequence ( inSid, message ) )
Assert. assertEquals ( sds, deserializedSpec )
assertEquals ( ( short ) 8, ( short ) result. getShortWrapperValue ( ) )
assertThat ( token. getType ( ), is ( PCRELexer. HorizontalWhiteSpace ) )
assertEquals ( "http://example.com:signed:0:0:owner:0:0:0:0:0:owner", builder. build ( ) )
Assert. assertFalse ( isTmp )
Assert. assertTrue ( out. contains ( "advancedcustom" ) )
Assert. assertEquals ( chave, infoEventoManifestacaoDestinatario. getChave ( ) )
assertThat ( actual, contains ( likeVertex ( ). withTimId ( "id3" ), likeVertex ( ). withTimId ( "id2" ), likeVertex ( ). withTimId ( "id1" ) ) )
assertThat ( result, contains ( 4, 5, 7, 9 ) )
assertEquals ( 33700, timeout )
assertFalse ( actualResult )
assertEquals ( "wrong result", new BigDecimal ( "14" ), expression. getValue ( ). asNumber ( ) )
assertNotNull ( result )
assertEquals ( propValue, result )
TestCase. assertTrue ( result )
assertEquals ( "aTestString", classUnderTest. getName ( ) )
assertEquals ( 4, result. size ( ) )
assertEquals ( 123 + 1, ssdbClient. incr ( "counter" ) )
assertTrue ( sink. getInvalidConfiguration ( ) )
assertEquals ( p1. getFirst ( ). subtract ( p2. getFirst ( ) ), p1. getSecond ( ). subtract ( p2. getSecond ( ) ), 0d )
assertEquals ( ZonedDateTime. parse ( "2017-10-09T09:00-07:00" ), getNextExecutionTime ( myCron, time ) )
assertEquals ( deserialized, animal )
assertEquals ( 3, searcher. search ( q, 100 ). totalHits )
assertNotNull ( stubConnectionHandle. getConnection ( CLUSTER_NAME ) )
assertThat ( rendered, is ( test [ 1 ] ) )
assertEquals ( EnumField. Size. SMALL, entity. getSize ( ) )
assertTrue ( result1 == result2 )
assertEquals ( "Basic QWxhZGRpbjpvcGVuIHNlc2VzcyBwyMrYL5RtfrmeiuuPY2", basicAccess. execute ( request ) )
assertThat ( inputStream, notNullValue ( ) )
assertEquals ( 0, messageLatch. getCount ( ) )
assertTrue ( "Button click should be logged", logContainsText ( "Button clicked!" ) )
assertEquals ( code, actualContent )
assertNotNull ( item )
assertNull ( identifiable )
assertNotNull ( SyncList. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertEquals ( currentUser, currentUser2 )
assertThat ( member. isPresent ( ), is ( true ) )
assertTrue ( Arrays. equals ( forwardBlz, manager. getRulePositions ( ) ) )
assertEquals ( "\\"1\\"", mustache. render ( Json. createReader ( new StringReader ( "[\\"a\\",\\"b\\",\\"c\\",\\"d\\",\\"e\\",\\"f\\",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\\"a\\",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,
assertConnectionString ( connectionString, "azureblob", "DefaultEndpointsProtocol=https;AccountName=mavenwagontests" )
Assert. assertFalse ( errors. hasErrors ( ) )
assertTrue ( entity. isValid ( ) )
Assert. assertEquals ( "123", result. toString ( ) )
assertEquals ( 0, violations. size ( ) )
assertNull ( proxy. getConnection ( ) )
assertEquals ( 200, resp. getStatusLine ( ). getStatusCode ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "https://api-fxtrade.oanda.com/v1/accounts/123456/trades/1800805334", service. getTradeForAccount ( tradeId, OandaTestConstants. accountId ) )
assertNotEquals ( randBytes1. length, randBytes2. length )
assertThat ( list. size ( ), is ( not ( 0 ) ) )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5 ) ) )
assertEquals ( 0, engineRule. getRuntimeService ( ). createProcessInstanceQuery ( ). processDefinitionId ( processInstance. getId ( ) ). count ( ) )
assertThat ( result. size ( ), is ( 3 ) )
assertThat ( stdOutContent. toString ( ), containsString ( "Project version: 1.7.0" ) )
assertFalse ( validator. validate ( connectionLimits, PUT ). passedValidation ( ) )
Assert. assertEquals ( "0", result. getReturnCode ( ) )
Assert. assertEquals ( expected, quickTypeDependencyList )
assertTrue ( hv > 0.65 )
assertArrayEquals ( refar, d. getResult ( ) )
assertFalse ( instance. isBuilding ( event, project ) )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��***��\\n" + "��*��*��\\n" + "��***��\\n" + "�尖�尖�尖��\\n" )
assertEquals ( Arrays. asList ( null, NoteType. A, NoteType. B, NoteType. TYPE1 ), session. from ( $ ( n ) ). orderBy ( $ ( n. getType ( ) ). asc ( ) ). list ( $ ( n. getType ( ) ) ) )
assertEquals ( "SELECT TO_DATE(TEST_HIST.CREATED_AT) DT, " + "COUNT(TEST_HIST.ID) NUM_QUERIES " + "FROM H2.PUBLIC.TEST_HIST INNER JOIN H2.PUBLIC.UINFO " + "ON TEST_HIST.QBOL_USER_ID = UINFO.QU_ID " + "INNER JOIN H2.PUBLIC.ACC ON UINFO.A_ID = ACC.ID " + "WHERE ACC.CUSTOMER_NAME LIKE 'amogh' " + "AND (TO_DATE(TEST_HIST.CREATED_AT) >= " + "DATE_SUB(FROM_UNIXTIME(UNIX_TIMESTAMP()), 30) " + "AND TEST_HIST.COMMAND_TYPE = 'HiveCommand' " + "AND TEST_HIST.QLOG " + "LIKE '%\\\\\\"HIVE_VERSION\\\\\\":\\\\\\"1.2\\\\\\"%' " + "GROUP BY TO_DATE(TEST_HIST.CREATED_AT) " + "ORDER BY DT", hiveQuery )
Assert. assertEquals ( 1, ret. getId ( ) )
assertEquals ( expectedRemoteCallReturn, testRemoteCallReturn )
assertEquals ( "subscriptionId1", app. getSubscriptionId ( ) )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
assertEquals ( MediaType. APPLICATION_JSON_TYPE, response. getType ( ) )
Assert. assertArrayEquals ( convert ( expected ), solution )
assertTrue ( EqualsHelper. equals ( a, b ) )
assertEquals ( 0, found )
assertEquals ( 0, doc. getContentField ( "outData" ). size ( ) )
assertTrue ( block. isProofOf ( params. getDefaultSerializer ( ) ) )
assertThat ( counterFor ( instance. foo ( ) ), is ( 1 ) )
assertEquals ( "Required profiles", "123", new FelixPlatformBuilderF100T122 ( m_bundleContext, "version" ). getRequiredProfile ( m_platformContext ) )
assertTrue ( Graphene. waitGui ( ). withTimeout ( 60, TimeUnit. SECONDS ). until ( ExpectedConditions. textToBePresentInElementLocated ( By. className ( "message" ), UNAUTHORIZED ) ) )
Assert. assertEquals ( 1, numericValue. intValue ( ) )
Assert. assertEquals ( 0.0, diag. getEntry ( 1, 2 ), Precision. SAFE_MIN )
assertScoreAndParse ( content, null, 4 )
assertEquals ( "SELECT firstname, lastname UNION ALL SELECT a, b", statement. toString ( ) )
assertTrue ( dbStopped )
assertEquals ( "Evelyn Waugh", book. getName ( ) )
assertThat ( result, is ( sameInstance ( primaryKeysRequest ) ) )
assertEquals ( 7, tweetsByUser. count ( ) )
assertEquals ( 0, argList. size ( ) )
assertThat ( changes, containsInAnyOrder ( "s1", "s2", "s3", "s4", "p3", "p4", "p5", "s6" ) )
assertEquals ( rowChange. compareTo ( rowChange2 ), - 1 )
assertEquals ( 4, x )
assertThat ( paginate, is ( not ( nullValue ( ) ) ) )
assertEquals ( "1111111", actualPrefs. getValue ( "meat" ) )
assertEquals ( expected. getTime ( ), parsedDate. getTime ( ) )
assertThat ( thread. getName ( ), is ( "prefix-test-worker" ) )
Assert. assertEquals ( "http://localhost/things/thing", affordance. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertTrue ( result. contains ( expectedResult ) )
assertEquals ( "Find by name and device not returning a list with one reading", 1, readings. size ( ) )
assertNotNull ( jobCounters )
Assert. assertEquals ( polygon, result. getValue ( ) )
assertThat ( response. getStatusCode ( ), is ( 503 ) )
Assert. assertTrue ( count > 0 )
Assert. assertEquals ( "/wro4j/wro/", Context. get ( ). getAggregatedFolderPath ( ) )
UmaTestUtil. assert_ ( authorization )
assertEquals ( expected, actual, 0.0 )
assertThat ( coll, equalTo ( reference ) )
assertTrue ( url. toString ( ). contains ( "com.springframework.cloud.stream.runtime.LocalRuntimeImpl" ) )
assertEquals ( ref. getUri ( ). toString ( ), obj. get ( "uri" ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoVolume ( ). toString ( ) )
Assert. assertNotSame ( "Pass phrases should not match", phrase1, phrase2 )
assertionHelper. assertLocalScratchFileLengthEquals ( IRODS_TEST_SUBDIR_PATH + '/' + testRetrievedFileName, testFileLength )
assertThat ( meanTaxFactor, equalTo ( TAX_FACTOR ) )
assertEquals ( - 1, list. size ( ) )
assertThat ( result, is ( nullValue ( ) ) )
assertEquals ( "<MongoDbDatastore name=\\"name\\">\\n" + "  <hostname>hostname</hostname>\\n" + "  <database>database</database>\\n" + "  <user>user</user>\\n" + "  <password>" + PASSWORD_ENCODED + "</password>\\n" + "</MongoDbDatastore>\\n", transform ( externalized ) )
assertEquals ( expecting, found )
assertEquals ( "c", result. toString ( ) )
assertEquals ( expected, actual )
assertEquals ( out. get ( ), LARGE_NUM, 0.0 )
assertEquals ( "1.2", joynrVersionnAnnotation. major ( ) )
assertEquals ( parseCalendar ( "20131103-06:45:00", TimeZone. getTimeZone ( "UTC" ) ), dh. getCalendarAfter ( easternTime ) )
assertEquals ( getFailureMessage ( ), assertion, slice )
Assert. assertEquals ( service, ref )
assertTrue (! result )
assertEquals ( "Simple{x=foo}", new Simple ( ). toString ( ) )
assertFalse ( "Expected " + query + " to not contain group by optimization in: " + explainPlan, explainPlan. contains ( " LIMIT 3 GROUPS" ) )
assertEquals ( "   �\\t\\n   �\\r\\n", seq. next ( ) )
assertEquals ( "Wrong boundaries", singletonList ( "0123456789abcdef" ), boundaries )
assertEquals ( "a=eh:/A;b=eh:/B", q )
assertEquals ( testString. substring ( 1, 3 ), writer. toString ( ) )
assertEqualHash ( byteBuffer, murmur3a )
assertEquals ( "a8e7d89d2f5e8e0d49b9e5b9e0f5e9b9a5e791b6d", classFile. getHash ( ) )
assertEquals ( count, puts. size ( ) )
Assert. assertNotNull ( ibpartner. getBpartnerId ( ) )
Assert. assertTrue ( "instance count is not 0", instances. size ( ) == 0 )
assertEquals ( sum, victim. getSum ( ), EPSILON )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertCommandLineArgs ( "localhost", "etc/jmxetric.xml", "multicast", "true", null, "ProcessName", "SpoofName" )
assertEquals ( "a}\\n", found )
assertMessageAndPath ( constraintViolationCreationContextList. get ( 0 ), message, pathWith ( ). property ( "foo" ). property ( "bar", true, "test", null, null, null ). property ( "fubar", true, null, null ) )
assertEquals ( testBinaryReaderBuilder. buildBinaryReaderBuilderString ( ), "SIDTypeNode{b1:4, b2:5, b3:6, b4:7}" )
Assert. fail ( "Should have thrown RuntimeException" )
assertEquals ( "org.test.Hello2", new ImportsToFQCN ( imports ). resolveFQCN ( "Hello2" ) )
assertEquals ( 2d * Math. cos ( Math. E ), e. evaluate ( ), 0d )
assertThat ( rows, is ( 1 ) )
assertEquals ( 1, testCommands. size ( ) )
assertThat ( test ( mock. getVerifier ( ), "Hello1", "Hello2", "Hello3" ), hasSize ( 1 ) )
Assert. assertEquals ( expected, Strings. unCapitalizeFirstChar ( data ) )
assertEquals ( obj. toString ( ), "LSAPR_POLICY_AUDIT_EVENTS_INFO{auditEvents=null, eventAuditing=null}" )
Assert. assertEquals ( threadNum, count )
Assert. assertEquals ( "", expected, actual, 0d )
assertEquals ( LocalDate. of ( 2012, 7, 20 ), test )
assertNull ( "2MB allocation shouldn't be satisfied by LAB", alloc )
assertFalse ( "Schemas", schemaHomology. schemasMatch ( schema1, schema2, exclusionRegex ) )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertTrue ( "Output bytes are not the expected value", Arrays. equals ( new byte [ ] { 0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0D, 0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x20, 0x41, 0x52, 0x20, 0x20, 0x41, 0x0D, 0x30, 0x20, 0x52, 0x20, 0x55, 0x54, 0x55, 0x54, 0x52, 0x20, 0x20, 0x55, 0x54, 0x4C, 0x52, 0x0D, 0x20, 0x52, 0x0D }, out. toByteArray ( ) ) )
assertEquals ( clean ( input ), output )
assertThat ( route, canHandle ( ClientsController. class, "protectMe" ) )
assertThat ( logRecords, containsInfo ( PARTIAL_SCRIPT_NAMES ) )
assertEquals ( expected, actual )
assertFalse ( observer. accept ( path ) )
Assert. assertEquals ( OVERRIDING_USERNAME, callIntermediateWhoAmI ( ) )
Assert. assertEquals ( CatalogResponseMessage. INTERNAL_SERVER_ERROR, response. getCode ( ) )
assertions. containsSequence ( sequence )
assertSame ( op, new OperationBuilder ( op ). build ( ). getOperation ( ) )
assertEquals ( this. multipleCom, result. getAttributes ( ) )
Assert. assertEquals ( Explain. ExplainType. SPARK, o. explainType )
assertEquals ( "Incorrect Last Unfixed Alert", testPlatformAlert3. getId ( ), lastUnfixed. getId ( ) )
Assert. assertEquals ( 1, n )
assertMessageFound ( goodMessage )
Assert. assertEquals ( idSet. size ( ), 16000 )
assertEquals ( "file://c:/this/is/a/file.extension", result. getPath ( ) )
assertEquals ( "{\\"id\\":100,\\"version\\":10,\\"schema\\":\\"string\\"}", request. toJson ( ) )
Assert. fail ( "Missing source info allowed" )
Assert. assertEquals ( Arrays. asList ( new IntegerValue ( 1 ), new IntegerValue ( 2 ) ), res. getValues ( ) )
assertResultSet ( res )
assertEquals ( mockCell, newCell )
assertTrue ( authenticate ( ) )
assertTrue ( exception. getMessage ( ). contains ( "must be a Collection" ) )
assertEquals ( newValue, systemProperties. getProperty ( DEFAULT_PROPERTY_KEY ) )
Assert. assertEquals ( "AlbumEntityConfiguration", objectTree. get ( "configuration" ) )
this. assertVerification ( )
assertEquals ( "Base value is not properly parsed", Long. valueOf ( 3 ), parsed )
assertEquals ( 0.75, comparator. getSimilarity ( cb1. getJCas ( ), cb2. getJCas ( ) ), epsilon )
assertNotNull ( scriptStatement )
assertEquals ( expected + ".", actual )
assertThat ( sampleEntities. getTotalElements ( ), is ( greaterThanOrEqualTo ( 1L ) ) )
assertEquals ( expected, actual )
assertTrue ( server. isAuthenticated ( ) )
assertThat ( userCount, is ( 0 ) )
assertThat ( locationManager. getTableLocation ( ), is ( TABLE_LOCATION + "/partition" ) )
assertThat ( systemMessagesProvider. getClass ( ), is ( equalTo ( SystemMessagesProvider. class ) ) )
assertEquals ( "[0, 1, 3]", stack. toString ( ) )
assertEquals ( w, col. getWidth ( ) )
assertEquals ( encodedSignature, "hbGciOiJJUzI1NiJ9.eyJub25jZSI6ICI2Qm9HN1QwR0RUZ2wiLCAiaWRfdG9rZW4iOiB7Im1heF9hZ2UiOiA4NjQwMH0sICJzdGF0ZSI6ICJTVEFURTAiLCAicmVkaXJlY3RfdXJpIjogImh0dHBzOi8mVkaXJlY3RfdXJpIjogImh0dHBzOi8mVkaXJlY3RfdXJpIjogImh0dHBzOi8nHBzOi8nICJTVEFURTAiLCAicmVkaXJlY3RfdXJpIjogImh0dHBzOi8nHBzOi8mVkaXJ
assertEquals ( pp. getValue ( ), new Payload < > ( "hello1" ). getValue ( ) )
assertTrue ( found )
Assert. assertEquals ( result, true )
assertEquals ( moonsBefore - 1, moonsAfter )
assertEquals ( "org.drools.core.test.model.Person.nested1.nested2", resolver. resolveType ( "Person.nested1.nested2" ) )
assertThat ( router. parse ( url, HttpMethod. POST, null ). getMethod ( ), is ( equalTo ( method ) ) )
MatrixTestAbstract. assertMatrixEquals ( eI, c )
Assert. assertArrayEquals ( test, roundtrip, 0.001f )
Assert. assertEquals ( expectedPorts, EC2NetworkValidator. getPortRangeFromAclEntry ( networkAclEntry ) )
assertFalse ( "The same keys must not be equal", key1. equals ( key2 ) )
assertTokens ( new IntValueToken ( 0 ) )
assertEquals ( destroyableEntities, result. size ( ) )
Assert. assertEquals ( logProb, ef_logProb, 0.0001 )
assertEquals ( "http://example/s", x )
assertTrue ( ord. isCaseInsensitive ( ) )
assertEquals ( "ABC", joined )
assertNull ( cm )
assertEquals ( i, result. get ( result. size ( ) - 1 ) )
assertEquals ( expected, actual )
assertMockEndpointsSatisfied ( )
assertThat ( ( Person ) ( ( SessionEntry ) oie. getValue ( ). getObject ( ) ). getObject ( ), is ( person ) )
assertThat ( outputStream. toString ( ), is ( "data: \\n" + "[Flushed]\\n" ) )
assertTrue ( validator. validate ( EntityNames. SECTION, sectionIds ). equals ( sectionIds ) )
Assert. assertEquals ( "Wrong number of records in join result.", NUM_KEYS * BUILD_VALS_PER_KEY * PROBE_VALS_PER_KEY, numRecordsInJoinResult )
assertThat ( desc. toString ( ), is ( "was a value less than <1> or a value greater than <5>" ) )
assertEquals ( someCert, actualPublicKeyCert )
assertThat ( isValid, is ( false ) )
Assert. assertEquals ( "2014:01:01", this. mocker. getComponentUnderTest ( ). getVersion ( ) )
Assert. assertEquals ( "Hello World!", sc. saySomething ( ) )
Assert. assertNull ( tmp )
assertEquals ( "[[\\"s1\\",\\"s2\\"], [\\"s3\\",\\"s4\\",\\"s5\\"]]", ToString. toStringOf ( array ) )
assertEquals ( witnessList, tokenList )
assertNull ( dataset )
assertTrue ( job. getConfiguration ( ). getBoolean ( AvroJob. INPUT_IS_VALID, false ) )
Assert. assertTrue ( testMatcher. matches ( examplePath ) )
Assert. assertEquals ( icmsSetado, icms. getIcms90 ( ) )
assertUnderflow ( ( double ) x * ( double ) y, result, x * y )
assertTrue ( filter. matches ( operation, poolInfoMap ) )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
Assert. assertTrue ( ps1 == ps2 )
assertTrue ( "Latch not fired", cdl1. await ( 5000, TimeUnit. MILLISECONDS ) )
assertEquals ( blockers. size ( ), 0 )
doubles. assertNotGreaterThan ( description, null, 8d )
assertEquals ( mealCharge * tax * tip, calculator. calculateTotal ( mealCharge, tax, tip ), 0 )
assertThat ( testOutcome. toString ( ), is ( "App should work:Step 1, Grouped steps [Nested step 1, Nested step 2, Nested step 3]" ) )
assertFalse ( listOutput. isEmpty ( ) )
assertNotNull ( ksl. getSimilarity ( new StringBufferInputStream ( xml ) ) )
assertEquals ( new BigDecimal ( 50 ), list. get ( 0 ) )
Assert. assertEquals ( "20080226102656", userId. toString ( ) )
assertNotNull ( projectionRef )
assertEquals ( 5, client. getIdleConnections ( ) )
assertEquals ( Status. OK. getStatusCode ( ), changes. getStatus ( ) )
Assert. assertTrue ( _c. canConvertTo ( Long. class ) )
assertEquals ( trueConcept, ObsResource1_8. getValue ( obs ) )
assertThat ( ( Counter ) c1. delta ( c0 ), is ( new Counter ( 10L ) ) )
assertNotNull ( prorroga. getId ( ) )
assertSame ( a. getClass ( ), a. getClass ( ) )
assertEquals ( group1, actaul )
assertTrue ( JobUtils. isJobExecutionAbandonable ( jobExecution ) )
assertEquals ( 0, onUnbindCalled )
assertNull ( elements )
assertProcessInstanceCompleted ( processInstance )
Assert. assertTrue ( Precision. equals ( 5, MathArrays. distance ( p1, p2 ), 1 ) )
assertThat ( serialisedProblemsDetailsOf ( job ), hasItem ( rogueAi ) )
Assert. assertEquals ( "Password not set", PASSWORD, passwordCallback. getPassword ( ) )
assertTrue ( closed. await ( 2, SECONDS ) )
assertEquals ( true, result )
Assert. assertEquals ( expected, actual )
tester. assertRenderedPage ( page )
assertEquals ( userGroupDao. selectUserGroupByGroupId ( "user1" ). size ( ), 2 )
assertEquals ( expected, actual, 0.0 )
assertEquals ( 4, ret )
assertFalse ( AuthzResolver. authorizedInternal ( session, "test_groupadmin_voadmin", Arrays. asList ( createdVo, createdGroup ) ) )
assertEquals ( Long. valueOf ( 1L ), myTestInstance. updateAsync ( doc, update ). get ( ) )
assertEquals ( "1", new String ( output. getOutputStream ( ) ) )
assertEquals ( TypeInfoFactory. getUnionTypeInfo ( Arrays. asList ( TypeInfoCreator. createBoolean ( ), TypeInfoCreator. createNull ( ), TypeInfoCreator. createBoolean ( ) ) ), orcType )
Assert. assertTrue ( result )
Assert. assertThat ( userStore. size ( ), is ( 2 ) )
assertThat ( builder. getPatches ( ), hasItemsInOrder ( "REPLACE /status", "ADD /status/replicas 2", "REPLACE /status/replicas 3" ) )
assertNull ( response )
assertThat ( effect, is ( 3 ) )
assertThat ( output, is ( "dq_a2b_dq_a2b_c3b_d2q_" + ":d2q_a2b\\\\\\"c3b\\"d2q " + ":d2q_a2b\\\\\\"c3b\\"d2q " + "dsds'xyz' de c'azv\\"aeae' 'aa\\\\'aa' a'aa\\\\\\"aa'xy" ) )
assertEquals ( VendorOptionManager. getInstance ( ). getDefaultVendorOptionVersion ( ), field. getVendorOption ( ) )
assertTrue ( new File ( outputDir, "com.mysema.codegen.test.conf.SAMPLE" ). exists ( ) )
assertThat ( packet. getServers ( ), allOf ( hasItem ( "server1" ), hasItem ( "server2" ) ) )
Assert. assertNotNull ( new Bean80BindMap ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<error xmlns=\\"http://docs.oasis-open.org/odata/ns/metadata\\">" + "<message>ErrorMessage</message>" + "<details>" + "<error>" + "<code>0</code>" + "<message>ErrorMessage</message>" + "<details>" + "<error>" + "<code>0</code>" + "</details>" + "</error>" + "</error>", jsonString )
assertEquals ( expectedString, formattedDate )
assertEquals ( "", result )
assertTrue ( result )
assertFalse ( elPresent )
assertArrayEquals ( new String [ ] { "leftChild", "root" }, treeContent )
Assert. assertEquals ( childConfig. getUserID ( ), result. getUserID ( ) )
assertFalse ( game. isGameOver ( ) )
assertThat ( id. isPresent ( ), is ( true ) )
assertEquals ( "DataStore", StoreTest. XML, store. getType ( ) )
mock. assertIsSatisfied ( )
assertThat ( result, is ( equalTo ( newFile ) ) )
assertNotNull ( result )
assertThatWorkflowInstanceCompletedAfter ( workflowInstanceKey, "end-2" )
assertEquals ( notAfter, clonedCertificate. getNotAfter ( ) )
assertThat ( htmlElement. exists ( ), is ( true ) )
assertExpression ( jc, "foo.bar", "123" )
assertEquals ( "10.555", v, 1e-10 )
assertThat ( output, containsString ( "DICOM instance found:" ) )
assertEquals ( exp, z )
assertEquals ( keyExpected, keyBuilt )
assertThat ( subject. shouldProcess ( message ), is ( false ) )
assertTrue ( getNoErrorMsg ( ), result )
assertNull ( "Must be null", ovsdbBridgeAugmentation )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( text ( contents ), is ( "0a,0b,0c\\r\\n0a,1b,1c\\r\\n2a,2b,2c\\r\\n0c\\r\\n0c\\r\\n0b,0c\\r\\n0c\\r\\n0c\\r\\n0c\\r\\n" ) )
assertTrue ( output. contains ( "import_schema:" ) )
assertTrue ( c. isEnabled ( ) )
BeanAssert. assertBeanEquals ( bean, parsed )
assertEquals ( ( ( V8Object ) map. get ( "child" ) ). toString ( ), "[{\\"parent\\": {\\"child\\": {\\"parent\\": null},\\"child\\": {\\"parent\\": null}]}" )
assertEquals ( Sets. newHashSet ( "Kf3+", "Kf5+", "Kf5+", "Kf5+", "Kf3+", "Kf5+", "Kf5+", "Kf5+", "Kf5+", "Kf5+", "Kf5+", "Kf5", "Kf5", "Kf5", "Kf5", "Kf5", "Kf5", "Kf6+", "Kf6+", "Kf7+" ), moves )
Assert. assertEquals ( expected, actual )
assertThat ( initiativeInfo. hasTotalSupportCountAtLeast ( 0 ), is ( false ) )
assertThat ( result, is ( "Result From Target Endpoint" ) )
assertEquals ( expected, clusters )
assertArrayEquals ( new byte [ ] { 2880, 2880, 2880 }, data. getData ( ) )
assertNull ( reader. overflowAtoms ( ) )
assertNull ( graph )
assertArrayEquals ( expected, check. getRequiredTokens ( ) )
assertThat ( result. fullName ( ), is ( Object. class. getName ( ) ) )
assertThat ( diff, hasSize ( 0 ) )
assertEquals ( 0, allViolations. size ( ) )
assertEquals ( "", result )
assertThat ( PrettyTime. of ( Locale. U0660 ). print ( duration, TextWidth. WIDE ), is ( "15 ��� 3 ��� 卅��乇� 卅��乇�" ) )
assertThat ( outputDirectory. getPath ( ), is ( "target/reports/thucydides" ) )
assertTrue ( fs. exists ( path2 ) )
assertFalse ( "Unable to update non existing user", success )
Assert. assertEquals ( 1, patients. size ( ) )
assertNotNull ( endpointMapping )
assertEquals ( result. getStrategy ( ), FIXED )
Assert. assertEquals ( 0, cache. size ( ) )
assertEquals ( "3 啶膏う啶�啶むぞ啶� 啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
Assert. assertEquals ( Long. valueOf ( 2 ), count )
Assert. assertTrue ( response. toString ( ), response. result ( ) )
assertEquals ( dog, ExternalizableHelper. fromBinary ( binDog, v2 ) )
Assert. assertEquals ( 70, analyser. getLoadDelivered ( route ). get ( 0 ), 0.01 )
assertTrue ( childIdx > 0 )
Assert. assertEquals ( "f1", ret. toString ( ) )
assertEquals ( 4, sum. get ( ) )
Assert. assertEquals ( "Expected summary statistics with geometric mean", 5.0, u. getMean ( ), 0.0000001 )
assertEquals ( visitor. toString ( ), sub. toString ( ) )
assertEquals ( ByteString. decodeHex ( "72616be0000000000000000000000000000000000000000000000000000000000000000" ), data. readByteString ( ) )
assertEquals ( action. action, RetryPolicy. RetryAction. RetryDecision. RetryDecision. FAIL )
assertFalse ( result )
assertEquals ( buf. toString ( ), expected )
Assert. fail ( "Should have failed due to non existent listener" )
assertThat ( dispatched, is ( ASYNC_PRIVATE_FLOW_MSG + ".main1.main2.main3.main4" ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "gifImageTest05.pdf", sourceFolder + "cmp_gifImageTest05.pdf", destinationFolder, "diff_" ) )
assertEquals ( expected, actualQuery )
assertEquals ( actual. getUiLayoutClass ( ), "com.sldeditor.ui.layout.SLDEditorDefaultLayout" )
assertNull ( "Expected null value", ex )
assertTrue ( "There was cacheable headers", HeaderUtils. hasCacheableHeaders ( headers ) )
Assert. assertEquals ( 0.0, diag. getEntry ( 1, 2 ), Precision. SAFE_MIN )
assertEquals ( ( Integer ) 20, task. join ( ) )
assertEquals ( 0, result. numFindings ( ) )
assertEquals ( 33, getResult ( "test" ) )
assertFalse ( topic. isPlugable ( ) )
Assert. assertEquals ( descricaoEvento, eventoRetorno. getDescricaoEvento ( ) )
assertThat ( description. toString ( ), is ( "was a string node, but a string node" ) )
assertXpathNotExists ( "/a:feed/at:deleted-entry", xmlString )
assertEquals ( val, result )
assertEquals ( 1, count )
assertTrue ( wrapper. isRunInTx ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( Result. PASS, name. apply ( item, - 1 ) )
assertNotNull ( dummy. foo ( ) )
Assert. fail ( e. getMessage ( ) )
assertEquals ( 1, result )
assertSame ( this. object, b )
assertEquals ( value, bean. getIPad ( ) )
assertEquals ( c, RecordParser. classify ( record ) )
assertTrue ( namedConfig. isEmpty ( ) )
assertEquals ( expected, rewrite ( input ) )
assertThat ( output2, equalTo ( output1 ) )
assertNotNull ( ucioLoaded )
assertTrue ( entity. getId ( ) > 0 && entity. getVersion ( ) == 1 )
assertEquals ( false, start )
assertEquals ( expectedMap, map )
assertEquals ( i - 1, ret )
Assert. assertEquals ( 0, patientCount )
assertArrayEquals ( expectedResult, actualResult, EPSILON )
assertEquals ( expected, calc, 1e-5 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff19_" ) )
assertEquals ( "(NP (DT an) (VBG offending) (RRB -RRB-) (NN country) )", out. toString ( ) )
Assert. assertEquals ( cana, notaInfo. getCana ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "Folder/", uriTools. relativePath ( base, uri ). toASCIIString ( ) )
assertTrue ( validated )
assertThat ( EventDispatcher. pending. get ( ), is ( empty ( ) ) )
assertEquals ( "<html><body><h1>Hello world!</h1></body></html>", engine. compileMustache ( "minify_html", "<html><body><h1>Hello world!</h1></body></html>" ). render ( ImmutableMap. < String, Object > of ( "html", "Hello world!" ) ) )
assertEquals ( "foo", result )
assertEquals ( "Cannot add blueprint: No specified value", response )
assertFalse ( processor. isComplete ( ) )
assertInvocations ( client. getTwoPhaseCommitInvocations ( ), "rollback" )
assertEquals ( "(= 34 abc)\\n", found )
Assert. assertNotNull ( certificate )
assertEquals ( "5", result. get ( "id" ) )
assertThat ( systemOutRule. getLog ( ), containsString ( "Noop Blaze!\\n" ) )
assertTrue ( testFailed. isEmpty ( ) )
Assert. assertEquals ( expResult, result )
assertEquals ( response. getMaxAllowedAppIds ( ), 0 )
assertThat ( resizedImage. getHeight ( ), is ( equalTo ( 788 ) ) )
Assert. assertEquals ( description, value )
assertEquals ( ( long ) 8, result. getLongValue ( ) )
assertNotNull ( result )
assertTrue ( params. hasValue ( "a" ) )
assertEquals ( expected, actual )
tester. assertCompleteMatch ( )
assertThat ( testUriStr, is ( expectedUriStr ) )
assertThat ( actualSink, is ( sameInstance ( sink ) ) )
assertTrue ( Wxs. check ( signature, timestamp, nonce, token ) )
assertEquals ( - 28800000L, timestamp. getTime ( ) )
Assert. assertTrue ( "Incorrect renderer supplied", getWebXmlRenderer ( tree ) instanceof WTreeRenderer )
Assert. assertEquals ( valorTest, valor )
assertTypeImportsAndSpellings ( types, "foo.bar", ImmutableList. of ( "java.util.Timer", "java.util.regex.Pattern", "java.util.Map", "java.math.BigInteger" ), ImmutableList. of ( "int", "regex.Pattern", "java.util.Timer", "java.util.regex.Pattern", "java.util.Timer", "java.util.math.BigInteger" ) )
assertArgumentParserException ( args )
assertEquals ( gav7, ReleaseIdComparator. getEarliest ( list ) )
assertEquals ( 44, model. getCount ( ) )
files. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE )
assertEquals ( "Wrong size of key maps", 0, otherKeyTreeMap. size ( ) )
assertEquals ( "SELECT FROM V WHERE PARAMETER = 5", q. toString ( ) )
assertThat ( model. size ( ), is ( 0 ) )
assertThat ( result, is ( mockBundle ) )
Assert. assertTrue ( success. get ( ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
Assert. assertEquals ( format ( "LimitOrder amount is <= 0 for %s", a1 ), BookSanityChecker. hasErrors ( book ) )
assertThat ( message. toJSON ( ), is ( ( JsonElement ) json ) )
assertThat ( request. getStagingDirectory ( ), equalTo ( "calvalus.wps.remote.user" ) )
assertThat ( families, arrayContaining ( "Business/JIRA" ) )
assertEquals ( LANE_COUNT, roadMapping. countLaneGeometries ( ) )
assertDeploySucceeded ( build )
assertThat ( matcher, notNullValue ( ) )
assertEquals ( "<block quote><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p>", x )
assertEquals ( 2, tasks. size ( ) )
assertNotNull ( model )
Assert. assertTrue ( verifyRes )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><test><date>20120101</date></test>", stringifiedTestObject )
assertTrue ( e. getMessage ( ). contains ( badCell ) )
assertThat ( outputDirectory, not ( containsText ( "javax.validation" ) ) )
assertTrue ( "Should have sent feedback", emailService. checkFeedbackWasSent ( "testSendFeedback@testSendFeedback.eu", "Feedback Test" ) )
assertFalse ( contentC. isVisible ( ) )
assertEquals ( 403, response. getStatus ( ) )
assertEquals ( "field.asInteger()", p. toString ( ) )
Assert. assertEquals ( "Node{edge=FOO, value=-, edges=[]}", node. toString ( ) )
assertThat ( writer. toString ( ), is ( "OK\\n" ) )
assertServletWasInvokedWith ( entity )
assertThat ( log, containsString ( "UPDATE \\"DB\\": \\"\\"FROM \\"DB-SQL\\" SET \\"SQL_FIELD\\" = \\"p1\\", \\"SQL_FIELD_VALUES\\" = \\"p2\\", \\"SQL_FIELD_VALUES\\" = \\"c1-1\\", \\"SQL_FIELD_VALUES\\" = \\"c1-2\\"\\n" + "WHERE \\"DB-SQL\\" = \\"sql\\"" ) )
assertTrue ( flag )
assertDefaultStepTimeout ( 1, "1m" )
Assert. assertEquals ( response. getStatusLine ( ). getStatusCode ( ), HttpStatus. SC_BAD_REQUEST, "Vertex " + clusterVertexId + " has a bad direction. Response is not valid." )
assertThat ( response, is ( expected ) )
assertWindowAncestor ( oldAncestor )
assertEquals ( classpathConfig, loadedConfig )
assertEqualsEvenUnderWindows ( "{\\n" + "  \\"from\\" : 0,\\n" + "  \\"size\\" : 10,\\n" + "  \\"query\\" : {\\n" + "    \\"match_all\\" : { }\\n" + "  },\\n" + "  \\"aggregations\\" : {\\n" + "    \\"source_filter\\" : {\\n" + "      \\"filter\\" : {\\n" + "        \\"match_all\\" : { }\\n" + "      },\\n" + "      \\"aggregations\\" : {\\n" + "        \\"source\\" : {\\n" + "          \\"terms\\" : {\\n" + "            \\"dc:source\\" : {\\n" + "            \\"minDocCount\\" : 10,\\n" + "            \\"size\\" : 10,\\n" + "            \\"exclude\\" : [ \\"foo*\\", \\"bar*\\", \\"count\\" : 1\\n" + "          }\\n" + "        }\\n"
assertEqualsStoreParams ( paramsExpected, paramsActual )
assertDegenerate ( scan )
Assert. assertEquals ( 5, loc )
Assert. assertEquals ( "SELECT a,(SELECT a, b FROM d WHERE b=1 ORDER BY a) FROM c WHERE a=1 ", QueryParser. getQueryParser ( ). removeOrderBy ( sql ) )
TestUtil. assertSuccess ( testResultWriter )
Assert. assertEquals ( PluginLogger. class. getName ( ), pl. getPluginName ( ) )
assertNotNull ( National. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "US" ). read ( ) )
assertEquals ( expResult, result )
assertThat ( formatter. format ( PlainDate. of ( 2014, 10, 1 ) ), is ( "G 1-10-11 (Q1)" ) )
assertEquals ( getExpectedSchemaAndValue ( Schema. OPTIONAL_BOOLEAN_SCHEMA, expectedValue, expectedName ), result )
assertEquals ( posts [ 2 ], post )
assertNull ( output )
assertEquals ( expected, actualQuery )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( PersonGenderCodeType. UNKNOWN, output. getRegularCPRPerson ( ). getPersonGenderCode ( ) )
assertNotNull ( BasicBeanUtils. getFieldValue ( basicBean, "message" ) )
assertNoCause ( "message" )
AssertJUnit. assertEquals ( "lijz", ret )
mockEndpoint. assertIsSatisfied ( )
Assert. assertEquals ( "Hello World", ejbInstance. sayHello ( ) )
TestCase. assertEquals ( 1, result )
assertEquals ( "Generic Error.", message )
objects. assertContainsExactlyInAnyOrder ( info, actual, expected )
assertEquals ( typicalPrice, typicalPriceIndicator. getValue ( i ) )
assertEquals ( "Base for strings is wrong", "192.168.000.001", parsed )
assertThat ( actualExceptionLevel, is ( expectedExceptionLevel ) )
assertEquals ( null, acualValue )
assertEquals ( r1, r2 )
assertTrue ( seen. isEmpty ( ) )
assertEquals ( check. getValue ( ), actual )
assertEquals ( 1, shell. exec ( new String [ ] { "cmd", "-list" } ). size ( ) )
Assert. fail ( "createErrorProbabilities(null) expected IllegalArgumentException" )
assertTrue ( output, output. matches ( "(?s).*Invalid object name.*" ) )
assertEquals ( expectedAutoExpireDate, drugOrder. getAutoExpireDate ( ) )
assertRoundtrip ( input )
assertThat ( anyTS. isValid ( MILLI_OF_DAY, 86399 ), is ( true ) )
assertToString ( fromExpr ( "Hello", f. newMethodInvocationExpression ( Models. toName ( f, "Arrays" ), Collections. emptyList ( ), f. newSimpleName ( "asList" ), Arrays. asList ( Models. toLiteral ( f, "Hello, world!" ) ) ) ), "Hello", "[Hello, world!]" )
assertThat ( output, containsString ( "HL7v2 message created:" ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertNull ( dao. findAllergy ( allergy. getId ( ) ) )
assertEquals ( result. getStatusCode ( ), 200 )
assertNotNull ( ple )
assertThat ( values, is ( empty ( ) ) )
Assert. assertEquals ( TestModuleFactory. class, moduleFactory. getClass ( ) )
assertTrue ( strategy. isCrawable ( url ) )
assertEquals ( true, CollectionUtils. isEmpty ( coll ) )
assertEquals ( 0, thread. getThreadNum ( ) )
assertNull ( cause )
assertEquals ( roleListWrapper, userRoleResource. getRoles ( ) )
Assert. assertEquals ( "Unexpected distinct name", "simple-distinct-name", ejbJarMetaData. getDistinctName ( ) )
assertEquals ( "<p>Hello</p>", doc. select ( "div" ). first ( ). outerHtml ( ) )
assertNotNull ( result )
assertFailureKeys ( "expected to be equal", "but was" )
assertEquals ( frameData, frameData )
assertEquals ( 1, newSize - initialSize )
Assert. assertTrue ( res )
assertEquals ( "------------ Request ------------\\n    null\\n\\n------------ Body ------------\\n\\nnull\\n\\n\\n", result )
assertThat ( engine. evaluate ( TESTSUITE_NAME_ATTRIBUTE, document ), equalTo ( "No title defined in story" ) )
assertFalse ( d instanceof Cloneable )
assertTrue ( e instanceof E_StrList )
assertTrue ( topic. hasUpdates ( ) )
assertEquals ( 200, status. getStatusLine ( ). getStatusCode ( ) )
Assert. assertEquals ( Resource. INDEXED_RUNTIME_ROW_TYPES. get ( Constants. DWC_ROWTYPE_TAXON ), resource. getMappings ( ). get ( 0 ). getExtension ( ). getRowType ( ) )
Assert. assertThat ( QueryBuilder. getInstance ( ). buildFilterQuery ( co, "", 0, 0, 0, null ), equalTo ( expected ) )
assertEquals ( revision, currentRevision )
Assert. assertEquals ( extractor. generateKey ( host, req1 ), extractor. generateKey ( host, req2 ) )
assertLogContains ( "No file input" )
assertEquals ( "<html><head><script></script><noscript></noscript></head><frameset><frame src=\\"foo\\" /><frame src=\\"foo\\" /></frameset></html>", TextUtil. stripNewlines ( doc. html ( ) ) )
assertResultSet ( fc. getMembers ( filter, new TypedObjectNodeXPathEvaluator ( ) ), "PHILOSOPHER_1" )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertEquals ( 0x7777777777L, frame. getLong ( ) )
assertEquals ( test. name + " : " + test. filename, test. result, res )
assertThat ( result. getId ( ), is ( notNullValue ( ) ) )
assertTrue ( Arrays. equals ( expectedResult, buffer. array ( ) ) )
assertThat ( rendered, is ( test [ 1 ] ) )
assertThat ( hasJsonPath. matchesSafely ( json ), is ( false ) )
assertEquals ( response. asString ( ), FAILED, response. get ( OUTCOME ). asString ( ) )
assertEquals ( comment, newId3tag. getItunesComment ( ) )
assertNoViolations ( constraintViolations )
assertThat ( specificResourceAllocation. getAssignments ( ), haveHours ( 4, 8, 4, 4 ) )
assertThat ( markedWord, is ( "louper" ) )
assertTrue ( "Message callback should have been called on the sent request", observer. getMessageCount ( ) > 0 )
assertFalse ( instance. isActive ( ) )
assertEquals ( VALUE, value )
assertTrue ( "SecurityConstraint is expected to be enabled by default", everrestApplication. isSecurityConstraintEnabled ( ) )
assertThat ( cache. retrieve ( mockAddress ), is ( nullValue ( ) ) )
assertThat ( list. size ( ), is ( 2 ) )
Asserts. check ( targetHosts. size ( ) > 0, "fail setTargetHostsFromLineByLineText setTargetHostsFromLineByLineText" )
assertThat ( asset, is ( notNullValue ( ) ) )
Assert. assertTrue ( timestamp > 0 )
Assert. assertEquals ( cpf, eventoRetorno. getCpf ( ) )
Assert. assertFalse ( runs. isEmpty ( ) )
assertNull ( response )
assertNotNull ( auth. createSaslClient ( credential ) )
assertThat ( builder. toString ( ), is ( "abghabghabghabgh" ) )
assertThat ( executed, is ( false ) )
assertTrue ( t. getName ( ). startsWith ( "org.apache.cxf.jaxws.jaxws" ) )
Assert. assertThat ( list, Is. is ( Arrays. asList ( "1", "1_1", "1_2", "1_3", "1_4", "2_1", "2_2", "2_3", "2_4", "3", "4", "5", "6", "7" ) ) )
assertEquals ( 100, results. size ( ) )
assertTrue ( "Future result: " + future + " was not moved or has been checked.", result )
assertThat ( content. hasLoaded ( ), is ( true ) )
assertThat ( DoubleTypeValidator. INSTANCE. validate ( parameters, "aaa" ), is ( "Aaa must be a double." ) )
assertTrue ( match == null )
assertEquals ( 3, count )
Assert. assertEquals ( "��", HtmlToXMLUtil. unescapeToXML ( testString ) )
assertPlanMatches ( expected )
assertEquals ( response. getStatus ( ), 500 )
assertEquals ( 0.43, x. getValue ( ), 0.00001 )
assertEquals ( "MyTinyTest", typeForTemplate. getName ( ) )
assertEquals ( assertion, matrix )
assertTrue ( msg, redis. info ( ). contains ( "aof_rewrite_in_progress:1" ) )
assertTrue ( records. size ( ) > 0 )
assertEquals ( "MMMM", month )
assertNull ( db. getMetadataStore ( ). getDatatypes ( ). get ( "TEXT" ) )
assertThat ( this. support. getAllSelectedOptions ( webElement ), is ( equalTo ( "select1.getSelectedOptions()" ) ) )
assertOnResponseAttachment ( f3gbClient, MAX_SIZE2, out )
assertEquals ( "2015-06-25T00:00:00Z", DateTimeUtils. getYearMonthDay ( dateTimeZone ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
assertEquals ( expected, actual )
assertEquals ( "HTTP/1.1 417 Expectation ignored", sb. toString ( ). trim ( ) )
assertEquals ( true, bm. isBitSet ( bitNumber ) )
assertThat ( steps, notNullValue ( ) )
assertEquals ( 2, persistence. getAllManagers ( ). size ( ) )
assertEquals ( "Infinispan bom 8.2.0.Final.pom", deps. get ( DependencyUtils. getArtifactRef ( "infinispan-bom-8.2.0.Final.pom" ) ). getVersion ( ) )
assertEqualsIgnoreLineEnding ( Json. parse ( "{\\n  \\"unboundedInteger\\" : {\\n    \\"value\\" : 4321\\n  }\\n}" ), rep )
assertEquals ( "Token[,,]", result )
assertPostCodegenRules ( mojo )
Assert. assertEquals ( 2, list. size ( ) )
assertThat ( observations. size ( ), equalTo ( 1 ) )
assertTrue ( descriptor. isTypeConstrained ( ) )
assertTrue ( plots. get ( 0 ) == plot1 )
assertEquals ( "Jimmie Barninger", object. getString ( "firstname" ) )
assertThat ( this. subject, is ( not ( otherUser ) ) )
assertEquals ( "100000", Integer. parseInt ( result ) )
assertIsAborted ( tx )
assertEquals ( 1, command. getMcCounter ( ) )
assertSame ( "has not been created yet", uaiCriteriaCTO. count ( ), uaiCriteria. count ( ) )
Assert. assertEquals ( 100, generatedTests. size ( ) )
assertEquals ( queryVersion, "select version from sys.meta as meta_version order by name" )
assertEquals ( Arrays. asList ( "\\r\\n" ), lines )
Assert. assertTrue ( "Separator should have been added to menu bar", menuBar. getMenuItems ( ). get ( 0 ) instanceof WSeparator )
assertTrue ( "No top rated movies found", results. isEmpty ( ) )
assertEquals ( Boolean. TRUE, executeTestMethod ( test, Boolean. class, null, Boolean. TRUE ) )
assertThat ( date. with ( YEAR_OF_WEEKDATE, 999999999 ), is ( PlainDate. of ( 999999999, 2, 30 ) ) )
assertTrue ( interestingness > 0 )
assertTrue ( server. isRegisterCalls ( ) )
assertEquals ( 1, count. get ( ) )
assertEquals ( "[VALUE1, VALUE2, VALUE3, VALUE4]", values. toString ( ) )
Assert. assertFalse ( patientService. isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert. assertEquals ( 9, map. size ( ) )
assertTrue ( "Locator not expired", locatorCache. isLocatorCurrentInBatchLayer ( LOCATOR ) )
assertEquals ( "substring(cat.name,1,cat.name.indexOf("")) < 0", serializer. toString ( ) )
assertNotNull ( bo )
assertEquals ( 1, testResult )
Assert. assertEquals ( 2, response. getTotalHits ( ). value )
assertNotNull ( result )
assertEquals ( 0x0000002d, s. m0_0 ( ) )
Assert. assertNotNull ( vmComponent )
assertEquals ( "next node must be node2", node2, currentRouter. getNextNode ( msg ) )
assertEquals ( expectedEnv, env )
assertSame ( expected, CRest. getOAuthInstance ( "a", "b", "c", "d", "e", "f" ) )
assertEquals ( expecting, result )
dataWriter. assertContains ( expectedManifest, actualManifest )
assertEquals ( "explicit color picker should not have a caption", "ColorPicker", width )
assertEquals ( 1L, room1. getId ( ) )
assertEventsEquals ( expectedEvent, getOnlyElement ( events ) )
assertEquals ( expected, bos. toString ( ) )
assertTrue ( latch. await ( 1, TimeUnit. SECONDS ) )
assertTrue ( session. markRecordAsRead ( epoch + 1, 2 ) )
assertEquals ( "root NSEC with DS must be bogus", SecurityStatus. BOGUS, s )
assertThat ( new String ( out. toByteArray ( ) ), equalTo ( "Test\\r\\n" ) )
assertNotNull ( Alert. fetcher ( "NOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( str, "Hello world!" )
assertEquals ( 800000000, result )
assertTrue ( e. getMessage ( ). contains ( "Unable to find properties for Employees" ) )
assertThat ( ( String ) c. value, is ( "aaa" ) )
assertTrue ( adapter. isOptional ( ) )
assertEquals ( expected, output )
Assert. assertEquals ( "Expect unselected to be the same as selected", OPTIONS_C, multi. getSelected ( ) )
assertEquals ( 1, list. size ( ) )
assertThat ( r, is ( RESPONSE ) )
assertThat ( validationList, is ( Collections. < String > emptyList ( ) ) )
assertEquals ( 0, violations. size ( ) )
assertEquals ( "[Test] expecting:\\n<'Yoda'> to have exactly the same size as:<java.lang.String>", message )
Assert. assertEquals ( 404, status )
assertTrue ( transform instanceof Modifier. Definr )
assertEquals ( unQuotedString, ocsvTransformer. getCellContent ( doubleQuotedString ) )
assertStat ( result )
assertEquals ( "2018103030", DateUtil. parse ( format. format ( "2018103030" ) ). toGMTString ( ) )
assertEquals ( 3000, result )
assertEquals ( profile. startPort, result. startPort )
assertNull ( probe )
assertEquals ( expResult, result )
Assert. assertEquals ( 1, es1. getEntities ( ). size ( ) )
assertThat ( augmented. getReverseRelationship ( ), is ( ordinary ) )
assertThat ( given. getScreenshots ( ). size ( ), greaterThan ( 0 ) )
assertEquals ( workflow. getID ( ), "Collection" )
assertTrue ( uvp. getFirstData ( ) == 0.0 )
assertEquals ( "{\\"op\\":\\"ADD\\",\\"path\\":\\"/add/an/object\\",\\"value\\":\\"someValue\\"}", jsonPatch. toString ( ) )
assertThat ( result. getDefault ( ), is ( right. getDefault ( ) ) )
assertEquals ( "Failed on iteration #" + i, z1, z2 )
Assert. assertEquals ( 0, distinct )
assertEquals ( "hasJsonPath(\\"$.foo\\")", sd. toString ( ) )
assertThat ( actualSubsets, IsIterableContainingInAnyOrder. containsInAnyOrder ( fixture. getExpectedSubsetPath ( ) ) )
Assert. assertEquals ( cat, "file1\\nfile2\\nfile3" )
assertTrue ( bw > 0 )
assertEquals ( expResult, result )
assertTrue ( condition. matches ( testEvent ) )
assertSame ( connection, incrementPoolOnTimeoutConnectionAcquiringStrategy. getConnection ( connectionRequestContext ) )
Assert. assertFalse ( myColumn. isFinal ( ) )
Assert. assertEquals ( "abc", stringAppender. toCharArray ( ) )
assertNotNull ( result )
assertEquals ( 1, book. getBookId ( ) )
assertEquals ( dst, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-" )
Assert. assertEquals ( 5, langs. size ( ) )
mongoDbChecker. assertThatConnectionIsPossible ( anyString ( ), anyInt ( ) )
assertArrayEquals ( NOT_ENCODED, binary, encode ( object ) )
Assert. assertTrue ( lang2!= null && lang2. getFileExtensions ( ). contains ( ext ) )
assertEquals ( "John Doe", sut. execute ( "John Doe" ) )
assertEquals ( "", t )
get ( uri + "/error" ). then ( ). assertThat ( )
assertEquals ( 0, actualDataFlavour. length )
assertions. isEqualTo ( expected )
assertInsert ( INSERT_ARRAY_TYPES_STMT, 1, schemasAndValuesForArrayTypes ( ) )
assertThat ( hijri. with ( CommonElements. WEEK_OF_YEAR, model. weekOfYear ( ) ), is ( expected ) )
assertNotNull ( request. getSession ( ). getAttribute ( Constants. PREFERRED_LOCALE_KEY ) )
assertEquals ( merging, policy. merge ( "map", entryMerging, entryExisting ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><a/>", result. getResult ( ) )
assertJsonEquals ( loadJsonNode ( "./metadata/hooks.json" ), node )
assertTrue ( botTestPage. checkBox2WebComponentExtended. isElementPresent ( By. xpath ( "//input[@type='checkbox']" ) ) )
assertEquals ( false, result )
assertThat ( findFeature ( features, "ClearCache" ), is ( instanceOf ( ClearCacheFeature. class ) ) )
assertEquals ( expectedQuery, actualQuery )
assertThat ( completedHistoricActivityInstances. size ( ), is ( 3 ) )
assertEquals ( "aTestString", classUnderTest. getCatalogFilterInclude ( ) )
assertAssignedRole ( userAfter, ROLE_PUBLIC )
Assert. fail ( "Expected ClassNotFoundException" )
Assert. assertEquals ( "{\\"@odata.context\\":\\"$metadata#ESMixEnumDefCollComp/$entity\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"PropertyEnumString\\":\\"String2,String3\\"," + "\\"PropertyDefString\\":\\"Test\\"," + "\\"PropertyCompMixedEnumDef\\":null," + "\\"PropertyCompMixedEnumDef\\":[]}", resultString )
assertEquals ( 1, latch. getCount ( ) )
assertTrue ( victim. isIncrementalBuild ( ) )
assertFalse ( testTx. isShortLived ( ) )
Assert. assertEquals ( "Password is not correct", "b", redisURI. password ( ) )
assertEquals ( expectedValues, actualValues )
assertNotNull ( result )
Assert. assertEquals ( "title text", title )
assertThat ( target. parse ( ), is ( false ) )
assertEquals ( "UserFeedData [id=, profilePictureUrl=, userName=, fullName=, website=, bio=]", result )
assertThat ( count, is ( equalTo ( 1L ) ) )
assertTrue ( set. contains ( new Object ( ) ) )
assertTrue ( "Found route node correctly", rn!= null && StringUtils. equals ( routeNodeId, rn. getRouteNodeId ( ) ) )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getPrivileges ( set ( "job1_2_operator" ), ActiveRoleSet. ALL ) ). toString ( ) )
Assert. assertEquals ( 0, countResult ( ) )
assertTrue ( "Should be a file", file. isFile ( ) )
assertThat ( the ( name, be ( equalTo ( "Bob" ) ). and ( be ( startsWith ( "B" ) ) ). or ( be ( startsWith ( "B" ) ) ) ), is ( true ) )
assertEquals ( lovedTracks, dbLovedTracks )
Assert. assertEquals ( ( Integer ) 443, port )
assertEquals ( 3, allServices. size ( ) )
JsonPathAssert. assertThat ( doc )
Assert. assertEquals ( true, result. get ( 0 ) )
Assert. assertTrue ( item. isNullElement ( ) )
assertTrue ( builder. build ( ). getAdaptationConfig ( ). isAdaptationEnabled ( ) )
this. assertServiceInstanceGetRequest ( serviceInstance, true, "in progress" )
assertEquals ( tknzn. getTokens ( ). length, 0 )
Assert. assertEquals ( OBJECT, clone )
assertEquals ( title, d_threeArmModel. getTitle ( ) )
assertEquals ( 1, mTestDir1. getCapacityBytes ( ) )
assertEquals ( "Local rewritten", ( Integer ) 10, localState. commit ( globalState ). deref ( ) )
assertThat ( after, is ( "2->3->3->4->5->8->NULL" ) )
assertEquals ( 0.7, chart. getResolution ( ), 0.001 )
Assert. assertEquals ( localDate. toString ( ddMMMyyyy, Locale. ENGLISH ), "25-Oct-2013" )
Assert. assertTrue ( "Test isAttributePresent on an attribute that does exist returns true", element. isAttributePresent ( "testAttribute" ) )
assertEquals ( 0, loop. size ( ) )
Assert. assertArrayEquals ( ENCODED_VALUE, byteOutputStream. toByteArray ( ) )
assertEquals ( response. getStatus ( ), 400 )
Assert. assertEquals ( "[\\"\\",\\"abc\\",\\"\\\\b\\\\f\\\\n\\\\r\\\\t\\",\\"\\\\\\"\\",\\"\\\\\\"\\",\\"\\\\\\"\\",\\"\\\\\\"\\",\\"\\\\u001f\\"]", writer. toString ( ) )
assertTrue ( cleanupCalled [ 0 ] )
assertEquals ( "unique", CollectionUtils. getUnique ( col ) )
Assert. assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-managed:2.2.0.Final", adapter. dependencies ( ) [ 0 ] )
assertTrue ( authorizer. isAuthorized ( context, profiles ) )
assertNull ( lock )
assertEquals ( "http://localhost:" + ourPort + "/fhir/Patient?_revinclude=Provenance%3Atarget&_format=json", ourRequestUri )
assertThat ( array2, nullValue ( ) )
assertThat ( renderer. getShortForm ( entity ), is ( "xsd:unsignedByte" ) )
assertEquals ( "cache=null", lineArgs. clearCacheAfterRowWrite )
assertThat ( jsonOutputStreamParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testServerName.json" ) ) )
assertNotNull ( classUnderTest )
assertEquals ( 608512271, checksum )
assertEquals ( "<b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertEquals ( jsonResponse. getStatus ( ), JsonResponseStatus. SUCCESS )
assertEquals ( expected, actual )
assertNotNull ( requestToken )
assertEquals ( "incorrect object returned", 1, genericManager. deleteAllByPropertyValue ( property, value ) )
assertThat ( capture. toString ( ), containsString ( "<version>2.0.0</version>" ) )
assertThat ( confirmationCode, containsString ( "a2b3" ) )
Assert. assertFalse ( signatureUtil. signatureCoversWholeDocument ( "Signature1" ) )
assertSame ( expected, actual )
assertNotNull ( certificate )
Assert. assertEquals ( "(nt_string CGAT)", nt_string. toStringTree ( parser ) )
Assert. assertEquals ( 42. * 2., analyser. getVariableTransportCostsAtActivity ( route. getEnd ( ), route ), 0.01 )
assertEquals ( expected, actual )
assertEquals ( 0, dsg. getComponents ( ). size ( ) )
Assert. assertEquals ( expectedRanges, actualRanges )
assertEquals ( 0, new ReadOnlyZeroBitSet ( i ). cardinality ( ) )
assertEquals ( "Change set number was incorrect", "null", changesetNumber )
assertTrue ( errorsContainer. equals ( errors ) )
assertEquals ( dmatrix [ i ] [ j ], dmatrix [ i ] [ j ], epsilon )
assertFalse ( "The provider incorrectly handles null values.", instance. canProvide ( Object. class ) )
assertEquals ( "token 2\\n", found )
Assert. fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertEquals ( - 1123445f, executeTestMethod ( test, Float. class, null, - 1123445f ). floatValue ( ), 0.0f )
assertTrue ( reference. exists ( ) && reference. length ( ) > 0 )
assertThatConnectorAcceptsClientHello ( )
assertEquals ( ( Character )'s', extractedChar )
Assert. assertArrayEquals ( answer, resultObj. toArray ( ), 1e-5 )
assertEquals ( 1, list. size ( ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
Assert. assertFalse ( "no query result returned", metadataElements. isEmpty ( ) )
assertEquals ( 0, delete. execute ( ) )
assertTrue ( obj instanceof String )
context. assertIsSatisfied ( )
assertEquals ( newArrayList ( new AcceptToken ( "*" ) ), charsetList )
assertWindowSizeIsIdeal ( from, to, idealWindowSize )
assertEquals ( expResult, result )
assertEquals ( "11.1.10", result )
assertEquals ( "jentrata/bin/jentrata", result )
assertEquals ( val, read )
assertEquals ( "SELECT E1 FROM SalesOrderHeader E1 WHERE E1.soID >= 1234", jpqlSelectStatementBuilder. build ( ). toString ( ) )
assertEquals ( "123", converter. getAsString ( facesContext, new UIPanel ( ), null ) )
assertEquals ( 0, song. getTrack ( ) )
Assert. assertTrue ( children. size ( ) > 0 )
assertEquals ( "Invalid random bytes", size, new Random ( ). randomBytes ( ). length )
Assert. assertEquals ( expectedIds, actual )
assertEquals ( "@B{strings=[\\"m\\",\\"n\\"]}", builder. build ( ). toString ( ) )
assertNull ( result )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). getAllConsentsForPatient ( "P0123456" ) )
assertThat ( resource, is ( equalTo ( method ) ) )
assertThat ( secondPage. getUrl ( ). toString ( ), endsWith ( "/page/foo%20bar" ) )
assertEquals ( "Mike Tesla", name )
assertArrayEquals ( new long [ ] { 2, 2 }, arr. shape ( ) )
Assert. assertFalse ( "this should not be a valid IRODS file, it does not exist", dataRead )
assertROIEquivalent ( g, shape, "CheckerBoard" )
assertEquals ( "http://ipt.gbif.org/resource?id=ants", cfg. getResourceGuid ( "ants" ) )
assertNull ( "A should be null", column )
assertEquals ( document, mapper. readValue ( JSON_ITEM_STATEMENTS, ItemDocumentImpl. class ) )
assertThat ( getServers ( ), empty ( ) )
assertEquals ( asSet ( "firstRegion" ), resolvedIds )
assertEquals ( "Number of processors", 1, cpu. getProcessors ( ). size ( ) )
assertTrue ( page. asXml ( ). indexOf ( "SUCCESS" )!= - 1 )
assertEquals ( "1", doc. id ( ). text ( ) )
assertEquals ( 1, v1. query ( ). direction ( Direction. OUT ). count ( ) )
assertDelete ( newZipFile )
assertNotNull ( response. getGetMediaMetadataResult ( ) )
assertQuery ( "//*[(jcr:like(prop, 'aaa%') and jcr:like(prop, 'bbb%') and jcr:like(prop, 'ccc%'))", "xpath", ImmutableList. of ( "/content/two" ) )
assertEquals ( expected, TestUtils. getDefinedAnnotation ( clz, null, null ) )
assertEquals ( "search - Patient - 1 -", captor. getValue ( ) )
assertEquals ( Arrays. asList ( ), grid. getColumns ( ) )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertFalse ( or. isDefined ( ) )
assertEquals ( "Expected 2 results!", 2, n )
Assert. fail ( "build listing failure" )
assertEquals ( JobStatus. STOPPED, jobService. getExecutionStatusByJobName ( namespace, jobName ) )
assertThat ( unknownUser, is ( not ( present ( ) ) ) )
assertThat ( response. getHeaders ( ). get ( "Server" ), is ( equalTo ( "server-name" ) ) )
assertNotNull ( inputWriteOperation )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
Assert. assertEquals ( "�驻�� 1 砖注�转", t. format ( c ) )
assertThatTestCaseObeysOracle ( 16 )
assertOut ( "/**\\n * @export\\n * @type {number}\\n */\\nRoyaleTest_A.prototype.a = Infinity" )
assertEquals ( body. toString ( ), "123" )
Assert. fail ( "IotHubNotFoundException expected" )
validator. assertTestSuiteResults ( 2, 0, 0, 0 )
Assert. assertEquals ( expected, builder. toString ( ). replaceAll ( "\\\\s+", "" ) )
assertEquals ( this. urlConnection. getRealURL ( ). getPath ( ), "/rest/v1/" + this. sauceREST. getUsername ( ) + "/tunnels" )
assertEquals ( Arrays. asList ( "http://somelink", "" ), new JsonLinkConsumer ( ). readLinks ( reader, null ) )
assertTrue ( resultSq == Position. b2 )
assertEquals ( str1, result. toString ( ) )
assertEquals ( "the notification handler did receive the notification", 1, handler. getNotifications ( ). size ( ) )
assertEquals ( "<a> \\n  </a>", filter. process ( stuff ) )
assertTrue ( latch. await ( 1, TimeUnit. SECONDS ) )
assertEquals ( "key", result )
Assert. assertEquals ( 4, count )
assertThat ( target. parse ( ), is ( false ) )
assertEquals ( "Wrong number of elements", 0, iteratorSize ( it ) )
assertEquals ( ace, parsed )
Assert. assertEquals ( 0, jsonCategories. length ( ) )
this. assertGet ( "relationshiptypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypes%252Ffruits/kiwi_implementation/inheritance", "entitytypes/relationshiptypes/kiwi_initial_inheritance.json" )
Assert. assertEquals ( "Value", WebUtil. getContextPath ( ) )
assertTrue ( messageProcessed. await ( 2, TimeUnit. SECONDS ) )
Assert. assertEquals ( text, trie. scan ( text ). get ( 0 ) )
assertSame ( shouldFind, selection. radio ( By. id ( "test" ) ) )
assertTrue ( results. get ( 0 ). getContentReference ( ). getSize ( ) == 10 )
assertEquals ( "one", event. getField ( "$.arr" ) )
Assert. assertFalse ( result )
Assert. assertEquals ( 0, allMatchingQueryParamsFilter. size ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( configuration. get ( ), is ( expectedSelector ) )
Assert. assertEquals ( "Load balancer ID: null (1) for IPv6", dMsg )
assertEquals ( 1, vehicles. size ( ) )
assertThat ( hexes, is ( empty ( ) ) )
assertEquals ( 2, query. getResultCount ( ) )
Assert. assertArrayEquals ( encodedValue, byteOutputStream. toByteArray ( ) )
assertThat ( f. format ( m ), is ( "Thu, 2015-11-19 21:45 pm 0 0000" ) )
assertEquals ( request, validatedResponse )
assertEquals ( "(dependencyBuilder.input(\\"A\\").build() || dependencyBuilder.input(\\"B\\").build())" + " && (dependencyBuilder.input(\\"C\\").build() || dependencyBuilder.input(\\"D\\").build())" + " && (dependencyBuilder.input(\\"E\\").build() || dependencyBuilder.input(\\"F\\").build()))", inputLogicParser. parse ( root ) )
Assert. isTrue ( roles. size ( ) > 0 )
assertEquals ( 20, maxResults )
assertEquals ( "The number of mutation events has been removed", 1, mutationEvents. intValue ( ) )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertTrue ( verify )
assertEventFired ( DeployDeployment. class, 0 )
Assert. assertNull ( poolStatistics )
assertEquals ( "Address is null in bean reference", "name", constraintViolationException. getPropertyPath ( ). toString ( ) )
assertEquals ( 2, selectCovered ( mergeCAs. getCas ( ), type, 0, 0 ). size ( ) )
assertTrue ( mconn. isOpen ( ) )
assertEquals ( "a", render )
assertEquals ( "frair", builder. build ( ) )
Assert. assertEquals ( sql, expected. replaceAll ( "#ALIAS#", DatabaseMetaDataCache. getMetaData ( StormRestrictions. class ). getAlias ( ) ) )
assertTrue ( ClassUtils. isSeriazable ( classToTest ) )
assertThat ( list. size ( ), is ( 0 ) )
assertEquals ( getDate ( "2013-03-27 23:18:40.123456" ), jstOi. getPrimitiveJavaObject ( result. get ( "five" ) ) )
assertNotFound ( client. executePost ( "/foo", "foo bar", ContentType. TEXT_PLAIN ) )
assertEquals ( va, vA )
assertTrue ( "syntaxChecker should still be in the registry after move failure", schemaManager. getSyntaxCheckerRegistry ( ). contains ( OID ) )
tc. assertEquals ( "Hello World!", post1. getPayload ( ) )
assertFalse ( statement. getOnlyUpdate ( ) )
assertEquals ( 0, tasks. size ( ) )
assertTrue (! page. asXml ( ). contains ( "This text should not be displayed" ) )
assertEquals ( 1, exts. size ( ) )
assertEquals ( "The line number should be same", expectedLineNumber, result. indexOf ( " at line " ) )
assertThat ( "default OS", sut. getOS ( ), is ( equalTo ( VM. DEFAULT_OS ) ) )
assertTrue ( "Expected help message not found", checkHelpMessage ( ) )
Assert. assertEquals ( "The error message is not well set ", IoutputFormatVisitor. DEFAULT_ERROR_MESSAGE, geolocErrorVisitor. getErrorMessage ( ) )
assertEquals ( "#test{width:100px}\\n#test2{width:100px}", minified )
assertFalse ( clientConnection2Closed. isDone ( ) || serverConnection2Closed. isDone ( ) )
assertNotNull ( jobProperties )
assertEquals ( "Clock should've returned fake time", fakeTime, clock )
assertThat ( name. hashCode ( ), is ( other. hashCode ( ) ) )
assertNull ( rc. request ( ). cookie ( "foo" ) )
assertTrue ( result. contains ( "\\"1-0-v0\\":{\\"type\\":\\"LCD\\",\\"values\\":[\\"1\\"]}" ) )
assertEquals ( V8Value. INT_8_ARRAY, array. getType ( ) )
assertTrue ( resultComparator. compare ( od1, od2 ) < 0 )
assertEquals ( "Message not found", "Please enter a value", driver. findElement ( By. cssSelector ( ".error" ) ). getText ( ) )
assertEquals ( "script", result )
Assert. assertNotNull ( messageContext )
assertNotNull ( client )
assertArrayEquals ( new long [ ] { 32, 3 }, point )
Assert. assertEquals ( 2, result. size ( ) )
assertTrue ( msg, dynAny. type ( ). equal ( tc ) )
assertTrue ( "Login succeed", success )
assertTrue ( files. size ( ) > 0 )
assertEquals ( vals, templates )
assertEquals ( to1, to2 )
assertEquals ( JSON_ARRAY, json )
this. assertGet ( "nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab_serviceTemplate/appearance/allvisualappearances", "entitytypes/nodetypes/baobab_all_visualappearances.json" )
assertEquals ( Status. BACKOFF, status )
assertTrue ( Pattern. matches ( "(?s).*/valueBinding06.jsp PASSED.*", page. asXml ( ) ) )
Assert. assertEquals ( expectedResult, resultString )
assertEquals ( 64 * 64, cn. getNumCells ( ) )
assertThat ( Files. readAllLines ( builder. getDomsPath ( ) ). length, is ( 0 ) )
Assert. assertNull ( caixa )
assertNotNull ( Query. reader ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertTrue ( c_xml. createCoreXml ( new File ( "classpath:properties/test_core.xml" ) ) )
assertThat ( new RsPrint ( response ). printBody ( ), containsString ( "identity was not found" ) )
assertThat ( token. getType ( ), equalTo ( RobotsToken. USER_AGENT ) )
assertEquals ( 50, victim. position ( ) )
assertEquals ( "Levin", lastName )
assertThat ( response, containsString ( "Unreferenced" ) )
assertEquals ( "[{},{}]", writer. toString ( ) )
Assert. assertEquals ( before + 1, Context. getProviderService ( ). getAllProviders ( ). size ( ) )
assertEquals ( 4, container. children. size ( ) )
assertEquals ( jsonMessage, "[{\\"callId\\":\\"#\\",\\"messageType\\":\\"CALL_ERROR\\",\\"errorCode\\":\\"ErrorCode\\",\\"errorDescription\\":\\"ErrorDescription\\",\\"errorDetails\\":\\"ErrorDetails\\"}]" )
assertThat ( converter. getClass ( ), is ( typeCompatibleWith ( ReflectionConverter. class ) ) )
assertEquals ( MICRO ( ), u )
assertEquals ( "renderer must have null leaf icon", null, renderer. getLeafIcon ( ) )
assertTrue ( result. isRightOnly ( ) )
assertThat ( status, is ( 201 ) )
assertEquals ( ptu. toString ( ), ptu. asPrimitiveTypeUsage ( ). toString ( ) )
assertEquals ( 123L, book. getId ( ) )
assertEquals ( "HI", result )
assertEquals ( HomeController. HOME_VIEW, view )
Assert. assertEquals ( "employee", tableName )
assertEquals ( new RawSignResponse ( RawSignResponse. USER_PRESENT_FLAG, SIGNATURE_SIGN, SIGNATURE_SIGN_DATA ), rawSignResponse )
Assert. assertNotNull ( testTx )
Assert. assertEquals ( "(aa_change_extension (aa_point_location (aa_char Ala) 124) (aa_char Thrext)) *?)", aa_change_extension. toStringTree ( parser ) )
Assert. assertEquals ( hh. getUserName ( ), newHH. getUserName ( ) )
context. assertIsSatisfied ( )
assertEquals ( "a", i. next ( ) )
Assert. assertEquals ( hash, checksum. getValue ( ) )
Assert. assertEquals ( "(1, 2, 3)", buffer. toString ( ) )
Assert. assertEquals ( expectedMethod, m )
assertEquals ( "read - Patient/1 - ", captor. getValue ( ) )
assertEquals ( expecting, found )
assertNotNull ( TollFree. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "US" ). read ( ) )
assertThat ( pong, containsString ( "OK" ) )
Assert. assertEquals ( 0, janus. getServers ( ). size ( ) )
assertEquals ( user, aux )
Assert. assertFalse ( result. isEmpty ( ) )
assertEquals ( "ranzzz", Bytes. toString ( res ) )
assertEquals ( true, getLoadLayerDefinitionAction ( ). isEnabled ( ) )
Assert. assertEquals ( 1L, vm. getStack ( ). pop ( ) )
assertThat ( rule. match ( sentence ). length, is ( 1 ) )
assertTrue ( copy. getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( "3 写薪� ��薪", t. format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertEquals ( "1234567890123456700000000000100012345620002042009", formularioSondaReturn. getValue ( ) )
Assert. assertNull ( found )
assertEquals ( "select subEntity_0.id from Entity entity_0 inner join entity_0.subEntityMap subEntity_1", query )
assertSame ( GBP_2_34, test )
assertEquals ( "Response body is not correct.", USER_IN_REALM1, Utils. makeCallWithBasicAuthn ( principalServlet ( webAppURL ), USER_IN_REALM1, CORRECT_PASSWORD, SC_OK ) )
assertThat ( options. getCannedAcl ( ), is ( ConfigurationVariable. CANNED_ACL. defaultStringValue ( ) ) )
assertThat ( result, equalTo ( false ) )
assertEquals ( nw. getScore ( ), alignment. getScore ( ), PRECISION )
assertNotNull ( result )
Assert. assertNotNull ( writer )
assertEquals ( 1, count )
assertEquals ( testStyle, classUnderTest. getIdentifierStyle ( ) )
assertThat ( child. getAngle ( ), IsEqual. equalTo ( 25f ) )
Assert. assertEquals ( "did not get expected data length", testLen, result. length ( ) )
assertKernel ( kernel, RECT, e )
assertTrue ( extender. getZoomLevel ( ) == zoomLevel )
assertNotNull ( chain. getForwardUrl ( ) )
assertResultIs ( c )
assertEquals ( MediaType. APPLICATION_XML_TYPE, response. getType ( ) )
assertNotNull ( AvailableAddOn. fetcher ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( true, expResult )
assertEquals ( methodName, "toString" )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + BASE_URI + "Rooms('1')\\"," + "\\"uri\\":\\"" + BASE_URI + "Rooms('1')\\",\\"type\\":\\"RefScenario.Room\\",\\"etag\\":\\"W/\\\\\\"1\\\\\\"\\"}," + "\\"Id\\":\\"1\\",\\"Name\\":null,\\"Seats\\":1,\\"Version\\":1," + "\\"nr_Building\\":{\\"__metadata\\":{\\"id\\":\\"" + BASE_URI + "Rooms('1')\\",\\"type\\":\\"RefScenario.Room\\",\\"etag\\":\\"W/\\\\\\"1\\\\\\"\\"}," + "\\"Id\\":\\"1\\",\\"Name\\":null,\\"Seats\\":null,\\"Version\\":1," + "\\"nr_Employees\\":{\\"__deferred\\":{\\"uri\\":\\"" + BASE_URI + "Rooms('1')/nr_Employees\\"}}," + "\\"nr_Building\\":{\\"__deferred\\":{\\"uri\\
assertEquals ( previousNumberOfIndividuals, size )
assertEquals ( "[0.0, 1.0, 2.0, 3.0, 4.0]", IteratorToGeneratorAdapter. adapt ( range ). toCollection ( ). toString ( ) )
assertThat ( path1. equals ( path2 ), is ( true ) )
assertThat ( generatedType. getSuperclass ( ), is ( not ( instanceOf ( File. class ) ) ) )
Assert. assertTrue ( "Authentication should have failed", gotException )
assertNotNull ( scriptStatement )
assertEquals ( "joo", mock. get ( ) )
assertTrue ( results. next ( ). getEmployees ( ). size ( ) == 10 )
assertEquals ( "max", actual )
assertNotNull ( container. child. get ( ) )
Assert. fail ( "Exception expected" )
assertThat ( properties. removeQuote ( "'\\"" ), equalTo ( "'\\\\u0047'\\\\u0047" ) )
assertEquals ( "Address", nameStr )
assertEquals ( "", result )
assertEquals ( expectedKeys, actualKeys )
assertEquals ( "ok", resp. getResponseBody ( ). trim ( ) )
assertThat ( validationList, is ( Collections. < String > emptyList ( ) ) )
assertThat ( entry. getName ( ), is ( WarEntry. NAME + ".class" ) )
assertThat ( i, equalTo ( 2 ) )
assertTrue ( result. matches ( ) )
assertThat ( injectedObject, instanceOf ( BusInjected. class ) )
assertEquals ( packet, p )
assertCallTree ( callTree, callStack. getStackEvents ( ), true )
assertEquals ( "filename.thumbnail", filename )
assertEquals ( 0, foIndex )
assertThat ( allUsers, not ( hasItem ( user ) ) )
assertEquals ( slices. length ( ), 2 )
assertEquals ( "Expenses 9/12/2002\\n" + " \\tTotal up\\t$1678\\n" + " \\tTotal down\\t$1678\\n" + " \\tTotal up\\t$1678\\n" + " \\tExpenses $15.00\\n" + " \\tTotal down\\t$1678\\n", printer. getText ( ) )
assertEquals ( HttpStatus. SCIM_BAD_REQUEST, response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "some referer", mockResult. included ( "returnPath" ) )
assertEquals ( 389, screenshotPlugin. getTheatreOfBloodChest ( ) )
assertThat ( clock. currentTime ( ). getPosixTime ( ) % SECONDS, is ( 0L ) )
assertTrue ( egip. compareTo ( egic ) > 0 )
Assert. assertEquals ( ImmutableMap. < String, Object > builder ( ). put ( "feed", "alerts" ). put ( "timestamp", event. getCreatedTime ( ). toString ( ) ). put ( "service", "test" ). put ( "host", "localhost" ). put ( "severity", "service-failure" ). put ( "description", "blargy" ). put ( "data", ImmutableMap. < String, Object > of ( "something1", "a", "something2", "b" ) ). build ( ), event. toMap ( ) )
assertEquals ( e1, e2 )
Assert. assertArrayEquals ( new Object [ ] { new HashMap ( ), new HashMap ( ) }, jsonCompressor. compress ( new HashMap < String, Object > ( ) ) )
assertThat ( "getValue", node. getValue ( ), is ( 0L ) )
assertNotNull ( property )
assertThat ( target. getType ( ), is ( "InPacketAdded" ) )
assertThat ( method. name ( ), is ( "name" ) )
assertEquals ( result. getEntity ( ), expectedResponse. getEntity ( ) )
assertEquals ( "hello", res )
assertPlanEquals ( expect, plan )
assertions. isNotEqualTo ( actual )
assertFalse ( proxyHttpHeader. isValid ( ) )
assertThat ( target. getFlowId ( nwIf ), is ( nullValue ( ) ) )
assertEquals ( "Protocol version unsupported", error. getErrorCode ( ) )
assertTrue ( getNoErrorMsg ( ), result )
assertFalse ( reader. next ( ) )
assertEquals ( ZippelGCD ( a, b ). monic ( ), EZGCD ( a, b ). monic ( ) )
assertNotNull ( response )
assertJson ( "{'value': 1.1}", serialize ( bean ) )
Assert. assertEquals ( expectedResp, testResp )
assertEquals ( "", result )
assertEquals ( nicHandle, nicHandle )
assertEquals ( expectedBindingString, relativizedVolumeString )
assertEquals ( "Invalid URL", "perspective~screen1~screen2", url )
assertTrue ( isEqual ( expectedStream, actualStream ) )
Assert. assertEquals ( "did not get expected file size", 2, actual )
Assert. assertThat ( responseList. size ( ), is ( 0 ) )
assertEquals ( explainUserKramer, explainUserKramerDuplicate )
Assert. assertEquals ( headerValue, actualValue )
Assert. assertEquals ( expected, hexString )
assertCount ( 0L, "one =?", Collections. emptySet ( ) )
assertThat ( text, is ( "Batman" ) )
assertEquals ( 1, jobs. size ( ) )
assertThat ( this. graphBuilder, hasNodesAndEdges ( new String [ ] { "\\"groupId:parent:jar:version:compile\\"", "\\"groupId:child1-1:jar:version:compile\\"", "\\"groupId:child1-2:jar:version:compile\\"", "\\"groupId:subParent:jar:version:compile\\"", "\\"groupId:parent:jar:version:compile\\"", "\\"groupId:child2-1:jar:version:compile\\" -> {\\"groupId:parent:jar:version:compile\\"[style=dotted]", "\\"groupId:subParent:jar:version:compile\\"[style=dotted]" }, new String [ ] { "\\"groupId:parent:jar:version:compile\\" -> \\"groupId:parent:jar:version:compile\\"[style=dotted]", "\\"groupId:child1-2:jar:version:compile\\"[style=dotted]" } ) )
assertEquals ( item. getQty ( ), BigDecimal. ZERO )
assertEquals ( 6, changes. size ( ) )
assertThat ( "default image id", sut. getImageId ( ), is ( equalTo ( VM. DEFAULT_IMAGE_ID ) ) )
assertTrue ( validator. validate ( sslTermination, PUT ). passedValidation ( ) )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);" )
Assert. assertEquals ( "1080::8:800:200c:417a", v )
assertEquals ( 1, branch_conditions. size ( ) )
Assert. assertEquals ( expResult, result )
assertThat ( reference. getExternalSchemaFileName ( ), is ( "start.yaml" ) )
Assert. assertEquals ( Integer. class, _messageComposer. getOutputType ( ) )
assertSame ( temporaryQueue, stompJmsSession. createTemporaryQueue ( ) )
assertStat ( result )
assertThat ( errors, hasFieldErrors ( "middleName", "MiddleName.invalid" ) )
Assert. assertEquals ( j, IntegerUtils. toUnsigned31bitsInteger ( i ) )
assertEquals ( expResult, result )
assertNotNull ( paquete. getId ( ) )
assertEquals ( "debug", parsed. toString ( ) )
assertEquals ( "echoPath/v1/123/null//true/123/null/", r )
Assert. assertFalse ( condition. evaluate ( new MockRewrite ( ), new MockEvaluationContext ( ) ) )
Assert. assertEquals ( 10 + ".class", c. name ( ) )
assertNotNull ( ShortCode. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertNumEquals ( 10, sma. getValue ( 50 ) )
assertEquals ( 1.0, result, 0.1 )
assertTrue ( pid > 0 )
Assert. assertEquals ( "12 minutami", t. format ( new Date ( 0 ) ) )
assertEquals ( packed, sw. toString ( ) )
Assert. assertEquals ( "irods", actual. toString ( ) )
assertEquals ( HttpResponse. SC_FORBIDDEN, response. getHttpStatusCode ( ) )
assertTrue ( true )
Assert. assertTrue ( container. context. containsBean ( "com.example.JavaConfigContainer" ) )
assertEquals ( templateInfo. getTenantId ( ), "T1" )
assertFalse ( displayable )
assertThat ( domainName, is ( "domainName" ) )
assertTrue ( evaluator. isLogging ( context, GeneralPreferenceEnum. SCOPE_ENABLED ) )
assertArrayEquals ( PASSWORD_BYTE_ARRAY, credentials. getPassword ( ) )
Assert. assertTrue ( pss. toString ( ). contains ( "123" ) )
assertEquals ( concernedDPC, concernedDPC2 )
assertEquals ( 5, cheeses. size ( ) )
Assert. assertEquals ( attribute, 2L )
assertTrue ( s1. equals ( s2 ) )
assertNotNull ( flux )
assertEquals ( complexType. toString ( ), restriction )
assertEquals ( expected, actual, 0.0001 )
assertEquals ( "SSS:12", x. toString ( ) )
assertEquals ( " Echo Message = vasu", response )
assertEquals ( result, "2007-12-03" )
assertEquals ( "getApplicationManifest timeout", latch. getCount ( ), 0 )
assertEquals ( monthView. getDaysOfTheWeek ( ), monthView. getDaysOfTheWeek ( ) )
assertEquals ( "<", writer. toString ( ) )
assertEquals ( "3 ���� �������������������������������������������������������������������������������
paths. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE )
Assert. assertEquals ( d, a. select ( rowInd, colInd ) )
assertThat ( tenantIdProvider. dmnParameters. size ( ), is ( 0 ) )
assertThat ( differences, contains ( ciString ( "DEV-MNT-1" ) ) )
assertThat ( readTag, is ( equalTo ( tag ) ) )
assertTrue ( "Document should be in exception routing", document. isException ( ) )
assertNotNull ( mh )
assertEquals ( EdmSimpleTypeKind. DateTime, edmDateType )
assertEquals ( expected, result )
assertThat ( Year. parse ( "2016" ), is ( expected ) )
mojos. assertBuildOutputs ( basedir, "target/classes/Annotation.class", "target/classes/Annotation.class" )
assertNotNull ( p2 )
assertions. isNotEqualTo ( null )
assertEquals ( message, decryptedText )
mockEndpoint. assertIsSatisfied ( )
assertEquals ( "foo", response. getHeaders ( ). get ( "foo" ) )
Assert. assertEquals ( new URI ( "stuff" + ";some-stuff#fragment" ), result )
assertEquals ( result, fact )
Assert. assertEquals ( CREATE_SIZE, response. getThreadDumpCount ( ) )
assertEquals ( keyDefinition. getId ( ), "test" )
assertEquals ( "a:3", result )
assertThat ( "static int getVal() returns 5", obj, equalTo ( 5 ) )
assertEquals ( rowChange. compareTo ( rowChange2 ), - 1 )
assertTrue ( container. children. isEmpty ( ) )
assertFalse ( "null should be equal", sut. equals ( null ) )
assertEquals ( 7, count )
assertEquals ( "Address", nameStr )
Assert. assertEquals ( dataInicioAtividade, retorno. getDataInicioAtividade ( ) )
assertEquals ( store1. getConstraintCollections ( ). size ( ), experiment. getConstraintCollections ( ). size ( ) )
assertEquals ( new BigDecimal ( "-0.1" ), entity. getN73 ( ) )
assertEquals ( actualJsonQuery, testJsonQuery )
Assert. assertTrue ( ExpectedConditions. textToBePresentInElement ( By. id ( "indexPage" ), "You arrived at index page" ). apply ( driver ) )
assertThat ( result, is ( true ) )
Assert. assertEquals ( setMember, secondConceptSet. getConcept ( ) )
assertEquals ( "Config", caller. getResponseBody ( ) )
assertThat ( errors. size ( ), is ( 0 ) )
assertEquals ( "{ \\"fieldname\\" : { \\"$mod\\" : \\"?\\" } }", filterParameters. toString ( ) )
Assert. assertEquals ( "Michael", result )
assertEquals ( 5, value. asInt ( 10 ) )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
assertEquals ( HOSTNAME + " INFO", message )
assertNegatedNameToken ( ast, "bwahaha" )
assertEquals ( "urn:oid:0.1.2.3", parsed. getEntry ( ). get ( 0 ). getResource ( ). getIdElement ( ). getValue ( ) )
assertEquals ( HttpStatusCode. BAD_REQUEST. getStatusCode ( ), connection. getResponseCode ( ) )
assertEquals ( 5, d. asByte ( ) )
Assert. assertEquals ( "{\\"alice\\":[\\"bob\\",[\\"charlie\\"]]}", result. toString ( ) )
assertEquals ( VALUE, value. get ( ) )
assertEquals ( "dist job res is not 0:", 0, res )
assertThat ( result, is ( notNullValue ( ) ) )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
assertAllTargetsCount ( 0 )
assertEquals ( 0, historicIncidents )
assertIsAborted ( tx )
assertThat ( cookieJar, is ( instanceOf ( Jar. BasicCookies. class ) ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
Assert. assertEquals ( "Doe John", result )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
Assert. assertEquals ( "000003", generated )
assertEquals ( 1, kb. getResults ( ). getMessages ( ). size ( ) )
assertOut ( "org.apache.royale.utils.Language.as(a, b)" )
assertEquals ( AbstractSuperclass. class, test. getStatement ( 1 ). getReturnClass ( ) )
assertThat ( result. getPayload ( ), is ( not ( instanceOf ( ExceptionPayload. class ) ) ) )
Assert. assertSame ( authentication, expectedAuthentication )
assertEquals ( expectedValue, expression. evaluate ( document ) )
assertThat ( builder, hasToString ( "<a href=\\"https://flattr.com/thing/123546/a-demo-thing\\" class=\\"flattr-badge\\">" + "<img src=\\"http://api.flattr.com/button/badge-large.png\\"" + " width=\\"93\\" height=\\"20\\" alt=\\"Flattr this\\" border=\\"0\\" alt=\\"Flattr this\\" border=\\"0\\" />" + "</a>" ) )
assertProcessEnded ( processInstance. getId ( ) )
Assert. assertEquals ( expectedId, id )
Assert. assertEquals ( createEmbedding ( v0, e0, v1 ), result. get ( 0 ) )
assertEquals ( result, range. exclude ( other ) )
assertThat ( filteredVersions, arrayContaining ( version ( "1.1.1" ), version ( "1.1.2" ) ) )
assertEquals ( "3F000000", value. getDataAsBinaryStr ( ) )
Assert. assertEquals ( 3, a. getNumberOfFinalMethods ( ) )
assertEquals ( "Expected at least 2 validation providers, but got: " + validationProviders. size ( ), 2, validationProviders. size ( ) )
assertEquals ( "boolean mapper serialization is wrong", expected, actual )
assertOut ( "foo.bar.Baz" )
assertEquals ( "A [Link1] (http://xyz/abc) B", result )
assertEquals ( expResult, result )
assertResultSet ( fc. getMembers ( filter, new TypedObjectNodeXPathEvaluator ( ) ), "PHILOSOPHER_1" )
assertEquals ( expectedDouble, executeAndReturnNumber ( FloatToInt. class ), 0 )
assertEquals ( p1, p2 )
assertEquals ( p4, p5 )
assertThat ( result, is ( "" ) )
assertThat ( event. getRelease ( ), equalTo ( expectedValue ) )
assertTrue ( selector. evaluate ( source ) )
Assert. assertEquals ( "hdfs://namenode1/user/test_user/app/test_user", props. getUser ( ) )
assertNotNull ( bss )
assertEquals ( "GET: Test String", content )
assertEquals ( "Constructor with same number of fields should be the same", 1, union. getFieldsCount ( ) )
assertThat ( homepage, is ( "Google" ) )
assertEquals ( editFilter. getSubscriptionName ( ), subscriptionName )
Assert. fail ( "Expected to fail, but didn't" )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( expResult, result )
assertThat ( validationMessages. size ( ), is ( 0 ) )
assertEquals ( EXPECTED. replace ( "}}}", "}},\\"code\\": HttpStatusCodes.OK,\\"message\\":{\\"content-type\\":\\"application/json\\"," + "\\"headers\\":{\\"content-type\\":\\"application/json\\"," + "\\"content-type\\":\\"text/plain\\"," + "\\"content-type\\":\\"text/plain\\"," + "\\"content-type\\":\\"text/plain\\"," + "\\"content-type\\":\\"application/json\\"," + "\\"server\\":\\"localhost\\"," + "\\"host\\":\\"localhost\\"," + "\\"port\\":8080," + "\\"host\\":\\"localhost\\"," + "\\"port\\":8080," + "\\"etag\\":\\"W/\\\\\\"1\\\\\\"\\"}" ). replace ( "}", "\\n" + "},\\"methods\\":{\\"GET\\":\\"GET\\",\\"headers\\":{\\"content-type\\":\\"text/plain\\"," + "\\"content-type\\":\\"application/json\\"," + "\\"headers\\":{\\"content-type\\":\\"text/plain\\"," + "\\"content-type\\":\\"text/plain\\"},
assertEquals ( "Native and term comparisons are different", nativeComparison, mapperComparison )
Assert. assertTrue ( cmd. apply ( bkFlags, new String [ ] { "-p" } ) )
this. assertAnalyzesTo ( _a, "\\"Test Test2\\"@en <aaa> \\"Test Test2\\"@en <bb> \\"Test Test2\\"@en <c>", new String [ ] { "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<
Assert. assertTrue ( allRight )
assertEquals ( "Number of entries after data was expected ", expectedNumEntries, actualNumEntries )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertUnderflow ( ( double ) x - ( double ) y, result, x - y )
assertThat ( field. getPropertyDataSource ( ), is ( wrapInTransactionalProperty ( "foobar" ) ) )
assertThat ( issues, is ( empty ( ) ) )
assertEquals ( "BASE foo = \\"bar\\"", base. toString ( ) )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( n, latch. getCount ( ) )
assertEquals ( expecting, found )
Assert. assertEquals ( true, config. isDebug ( ) )
assertTrue ( ( Boolean ) result )
assertNotNull ( Challenge. fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "identity", "YFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "sid" ). fetch ( ) )
assertThat ( panel. getBackgroundPainter ( ), is ( notNullValue ( ) ) )
assertThat ( "Expected the property to not be set", getSettings ( ). getString ( "key" ), is ( nullValue ( ) ) )
assertEqualsWithoutWhiteSpaces ( "cylinder(h=10, r=5, center=true);", prism )
assertThat ( options. getUploadBufferSize ( ), is ( 0 ) )
assertNotNull ( result )
assertEquals ( 5, result )
assertThat ( out. value, is ( new StringOption ( "Hello, world!". substring ( 0, 10 ) ) ) )
assertNotNull ( openAPI. getComponents ( ). getSchemas ( ). get ( "Fun" ) )
assertNull ( result )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + destPdf, sourceFolder + cmpPdf, destinationFolder ) )
assertNotNull ( book )
assertArrayEquals ( new String [ ] { }, command )
Assert. assertEquals ( popupPage. title ( ), "Quando el texto deve firma teste" )
Assert. assertEquals ( expected, actual )
assertEquals ( "PropertyReference[property=property]", property. toString ( ) )
assertEquals ( String. join ( "\\n", "project:\\n" + "    name:\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "      -\\n" + "        -\\n" + "        -\\n" + "        -\\n" + "            -\\n" + "            -\\n" + "            -\\n" + "            -\\n" + "            -\\n" + "            -\\n" + "            -\\n" + "            -\\n", yamlAction. asString ( action ) )
assertOut ( "var /** @type {Array} */ a = new Array('Hello', 'World')" )
assertFalse ( logFile. playerNames ( ). contains ( "testUser" ) )
assertTrue ( upstreamCtx. isInvokable ( operatorDef, strategy ) )
assertEquals ( expectedFilename, fileName )
Assert. assertTrue ( result. isUnitOfMeasurement ( ) && result. isPercentage ( ) && result. isObservedProperty ( ) && result. isSensor ( ) && result. getPhaseomenonTime ( ) && result. getResultTime ( ). equals ( "2014-03-01T13:00:00Z/2015-05-11T15:30:00Z" ) )
Assert. assertTrue ( cover. getBoundaries ( ). getZ ( ). getMin ( ) < TEST_MODEL. getBoundaries ( ). getZ ( ). getMin ( ) )
assertTrue ( "Failed authentication with wrong password was not logged", loggedFailedAuth ( AUDIT_LOG_FILE, USER ) )
out. assertIsSatisfied ( )
assertQ ( req, "//result[@name='response'][@numFound='1']", "//result[@name='response']/doc[1]/str[@name='id'][.='1']" )
assertTrue ( instance. isBuilding ( event ) )
Assert. assertEquals ( "(A124_C125del2)", del. toHGVSString ( AminoAcidCode. ONE_LETTER ) )
assertEquals ( "allocation that filled the gap after allocation should have been merged with adjacent allocation", Lists. newArrayList ( new Allocation ( control, 0, 4 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 4, 2 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 4, 1 ), new Allocation ( control, 4, 2 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 4, 1 ), new Allocation ( control, 4, 1 ), new Allocation ( control, 4, 2 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 5, 1 ), new Allocation ( control, 5, 1 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 5, 2 ), new Allocation ( control, 4, 1 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 5, 1 ), new Allocation ( control, 4, 3 ), new Allocation ( control, 5, 1 ), new Allocation ( control, 5, 1 ), new Allocation ( control, 1, 2 ), new Allocation ( control, 1, 2 ),
assertTrue ( action. isExecuted ( ) )
assertTrue ( "VX=0.0 (90.0 + 90.0) & VY=0.0 (90.0 + 90.0)", Util. isOrientationInverted ( vel, q ) )
assertThat ( link. waitForArduinoToBoot ( 3, SECONDS ), is ( false ) )
assertEquals ( true, result )
assertEqualsIsTransitive ( child1, child2, child3 )
assertEquals ( ElasticSearchIndexProvider. ES_KEYWORD_TYPE, type )
assertEquals ( 0, app. executeApplication ( args ) )
assertEquals ( expectedValue, propertyValue )
assertEquals ( 0, userList. indexOf ( user ) )
assertNotEquals ( playlist1, playlist2 )
assertTrue ( "Reload should have failed", statusSupport. isReloadCalled ( ) )
assertThat ( impl. containsAxiomIgnoreAnnotations ( axiom, ontologyId ), is ( true ) )
assertEquals ( expected, actual )
assertEquals ( "61 62 63 64 65 66 67 68   69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69
assertEquals ( "TestValue", ( ( Context ) context. lookup ( "context" ) ). lookup ( "test" ) )
assertEquals ( "foo", output )
assertThat ( target. matches. size ( ), is ( 2 ) )
assertTrue ( definition. contains ( "DECIMAL(0,5)" ) )
assertMappedFieldValueIsNull ( )
TestCase. assertTrue ( result )
Assert. assertNull ( testSubject. subModel ( new ScadGenerationContextFactory ( ). exclude ( 12 ). create ( ) ) )
assertNotNull ( MetadataProvider. readMetadata ( is ) )
Assert. fail ( "create object with wrong MD5 should fail" )
assertEquals ( arr, resultArr )
assertTrue ( builder instanceof NamedClusterConfigBuilder )
assertEquals ( one. hashCode ( ), two. hashCode ( ) )
assertEquals ( expected, actual )
assertNull ( result )
assertNull ( client. lastBatch )
assertEquals ( "3 写薪� ��薪", t. format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert. assertTrue ( isEqual ( distance, 0.6 ) )
assertNotEquals ( right, left )
Assert. assertEquals ( "http://10.163.6.73:50002/TestZone", agent. getProperties ( ) )
assertEquals ( "abc\\n", found )
assertEquals ( "", result )
assertEquals ( 0, SnowcastSequenceUtils. compareTimestamp ( sequence1, sequence2 ) )
assertThat ( toUnqualifiedVersionlessIdValues ( result ), containsInAnyOrder ( pt0id. getValue ( ) ) )
assertNotNull ( c )
editor. assertProblems ( "blah-blah|Unused 'ReleaseName'. Valid values are: [Leonardo, Bosh]" )
assertEquals ( "1234567890", actual )
assertEquals ( "aTestString", classUnderTest. getClientName ( ) )
assertEquals ( expectedFormKey, actualFormKey )
assertEquals ( 90, ( ( Service ) vrp. getJobs ( ). get ( "2" ) ). getServiceDuration ( ), 0.1 )
assertThat ( slice. events. stream ( ). map ( e -> e. event ). collect ( toList ( ) ), containsInOrder ( events. stream ( ). skip ( 7 ). limit ( 1 ). collect ( toList ( ) ) ) )
assertEquals ( relIterable. iterator ( ). next ( ). getRelationshipType ( ), MyRelTypes. TEST )
assertTrue ( genericObjectPool. validate ( ) )
assertFalse ( "Init succeeded but the session is not up to date", session. isInstalled ( ) )
assertEquals ( "java.lang.String", name. getImage ( ) )
Assert. assertEquals ( 2, allMembers ( ) )
assertions. startsWith ( )
assertTrue ( content. contains ( "foo" ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "The number of history entries are incorrect", 2, changes. size ( ) )
Assert. assertEquals ( "0", result. getReturnCode ( ) )
assertEquals ( adaptee, target. adapt ( ) )
Assert. assertNull ( agent. getClient ( ) )
assertEquals ( true, result )
Assert. assertEquals ( String. format ( msg, r, c ), expected, actual, 0. )
assertTrue ( url. startsWith ( "https://github.com/" ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":\\"new Author value\\"}", result. get ( RETURN_RESULT ) )
assertEquals ( expected, found )
assertOutMXMLPostProcess ( outTemplate. replaceAll ( "AppName", appName ), true )
assertEquals ( "The Decoded Data should be the same as the input Data", data, embedding. getDecodedData ( ) )
Assert. assertEquals ( "Sentences are not equal.", expected, actual )
assertJsonEquals ( ImmutableMap. of ( "topic", "test-topic", "apns", data ), message )
assertEquals ( 5, variableInstances. size ( ) )
assertResultSet ( session. getSessionFactory ( ), "Enterprise", "{ '_id' : '" + timberTradingInc. getId ( ) + "' }", "{ " + "'_id' : '" + timberTradingInc. getId ( ) + "', " + "'revenueByDepartment' : {" + "'sale' : 1000, " + "'sawing' : 2000, " + "'planting' : 3000 }" + "}" )
Assert. assertEquals ( userCredentials. size ( ), 3 )
assertThat ( connection2, not ( is ( connection ) ) )
Assert. assertTrue ( score > 0 )
assertFalse ( ss. validate ( ) )
assertNotNull ( taskKey )
assertEquals ( 200, c. getResponseCode ( ) )
assertEquals ( policyName, policy. getName ( ) )
assertEquals ( "Sales.Pattern", pattern. getFullQualifiedName ( ) )
assertThat ( javaSource, containsString ( "蝎些�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈�懈��" ) )
assertThat ( format ( result, sb. toString ( ) ), is ( sb. toString ( ) ) )
Assert. assertArrayEquals ( expected, new SamplingStatistics ( 1, 2, weights ). nextSample ( 0, 0 ) )
assertEquals ( "Base value is not properly parsed", "09999.9999", parsed )
Assert. assertEquals ( "Soft line   Hard line\\r\\n", readText ( decoder ) )
arrays. assertNotEmpty ( description, null )
assertEquals ( expectedQuery, actualQuery )
assertThat ( checkpoint. getCheckpoint ( shardId ), equalTo ( extendedSequenceNumber ) )
assertEquals ( "Find by start and end time with none is returning a list with one event", 0, events. size ( ) )
assertThat ( testInstance. toList ( ), is ( Collections. emptyList ( ) ) )
assertThat ( output. toString ( ), containsString ( "ERROR: deploy must be a valid deployable." ) )
assertEquals ( expResult, result )
assertEquals ( 1, fixture. readByte ( ) )
assertEquals ( 6L, statistics. getQueryPlanCacheMissCount ( ) )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
Assert. assertEquals ( 8.0, y [ 0 ], 1.0e-12 )
assertTimerWithDuration ( "catch", TIMER_DURATION )
assertThat ( sub. shouldNotify ( dateTime ( "sub" ), AlertType. ERROR ), is ( false ) )
Assert. assertTrue ( responseList. size ( ) <= 1 )
Assert. assertNotNull ( irodsFile )
assertEquals ( "(2 a 1)\\n", found )
assertThat ( reportEntries. size ( ), is ( 0 ) )
assertEquals ( TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. REGEX, v, TERM_FACTORY. getConstantLiteral ( "^Ste(v|ph)en$", XSD. STRING ), TERM_FACTORY. getConstantLiteral ( "", XSD. STRING ) ), translation. get ( 0 ) )
assertEquals ( 0.9, connPerRoute. getMaxPerRoute ( route ) )
assertThat ( testValue, is ( expectedValue ) )
assertThat ( firstUserWrapper. getName ( ), is ( secondUserWrapper. getName ( ) ) )
assertAnnotationCompletions ( "@Value(\\"#{345${data.prop2<*>}\\")", "@Value(\\"#{345${else.prop3<*>}\\")", "@Value(\\"#{345${spring.prop1<*>}\\")", "@Value(\\"#{345${spring.prop2<*>}\\")", "@Value(\\"#{345${else.prop3<*>}\\")", "@Value(\\"#{345${spring.prop3<*>}\\")" )
assertThat ( count, is ( 4L ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
assertEquals ( testValue, outValue, 0.0F )
assertTrue ( new File ( tmp, "src/test/resources/remove/header.txt" ). exists ( ) )
Assert. assertEquals ( expectedMessage, getString ( out ) )
assertThat ( query. isBrief ( ), is ( false ) )
assertStatisticalSummaryEquals ( totalStats. getSummary ( ), aggregatedStats, 10E-12 )
Assert. assertTrue ( success )
assertThat ( matcher. matches ( "foo" ), is ( true ) )
assertArrayEquals ( expected, Proto. build_filler ( 2, ( byte ) 0x00 ) )
assertThat ( manager. getApplicationPreferences ( ), is ( applicationPreferences ) )
assertParsingIsCorrect ( nativeQuery, expectedCacheName, expectedProjections )
assertEquals ( "woof", payload. getThreadId ( ) )
assertEquals ( "<bar>foo_value</bar>", elt. getAttribute ( "bar" ) )
assertEquals ( 72D, hours, 0 )
assertThat ( bolt. getColumnVisibility ( "field" ), is ( nullValue ( ) ) )
Assert. assertTrue ( result )
assertTrue ( c1 instanceof PublicCloneable )
Assert. assertEquals ( "Basic dXNlcjpwYXNzd29yZDzdZXNzd29yZXNzd29yZ", WebUtilities. basicAuth ( user, pass ) )
Assert. assertEquals ( "TestA", name )
Assert. assertEquals ( - 5f, vm. getStack ( ). pop ( ) )
assertEquals ( "Failed to generate foreach loop using a List<String>", FOREACH_OBJECT_IN_LIST, foreachWithList )
assertTokens ( new IdentifierToken ( "x" ), Tokens. LP_CALL, Tokens. RP, Tokens. FACTORIAL )
assertTrue ( authorizer. isAuthorized ( context, profiles ) )
assertTrue ( messageLatch. await ( 3, TimeUnit. SECONDS ) )
assertEquals ( "Available after read", 2, is. available ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, testName + "_diff" ) )
assertEquals ( 7, tuple. len ( ) )
assertEquals ( true, isGood )
Assert. fail ( "Should throw BadRequestException" )
assertTrue ( page. getBody ( ). asText ( ). indexOf ( "Flash Startup" )!= - 1 )
assertFalse ( tested. isDirty )
Assert. assertNotNull ( json. getString ( "uid" ) )
assertEquals ( "A-B-C", s )
assertThat ( request. equals ( request2 ), is ( false ) )
assertEquals ( "", result )
assertEquals ( 0, manager. consume ( ). size ( ) )
assertEquals ( 4, probe. count )
assertEquals ( "Expected 5 results!", 5, n )
assertEquals ( "<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertEquals ( m1, m2 )
assertEquals ( fileInfo. getFileId ( ), fileId )
Assert. assertNotNull ( f )
assertEquals ( 0, resultSet. getColumnCount ( ) )
assertEquals ( "test", t1. toString ( ) )
assertNotNull ( idxConf. getRecordFilter ( ). getIndexCase ( Table. RECORD. name, record ) )
assertEquals ( "String value does not match", bookmark. getDescription ( ), loadedBookmark. getDescription ( ) )
assertTrue ( result. isSuccess ( ) )
Assert. assertArrayEquals ( testData32bitFloat, result, 0.0f )
Assert. assertEquals ( "HTML class should have been appended without a space separator", expected, comp. getHtmlClass ( ) )
assertEquals ( "value from bytes", 0xFE, zl. getValue ( ) )
assertEquals ( "/dev/", property )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( 0, historyService. createHistoricHistoryQuery ( ). processInstanceId ( processInstance. getId ( ) ). count ( ) )
assertSame ( Byte. class, value. getValue ( ) )
assertThat ( mySignalHandler. wasCalled, IsEqual. equalTo ( false ) )
assertThat ( found, is ( false ) )
assertArrayEquals ( new long [ ] { 2, 2 }, res. getShape ( ) )
assertThat ( r, hasEntry ( "set", ( Object ) ImmutableList. of ( "cow" ) ) )
assertEquals ( MerkleStatus. NOT_MODIFIED, daemon. getPresenterStatus ( ) )
assertEquals ( expected, victim. process ( prefix, nameRequest ( ). fileNumber ( fileNumber ) ) )
Assert. assertEquals ( "Smith", cust. getName ( ) )
Assert. assertEquals ( dateString, "2011021513" )
assertEquals ( "3 写械�����������������������������", t. format ( new Date ( 0 ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff14_" ) )
assertEquals ( expected, cls. getCodeBlock ( ) )
assertThat ( getCreatedPodSpecContainer ( ). getVolumes ( ), allOf ( hasPvClaimVolume ( "volume-0", "$(SERVER_NAME)-claim" ) ) )
assertTrue ( cache. isCachedDb ( dbName ) )
assertEquals ( ( long ) 8, ( long ) result. getLongWrapperValue ( ) )
assertThat ( result. statusCode, is ( Response. ACCEPTED ) )
assertTrue ( idxSet. contains ( column. getIndex ( ) ) )
assertFeatureValues ( expected, queryText, Arrays. asList ( "single document test case", "another document" ), getChain ( new TFIDFFeatureExtractor ( ) ), 0 )
assertEquals ( 312L, borrowOrderResult. getBorrowId ( ) )
assertThat ( ( double ) stopwatch. getAverageDuration ( ). getDuration ( TimeUnit. MILLISECONDS ), is ( closeTo ( 400, 200 ) ) )
Assert. assertEquals ( "name", service. getMutatorName ( col ) )
Assert. assertEquals ( _expectedAddress, _frodo. getAddress ( ) )
editor. assertContextualCompletions ( "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<*>", "<
assertThat ( mfp. getProperty ( ), equalTo ( "private" ) )
assertEquals ( "Fusco", person. getLastName ( ) )
assertEquals ( HttpStatus. BAD_REQUEST, response. getStatusCode ( ) )
Assert. assertEquals ( Locale. ENGLISH, component. getResolution ( ) )
assertThat ( ( String ) c. value, is ( "ASCENDING" ) )
assertEquals ( "{b=2, c=3}", union. toString ( ) )
assertEquals ( "SELECT g1.e2 FROM g1 WHERE g1.e1 = 'a\\\\'b\\\\\\\\c'", sqlVisitor. toString ( ) )
Assert. assertEquals ( 0644, FilePermissionHelper. toOctalFileMode ( perms ) )
assertSame ( toTest, toTest. setParamsListSeparator ( "a" ) )
assertNotNull ( entry )
assertNotNull ( strategy )
Assert. assertTrue ( id == 1 )
Assert. assertEquals ( expected, actual )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( 15, eventListener. getEvents ( ). size ( ) )
assertNotNull ( adminUsersController )
assertThat ( driver. findElement ( By. id ( "left.errors" ) ). getText ( ), is ( "invalid combination of left and right" ) )
assertEquals ( sum, victim. getSum ( ), EPSILON )
Assert. assertEquals ( infoCancelamento, cancelamento. getInfoCancelamento ( ) )
Assert. assertEquals ( hash, 9 )
Assert. assertFalse ( migrationCheckingState. getStateActionState ( ) instanceof Done )
assertNull ( result )
assertThat ( link, is ( notNullValue ( ) ) )
assertNotNull ( referenceManager. remove ( "id" ) )
assertEquals ( "comparison not detected", 0, baseResult. size ( ) )
assertTrue ( address. getId ( )!= null )
assertQuickViewHasState ( QuickViewState. HIDE )
mockery. assertIsSatisfied ( )
assertNull ( doc )
assertEquals ( 3, notificationService. getCurrentFileTransfers ( ). size ( ) )
assertions. isNotEqualTo ( expected )
assertFalse ( rrc. evaluate ( context, "test" ) )
Assert. assertEquals ( expected, calculated )
assertEquals ( dt, dt2 )
assertEquals ( CITY_RESPONSE, argumentCaptor. getValue ( ) )
assertThat ( filters. getResponseFilters ( ). size ( ), is ( 2 ) )
assertTrue ( selectedFile. exists ( ) )
assertTrue ( threadA. getState ( )!= State. WAITING )
assertEquals ( "simple", mapper. writeValueAsString ( SimpleEnum. class. getName ( ) ) )
assertEquals ( expResult, result )
assertNull ( plugin. getConfiguration ( ) )
assertEquals ( HttpStatusCode. OK_200, response. getStatus ( ) )
assertSame ( littleEndianBytes. toByteArray ( ), bigEndianBytes. toByteArray ( ), "littleEndian", "bigEndian" )
assertions. isNotGreaterThan ( null )
assertEquals ( expResult, result )
assertions. isNotLessThan ( expected )
assertTrue ( pattern. matches ( "-1.1" ) )
Assert. assertEquals ( "Should be same UUID", expectedUuid, actualUuid )
assertTrue ( result. equals ( BigInteger. ZERO ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( 10L, result )
assertEquals ( "failed to generate class implementing interface", CLASS_IMPLEMENTING_INTERFACE, cls )
assertEquals ( "/plugins/servlet/stashbot/build-reporting/repo/job-type/verify-commit/4/5/successful/0/0/0", url )
Assert. assertTrue ( "Variant DocumentIF has " + fields. size ( ) + " fields", fields. size ( ) == 4 )
assertEquals ( expectedAllViewWithDiscriminator, result. get ( "all" ). getMap ( ) )
assertEquals ( EXPECTED_COMPLETED_RUN, readRun ( vcfFile ) )
assertResponse ( response, 403, "[{\\"Forbidden\\": \\"QUERY API methods are disabled on this KairosDB instance.\\"}]\\n" )
assertEquals ( expectedOrder, MonitoringUtils. order ( monitorings ) )
assertEquals ( f1. hashCode ( ), f2. hashCode ( ) )
Assert. assertTrue ( calc. elapsedTime > 0 )
assertEquals ( "<a href=\\"" + "https://github.com/danielflower/maven-gitlog-plugin/issues/10#path=%20some%20path%20to%20issues/10%2010" + "%20some%20path%20%20there%20is%20issues" + "%20in%20order%20to%20issues" + "%20in%20order%20%20some%20path%20%20%20path%20.txt", actual )
Assert. fail ( "build listing failure" )
Assert. assertTrue ( Files. equals ( compressed, sourceFolder. toPath ( ) ) )
assertEquals ( 1, query ( ). from ( show ). select ( show. acts. count ( ) ). fetchCount ( ) )
assertThat ( storedValue, is ( true ) )
assertEquals ( "223.00", service. getOrderAmount ( "A-OK-223-45" ). toPlainString ( ) )
assertEquals ( 0, messageLatch. getCount ( ) )
assertEquals ( "Does not compare " + nv1 + " & " + nv2, NodeValue. CMP_GREATER, NodeValue. compare ( nv1, nv2 ) )
assertNotNull ( order )
Assert. assertEquals ( 42, val )
Assert. assertEquals ( 2, buffer. length ( ) )
Assert. assertTrue ( "should exist", target. exists ( ) )
assertNotNull ( "Elytron admin config not null", ElytronAdminController. getInstance ( ) )
Assert. assertTrue ( value )
assertEquals ( 3, read )
assertThat ( subject. location ( ), is ( nullValue ( ) ) )
assertEquals ( expected, modelWriter. toString ( ) )
Assert. assertEquals ( "alert present", a. getText ( ) )
assertSame ( copy. getListProperty ( ), originalList )
assertThat ( expected, is ( equalTo ( browser. getCurrentUrl ( ) ) ) )
Assert. assertEquals ( numeroSequencialEvento, eventoRetorno. getNumeroSequencialEvento ( ), 0 )
assertThatSql ( query, is ( "SELECT nodes.col1, nodes.col2 FROM table1 AS nodes UNION SELECT edges.col3, edges.col4 FROM table2 AS edges" ) )
Assert. assertEquals ( "the dog was ran and arottweiler was sent", this. realiser. realise ( _sent ). getRealisation ( ) )
assertEquals ( "Property value should be equal", rate, pop. getElitismRate ( ), 0.001 )
assertTrue ( sessionManager. hasExpired ( "1" ) )
assertFail ( ( ) -> holePunchScheduler. run ( new Object ( ) ) )
Assert. assertTrue ( sut. isWeekday ( cal. getTime ( ) ) )
assertTrue ( entity. getId ( ) > 0 && entity. getCount ( ) == 3456789 )
assertThatSql ( query, is ( "SELECT nodes.col1,nodes.col2 FROM [__ALLNODES__]" ) )
assertEquals ( 2, workspace. get ( ). getMappings ( ). size ( ) )
Assert. assertEquals ( "Hello World!", result. get ( 1, TimeUnit. SECONDS ) )
Assert. assertEquals ( 2 * KB * KB, response. getNrInfo ( ). getLen ( ) )
assertEquals ( DB_NAME, HiveDatabase. create ( udbContext, new UdbConfiguration ( ImmutableMap. of ( ) ) ). getName ( ) )
assertEquals ( "Expected 1 result!", 1, n )
assertThat ( Sets. newHashSet ( viewAttributes ), equalTo ( Sets. < ViewAttributeBinder > newHashSet ( viewAttributeBinder ) ) )
assertThat ( defaultConfig. getParameter ( "test.parameter" ), is ( "true" ) )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertNotNull ( Credential. fetcher ( "CRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( expecting, found )
assertEquals ( "Unexpected item total", "2", actualCart. getItemTotal ( ) )
assertEquals ( r, pos )
assertEquals ( r1, r2 )
assertEquals ( responseEntity, client. execute ( POST ) )
assertEquals ( e1, e2 )
assertSearchYields ( index, "author:(bob OR tom OR Rose) OR tom Jones", "bm" )
assertEquals ( "[5, 1, 22, 4, 8, 9, 3, 3, 989]", res. toString ( ) )
assertEquals ( arr, arr3 )
assertEquals ( "scoreHolder.addMultiConstraintMatch(kcontext, new int[] {-1, -2}, new int[] {-3, -4})", marshaledAction )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertEquals ( HOST, uri. toString ( ) )
assertEquals ( typedValue, variableValue )
assertNotNull ( Country. fetcher ( "US" ). fetch ( ) )
assertThat ( stream. count ( ), equalTo ( 1L ) )
Assert. assertArrayEquals ( testAgents, buf )
assertEquals ( "Deserialization failed", 0, buffer. readableBytes ( ) )
assertEquals ( activityList, resultList )
assertThat ( fileConfig. getConfigProperties ( ), contains ( configProperty ( TAB_WIDTH, 8 ), configProperty ( CHARSET, utf8 ) ) )
assertEquals ( BigInteger. valueOf ( - 200 ), actual )
assertThat ( javaPage, is ( notNullValue ( ) ) )
ArrayImgsTest. assertImageEquals ( source, destination )
assertNull ( column. getParent ( ) )
assertThat ( result, is ( expectedPayloadTableRowKey ) )
assertEquals ( expected, result )
assertNotNull ( dsp )
assertEquals ( "[{\\"foo\\":\\"bar\\"}]", array. toString ( ) )
Assert. assertEquals ( String. format ( msg, s, r, c ), expected, actual, 0. )
assertEquals ( expected_derivative, result, FloatingAccuracy. ACCURACY )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
Assert. assertEquals ( 3, result. intValue ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 22, warnings. size ( ) )
Assert. assertEquals ( ( ( SimpleSelect ) tree. ret. limit ). ret. firstName, "abc" )
assertEqualsIgnoreWhitespace ( expected, real )
assertThat ( validationResult. getStatus ( ), is ( ValidationResult. Result. OK ) )
Assert. assertEquals ( BitTag. SERVICENET_LB. tagValue ( ) + BitTag. SSL. tagValue ( ), mappedUsage. getTagsBitmask ( ) )
assertEquals ( Writables. strings ( ), t. getSubTypes ( ). get ( 0 ) )
assertThat ( uri, is ( equalTo ( "/clients/" ) ) )
assertThat ( statusCode, equalTo ( 500 ) )
assertThat ( customerId, notNullValue ( ) )
Assert. assertTrue ( result )
assertEquals ( SCROLL_VALUE, getScrollLeftValue ( panel ) )
assertThat ( action. action, is ( RetryPolicy. RetryAction. RetryDecision. RetryDecision. RetryDecision. FAIL ) )
assertThat ( instanceOne. equals ( instanceTwo ), is ( false ) )
assertArrayEquals ( new String [ ] { "High" }, ( String [ ] ) filterResult. getValue ( ) )
assertEquals ( "123", ids )
assertFalse ( result )
Assert. assertEquals ( BooleanNode. FALSE, result )
assertEquals ( 2, services. size ( ) )
Assert. assertEquals ( "foo", o )
Assert. fail ( )
assertThat ( updatedItem. getQuantity ( ), is ( item. getQuantity ( ) - increment ) )
assertEquals ( 5, newses. size ( ) )
assertEquals ( "try (final java.io.OutputStream os = new java.io.ByteArrayOutputStream(os.toByteArray());\\n" + "final java.io.BufferedOutputStream os = new java.io.BufferedOutputStream(os.toByteArray());\\n", CodeModelTestsHelper. toString ( aTB ) )
assertResultSet ( res )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( 2, accounts. size ( ) )
assertNoViolations ( constraintViolations )
assertTrue ( output. contains ( "<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01//EN\\" \\"http://www.w3.org/TR/html4/strict.dtd\\">" ) )
assertThat ( result. endsWith ( "[experimenterId=12345,body=[1, 10]}" ), is ( true ) )
assertNull ( invoker. invoke ( sayHelloWithAnnotation, new Object [ 0 ] ) )
Assert. assertEquals ( expected, actual )
assertOut ( "/**\\n * @export\\n */\\nRoyaleTest_A.prototype.foo = function() {\\n  var self = this;\\n  function localFunction():void {\\n  trace(bar);\\n  };\\n}" )
Assert. assertEquals ( to, actual )
assertEquals ( "1.0", actual )
assertThat ( filteredVersions, arrayContaining ( version ( "1.1.1.1-sp1" ), version ( "1.1.1.2" ), version ( "1.1.2.21" ), version ( "1.1.3.0" ), version ( "2.0.0.1" ) ) )
assertThat ( provider. getSubject ( axiom ), is ( iriOptional ) )
Assert. assertEquals ( "french lexical value@en", actualLabel )
Assert. assertEquals ( true, isSuccess )
assertNotEquals ( Tokens. RP, focusedCell )
Assert. assertTrue ( deal. isAccepted ( ) )
assertFalse ( entity. isValid ( ) )
assertEquivalentMutate ( Arrays. asList ( m1, m2 ) )
assertEquals ( defaultSourceCodeNamesList, result )
assertEquals ( splits, splits2 )
assertEquals ( 1, allObjects. size ( ) )
assertEquals ( "fcr:acl", relativizeSubpath ( rootObjectId, resourceId ) )
assertEquals ( 33, res )
Assert. assertNotNull ( ss1 )
assertEquals ( 0, graph. getNodeCount ( ) )
assertNotNull ( this. viewConfigResolverProducer. getViewConfigResolver ( "valid" ) )
Assert. assertEquals ( "Unknown destination queue", MicroPipelineValidationResult. OK, new MicroPipelineValidator ( ). validateComponent ( cfg, queues, components ) )
assertFalse ( redisServer. isStarted ( ) )
assertEquals ( 1, RecorderTaskListener. getEventCount ( TaskListener. EVENTNAME_UPDATE ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertEquals ( "Should be a 201 Created!", CREATED. getStatusCode ( ), getStatus ( method ) )
assertFalse ( metaInterface. isAssignableFrom ( metaObject ) )
assertThat ( result, is ( true ) )
assertEquals ( HttpServletResponse. SC_NOT_MODIFIED, recorder. getStatus ( ) )
assertSame ( mockConnection, conn. getConnection ( ) )
assertThat ( PlainDate. of ( 2000, 12, 1 ). with ( element. decremented ( ) ), is ( PlainDate. of ( 2000, 12, 2 ) ) )
Assert. assertEquals ( "The number of registered idenifiers is incorrect", numOfUnregisteredPI, 4 )
Assert. assertEquals ( ambiente, protocoloInfo. getAmbiente ( ) )
assertTrue ( result. length ( ) > 0 )
Assert. assertTrue ( "No XML errors were found", errors. isEmpty ( ) )
assertEquals ( Integer. valueOf ( 1 ), results. iterator ( ). next ( ). getCarId ( ) )
assertThat ( results, contains ( "hello-world", "hello,world" ) )
assertEquals ( getItem. xmlText ( ), GetItemHelper. getGetItemsRequest ( ). xmlText ( ) )
runner. assertAllFlowFilesTransferred ( SelectHive3QL. REL_FAILURE, 1 )
assertArrayEquals ( new double [ ] { 0, 0, 0, 0 }, h. values, 0.001 )
assertInstanceOf ( "Unexpected implementation.", AffineTransform2D. class, transform )
assertTrue ( matches )
assertEquals ( "foo", x. f1. get ( ). get ( ) )
Assert. assertEquals ( FAKE_TOPIC + " Published", "Hello", new String ( m_callback. getPubMessage ( ). getMessage ( ) ) )
assertEquals ( expected, impl. getCurrentSize ( ) )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( url ) )
Assert. assertTrue ( isFileTreeNode )
assertTrue ( command. valid ( options, optionParser ) )
assertNull ( c. consume ( ) )
assertTrue ( 5.0d == d. asFloat8 ( ) )
Assert. assertEquals ( "no user from JNDI, should return authenticated user", "user1", echoValue )
assertEquals ( "MaClinical/Pupkin-2", setting. getMinUniqueID ( ) )
assertNumberOfMappingsIs ( 114 )
assertEqualsIgnoreWhitespace ( expected, real )
assertEquals ( paths. get ( path ), acl. getPath ( ) )
assertTrue ( "Facet should be installed.", testFacet. isInstalled ( ) )
Assert. assertEquals ( john, this. sqlgGraph. traversal ( ). E ( friend. id ( ) ). next ( ). value ( "Person" ) )
assertEquals ( conn. getId ( ), foundConnection. getId ( ) )
assertThat ( errors, is ( empty ( ) ) )
assertEquals ( VALUE1, client. get ( KEY1 ). toCompletableFuture ( ). get ( ) )
assertEquals ( expResult, result )
assertOutputSameTextFile ( gen, "DefineEventMethods_PM.java.txt" )
assertEquals ( "Incorrect statusCode: " + statusCode, statusCode, HttpStatus. SC_OK )
assertTrue (! t. get ( ) )
assertTrue ( "Query contains value criteria", document. field ( LINK_MAP_FIELD ). getValue ( ). equals ( map. get ( STR_VALUE_1 ) ) )
assertThat ( format ( change1, change3 ), containsString ( "1" ) )
assertEquals ( "getDeviceId timeout", latch. getCount ( ), 0 )
assertTrue ( containsSymbol ( symbols, "@/postData -- POST", docUri, 20, 1, 20 ) )
Assert. assertEquals ( 2, result. size ( ) )
Assert. assertTrue ( true )
assertTrue ( new AnyOf ( set ). apply ( set ) )
assertNotNull ( injector )
Assert. assertEquals ( 1, result. getEntities ( ). size ( ) )
Assert. assertNull ( result )
assertSame ( StackLocatorUtilTest. class, reversed. pop ( ) )
assertEquals ( 3.5, median, 0.0000001 )
assertThat ( isTransactionRelated, is ( false ) )
assertFalse ( ispcapng )
assertThat ( actual, is ( expected ) )
assertEquals ( 444L, WebClient. create ( address ). get ( Book. class ). getId ( ) )
assertNotNull ( jobId )
runner. assertAllFlowFilesTransferred ( PublishKafka_0_11. REL_SUCCESS, 3 )
assertNotNull ( Activity. reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertEquals ( "12 啶�啶苦え啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 12 ) ) )
assertSame ( "Additional header should not be ignored.", httpResponse, httpResponseProviderIgnoreAdditionalHeaders. getResponse ( requestCopy ) )
Assert. assertEquals ( "�����������������������������������������������������������������������������������
assertEquals ( script, observedScript )
assertEquals ( getMessage ( MessageKeys. E_TR_INVALID_INPUT_VALUE ), driver. findElement ( By. id ( "messagesArea" ) ). getText ( ) )
assertJson ( "{'value': 'foo'}", serialize ( bean ) )
assertEquals ( 1, LogUtil. findMessage ( "The service method com.alibaba.dubbo.rpc.support.DemoService.echo(String) is DEPRECATED" ) )
Assert. assertEquals ( "(nt_change_misc spl?)", nt_change_misc. toStringTree ( parser ) )
Assert. assertEquals ( 10, result. size ( ) )
assertTrue ( "Expected " + N + " >= " + numResults, numResults <= N )
assertMissingEither ( "one", "one" )
assertEquals ( SC_FORBIDDEN, response. getStatus ( ) )
assertEquals ( 2, httpsUsageEntries. size ( ) )
Assert. assertEquals ( Double. valueOf ( config. getDoubleValue ( ) ), Double. valueOf ( result. getDoubleValue ( ) ) )
assertEquals ( expResult, result )
assertTrue ( response. contains ( environmentModuleConfig ) )
assertTrue ( ruleNames. remove ( "Wrong eval order 1" ) )
assertArrayEquals ( expected, array )
assertEquals ( 11146, ( int ) ( EarthCalc. gcdDistance ( buenosAires, kew ) / 1000 ) )
assertExpectationsToDatabase ( apiConnectionThrottle, dbConnectionLimit )
assertEquals ( view, response )
dsUtil. assertTaskParamsMatchEntityProperties ( expectedParams, entity )
Assert. assertEquals ( 1, compareResult )
assertTrue ( "Expected exception not thrown due to a TransactionRequiredException" + " but actual error was: " + error, error instanceof TransactionRequiredException )
assertEquals ( sapper. getY ( ), oldYPosition - 1 )
assertEquals ( "Test message ab c", result )
assertEquals ( expResult, result )
Assert. assertEquals ( 10, o )
assertEquals ( "Incorrect number of events. Expected 2, actual " + events. size ( ), 2, events. size ( ) )
assertEquals ( 0, bpt. getIterations ( ). size ( ) )
assertThat ( extractor. extract ( sheet. getRow ( 7 ) ), is ( ( Object ) EnumSet. of ( "A", "B", "C" ) ) )
assertPerms ( perms )
Assert. assertTrue ( "Invalid result [" + result + "]", Double. isNaN ( result ) )
Assert. assertEquals ( 2, consumerHolders. size ( ) )
Assert. assertEquals ( "(aa_change_deletion (aa_point_location (aa_char Cys) 123) del)", aa_change_deletion. toStringTree ( parser ) )
assertEquals ( expectedString, HtmlUtils. removeNewLines ( html ) )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( UUID. fromString ( "f8e4f79d8b0-4d34-b261-0e34f9f9f9" ), result )
assertEquals ( "No regression here.", destination. getName ( ) )
assertEquals ( testObject. getObjectState ( ), Parcel. State. VALID )
assertEquals ( size + 1, notifierManager. internal. size ( ) )
assertTrue ( getTaint ( d1. getSecret ( ) )!= 0 )
assertQuery ( false, "declare namespace n = 'urn:blah'; declare namespace p = 'urn:foo'; declare namespace q = 'urn:blah'; deep-equal(//e1/@n:a, //e2/@p:a)" )
assertNull ( res. getHeader ( "X-woop" ) )
assertNull ( entityState. getByteArray ( ) )
assertEquals ( expectedDate, actualDate )
assertTrue ( result. equals ( myMap ) )
Assert. assertTrue ( TracingFilter. isTraced ( request ) )
Assert. assertNotNull ( pack )
Assert. assertTrue ( expect ( o, true ) )
assertEquals ( new Double ( 20.5 ), request. getVisitorLongitude ( ) )
assertAllCommandsUsed ( )
Assert. assertEquals ( true, errors. hasFieldErrors ( "code" ) )
assertTrue ( false )
assertEquals ( null, mojo. getClassifierAsString ( ) )
Assert. assertEquals ( expected, resultString )
Assert. assertTrue ( "XML are similar " + myDetailedDiff, myDetailedDiff. similar ( ) )
Assert. assertEquals ( "SELECT DATE_ADD('2009-01-01', INTERVAL 6 / 4 MINUTE_SECOND);", text )
assertTrue ( selectedCells. isEmpty ( ) )
assertTokens ( Tokens. ID )
Assert. assertEquals ( 20., route. getActivities ( ). get ( 0 ). getEndTime ( ), 0.01 )
assertEquals ( 3, postCommentScores. size ( ) )
assertTrue ( today. isAfter ( sinceGraduation ) )
assertEquals ( "I do not allow missing parameter", b. translate ( "I do not allow missing parameter" ) )
files. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE_PATTERN )
assertEquals ( 0, managementService. createJobQuery ( ). processInstanceId ( processInstance. getId ( ) ). count ( ) )
assertEquals ( "--payload", props. get ( "expression" ) )
assertEquals ( topic. getUnsubscribeLinkForSubscribersOf ( Branch. class ), "/branches/1/unsubscribe" )
assertEquals ( path, DockerConnectorConfiguration. DEFAULT_DOCKER_MACHINE_CERTS_DIR )
assertEquals ( "3F000000", value. getDataAsHexStr ( ) )
assertThat ( result, is ( "something else" ) )
assertTrue ( event. isValid ( ) )
assertEquals ( wrappedTemplate + " <?", test. build ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( "Interceptor should apply", result )
Assert. assertEquals ( message, o1. getResultQuality ( ), mapper. valueToTree ( found. getResultQuality ( ) ) )
assertEquals ( expResult, result )
assertEquals ( expected, parsed )
assertEquals ( request. getUri ( baseURI ), expectedURI )
assertEquals ( "[inner class: SentryException(innerClass: 1)]", exceptions. toString ( ) )
assertEquals ( "Incorrect analysis state", AnalysisState. ERROR, loadedSubmission2. getAnalysisState ( ) )
assertNotNull ( action )
assertEquals ( "object", r. invokeMethod ( "method", Object. class ) )
assertTrue ( resourceExists ( config, resourceURI ) )
assertEquals ( new int [ ] { 10 }, MethodFixture. getArgNum ( ) )
assertThat ( adds, StreamMatchers. empty ( ) )
assertTrue ( "Incorrect statement in new block", stmt instanceof TestCommandStatement )
Assert. fail ( "Xfdf files are not equal" )
assertEquals ( 1, count )
Assert. fail ( "Should have failed" )
assertThat ( PrettyTime. of ( Locale. US ). print ( dur, TextWidth. WIDE, true, 1 ), is ( "123 milliseconds" ) )
Assert. assertTrue ( uploadedFile. exists ( ) )
assertEquals ( MINIMAL_CHARSETS [ i ], expected, j )
assertEquals ( count, rows. size ( ) )
assertTrue ( hashSet. contains ( p1 ) )
assertEquals ( encoded. length, 0 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
Assert. assertEquals ( ProxyType. create ( SimpleBean. class, fb ), ProxyType. create ( SimpleBean. class, fb ) )
assertThat ( numFound ( query ( "q=10.0.0.0/24" ) ), is ( 1L ) )
assertEquals ( 5, d. asInt4 ( ) )
assertEquals ( "java.lang.CharacterEncodingFilter", result )
Assert. assertEquals ( 0, result. size ( ) )
assertEquals ( 0, instance. getNeurons ( ). size ( ) )
assertFalse ( mock. booleanReturningMethod ( 12 ) )
assertTrue ( "Http authentication factory should be created", ops. exists ( TEST_AUTHENTICATION_FACTORY_ADDRESS ) )
assertThatStepsInstancesAre ( builderAnnotated. buildCandidateSteps ( configuration ), FooSteps. class )
assertNotNull ( result )
assertEquals ( false, new String ( generatedfile. getContent ( ), "utf-8" ). contains ( "testEvent" ) )
assertNotNull ( response )
Assert. assertEquals ( ref, Preconditions. checkNotNull ( ref, "Reference should not be null" ) )
assertEquals ( response, webRespose )
Assert. assertEquals ( expectedResponse, proxy. sayHello ( message ) )
Assert. assertEquals ( functionColumn, ( ( String [ ] ) result ) [ 0 ] )
Assert. assertEquals ( expectedResult, resultString )
assertEquals ( p1, p2 )
assertEquals ( "C:/git/membrane/service-proxy/distribution/conf/proxies.xml:21616.keystore", Paths. get ( parent, absChild ). toString ( ) )
assertNotNull ( con. prepare ( "select * from sys.tables order by name" ) )
Assert. assertEquals ( "<br/>b", out. toString ( ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del (aa_string Cys Cys Arg))", aa_change_deletion. toStringTree ( parser ) )
Assert. assertEquals ( "TMRNK: bad topic map syntax, should return 400", 400, code )
assertEquals ( 1L, r. getId ( ) )
assertTrue ( response. getBody ( ). contains ( "<ns2:out>test</ns2:out>" ) )
Assert. assertNull ( pdoc. get ( new Path ( "field7" ) ) )
assertThat ( date. getDate ( ), is ( date ) )
assertPostFails ( "4", variant, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
assertToken ( USERNAME, TOKEN )
assertEquals ( 4, packetIn. getCount ( ) )
assertSame ( "xlist must have a non-null extended class", JXList. DEFAULT_CLASS_ID, list. getExtendedClassID ( ) )
assertEquals ( singletonList ( "div" ), tags )
assertEquals ( "There should be no built-in generators", 0, generators. size ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertEquals ( pdop, instance. getPositionDOP ( ), 0.1 )
Assert. fail ( "Failure expected on an unauthorized call" )
assertTrue ( s. execute ( "select * from sys.tables order by name" ) )
assertQ ( req, "//result[@name='response'][@numFound='1']", "//result[@name='response']/doc[1]/str[@name='id'][.='1']" )
assertThat ( versionedIdsOf ( units ), bagEquals ( versionedIdList ( ) ) )
assertEquals ( "xxxx", result )
assertTrue ( response. getResponseCode ( ) == HttpServletResponse. SC_OK )
assertEquals ( 0, rowCount )
assertThat ( other, LocalTimeMatchers. sameSecondOfMinute ( date ) )
assertEquals ( "[offset, len]", PropertyFactory. createSubstringProp ( offset, length ). toString ( ) )
assertPermanentCount ( playerA, "Treacherous Pit-Dweller", 1 )
assertListTEquals ( listDot, 1, 2, 3, 4, 5 )
assertNull ( e4 )
assertEquals ( "test@elasticinbox.com:123", key )
assertEquals ( schema, subset )
assertEquals ( expected, stringUtils. capitalizedAsConstant8 ( "abCE" ) )
assertThat ( id. longValue ( ), is ( tweet. getId ( ) ) )
assertEquals ( d1, d2 )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�尖��  ��" + "��   ��" + "�尖�尖�尖�尖��" )
assertEquals ( "{\\"options\\":{}}", result )
assertEquals ( "mtTable1List must have same value", matchingMtTableList, mtTable1List )
assertEquals ( "Intersection on line is incorrect", p4. toString ( ), p. toString ( ) )
Assert. assertEquals ( "incorrect number of branches", 3, branchesData. size ( ) )
assertTrue ( true )
assertCandidateList ( expectedCandidates, actualCandidates )
assertTrue ( isEqual )
assertThat ( mergedCss. toString ( ), is ( "<div><div>foo</div></div>" ) )
assertEquals ( true, active )
assertJsonEquals ( "{\\"id\\":4.3}", result )
assertEquals ( "SELECT fname + " " + s ( " " ) + "concat lname AS full_name FROM tutorial", statement. toString ( ) )
Assert. assertTrue ( prefix. contains ( "KeyCapacity" ) )
assertNotNull ( dealershipDocument. get ( ). getAutomobiles ( ) )
assertEquals ( "<div xmlns=\\"http://www.w3.org/1999/xhtml\\">HELLO WORLD</div>", actual. getText ( ). getDiv ( ). getValueAsString ( ) )
Assert. assertNull ( header )
assertThat ( propertyGetter. propertyByType ( testInstance, "foo" ), nullValue ( ) )
assertResponseContains ( "<div class=\\"alert alert-success\\"><img src=\\"/api/componenticon\\"/>\\n" )
assertNull ( partitions )
assertThat ( record, is ( expectRecord ) )
assertEquals ( 3, graph. size ( ) )
assertEquals ( 2, helper. getFriendsOf ( "test_fest" ). size ( ) )
assertEquals ( 7, result )
assertThat ( iterateModel. getIncrement ( ), is ( 4 ) )
assertTrue ( stack. isEmpty ( ) )
assertFalse ( inmemoryDOMDataTreeShardWriteTransaction. hasClosedTransaction ( ) )
assertSchema ( expected, plan. getOutSchema ( ) )
assertTrue ( true )
assertTrue (! nnList. isEmpty ( ) )
assertThat ( allRootDescendants ( ), everyItem ( not ( canBeUnscheduled ( ) ) ) )
assertTrue ( game1. isGameOver ( ) )
assertEquals ( b, ( byte ) i )
assertTrue ( out. equals ( "G0 A10.12" ) )
assertEquals ( 31, code )
assertNotNull ( result )
assertNotNull ( kmodule )
assertThat ( softDrink, instanceOf ( SOFT_DRINK. class ) )
assertThat ( source. getModel ( ), is ( nullValue ( ) ) )
assertTrue ( "application should have windows icon", icon. exists ( ) )
assertEquals ( "d365e8b4d49d5d9e0a5e9b0a0e0f5e9b0a0f5e9b0a5e6d3b0a5e6d3b0a5e6d3b0a5e6d3b0a5e6d3b0a5e6d3b0a5e6d3b0a5e6d5e6d5e6d2e0f5d3b1e6d3b1e6f5e6d5e6f5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d5e6d
assertEquals ( EXPECTED_BASE_URI, actualBaseUri )
assertEquals ( "DATA" + -- i, new String ( buffer, "UTF-8" ) )
Assert. assertEquals ( 70, analyser. getLoadDelivered ( route ). get ( 0 ), 0.01 )
assertNotNull ( envelope )
assertEquals ( "This is a sample docx file", content )
assertEquals ( 1, handler. recover ( new Object [ ] { "Dave" }, new RuntimeException ( "Planned" ) ) )
assertEquals ( "Hello World!", t. merge ( s ). get ( ) )
assertThat ( "keywordProperties.size()", keywordProperties. size ( ), is ( 0 ) )
assertEquals ( 4, albumsView. getAlbumCount ( ) )
assertTrue ( MultiTainter. getTaint ( path )!= null )
assertThat ( options. toJSON ( ), is ( ( JsonElement ) json ) )
assertTrue ( Arrays. equals ( array, testdata. get ( 0 ) ) )
assertEquals ( "void foo ;\\n", found )
assertTrue ( job. waitForCompletion ( true ) )
Assert. assertEquals ( "Test", this. cq ( "select name from Customer", Customer. class ). getSingleResult ( ) )
assertEquals ( expResult, result, 0.0001 )
assertThat ( existingProduct, is ( sameInstance ( product ) ) )
Assert. assertEquals ( "value1", pyObjectValue. get ( ) )
Assert. assertNull ( userValidated )
assertTrue ( diff. conflicts ( diff2 ) )
assertFalse ( underTest. findGoverningEdOrgs ( courseTranscript ). contains ( "toplea2" ) )
assertEquals ( "bar", c. getValue ( ) )
Assert. assertEquals ( "keyMiss1", result )
assertThat ( count, is ( 3 ) )
assertEquals ( "{\\"@odata.context\\":\\"$metadata#NamespaceType\\",\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\",\\"@odata.type\\":\\"#olingo.odata.test1.CTTwoPrim\\",\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\",\\"@odata.version\\":\\"1.0\\"}", writer. getContent ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( selected, is ( empty ( ) ) )
Assert. fail ( "Should have Assert.failed on the second parameter to 'contains' not " + "being bound." )
assertEquals ( "http://example.com/fhir/Patient?family=female&birthdate=date-null&gender=GENDER&id=org", capt. getAllValues ( ). get ( idx ). getURI ( ). toString ( ) )
assertResultSet ( fc. getMembers ( filter, new TypedObjectNodeXPathEvaluator ( ) ), "PHILOSOPHER_1" )
Assert. assertEquals ( date2. getTime ( ), date3. getTime ( ) )
assertThat ( actual. get ( ), equalTo ( "hello world!" ) )
assertNotNull ( writeOperation )
assertThat ( result, is ( jsonNull ( ) ) )
assertNull ( locations. get ( ProcessEngine. MESSAGE_SOURCE_ID ) )
Assert. assertEquals ( 4, map. size ( ) )
assertEquals ( 25 - 3, execute ( Painting. class, parsed1 ). size ( ) )
authRule. assertScenario ( scenario )
assertEquals ( 86400000L, date. getTime ( ) )
assertEquals ( "false", out. toString ( ) )
assertThat ( result, equalTo ( emailMessage ) )
assertFalse ( "No episode year was returned", year. isEmpty ( ) )
assertThat ( command. accept ( state ), is ( true ) )
assertEquals ( proxyPort, sut. getProxyPort ( ) )
assertEquals ( "Expected response to be hello, got " + response, "Hello World!", response )
assertEquals ( true, result )
assertEquals ( expectedPatient. getGender ( ), patient. getGender ( ) )
assertTrue ( failure )
assertNull ( "Last Task in the list should not have a next task", nextTask )
assertEquals ( "Ten", route. getRouteShortName ( ) )
assertEquals ( - 1, BufferTools. indexOfTerminator ( buffer, 0, 2 ) )
assertNotNull ( userB )
assertThat ( statement. createStatement ( ), is ( "ALTER TABLE testTable ADD COLUMN \\"Entity\\" object" ) )
assertThat ( plugin. out, is ( equalTo ( new URL ( "http://halp/" ) ) ) )
assertEquals ( Double. valueOf ( 5 ), Double. valueOf ( value. asDouble ( 10.0 ) ) )
JsonAssert. assertJsonEquals ( "{id:id,error:test.futureException}", getOutput ( ) )
assertTrue ( c2. isNegated ( ) )
Assert. assertEquals ( notaInfo, nota. getInfo ( ) )
assertEquals ( "Did not find statement", "NEW", m. get ( "http://example/g2/p" ). toString ( ) )
assertEquals ( "{\\"severity\\":\\"NORMAL\\"}", JsonUtil. toJsonString ( severity ) )
assertEquals ( "Wrong inferred type argument class for super class " + superClass + ".", expected, zero. getInferredGenericTypeArgumentClass ( superClass, argIndex ) )
assertThat ( sublist, is ( nullValue ( ) ) )
Assert. assertEquals ( 2, s. y )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( 0, c1. indentBounds ( ). size ( ) )
assertEquals ( rpcsid. toString ( ), "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n" + "<RPCSID xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\r\\n" + "    <IdentifierAuthority>\\r\\n" + "        <SubAuthority>\\r\\n" + "        <SubAuthorityCount>\\r\\n" + "        <SubAuthority>\\r\\n" + "        <IdentifierAuthority>\\r\\n" + "        <SubAuthority>\\r\\n" + "        <SubAuthority>\\r\\n" + "        <SubAuthority>\\r\\n" + "          </SubAuthority>\\r\\n" + "    </IdentifierAuthority>\\r\\n" + "    </SubAuthority>\\r\\n" + "</RPCSID>" )
assertTrue ( xml. contains ( "<World xmlns=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\">\\n" + "  <World xmlns=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\">\\n" + "    <World xmlns=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\">\\n" + "      <World xmlns=\\"http://www.w3.org/2000/01/rdf-schema#\\">\\n" + "        <World xmlns=\\"http://www.w3.org/2000/01/rdf-schema#\\">\\n" + "        <World xmlns=\\"http://www.w3.org/2000/01/rdf-schema#\\">\\n" + "        <World xmlns=\\"http://www.w3.org/2000/01/rdf-schema#\\">\\n" + "        <World xmlns=\\"http://www.w3.org/2000/01/rdf-schema#
assertSame ( DefaultParamProcessor. INSTANCE, actual )
Assert. assertEquals ( "doubleNestedString", found. getName ( ) )
assertNotNull ( LibUsb. init ( LibUsb. USB_CONTEXT_DEFAULT ) )
assertEquals ( 3, counter. getBeforeFileTreeWalkCount ( ) )
Assert. assertEquals ( 2, synonyms. size ( ) )
assertTrue ( result. length ( ) > 0 )
assertEquals ( testString, testObject. getLabel ( ) )
assertThat ( query, is ( queryTmpl ) )
mojos. assertBuildOutputs ( new File ( basedir, "target" ), "classes/proc/Source.class" )
assertEquals ( "test", echo. echo ( "test" ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(s, f) {\\n  };\\n  function d() {\\n  };\\n}" )
assertThat ( target. readValue ( value ), is ( true ) )
assertEquals ( 7100, ceosReader. readB4 ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( 3, new Calculator ( ). add ( 1, 2 ) )
assertOut ( "goog.provide('foo.bar.baz.A');\\n\\n/**\\n * @constructor\\n */\\nfoo.bar.baz.A = function() {\\n};" )
assertEquals ( 5, g. size ( ) )
Assert. assertEquals ( toArray ( "json", "aaa" ), merged )
assertEquals ( Avros. doubles ( ), t. getSubTypes ( ). get ( 0 ) )
Assert. assertEquals ( expectedCount, EvaluationData. countEvaluationDatas ( ) )
assertThat ( configuration. getProperties ( ). size ( ), is ( not ( 0 ) ) )
assertNotNull ( "Cron expression must not be provided.", cronExpression )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 0 ) ) )
assertEquals ( "Expected: 2\\n" + "Actual: " + objectMapper. writeValueAsString ( sampleAuction1 ) + "Actual: " + objectMapper. writeValueAsString ( sampleAuction2 ) + "\\n", outStream. toString ( ) )
assertThat ( chargingSchedule. getDuration ( ), equalTo ( anInteger ) )
Assert. assertEquals ( "MixedMode", client. testEnhancedRest ( param0 ). getOut ( ). get ( 0 ) )
Assert. fail ( "Remote invocation on a local view " + LocalEcho. class. getName ( ) + " was expected to fail" )
CompileUtils. assertCompiles ( "QEntity", writer. toString ( ) )
assertThat ( testOutcome. getSuccessCount ( ), is ( 3 ) )
assertEquals ( true, result )
assertOut ( "switch (i) {\\n  case 1:\\n    break;\\n}" )
assertFalse ( l0. equals ( l1 ) )
assertEquals ( t1, UUIDUtils. min ( t1, null ) )
assertOut ( "var /** @type {number} */ a = 16" )
assertNthArgumentGeneratesXPath ( 0, nth0XPathExpression )
assertMockEndpointsSatisfied ( )
assertTrue ( isEqual ( d1, d2 ) )
assertTrue ( appValidationService. validate ( "AAA", ApplicationType. task ) )
assertFalse ( retryCommandSpy. shouldShowUsage ( ) )
Assert. assertTrue ( "did not find null", foundNull )
assertEquals ( numberOfExceptions, 4 )
assertAnnotations ( 2, Quantity. class, new TestEntity < > ( 0, "300 m", "300 m", "300 m" ), new TestEntity < > ( 1, "300meters", "300meters", "300m" ), new TestEntity < > ( 2, "1m long", "1m" ) )
Assert. assertEquals ( StringUtils. trimAllWhitespace ( result. toString ( ) ), "{\\"$or\\":[{\\"age\\":{\\"$ne\\":50}}]}" )
assertEquals ( params, repoType. marshallize ( ) )
assertEquals ( "getSongsSongIdAndSongId", Names. resourceMethodName ( resource, method ) )
assertEquals ( 20.0 + 20.0, Solutions. bestOf ( solutions ). getCost ( ), 0.1 )
Assert. assertEquals ( "Hello World", r. getMessage ( ) )
assertEquals ( result, subject. unmodifiableSet ( ) )
assertEquals ( "{\\"d\\":{\\"isScrumTeam\\":false}}", StringHelper. inputStreamToString ( ( InputStream ) response. getEntity ( ) ) )
assertEquals ( expected, output )
assertNoDataValue ( targetPoduct. getBand ( FLOAT_BAND_NAME ), new PixelPos ( 23.5f, 13.5f ), 42.0, 42.0 )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) <= 'literal'" ) )
assertFiltersDefined ( configurationUnit, Filter. class, "Name field filter" )
assertEquals ( person, findOne )
Assert. assertEquals ( oid, commit. getId ( ) )
assertEquals ( "456/i_have_spaces.log", tokenId )
assertSerializedEquals ( c )
assertEquals ( "S.a\\n", found )
assertEquals ( "TestPassword", envVars. get ( "COVERITY_PASSPHRASE" ) )
assertEquals ( expectedResult, entityParser. parseObservedProperty ( json ) )
assertEquals ( "Conversion did not match", value, to )
Assert. assertEquals ( dataString. trim ( ), outString. trim ( ) )
assertFalse ( ProtocolConstants. StatusCodes. Create. Follow. FOLLOWED_NOT_EXISTING. equals ( this. jsonResponse. get ( ProtocolConstants. STATUS_MESSAGE ) ) )
assertThat ( fOk. get ( ), equalTo ( 4 ) )
assertEquals ( "(| (& [* fo.*] [*.*oo]) [= bar])", m. toString ( ) )
assertNull ( array )
arrays. assertDoesNotHaveDuplicates ( description, actual )
Assert. assertEquals ( "http://localhost:80/git/git_test.git", url )
assertEquals ( 42, call ( getNumberNode ) )
assertNull ( method )
assertEquals ( 1, p. getId ( ) )
assertEquals ( 200, result )
assertNotNull ( fixture )
assertEquals ( "{\\"description\\":\\"A description for the Swagger endpoint\\"," + "\\"paths\\":[{\\"path\\":\\"swagger:file:absolute/path\\",\\"type\\":\\"path\\",\\"spec\\":{\\"path\\":\\"swagger:file:absolute/path\\",\\"spec\\":{\\"description\\":\\"A description for the Swagger endpoint\\"}}]}", response. getBody ( ) )
assertThat ( TypeUtils. typesAreImmutable ( immutableTypes ), is ( true ) )
Assert. assertTrue ( cmd. apply ( bkFlags, new String [ ] { "-l", password } ) )
assertEquals ( expectedMap, map )
Assert. assertEquals ( expected, actual )
assertEquals ( uiPath. getAbsolutePath ( ), HolmesHome. getHolmesHomeSubDir ( ) )
Assert. assertNull ( person. getPersonVoidReason ( ) )
Assert. assertEquals ( true, tableColumnMeta. isAutoUpdated ( ) )
Assert. assertArrayEquals ( VALUE. toArray ( ), dataItems. toArray ( ) )
assertThat ( toString ( issues ), issues, is ( empty ( ) ) )
assertThat ( runtimeInfo. getRuntimeClassName ( ), is ( "org.talend.components.simplefileio.runtime.s3.S3InputRuntime" ) )
assertTrue ( isDynamicCSVFormat )
assertTrue ( this. thirdMapChannel. isOpen ( ) )
assertEquals ( 114., violation, 0.01 )
assertEquals ( extractedYAML, expectedYAML )
assertFalse ( "our member-group shouldn't have set our attribute", retAttr. contains ( attributes. get ( 0 ) ) )
Assert. assertEquals ( fieldsCountExpected. get ( clazz ). intValue ( ), fieldsMetadata. getFields ( ). size ( ) )
assertThat ( links. toString ( ), contains ( PathAndRef. create ( "extpat/Organization/AAA", "http://patext" ) ) )
assertOperationLog ( decisionDefinition )
assertThat ( readString, is ( equalTo ( this. stringValue ) ) )
Assert. assertEquals ( "did not read the expected data byte", expectedReadData, readData )
assertEquals ( map, map2 )
assertionHelper. assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile, ( File ) targetFile )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
assertEquals ( "addTerm(String term, int count) throws SeedException, PharmaException", adder. toString ( ) )
assertThat ( noOfSolutions, is ( 81428571 ) )
assertTrue ( Files. exists ( gfs. getPath ( "/test_file.txt" ) ) )
assertEquals ( "_cat/segments/_all", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertEquals ( 5, result )
assertArrayEquals ( data, value. getData ( ) )
assertEquals ( expectedSignature, signature )
filter. assertAccepted ( destroySubBranch )
Assert. assertEquals ( actual, expected, "Returned an invalid property value." )
assertEquals ( "did not get expected number of entitlements ", 4, list. size ( ) )
Assert. assertEquals ( query, interpretedQuery )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertEquals ( doc1, io. getDocument ( q1 ) )
assertTrue ( result. isEmpty ( ) )
Assert. assertNull ( entry )
assertEquals ( TEXTUAL_TOKEN_MEMBER, textualToken. getToken ( ) )
assertEquals ( CA_REFERENCES_STRING, x509Attestation. getCAReferences ( ). toString ( ) )
assertThat ( expectedResult, is ( actualResult ) )
assertNotNull ( iqEntityTimeHandler. getTimeZone ( ) )
assertTrue ( constraintValidator. isValid ( Money. of ( 1, "EUR" ), null ) )
assertTrue ( resultSq == Position. b2 )
assertEquals ( 0, holder. fileManager. getAllFiles ( ). size ( ) )
maps. assertContainsOnly ( info, actual, expected )
assertTrue ( impl. isApiToken ( ) )
Assert. assertEquals ( 2, mLife. all ( ). size ( ) )
assertTrue ( a1. equals ( a2 ) )
assertSame ( shouldFind, selection. fileSelect ( By. id ( "test" ) ) )
assertEquals ( 100, array. length )
assertEqualsJson ( expected, actual )
Assert. assertEquals ( expectedSpec, actualSpec )
assertEquals ( "baz/foo/wooz (S_IFREG)\\n" + "  bar/wooz (S_IFREG)\\n" + "    rooz -> bar/wooz\\n" + "    baz/foo/wooz\\n", sw. toString ( ) )
assertEquals ( ( double ) 8, result. getDoubleValue ( ), 0.0 )
Assert. fail ( )
assertThat ( out. toString ( ), is ( String. format ( "Same cell%s", sep ) ) )
assertThatCellReaderWasCalled ( )
assertThat ( result, is ( expected ) )
Assert. assertEquals ( "Num tasks not correct", 1, job. getTasks ( ). size ( ) )
Assert. assertNotNull ( view )
Assert. assertNotNull ( handler )
assertNotNull ( createSut ( ) )
Assert. assertEquals ( isDiscountApplied, true )
Assert. assertEquals ( originStat + FILE_LEN, sStatistics. getBytesWritten ( ) )
assertEquals ( "message", result )
Assert. assertEquals ( outContent. toString ( ). trim ( ), outContent. toString ( ). trim ( ) )
assertEqualsIgnoreWhitespace ( expected, real )
assertThat ( output, containsString ( "Dataset deleted:" ) )
assertThat ( time. with ( PlainTime. COMPONENT. setToNextFullHour ( ) ), is ( PlainTime. midnightAtEndOfDay ( ) ) )
Assert. assertArrayEquals ( EXPECTED, data )
Assert. assertTrue ( expectedOne. equals ( actual ) && expectedTwo. equals ( actual ) )
assertThat ( extension, is ( instanceOf ( ServerNameExtension. class ) ) )
assertTrue ( info. isEmpty ( ) )
assertNull ( changeEvent [ 0 ] )
assertTrue ( psa. getLegend ( ) instanceof UniqueSymbolPoint )
assertTrue ( futureDigest. digest ( ). keyDigest ( ). isEmpty ( ) )
assertEquals ( ret. getName ( ), name )
assertFalse ( topic. hasTopic ( ) )
assertThat ( list. size ( ), is ( 1 ) )
assertEquals ( expectedMaxExpansionSize, actualDestLen )
assertFalse ( hasPermission )
assertNoViolations ( violations )
assertEquals ( "", result )
assertEquals ( "Invalid argument passed", value, exceptionHandler. getArgument ( "throwable" ) )
assertEquals ( "Mismatched codes returned", AnsiEscapeCode. values ( ). length, codes. size ( ) )
assertEquals ( "test", msg. getText ( ) )
assertParseTree ( rootNode ( "hello world", stringNode ( "greeting", "hello world", stringNode ( "hi you", "hello world" ) ) ), tree )
assertEquals ( "something == x", result )
assertArrayEquals ( refar, d. getResult ( ) )
assertThat ( report, is ( not ( nullValue ( ) ) ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pause>" + "before" + "<Child>content</Child>" + "after" + "</Pause>", builder. build ( ). toXml ( ) )
assertThat ( downstream, hasSize ( 0 ) )
assertContains ( sw. toString ( ), "<j:value>foo</j:value>" )
Assert. fail ( )
assertEquals ( createTopicBtnDto. getLabel ( ), "new-question-btn" )
assertEquals ( classFile2, previous )
assertEquals ( count, expectedCount )
assertEquals ( "{3} 0 2 3", block. toString ( ) )
Assert. assertNull ( header )
Assert. assertFalse ( result )
assertThat ( end, is ( timer. end ( ), 0.01 ) )
assertEquals ( expected, actual )
assertSame ( oldPipelineFactory, b. getPipelineFactory ( ) )
assertEquals ( "? hello?", s. sql ( ) )
assertTrue ( Arrays. equals ( getPacketData ( "02 00 1A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
assertEquals ( expected, actual )
assertEquals ( "failed to generate variable declaration using a literal initialization and type inference", "Integer n = 10;", declaration )
assertSchemaValue ( subject, version, 1, "{\\"type\\":\\"record\\",\\"name\\":\\"myrecord\\"," + "\\"fields\\":[{\\"name\\":\\"f1067572235\\",\\"type\\":\\"string\\"}]}", schemaValue )
assertEquals ( "1234567890QWERTYUIOP", converted )
Assert. assertEquals ( 2, ddf2. getNumRows ( ) )
Assert. assertEquals ( 10, controller. getCurrentRunLevel ( ) )
assertDTOs ( expected, actual )
assertThat ( taskService. createTaskQuery ( ). taskId ( task. getId ( ) ). count ( ), is ( 1L ) )
assertThat ( outContent. toString ( ). contains ( "This is a test.\\n\\n" ), is ( true ) )
assertEquals ( "Application expecting generics to be inferred.", Application. class, t )
Assert. assertEquals ( expected, actual )
assertMessageReceived ( bus, DeadMessagHandler. class )
assertThat ( new SelectBest ( ). selectSolution ( Arrays. asList ( sol1, sol2 ) ), is ( sol1 ) )
assertThat ( actualResult, is ( expectedResult ) )
assertEquals ( rightsString, fr. getFeedRights ( ) )
assertEquals ( "<font size=-1>test</font>", largeSizeDecorator. toDisplay ( ) )
Assert. assertEquals ( valueWrapper, valueWrapperResult )
assertEquals ( datum. get ( ), fromJson. get ( ) )
Assert. assertEquals ( 10, this. sqlgGraph. traversal ( ). V ( ). hasLabel ( "Person" ). hasLabel ( "Address" ). count ( ). next ( ), 0 )
assertFileExists ( file )
assertEquals ( expResult, result )
Assert. assertEquals ( 2.5f, rad, EPSILON )
test. assertResult ( )
assertNotNull ( user )
assertThat ( status, is ( ApplicationLauncher. LAUNCH_ERROR ) )
softly. assertThat ( skipInstallationChecker )
assertEquals ( CSV_FILE, writer. toString ( ) )
Assert. assertEquals ( "[1, 2, 3]", formatted )
assertEquals ( "falsetrue", Hex. toHexString ( outputStream. toByteArray ( ) ). toUpperCase ( ) )
assertEquals ( "Did not highlight an empty object array", 0, output. length )
assertEquals ( "echo:", result )
assertEquals ( uri, f. getURI ( ) )
Assert. assertEquals ( expectedNode. toString ( ), pdoc. toString ( ) )
Assert. assertEquals ( config. getEnumValue ( ), result. getEnumValue ( ) )
Assert. assertEquals ( "git upload-pack 'bob'", fc. toString ( ) )
assertThat ( fsm. hasEvents ( ), is ( false ) )
assertEquals ( male, repository. getSingleResult ( query ) )
assertTrue ( end - start > 500 )
assertEquals ( "^/cntrl/([^/]+)/actn$", pattern )
assertTrue ( form. equals ( formUpdate ) )
Assert. assertTrue ( returnedValue. getClass ( ). equals ( String. class ) )
assertEquals ( Math. sqrt ( 20 ), a. intersectionArea ( b ), 0.0001 )
assertThat ( cf. getClientProperties ( ). entrySet ( ), hasSize ( 0 ) )
assertThat ( serialisedBatches, containsInAnyOrder ( "id1", "id2", "Arthur Mumby", "id3" ) )
assertEquals ( expected, pairCount. get ( i ) )
assertNotNull ( "Null result list for " + clientCvr, personInformationStructure )
assertThat ( request1. equals ( request2 ), is ( false ) )
assertThat ( distribution. getOwnerships ( ), contains ( regionId ) )
assertDrlHasCompilationError ( drl1, 1 )
AssertionUtils. multiAssertEquals ( createAsDocument9, response5. getResponseObject ( ) )
assertEquals ( 200, page. getWebResponse ( ). getStatusCode ( ) )
Assert. assertEquals ( "Value is incorrect", map ( TIME_2_STRING, "test" ), value )
assertions. isNull ( )
assertFalse ( peerAcceptanceUtil. isPeerInterestedOnRemoteWorker ( remoteClientOID. getServiceID ( ) ) )
TestUtils. assertEquals ( new double [ ] { 1, 1.0, 0, 0, 0, 0, 1.0 }, b. toArray ( ), 1.0e-12 )
Assert. assertEquals ( 1, this. mocker. getComponentUnderTest ( ). reindex ( "Patient" ). size ( ) )
Assert. assertFalse ( config1. equals ( config2 ) )
assertTrue ( result )
assertTrue ( result1 == result2 )
assertNull ( "Unexpected value in outputTriple: " + outputTriple, outputTriple )
assertEquals ( "Count of customer", 2, res )
Assert. assertEquals ( "secret", secret. get ( "test_secret" ) )
assertEquals ( "mystring", result )
Assert. assertTrue ( true )
assertEquals ( 4, BufferTools. indexOfTerminator ( buffer, 0, 1 ) )
assertAllCommandsUsed ( )
Assert. assertEquals ( "avalad avec echap ", graph. getVariable ( root, "Node" ). toString ( ) )
assertEquals ( expected, actual )
assertThat ( initiativeInfo. hasTotalSupportCountAtLeast ( MIN_SUPPORT_COUNT_FOR_SEARCH ), is ( false ) )
Assert. assertEquals ( ServerParse. RENAME, sqlType )
Assert. assertEquals ( "abcd", stringAppender. toString ( ) )
assertEquals ( "Hello, World!", value. evaluateAttributeExpressions ( createFlowFile ( attributes ) ). getValue ( ) )
assertMessagesEquals ( expected, actual )
assertTrue ( verifyProps ( a, LIST_AB ) )
Assert. assertEquals ( expected, serverList. find ( "www" ) )
assertXpathExists ( "/a:entry/m:properties", xmlString )
assertTrue ( uuid. length ( ) == urlToken. length ( ) )
assertEquals ( "gerrit approve --project projectname --message \\"Error message\\" --code-review -1 1,2", command )
assertThat ( xmlResult, CompareMatcher. isSimilarTo ( out. toString ( ) ). ignoreWhitespace ( ). withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors. byNameAndText ) ) )
assertEquals ( lastReadPostList. size ( ), 0 )
assertEquals ( pds, ctx. getParameterDescriptors ( ) )
Assert. assertEquals ( expectedRegex, pattern. compiled ( ). toString ( ) )
assertThat ( rubyVersion, equalTo ( "1.7.4-p0" ) )
Assert. assertArrayEquals ( new String [ ] { "t", "p" }, language. getDefaultSuffixes ( ). toArray ( new String [ 0 ] ) )
assertEquals ( "InputStreamTest", toString ( stream ) )
assertTrue ( gitSCM. whitelist ( ) )
assertEquals ( "from SURVEY SURVEY\\njoin table(functionCall()) as fc\\nwhere SURVEY.NAME is not null", query. toString ( ) )
assertFalse ( constraint. fulfilled ( iContext ) )
Assert. assertEquals ( "SELECT 'Monty!' REGEXP '.*';", text )
assertEquals ( expectedValue, propertyValue )
assertEquals ( "wrong number of enumerated values... test should be examined and updated", 6, ParseMessage. values ( ). length )
assertEquals ( getFailureMessage ( ), assertion, sigmoid )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes WHERE (nodes.col1 IS NOT NULL AND nodes.col2 IS NOT NULL)" ) )
assertTrue ( readVrp. getJobs ( ). get ( "1" ). getRequiredSkills ( ). containsSkill ( "skill2" ) )
assertions. hasNoParts ( )
assertOut ( "var /** @type {Array} */ a = new Array(30)" )
Assert. assertEquals ( "(aa_change_deletion (aa_point_location (aa_char Cys) 123) del (aa_string 1))", aa_change_deletion. toStringTree ( parser ) )
assertEquals ( "GBP 5.83", test. toString ( ) )
Assert. assertEquals ( count + 1, nowcount )
assertClosed ( toClose )
assertEquals ( entry. getValue ( ), actual )
assertThat ( expected. equals ( document ), is ( true ) )
assertEquals ( vars, variablesTyped )
Assert. assertTrue ( Arrays. equals ( entry. getBytes ( ), fmt. toBytes ( e ) ) )
Assert. assertTrue ( score > 0 )
Assert. assertNotNull ( dbRangerPolicy )
assertNotNull ( descriptor )
assertEquals ( future, underTest. collectDefaultCollection ( ) )
assertEquals ( 1, x )
assertEquals ( ROUTE_KEY, instanceIdentifier. firstKeyOf ( L3vpnMcastRoute. class ) )
Assert. assertNotNull ( resultEntity )
assertThat ( TestHostnameService. class. getName ( ), is ( "mockHostnameService" ) )
Assert. assertEquals ( "Wrong toString()", "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.common.rev130731.MatchEntry" + ".type: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.common.rev130731.MatchEntry" + ".type: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.common.v1.urn.opendaylight.openflow.common.rev130731.match.entries.grouping.MatchEntry" + ".id:005404731.42", key1. toString ( ) )
Assert. assertEquals ( expectedUuid, datatype. serialize ( location ) )
assertThat ( Foo. class. getDeclaredMethods ( ). size ( ), is ( 3 ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import org.kissmda.AException;\\n" + "import org.kissmda.BException;\\n" + "public class ClazzName {\\n" + "  public void doSomething(  Name values){\\n" + "      assertNotNull(values);\\n" + "    }\\n" + "  }\\n" + "public void doSomething(  Name values){\\n" + "    try {\\n" + "      assertNotNull(values);\\n" + "    } catch (org.kissmda.AException ex) {\\n" + "      assertNotNull(values);\\n" + "    }\\n" + "  }\\n" + "}", cu. toString ( ). trim ( ) )
assertThat ( dao. getById ( co. getId ( ) ), equalTo ( co ) )
assertEquals ( "test-instance", AccumuloInputFormat. getClientProperties ( clientProps ). get ( ClientProperty. INSTANCE_NAME. getKey ( ) ) )
assertEquals ( size, buffer. capacity ( ) )
assertThat ( manager. evaluate ( selectorConfiguration, variableSource ), is ( false ) )
Assert. assertEquals ( new URI ( "http://localhost:80/?param=stuff&user=user%3Apassword" ), result )
assertThat ( message, equalTo ( INTERPOLATED_EXAMPLE_MESSAGE ) )
assertConnection ( sqlInputs, 1, "jdbc:oracle://localhost:30/dbName", null )
assertTrue ( "Comparaison OK", comparator. compare ( ) )
assertNotNull ( solution )
context. assertIsSatisfied ( )
assertEquals ( timesToIterate, underTest. callCount )
assertions. doesNotContain ( values )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
assertNotNull ( codes )
assertThat ( client. getNamesOfRepositories ( ), hasItems ( "Cars", "Aircraft" ) )
assertEquals ( "Incorrect number of admin news", 2, news. size ( ) )
assertEquals ( originalFetchCount, timeline. getFetchCount ( ) )
assertSame ( "control", choice. get ( ) )
assertEquals ( Lists. newArrayList ( "value1", "false", "1.02", "1,-1" ), Pql. getRowStringValues ( row ) )
Assert. assertEquals ( "SI Gateway does not contain correct name", "EUR", result )
assertEquals ( 0., absFixedCosts. getCosts ( context ) + relFixedCosts. getCosts ( context ), 0.01 )
assertTrue ( ex. isPrime ( 81 ) )
assertEquals ( 3, list. size ( ) )
assertEquals ( expecting, found )
assertNotNull ( mapping )
assertEquals ( expResult, result )
Assert. assertEquals ( "John,Doe", result. trim ( ) )
this. assertGet ( "relationshiptypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypes%252Ffruits/kiwi_implementation/inheritance", "entitytypes/relationshiptypes/kiwi_initial_inheritance.json" )
Assert. assertTrue ( command instanceof AuditEndpointCommand )
assertTrue ( connectionManager. isConnected ( ) )
assertEquals ( expectedEntry, result )
Assert. assertNotNull ( jurl. getJsonObject ( "not-an-endpoint.json" ) )
assertTrue ( result )
assertEquals ( "The return value is not correct.", Tag. EVAL_PAGE, this. tag. doEndTag ( ) )
Assert. assertNotNull ( ip )
assertFalse ( list. hasMore ( ) )
assertEquals ( 2, container. size ( ) )
assertNotNull ( error )
assertEquals ( "<<b>bold text</b> <i>italic text</i> <u>underlined text</u> <br> </p>\\n", label )
assertEquals ( "abc, def\\n", found )
assertTrue ( lhs. equals ( rhs ) )
assertThat ( log, instanceOf ( Log4J2Impl. class ) )
assertTotalDocs ( )
assertThat ( verifyModelVersionsSaved ( ), is ( ImmutableMap. of ( "foo", "1.2", "bar", "1.1", "wibble", "2.0" ) ) )
assertEquals ( "Failed at index " + i, assertions [ i ], arr )
assertFalse ( violated )
assertThat ( converter, instanceOf ( Converter. class ) )
assertEquals ( valueOf ( v ), s. serialize ( ( HttpPartSchema ) null, v ) )
assertEquals ( "Has one child with jssonns:ns", 1, numChilds )
assertEquals ( expected, average, 0.1 )
assertThat ( triggeredBy. size ( ), is ( 0 ) )
assertEquals ( "  ", formatter. format ( ) )
Assert. assertEquals ( "Invalid result", "text", result )
Assert. assertFalse ( "Authenticated", authenticated )
Assert. assertTrue ( errors. hasFieldErrors ( "states" ) )
assertThat ( data, is ( test ) )
assertNotSame ( last, childLast [ 0 ] )
Assert. assertNotNull ( tasks )
assertThat ( studies. size ( ), is ( 1 ) )
assertEquals ( array, result )
assertEquals ( "Incorrect unsigned byte value", MAGIC, s. u8. shortValue ( ptr ) )
context. assertIsSatisfied ( )
assertThat ( groups, containsInAnyOrder ( a. group ( ) ) )
assertNull ( "Got an unexpected number of rows - no data should be returned with the NoDataFromScan coprocessor. Found: " + r, r. list ( ) )
assertEquals ( Order. sellAt ( 0, NaN, NaN ), uncoveredTrade. getEntry ( ) )
assertThat ( channelCaptor. getValue ( ), is ( "slackbot@rateOfPrefix" ) )
assertAnnotations ( 2, MilitaryPlatform. class, new TestMilitaryPlatform ( 0, "HMJS Troutbridge", "HMJS Troutbridge" ), new TestMilitaryPlatform ( 1, "H.M.P.N.G.S. Hidden Dragon", "H.M.P.N.G.S. Hidden Dragon" ) )
assertEquals ( request. toHexString ( ), "000000008e3039708fdd9f488f9665426d0d9c57020000000200000002000000020000000200000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000010000000100000001000000010000000100000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000a00000001000000000000000
assertEquals ( "FAIL:FAIL", result )
assertEquals ( "Hello World", at. convert ( null, null, "Hello World" ). arg_ )
assertTrue ( loader. load ( "scrypt", true ) )
assertEquals ( "earliest child", testVal, testVal. getEarliestChild ( ) )
result. assertIsSatisfied ( )
assertEquals ( "http://example.com:4510/my_db/my_doc?startKey=test&endKey=test", uri. toString ( ) )
assertTrue ( Arrays. equals ( data, ( boolean [ ] ) deserialize. readObject ( ) ) )
assertThat ( rows. get ( 0 ). getData ( ), is ( equalTo ( ordered_data ) ) )
assertThat ( DateUtil. toDate ( date ), is ( cal. getTime ( ) ) )
assertFalse ( match )
assertEquals ( vr. getValidity ( ), Validity. INVALID )
assertEquals ( 1, change1 )
Assert. assertEquals ( Constants. GENERIC_SERIALIZATION_BEAN, url. getParameter ( Constants. GENERIC_KEY ) )
assertEquals ( 4, route. getTourActivities ( ). getActivities ( ). size ( ) )
assertTrue ( true )
assertEquals ( 0, int0 )
assertEquals ( str, quote ( ExampleBuilder. SAMPLE_EMAIL_PROPERTY_VALUE ) )
assertThat ( list. toString ( ), is ( copy. toString ( ) ) )
Assert. assertTrue ( success )
Assert. assertEquals ( expected, actual )
assertEcssEquals ( ".menu{background-position:\\"#{notemptyrichSkin.menu1?'url(':''}" + "#{notemptyrichSkin.menu2?richSkin.menu1:''}#{notemptyrichSkin.menu2?')':''}\\";}", convertFragment ( xcss ) )
assertThat ( task, is ( nullValue ( ) ) )
Assert. assertNotNull ( notification )
Assert. assertEquals ( expected, actual )
arraysWithCustomComparisonStrategy. assertContainsExactlyInAnyOrder ( someInfo ( ), actual, expected )
assertNodeTriggered ( processInstance, "com.sample.bpmn.hello", "Hello" )
Assert. assertEquals ( DefaultJobPriorityProvider. DEFAULT_PRIORITY_ON_RESOLUTION_FAILURE, job. getPriority ( ) )
assertArrayEquals ( new int [ ] { 0 }, findFusionStartIndices ( schedulingStrategies ) )
assertThat ( result, is ( lines ( new String [ ] [ ] { { "a", "b", "C" } } ) ) )
assertThat ( session. getSessionState ( ), equalTo ( sessions. getCurrentSessionState ( ) ) )
assertEquals ( testData [ i + 0 ], expectedResult, actualResult )
assertEquals ( "Expected 5 results!", 5, n )
assertEquals ( 0, map. size ( ) )
assertEquals ( 3, stream. skip ( 4 ) )
assertEquals ( "20110105205442147801000000", d. getId ( ) )
Assert. assertTrue ( "Timeout reached. Message latch value: " + messageLatch. getCount ( ), messageLatch. await ( 3, TimeUnit. SECONDS ) )
assertThat ( htmlDriver. getRunOnly ( ), is ( expectedResult ) )
Assert. assertEquals ( - 1.025, a. divide ( b ). doubleValue ( ), 1.0e-15 )
assertEquals ( t, HttpURL. toAbsoluteURL ( s ) )
assertEquals ( "kHz", khz. toString ( ) )
assertEquals ( " WHERE \\"NAME\\" LIKE? OR \\"AGE\\" >?", QueryBuilder. getWhereStringForFilters ( filters, sh ) )
assertEquals ( post. getUnsubscribeLinkForSubscribersOf ( PostSubClass. class ), "/topics/1/unsubscribe" )
assertEquals ( BatchStatus. FAILED, jobExecution. getBatchStatus ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( results ), contains ( bundleId ) )
assertEquals ( ( long ) 8, result. getLongValue ( ) )
assertTrue ( reset. await ( 10, TimeUnit. SECONDS ) )
assertFlowState ( ACCEPTED_CONFIRMED )
assertEquals ( offset, options. getOffset ( ) )
assertTrue ( page. asXml ( ). contains ( "java.lang.NullPointerException" ) )
assertEquals ( "Failed to generate two dimensional object array", "new Object[][] { { 1, 2 } }", s )
assertThat ( plugin. getClass ( ), is ( equalTo ( TimelineFormatter. class ) ) )
assertEquals ( 2.0, m. getMeanGreyValue ( ), 0.001 )
Assert. assertNotNull ( token )
Assert. assertEquals ( concepts, Collections. emptyList ( ) )
assertArrayEquals ( plaintext, correctPlaintext )
assertEquals ( ValidationResult. Result. OK, result. getStatus ( ) )
assertEquals ( 4, fixture. mark ( ) )
assertEquals ( style. length, 0 )
assertTrue ( page. asXml ( ). contains ( "UIViewRoot" ) )
assertNotEquals ( b1, b2 )
assertThat ( termCollection, is ( empty ( ) ) )
Assert. assertEquals ( orig, clone )
Assert. assertEquals ( "9999999999.9999", cide. getValorAliquota ( ) )
Assert. assertNotNull ( "null freeTaggingService", freeTaggingService )
assertEquals ( "SELECT * FROM [design, view] ASC, GROUP BY [foo] ASC", query. toString ( ) )
assertTrue ( LibUsb. getDeviceList ( context, deviceList ) >= 0 )
assertEquals ( val, 9 )
assertNotNull ( metadata. getEntityLocker ( ) )
assertEquals ( 1, result. getSize ( ) )
assertThat ( unit. shouldGenerateInvocationId ( ), is ( false ) )
assertEquals ( expectedDate, formatDate ( "yyyy-MM-dd HH:mm:ss", result ) )
assertEquals ( new ArrayElement ( "n" ). getEntries ( ), callback. convert ( reply ). toList ( ) )
assertEquals ( 0, profileEntries. size ( ) )
assertEquals ( "\\"a\\\\,b\\\\,c\\"", ctxName )
Assert. assertNotNull ( imposto. toString ( ) )
assertSame ( test. withMonth ( 1 ), test )
Assert. assertTrue ( ctx. getResult ( ) )
assertEquals ( complexPojo. getNestedSimplePojo ( ), nestedMap )
assertNotNull ( result )
assertEquals ( "hell", service. getNamespace ( "hell" ) )
assertEquals ( str, metadata. getGroupBy ( ) )
assertNotNull ( result )
assertInitTaskPermission ( engine, testProcessEngineCfg )
assertThat ( socketIoData, is ( expect ) )
assertEquals ( "GET:testGetRequestWithParameters", responseBody )
assertNotNull ( fieldInjectable. getInjectionTarget ( ) )
assertEquals ( 404, state. getLastReport ( ). getStatusCode ( ) )
assertEquals ( expResult, result )
assertTrue ( "HMAC digest mismatch", Arrays. equals ( message, output ) )
Assert. assertEquals ( 2, nbConceptsAlignedToMyThes. longValue ( ) )
assertFalse ( fencer. fence ( MOCK_TARGET ) )
assertIsOutputEqualTo ( "Using table annotated name for parameter 'name' at position 0" )
assertEquals ( 0., violation, 0.01 )
Assert. assertFalse ( "Failure expected true", r. getLeft ( ) )
this. assertGet ( "patternrefinementmodels/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fpatternrefinementmodels/JsonPrmTest_w1-wip1/patternrefinementmodels/jsonprm", "patternrefinementmodels/jsonprm.json" )
Assert. assertEquals ( 40, analyser. getLoadAtBeginning ( ). get ( 0 ), 0.01 )
Assert. assertEquals ( DuneTerrain. TERRAIN_ROCK, map. getTerrain ( ) )
assertEquals ( "Hello world!", engine. compileMustache ( "overwrite_helper_string", "{{#if this else='hello'}}world{{/if}}" ). render ( null ) )
Assert. assertArrayEquals ( "Wrong data", data, builtByFactory. getData ( ) )
assertThat ( withResult ( TestResult. ERROR ). matches ( testOutcome ), is ( false ) )
assertEquals ( "<html><head></head><body><span class=\\"foo\\">bar</span></body></html>", TextUtil. stripNewlines ( doc. html ( ) ) )
assertEquals ( "test", ft. getTitle ( ) )
assertEquals ( Arrays. asList ( "myForm:table:0:nestedOutput", "myForm:table:1:nestedOutput" ), trackingVisitCallback. getVisitedIds ( ) )
assertTrue ( false )
assertEquals ( messagePage. getContent ( ). size ( ), pageSize, "Incorrect message count." )
assertFalse ( lockAquired )
assertThat ( edges. size ( ), is ( 0 ) )
assertThat ( game. getPlayers ( ). size ( ), is ( count ) )
assertNotEquals ( column1, column2 )
Assert. assertEquals ( clickMe. getText ( ), buttonText )
assertEquals ( "TestGetPersistentNameIdentifier 0", persistentNameIdentifier, "saml_persistent_id" )
Assert. assertEquals ( "{\\"customer\\":{\\"id\\":103}}", json )
assertSimilarXml ( TestUtils. getResource ( "/org/sonar/plugins/groovy/codenarc/exportProfile/exportNullXml.xml" ), writer. toString ( ) )
assertEquals ( 2, mapper. get ( e ). other. size ( ) )
assertEquals ( HttpMethod. GET, HttpMethod. of ( request ) )
assertTrue ( result. getX ( ) < 0 )
Assert. assertEquals ( "select sum(STUDENT.ID) from student", getSql0 ( node ) )
assertThat ( fetchCount ( ), is ( 1L ) )
assertEquals ( "+a -a/b", s. getPattern ( ) )
assertEquals ( Integer. valueOf ( 1 ), result )
assertThat ( errorResponse1, is ( not ( errorResponse2 ) ) )
assertPutFails ( name, OntopiaRestErrors. MANDATORY_OBJECT_IS_WRONG_TYPE )
assertThat ( result. getName ( ), is ( "Mircosoft涓���" ) )
assertEquals ( cause, err )
assertEquals ( Arrays. asList ( listener1, listener2 ), listeners )
assertEquals ( "", result )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 2629743830L * 3L ) ) )
assertThat ( results, is ( new String [ ] [ ] { { "A", "B" } } ) )
assertThat ( controller, is ( equalTo ( method ) ) )
assertObjectEquals ( "{foo:'b'}", x )
assertNotNull ( response )
assertThat ( parameters, is ( "?searchView=own&orderBy=createdNewest&show=closeToTermination&minSupportCount=0" ) )
assertEquals ( 1, results. length )
context. assertIsSatisfied ( )
assertThat ( applicationSettings. getAccountCreationSetting ( ), is ( ACCOUNT_CREATION_ALLOWED ) )
assertNotNull ( pipelineCache. getPipeline ( ) )
assertThat ( index, is ( 1 ) )
assertThat ( planet. isPresent ( ), is ( false ) )
assertContains ( "Footer 1", content )
Assert. assertEquals ( 0, sut. getWeekdayCountBetweenDates ( start, end ) )
assertEquals ( OffsetDate. of ( LocalDate. of ( 2007, 7, 15 ), OFFSET_PONE ), t )
assertNotEquals ( left, right )
assertThat ( result, is ( expected ) )
assertEquals ( "bar\\nbazlala", template. render ( new Object [ ] { 1 } ) )
assertThat ( result, is ( equalTo ( expected ) ) )
assertThat ( isValid, is ( true ) )
assertThat ( geometry. getArea ( ), is ( 0.0 ) )
assertEquals ( 0, ArchiveFileFilter. filterInvalidFile ( files ). size ( ) )
assertEquals ( shifter. getAttack ( ), 0 )
assertEquals ( expected, actual )
assertThat ( plugin. isNoOutput ( ), equalTo ( false ) )
assertNull ( "State returned is not null", state )
Assert. assertSame ( sampleHandler, challengeHandler )
assertAllCommandsUsed ( )
assertEquals ( 0, swapStore. size ( "proj" ) )
assertThat ( "no offerers detected in a probed execution platform", validation. hasErrorAbout ( "no offerers" ) )
assertThat ( result, is ( packetStatus ) )
assertEquals ( expected, actual )
assertThat ( location, is ( Constants. DEFAULT_FILE_LOCATION ) )
assertTrue ( text. matches ( "(?s).*<html>\\\\s*<head>\\\\s*<title>\\\\s*Alert\\\\s*Value\\\\s*</title>\\\\s*</head>\\\\s*<body>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*value=\\".*\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*value=\\".*\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<script\\\\s*name=\\".*\\"\\\\s*value=\\".*\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<input\\\\s*name=\\".*\\"\\\\s*value=\\".*\\"\\\\s*type=\\"checkbox\\"\\\\s*checked=\\"checked\\"/>\\\\s*<output\\\\s*name=\\".*\\"\\\\s*value=\\".*\\"\\\\s*type=\\"checkbox\\"\\\\s*value=\\".*\\"\\\\s*value=\\".*\\"\\\\s*alert=
assertArrayEquals ( new String [ 0 ], args )
assertThat ( interval. isEmpty ( ), is ( false ) )
assertEquals ( expected, actual, delta )
assertFeedback ( bcp, "file:/unknown/path", "file:/unknown/path", "file:/unknown/path" )
Assert. assertTrue ( response. contains ( blogTitle ) )
assertEquals ( "value", ctxVars. get ( "key" ) )
assertStat ( result )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertTrue ( "Service loader did not find multiple TestPropertyHandler registrations", found )
Assert. assertSame ( m, support. convert ( m ) )
assertEquals ( DecodeQualification. VGTP, plugIn. getDecodeQualification ( path ) )
assertEquals ( ints, ints2 )
assertEqual ( "'&lt;&gt;&apos;&quot;'", query. next ( ) )
Assert. assertEquals ( NUM_TOP_LEVEL_DIRS / 2, fs. getStatus ( new AlluxioURI ( "/" ) ). getNumChildren ( ) )
Assert. assertEquals ( expected1, predicted )
assertNull ( KeyValueStoreRW. get ( vutDiv, vutKey1 ) )
assertNotNull ( ShortCode. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertNotNull ( Config. get ( request. getSession ( ), Config. FMT_LOCALE ) )
Assert. assertEquals ( 2, sheets. getTotalCount ( ) )
assertEquals ( previous + 1, size )
assertEquals ( expected, d_smd. getCohenVariance ( ), 1e-6 )
Assert. assertEquals ( expResult, result )
assertEquals ( "f3c4e8f59f9f9c89a0e59f9f9c9a0f", checksum )
assertThat ( attributeValueNs, is ( "true" ) )
assertPhotos ( places )
Assert. assertEquals ( "{&var}", e. toString ( ) )
assertEquals ( STRING, s )
assertThat ( sampledValue. getContext ( ), equalTo ( readingContext ) )
assertEquals ( expected, actual )
assertEquals ( testString, avroField. convertToKettleValue ( map, schema, mock ( Schema. class ), false ) )
Assert. assertTrue ( HttpTestUtils. semanticallyTransparent ( resp2, result ) )
assertThat ( builder. getPatches ( ), hasItemsInOrder ( "REMOVE /status/messages", "ADD /status/messages/1", "ADD /status/messages/2", "ADD /status/messages/3" ) )
assertEquals ( "<form name=\\"bar\\"><legend>foo:</legend><legend>Name:text><input type=\\"text\\" name=\\"text\\" value=\\"text\\"/>" + "<br>Email:<br>\\n" + "<input type=\\"text\\" name=\\"email\\" value=\\"text\\"/>" + "<br/>\\n" + "<label for=\\"Name\\"/>" + "<br/><input type=\\"text\\" name=\\"X\\" value=\\"text\\"/>" + "</label><br/>", r )
Assert. assertEquals ( dataHoraProcessamento, retornoConsultaCadastroDados. getDataHoraProcessamento ( ) )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertEquals ( cli. getProgramArguments ( ). toString ( ), testMojo. arguments. toString ( ) )
assertTrue ( validator. validate ( EntityNames. STUDENT_SECTION_ASSOCIATION, associations ). equals ( associations ) )
assertEquals ( "<shopping>\\n" + "    <category type=\\"groceries\\">\\n" + "        <item>Luxury Chocolate</item>\\n" + "        <item>Luxury Coffee</item>\\n" + "    </category>\\n" + "    <category type=\\"supplies\\">\\n" + "        <item>Paper</item>\\n" + "        <item when=\\"Frie\\">Pens</item>\\n" + "    </category>\\n" + "</shopping>", result. getResult ( ) )
assertEquals ( 2, numberUsersWithPreference )
assertEquals ( delegateValueModel. getSize ( ), valueModel. getSize ( ) )
assertEquals ( expected, pu. getCharsetProperty ( "sun.stderr.encoding" ) )
assertTrue ( rs. next ( ) )
assertEquals ( "abc\\n", found )
Assert. assertEquals ( jdkHands, acHands )
assertTreeEquals ( top, result )
assertNull ( output )
assertEquals ( "void dest7(int, @A @B @C int, @B @C @D int, @C @D @E int)", toString ( dest ) )
assertTrue ( handler instanceof RoundRobinRelatedContentSearchRequestProcessorHandler )
Assert. assertThat ( tempFontFile. exists ( ), is ( true ) )
assertResultSet ( res )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertThat ( getRecordedDomain ( ), not ( hasCondition ( Available ) ) )
assertEquals ( 0, dataset. getDatacentreCount ( ) )
context. assertTrue ( ex instanceof IllegalArgumentException )
assertTrue ( result. getException ( ) instanceof FlowExecutionException )
Assert. assertEquals ( 0, norm, 6.0e-13 )
assertEquals ( topic. getPoll ( ). getEndingDate ( ). getMillis ( ), newEndingDateTime. getMillis ( ) )
assertArrayEquals ( expected, OpenmrsUtil. getTypeDefaultValue ( args, 1 ) )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertTrue ( translator. isMethodSupported ( "refreshGroupsForUser" ) )
Assert. fail ( "Shouldn't be able to create non-transactionl service with enabled jta feature, " + "because isTransaction is transaction only allowed with isWSATService=false" )
assertEquals ( "Wrong child index", - 1, handler. indexOfChild ( parent, child ) )
assertThat ( domain. isLogHomeEnabled ( ), is ( false ) )
assertTrue ( errorsContainer. equals ( errors ) )
assertTrue ( "static Base64.encodeBase64Chunked() test-" + i, b )
assertEquals ( expectedLayer, actualLayer )
assertFalse ( victim. accept ( request ) )
assertThat ( result, is ( new String [ ] [ ] { { "Hello, world!" } } ) )
assertTrue ( node!= null )
assertEquals ( key. length, Sodium. crypto_aead_xchacha20poly1305_ietf_keybytes ( ) )
assertEquals ( "a,b,c", actual )
assertThat ( ruleManager. getAllGlobalsOfType ( "bla" ), contains ( "bla1", "bla2" ) )
assertEquals ( fullName, Util. stripFileExtension ( fullName ) )
assertEquals ( "testCode1a", codedTextVOs. get ( 0 ). getDescription ( ) )
assertTrue ( futures [ 0 ]. isCancelled ( ) )
assertEquals ( actualAfterProcess, expectedAfterProcess )
assertEquals ( before, update. toThrift ( ) )
assertEquals ( childName, mappedStart. getTo ( ) )
assertThat ( "Failed to find bogus source '" + bogusSources [ i ] + "' pattern", result, is ( true ) )
assertNotNull ( clientLayers )
assertEquals ( "validating the bean", obj, new TestBean ( ":" ) )
assertEquals ( 1, output. intValue ( ) )
assertEquals ( edit, hadoopClusterBridge. editNamedCluster ( namedCluster, iMetaStore, shell ) )
assertEquals ( "http://example.com/fhir/Patient?name=james", capt. getValue ( ). getURI ( ). toString ( ) )
assertEquals ( "Offset after or at incorrect", 0, offset )
assertFalse ( result. passedValidation ( ) )
assertNotNull ( injector )
assertEquals ( URI. create ( "http://localhost:%d/users/2/john%20smith" ), newUserLocation )
Assert. assertEquals ( userRepo, settings. getLocalRepository ( ) )
assertEquals ( parent. models. size ( ), 1 )
assertEquals ( 1, triangle. solution ( array ) )
Assert. assertTrue ( "Authentication should have failed", gotException )
Assert. assertEquals ( "InitialContext should return authenticated user", "user1", echoValue )
assertEquals ( 2, pResult. getValues ( ). size ( ) )
assertFalse ( result )
assertEquals ( Status. NOT_FOUND, response. getClientResponseStatus ( ) )
assertEquals ( "unexpected errors: " + equeue, 0, equeue. errors. size ( ) )
assertFalse ( panelManager. mapPanelDefinitionToPresenter. containsKey ( customPanel ) )
assertTrue ( "Inner transaction must be able to run with transient state", flag )
assertTrue ( victim. find ( ). isEmpty ( ) )
assertThat ( result, is ( "helloWorld" ) )
assertEquals ( 1, getLastIntegerValue ( parser. getEditorInterface ( ). get ( 0 ). getContent ( ) ) )
assertEquals ( "Method #toString is wrong", "Index{index=3}", _index. toString ( ) )
assertEquals ( "OTP version 4 is not supported", "4", OTPVersion. parse ( otp ). getVersion ( ) )
assertThat ( mockListener. propertyChangedFired, is ( true ) )
Assert. assertFalse ( context. getResult ( ) )
assertEquals ( "{\\"type\\":\\"person\\",\\"person\\":{\\"title\\":\\"value\\",\\"value\\":\\"orig\\",\\"extension\\":[{\\"title\\":\\"place\\",\\"value\\":\\"value\\"}]}}", gx. toString ( ) )
assertSelectResults ( results, paxReserveTypes )
Assert. assertTrue ( ( Boolean ) result )
assertNull ( s. getType ( ) )
assertNull ( rs. getRuleByName ( "name" ) )
assertThat ( action. deleteWorkspace ( server ), is ( true ) )
assertThat ( "ssh key", sut. getSshKey ( ), is ( equalTo ( sshKey ) ) )
assertEquals ( "Dest should have just the two fields altered", new FourLongs ( 1, 2, 3, 4 ), dest )
assertThat ( HiveCliEmulator. INSTANCE. preProcessor ( ). script ( hiveSql ), is ( "set x=1;" ) )
assertEquals ( 82, new AcceptsLambda < Integer > ( ). accept ( ( a, b ) -> x + a + b ). intValue ( ) )
assertEquals ( firstInvocation, secondInvocation )
assertEquals ( 3, adaptiveGrid. occupiedHypercubes ( ) )
assertNull ( edmProvider. getEntityContainerInfo ( new EntityName ( "Nonexistent container" ) ) )
Assert. assertEquals ( 27., analyser. getDistanceAtActivity ( route. getActivities ( ). get ( 2 ), route ), 0.01 )
Assert. assertEquals ( "Those monkeys.", this. realiser. realiseSentence ( sentence_1 ) )
assertEquals ( asList ( sampleShortAlbum ), result )
assertTrue ( "unknown ID should have no class", classdb. getClass ( "id3" ). isEmpty ( ) )
assertThat ( argument. getValue ( ). getName ( ), is ( "step_with_parameter" ) )
assertThat ( handler. getLastEvent ( ). getTimeout ( ), is ( new Duration ( 500 ) ) )
assertTrue ( FileUtil. gitDirectoriesAreEqual ( getResource ( "/canCloneARepository/state/testproj" ), testprojDir ) )
Assert. assertEquals ( user, cache. get ( id ) )
assertThat ( ( String ) FieldAccessUtil. getFieldVal ( interceptor, "profile" ), is ( "testProf" ) )
assertEquals ( "result10", aspect. aroundFlippableMethods ( pjp, flipAnnotation ) )
assertEquals ( myByte, adapter. getByte ( index ) )
context. assertIsSatisfied ( )
assertEquals ( element. getSkipLines ( ), skipLines )
assertEquals ( "foo,bar,1,3,1,3,-2", engine. compileMustache ( "stringArray", templateContents ). render ( data ) )
assertEquals ( 1, list. size ( ) )
assertEquals ( expected, elements )
Assert. assertEquals ( codigoStatusReposta, eventoRetorno. getCodigoStatusReposta ( ), 0 )
Assert. assertTrue ( myRecordV3. equals ( result ) )
assertTrue ( "Expected tokens to be throttled but got " + bucket. getTokens ( ). size ( ), bucket. getTokens ( ). size ( ) == bucket. getTokens ( ). size ( ) )
assertEquals ( "on failure", pp. getValue ( ) )
assertEquals ( candidate, SerializationUtils. clone ( payload ). getCandidate ( ) )
assertTrue ( page. asText ( ). contains ( "inline" ) )
assertEquals ( mockResponse, testResponse )
Assert. assertEquals ( key1, key2 )
assertEquals ( "FRED", query. getSingleResult ( ). getName ( ) )
Assert. assertEquals ( "unexpected XML protocol result", sb. toString ( ), tagOut )
Assert. assertTrue ( isActive )
assertions. isNotLessThan ( expected )
assertEquals ( crossoverProbability, crossover. getMutationProbability ( ), EPSILON )
assertNull ( response. getHeaders ( ). get ( "foo" ) )
assertNotNull ( resp )
assertEquals ( 2 * diffusioncoefficient * timelag, res, 0.01 )
assertFalse ( matcher. matches ( mockElement ) )
TestCase. assertTrue ( result )
assertNull ( position )
assertEquals ( Color. blue. getRGB ( ), thumbnail. getRGB ( 49, 99 ) )
assertEquals ( expected, actual )
assertTrue ( Arrays. equals ( password, entity. getPassword ( ) ) )
Assert. assertTrue ( _c. canConvertTo ( Float. TYPE ) )
assertEquals ( "id:int,country:chararray", Pql. getColumns ( writable ) )
Assert. assertEquals ( "\\"bob\\"", writer. toString ( ) )
Assert. assertEquals ( 0, a. rank ( ) )
Assert. assertEquals ( "UPDATE t_pet SET t_val =?, t_val =? ", sql )
assertThat ( exit, is ( 1 ) )
assertEquals ( "{\\"organization\\":true}", json )
assertEquals ( 2015, midJune. get ( Calendar. YEAR ) )
assertEquals ( "foo -bar", result. toString ( ) )
assertThat ( request. getStatus ( ), equalTo ( chargePointStatus ) )
assertThat ( target. delLink ( link ), is ( false ) )
Assert. assertFalse ( CompareUtil. compareArraysAndNull ( instance, copy ) )
Assert. assertTrue ( fired [ 0 ] )
assertTrue ( alice. getFriends ( ). isEmpty ( ) )
assertTrue ( String. format ( "Key %s is not a valid key", key ), PathElement. isValid ( pathElement ) )
assertThat ( ( Float ) converter. convert ( formattedValue, float. class, bundle ), is ( equalTo ( theValue ) ) )
assertSame ( error, stream. getError ( ) )
assertEquals ( ( double ) 8, result. getDoubleValue ( ), 0.0 )
assertThat ( dynamicProperties. size ( ), equalTo ( 5 ) )
assertPagination ( statusFilter, 2 )
assertTrue ( "No last observations found", response!= null && CollectionUtils. isEmpty ( response. getObservations ( ) ) )
assertNotNull ( content )
assertEquals ( 2, list. size ( ) )
assertEquals ( pp. getValue ( ), new Payload < > ( "error 4 test error" ). getValue ( ) )
assertRenderer ( )
assertThat ( "Incorrect analysis id.", analysis, is ( "_4466518e-6240-46b0-bcb4-c7ddf5560e3a" ) )
assertThat ( getBranchInstrumentor ( ). getLinePosition ( gtNode ), equalTo ( 8 ) )
assertFalse ( Files. exists ( root. resolve ( "index.html" ) ) )
Assert. assertTrue ( list. contains ( "dateCmp" ) )
assertEquals ( expected, actual )
assertThat ( serverSocket. isBound ( ), is ( true ) )
assertSame ( expectedOutput, result )
assertEquals ( generatedJavascript, expectedJavascript )
TestUtil. assertEquals ( exp, spans )
Assert. assertSame ( component, table. getHeader ( ) )
assertTrue ( validator. isValid ( modelId ) )
Assert. assertTrue ( statement. execute ( "SHOW PRIVILEGE" ) )
assertFalse ( skills. containsSkill ( "skill1" ) )
assertEquals ( "echo foo >> " + fileName, ctx. readLine ( ) )
Assert. assertTrue ( food instanceof JPAFood )
assertStatementCanBeDeparsedAs ( select, statement )
assertEquals ( relative, da. getDocType ( ) )
assertNotNull ( rs )
Assert. assertEquals ( "FROM Person T0 ORDER BY T0.lastName ASC LIMIT 0, 1", query. toQuery ( ) )
arrays. assertStartsWith ( description, null, sequence )
Assert. assertTrue ( verifyTest ( builder ) )
assertEquals ( rcll, cl. loadClass ( ServiceProvidersTestAbstractProvider. class. getName ( ) ) )
assertEquals ( 10, impl. getMaxSamples ( ) )
assertThat ( target. getData ( ), is ( value ) )
assertEquals ( expected. trim ( ), output. trim ( ) )
Assert. assertTrue ( Math. abs ( maxAbsDeviation ) < 2E-3 )
assertArrayEquals ( bytes, field. getBytes ( ) )
assertEquals ( "testGetName 0", name )
assertNotNull ( mpd. getMusicDatabase ( ) )
assertFalse ( a1. equals ( a2 ) )
assertThat ( target. parse ( ), is ( false ) )
assertEquals ( previousUsername, document. getAttribute ( "j_username" ) )
Assert. assertEquals ( 1, sc. getAttribute ( "rfc-but-spring" ) )
assertNull ( mirror. on ( target ). reflect ( ). field ( "referenceField" ). get ( ) )
assertEquals ( "https://us-phoenix-1.oraclecloud.com", endpoint )
assertThat ( repairedRepositories, is ( notNullValue ( ) ) )
Assert. assertEquals ( dRequest, eRequest )
assertEquals ( "location=Martin&id=1&q=1", pairs. get ( "Martin" ) )
assertEquals ( reader, readerResult )
Assert. assertTrue ( allowedCRUDL )
Assert. assertTrue ( fielderror. getErrorCode ( ). equals ( errorCode ) )
assertEquals ( 2d, e. evaluate ( ), 0.0 )
assertEquals ( 1, routingResult. getRouteHandlerMatches ( ). size ( ) )
assertSame ( tt2, tt )
assertEquals ( "Common exception", ms. getText ( ) )
assertTrue ( isBundle )
assertEquals ( mclass. toString ( ), 0.0, ref3. minus ( m3 ). getRMS ( ), TOLERANCE )
assertEquals ( agentFcd2. sinkConfig, ans2 )
assertFalse ( MethodChecksUtils. hasTestMethodKeyword ( parentNode ) )
assertEquals ( true, result )
Assert. assertNotNull ( entity )
Assert. assertEquals ( "rows in db", 10, outputOperator. getNumOfEventsInStore ( TABLE_POJO_NAME ) )
assertEquals ( item, point. getData ( ) )
assertTrue ( "Precedence rules violated", content. getContent ( ). indexOf ( "default1osml2<my:Tag3></my:Tag3><my:Tag4></my:Tag4>" ) > 0 )
Assert. fail ( "Expected WSSecurityException is not thrown " )
assertNull ( "header must be null for alternate header", xTable. getHeaderCellRenderer ( 0 ). getHeaderCell ( 0 ). getText ( ) )
assertEquals ( "ti/ti酶n.txt", objectMetadata. getFileName ( ) )
assertStatus ( 2, queryId, expectedNumRows, expectedNumBytes, expectedReadBytes )
Assert. assertEquals ( "{\\"type\\":\\"application/json\\",\\"name\\":\\"John\\",\\"url\\":\\"http://www.google.com\\"," + "\\"description\\":\\"Alice of some text\\",\\"items\\":[{\\"type\\":\\"application\\",\\"name\\":\\"John\\"},{\\"type\\":\\"application\\",\\"name\\":\\"Jane\\"},{\\"type\\":\\"application\\",\\"name\\":\\"John\\"},{\\"type\\":\\"application\\",\\"name\\":\\"Jane\\"},{\\"type\\":\\"application\\",\\"name\\":\\"John\\",\\"url\\":\\"http://www.google.com\\"}]}", result )
Assert. assertEquals ( 0, resultList. size ( ) )
Assert. assertEquals ( expResult, result )
Assert. assertTrue ( englishTagFound )
Assert. assertEquals ( this. list1Realisation, realised. getRealisation ( ) )
assertThat ( result. properties ( ). size ( ), is ( 0 ) )
assertEquals ( expected, actual )
assertEquals ( "straks", t. format ( new Date ( 600 ) ) )
assertEquals ( 1.0, x. dot ( y ), 1E-10 )
assertEquals ( "Start console", true, config. startConsole ( ) )
assertEquals ( "A", customDecimalFormat. format ( 123L ). toString ( ) )
assertValidEntity ( task )
assertEquals ( "collection", dotfileWriter. formatPCollection ( pcollectionImpl, jobPrototype ) )
assertTrue ( store. confirmToken ( TEST_USERNAME ) )
assertEquals ( 1, x. size ( ) )
assertTrue ( binary. exists ( ) )
Assert. assertEquals ( 3, a. getCbo ( ) )
assertTrue ( result )
assertThat ( request. equals ( request2 ), is ( false ) )
assertEquals ( 0, tasks. size ( ) )
assertFalse ( connectFuture. isConnected ( ) )
assertEquals ( new BigDecimal ( 200 ), customer. getAvailableFunds ( ) )
assertTrue ( sprinkler1. isOn ( ) )
Assert. assertEquals ( 20, termCount )
Assert. assertEquals ( 0, components. size ( ) )
assertEquals ( null, results. getResult ( ) )
Assert. assertEquals ( "EXECUTE ERROR:", sqltrue, sqlnew )
assertEquals ( "Expected 0 results!", 0, count )
assertTrue ( withSH < withoutSH )
assertNull ( item. getList ( ) )
assertTrue ( a. get ( "b" ). booleanValue ( ) )
assertEquals ( "http://examplemultiple.com?a[]=1&a[]", sbs. toString ( ) )
assertFalse ( "Cache believes cache is up to date when a classpath changed", reloadedCache. isUpToDate ( sourceFile ) )
assertEquals ( "JSESSIONID=1234; Path=/proxy/path/that/we/dont/want/", rsp. getHeaderField ( HEADER ) )
assertEquals ( "TEST", object. getContent ( ) )
assertEquals ( redirectUrl, "redirect:/topics/recent" )
assertFalse ( strategy. isActive ( state, user ) )
assertEqualsIgnoreWhitespace ( expected, drl )
assertNotNull ( move )
assertEquals ( expected, actual )
assertEquals ( "One folder", 1, holder. sourcePath. size ( ) )
assertThat ( item. getSeconds ( ), is ( seconds ) )
assertTrue ( "Cache believes the file is up to date", cache. isUpToDate ( sourceFile ) )
assertEquals ( Collections. singleton ( stepRefId ), result )
assertFalse ( thrown )
assertEquals ( "3e6d4e0f4f9f9f9e6d", payload. getParentSha ( ) )
assertTrue ( res )
assertNull ( generator )
assertEquals ( 16, mapQuerySubQueries. size ( ) )
assertArrayEquals ( data, ( long [ ] ) deserialize. readObject ( ) )
assertNull ( Deencapsulation. getField ( deviceRegistrationState, "lastUpdatedDateTimeUtcDate" ) )
assertNotNull ( "The IService should not be null.", stub )
assertThat ( writer. toString ( ), equalTo ( "{\\"queries\\":[{\\"name\\":\\"group1\\",\\"results\\":[{\\"group_by\\":[{\\"tag1\\":\\"tag1Value\\",\\"tag2\\":\\"tag2Value\\"}]}," + "{\\"results\\":[{\\"name\\":\\"group1\\",\\"tags\\":{\\"foo\\":\\"fi\\",\\"bar\\":\\"fo\\"},\\"group_by\\":[{\\"tag1\\":\\"tag1Value\\",\\"tag2\\":\\"tag2Value\\"}]}," + "{\\"results\\":[{\\"name\\":\\"group1\\",\\"tags\\":{\\"tag1\\":\\"tag1Value\\",\\"bar\\":\\"fi\\"}," + "{\\"name\\":\\"group1\\",\\"tag_by\\":[{\\"tag2\\":\\"tag2Value\\",\\"tag1\\":\\"tag1Value\\"}]}," + "{\\"name\\":\\"group2\\",\\"tag_by\\":[{\\"tag1\\":\\"tag1Value\\",\\"tag2
assertThat ( bodyWriter. getValue ( ). objectsWriter, instanceOf ( SyncBodyObjectsWriter. class ) )
assertEquals ( mockedProvisioningConnectionString, resultConnectionString )
assertEquals ( "SGVsbG8gV29yZQ=", b64. encode ( "SGVsbG8gV29yZQ=" ) )
assertEquals ( networkView, ev3. getSource ( ) )
Assert. assertEquals ( 1, result. getEntities ( ). size ( ) )
Assert. assertFalse ( result )
assertFalse ( result. passedValidation ( ) )
assertEquals ( "CycleItselfInArr[c=CycleItselfInArr[{}]", logAdapter. asString ( value ) )
assertNotNull ( "No getter method returned", method )
Assert. assertEquals ( 2, routes. iterator ( ). next ( ). getActivities ( ). size ( ) )
assertEquals ( one, two )
assertEquals ( "Hello", captured. getRequestLine ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff41_" ) )
assertEquals ( expected, actualQuery )
assertEquals ( "Tabs count", 2, page. getTabsCount ( ) )
assertOut ( "this[new QName(new Namespace('ns'), 'knownMember')]" )
descriptor. assertValid ( )
assertEquals ( code, toTest. writeUTF ( code ) )
response. then ( ). log ( ). ifValidationFails ( ). assertThat ( )
assertThat ( ids, is ( empty ( ) ) )
assertSame ( "base", res )
assertNull ( target. postConstruct ( ) )
assertFalse ( ( Boolean ) result. get ( "successful" ) )
assertEquals ( "Mismatched detection value", expected, actual )
Assert. assertTrue ( "Should be displaying the dialog", driver. getPageSource ( ). contains ( expectedText ) )
Assert. assertEquals ( getElement ( "MSH.1", "SendingApplication" ), handler. getSendingApplication ( ) )
Assert. assertNotNull ( schema )
assertSearchYields ( fooIndex, "foo:aaa", "foo" )
assertThat ( HANode. sandbox ( ), is ( "d8701508-41b7-471e-9b32-61cf824a660d-0000" ) )
Assert. assertEquals ( expected, component )
assertNotNullOrEmpty ( "Questions should never be null.", questions )
assertEquals ( Arrays. asList ( "hdfs://hostname.test.com:8020/user/hive/warehouse/break/b=all |'& the spaces/c=in PartKeys/", "With fun chars *%!|" ), results )
Assert. assertEquals ( "", printCircular. printCircular ( array ) )
Assert. assertTrue ( scopePath. findScopes ( Collections. singletonMap ( "className", properties ) ). size ( ) > 0 )
assertTrue ( extension. isActive ( ) )
assertEquals ( expectedMap, map )
assertEquals ( 2, list. size ( ) )
assertEquals ( emptyMetadata, md )
assertEquals ( NOT_DECODED, color, object. getColor ( ) )
assertEquals ( expResult, result )
assertEquals ( minutes + ( ( hours * DateUtils. MILLIS_PER_HOUR ) + ( ( aCalendar. get ( Calendar. DAY_OF_MONTH ) - 1 ) * DateUtils. MILLIS_PER_DAY ) ) / DateUtils. MILLIS_PER_MINUTE, testResult )
assertThat ( highlightPhrase, is ( "<b>fox</b>" ) )
assertEquals ( 123, config. getMinConnectionsPerPartition ( ) )
Assert. assertNull ( entity. getContent ( ) )
assertThat ( ifCounterDataIndexable. matchesPojo ( this. counterData ), is ( false ) )
assertThat ( steps. getPages ( ), is ( pages ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":\\"newName\\",\\"newName\\":\\"\\"}}}", result. get ( RETURN_RESULT ) )
assertObjectEquals ( "{f1:'f1b'}", bs. getClassMeta ( B1. class ). getExample ( bs ) )
Assert. assertEquals ( "someTableName", overriddenTableName )
assertEquals ( expResult, result )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Stream>" + "<Parameter name=\\"name\\" value=\\"value\\"/>" + "</Stream>", elem. toXml ( ) )
assertTrue ( "multiLineSubstitutionFailure3", "prefix {\\nPI} suffix". equals ( result ) )
assertThat ( entities. getTotalElements ( ), equalTo ( 1L ) )
Assert. assertEquals ( "employing", word. getLemma ( ) )
rule. assertScenarioEnded ( )
Assert. assertEquals ( expected, component )
Assert. assertEquals ( "", mainAttributes. get ( Attributes. IMPORT_PACKAGE ) )
Assert. assertEquals ( count, 1 )
assertTrue ( vs. exists ( ) )
assertEquals ( resp, receivedResp. getBody ( ) )
assertEquals ( expected, stashes. get ( 0 ) )
assertNotNull ( validator )
Assert. assertTrue ( exceptionMatches )
assertSame ( this, theProperty. getOwner ( ) )
assertTrue ( resultMessage ( result, PUT ), result. passedValidation ( ) )
assertEquals ( Lists. newArrayList ( "2", "3", "4", "5" ), getStringsFromElements ( elements ) )
assertTrue ( firstMessageFound && secondMessageFound )
context. assertIsSatisfied ( )
Assert. assertEquals ( expected, actual )
iterablesWithCaseInsensitiveComparisonStrategy. assertDoesNotContainSubsequence ( someInfo ( ), actual, subsequence )
assertThat ( xray. getConstructors ( ). size ( ), equalTo ( UnlockedObject. class. getDeclaredConstructors ( ). length ) )
Assert. assertEquals ( 1, factory. getNumCarvedTestCases ( ) )
assertEquals ( expected, actual )
assertThat ( "getValue", node. getValue ( project ), is ( ( ITypeDefinition ) null ) )
assertTrue ( gw. lines. isEmpty ( ) )
Assert. assertEquals ( PhaseId. PHENOTYPE_MAPPING, result. getPhenotypeMapping ( ) )
assertThat ( prover, notNullValue ( ) )
assertEquals ( req. getP2PK ( ). toRawPubKey ( ), "04D4E7F9C84F2E8B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9C4C4A84A8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
assertTrue ( true )
Assert. assertTrue ( leaderElector. isLeader ( ) )
assertEquals ( result, expecting )
assertEquals ( "Tuesday, Thursday, Wednesday, Monday, Saturday, Sunday, Friday", days. get ( forwhile ) )
assertThat ( bodyCapture. getMillis ( ), is ( greaterThanOrEqualTo ( start + 1L ) ) )
Assert. assertEquals ( clusterTbl. getClusterName ( ), clusterName )
assertEquals ( "It shall return null value", CtxNames. VALUE_NULL, name. getValueAsString ( evalCtx ) )
Assert. assertEquals ( tag. type ( ), TagType. INT )
assertEquals ( 190, sum )
assertTrue ( "Same cost solution (2.0 == 2.0) should not be accepted", schrimpfAcceptance. acceptSolution ( memory, createSolutionWithCost ( 2.0 ) ) )
assertEquals ( 15, value )
assertEquals ( "34 abc\\n", found )
Assert. assertEquals ( sizeBefore + 1, dico. size ( ) )
Assert. assertEquals ( Collections. emptyList ( ), versionProperty. getPropertyNames ( ) )
Assert. assertEquals ( "Conversion did not match for type " + type, extected, actual )
assertEquals ( JobStatus. ACCEPTED, jobResultArgumentCaptor. getValue ( ). getStatus ( ) )
Assert. assertFalse ( ste. isEmpty ( ) )
assertEquals ( "novecentos e noventa e nove", actual )
assertEquals ( request, result )
assertThat ( resource, is ( equalTo ( method ) ) )
assertSame ( MyClock. class, ClockFactory. getClock ( ). getClass ( ) )
assertEquals ( expected, actual )
assertOut ( "\\"\\\\\\'" )
assertEquals ( "http://example.com/", con. request ( ). url ( ) )
Assert. assertEquals ( "SELECT DAYOFMONTH('2001-11-00'), MONTH('2005-00-00');", text )
assertTrue ( "Student id read from hibernate session is 99 Purkynova REDHAT BRNO CZ", "99 Purkynova REDHAT BRNO CZ". equals ( st. getId ( ) ) )
Assert. assertNotEquals ( "Paths must be different", mapOut. getParent ( ), mapOutIdx. getParent ( ) )
assertMetric ( "v2.metric.that.is.longer.than.63.characters.v2.metric.that.is.longer.than.63.characters", "count(1)=10", "m1.metric.that.is.longer.than.63.characters" )
assertThat ( metrics. toString ( ), is ( "Global[sentBytes=0, sentCount=0, receivedBytes=0, receivedCount=0, " + "lastLatency=0 ms, totalLatency=0 ms, totalLatency=0 ms]" ) )
assertEquals ( expectedTouchzs, attributes. getTouchzs ( ) )
assertEquals ( expResult, result )
assertEquals ( "% world", s )
Assert. assertEquals ( inet2, inet3 )
Assert. assertTrue ( check. equals ( o ) )
assertTrue ( found )
assertTrue ( type. equals ( type2 ) )
assertEquals ( 1, tokens. length )
this. assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher. class ) ) )
assertThat ( handler, nullValue ( ) )
assertEquals ( newSyncPoint, loadSyncPoint )
assertThat ( ( String ) commands. get ( asList ( "test" ) ). getHint ( ), is ( "help" ) )
assertEquals ( GcdStatus. INVALID, GcdStatus. returnValidGbids ( invalidGbids ) )
assertTrue ( textField. getAttribute ( "value" ). equals ( "textt" ) )
assertEquals ( actualAfterProcess, expectedAfterProcess )
assertThat ( FullHalfPair1. equals ( FullHalfPair2 ), is ( false ) )
assertHaveSamePersistentFields ( this. existingItem, foundItem )
assertNull ( containerRequest. evaluatePreconditions ( now ) )
assertThat ( mockLogger. isLogpCalled ( ), is ( false ) )
assertThat ( actual, containsInAnyOrder ( expected. toArray ( new String [ expectedPersons. size ( ) ] ) ) )
assertEquals ( s_expected_1, Hex. toHexString ( item1. getData ( ) ). toUpperCase ( ) )
assertEquals ( null, result. getId ( ) )
assertEquals ( 0, records. size ( ) )
assertExpectedMinMax ( )
assertEquals ( true, actual )
assertThat ( i, is ( 22 ) )
assertEquals ( 15, atAct1. get ( 0 ) )
Assert. assertTrue ( config. isEnabled ( ) )
assertEquals ( "java.util.Collection<de.test.Company>", tp. toString ( ) )
assertFalse ( currentData. isPresent ( ) )
Helpers. assertJson ( querySpecification. toJson ( ), "{\\"query\\":\\"select * from enrollments where validWhere and validGroupBy\\" group by validGroupBy\\"}" )
assertEquals ( 204, response. statusCode ( ) )
assertSame ( "OutoutStream is not set correctly.", outputStream, entrancePi. getOutputStream ( ) )
assertEquals ( - 2147483L, result )
assertEquals ( "abcde", new String ( out. toByteArray ( ) ) )
assertTrue ( commiters. isEmpty ( ) )
assertEquals ( 1305, result )
assertTrue ( isEqual ( distance, expected ) )
Assert. assertTrue ( "The re-generated and the read record do not match.", k1. equals ( k2 ) && v1. equals ( v2 ) )
assertEquals ( "file:/foo/bar/", moduleDir )
assertEquals ( "PONG", response )
assertTrue ( "Standard issue method '" + issueMethod + "' does not match expected values for '" + finishedGood_QtyOrdered + "', " + "finishedGood_QtyReceived='50' and " + "finishedGood_QtyIssued='500'" + ", " + "issueMethod '" + issueMethod + "'", storage. isIssueMethodValid ( issueMethod ) )
assertTrue ( sut. isMale ( ) )
Assert. assertEquals ( 1, restrictions. length )
Assert. assertEquals ( "Session Application-Id should be the same as indicated.", SLh_APPID, sessionAppId )
runner. assertTransferCount ( QueryRecord. REL_FAILURE, 1 )
Assert. assertEquals ( "There is no error diagnostic", 0, diags. size ( ) )
assertThat ( newStart, equalTo ( IntraDayDate. create ( new LocalDate ( 2009, 1, 19 ), hours ( 3 ) ) ) )
assertTrue ( fileExists )
assertEquals ( Rect. centeredRect ( 10, 20, 30, 40 ), g. getBounds ( ) )
assertThat ( isValid, is ( true ) )
assertEquals ( UriStatus. VALID_UNVERSIONED, manager. validateRenderingUri ( uri ) )
assertEquals ( expResult, result )
assertNull ( tuple. getSet ( "field" ) )
Assert. assertEquals ( ExchangeState. RESOLVED, exchange. getState ( ) )
assertThat ( runner. getDescription ( ). getDisplayName ( ), is ( equalTo ( "scenario_name(feature_name)" ) ) )
assertEquals ( "Response components should be equal to the mocked components", mockedComponents, responseComponents )
assertEquals ( expected, elements )
assertNotNull ( mqttAsyncClient )
assertEquals ( expected, actual )
assertWindowUpdateFrame ( frame, streamId, windowSizeIncrement )
Assert. assertEquals ( expectedNode. toString ( ), pdoc. toString ( ) )
Assert. assertFalse ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isDebugEnabled ( ) )
assertTrue ( factory. newAsyncClient ( ) instanceof NioSocket )
assertEquals ( body. toString ( ), "error 4 test error" )
assertEquals ( 0, queue. size ( ) )
assertTrue ( writtenCount == TEST_SIZE )
assertStubMessage ( request, null, null )
assertEquals ( Status. WARN, jxm. getStatus ( ) )
assertThat ( map. size ( ), is ( 0 ) )
assertTrue ( this. rbenvRubyRuntimeLocator. isInstalled ( ) )
TestUtils. assertPropertyChangeEvent ( report, "draggedDistance", 10, 10 )
assertOut ( "a = '' + 2 + '' + '' * 4" )
Assert. assertThat ( message, containsString ( "contained" ) )
assertThat ( filter. getAbsolutePath ( ), startsWith ( f. getAbsolutePath ( ) ) )
assertEquals ( State. CHECKED, result )
assertEquals ( 0, result )
assertThat ( mapped, is ( new UidPrincipal ( KERMIT_UID ) ) )
assertNotNull ( "helper fie should be loaded.", new LcmcGuiHelper ( testFile ) )
assertOut ( "var a:String = escape('http://whatever.com')" )
assertArrayEquals ( NOT_ENCODED, binary, encode ( object ) )
assertEquals ( - 1234f, ConfigUtils. getFloat ( config, 0, "some-number" ), 0.001f )
assertThat ( optionsByType. get ( Timeout. class ), is ( timeout ) )
assertEquals ( expectedOpts, javaOpts )
assertEquals ( 0, historicIncidents )
assertTrue ( result, result. contains ( lineSeparator + "fieldName=foo" + lineSeparator ) )
assertThat ( actual, arrayContainingInAnyOrder ( "Databases NoSQL", "Big Data/MarkLogic" ) )
assertEquals ( "John Doe", personName. getName ( ) )
assertEquals ( "Expected 1 result!", 1, n )
assertSeen ( visible )
assertTrue ( matched )
assertEquals ( 0, state. getExcludedScopes ( ). size ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 10" ) )
assertEquals ( isTouched, true )
assertCheckScopesFailForOtherScopes ( ScopePathType. READ_PUBLIC, ScopePathType. ACTIVITIES_UPDATE, ScopePathType. AFFILIATIONS_UPDATE, ScopePathType. FUNDING_CREATE, ScopePathType. AFFILIATIONS_UPDATE, ScopePathType. FUNDING_CREATE, ScopePathType. AFFILIATIONS_UPDATE, ScopePathType. AFFILIATIONS_CREATE, ScopePathType. AFFILIATIONS_CREATE, ScopePathType. ORCID_PATENTS_UPDATE, ScopePathType. ORCID_PATENTS_UPDATE, ScopePathType. PEER_REVIEW_UPDATE, ScopePathType. PEER_REVIEW_CREATE, ScopePathType. ACTIVITIES_UPDATE )
Assert. assertTrue ( sbWidthEnd < sbWidthStart )
Assert. assertEquals ( "2", result )
assertEquals ( np. getDefaultLayer ( ), upperLayer )
assertEquals ( "Mismatched data", expected, res )
assertNotNull ( DnsNameResolver. maybeChooseServiceConfig ( choice, new Random ( ), "localhost" ) )
assertTrue ( TextFileUtils. fileEndsWithNewlineChar ( file0 ) )
assertTrue ( "package not build", new File ( "target/test-classes/test.deb" ). exists ( ) )
Assert. assertFalse ( res. isPresent ( ) )
assertEquals ( expResult, result )
assertEqualsIgnoreWhitespace ( expected, drl )
assertThat ( count, is ( equalTo ( 2L ) ) )
assertThat ( duration. dividedBy ( - 3 ), equalTo ( TimeDuration. ofSeconds ( - 0.5 ) ) )
assertNotEquals ( ref, oid )
assertEquals ( TargetType. PILLAR_PCRE, target. getType ( ) )
Assert. assertEquals ( "Alignment count should be 0", 0, afpChain2. getAtoms ( ). length )
assertFalse ( validator. validate ( "student", ids ). containsAll ( ids ) )
assertEquals ( conf. getRest ( ). get ( 0 ). getResource ( ). get ( 0 ). getType ( ), "Patient" )
Assert. assertEquals ( expectedResult, result )
assertSnake ( "       \\n" + "       \\n" + "       \\n" + "   ��   \\n" + "       \\n" + "       \\n" + "       \\n" )
assertEquals ( expected, arguments. profilers )
Assert. assertEquals ( expected, testIndex. sort ( sortBy ) )
assertEquals ( "div=10", query ( "select count(*) from test:name=bean1" ) )
assertEquals ( "P0D", task. getDefaultDurationFormat ( ) )
assertDTOs ( expected, actual )
assertNodeGetsCorrectResult ( node, 42.0 )
assertTrue ( output. contains ( "'TIMEZONE'='GMT+1'" ) )
Assert. assertEquals ( "\\"val1\\",\\"val2\\"\\n\\"val3\\",\\"val4\\"\\n", csvString )
assertEquals ( "Wrong number of popups in the parent layout", 1, count )
Assert. assertNotNull ( mat )
assertTrue ( entity. getId ( ) > 0L &&! entity. isAwesome ( ) )
Assert. assertEquals ( b, a. rotate ( ) )
assertTrue ( validator. isValid ( max + positiveInteger ( ) + "" + min + "", null ) )
Assert. assertEquals ( "/base/group_id/id/pages/page/lang?format=q", uri )
assertEquals ( "N" + nl + "A" + nl + "B" + nl + "C" + nl + "D" + nl + "E", s )
Assert. assertNull ( actualNode )
assertEquals ( expectedString, parser. parseString ( inputString ) )
assertEquals ( "Rows were not in the order of the provided keys", keys. get ( index ), bytes )
assertEquals ( expected, bos. toString ( ) )
assertTrue ( sw. toString ( ). contains ( needleToFind ) )
assertFalse ( c. remove ( "sadsdf", null ) )
assertThat ( method. invoke ( obj, "a" ), is ( ( Object ) 1 ) )
assertEquals ( new String ( Base64. decodeBase64 ( ANDROID_CONFIG_CONTENT ), Charsets. UTF_8 ), content )
assertEquals ( "provides X.Y with Z1.Z2, Z3.Z4;", modelWriter. toString ( ) )
assertEquals ( "http://localhost:8080/service", availableProperties. get ( "server.url" ) )
GwtAssertions. assertThat ( a )
assertEquals ( "FRED", s )
assertEquals ( violation. getMessage ( ), "Message is {escaped}" )
assertTrue ( XMLUnit. compareXML ( result ( "xquery/string.xml" ), zapResult ). similar ( ) )
assertEquals ( field. getSqlName ( ), "Table.field" )
assertThat ( Arrays. asList ( result ), is ( Arrays. asList ( msg1, msg2 ) ) )
assertTrue ( permissionEvaluator. hasAnyProjectPermission ( authentication, Permission. EDIT_PAGE ) )
assertThat ( data. length == length. length, is ( true ) )
assertEquals ( 35, cap. get ( 0 ) )
Assert. assertEquals ( 2, ( long ) sut. execute ( new UsageMetricDailyStreamInfoRequest ( new Date ( apri8th2011 ), streamScopeId ) ) )
assertEquals ( expectedPlan, actualPlan )
assertEquals ( test1. compareTo ( test2 ), 0 )
assertXMLIdentical ( new Diff ( result, combineWithIdKey ( recessive, dominant ) ), true )
assertNotNull ( assertionDocument )
assertTrue ( actual. isEmpty ( ) )
assertEquals ( expOut, a. slice ( 0, 0 ) )
assertEquals ( v21Educations1, v21Educations2 )
assertArrayEquals ( expectedFamilies, actualFamilies )
assertEquals ( nominalLabelDTO. getNominalLabelId ( ), modelNominalLabelDTO. getNominalLabelId ( ) )
assertEquals ( 200, status. getStatusLine ( ). getStatusCode ( ) )
assertTrue ( matches )
assertEquals ( 200, response. getStatusCode ( ) )
assertTrue ( invalidValues. length == 0 )
assertThat ( logSpy. getLoggingEvents ( ), contains ( "SomeMessage", "Exception" ) )
assertFalse ( TracingFilter. isTraced ( request ) )
assertThat ( violations. size ( ), is ( 1 ) )
assertEquals ( this. tlv. getValue ( ), builder. getTlvs ( ). get ( 0 ). getValue ( ) )
assertEquals ( "string 1", summaryString )
assertThat ( found, nullValue ( ) )
assertAllGoodAfterRemovePauses ( )
assertTrue ( Cells. isEmpty ( cell ) )
assertEquals ( expResult, result, 0.0001 )
assertEquals ( expected. toString ( ), actual. toString ( ) )
Assert. assertEquals ( 1, annots. size ( ) )
assertThat ( output. readKeyValuesToMap ( ), equalTo ( expectedOutput ) )
Assert. assertTrue ( processor. getSupportedAnnotationTypes ( ). contains ( AlexaIntentListener. class. getSimpleName ( ) ) )
assertThat ( errors, not ( hasFieldErrors ( "familyName" ) ) )
assertEquals ( 0x00FFFF, result. getVoxel ( 5, 15, 5 ),.01 )
assertTrue ( ml. isEmpty ( ) )
assertEquals ( JreVersion. Java_9, version )
assertThat ( ( String ) dest. get ( "aaa" ), is ( 1000 ) )
assertEquals ( expected, actual )
assertSame ( INITIATIVE_PUBLIC, result )
assertEquals ( 1, recordListener. getRecordsRead ( ) )
assertThat ( httpClientStub. getStatusCode ( ), is ( 200 ) )
assertFalse ( solution. equals ( newSolution ) )
assertFalse ( infoValidator. validate ( info ) )
assertNonLLStar ( g, altsWithRecursion )
assertEquals ( commands, catalog. getCommands ( ) )
assertEquals ( "[* foo.*]", m. toString ( ) )
assertTrue ( queue. isEmpty ( ) )
assertEquals ( "DummyBasicMockRule", written )
assertScoreAndParse ( content, null, 2 )
assertFalse ( "Unable to update non existing user", success )
Assert. assertEquals ( "GET", s )
assertThat ( WorkflowStatus. statusType ( stageInProgress ), is ( StatusType. NOT_BUILT_WORK ) )
assertTrue ( BufferedImageComparer. isRGBSimilar ( sourceImage, img ) )
assertTrue ( equals )
assertEquals ( blog. getHandle ( ), blogObject. getHandle ( ) )
assertThat ( config. getUserAgent ( ), equalTo ( userAgent ) )
assertNull ( result )
assertCallTree ( callTree, callStack. getStackEvents ( ), true )
assertThat ( uri, equalTo ( url + "?format=json" ) )
Assert. assertEquals ( icmsSetado, icms. getIcmsst ( ) )
assertEquals ( millis, tracker.Opened ( ) )
assertEquals ( "Hello ^^there", ResponseBodyInterpolator. interpolate ( "Hello ^^there", req ) )
assertThat ( throttler. getThrottleResult ( BUCKET_1 ), equalTo ( "1.2.3.4" ) )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
assertTrue ( checker. isFormat ( handle ) )
assertEquals ( 1, lines. size ( ) )
assertEquals ( expected, result )
assertEquals ( constraintViolations. size ( ), 1 )
assertEquals ( "1,2,null,null,foo", logAdapter. getExposedAsString ( array ) )
Assert. assertSame ( checkList, CheckAttributeFactory. checkList )
assertLogContains ( "Tests summary: 1 classfilter" )
assertTrue ( reference instanceof SoftReference )
assertEquals ( asList ( "kingo", "kyle", "stuff", "crap", "bingo", "blah" ), mp. getParameters ( ) )
assertEquals ( USERNAME, username )
assertEquals ( "X-NaN-02-01", dateSortString )
assertFalse ( result. isEmpty ( ) )
assertEquals ( hashCode, "9f9d8c8d0d47c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d9c8d9c8d9c8d9e8d0f9d9d9d9d9d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f9c8d0f
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, n ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertE ( "2   " + "    " + "4   " )
assertEquals ( assertion, base )
assertTrue ( cb. getValue ( ). equals ( attribBoolean. getValue ( ) ) )
assertNull ( event. get ( ) )
assertEquals ( - 1, testApp. executeApplication ( args ) )
assertFalse ( result. hasErrors ( ) )
assertEquals ( expected, new String ( actual ) )
assertSame ( root, transform ( root ) )
assertEquals ( ImmutableVariantScore. of ( ReadType. ALT, 30 ), SamRecordScoring. getVariantScore ( alt, SNV ) )
assertEquals ( "b", surveyDatumList. get ( 0 ). data )
assertEquals ( " is true", aviatorBoolean. add ( aviatorString, null ). getValue ( null ) )
assertTrue ( "Path for added property is wrong: actual=" + listener. getEvents ( ). get ( 0 ). getPath ( ) + ", expected=" + propPath, containsPath ( listener, propPath ) )
Assert. assertEquals ( numeroControleFCI, produto. getNumeroControleFCI ( ) )
Assert. assertEquals ( Object. class, t. getType ( ) )
assertEquals ( "null", formatWithNullString. getString ( ) )
assertTrue ( propertiesManager. getPropertyChangeListeners ( ). isEmpty ( ) )
Assert. assertEquals ( entity. getValue ( ), getEntity. getValue ( ) )
assertEquals ( "a_b_c", subject. getCurrentState ( ). getID ( ) )
assertThat ( result, equalTo ( SAT. ordinal ( ) ) )
assertPlanMatches ( expected )
assertThatSql ( query, is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertArrayEquals ( ( byte [ ] ) 0x55, value )
Assert. assertNull ( reconnectCohort )
assertThat ( readElements, is ( users ) )
assertEquals ( "Input " + v + " does not match output " + o, v, o )
assertEquals ( command1. hashCode ( ), command2. hashCode ( ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( 5, products. size ( ) )
Assert. assertEquals ( expectedJsonString, actualJsonString )
assertEquals ( other, file. getLastModified ( ) )
assertEquals ( 2, s. getRequiredSkills ( ). values ( ). size ( ) )
assertEquals ( archivePath, "MER_RR__1POBCM20060718_091715_000001012049_00308_22907_0113.N1" )
assertEquals ( expectedString1 + expectedString2, statistic. toString ( ) )
assertThat ( step. getResult ( ), is ( TestResult. PENDING ) )
assertThat ( result. getUserId ( ), is ( "admin_wasabi" ) )
assertThat ( result, is ( true ) )
assertEquals ( "{a:[1,{b:[]}]}", p )
assertEquals ( "name available", "universe-real", statistic. getName ( ) )
assertTrue ( downloader. waitForReportReady ( ) )
assertEquals ( statusCode, HttpServletResponse. SC_OK )
runner. assertAllFlowFilesTransferred ( SolrUtils. REL_SUCCESS, 1 )
assertEquals ( expected, this. output. toString ( ) )
assertThat ( "Elements were not added", index. size ( ), equalTo ( 2 ) )
assertFalse ( messageSent )
assertThat ( hybrid. getProperty ( JcrConstants. JCR_UUID ), is ( notNullValue ( ) ) )
Assert. assertNotNull ( builderFactory. createArrayBuilder ( ) )
assertEquals ( expected, actual )
Assert. assertFalse ( artifactFilter. match ( getArtifact ( ) ) )
assertEquals ( timeFrameEditor. isFirstMonthAvailable ( ), false )
assertNotNull ( result )
assertThat ( returned, is ( result ) )
assertTrue ( peerAcceptanceUtil. isPeerInterestedOnRemoteWorker ( clientID. getServiceID ( ) ) )
assertEquals ( "Matching", VersionMatchResult. REJECTED, p. matches ( info ) )
assertEquals ( "modis.somthing other", typeString )
assertEquals ( 2, solution. getActivities ( ). size ( ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
Assert. assertEquals ( actualDependencies, expectedDependencies, "Unexpected dependencies for process: " + outputFeedToTest )
assertEquals ( R. style. Image_Dialog_Icon_Dialog, shadowDialog. getIcon ( ). getIconId ( ) )
assertEquals ( "rule-a", getRingRuleId ( repository ) )
Assert. assertEquals ( "http://example.com/{?foo*}", template. getTemplate ( ) )
assertThat ( gtx. get ( Hoge. class, hoge. getKey ( ), 1 ), is ( notNullValue ( ) ) )
assertThat ( regionalBreweries, hasItems ( startsWith ( "Brew" ), endsWith ( "Brew" ) ) )
assertTrue ( isPropertyValueSet )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertNotNull ( informe. getId ( ) )
assertEquals ( "Expected 0 results!", 0, count )
assertTrue ( vRoute. getStart ( ). getLocation ( ). getId ( ). equals ( "start" ) )
assertEcssEquals ( ".menu{left:\\"#{notemptyrichSkin.menu1?'10px':''}\\";}", convertFragment ( xcss ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
assertEquals ( expected, elements )
assertEquals ( Constants. KB, info. getLength ( ) )
assertEquals ( "Java", orElseFramework. name )
assertThat ( result, is ( "http://localhost:9999/test" ) )
assertNotSame ( result, one )
assertEquals ( 0, v. getSize ( ) )
assertEquals ( "NzdLuIkGwYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rYW5rY
assertThat ( pattern. matchAsInclusive ( null, null ), is ( true ) )
assertThat ( domain. getValidationFailures ( resourceLookup ), contains ( stringContainsInOrder ( "variable", "ADMIN_NAME", "is", "not" ) ) )
assertTrue ( sf. getSocketFactory ( ) instanceof SSLSocketFactory )
statusChecker. assertContainsMatch ( "File property was changed after triggering policy", "x" )
assertNotNull ( Country. reader ( ). read ( ) )
assertThat ( session. login ( "superuser", true ), is ( true ) )
Assert. assertNotNull ( object )
assertEquals ( "index--", expr. getParameterValue ( ) )
Assert. assertEquals ( 2, m2Fields. size ( ) )
assertTrue ( Sid. validate ( validExtensionConfiguration ). isEmpty ( ) )
assertEquals ( country, request. getVisitorCountry ( ) )
assertTrue ( cleanExit )
assertTrue ( page. asText ( ). contains ( "Decoding completed" ) )
assertEquals ( 0.0, mo. mean ( X [ 3 ] ), epsilon )
assertEquals ( expected, actual )
assertThat ( BondBasedConfiguration. configurationOf ( g, 0, 1, 2, 3 ), is ( Configuration. DoubleBond. TOGETHER ) )
assertNull ( deserializedDate )
assertThat ( resultedQuery, is ( expectedQuery ) )
assertThat ( encryptor. checkPassword ( singleCharacterPwd, encryptedPasswordPass1 ), is ( true ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFInfoEventoCartaCorrecao ( ). toString ( ) )
assertTrue ( runnable. wasFailed ( ) )
assertEquals ( map, map2 )
assertThat ( this. resolver. resolve ( this. type ), is ( resolved ) )
assertThat ( g. atom ( 4 ). label ( ), is ( "a holo" ) )
assertEquals ( A, bite )
Assert. assertEquals ( instance, entities. get ( 0 ) )
Assert. assertNotNull ( geocodingServlet )
assertEquals ( expected, d_riskRatio. getError ( ), 0.0001 )
assertThat ( this. start. plus ( period ), is ( this. end ) )
assertTrue ( hasReset )
assertEquals ( TestUtil. HTTP_TEST_PROXY, result. get ( 0 ) )
assertSame ( shouldFind, selection. fileSelects ( By. id ( "test" ) ) )
context. assertIsSatisfied ( )
Assert. assertEquals ( "test message action1", harness1. getValue ( "THISWILLGETCLOBBERED" ) )
assertEquals ( Integer. valueOf ( 67 ), resultMap. get ( "Age" ) )
assertEquals ( 3000, res. get ( "port" ) )
assertEquals ( "text/html; charset=Big5", headers. get ( "Content-Type" ). iterator ( ). next ( ) )
assertEquals ( "user_id userId,user_name userName,pwd pwd", t. getColumnsSql ( ) )
assertEquals ( 5, sum, 1e-1 )
assertEquals ( buildValue ( i ), new String ( value. getBytes ( ), 0, value. getLength ( ) ) )
assertTrue ( listMultipartFormDataMessageBodyReader. isReadable ( type, genericType, new Annotation [ 0 ], null ) )
assertEquals ( UNAUTHORIZED_401, response. getStatus ( ) )
Assert. assertEquals ( value, writeTest ( kernelServices, "maxHeapSize", value ) )
assertEquals ( "failed with random range: " + range, expected, actual )
assertEquals ( "1.0", value )
assertEquals ( "The three parameter is processed just once.", template. render ( ) )
assertNull ( new TaskSpec ( inputBlock, outputBlock ). getEpilogue ( ) )
assertFalse ( new BytecodeAnnotationBuilder ( true ). sanityCheckInline ( instrAaload ) )
assertEquals ( 0.0, comp. compare ( "41.0", "42.0" ) )
assertActive ( player1, player2, player3, player4, player5 )
Assert. assertTrue ( "The list is not ordered ascending", sortedAges. equals ( ages ) )
Assert. assertEquals ( "wrong value", 10, status. byteCount )
Assert. assertNull ( retinaCookieValue )
Assert. assertEquals ( "this is my salt", a. toString ( ) )
assertThat ( result. size ( ), is ( 0 ) )
assertEquals ( expResult, result, 0.0 )
Assert. assertTrue ( offlineMsg. getId ( )!= null )
assertions. isNotEqualTo ( actual )
assertTrue ( result )
assertCollectionDataIntegrity ( collection )
Assert. assertTrue ( result. keep ( key ) )
assertEquals ( 0, valueModel. size ( ) )
assertTrue ( "Repository should contain newly added statement", testCon. hasStatement ( bob, name, nameBob, true ) )
Assert. assertNull ( writer )
assertNull ( loaded )
assertEquals ( 5, result. length )
assertEquals ( E * Math. cos ( Math. E ), e. evaluate ( ), 0d )
assertThat ( RpslObjectFilter. diff ( original, updated ), is ( "@@ -1,3 +1,3 @@\\n" + " mntner:         UPD-MNT\\n" + "-description:    updated\\n" + "-mnt-by:         UPD-MNT2\\n" + " source:         TEST\\n" ) )
assertTrue ( filter. allow ( event, listener ) )
Assert. assertEquals ( "SELECT MID(YEARWEEK('2000-01-01'), 5, 2);", text )
assertEquals ( expResult, result )
assertEquals ( expected, stats )
assertEquals ( ValidationResult. Result. OK, vr. getStatus ( ) )
assertSame ( expected, result )
Assert. assertEquals ( 2, result. size ( ) )
compiler. assertErrorsOnLines ( "example/Test.java", diagnostics, 7 )
assertNotNull ( "Sendout is null", entity )
assertTrue ( startTime. getValue ( ) > 0 )
assertFalse ( context. isValid ( null ) )
assertThat ( results. subList ( 0, 5 ), is ( Arrays. asList ( ProcessHadoopScriptHandler. CLEANUP_ERROR_MESSAGE, "ERROR: TBatch should not be replicated. Obsolete profiles are not removed" ) ) )
Assert. assertEquals ( THIRTEEN_DOUBLE, pi. getThirteenDouble ( ), 0.01 )
assertMatrixEquals ( Ar, qr. factor ( new DenseMatrix ( Ar ) ), TOL )
assertThat ( definition. getTenantId ( ), is ( TENANT_ONE ) )
assertEquals ( getLoggingEvent ( ). getFormattedMessage ( ), "test; UUID=" + uuid. toString ( ) )
assertNotNull ( oAuth2AccessToken )
Assert. assertEquals ( expectedXML, actualXML )
assertEquals ( 1, map. size ( ) )
assertNotNull ( deleteFirst )
Assert. assertEquals ( new QName ( "java:java.lang.String" ), fromType )
assertNotNull ( waitOn ( browser, 6000 ). untilRemoved ( By. id ( "wait-if" ) ) )
assertPermanentCount ( playerA, "Harvest Mage", 1 )
assertRelativeEffectEqual ( expected, actual )
assertEquals ( "foo=bar", capt. getAllValues ( ). get ( 0 ). getFirstHeader ( "Cookie" ). getValue ( ) )
assertTrue ( violations. hasNext ( ) )
assertTrue ( Arrays. equals ( getPacketData
Assert. assertNotNull ( foo )
assertNull ( processors )
assertEquals ( "0000000000000000000000000000ffff7f000001208d", Utils. bytesToHexString ( pa. bitcoinSerialize ( ) ) )
Assert. assertEquals ( "http://tfs2013.com/api/v1/projects/contacts?force=1&path=tfs2013", actual )
assertTrue ( ex. isPrime ( 37 ) )
assertEquals ( expected, sw. toString ( ) )
assertEquals ( 30, points )
assertThat ( provider, instanceOf ( AuthSchemeProvider. class ) )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5 ) ) )
Assert. assertTrue ( isValid ( resp, FORMAT_STRING, true, 1 ), "Response is not valid" )
assertTrue ( pn. getVertices ( ). size ( ) > 0 )
Assert. fail ( "Expected an exception for class " + c )
assertEquals ( expectedSchema, AvroTypeConverter. convertToAvro ( TalendType. DOUBLE, null ) )
Assert. assertEquals ( 1, size )
assertEquals ( "浜诧����瀹�涓�涓�涓�", tickler. getName ( ) )
Assert. assertTrue ( asDTO. getAbuseRuleHits ( ) < 0 )
MatcherAssert. assertThat ( new SingleFormLexeme ( dude ). string ( ), CoreMatchers. equalTo ( dude ) )
Assert. assertEquals ( "Found " + computed + " but shouldn't be.", expected, computed )
Assert. assertEquals ( "SELECT CHARSET('abc');", text )
Assert. assertEquals ( TestHelper. getPoint ( 30, 10 ), result. getValue ( ) )
assertNotNull ( r )
assertTrue ( "Incorrect bytes written", new String ( rbytes, 0, fileString. length ( ) ). equals ( fileString ) )
assertEquals ( "ABCDEF", lambda. apply ( 1 ) )
assertThat ( facets, is ( Arrays. asList ( "one", "two", "three", "four", "five", "six" ) ) )
assertEquals ( new Values ( true, false, true, true, true, null, true, true, null ), v )
assertTrue ( "Expected " + expectedQuery1 + " or " + expectedQuery2 + " but was " + newQuery, ( expectedQuery1. equals ( newQuery ) || expectedQuery2. equalsIgnoreCase ( newQuery ) ) )
assertNotNull ( result )
assertEquals ( "field.asSet()", p. toString ( ) )
Assert. assertEquals ( beforeNumTasks, getDefaultQueue ( ). fetchStatistics ( ). getNumTasks ( ) )
assertTrue ( d1 instanceof PublicCloneable )
assertThat ( ByteUtil. toPrimitiveByte ( i ), is ( 1 ) )
Assert. assertTrue ( Math. abs ( vega - vegaFiniteDiffAnalytic ) < 1E-02 )
assertNotNull ( project )
assertEquals ( "", result )
assertThat ( parents, containsInAnyOrder ( "Outer", "Nested", "NestedField" ) )
assertTrue ( exceptionThrown )
assertNotNull ( entity. getId ( ) )
assertTrue ( isValid )
assertNull ( found )
assertTrue ( EXPECTED_DS_INDEX_MSG + " instead got " + e. getMessage ( ), e instanceof DatastoreNeedIndexException )
assertTrue ( cygnusGroupingRules. toString ( ). length ( ) == 0 )
Assert. assertEquals ( 1, a. value )
assertThat ( result, equalTo ( v + "." + s ) )
assertEquals ( ordered, result )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"record\\":{\\"url\\":\\"http://sendme.com/tropo\\",\\"beep\\":true,\\"allowSignals\\":[\\"exit\\",\\"stopHold\\"]}}]}" )
Assert. assertEquals ( "password/change", view )
assertIs ( 3, count )
assertTrue ( latch. await ( 2, SECONDS ) )
assertEquals ( "Count of customer", 0, res )
Assert. assertFalse ( this. manager. disconnectAll ( this. family1 ) )
assertEquals ( "defaultPath", accClientConf. get ( Property. GENERAL_SECURITY_CREDENTIAL_PROVIDER_PATHS. getKey ( ) ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( config. getUserID ( ), result. getUserID ( ) )
assertThat ( tokens, equalTo ( Arrays. < Object > asList ( "One", "Two", "Three" ) ) )
assertTrue ( kb. hasErrors ( ) )
assertEquals ( "https://localhost:80/mockResource?id=1", finalRedirectUrl )
assertThat ( authorities. stream ( ). map ( a -> a. getAuthority ( ) ). collect ( Collectors. toList ( ) ), containsInAnyOrder ( SimpleGrantedAuthority. ADMIN_GRANT, SimpleGrantedAuthority. AUTHENTICATED_GRANT ) )
assertEquals ( testCard, testEE. buildFilter ( filter ) )
assertEquals ( "Latitude is not properly parsed", 5d, mapper. readLatitude ( columns ), 0 )
assertNotNull ( foo )
Assert. assertFalse ( types. isEmpty ( ) )
assertThatClassExpressionIsTranslatedAs ( classExpression, initialStateAsserted, expectedPropertyValue )
assertNull ( result )
Assert. assertEquals ( projectorForward. getTranscriptStartingAtCDS ( ), resultTranscript )
assertEquals ( g0, g1 )
MatcherAssert. assertThat ( new TwoTemplateBodyFills ( one, two ). fillUp ( Mockito. any ( ), Mockito. any ( ) ), CoreMatchers. is ( "Hey dude" ) )
assertAllTargetsCount ( 0 )
assertTrue ( declaration. process ( brie ) )
assertThat ( httpGetRoot. getPath ( ), startsWith ( "/rest/api/" ) )
assertFalse ( property. toStringValues ( ). isEmpty ( ) )
assertEquals ( 0, array. size ( ) )
assertTrue ( "Appstore upload file not found in appstore folder", files. length == 1 )
assertFalse ( obs. isDirty ( ) )
assertEquals ( "[1080:0:0:0:8:800:200c:417a]:80", StringUtils. formatSocket ( socket ) )
assertThat ( log, instanceOf ( CommonsLoggingImpl. class ) )
assertNotNull ( "Title Photos is empty for " + imdbId, result )
assertEquals ( 2, found. size ( ) )
Assert. assertTrue ( kernelServices. isSuccessfulBoot ( ) )
assertEquals ( "This is supposed to be test, things supposed to be thing", out )
assertEquals ( "{\\"color\\":\\"red\\",\\"price\\":19.95,\\"type\\":\\"fiction\\",\\"pinGroup\\":[{\\"name\\":\\"P1\\",\\"type\\":\\"L1\\",\\"coordinates\\":[3.5,7],\\"type\\":\\"Point\\",\\"coordinates\\":[8.5,16.5],\\"pins\\":[{\\"name\\":\\"P2\\",\\"type\\":\\"L2\\",\\"coordinates\\":[8.5,16.5],\\"coordinates\\":[8.5,16.5],\\"pins\\":[{\\"name\\":\\"P2\\",\\"type\\":\\"L2\\",\\"coordinates\\":[8.5,7],\\"type\\":\\"Point\\",\\"coordinates\\":[8.5,16.5],\\"pins\\":[]}]}}", actualJsonCode )
assertEquals ( ChargingCapability. V_240V_3_PHASE_32A, ChargingCapability. fromConnector ( connector ) )
assertOut ( "a.setSeconds(10)" )
assertEquals ( register, newRegister )
assertTrue ( "query result not as expected", result. contains ( "ex://x" ) )
Assert. assertEquals ( string, textArray. getString ( 0 ) )
assertEquals ( "{" + newLine ( ) + "    with ($p) { name = \\"Luca\\" };" + newLine ( ) + "}", printConstraint ( expression ) )
Assert. assertEquals ( record. get ( "name" ). toString ( ), decoded. getName ( ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertEquals ( "", res )
Assert. assertArrayEquals ( cmpAlignAndMeet, outAlignAndMeet )
assertEquals ( "Buffer[size=3, contents=a1b2c3d4e5f61a2b3c4d5e6f10203040]", buffer. toString ( ) )
Assert. assertEquals ( 6, count )
assertThat ( mustache. render ( null ), is ( "hello from SpringMessageSourceHelper" ) )
Assert. assertEquals ( "should use default damage", damageComponent. getDamage ( ), 0 )
assertRecord ( record, startPos )
editor. assertContextualCompletions ( "-->", "https://github.com/rabbitmq/rabbitmq-server/releases/download", "- name: docker-git\\n" + "https://github.com/rabbitmq/rabbitmq-server/releases/download", "- name: docker-git\\n" + "https://github.com/rabbitmq/rabbitmq-server/releases/download", "- gitUrl: https://github.com/rabbitmq-server/releases/download", "- gitUrl: https://github.com/rabbitmq-server/releases/download", "- name: docker-git\\n" + "https://github.com/rabbitmq-server/releases/download", "- gitUrl: https://github.com/rabbitmq-server/releases/download", "- gitUrl: https://github.com/rabbitmq-server/releases/download", "- gitUrl: https://github.com/rabbitmq-server/releases/download", "- gitUrl: https://github.com/rabbitmq-server/releases/download", "- gitUrl
Assert. assertEquals ( "We expect a null response", responseResult. getText ( ) )
assertTrue ( changeListBuilder. isEmpty ( ) )
Assert. assertTrue ( "gpiano3.wav". equals ( ( ( JsonArray ) result ). get ( 0 ) ) )
assertEquals ( expected, actual )
assertEquals ( originalEdgeValue + "\\n" + decodedEdgeValue, originalEdgeValue. hashCode ( ), decodedEdgeValue. hashCode ( ) )
assertThat ( xmlResult, CompareMatcher. isSimilarTo ( out. toString ( ) ). ignoreWhitespace ( ). withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors. byNameAndText ) ) )
assertNotNull ( result )
assertTrue ( rootNode. exists ( ) )
runner. assertValid ( )
assertArrayEquals ( items, ArraysUtil. subtract ( items, 1 ) )
assertEquals ( expectedJson, inputsJson. get ( 0 ). toJson ( ) )
assertEquals ( expected, actual )
assertEquals ( 1, search. getSize ( ) )
assertViewName ( mav, "redirect:/topics/" + BRANCH_ID )
Assert. assertFalse ( first. equals ( second ) )
assertFalse ( "Password hash validation failed", validator. validate ( passwordHash, manipulatedIterationsHash ) )
Assert. fail ( "Test encountered an unexpected exception." )
assertTokenSurfacesEquals ( Arrays. asList ( "iPhone4 S" ), tokenizer. tokenize ( input ) )
assertThat ( configuration. getThreads ( ), is ( 7 ) )
assertThat ( ListNumbers. binarySearchValueOrLower ( values, 0 ), equalTo ( 2 ) )
assertNotNull ( "User should not be logged in!", driver. findElement ( RESOURCE_URL ) )
assertTrue ( outputDrilldown. getSeries ( ). get ( 0 ). getId ( ). equals ( "id" ) )
assertTrue ( resultMessage ( result, PUT ), result. passedValidation ( ) )
assertSame ( expr. accept ( visitor ), visitResult )
assertThat ( d, is ( ( Date ) null ) )
Assert. assertNotNull ( info )
Assert. assertEquals ( "Invalid HUs retrieved", Arrays. asList ( new HUQueryBuilder ( ). huSelectModel ( ). select ( warehouse02 ). fetch ( ) ), huSelectModel. createHUQueryBuilder ( ). list ( ) )
assertEquals ( "Date parsing is wrong", new BitemporalDateTime ( 5L ), mapper. readBitemporalDate ( columns, "vtTo" ) )
assertNotNull ( result )
Assert. assertEquals ( 1, events. size ( ) )
assertThat ( d. getFamily ( ), is ( familyDefinition ) )
assertThat ( control. matches ( "/clients/somewhere" ), is ( true ) )
assertThat ( deps, hasItem ( artifactWithId ( "junit", "junit-dep" ) ) )
assertEquals ( 2, index. estimateTotalCount ( ) )
assertEquals ( false, CollectionUtil. validateNotEmpty ( os ) )
assertOverflow ( new BigDecimal ( x ). divide ( new BigDecimal ( y ), 10, RoundingMode. HALF_UP ), result, x / y )
assertResponse ( DataMockery. createOPTIONSRequest ( ), request )
assertEquals ( "scoreHolder.addSoftConstraintMatch(kcontext, -1)", marshaledAction )
assertEquals ( result. size ( ), 2 )
Assert. assertEquals ( "Wrong toString()", "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.Action actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.OutputActionCase actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.yang.gen.v1.urn.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.Action actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.OutputActionCase actionClass: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.protocol.rev130731.OutputActionCase", key1. toString ( ) )
assertEquals ( "street", model. getPerson ( ). getAdresses ( ). iterator ( ). next ( ). getStreet ( ) )
assertNotNull ( proxy. getData ( ) )
assertThat ( resolved, contains ( "a:A", "b:B", "c:C" ) )
Assert. assertEquals ( howdy, iface. greeting. codec. fromString ( "Hello, " ) )
assertNotNull ( ui. getErrorFrame ( new JPanel ( ) ) )
assertEquals ( "34 + 2\\n", found )
assertNull ( item. getItemProperty ( "other1" ) )
assertEquals ( actualCountOfPosts, resultOfGetTopics )
assertNull ( result )
assertZippelGCD ( gcd, a, b )
assertEquals ( "result", aspect. aroundFlippableMethods ( pjp, flipAnnotation ) )
Assert. assertNull ( nullURL )
assertLabelQueryResult ( query. toString ( ), both ( binds ( "p", URI. class ) ). and ( binds ( "pLabel", Literal. class ) ) )
assertNotNull ( User. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEqualObjects ( cpuOut, gpuOut )
assertEquals ( "Hallo Test", I18N. tr ( "helloParam", new Object [ ] { "Test" } ) )
assertArrayEquals ( writeBytes, readBytes )
assertEquals ( Response. Status. OK. getStatusCode ( ), target. request ( MediaType. APPLICATION_XML ). get ( ). getStatus ( ) )
Assert. assertNull ( cookieStore )
assertTaskEvents ( task, TaskListener. EVENTNAME_ASSIGNMENT, TaskListener. EVENTNAME_CREATE )
assertEquals ( meta1, meta2 )
assertEquals ( "{" + newLine ( ) + "    delete($person);" + newLine ( ) + "}", printConstraint ( expression ) )
Assert. fail ( )
assertNotNull ( adminObject1 )
Assert. assertEquals ( "a =b%20", KeyValueFormatter. format ( params, true, false ) )
assertEquals ( SUCCESS_FACTORY_RESPONSE, handleResponse )
AvroAssertTestUtil. assertEqualsWithJsonIgnoreOrder ( outputDirPath, jsonOutputFile, DocumentMetadata. class )
assertEquals ( 1, result. size ( ) )
assertEquals ( "Wrong union result", true, diff. isEmpty ( ) )
assertNotEquals ( command, new MPDCommand ( "command" ) )
Assert. assertEquals ( 2, terms. size ( ) )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
assertEquals ( 0, result. size ( ) )
assertFalse ( commandLine. hasOption ( "noSimpleOption" ) )
assertArrayEquals ( new int [ ] { 1, 2, 3, 4, 5, 6 }, out. readElements ( queue, e ) )
assertEquals ( expected, drugList )
authRule. assertScenario ( scenario )
assertThat ( databaseHelper. getAgeOfExactOrNextExistingSerial ( ), is ( - 1L ) )
assertEquals ( "To is not properly parsed", new Date ( 5 ), mapper. readTo ( columns ) )
Assert. assertEquals ( 27., analyser. getDistanceAtActivity ( route. getActivities ( ). get ( 0 ), route ), 0.01 )
assertEquals ( Lists. newArrayList ( 1 ), listBad )
assertTrue ( e instanceof E_Uri )
assertSuccess ( validationResult )
assertThat ( validationList, is ( Collections. < String > emptyList ( ) ) )
Assert. assertEquals ( "CONTENT", r. get ( String. class ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><alice xmlns=\\"http://some-namespace\\" xmlns:xlink=\\"http://some-namespace\\"/><bob xmlns=\\"http://some-namespace\\"/></alice>", result. toString ( ) )
Assert. assertEquals ( 0, result. size ( ) )
assertArrayEquals ( new double [ ] { 0.5, 0.5, 0.7 }, StatisticUtils. determineStandardDeviationDoubles ( subSingleBenchmarkResultList, averageScore ), DELTA )
assertEquals ( expected, result )
assertEquals ( expectedOffset, offset )
Assert. assertEquals ( "<semData><tipoPrazoDataEntrega>3</tipoPrazoDataEntrega></semData>", entregaSemDataDefinida. toString ( ) )
assertions. containsSequence ( sequence )
assertDateEquals ( new DateTime ( 2013, 12, 31, 23, 59, 59, 999 ), date )
assertAxisEquals ( - 10.0, - 1.0, new double [ ] { - 10.0, - 9.0, - 8.0, - 7.0, - 6.0, - 5.0, - 4.0, - 3.0, - 2.0, - 1.0 }, new String [ ] { "-10", "-9", "-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1" }, axis )
assertStatus ( 3, expectedNumRows, expectedNumBytes, expectedReadBytes )
assertEquals ( OTHER_GRAPHITE_URL, backendAlarm. getGraphiteBaseUrl ( ) )
assertEquals ( childProject1. getCustomWorkspace ( ), childWorkspace )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 0 ) ) )
assertEquals ( ComponentElementGetValue. FIELD_VALUES [ 1 ], ComponentElementGetValue. clearTextFieldValue ( elem ) )
assertThat ( testOutcome. getTestFailureCause ( ). getMessage ( ), is ( "Test failed" ) )
assertEquals ( "<notification xmlns=\\"http://mpns.apache.org/Notification\\">" + "<tile count=\\"1\\" title=\\"Sample\\" backBackgroundImage=\\"http://sample.com/image.png\\" backTitle=\\"Random \\"asdf<>;'a\\"/>" + "</tile>", tile. toXML ( ) )
Assert. assertFalse ( component. isValid ( ) )
assertEquals ( new TableName ( ), loadIO. stat ( ). TableName ( ) )
Assert. assertNotNull ( "URL not null", resurl )
assertEquals ( b1. hashCode ( ), b2. hashCode ( ) )
assertEquals ( AuthenticationMechanismOutcome. AUTHENTICATED, outcome )
assertEquals ( "a/b(@a!= 123.0) and (@a!= 123.0) are not valid", SelectorStepBuilder. toString ( steps ) )
assertEquals ( "[foo] did not satisfy [" + startsWith ( "d" ) + ']', expected. getMessage ( ) )
assertEquals ( user. getUserName ( ), "admin" )
assertNotNull ( "HousingComplex is null", entity )
assertEquals ( ref, tokens )
assertEquals ( e1. evaluate ( new Object ( ) ), e2. evaluate ( new Object ( ) ) )
assertEquals ( 0.0f, entry. getEffectiveDurationHours ( ), Float. MIN_NORMAL )
assertThat ( context, is ( notNullValue ( ) ) )
assertTrue ( "Expires must not be more than created, but was " + actualTtl, actualTtl > ttlInSeconds )
assertEquals ( 0, s. next ( ). size ( ) )
assertPermanentCount ( playerA, "Titanic Growth", 1 )
assertEquals ( value1. getValue ( ), value2. getValue ( ) )
assertEquals ( "text/html", get ( url ). contentType ( ) )
assertEquals ( 0, extraArtifactRepositoryProperties. size ( ) )
assertTrue ( Arrays. equals ( new int [ ] { 1, 1 }, coordinate ) )
assertEquals ( 2762, int0 )
assertThat ( url. toString ( ), endsWith ( "/api/v1/projects/13" ) )
assertEquals ( expectedQuery, actualQuery )
Assert. assertEquals ( 500.0, balance, 0.0 )
assertEquals ( "Hello World!", sample. helloWorld ( ) )
assertTrue ( validator. supports ( resource ) )
assertFalse ( result. passedValidation ( ) )
assertSchemaMatch ( horizontalRule )
assertThat ( codes, containsInAnyOrder ( "43343-3", "43343-4" ) )
assertThat ( exclusions, containsInAnyOrder ( "this key" ) )
assertEquals ( newContent, retrievedContent )
assertEquals ( "CN=server,O=OPS4J,C=OPS4J", server. getName ( ) )
assertEquals ( "aTestString", classUnderTest. getClientVersion ( ) )
assertTrue ( new File ( "target/excludedClasses/com/querydsl/apt/domain/query2/QAnimalTest_Animal.java" ). exists ( ) )
assertEquals ( BOLD. foreground ( RED ), style )
Assert. assertNull ( lineToBeCopied. getActualText ( ) )
assertEquals ( 2, analyser. getBlobs ( ). size ( ) )
assertEquals ( new Integer ( 1 ), cf. getSegmentQuals ( ) )
assertEquals ( "2000-01-01T12:30:00", format )
assertEquals ( "test", context. getIOContext ( ). getName ( ) )
Assert. assertEquals ( 0, issues. length )
Assert. assertEquals ( this. user, result )
assertEquals ( "Hello", message. get ( ) )
assertFalse ( builder. getErrors ( ). toString ( ), builder. hasErrors ( ) )
Assert. assertEquals ( Double. toString ( x ), FastMath. sin ( x ), actual [ i ], 0 )
Assert. fail ( "Should have thrown exception" )
assertEquals ( Collections. EMPTY_SET, nullFieldProblems )
assertEquals ( times, victim. getTotalResources ( ) )
assertNull ( profile. getTokenExpiration ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 2, warnings. size ( ) )
assertEquals ( Color. blue. getRGB ( ), thumbnail. getRGB ( 49, 99 ) )
assertTrue ( true )
Assert. assertEquals ( tft, expected )
assertEquals ( "zero", actual )
Assert. assertEquals ( null, table. getNullColumnType ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( pathMock, context. getPropertyPath ( ) )
assertEquals ( 2, x. size ( ) )
assertEquals ( "Test result", testString, lines. get ( 0 ) )
assertNull ( cache. get ( "a" ) )
assertEquals ( 77, result )
assertEquals ( 1, executor. run ( adultUnit ) )
assertFalse ( "Should have failed to create a GroupBy command without a key function.", built )
Assert. assertTrue ( serviceTags. getErrors ( ). size ( ) > 0 )
assertThat ( leftMost, equalTo ( singletonList ( statefulRegion2 ) ) )
assertArrayEquals ( splitString, testString6ExpectedSplit )
assertNotNull ( result )
assertEquals ( 6, stringTokenizer. countTokens ( ) )
assertThat ( newCode, is ( equalTo ( code ) ) )
assertEquals ( expected, actual )
assertEquals ( DISABLED, status )
assertTrue ( f. exists ( ) )
assertNotNull ( entryRelationship )
assertEqualsIgnoreWhitespace ( expected, drl )
runner. assertNotValid ( )
assertEquals ( expectedXml, actualXml )
assertTrue ( a1 instanceof PublicCloneable )
assertThat ( event. getCalledPlayer ( ), equalTo ( shooter ) )
assertThat ( algorithm. computeDigest ( ), is ( emptyDigest ) )
assertEquals ( mockEnc, uit. getEncoder ( ) )
assertArrayEquals ( after, Elements. slice ( before ) )
assertEquals ( "No test cases should fail", 0, runTestsResults. getFailedTests ( ). size ( ) )
Assert. assertEquals ( "userName1", userName )
Assert. assertThat ( rec. getThrowable ( ), CoreMatchers. instanceOf ( IllegalStateException. class ) )
assertEquals ( expected, elements )
assertTrue ( in. markSupported ( ) )
assertVariable ( "character_set_client", "utf8" )
assertNotNull ( entity. getId ( ) )
assertThat ( rendering, is ( "'AB'" ) )
assertThat ( isMismatch, description ( theDescription ) )
assertEquals ( 0, app. executeApplication ( args ) )
assertNotNull ( response )
assertTrue ( passwordEncoder. checkpw ( plaintext, encoded ) )
Assert. assertNull ( RequestObjectHelper. getReturnKeys ( json ) )
assertThatStepsInstancesAre ( builderAnnotated. buildCandidateSteps ( configuration ), FooSteps. class )
assertEquals ( 39, chargeCount )
assertEquals ( "%s", instance. formatMessage ( record ) )
assertEquals ( expected, test. adjustInto ( base ) )
assertEquals ( DosingType. FREE, drugOrder. getDosingType ( ) )
Assert. assertTrue ( fi1. sameFormatAs ( fi2 ) )
assertThat ( co. getCachedSize ( ), is ( actualCachedSize ) )
assertEquals ( releaseApiUrl, latestRelease. getApiUrl ( ) )
assertSame ( conf, table. getConfiguration ( ) )
assertNotNull ( fileName. getFileName ( ) )
Assert. assertFalse ( errors. hasErrors ( ) )
Assert. assertEquals ( STRING, nextHop. getString ( ) )
assertEquals ( "Bogus code should be invalid", Result. ERROR, fiphrPefStu3. validate ( ). getStatus ( ) )
assertEquals ( 1, defaultList. size ( ) )
assertEquals ( res [ i ], v )
assertRowsEqual ( expected, primaryData )
assertEquals ( 82799999L, m. getLastMillisecond ( ) )
assertTrue ( instance. getTotalNetworkError ( ) < maxError )
assertEquals ( "Incorrect ManagedConnection set", mockManagedConnection, handler. getData ( ). getManagedConnection ( ) )
assertEquals ( value, ra. get ( ). get ( ) )
assertThat ( proxyRecipe. isFeatureEnabled ( ), is ( equalTo ( true ) ) )
assertTrue ( p. apply ( createWithProperty ( name, value ) ) )
assertThat ( chargingProfile. getStackLevel ( ), equalTo ( zero ) )
assertEquals ( k. getValue ( ), FILE_ABSOLUTE )
assertEquals ( 0, hits. totalHits )
assertEquals ( 0.0, coverage, deltaFloatEquality )
assertNotNull ( entity. getId ( ) )
Assert. assertEquals ( violations. size ( ), 0 )
AssertAnnotations. assertPOS ( posMapped, posOriginal, select ( jcas, POS. class ) )
assertNull ( i. getParent ( ) )
assertTrue ( "Got lookups", interpolator. getPrefixLookups ( ). isEmpty ( ) )
Assert. assertSame ( cause, ex1. getCause ( ) )
assertEquals ( expResult, result )
Assert. assertEquals ( pis, imposto. getPis ( ) )
assertEquals ( undergraduate, result )
assertEquals ( byteBuffer0, byteBuffer1 )
assertEquals ( 71, pathMap. size ( ) )
assertEquals ( "paused#", mailbox. getMessage ( ) )
assertEquals ( "msg", sut. getMessage ( ) )
assertSequence ( visitor. getNodes ( ), "c", "b", "e" )
Assert. assertEquals ( 1, example. evaluate ( new DenseDouble ( 1d ) ). sum ( ), 1e-10 )
assertEquals ( asList ( "/root[1]/node[1]", "/root[1]/nested1[1]", "/root[1]/nested1[1]/nested1[1]", "/root[1]/nested1[1]/nested1[1]", "/root[1]/nested1[1]/nested1[1]", "/root[1]/nested1[1]/nested1[1]", "/root[1]/nested1[1]/nested1[1]/nested1[1]/nested1[1]", xpaths )
assertEquals ( MultiGenericPropertyState. dateProperty ( "foo", Arrays. asList ( date1, date2 ) ), builder. getPropertyState ( ) )
assertEquals ( "testSearchByResourceChain01", actual. getIdentifierFirstRep ( ). getSystem ( ). getValueAsString ( ) )
assertThat ( editor. getValue ( ), is ( ( Object ) ReadPreference. PREFER_SECONDARY ) )
assertTrue ( calledExceptionHandler. isProtectedHandlerCalled ( ) )
assertEquals ( strList, CollectionUtil. toSet ( "1" ) )
assertThat ( new JSONObject ( writer. toString ( ) ), sameJSONAs ( new JSONObject ( "{\\"downloadDetails\\":{\\"id\\":\\"" + downloadDetails. getId ( ) + "\\",\\"name\\":\\"" + downloadDetails. getName ( ) + "\\"}}" ) ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3]}", result. get ( RETURN_RESULT ) )
assertEquals ( sp. getName ( ), sp2. getName ( ) )
assertThat ( bic1. hashCode ( ), is ( not ( equalTo ( bic2. hashCode ( ) ) ) ) )
Assert. assertTrue ( got. contains ( "Updated RSA key" ) )
assertThat ( repository. findOne ( id ), is ( notNullValue ( ) ) )
assertEquals ( expected, contentSummary. toString ( false ) )
assertResultSet ( res )
assertEquals ( 1234, config. getTimeout ( ) )
assertEquals ( TRANSACTIONTYPE_FAT_MONO, tx. transactionType )
assertEquals ( "/application/resources/web/json", link. getHref ( ) )
Assert. assertTrue ( errors. hasFieldErrors ( "concept" ) )
Assert. assertEquals ( "QueueInfo serialization is wrong", returned. getQueueChildren ( ). size ( ), 1 )
assertEquals ( dc. getId ( ), 123L )
Assert. assertEquals ( "\\"SELECT \\n  \\\\\\"mydatabase\\\\\\".\\\\\\"mydbschema\\\\\\".\\\\\\"mytable\\\\\\".\\\\\\"ID1\\\\\\", \\n  \\\\\\"mydbschema\\\\\\".\\\\\\"mytable\\\\\\".\\\\\\"NAME1\\\\\\"\\nFROM \\\\\\"mydatabase\\\\\\".\\\\\\"mydbschema\\\\\\".\\\\\\"mytable\\\\\\"\\"", result )
assertNotNull ( resMap. getResourcesReader ( ) )
assertEquals ( expResult, result )
assertEquals ( "00FF", Hex. toHexString ( outputStream. toByteArray ( ) ). toUpperCase ( ) )
assertEquals ( siteInfoData. getSiteId ( ), "test" )
assertTrue ( cs. isAccepted ( ) )
assertEquals ( 1, shacl. nbResult ( gg ) )
assertEquals ( "/a", PathUtils. getRelativePath ( root, child ) )
assertEquals ( "IDX2", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertTrue ( isEqual ( d1, d2 ) )
Assert. assertEquals ( deltaFiniteDifference, deltaAAD, 1E-6 )
Assert. assertEquals ( "(aa_change_frameshift (aa_point_location (aa_char Ala) 124) (aa_char Thr) fs * 23)", aa_change_extension. toStringTree ( parser ) )
Assert. assertEquals ( expected, actual )
assertEquals ( expect, format. format ( stb. toString ( ) ) )
assertTrue ( String. format ( "Expected error to contain string [%s]. Actual error: %s", expected, ex. getMessage ( ) ), ex. getMessage ( ). contains ( expected ) )
Assert. assertTrue ( "Failed to list resources: " + result, Operations. isSuccessfulOutcome ( result ) )
Assert. assertTrue ( edOrgRights. isEmpty ( ) )
assertEquals ( "Hello, World!", page. getContent ( ) )
assertNull ( action. getIconFileName ( ) )
assertEquals ( "authId1", target. getAuthId ( ) )
assertEquals ( "Date parsing is wrong", new BitemporalDateTime ( date ), mapper. readBitemporalDate ( columns, "vtFrom" ) )
assertEquals ( "Response code " + i + " is not correct", RESPONSE_CODE, coapResponse. getStatusCode ( ) )
assertTrue ( ret )
assertEquals ( "foo", defaultDispatchStackEdit. getEditedObject ( ). toString ( ) )
assertTrue ( a == b )
assertTrue ( sets. contains ( message1 ) )
assertThat ( branchFilterByRemote. isLinkedTo ( branch ), is ( false ) )
assertFalse ( definedInContext )
assertEquals ( 1, artworkList. size ( ) )
assertEquals ( want, doc. body ( ). html ( ) )
assertEquals ( 42, impl. getMedian ( ) )
assertThat ( createdPlayer == defensivePlayerWithDjAndJavaDevSkills, is ( true ) )
assertEquals ( "SyntaxError: Unexpected token 'a'", e. getJSMessage ( ) )
assertEquals ( expected, real )
Assert. assertArrayEquals ( expected, actual )
assertArrayEquals ( new String [ ] { "FRA-AWS", "UAT", "FWS" }, result )
assertThat ( ( List < Object > ) editingContext. getIgnoredObjects ( ), is ( empty ( ) ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( BAD_REQUEST. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( expected, reference. get ( ) )
assertEquals ( "testResource1.txt", this. parser. getResourceName ( ) )
assertEquals ( expectedScriptNode, actualScriptNode )
assertFalse ( "Test removeChildGroup 0", childGroup. getMembers ( ). isEmpty ( ) )
assertEquals ( 0L, result )
assertEqualsIgnoreWhitespace ( expected, real )
assertTrue ( syncClient instanceof ZooKeeperSyncClientImpl )
assertObject ( args )
assertTrue (! Morphism. isMorphism ( o ) )
assertTrue ( cache. size ( ) > 0 )
assertEquals ( "Timestamp(0, 1010101)", element. getValueAsString ( ) )
Assert. assertEquals ( errors. toString ( ), 0, errors. size ( ) )
assertTrue ( results. isEmpty ( ) )
assertEquals ( expected, actualQuery )
assertEquals ( 1, res. join ( ) )
assertEquals ( 0, result )
Assert. assertFalse ( mPos. has ( e ) )
assertEquals ( 100, vrp. getJobs ( ). values ( ). size ( ) )
Assert. assertEquals ( filterName, victim. getName ( ) )
assertThat ( b. getConsole ( ), Matchers. containsString ( "User PWD is a valid username" ) )
Assert. assertEquals ( "<statusEvent><bean name=\\"name\\">status</bean><status>0</status></bean>", actualXml )
assertThat ( byKey, is ( rpslObject ) )
assertThat ( ByteTypeValidator. INSTANCE. validate ( parameters, "aaa" ), is ( nullValue ( ) ) )
assertEquals ( "{\\"errorMessage\\":\\"User data must contain username.", output, "{\\"statusCode\\":400,\\"message\\":\\"invalid password\\",\\"data\\":{\\"username\\":\\"carlosalvarez\\",\\"lastname\\":\\"�lvarez\\",\\"username\\":\\"carlosalvarez10\\",\\"password\\":\\"1234\\"}}" )
assertOut ( "<Group id=\\"myGrp\\"><Label /></Group>" )
assertMockEndpointsSatisfied ( )
assertEquals ( 3, processorsFactory. getPostProcessors ( ). size ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([30, 0, -30]) (empty)", ts )
Assert. assertTrue ( pos. index == calc. altIndex ( altIndex, pos. tag ) )
assertThat ( output, containsString ( "DICOM store deleted." ) )
Assert. assertEquals ( 140 + 4 * winScore - loosePenalty, scores. getScore ( ) )
Assert. assertEquals ( Integer. valueOf ( 0 ), result )
assertEquals ( - 1.0, Evaluator. evaluate ( ex ) )
assertThat ( testValue. keywordNames ( ), contains ( TestValueType. NAME. of ( "Hello" ), TestValueType. AGE. of ( 42 ) ) )
assertEquals ( "6.10351563e+003", victim. readNumber ( ) )
assertEquals ( Joiner. on ( "\\n" ). join ( expected ), result )
assertThat ( classes. size ( ), Matchers. greaterThan ( 1 ) )
assertEquals ( ChatState. composing, stateHandler. getLastChatState ( ) )
assertEquals ( expResult, result )
assertThat ( result. getViewExpandedText ( ), is ( viewOriginalText ) )
assertEquals ( "FooBar", resultValue )
Assert. assertEquals ( 0, mappedUsage. getTagsBitmask ( ) )
assertTrue ( lines. contains ( "my.logger/equestria [INFO] Hello" ) )
Assert. assertTrue ( getSettings ( ). getSocketSettings ( ). getSocketTimeoutMs ( ) == 1100 )
Assert. assertTrue ( testPinpointClient2. isConnected ( ) )
assertThat ( pyPiRestoreBlobData. isCreated ( ), is ( true ) )
Assert. assertEquals ( jobParams, retrievedParams )
Assert. assertEquals ( "Link: <http://example.com/things>; rel=\\"next\\"; rel=\\"thing\\"", affordance. toString ( ) )
assertEquals ( rendered, expected )
assertNotNull ( text )
assertThat ( result. size ( ), is ( 2 ) )
assertEquals ( testneuron3, lst. get ( 1 ) )
assertNotNull ( "Title Plot is empty for " + imdbId, result )
assertTrue ( cmd. isInit ( ) )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
Assert. assertTrue ( permissions. toString ( ), permissions. isEmpty ( ) )
assertNotNull ( percentage )
assertEquals ( Path. get ( "some/path" ), result )
assertEquals ( "serialization should be the same after serialization: ", 1, serialize. length )
assertNull ( result )
assertInterval ( 2, 3, 5, 8, 13, 21, bounds )
assertFalse ( socket. isClosed ( ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "http://localhost:8080/events/" + "topic/cg/cid?timeout=0&limit=0", url )
assertTrue ( result )
Assert. assertEquals ( "Should have 1 schema in the wsdl file", 1, totalSchemas )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 03" ) )
assertEquals ( "the artifact must be downloaded", true, new File ( localRepo, "ant/ant/1.5.1/ant-1.5.1.jar" ). exists ( ) )
Assert. assertTrue ( "Incorrect renderer supplied", getWebXmlRenderer ( textField ) instanceof WTextFieldRenderer )
assertThat ( iterationState. getAssertions ( ), hasSize ( 0 ) )
assertNotNull ( parser )
authRule. assertScenario ( scenario )
assertNotNull ( smsd1. getFirstAtomMapping ( ) )
assertEquals ( getFailureMessage ( ), 3, Nd4j. getBlasWrapper ( ). iamax ( linspace ) )
assertEquals ( expResult, result )
Assert. assertTrue ( c!= null )
assertEquals ( 1, titles. size ( ) )
assertThat ( MomentInterval. parseISO ( "2012-092T14:15Z/2012-096T16:00" ), is ( expected ) )
assertEquals ( name, loaded. getName ( ) )
assertTrue ( skuWarehouseDTO. getSkuWarehouseId ( ) > 0 )
BeanAssert. assertBeanEquals ( bean, array )
assertEquals ( anonymousID, authInfo. getUserID ( ) )
assertNotNull ( jsonNode )
assertEquals ( Long. valueOf ( 1 ), handler. convert ( v ) )
assertEquals ( "param=value", response. getBody ( ) )
assertThat ( anyTS. isValid ( NANO_OF_SECOND, null ), is ( false ) )
assertEquals ( "ABC", buf. getPrefixedString ( decoder ) )
assertTrue ( resultComparator. compare ( dc1, dc2 ) > 0 )
assertEquals ( PARENS_STREET_NAME, step. streetNameNoParens ( ) )
assertThat ( "system-input-def-objects.xml", systemInputDef, matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( underTest. execute ( underTest, null, null, new Object [ ] { assetDocument, "jexlexpression", "*", repoToContainedGroupMap }, null ), is ( true ) )
assertSame ( inputPortBinding, profile. getProcessorPortBindings ( ). getByName ( "Hello" ). get ( 0 ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( Calendar. MONDAY, calendar. getInternalCalendar ( ). getFirstDayOfWeek ( ) )
assertThat ( getterMethod. getReturnType ( ). getName ( ), is ( "java.lang.Object" ) )
assertTrue ( collector. isFitting ( frag ) )
assertThat ( specification. getUnits ( ), is ( MILLI ( SECOND ) ) )
assertNull ( coverArt. getBackImage ( ) )
Assert. assertNotNull ( addressResultsDto )
assertNull ( application. tenantLinks )
assertEquals ( test [ 2 ], staticResult, dynamicResult )
assertEqualsWithoutWhiteSpaces ( "(model11)", testSubject. subModel ( new ScadGenerationContextFactory ( ). include ( 1 ). exclude ( 12 ). create ( ) ) )
assertThat ( commandsIterator, hasItem ( "rake" + bundleExecFlag ) )
given ( ). body ( delegate. toString ( ) ). put ( delegate1 ). then ( ). assertThat ( )
assertTrue ( plot. getRangeMarkers ( 99, Layer. FOREGROUND ). contains ( yMarker1 ) )
assertThat ( anyTS. isValid ( MICRO_OF_SECOND, 86399999999L ), is ( true ) )
Assert. assertArrayEquals ( p, VP8Util. predictDC ( above, left ) )
assertEquals ( "_all/_search", search. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertNotNull ( entity )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertArrayEquals ( expectedOutput, result )
assertThat ( "getValue", node. getValue ( ), is ( false ) )
assertEquals ( script, observedScript )
assertNotNull ( process )
assertNoSpans ( )
assertTrue ( result == httpUnauthorized )
assertEquals ( "please filterme plugin", client. getStringStack ( ) [ client. getStringStackSize ( ) - 1 ] )
assertThat ( result. size ( ), is ( 0 ) )
ReaderAssert. assertThat ( ImsCwbReader. class, ImsCwbReader. PARAM_SOURCE_ENCODING, "UTF-8" )
assertMessage ( "<type>EXITED</type>", 2 )
assertEquals ( Arrays. asList ( binaryOne, binaryTwo ), binaries. getBinarys ( ) )
assertEquals ( actualPage, expectedPage, "Page size is incorrect" )
Assert. assertEquals ( "Verify same Protocol instance was registered", protocol, protocol )
assertTrue ( content. contains ( "This is a Docx file" ) )
Assert. assertEquals ( expResult, result, 0.006 )
assertEquals ( false, result )
Assert. isTrue ( response )
assertEquals ( 2, groupsView. getGroups ( ). size ( ) )
assertTrue ( items. size ( ) > 0 )
assertEquals ( expectedPath, actualPath )
assertEquals ( "XdmResultSet.resultCount()", 3, result. getXdmResultSet ( ). getResultCount ( ) )
assertOut ( "a(org.apache.royale.utils.Language.string(b.child('child'))" )
Assert. assertEquals ( "wrong number of storage descriptors", 1, builder. getAISStorageDescriptors ( ). size ( ) )
assertEquals ( 1, updates. size ( ) )
assertThat ( impl. isPermitted ( "repoName", "repoFormat", BreadActions. READ, variableSource ), is ( false ) )
assertThat ( mdcValueStr, is ( userName ) )
Assert. assertTrue ( publisher. checkUpdate ( new EndpointTitle ( testEndpoints. get ( 0 ), HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED ) ) )
assertFalse ( glass. accept ( point, WIDTH / 2 - 1, 1 ) )
assertTrue ( action. register ( ) )
assertEquals ( validationLogic, resourceEditProperty. getValidationLogic ( ) )
assertProperty ( "Gen.1.2", "Gen.1.2" )
assertThat ( result, is ( new String [ ] [ ] { { "c" } } ) )
assertTrue ( comparator instanceof LexicographicalComparatorHolder. PureJavaComparator )
Assert. assertEquals ( 3, coveredGoals. size ( ) )
assertEquals ( "dist", distributionDetector. getDistributionName ( ) )
assertThat ( result, is ( ENCODED_PASSWORD ) )
assertEquals ( "/workflow/Foo", wf. toString ( ) )
assertEquals ( 1, count )
assertEquals ( "No listener should be invoked", 0, getGridElement ( ). getCellCount ( ) )
assertTrue ( delete. isSuccess ( ) )
assertThat ( ( Integer ) ms. get ( "aaa" ), is ( 1 ) )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p: %m%n", layout. getConversionPattern ( ) )
assertEqualsIgnoreWhitespace ( expected, real )
Assert. assertTrue ( value > 0 )
assertEquals ( "this is an example of comment", result )
assertTrue ( shutdown. get ( ) )
assertEquals ( expResult, result )
assertEquals ( "Join_Column_Name", colName )
Assert. assertEquals ( result. getActionResult ( ), mqttHelper. getMessage ( Action. INSERT_ENTITY_TYPE, entityType, "org.kie.mqtt.test.model.TestEntity" ) )
assertEquals ( "_cat/shards/_all", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertTrue ( "unexpected value", value )
Assert. assertEquals ( "2017-01-01", dateStr )
router. assertRoute ( a, b )
assertEquals ( 207, testResult. getError ( ). getCode ( ) )
assertEquals ( CALCULATED_LENGTH, binary. length, prepare ( object ) )
Assert. assertTrue ( this. manager. connectFromAll ( Arrays. asList ( this. person1, this. person2, this. person3 ), this. family1 ) )
assertLHSBoundFieldFor ( "$f", "$a" )
assertNotNull ( geoserverCatalog )
Assert. assertEquals ( PseudoAuthenticationHandler. class, filter. getAuthenticationHandler ( ). getClass ( ) )
assertTrue ( "", types!= null && types. size ( ) == 1 && types. contains ( ProfileType. INDUSTRY ) )
assertEquals ( expected, errorCode. getMessage ( ) )
context. assertIsSatisfied ( )
assertTrue ( diff. isValid ( ) )
assertEqualsJFiglet ( asciiArt )
assertEquals ( expectedParsedResult, actualParsedResult )
assertTrue ( "Group empty", constraintViolations. size ( ) == 1 )
assertEquals ( "12345678", value. getDataAsBinaryStr ( ) )
assertThat ( irsApplicable, equalTo ( true ) )
assertEquals ( "b", m. get ( "a" ) )
assertThat ( packet. get ( ProcessingConstants. REMAINING_SERVERS_HEALTH_TO_READ ). get ( ), is ( 0 ) )
Assert. assertEquals ( "Result is not last evaluated expression", new Integer ( 2 ), o )
assertEquals ( BAD_REQUEST. getStatusCode ( ), getStatus ( get ) )
Assert. assertEquals ( IsolationLevel. READ_COMMITTED, connection. getIsolationLevel ( ) )
Assert. assertNull ( this. mocker. getComponentUnderTest ( ). requestTerm ( this. request ) )
assertZipEquals ( reference, fileResult )
assertTrue ( reactor. createTestContainer ( ). getProbeables ( ). isEmpty ( ) )
assertEquals ( expected, sb. toString ( ) )
Assert. assertEquals ( expected, XMLUtil. classNames ( new InJarFileArchive ( this. archive ) ) )
assertThat ( result. getId ( ), is ( notNullValue ( ) ) )
assertNotNull ( importSession )
Assert. assertEquals ( Sets. newHashSet ( 1, 2 ), parser. getSecureResultIndices ( ) )
Assert. assertEquals ( tableSize * buckets. size ( ), size )
assertFalse ( matchResult )
Assert. assertEquals ( expected, HtmlSanitizerUtil. sanitize ( input ) )
assertEquals ( "select entity_0.code, subEntity_1.name from Entity entity_0 inner join entity_0.subEntities subEntity_1", select. getQuery ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertThat ( "generator-set-0.xml", generatorSet, is ( expected ) )
assertThat ( PlainTimestamp. of ( 2012, 2, 13, 35, 132 ). normalize ( dur ), is ( Duration. ofPositive ( ). years ( 3 ). months ( 2 ). days ( 4 ). build ( ) ) )
assertEquals ( 1, builder. getCount ( uriInfo ). getCount ( ) )
assertEquals ( javaTimestamp, DateTimeUtil. getMonth ( TEST_DATETIME ) )
Assert. assertEquals ( infoManifestacaoDestinatario, infoEventoManifestacaoDestinatario. getManifestacaoDestinatario ( ) )
Assert. assertNull ( getMetric ( ). calculate ( getSession ( ) ) )
assertEqualHQL ( "allen AND love dandan", sb. toString ( ) )
assertResultSet ( res )
Assert. assertEquals ( "", link. getDescription ( ) )
assertEquals ( 2, dbHandler. getDataElementCount ( ) )
assertTrue ( organisationSupport. validateOrganisation ( ORGANISATION_KEY, VALID_ORGANISATION_PASSWORD ) )
Assert. assertEquals ( new BigDecimal ( "12.3456" ), value )
Assert. assertNotNull ( asientoRecibido )
assertNull ( test. dbMeta. getReadOnlyConnection ( ) )
assertThat ( clientBackend. get ( HelloWorldTestService. TEST_KEY ), is ( "accepted" ) )
assertTrue ( r. isResourceType ( DefaultResourceTypeDefinition. NODE ) )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertNull ( new RequestImpl ( m ). selectVariant ( list ) )
assertEquals ( aNumber, result, 1E14 )
assertEquals ( supply1, supply2 )
assertCheckScopesFailForOtherScopes ( ScopePathType. READ_PUBLIC, ScopePathType. ORCID_PATENTS_CREATE )
assertEquals ( expected, actual )
assertEquals ( author, result. getCommit ( ). getAuthorIdent ( ) )
assertTrue ( model. getOutputs ( ). size ( ) >= 2 )
assertThat ( collector. getInfo ( ), equalTo ( "qwe" ) )
assertEquals ( "SELECT a FROM db.g1 INNER JOIN db.g2 ON a = b", QueryParser. getQueryParser ( ). parseCommand ( sql, ParseInfo. DEFAULT_INSTANCE ). toString ( ) )
assertThat ( target. matchExactly ( action ), is ( true ) )
assertThat ( commandsIterator, hasItem ( bundleExecFlag ) )
arrays. assertDoesNotContain ( description, actual, value, Index. atIndex ( - 1 ) )
assertThatTestCaseObeysOracle ( 0 )
assertEquals ( results1. size ( ), results2. size ( ) )
Assert. fail ( "Should have thrown exception" )
assertThat ( baseCalendars. getBaseCalendarCount ( ), equalTo ( previous + 1 ) )
assertFalse ( hasReset )
assertTrue ( Arrays. equals ( baos. toByteArray ( ), wsis. getOutputPeer ( ) ) )
assertThat ( renderer. getShortForm ( entity ), is ( "rdfs:PlainLiteral" ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertEquals ( padded ( OBJECT_OVERHEAD + BOOLEAN + CHAR + FLOAT + BYTE + CHAR + INT + LONG ), ThreadTrackingContext. getBytes ( ) )
assertEquals ( expected, elements )
assertEquals ( "OK", rc. put ( "/a02", "OK" ). execute ( ). getBody ( ). asString ( ) )
assertEquals ( "Village_pump_(technical)", output. get ( 0 ) )
assertEquals ( "12 minuten geleden", t. format ( new Date ( 0 ) ) )
Assert. assertTrue ( jsonEqual ( expResult, EntityFormatter. writeEntity ( entity ) ) )
assertThat ( taskService. createTaskQuery ( ). taskAssignee ( "demo" ). count ( ), is ( 1L ) )
assertEquals ( e1, e2 )
Assert. assertArrayEquals ( expected, processed )
assertNull ( timeouts. getTimeout ( "somekey" ) )
assertEquals ( expected, actual )
Assert. assertArrayEquals ( b, zip2. toByteArray ( ) )
assertThat ( result, is ( nullValue ( ) ) )
assertEquals ( 1, i )
assertTrue ( r1 instanceof PublicCloneable )
Assert. assertTrue ( result. isValid ( ) )
assertThat ( exitStatus, is ( 42 ) )
assertThat ( outcome. getStartTime ( ), is ( afterDate ) )
Assert. assertFalse ( deal. isAccepted ( ) )
Assert. assertFalse ( result )
assertEquals ( 0, actual. size ( ) )
assertThat ( http. getTimeout ( ), is ( 0L ) )
Assert. assertEquals ( diffusioncoefficient, result [ 0 ], 0.1 )
assertEquals ( expected, result )
Assert. assertTrue ( Math. abs ( maxAbsDeviation ) < 8E-3 )
assertEquals ( expectedMessage, result )
Assert. assertTrue ( saveFile. exists ( ) )
assertEquals ( interactive, interactive1 )
assertOut ( "var /** @type {RegExp} */ a = /test-\\\\d/i" )
assertEquals ( "config", configSource. getProperty ( ). toString ( ) )
assertEquals ( linkList, this. component. getLinkList ( ) )
assertTaintHasOnlyLabel ( MultiTainter. getTaint ( y ) )
Assert. assertEquals ( 0, sut. getWeekdayCountBetweenDates ( start, end ) )
assertEquals ( 10, result. getTotalCount ( ) )
Assert. assertNotNull ( cdf )
assertEquals ( 1, result )
assertThat ( frontController. processTimeZone ( request ), is ( TimeZone. getDefault ( ) ) )
assertOutputResult ( "testDump2.result", new String ( bos. toByteArray ( ) ) )
Assert. assertEquals ( json, writer. toString ( ) )
assertEquals ( 8, hyperLogLog. cardinality ( ) )
assertThat ( target. equals ( obj ), is ( false ) )
assertTrue ( ss. contains ( "123-abc" ) )
Assert. assertThat ( actualResource2, IsSame. sameInstance ( actualResource ) )
Assert. assertEquals ( false, retval )
assertNotNull ( in )
Assert. fail ( ex. getMessage ( ) )
assertFalse ( file. exists ( ) )
assertFalse ( result. isPresent ( ) )
assertThat ( domain. getSpec ( ). isLogHome ( ), is ( false ) )
assertThat ( fieldError, is ( not ( nullValue ( ) ) ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><job xmlns=\\"http://jena.org/jena/job\\" name=\\"testXml\\">\\n" + "    <job name=\\"testXml\\" status=\\"FAIL\\" error=\\"APPLICATION_JSON\\" errorContext=\\"http:...">\\n" + "        <url>http:..."</url>\\n" + "        <metadata>\\n" + "            <content>testXml</content>\\n" + "            <type>POST</type>\\n" + "        <url>http://jena.org/jena/job/content</url>\\n" + "            <batchType>POST</batchType>\\n" + "        <multipart/form-data>\\n" + "            <multipart/form-data>\\n" + "            <object><![CDATA[{\\n" + "                <key>testXml</key>\\n" + "                <value>{\\n" + "                <
assertEquals ( 2, z. getUlong ( ) )
assertThat ( errors, hasFieldErrors ( "givenName" ) )
assertEquals ( "___DRI", properties. getRepositoryLocation ( ) )
Assert. assertEquals ( configuration. getClass ( ), org. hibernate. cfg. Configuration. class )
assertEquals ( "The sequence number of the recoverd.edits file should be same", lastestSeqNumber, editCount )
Assert. assertFalse ( products. isEmpty ( ) )
assertTrue ( expectedOrder. isOrdered ( toSort ) )
assertEquals ( 11, rs. get ( 0 ) )
assertEquals ( expectedQuery, actualQuery )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "xfdfAnnotationReplaceText.pdf", sourceFolder + "cmp_xfdfAnnotationReplaceText.pdf", destinationFolder, "diff_" ) )
assertEquals ( s, sb. toString ( ) )
assertBeanValidation ( json, "start_date may not be null" )
assertTrue ( ci1. getValue ( series. getEndIndex ( ) ). doubleValue ( ) > LOW_CHOPPINESS_VALUE )
assertEquals ( "Expected 0 results!", 0, count )
assertEquals ( Double. parseDouble ( 2 ), Double. parseDouble ( builder. toString ( ) ), 0 )
assertNotNull ( "Task is null", entity )
context. assertIsSatisfied ( )
assertThat ( predicate. test ( Integer. class ), is ( true ) )
assertEquals ( "1, 2, 3, 4, 5, 6, 7, 8, 9, 10", string )
assertDelivered ( q, 0 )
assertThatNothingHappened ( jobExecution, lastCreatedJobId, 1 )
Assert. assertEquals ( "abc", html )
assertTrue ( value. length == 0 )
Assert. assertNotSame ( run1, run2 )
assertThat ( gitClient. getRemoteSymbolicReferences ( repoRoot. getAbsolutePath ( ), Constants. HEAD ), is ( empty ( ) ) )
assertEquals ( 2, m. size ( ) )
assertEquals ( HttpStatusCode. INTERNAL_SERVER_ERROR. getStatusCode ( ), response. getStatusCode ( ) )
assertEquals ( wayLessInEuros, actualValue )
assertEquals ( NodeStructureHelper. guidTypeNode ( guid ), NodeStructureHelper. create ( guid ) )
assertTrue ( a1. compareTo ( a2 ) < 0 )
assertEquals ( new NormalVersion ( new Double ( 1.0 ), new Double ( 2.0 ) ), version )
assertEquals ( "newLabel2", cloneRevisions. get ( 0 ). getVersionLabel ( ) )
assertEquals ( allMethods, allMethods1 )
assertEquals ( ZippelGCD ( a, b ). monic ( ), EZGCD ( a, b ). monic ( ) )
assertNotNull ( context. getBean ( "snsOutboundGateway.snsExecutor", SnsExecutor. class ) )
assertFalse ( isInverseTransformSupported )
assertEquals ( inMap, map )
assertTrue ( success )
Assert. assertEquals ( expectedURL, attr. get ( "xlink:href" ) )
assertNull ( clazz )
assertFilesPresent ( outputDirectory. getRoot ( ). getPath ( ), "output.txt", "test-single-spec.txt" )
assertArrayEquals ( new int [ ] { - 1, - 1, 1, 1, 1, 1, 0, 0 }, difference )
assertEquals ( "Samsung Galaxy", galaxy. getPrefLabel ( ) )
assertEquals ( "read file", volume. readLink ( userCredentials, linkName ) )
assertEquals ( object1. getId ( ), object2. getId ( ) )
Assert. assertEquals ( solrResponseDto, actual )
assertEquals ( expected, actual )
assertEquals ( "99ef8ae827896f2af4032d5dab9298ec86309abf/folder1/folder2/resource.css", result )
Assert. assertEquals ( 2, operation. operations. size )
Assert. assertEquals ( violations. size ( ), 0 )
Assert. assertFalse ( "Expected an unused handler", TestHandler. class. isAssignableFrom ( logContext. getHandlerForClass ( TestHandler. class ) ) )
assertEquals ( expecetedTableName, builtTableName )
assertEquals ( "<p>Hello <em>there</em> <em>now</em></p>", doc. body ( ). html ( ) )
Assert. assertEquals ( expected, MustacheTemplatePrefixExpander. expand ( input ) )
Assert. assertEquals ( "0", result. getReturnCode ( ) )
assertNoCause ( "value of    : myObject.child.noNeedToDisplayBoth\\nmessage\\nmyObject was: root" )
Assert. assertEquals ( EntityConfig. NOT_FOUND, ec )
assertNotNull ( output )
assertThat ( s. getValue ( ), is ( minValue ) )
assertEquals ( 1, $ ( GridElement. class ). all ( ). size ( ) )
context. assertIsSatisfied ( )
assertEquals ( pp. getValue ( ), new Payload < > ( "2 final" ). getValue ( ) )
assertTrue ( got. contains ( "Deleted service account:" ) )
assertThat ( actual, is ( existingContent ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoFormaPagamento ( ). toString ( ) )
context. assertEquals ( "paulo:anothersecret", buf. toString ( ) )
assertThat ( cut. apply ( select ), is ( false ) )
assertEquals ( "<!-- � � -->", doc. body ( ). html ( ) )
assertTrue ( "the artifact must be downloaded", new File ( localRepo, "ant/ant/1.5.1/ant-1.5.1.jar" ). exists ( ) )
assertTrue ( p. isWriteable ( String. class, null, null, MediaType. valueOf ( "text/custom" ) ) )
assertEquals ( list, result )
Assert. assertEquals ( "Event not received.", 1, alarmReceived. size ( ) )
assertContains ( e. getMessage ( ), "'id'" )
assertThat ( cut. apply ( pageObject ), is ( true ) )
assertNull ( actualObj ( ). opt ( "mykey" ) )
assertEquals ( "WritableSerialization", factory. getSerializerClassName ( ) )
Assert. assertEquals ( "User URL should be equal to base url", BASE_URL + "/user", user )
assertNotNull ( result. getOpenAPI ( ). getComponents ( ). getSchemas ( ). get ( "Schema" ) )
assertSame ( specificDataCommunicator, grid. communicator )
assertEquals ( expected, uri. getRawPath ( ) )
Assert. assertEquals ( "P4ssW0rD", obj. getPassword ( ) )
assertStreamEquals ( expectedBackoffs, backoffs )
assertNotNull ( doc )
Assert. assertEquals ( server, result. getFirstHeader ( "Server" ). getValue ( ) )
assertEquals ( loadingTypes, Predicates. ALL )
assertTrue (! result )
assertEquals ( sensorType, header. getSensorType ( ) )
assertEquals ( 0, result. numFindings ( ) )
assertTrue ( result. contains ( "test" ) )
assertTrue ( "no exception was thrown", exception )
assertTrue ( exception. getMessage ( ). contains ( "Not satisfied condition: " + itemToMatchCondition ) )
assertEquals ( net, n1. getNestingNetwork ( ) )
assertEquals ( 0, orgUnits. size ( ) )
Assert. assertTrue ( s. contains ( "No message will be sent to " ) )
assertThat ( definition. dataTableType ( ). transform ( emptyTable. asLists ( ) ), is ( asList ( "converts_table_cell_to_string=[a, b]", "converts_table_cell_to_string=[c, d]" ) ) )
assertEquals ( expResult, result )
assertEquals ( expected, actual )
assertEquals ( "Should be the reviewed by", "reviewed-by", result )
assertNotNull ( getRealm ( ) )
Assert. assertEquals ( "<!--james-->", stringWriter. toString ( ) )
assertEquals ( frameData. hashCode ( ), frameDataAgain. hashCode ( ) )
assertHelpLines ( "Option                   Description", "------                   -----------", "-apple             ", EMPTY )
assertTrue (! result )
assertEquals ( false, result )
assertEquals ( 0, coverage. getHashLength ( ) )
Assert. assertEquals ( "http://example.com/path/2", value )
assertEquals ( "token 2\\n", found )
assertEquals ( value, actualValue )
assertTrue ( "Incorrect Action builder output", actual. contains ( "target-version: ASTERISK-1_6\\r\\n" + "variable: var1=value1\\r\\n" + "variable: var2=value2\\r\\n" ) )
assertEquals ( Arrays. asList ( "com.module1", "com.module1/module2" ), complete ( null ) )
assertEquals ( expected, members )
assertSuccess ( result )
Assert. assertTrue ( response. contains ( "<ack>Success</ack>" ) )
assertEquals ( "{ \\"field name\\" : { \\"$bitsAllSet\\" : \\"?\\" } }", filterParameters. toString ( ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( expResult, result )
assertEquals ( "Stromgol", lastName )
Assert. assertArrayEquals ( encodedValue, byteOutputStream. toByteArray ( ) )
dataLoader. assertDataToJsonEqualsExpectedFileContent ( "shouldInPriceDescOrder.json", result )
assertTrue (! page. asText ( ). contains ( "true" ) )
assertFalse ( valid )
assertEquals ( "1", o )
assertTrue ( plot. getDomainMarkers ( 99, Layer. FOREGROUND ). contains ( xMarker1 ) )
assertThat ( result. replaceAll ( "\\\\s+", "" ), equalTo ( expectedOutput. replaceAll ( "\\\\s+", "" ) ) )
assertEquals ( new RetrieveImagingDocumentSet ( ), result )
Assert. assertTrue ( urlResponse. status == 401 )
assertSame ( future, underTest. collectEmpty ( futures, collector ) )
assertEquals ( expResult, result )
assertEquals ( "Columns.field1,field2", columnList. iterator ( ). next ( ). getName ( ) )
assertEquals ( 4, ( ( ValueCountMethodHandle ) equalsMethod ). getValueCount ( ) )
assertAllCommandsUsed ( )
assertEquals ( 9, author. getId ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "Expected 3 results!", 3, n )
Assert. assertNotNull ( jis. getManifest ( ) )
assertEquals ( "um mil e um reais", actual )
assertTrue ( called. compareAndSet ( false, true ) )
assertEquals ( "{a:'x{a1=v1, a2=123, a3=null, a4=}x',b1:'xtruex',b2:'x123x',b3:'xnullx',c1:'xv1x',c2:'x123x',c4:'xx'}", r )
assertTrue ( propsMap. size ( ) == 0 )
assertNull ( value. getValue ( 99L ) )
assertTrue ( "syntax should still be in the registry after delete failure", schemaManager. getSyntaxes ( ). isEmpty ( ) )
assertEquals ( selector1. hashCode ( ), selector2. hashCode ( ) )
assertEquals ( FLDR + 1, docs ( ) )
assertEquals ( 0, address )
assertEquals ( cleanText ( request ), result )
assertThat ( array2, equalTo ( new long [ ] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } ) )
Assert. assertEquals ( "Task Id: 1365a6da-6493-4e9b-b950-5af1b392aaa3", td. getId ( ) )
assertEquals ( resultScanner, rowsRead. execute ( ) )
assertEquals ( OTHER_GRAPHITE_URL, backendAlarm. getGraphiteBaseUrl ( ) )
assertEquals ( expected, exts )
assertEquals ( i, f. evaluate ( null ). intValue ( ) )
assertNull ( mongoStore. get ( name, sessionId, String. class ) )
assertEquals ( "Incorrect string written", "This is a test string", sw. toString ( ) )
assertEquals ( ABSTRACT_CLASS_WITH_ABSTRACT_METHODS, cls )
Assert. assertEquals ( "Result is not last evaluated expression", Integer. valueOf ( 2 ), o )
assertEquals ( "Should have a writeble ledgerDir", 0, writeDirs. size ( ) )
assertThat ( "pattern=" + pattern [ 0 ] + " matches result=" + pattern [ 1 ], result, equalTo ( pattern [ 1 ] ) )
assertEquals ( "3 写薪� �邪蟹�邪蟹", t. format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( expected, array. toString ( ) )
assertEquals ( sumLabel. getText ( ), String. valueOf ( number ) )
assertThat ( value. getRight ( ), is ( "1800" ) )
assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�", t. format ( new Date ( 0 ) ) )
assertEquals ( "incorrect number of mappings found for nhsno2", 2, userMappings. size ( ) )
assertNotNull ( result )
assertEquals ( 1, results. size ( ) )
assertEquals ( - 1, t. indexOfUnquoted ( str, ">>" ) )
arrays. assertContains ( description, actual, other )
assertEquals ( "text", componentState. getFieldValue ( ) )
assertTrue ( verifier. verify ( input ) )
assertEquals ( r1, r2 )
assertEquals ( origWriteSet, reorderSet )
assertEquals ( "\\"Hello\\"", JsonbProvider. provider ( ). create ( ). build ( ). toJson ( o ) )
maps. assertContainsOnlyOnce ( someInfo ( ), actual, new Object [ 0 ] )
Assert. assertEquals ( expect_sql, sql )
assertEquals ( "2011-02-23T14:35:42.005Z", parsed. toString ( ) )
assertThat ( ids, contains ( locId ) )
assertEquals ( expected, actual )
Assert. assertTrue ( afterClusterUuid. equals ( preClusterUuid ) )
assertTrue ( clusters. isEmpty ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( result ), containsInAnyOrder ( pt0id. getValue ( ) ) )
assertEquals ( "{\\"foo\\":\\"bar\\",\\"grandchild\\":{}}", result. toString ( ) )
Assert. assertThat ( uuid, not ( sameInstance ( uuid2 ) ) )
assertTrue ( aNumber == Double. POSITIVE_INFINITY )
assertEquals ( "java.lang", t. getASTCompilationUnitPackage ( ) )
assertEquals ( "True has to be returned in this case", replication, inf. getBlockReplication ( ) )
assertEquals ( seaCloudsApplicationData, seaCloudsApplicationDataById )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( expectedText, testText )
Assert. assertEquals ( new TransactionIdentifier ( object ( ). getIdentifier ( ), object ( ). nextTx ( ) ). getHistoryId ( ), clientSnapshot. getIdentifier ( ). getHistoryId ( ) )
assertThat ( answer, allOf ( containsString ( "Michail" ), endsWith ( "invocationId was 123" ) ) )
assertEquals ( first, ( ( BasicMonthViewUI ) monthView. getUI ( ) ). getFirstDisplayedMonth ( ) )
assertThat ( selectionModel. getSelectedEntity ( ), is ( Optional. empty ( ) ) )
assertResponseContainsModel ( "", EMPTY_MAP )
Assert. assertArrayEquals ( doubleArray, decompressedArray. array ( ), 0 )
assertEquals ( exp, zF )
assertTrue ( authorizer. isAuthorized ( context, profiles ) )
Assert. assertEquals ( Double. toString ( x ), expected, actual, tol )
assertTrue ( configurationDeserialized )
assertEquals ( 404, response. getStatus ( ) )
Assert. assertEquals ( "password", codec. decode ( "password" ) )
assertNotNull ( Reservation. reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( "Cleaning all versions", 0, deleter. deletedVersions. size ( ) )
Assert. assertEquals ( 1, model. getId ( ). intValue ( ) )
assertEquals ( TimeValue. ofSeconds ( 10 ), impl. getFreshnessLifetime ( entry, 0 ) )
arrays. assertStartsWith ( description, actual, newArray ( true, false, false, true ) )
assertThat ( os, instanceOf ( Slf4jErrorOutputStream. class ) )
Assert. isTrue ( parent. getChildrens ( ). size ( ) > 0 )
assertThat ( violations. size ( ), is ( 1 ) )
Assert. assertFalse ( item. matches ( divNode ) )
Assert. assertTrue ( "no users returned", users. size ( ) > 0 )
Assert. assertEquals ( retirada, notaInfo. getRetirada ( ) )
assertEquals ( assertion, prepend )
assertTrue ( wordLineCounts. get ( "." ). firstObject ( ) == 24 )
assertEquals ( singletonList ( SimpleClass. class ), actual )
assertEquals ( "[Object released]", v8Object. toString ( ) )
assertEquals ( ace, parsed )
assertTrue ( "Prolog should contain a <http://www.w3.org/2001/XMLSchema#> format", document. schema ( ). contains ( "<http://www.w3.org/2001/XMLSchema#>" ) )
assertEquals ( jsonFactory. createJsonObject ( jsonFactory. createJsonObject ( jsonString ) ), mapper. loadDataTableJson ( ) )
assertEquals ( "", data )
assertNull ( contextResult )
assertThat ( method. invoke ( foo ), is ( equalTo ( "42" ) ) )
assertThat ( Fibonacci. test ( memo ), is ( 2 ) )
assertNumberOfViolations ( constraintViolations, 0 )
assertEquals ( value, testee. resolveExpressions ( value ) )
assertTrue ( writeLatch. await ( 5, TimeUnit. SECONDS ) )
assertThat ( result, is ( "Version" ) )
assertEquals ( "hello world", function. execute ( "hello world" ) )
assertThat ( sut. getTotalPrice ( book ), is ( 1L ) )
assertThat ( HiveObjectUtils. getParameter ( table, AVRO_SCHEMA_URL_PARAMETER ), is ( "test" ) )
assertEquals ( newHashSet ( "hello", "world" ), result )
Assert. assertEquals ( 13, result )
assertIdentical ( "/simple_simple_ontology.owl", reasoned )
assertEquals ( 200, in. read ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertEquals ( "123,456", response )
assertThat ( IntegerUtil. toPrimitiveInt ( i ), is ( i ) )
assertIsSatisfied ( 2L, TimeUnit. SECONDS, firstOutbound )
assertEquals ( 5, i )
TestCase. assertTrue ( result )
assertEquals ( "The value is not correct.", Long. toString ( date. toInstant ( ). toEpochMilli ( ) ), value )
assertProcessInstanceCompleted ( processInstance. getId ( ), ksession )
assertEquals ( new Sequence ( 2015, 0, 20 ), sequence )
Assert. assertFalse ( err. isPresent ( ) )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED", FilterUtils. eq ( "service.objectClass", "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ), 2, TimeUnit. SECONDS )
assertThat ( appl, is ( JavaSignatureComparator. MATCH_WILDCARD ) )
assertTrue ( descriptor. hasConstrainedParameters ( ), "Setting given for parameter should take precedence" )
assertThat ( "branch name " + randomBranchName + " is allowed", sut. isRandomBranchNameAllowed ( randomBranchName ), is ( true ) )
assertTrue ( isHoliday )
assertEquals ( args, ImmutableList. of ( "-y", "-v", "error", "-i", "input", "-an", "aac", "-s", "48000", "-v", "libx264", "-fps", "320x240", "-h", "537.36", "537.36", "output", "-vf", "libx264", "-h", "537.36", "537.36", "537.36", "-i", "input", "-an", "-s", "bar", "-fps", "30x", "-v", "240x", "-fps", "300x", "-vh", "2", "2" ) )
Assert. assertEquals ( "A\\nA\\nB\\nC\\n", text )
assertThat ( javaDocComment, not ( containsString ( "(Required)" ) ) )
Assert. assertFalse ( isValid )
assertEquals ( HardActivityConstraint. ConstraintsStatus. FULFILLED, status )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( "stuff\\"more\\";\\"stuff", result )
assertEquals ( expected, result )
assertEquals ( Permission. READ_PUBLIC, providerPermission )
assertTrue ( found )
assertEquals ( Collections. emptyList ( ), queue. poll ( ticker ) )
assertEquals ( MediaType. APPLICATION_JSON_TYPE, response. getType ( ) )
assertEquals ( "((hello =='stringgoodbye') and (key1 == 'booleantrue'))", jexl )
Assert. assertEquals ( Type2. class, classes. iterator ( ). next ( ) )
assertEquals ( PHRASE_REVERSE, reversedString )
assertEquals ( 6.1234, mhu. getAbsoluteHumidity ( ), 0.1 )
spliterators. assertHasCharacteristics ( INFO, actual, DISTINCT )
assertEquals ( 0, lintresult. getIssues ( ). size ( ) )
assertEquals ( actualCountPostsToTopicsInFBranch, listCountPostsToTopicsInSBranch )
assertThat ( savedModel. getState ( ), is ( ModelState. DRAFT. getName ( ) ) )
assertFalse ( frameData. equals ( "8" ) )
assertEquals ( "wrong tree", expected, parser. getParseTree ( ) )
assertEquals ( "notNull()", buffer. toString ( ) )
assertEquals ( "input", IOUtils. toString ( result ) )
Assert. assertEquals ( i, obj )
assertEquals ( "JSON serialization is wrong", json1, json2 )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertEquals ( "[Test] expecting:\\n<'Yoda'> to have exactly the same size as:<java.lang.String>", message )
assertTrue ( filter. allow ( event, listener ) )
assertSingleNotificationType ( EventType. FAILED_AUTHENTICATION )
Assert. assertEquals ( 0., analyser. getTimeWindowViolationAtActivity ( route ), 0.01 )
Assert. assertTrue ( content. contains ( "imports-cleaner" ) && content. contains ( "src" ) )
assertTrue ( g1 instanceof PublicCloneable )
assertThat ( unmarshal ( sb ), allOf ( hasEntry ( "excluded key", "excluded explicit value" ), hasEntry ( "retained key", "retained mdc value" ), hasEntry ( "excluded mdc key", "excluded mdc value" ) ) )
AssertionUtils. multiAssertEquals ( createAsDocument9, response5. getResponseObject ( ) )
assertEquals ( expected, actual )
assertEquals ( VisitStatus. RESERVE_TREE, visit ( node ) )
Assert. fail ( "Exception should be thrown!" )
assertFalse ( connection. isConnected ( ) )
assertEquals ( kv1, kv2 )
assertEquals ( 0, m. magic ( ) )
Assert. assertTrue ( true )
assertEquals ( after, result )
Assert. assertSame ( "Same request was not returned by adapter", request, request2 )
assertTrue ( err, err. contains ( "NoSuchUser" ) )
assertEquals ( "doc", result. getMessage ( ) )
assertNull ( timestamps. get ( 0 ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 09" ) )
Assert. assertEquals ( "Unexpected result: " + result, expectedResult, result )
assertNotNull ( result )
assertEquals ( "Calculate", LivingDoc. getInterpreter ( ). getName ( ) )
assertTrue ( responseObserver. isSuccess ( ) )
assertEquals ( X, a. get ( 0 ) )
assertEquals ( nowDate, job. getNextRun ( ) )
Assert. assertTrue ( downlodedFile. exists ( ) )
assertCustomerWithLinksSample ( )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( threads. size ( ), is ( 1 ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<fields templateEngineKind=\\"Velocity\\">" + "<description><![CDATA[A description...]]></description>" + "<field name=\\"developers.Name\\" list=\\"true\\">" + "<description><![CDATA[A field description...]]></description>" + "<field name=\\"project.Name\\" list=\\"true\\"/>" + "<description><![CDATA[A field description...]]></description>" + "<field name=\\"project.Name\\"/>" + "<description><![CDATA[A field description...]]></description>" + "<field name=\\"developers.Name\\"/>" + "<description><![CDATA[A field description...]]></field>" + "<field name=\\"project.Name\\" selected=\\"false\\" selected=\\"false\\"/>" + "<description><![CDATA[A field description...]]></description>" + "<field name=\\"project.Name\\" selected=\\"false\\" selected=\\"false\\"/>" + "<
assertTrue ( result instanceof RawRequestSourcePreProcessor )
assertTrue ( total < MAX )
Assert. assertNull ( this. component. loadClass ( "com.navercorp.test.classic.DummyClassic" ) )
assertEquals ( expectedTokens. get ( i ), token )
assertThat ( systemOutRule. getLog ( ), containsString ( "test help" ) )
assertSame ( buf, wrappedBuffer ( LITTLE_ENDIAN, new byte [ 16 ] ) )
assertTrue ( contentType. getValue ( ). contains ( expectedformat. getContentType ( ) ) )
assertEquals ( "DotCi", username )
assertOrder ( true, "one", Sort. ASC )
assertEquals ( "3 ���� ��", t. format ( new Date ( 0 ) ) )
assertThat ( unmarshal ( sb ), hasEntry ( HACK_ATTEMPT, "some value" ) )
assertFalse ( data. isExceptionAtThisTime ( ) )
assertNotNull ( order )
assertThat ( dialect, instanceOf ( PostgreSQLDialect. class ) )
assertEquals ( expectedDateTime, parsedTime )
Assert. assertNotNull ( objectNode )
assertEquals ( "http://example.com/{&foo:300}", result )
assertEquals ( "<td class=\\"row-details\\">test</td>", result )
assertEquals ( ( byte ) 257, result )
assertEquals ( expResult, result, 0.0 )
assertEquals ( prefix, victim. process ( prefix, nameRequest ( ) ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertArrayEquals ( packet, HandshakeResponse. loadFromPacket ( packet ). toPacket ( ) )
Assert. assertEquals ( "correctreplacement.appendix", result )
assertEquals ( "GBP 0.94", test. toString ( ) )
assertEquals ( "transaction TX:sessionId:99 sessionId BEGIN 100\\r\\n", new String ( buf. array ( ) ) )
assertEquals ( "[Player [, Bar, Bing, Bong, Bing, Bong, Foo]]", players. toString ( ) )
assertEquals ( 5, trueCount )
Assert. assertNotNull ( actionService. find ( action. getId ( ) ) )
assertEquals ( 5l, d. asInt8 ( ) )
assertEquals ( expResult, result )
assertEquals ( JulianDate. of ( 2012, 7, 5 ), test )
assertEquals ( WsAgentHealthStateDto. Status. NOT_FOUND, result. getStatus ( ) )
assertNotNull ( test )
assertSame ( WebDriverTargets. window ( "test" ), targetLocator. getCurrentTarget ( ) )
assertThat ( HtmlFormEntryUtil. getFullNameWithFamilyNameFirst ( name ), is ( "Mr. Mark, De. Cameroon, Smith, Jr. Esq." ) )
assertTrue ( v1. compareTo ( v2 ) < 0 )
assertEquals ( "http://example.com/fhir/Patient?name=james", capt. getValue ( ). getURI ( ). toString ( ) )
assertQueryResultSet ( resultSet, expectedRows )
Assert. assertEquals ( expected, s, 1e-15 )
assertEquals ( "Unexpected primary style name", "v-layout", state. primaryStyleName )
assertTrue ( conv. canConvert ( TriggerContext. class ) )
assertArrayEquals ( expected, encoder. getEncoded ( ) )
assertEquals ( expected, actual )
assertFalse ( service. publish ( "message" ) )
assertEquals ( Math. sqrt ( 5 ), FrontUtils. distanceToClosestPoint ( point3, front ), EPSILON )
assertEquals ( object. booleans, result. booleans )
assertProcessInstanceCompleted ( processInstance )
assertTrue ( true )
Assert. assertEquals ( "Go to <a href=\\"http://www.company.com/\\">http://www.company.com/</a> <br>\\nEnjoy!", value )
Assert. assertEquals ( expectedMul, multiplied )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( "1", result. getSize ( ) )
Assert. assertNotNull ( field )
assertEquals ( expResult, result )
assertThat ( runtimeInfo. getRuntimeClassName ( ), is ( "org.talend.components.${componentNameLowerCase}.runtime.${componentNameClass}Runtime" ) )
assertEquals ( "Request content has not been unzipped", responseWithPath, "files_for_upload" )
assertEquals ( snapshot, lastEscalation. getSnapshot ( ) )
assertEquals ( "repoName", op. repoName )
assertEquals ( "calendar must be invariant for timezone", CalendarUtils. THREE_HOURS, calendar. getTimeZone ( ) )
assertEquals ( Sets. newHashSet ( "com.example.type.example.DocumentType", "com.example.type.example.DocumentType", "com.example.type.example.DocumentMetadata", "com.example.type.example.Document", "com.example.type.example.DocumentMetadata", "com.example.type.example.DocumentMetadata", "com.example.type.example.Document", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.example.Document", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type.Example", "com.example.type
assertNotNull ( cb. getLabelElement ( ) )
assertEquals ( data, frame )
assertEquals ( 0, graphElementMock. getGraphIds ( ). size ( ) )
assertEquals ( 2, pradf. getNextLineOffset ( ) )
assertFalse ( instance. validate ( file ) )
Assert. assertEquals ( 42, a1. foo ( ) )
assertEquals ( 12, jpegBitsPerSample ( "test16signed-J2KI.dcm" ) )
assertTrue ( Files. size ( outFile. toPath ( ) ) > 0 )
Assert. assertNotNull ( "null result from rule execution", result )
assertThat ( rendering, is ( "2 days ago" ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author\\":\\"Evelyn Waugh\\"," + "\\"title\\":\\"Sword of Honour\\",\\"price\\":12.99}],\\"bicycle\\":{\\"color\\":\\"red\\",\\"price\\":19.95}}," + "\\"arrayTest\\":[1,2,3]}", result. get ( RETURN_RESULT ) )
assertThat ( formatter. parse ( "4,14 David, Heisei" ), is ( expected ) )
assertNotNull ( table. getCellAt ( 0, 0 ) )
assertTrue ( failure. cause ( ) instanceof LeadershipTransferFailedException )
assertEquals ( post. getUnsubscribeLinkForSubscribersOf ( TopicSubClass. class ), "/topics/1/unsubscribe" )
Assert. assertTrue ( copyFrom. equals ( builder. offset ( 11, 10 ). build ( ), EqualCondition. VALUE_EQUAL ) )
assertEquals ( new BigDecimal ( "19.00" ), maximum )
assertBeanValidation ( json, "query.metric[0].aggregators[0].percentile may not be zero" )
assertEquals ( CellImgFactory. class, imgFactory. getClass ( ) )
assertEquals ( Arrays. asList ( "foo", "bar", "baz" ), modulePathIds )
assertNotNull ( s )
Assert. assertFalse ( ipList. isEmpty ( ) )
assertEquals ( 6, dt. intValue ( ) )
assertTrue ( "The video should be available", response. getStatusLine ( ). getStatusCode ( ) == 200 )
Assert. assertEquals ( two. intValue ( ), 2 )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), hasEnvVar ( "STARTUP_MODE", ADMIN_STATE ) )
assertThat ( dialect. addOptimizerHints ( sql, hints ). toString ( ), is ( "SELECT /* SQL_ID */ /*+ TEST1_IX */ /*+ TEST2_IX */" + System. lineSeparator ( ) + " * FROM PUBLIC.TEST_1" ) )
assertNotNull ( list )
assertFalse ( cs. communicationNotAllowed ( ) )
assertThat ( orders. get ( 0 ), is ( equalTo ( expected ) ) )
assertSame ( attr, toTest. getAttributes ( ) )
Assert. assertTrue ( true )
assertTrue ( "audit should contain change of institutionsCountries", msgs. get ( 0 ). getMessage ( ). contains ( "audit should contain change of institutionsCountries" ) )
assertEquals ( "Outer class instance variable is 779", 779, ret )
assertSame ( expected, result )
assertEqualsIgnoreWhitespace ( expected, drl )
assertEquals ( expResult, result )
assertThat ( query. count ( ), is ( 1L ) )
arrays. assertDoesNotContain ( description, actual, other )
assertThat ( anyTS. getMinimum ( MILLI_OF_SECOND ), is ( 0 ) )
Assert. assertEquals ( msg, expected, actual, delta )
assertEquals ( source, result )
assertEquals ( "predicate names not recorded properly in grammar", expectedPreds, preds )
assertTrue ( matcher. find ( ) )
assertThat ( driver. getCurrentUrl ( ), is ( endsWith ( "/index.html?store=javascript{'x'}'&amp;a" ) ) )
assertEditorClosed ( )
assertFalse ( branch. getSubscribers ( ). contains ( user ) )
assertEquals ( 1, executeSolrQuery ( "firstname_s:John lastname_s:Doe" ). size ( ) )
assertFalse ( validator. validate ( Meta, POST ). passedValidation ( ) )
assertTrue ( esperEventProcessor. getEventTypeAttributes ( "TempSensor" ). isEmpty ( ) )
assertNotNull ( result )
assertEquals ( true, deadClient. getClient ( ). isScriptActive ( "abcdefg" ) )
Assert. assertEquals ( String. valueOf ( i ), masterJedis. get ( key ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertThat ( captor. getValue ( ). getName ( ), is ( "bypass" ) )
assertEquals ( PacketUtil. decode ( "01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
assertEquals ( pbs, pbs2 )
assertEquals ( "Junit error", expectedString, p. toURLParameterString ( ) )
assertEquals ( "20120809-20120811-00:00", runtime )
assertTrue ( getNoErrorMsg ( ), result )
Assert. assertTrue ( errors. hasGlobalErrors ( ) && errors. getGlobalError ( ). getCode ( ). equals ( PermissionsValidator. ERROR_CODE_EMPTY_SELECTED_IDS ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( 3456.098F * 1F, r )
Assert. assertNotNull ( dbRangerServiceList )
Assert. assertNotNull ( exception )
assertEquals ( 0, imports. size ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPath, cmpPath, destinationFolder, diff ) )
assertThat ( notifier. notify ( notice ), is ( 200 ) )
assertEquals ( Sets. newHashSet ( role1, role2 ), sentryStore. getRolesByGroups ( SEARCH, twoGroups ) )
assertThat ( issues, is ( empty ( ) ) )
assertEquals ( "hello", filterResult. getValue ( ) )
assertEquals ( FilterReply. DENY, filter. decide ( event ) )
assertTrue ( "Handler wasn't run", ran. get ( ) )
assertThat ( references. size ( ), equalTo ( 0 ) )
assertThat ( streams, hasSize ( 3 ) )
assertTrue ( envVars. size ( ) == 0 )
assertThat ( table. toString ( ), is ( "tiny_table_0[size=3, row_no=0, column_type=string, column_properties=null, column_properties_0=null]" ) )
assertEquals ( context, classLoaderContextStr. get ( ) )
assertExec ( "Should be the same: " + exp, Classes. class, "nameOfSuperInterface__Ljava_lang_String_2Ljava_lang_String_2", exp )
assertEquals ( 1L, result )
assertEquals ( 100L, ( ( Long ) proxy. getAttribute ( "timeout" ) ). longValue ( ) )
assertThat ( goModAsString, equalTo ( goModFromProject ) )
Assert. assertNotNull ( targetHours )
assertEquals ( Arrays. asList ( testWriters. toArray ( new String [ 2 ] ) ). toString ( ), Arrays. asList ( Arrays. copyOf ( movie. getPrivileges ( ). toArray ( new String [ 2 ] ) ). toString ( ) ) )
assertEquals ( alpha, res, 0.01 )
Assert. assertFalse ( "did not find error in output", false )
assertTrue ( response. contains ( "<template><id>serverTemplate-1</id><name>serverTemplate-1</name></template>" ) )
assertEquals ( map1, map2 )
assertNotNull ( javaxSchema )
assertThat ( result, is ( "def" ) )
assertFalse ( compare. doCompare ( trigger ) )
assertMatchAnyMethodsCalled ( )
assertEquals ( firstWord, futureWord. get ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( 0, testFixture. beforeTableName ( null ) )
assertEquals ( 404, response. getStatus ( ) )
assertEquals ( 6147483647L, h )
assertTrue ( keyValueTableView. getItems ( ). size ( ) == 3 )
context. assertIsSatisfied ( )
assertThat ( result. validate ( ), is ( true ) )
assertEquals ( expected, result )
assertEquals ( page1, wizard. navigateToFirst ( ) )
assertEquals ( expected, actual )
assertFalse ( subscriptionService. deleteSubscriptions ( unsubscribeContext ). isPresent ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( querys, is ( contains ( Arrays. asList ( "SELECT * FROM ", "sqlid_test_select_product_custom" ) ) ) )
assertEquals ( "////! \\\\#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", encodeStr )
assertThat ( routing. route ( request, "/abc/path" ), is ( "/abc/*path" ) )
assertEquals ( response. getStatus ( ), HttpServletResponse. SC_UNAUTHORIZED )
assertEquals ( 3, artifact. getComment ( ). size ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 01" ) )
mockery. assertIsSatisfied ( )
assertNotNull ( Sim. reader ( ). read ( ) )
assertEquals ( expectatedMessage. trim ( ), e. getMessage ( ). trim ( ) )
assertEquals ( "prefix_bar_suffix", template. format ( getResolver ( ) ) )
assertThat ( page1. getLocation ( ), is ( page2. getLocation ( ) ) )
Assert. assertTrue ( pss. toString ( ). contains ( "12.3" ) )
assertThat ( base. thenApplyFailed ( failedFn, cause ), is ( new ImmediateFailed < > ( caller, cause ) ) )
Assert. assertEquals ( "Expected HTTP 404 to be returned as process instance does not exist.", Response. Status. NOT_FOUND. getStatusCode ( ), response. getStatus ( ) )
assertFalse ( isMappingModelExists ( ) )
assertEquals ( expResult, result )
assertEquals ( maxSize * 1024, cacheManager. getMaximumSizeMB ( ) )
Assert. assertFalse ( json. has ( DATA_NAME ) )
assertFalse ( constraintValidator. isValid ( Money. of ( 0, "EUR" ), null ) )
assertEquals ( exp, act )
assertFalse ( lhs. equals ( rhs ) )
assertNull ( graph )
assertEquals ( "Registered JSON reader should not be found by ServiceFinder.", jsonReaders, classes )
assertResult ( "checking multiple root branches with no skip" )
assertThat ( result, is ( nullValue ( ) ) )
Assert. assertThat ( t, matchesKey ( "string" ) )
assertEquals ( token. getToken ( ), result. getToken ( ) )
assertEquals ( true, result )
assertEquals ( url, dataURL. getCharset ( ). name ( ) )
TestUtils. assertEquals ( "preMultiply() returns wrong result", diagResult, denseResult, 0d )
assertThat ( e. hasMoreElements ( ), is ( false ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertSame ( expected, result )
assertEquals ( Status. SUCCESS, status )
assertThat ( jsonOutputStreamParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testTags.json" ) ) )
assertTrue ( join. getWindowing ( ) instanceof Time )
assertEquals ( val. getDiscountRate ( ), Rate. of ( 0.03 ) )
Assert. assertEquals ( expected, actual )
assertEquals ( tempFileName, appender. getFileName ( ) )
assertEquals ( Constants. CT_FHIR_XML_NEW, ourContentTypes. get ( 0 ) )
assertEquals ( expected, actual )
assertEquals ( "Dates not equal", dateToCompare, date )
assertEquals ( dataQuality. get ( p2 ), params. get ( p1 ), 0.05 )
assertListTEquals ( listT, 42, 24 )
assertNotNull ( tf )
assertThat ( encoded, stringContainsInOrder ( "{", "\\"resourceType\\": \\"Patient\\",", "\\"contained\\": [", "{", "\\"resourceType\\": \\"Condition\\",", "\\"id\\": \\"1\\"", "}", "],", "\\"extension\\": [", "{", "\\"url\\": \\"test\\",", "\\"valueReference\\": {", "\\"reference\\": \\"#1\\"", "}", "],", "\\"birthDate\\": \\"2016-04-05\\"", "}", "],", "\\"extension\\": [", "{", "\\"url\\": \\"test\\",", "\\"valueReference\\": {", "\\"reference\\": \\"#2\\"", "}", "],", "\\"id\\": \\"1\\"", "}", "}" ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expected, event. buildUssdStreamEvent ( ) )
assertEquals ( null, def )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertEquals ( 5, tuple. len ( ) )
editor. assertProblems ( "%Y<*>\\n" + "#leading comment\\n" + "  <*>" )
assertEquals ( Date. valueOf ( "2013-12-02" ), toml. getDate ( "date", Date. valueOf ( "2013-12-02" ) ) )
Assert. assertEquals ( ImmutableList. of ( ThresholdFilterHeaderExtender. FILTER_GT_MIN_GQ ), annotator. getFiltersFor ( gt ) )
assertFalse ( messages. isEmpty ( ) )
assertEquals ( 500, page. getWebResponse ( ). getStatusCode ( ) )
assertThat ( request, is ( request2 ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertEquals ( "org.apache.cxf", packageName )
assertFalse ( next )
assertEquals ( "BAR", options. syntaxModule ( ) )
assertEquals ( 2, all. size ( ) )
assertTrue ( domain. length ( ) > 0 )
Assert. assertTrue ( resources. getResourceNames ( ). isEmpty ( ) )
assertEquals ( 1, listing. execute ( ). size ( ) )
assertEquals ( "a composer", id3v2Tag. getComposer ( ) )
assertTrue ( PolyElement. hasCommonNode ( secondPolyElement ) )
assertFalse ( HttpMessageUtils. isJson ( message ) )
assertEquals ( true, simpleTable. isPreviewsSaved ( ) )
assertEquals ( 1, ( ( List ) session. getGlobal ( "list" ) ). size ( ) )
Assert. assertEquals ( expectedInstanceTypes, pricingClient. populateInstanceTypesForSelectedRegion ( selectedRegion ) )
assertTrue ( h == null )
assertEquals ( HttpStatus. OK_200, responseEntity. getStatusCode ( ) )
Assert. assertEquals ( "MDC {foo='bar'}", mdc. get ( "message" ) )
assertTrue ( response. isSuccess ( ) )
assertFalse ( games. getProperty ( "500006.debug" ). isEmpty ( ) )
scope. assertMetricsLevel ( MetricsLevel. NONE )
assertEquals ( InterpreterResult. Code. SUCCESS, ret. code ( ) )
Assert. fail ( )
assertEquals ( Sets. newHashSet ( ), backend. getPrivileges ( Sets. newHashSet ( "not-a-group" ), ActiveRoleSet. ALL ) )
Assert. assertEquals ( PersistenceState. NOT_PERSISTED. toString ( ), fileInfo. getPersistenceState ( ) )
assertNotNull ( authorModel )
assertFalse ( sf. getCache ( ). containsEntity ( AnnotatedEntity. class, 0L ) )
assertNull ( myDtoClass )
assertTrue ( follower == newBehavior )
assertNotNull ( result )
assertTrue ( sparkRestClient. killJob ( ). withSubmissionId ( submissionId ) )
assertFalse ( setterMethodDoesNotMatch ( reason ) )
assertThat ( result, is ( jsonString ( "office" ) ) )
assertEquals ( "?p1=v1&p2=v2", query. toString ( ) )
assertEquals ( expected, output. toString ( ) )
assertEquals ( Result. PASS, ok. apply ( item ) )
assertEquals ( "REALLY_labelled", mm. get ( "rdf:label" ) )
TestUtils. assertEquals ( new Array2DRowFieldMatrix < > ( testDataPlus2 ), m. scalarAdd ( Dfp25. of ( 2 ) ) )
assertArrayEquals ( new String [ ] { "root" }, treeContent )
assertFalse ( cluster. isRunning ( ) )
assertEquals ( 3, Iterables. size ( list ) )
assertNull ( x. getValue ( ) )
assertThat ( estimator. getCardinality ( ), is ( 0L ) )
assertEquals ( ( Byte ) 1, extractedByte )
Assert. assertEquals ( "A 11.", output )
assertEquals ( "<p>123</p>", result )
assertSame ( insets, classUnderTest. getBorderInsets ( mockComponent ) )
rule. assertScenarioEnded ( )
assertEquals ( V8_ARRAY, v8Object. getType ( "key" ) )
assertThat ( queriesString, is ( "BasicFlow" ) )
assertThat ( rasterNames, equalTo ( expected ) )
assertThat ( fieldError, is ( nullValue ( ) ) )
assertEquals ( expected, actual )
assertSignalEventDefinition ( "end", "signal" )
Assert. assertEquals ( t, g. getTopologies ( ). get ( 5 ) )
Assert. assertEquals ( hourToRollup. compareTo ( hourToStop ), 1 )
AssertAnnotations. assertToken ( tokens, select ( jcas, Token. class ) )
assertTrue ( result. getFailures ( ). isEmpty ( ) )
Assert. assertEquals ( TEST_BLOCK_SIZE * 2, buf. readableBytes ( ) )
assertEquals ( "/topic", m_callback. getTopic ( ) )
Assert. assertTrue ( resultFuture. isDone ( ) )
assertEquals ( "Stratio Decision", name )
Assert. assertEquals ( 1, numUdocs )
assertTrue ( "There should be an iframe with the file name that has been opened in the current tab", containsFileIframe )
Assert. assertTrue ( log. contains ( logMessage ) )
assertNull ( in )
assertContentEquals ( style, Arrays. asList ( "  - MessagePresenter", "  - MessagePresenter-a", "  - MessagePresenter-b", "  - MessagePresenter-c" ) )
Assert. assertEquals ( "Hello, John, Doe!", hi. sayHello ( ) )
assertOut ( "var /** @type {string} */ a" )
Assert. assertTrue ( servlet. isDebugMode ( ) )
assertEquals ( null, actionProgress. getActionName ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
assertEquals ( 1, issueTrackerService. getIssueTrackerTasks ( ). size ( ) )
assertEquals ( suggestedName, hive2DatabaseMeta. generateColumnAlias ( columnIndex, suggestedName ) )
assertEquals ( 5, fields. size ( ) )
assertTrue ( detail )
assertEquals ( cluster. getNamesystem ( ). getBlockManager ( ). getBlockState ( cluster. getNamesystem ( ). getBlockId ( ) ), cluster. getNamesystem ( ). getBlockState ( cluster. getNamesystem ( ). getBlockId ( ) ) )
assertIsSatisfied ( 2L, TimeUnit. SECONDS, secondOutbound )
assertEquals ( "## Changes from version w2-wip1 to w2-wip2\\n" + "\\n" + "### Changed\\n" + "- source\\n" + "  changed from \\"ServiceTemplateWithTwoNodeTemplates_w2-wip1\\" to \\"ServiceTemplateWithTwoNodeTemplates_w2-wip2\\"\\n" + "- target\\n" + "  changed from \\"ServiceTemplateWithTwoNodeTemplates_w2-wip2\\"\\n" + "\\n" + "### Changed\\n" + "### Changed\\n" + "- id\\n" + "  changed from \\"ServiceTemplateWithTwoNodeTemplates_w2-wip1\\" to \\"ServiceTemplateWithTwoNodeTemplates_w2-wip2\\"\\n" + "- name\\n" + "  changed from \\"ServiceTemplateWithTwoNodeTemplates_w2-wip2\\" to \\"ServiceTemplateWithTwoNodeTemplates_w2-wip2\\"\\n" + "- id\\n" + "  changed from \\"ServiceTemplateWithTwoNodeTemplates_w2-wip1\\" to \\"
assertTrue ( validScrollRange. contains ( getGridVerticalScrollPos ( ) ) )
Assert. assertEquals ( ImmutableSet. of ( "testing-reference-counting", "testing-reference-counting" ), takenEvents )
assertEquals ( 1, branch_conditions. size ( ) )
Assert. assertEquals ( expected, actual )
Assert. assertTrue ( HttpTestUtils. semanticallyTransparent ( originResponse, result ) )
assertSame ( myContextActivity, resolvedContextActivity )
assertNonAccessibleDefaultAccessControl ( result )
assertTrue ( testFailed. isEmpty ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( "/", r. matches ( Collections. < String, String > emptyMap ( ) ). render ( ) )
assertNotNull ( result )
assertFalse ( result )
assertEquals ( 4., pickup. getArrTime ( ), 0.01 )
assertEquals ( ( ( ObjectWithOptions2 ) ( ( ObjectWithOptions ) options. optOp ). optionsOp ). value, 10101 )
Assert. assertEquals ( createEmbedding ( v0, e0, v1, e1, v2, e2, v3, e4, e5 ), result. get ( 0 ) )
assertEquals ( 0.5, w. getValue ( ), 0.01 )
assertEquals ( tstName, rel. getName ( ) )
assertEquals ( 2, numOutputs )
assertEquals ( popNoeudsToCompare. size ( ), arm. getPopNoeuds ( ). size ( ) )
assertTrue ( "Expected wait time to be less than the expected wait time: " + millisWithWait + " ms", millisWithNoWait < millisWithWait )
assertServiceResource ( resource )
assertThat ( component. execute ( ), is ( expected ) )
assertions. doesNotContain ( ( short ) 4, index )
assertThat ( arguments. get ( 0 ). getValue ( ), is ( nullValue ( ) ) )
assertEquals ( expResult, result )
assertEquals ( "0.0", vlr. getLocationLat ( ) )
Assert. assertEquals ( "Tab Bar\\n", resultPage. getText ( ) )
assertTrue ( "Unexpected cause: " + cause, cause instanceof SocketTimeoutException )
assertTrue ( Futures. getUnchecked ( collector ) )
assertEquals ( jaasConfigService, inputMeta. getJaasConfig ( ) )
assertEquals ( t, new HttpURL ( s ). toString ( ) )
assertEquals ( "\\"Hola\\"", mustache. render ( new JsonObject ( ) ) )
assertObjects ( object, "a", "b" )
Assert. assertEquals ( hmacExpected, hmac )
assertThat ( other, LocalDateTimeMatchers. sameSecondOfMinute ( date ) )
assertEquals ( startTime. getTime ( ), Deencapsulation. getField ( jobsParser, "startTime" ) )
assertTrue ( this. reconnectManager. isValidTask ( task ) )
assertEquals ( asList ( 21, 22, 23, 24, 35, 36 ), list )
assertThat ( server1, not ( equalTo ( server2 ) ) )
assertEquals ( "public static void main(final String[] args) {}", actualContent )
assertEquals ( 5, occ. getLocation ( ). getBeginLine ( ) )
assertTrue ( messageLatch. await ( 1, TimeUnit. SECONDS ) )
Assert. assertEquals ( "b", input. getValue ( ) )
assertEquals ( Integer. valueOf ( 2 ), parseResults. get ( FILE_PATH ). getConditionsHits ( ). get ( BRANCH_LINE ) )
Assert. assertEquals ( "Row 3 should have been called " + 2, 2, testTable. getValue ( ) )
assertNull ( e. getRenderingEngine ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "[1, 2, 3, 4, 6, 7, 5]", result. toString ( ) )
assertTrue ( stitchedProductFile. exists ( ) )
assertEquals ( 100, newFileBackedCache. readCacheFile ( "/" ). intValue ( ) )
assertThat ( regExp, is ( "(?:\\\\Q\\\\E|\\\\Q\\\\E|\\\\Q\\\\E|\\\\Q\\\\E)" ) )
assertTrue ( callbackCaptor. getValue ( ). getFileInfo ( ). isEmpty ( ) )
assertEquals ( "Usage", lineArgs. help ( ) )
Assert. assertEquals ( key3, actual )
assertNull ( nbr1 )
assertEquals ( Boolean. TRUE, result )
assertFalse ( filter. isDetected ( ) )
assertTrue ( result. isSucceed ( ) )
assertTrue ( "Chars not written correctly", new String ( buf, 0, buf. length ). equals ( testString ) )
assertLife ( playerA, ANY_LIFE_TOTAL )
assertThat ( decodedValue, is ( actualValue ) )
assertTrue ( logger. isInfoEnabled ( ) )
assertThat ( this. appRegistryService. find ( "log-sink-rabbit:1.2.0.RELEASE" ). get ( ). getURI ( ), is ( "maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.2.0.RELEASE" ) )
assertEquals ( true, result )
assertEquals ( expected, result,.000001 )
assertThat ( list, contains ( "1", "2", "3", "4", "5", "6", "7" ) )
assertEquals ( "bar", result )
assertEquals ( extractedYAML, expectedYAML )
assertArrayEquals ( new String [ ] { "value1", "value2" }, strings )
assertEquals ( "[[John], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [Jane], [ane]]", results. toString ( ) )
assertEquals ( Tuple3. of ( 1.1, "bar" ), xtriple ( sf, xint ( ), xstring ( ) ). extract ( "foo;foo" ) )
assertSession ( )
assertEquals ( expectValue, actualValue )
assertEquals ( "BEGIN\\n" + "UPDATE table1 SET a = 'xx' WHERE b = 'condition1'\\n" + "END;\\n", stmts. toString ( ) )
assertEquals ( "&lt;p&gt;&lt;/p&gt;", unescaped )
Assertions. fail ( "The hc not started correctly" )
assertEquals ( room. getName ( ), "New Test room" )
Assert. assertEquals ( 404, response. status )
assertEquals ( expr, printConstraint ( expression ) )
Assert. assertEquals ( Status. OK. getStatusCode ( ), resp. getStatus ( ) )
Assert. assertEquals ( result_backward_with_cats_and_prefix, result )
assertTrue ( result )
assertTokens ( new IntValueToken ( 3 ), Tokens. RP )
assertThat ( axioms. isEmpty ( ), is ( true ) )
Assert. assertTrue ( arbitratorField. get ( subject ) instanceof MockArbitrator )
assertNotNull ( role )
assertThat ( Util. intValue ( "foo", scope ), is ( 42 ) )
assertEquals ( TEST_2007_07_15_PONE, t )
Assert. assertEquals ( expected, filterResult )
assertThat ( target, is ( notNullValue ( ) ) )
assertFalse ( consumerPrefetch. running )
assertThat ( keyspace. getCql ( ), is ( equalTo ( "CREATE KEYSPACE IF NOT EXISTS test WITH DURABLE writes" ) ) )
assertThat ( results, is ( Arrays. asList ( "Hello, world!" ) ) )
assertEquals ( arr, dup )
assertSame ( filterOriginal, filterable. getFilter ( ) )
assertThat ( "generator-set-2.xml", generatorSet, is ( expected ) )
assertEquals ( ( 1 / 0.7 ) * ( 1 / 0.7 ), numberOfTicks. calculate ( series, t ), TATestsUtils. TA_OFFSET )
assertTrue ( version1. compareTo ( version2 ) < 0 )
assertEquals ( false, result )
assertTrue ( scoping. getEagerSingleton ( ) instanceof SingletonScoping )
assertEquals ( "baz/foo/wooz (S_IFREG)\\n" + "  bar/wooz (S_IFREG)\\n" + "    rooz -> bar/wooz\\n" + "    baz/foo/wooz\\n", sw. toString ( ) )
assertEquals ( NodeValue. FALSE, r )
Assert. assertEquals ( activityClass, driver ( ). getContext ( ). getType ( ) )
assertTrue ( executor instanceof SequentialTaskExecutor )
assertNull ( properties )
assertEquals ( "Expected 0 results!", 0, n )
assertEquals ( "Registered alias should be found.", "/testAlias", OSGiCleanMapper. map ( "/index.html", true ) )
assertEquals ( - 10., c, 0.01 )
assertArrayEquals ( new String [ ] { "Amnicon Falls State Park", "Big Foot Beach State Park", "Mill Bluff State Park", "Roche-A-Cri State Park", "Willow River State Park", "Amnicon Falls State Park" }, wiStateParks )
Assert. assertEquals ( expected, actual )
assertThat ( response. getStatus ( ), equalTo ( BAD_REQUEST. getStatusCode ( ) ) )
assertEquals ( "hello", t. hello ( ) )
assertThat ( fe, notNullValue ( ) )
assertThat ( "String schema", combined, matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( playlist1, playlist2 )
assertEquals ( 2, pagedResult. getTotalPages ( ) )
assertEquals ( 2, tasks. size ( ) )
assertTrue ( Initialize. checkInit ( fs, sconf, conf ) )
assertFalse ( interfaceType. isPrimitive ( ) )
assertEquals ( "SELECT Account.Id, (SELECT Account.Id FROM Account) FROM Account WHERE Account.Name = 'x'", visitor. getQuery ( ). toString ( ). trim ( ) )
assertEquals ( "skipLines=0", element. skipLines ( ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoItemProduto ( ). toString ( ) )
TestCase. assertFalse ( attribute. match ( t ) )
Assert. assertNotNull ( appStatsCenter )
assertEquals ( "Expected response not seen.", "NOAPP", response )
Assert. assertNull ( value )
assertEquals ( Lists. newArrayList ( Interval. of ( 1, 5 ), Interval. of ( 2, 7 ), Interval. of ( 8, 10 ), Interval. of ( 15, 18 ) ), IntervalCollection. onIntervalList ( intervals ) )
assertThat ( read ( format, written ), contains ( 3.14d ) )
Assert. assertEquals ( String. class, clazz )
assertThat ( "should be no problem", monitor. isProblemWith ( REPO ), is ( false ) )
assertThat ( allDbs. size ( ), is ( 3 ) )
assertEquals ( "The attribute 'voice' is not found in the database", newValue, nsae. getAttribute ( "name" ) )
Assert. assertTrue ( checkPoint )
Assert. assertEquals ( StatusCodes. NOT_FOUND, result. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( "with SURVEY (ID, NAME) as (select survey2.ID, survey2.NAME\\n" + "from SURVEY survey2)\\n\\n" + "from dual", q. toString ( ) )
assertThat ( other, DateMatchers. sameSecondOfMinute ( date ) )
assertEquals ( expResult, result )
assertNotNull ( User. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( 50, wnd. rate ( ), 0.0001 )
assertThat ( target. matchExactly ( match ), is ( false ) )
assertThat ( cache. get ( loader ), is ( 3 ) )
assertEquals ( "test-index-pattern", defaultPattern )
assertRequest ( "POST", "Subaccount/" )
Assert. assertEquals ( 0, a. length )
Assert. assertEquals ( 2, orTest. getConditions ( ). size ( ) )
assertArrayEquals ( aSub. toArray ( ), bSub. toArray ( ), DELTA )
assertThat ( subject. getAllArtifactDescriptors ( ). size ( ), is ( 0 ) )
assertEquals ( results. size ( ), 2 )
assertEquals ( expectedResult, tomcatReinforcement. invoke ( audit ) )
assertEquals ( objects, root )
assertEquals ( "Should return FAILURE", "failure", jsonObj. get ( "status" ). getAsString ( ) )
assertTrue ( tag )
testContext. assertNull ( returnedExpireValue )
assertEquals ( "1970-01-01", result. getParameters ( ). get ( "date" ). getAsString ( ) )
assertCorrectVariableInitialisation ( new long [ ] { length }, array )
Assert. assertEquals ( a * FastMath. cos ( w * v + p ), f. value ( v ), 0 )
assertEquals ( TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. REPLACE, v, TERM_FACTORY. getConstantLiteral ( "^Ste(v|ph)en$" ), TERM_FACTORY. getConstantLiteral ( "" ) ), translation )
assertEquals ( "T", plan. getTableRef ( ). getTable ( ). getTableName ( ). getString ( ) )
assertEquals ( "defaulLabel,defaulLabel,defaulLabel,defaulLabel", executeSqlCommand )
assertEquals ( value. get ( 0 ), remoteRepository )
assertThat ( this. url, is ( equalTo ( "/context/dispatcher/method" ) ) )
assertEquals ( IOTester. VALUE_OUT_BYTES, buf. length ( ) )
assertEquals ( expected, result )
assertEquals ( s3, unassigned. iterator ( ). next ( ) )
Assert. assertEquals ( Constants. GENERIC_SERIALIZATION_BEAN, url. getParameter ( Constants. GENERIC_KEY ) )
Assert. assertEquals ( Sets. newHashSet ( 1 ), parser. getSecureBindIndices ( ) )
Assert. assertEquals ( expected, actual )
assertThat ( view. url ( ), is ( expectedUrl ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert. assertEquals ( "test-jaspi-form-auth failed", HttpStatus. SC_UNAUTHORIZED, response. getStatusLine ( ). getStatusCode ( ) )
Assert. assertNotNull ( object )
assertEquals ( "Result", 2, map. size ( ) )
assertThat ( files, hasGzippedFile )
Assert. assertEquals ( expected, actual )
assertSame ( builder, newBuilder )
assertEquals ( obj. toString ( ), "PolicyDomainInfo{domainName: \\"Test\\", sid: SID(1, 0, 0, 0, 5), size(SID) : 32}" )
Assert. assertEquals ( expected, actual )
assertEquals ( "Status code should be OK", Response. Status. OK. getStatusCode ( ), response. getStatus ( ) )
assertEquals ( HttpStatusCode. NO_CONTENT. code, response. getStatus ( ) )
DelegationTestUtil. assertDelegationToSpy ( traceeMessageProducer )
assertHeader ( header, name, value )
assertEquals ( ChrisProductReaderPlugin. class, plugIn. getClass ( ) )
assertEquals ( 2, context. getTableCount ( ) )
Assert. assertEquals ( 1, resultsSize ( rc ) )
assertEquals ( 0, runtimeService. createProcessInstanceQuery ( ). processInstanceId ( processInstance. getId ( ) ). count ( ) )
assertEquals ( "Hello, world!", value )
assertEquals ( expectedExecutionTime, actual )
assertEquals ( string, Util. inputStream2String ( new ByteArrayInputStream ( string. getBytes ( ) ) ) )
assertEquals ( searchSupportRest, searchSupportResource. getContent ( ) )
assertNull ( activity. getParent ( ) )
assertEquals ( "sekrit", c. get ( Property. INSTANCE_SECRET ) )
assertThat ( result, equalTo ( false ) )
assertTrue ( elementsEqual ( aEdges, expected ) )
assertThat ( generator, is ( expected ) )
assertThat ( resp. statusCode, is ( Response. NOT_FOUND ) )
assertThat ( description. getTitle ( ), is ( "a_step" ) )
Assert. assertEquals ( RuntimeExceptionMapper2. class, exceptionMapper. getClass ( ) )
assertFalse ( iter. hasTop ( ) )
assertThat ( result, nullValue ( ) )
Assert. assertNotNull ( app )
assertEquals ( 3, structure. getNumGroups ( ) )
assertNull ( result )
Assert. assertEquals ( null, p. getValue ( ) )
Assert. assertEquals ( "�肩��|灏辫�|��|浜�", words )
assertEquals ( "$${test}", p. getCurrentValue ( ) )
assertEquals ( MyFactory. class, targetType )
assertEquals ( "000001072676", Hex. toHexString ( outputStream. toByteArray ( ) ). toUpperCase ( ) )
assertEquals ( "Base value is not properly parsed", Long. valueOf ( 3 ), parsed )
assertEquals ( expectedParsedResult, actualParsedResult )
assertNotNull ( "JobSubmission is null", entity )
assertEquals ( original, ArrayUtils. nullToEmpty ( original ) )
assertResponse ( DataMockery. createREQMODWithGetRequestNoBodyResponse ( ), response )
Assert. assertTrue ( originalId. equals ( packetExternal. getID ( ) ) )
assertTrue ( BitsInt. test ( v, false, 63 ) )
Assert. areEqual ( "1", hs. get ( "count" ). toString ( ), "select count(1) as count from test1 where (test1.colu2 not in('DB_D','DB_E')) and test1.clum <= 201" )
assertTrue ( getNoErrorMsg ( ), result )
Assert. assertEquals ( "Hello, world!", compilation. getValue ( ) )
assertTrue ( req_018_Util. isPeerInterestedOnRemoteWorkerProvider ( rwpOID. getServiceID ( ) ) )
Assert. assertEquals ( "(nt_change_substitution (nt_point_location (nt_base_location (nt_number 123))) c > A)", nt_change_substitution. toStringTree ( parser ) )
assertEquals ( vr. getValidity ( ), Validity. VALID )
assertArrayEquals ( new long [ ] { 1 }, result )
assertEquals ( "myTestId", history. getId ( ). getIdPart ( ) )
assertTrue ( latch. await ( 4, SECONDS ) )
assertEquals ( "Wrong class", MATCH_CLASS, provider. determineConfigurationClass ( decl, Collections. singleton ( params ) ) )
assertEquals ( name. getName ( ), request. getLogName ( ). getName ( ) )
Assert. assertEquals ( 1, ( int ) person. getPersonAttributeId ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( assertion, viewTest )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/0>,</6/0/0>,</6/0/0>,</6/0/0>,</6/0/0>,</6/0/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>,</6/0/6>", strLinks )
assertThat ( Util. booleanValue ( "ok", scope ), is ( true ) )
assertLife ( playerA, 17 )
assertTrue ( UrlUtils. isMatch ( consumerUrl, providerUrl ) )
assertEquals ( 2, accounts. size ( ) )
assertNotNull ( builder )
assertArrayEquals ( splitString, testString3ExpectedSplit )
assertThat ( PrettyTime. of ( Locale. GERMANY ). withReferenceClock ( clock ). printRelative ( PlainTimestamp. of ( 2014, 9, 4, 14, 0 ). atUTC ( ), ZonalOffset. UTC ), is ( "vor 4 Stunden" ) )
assertEquals ( 30, age )
assertNull ( next )
assertEquals ( "1", e. eval ( ). toPlainString ( ) )
Assert. assertEquals ( "a LIKE 'b'", lc. getLoginIPHeadLikeOr ( ) )
assertTrue ( result. getRows ( )!= null )
assertTrue ( r1 instanceof PublicCloneable )
Assert. assertTrue ( "x=" + x, error < 1.0e-12 )
assertEscalationEventDefinition ( "subProcessStart", "myEscalationCode" )
assertSame ( GBP_2_34, test )
assertTrue ( "Write succeeded", succeedRows. get ( ) > 0 )
assertEquals ( ( byte ) 8, ( byte ) result. getByteWrapperValue ( ) )
Assert. fail ( "Message with invalid value '" + o + "'" )
assertEquals ( "ACCEPT", conn2. getHeaderField ( 0 ) )
Assert. assertEquals ( module. getClassLoader ( ), classLoader )
assertEquals ( test1. hashCode ( ), test2. hashCode ( ) )
assertCollectionSerialization ( expected, collection )
assertTrue ( Files. isSameFile ( p1, p2 ) )
assertTrue ( page. asXml ( ). contains ( "com.sun.faces.config.WebConfiguration" ) )
assertThat ( response. getErrorMessages ( ), contains ( new ErrorMessage ( Messages. Type. ERROR, "NotAuthorizedException: NotAuthorizedException" ) ) )
Assert. assertEquals ( 8L, ( long ) result )
assertEquals ( aMessage, res )
assertEquals ( 1, postDTOs. size ( ) )
assertAuthenticationResult ( s. authenticate ( "user", "bad password" ), Response. Status. UNAUTHORIZED )
assertEquals ( 0, GlobalTransaction. getCurrentTransactionStack ( ). size ( ) )
assertEquals ( "Hello World!", config. helloWorld ( ) )
assertArrayEquals ( VALUES, getSubject ( ). getEnabledGroup ( ). toArray ( ) )
assertArrayEquals ( "Unexpected alignment set for property not in container", defaultAlignments, t. getColumnAlignments ( ) )
Assert. assertEquals ( versao, protocolo. getVersao ( ) )
assertEquals ( expectedNode, actualNode )
assertEquals ( 1, hits. totalHits )
assertNull ( output )
assertEquals ( "Privacy policy generated not equal to the original policy", "<?xmlversion=\\"1.0\\"encoding=\\"UTF-8\\"?>" + cisPolicy. toXMLString ( ). replaceAll ( "[ \\n\\t]", "" ), privacyPolicy )
assertNotNull ( provider )
assertThat ( host, is ( equalTo ( "2001:638:700:20d6::1:3a" ) ) )
assertNotNull ( node. getSingleNode ( ). getIndex ( ) )
assertTrue ( exceptionArgumentCaptor. getValue ( ) instanceof NoSuchProviderException )
assertThat ( eqler. queryCnt ( ), is ( 33 ) )
Assert. assertEquals ( expected, s, 1e-15 )
Assert. assertSame ( managerFactory, AbstractDecorator. getOriginalDecoratedObject ( victim. getManagerFactory ( ) ) )
assertMeasure ( measure, CommitsPerClockHourMeasure. class, 14 )
assertEquals ( testSesameTripleSubjectObjectBNode, tripleAsStatement )
assertTrue ( "Wrong template: " + template, compile ( template ). matches ( template ) )
assertEquals ( expResult, result )
assertEquals ( "h2", actual )
assertEquals ( HttpStatusCodes. UNSUPPORTED_MEDIA_TYPE. getStatusCode ( ), response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( 1024, cli. getOptionValue ( "block size" ) )
assertEquals ( "0: CPU CPU\\n" + "1: CPU\\n" + "2: CPU\\n" + "3: CPU\\n" + "engine\\n" + "1: Thread[engine,main]\\n" + "2: CPU\\n" + "3: CPU\\n", actual )
assertEquals ( "Incorrect qualifyFreq", 6000, ( int ) response. getQualifyFreq ( ) )
assertEquals ( 0, vid. get ( ). size ( ) )
assertEquals ( presenter. isLoading ( ), true )
Assert. assertEquals ( 2, retireable. getRetiredBy ( ). getId ( ). intValue ( ) )
assertEquals ( "From Server 30", client. testPrimitiveTypes ( request ). getOut ( ) )
assertFalse ( "adapter does not support method", result )
assertSame ( a1, a2 )
files. assertHasDigest ( INFO, actual, algorithm, expected )
assertEquals ( DecodeQualification. SUITABLE, decodeQualification )
assertEquals ( message. toString ( ), sb. toString ( ) )
assertThat ( result, instanceOf ( type ) )
assertNotNull ( crs )
assertThat ( read ( path ), is ( notNullValue ( ) ) )
assertThat ( subject. update ( object ), is ( true ) )
assertEquals ( 2L, count )
assertThat ( result, sameInstance ( derivedFrom ) )
assertEquals ( i, num )
assertThat ( view. elementIsDisplayed ( By. id ( "some-element" ) ), is ( false ) )
assertEquals ( "testProcess1", repositoryService. getProcessDefinitionById ( definition. getId ( ) ). getName ( ) )
assertEquals ( 1, ticket. getTicketId ( ) )
Assert. assertEquals ( ValidationResult. Result. ERROR, snowflakeConnection. validate ( ). getStatus ( ) )
assertEquals ( 2, asn1. getOctets ( ). size ( ) )
assertEqualsIgnoreWhitespace ( expected, real )
Assert. assertEquals ( 1, result. getEntities ( ). size ( ) )
assertEquals ( 1, fixture. getHeaders ( ). size ( ) )
assertEquals ( webSocketHandler. calculateHeaderSize ( WebSocketHeader. PAYLOAD_SMALL_MAX ), WebSocketHeader. DEFAULT_HEADER_LENGTH_MASKED )
assertThat ( washingMachine. getWashingMachineState ( ), is ( WashingMachineState. WASHING ) )
Assert. fail ( )
assertNotNull ( new JDomModel ( xml ) )
assertTrue ( params. isEmpty ( ) )
assertEquals ( expResult, result, 0.000001 )
assertNotNull ( result )
assertResultsEqual ( net, add1, 100.0 )
assertThat ( b, is ( true ) )
assertThat ( supported, is ( false ) )
assertThat ( cursor. proceedTo ( ), is ( true ) )
assertTrue ( capabilities. hasLayer ( "Layer1" ) )
assertEquals ( 3, item. getInt ( ) )
assertTrue ( result. size ( ) == 2 )
Assert. assertEquals ( "[6, 2, 8, 1, 4, 3, 5]", values. toString ( ) )
assertNull ( out )
assertEquals ( jv1, jv2 )
assertEquals ( "Expected 5 results!", 5, n )
assertEquals ( 1, handler. getResponses ( ). size ( ) )
assertEquals ( "value", ( ( HtmlElement ) dataGrid. getFirstByXPath ( "tbody[@class='rf-dg-body']/td[@class='rf-dg-c']/*[@id='dataGrid2:dgb']" ) ). getTextContent ( ) )
assertThat ( objectMessages. getMessages ( ). getAllMessages ( ), hasSize ( 0 ) )
assertNotNull ( path )
assertEquals ( "world", result. getString ( "hello" ) )
assertErrorEventDefinition ( "end", "myErrorCode", null )
assertEquals ( expected, actual )
assertElementPresent ( By. className ( "v-datefield-popup" ) )
assertEquals ( "OK", result. getResult ( ) )
assertSame ( p3, result )
assertSame ( stringMessageBodyWriter, applicationProviders. getMessageBodyWriter ( String. class, TEXT_PLAIN_TYPE, null, null, TEXT_PLAIN_TYPE ) )
assertTrue ( uploadResult. isHasError ( ) )
assertThat ( students. size ( ), is ( 3 ) )
assertThat ( underTest. map ( parser, generator ), is ( nullValue ( ) ) )
assertThat ( axioms, hasItem ( axiom ) )
assertArrayEquals ( "Arguments", new String [ ] { "-configuration", m_platformContext. getFilePathStrategy ( ). normalizeAsPath ( new File ( m_workDir, "equinox" ) ) }, new EquinoxPlatformBuilderF321T372 ( m_bundleContext, "version" ). getArguments ( m_platformContext ) )
Assert. assertNotNull ( addressResultsDto )
Assert. assertEquals ( "SELECT something\\nFROM tbl_name\\nWHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date_col;", text )
assertEquals ( current. < String > getAs ( field. name ( ) ), format. format ( new Date ( currentTimeMillis ) ) )
assertEquals ( "void dest1()", toString ( dest ) )
assertThat ( typeMapping. getJavaType ( 19, 0 ), is ( BigInteger. class ) )
assertArrayEquals ( new String [ ] { "a", "b", "t" }, commandInvocation. args ( ) )
assertThat ( errors. getAllErrors ( ), hasSize ( 0 ) )
assertEquals ( new Double ( 5.0 ), sensor. metricValue ( new MetricName ( "test1.total", "grp1" ), new Double ( 5.0 ) ) )
assertEquals ( before, after )
assertEquals ( testString, new String ( outputStream. toByteArray ( ) ) )
assertSeveralDirections ( )
Assert. assertTrue ( row. matches ( guess ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertThat ( html, is ( equalTo ( expected ) ) )
Assert. assertEquals ( "0", customerAddress. getAddress ( ). toString ( ) )
assertEquals ( expected, asmResult )
assertEquals ( 1, processorsFactory. getPreProcessors ( ). size ( ) )
assertTrue ( page. asXml ( ). contains ( "Great! You are now in the correct destination view." ) )
assertFuzzy ( result, 50.0, 10 )
assertEquals ( connMock, connection )
assertTrue ( className. equalsIgnoreCase ( Number. class. getSimpleName ( ) ) )
Assert. assertNotNull ( testSession )
assertNull ( fileInfo )
assertFalse ( "unexpected value", value )
assertTrue ( "Job failed", job. isSuccessful ( ) )
assertEquals ( logLine, "log line" )
Assert. assertTrue ( "Could not find class " + NAME, c!= null )
Assert. assertTrue ( scheduledTaskRan. get ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert. assertNotNull ( tested. prepareESBulkRequestBuilder ( ) )
assertEquals ( player. getMinions ( ). size ( ), 3 )
Assert. assertEquals ( expected, links )
Assert. assertTrue ( success )
assertThat ( option. isNull ( ), is ( true ) )
Assert. assertNull ( identifierType )
Assert. assertEquals ( ste. toString ( ), frame. toString ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "THE REASON", retireable. getRetireReason ( ) )
assertEquals ( "From is not properly parsed", new Date ( 2015, 2, 28L * 24L * 60L * 1000L ), mapper. readFrom ( columns ) )
Assert. assertTrue ( maxError < 1.0 )
assertNotNull ( hostname )
assertThat ( main. getMarkdownFile ( ), nullValue ( ) )
assertEquals ( expecting, result )
assertSame ( 0, ids. size ( ) )
assertNull ( p2 )
assertThat ( InterfaceWrapperHelper. getModelTableNameOrNull ( testModelRef ), is ( testModelRef. getTableName ( ) ) )
assertFalse ( ns. isNameOp ( ) )
assertThat ( e. hasMoreElements ( ), is ( false ) )
Assert. assertNotNull ( "The TestRun should not be null", actualTestRun )
Assert. assertEquals ( "Incorrect Compare Type", AbstractCompare. CompareType. EQUAL, compare. getCompareType ( ) )
assertEquals ( 15L, count )
assertEquals ( expected, result )
XMLAssert. assertXMLEqual ( docIn, docOut )
assertThat ( boundSql. getSql ( ), Matchers. equalTo ( "select  ok " ) )
assertEquals ( "the_value", obj )
Assert. assertFalse ( result. isEmpty ( ) )
Assert. assertEquals ( 3, resourceList. size ( ) )
assertTrue (! result )
assertEquals ( "llvalue1", result )
assertEquals ( 2, rulesFired )
assertFalse ( prefs. matches ( t ) )
assertOut ( "var a:URIError = new URIError()" )
assertThat ( history. contains ( transition ), is ( true ) )
assertThat ( bread, is ( shop. getProducts ( ). get ( 0 ) ) )
Assert. assertEquals ( 9, ns. size ( ) )
assertEquals ( ( ( ObjectWithOptions2 ) ( ( ObjectWithOptions ) options. optOp ). optionsOp ). value, 10101 )
assertThat ( response. getBody ( ), containsString ( "Hello World, Buddy" ) )
assertThat ( description. toString ( ), is ( "got <2> sheet \\"Sheet1\\"" ) )
assertNotNull ( pwd )
assertEquals ( "John Smith", built. getValue ( ) )
assertEquals ( expected, sb. toString ( ) )
AssertionUtils. multiAssertEquals ( createAsDocument10, response5. getResponseObject ( ) )
assertThat ( response. getStatus ( ), equalTo ( 201 ) )
assertEquals ( result, "John,Jane,Adam,Tom" )
assertSame ( TestService. getStatus ( ), server. getStatus ( ) )
assertThat ( list. size ( ), is ( 1 ) )
assertEquals ( "V2 Comment", wrapper. getComment ( ) )
assertThat ( encodedURL, equalTo ( URL_ENCODED ) )
assertEquals ( "bar", cl. getOptionValue ( "foo" ) )
assertEquals ( padded ( OBJECT_OVERHEAD + OBJECT_REF ) + padded ( ARRAY_OVERHEAD + 7 * CHAR ) + padded ( ARRAY_OVERHEAD + 8 * CHAR ), ThreadTrackingContext. getBytes ( ) )
assertEquals ( expecting, found )
assertThat ( response. getBody ( ), containsString ( "Hello World" ) )
Assert. assertNull ( devBean )
assertEquals ( "rgba(255, 235, 156, 1)", Colors. parse ( value ). toString ( ) )
assertEquals ( "two dollars", actual )
assertOut ( "<Button><name>custom</name></Button>" )
assertEquals ( "submission was not updated", 0.0f, percentageComplete, DELTA )
assertEquals ( "delete did not work", 0, service. listRoles ( ). size ( ) )
assertFalse ( result )
assertEquals ( "LIMIT 5", statement. toString ( ) )
assertEquals ( Result. FAIL, nogroup. apply ( item ) )
assertEquals ( "<p>This is a paragraph\\n" + "\\n" + "--------------------------\\n" + "This is a paragraph after a horizontal rule</p>", result )
Assert. assertEquals ( 401, statusCode )
assertThat ( visitedInstructions, containsInAnyOrder ( testInstruction1, testInstruction2 ) )
assertEquals ( 0, grid. getSelectedRows ( ) )
assertSame ( message, pi. getMessage ( ) )
Assert. assertFalse ( nics. isEmpty ( ) )
Assert. assertThat ( version, is ( "5.6.7" ) )
assertEquals ( toPercentage ( scale ), zoomUI. getPercentageZoom ( ) )
Assert. assertNull ( this. manager. get ( this. family1 ) )
assertEquals ( renderGroupIdArtifactIdVersionOptionalResult ( ), result )
assertNotNull ( result )
assertFalse ( iterator. hasNext ( ) )
assertJustDelta ( alpha )
Assert. assertEquals ( "41 minutes", prettyTime. format ( prettyTime. calculatePreciseDuration ( new Date ( new Date ( ). getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( dataCollectionState )
assertEquals ( 17, vowelCount )
Assert. assertEquals ( 4, decomposition. size ( ) )
assertNull ( ref. get ( ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertThat ( books. size ( ), is ( 4 ) )
assertThat ( actual, equalTo ( expected ) )
assertEquals ( expecting, found )
assertEquals ( 40, new AcceptsLambda < Integer > ( ). accept ( l ). intValue ( ) )
assertEquals ( "Error notification was present", 0, this. notificationService. getMessages ( ). size ( ) )
assertTrue ( result >= 33f && result <= 42f )
assertFalse ( event. isPresent ( ) )
assertTrue ( entity. getId ( ) > 0 && entity. getTimestamp ( ) == null )
assertEqualsIgnoreLineEnding ( String. format ( "4321\\n" ), rep. asString ( ) )
assertThat ( result, isFailedCommand ( ) )
assertThat ( i, is ( 4 ) )
assertTrue ( aNumber == result )
assertEquals ( new Float ( 1 ), minPreference )
assertOut ( "var /** @type {number} */ a = parseInt(\\"666\\", 10)" )
Assert. assertEquals ( configNew, configOld )
assertEquals ( HttpStatusCode. NO_CONTENT. code, response. getStatus ( ) )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
given ( ). port ( jettyPort ). log ( ). all ( ). accept ( ContentType. JSON ). when ( ). get ( "/openapi" ). then ( ). log ( ). all ( ). assertThat ( )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", doc. body ( ). html ( ) )
assertEquals ( r. size ( ), 0 )
assertEquals ( 1, mComposite. extendFromWriteLocked ( LockMode. READ ). size ( ) )
assertEquals ( "no-transform", cc. toString ( ) )
assertNotSame ( choice1, choice2 )
assertEquals ( fr, fr2 )
assertThat ( page. getTitle ( ), is ( "Thucydides Test Site" ) )
Assert. assertEquals ( null, scanner. nextToken ( ) )
assertEquals ( "hdfs://uri1:8200/blah", uri. getName ( ) )
assertEquals ( "california street, ca", real )
assertEquals ( originalFetchCount, timeline. getFetchCount ( ) )
assertTrue ( true )
assertSame ( transactionManager, getDataSourceFromConfiguration ( ). getTransactionManager ( ) )
assertEquals ( pp. getValue ( ), new Payload < > ( "error 4 test error" ). getValue ( ) )
assertEquals ( NAME_NODE, action. getNameNode ( ) )
Assert. assertFalse ( policy. isResponseCacheable ( "GET", response ) )
assertTrue ( "Text Written Is Test", new String ( buf, 0, buf. length ). equals ( testString ) )
assertEquals ( Collections. singleton ( "foo" ), filesFromLocation ( SASS_LOCATION ) )
Assert. assertTrue ( "All record num = " + splits. size ( ), allRecordNum <= 3 )
assertEquals ( "[x=10.0][y=10.0]", s. getDeliveryLocation ( ). getId ( ) )
FactorDecompositionTest. assertFactorization ( lPoly, decomposition )
assertTrue ( meta. pofClassAttribute == null )
Assert. assertEquals ( expectedLoginId, loginId )
assertEquals ( "Must return self", editor, result )
assertEquals ( "Wrong relationship returned", f, f. getRelationshipTo ( ) )
assertE ( "         " + "         " + "         " + "         " + "         " + "         " + "         " + "         " + "         " + "         " + "   xxx   " + "  oxoox  " + "oxooooox " )
assertEquals ( "bar", result )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
Assert. assertNotNull ( personStructure )
assertEquals ( "test", beanWrapper. getFieldValueFromField ( "hiddenProperty" ) )
assertEquals ( "[{\\"groupName\\":\\"SomeCounterGroupName1\\",\\"counters\\":[{\\"counterName\\":\\"SomeCounterName1\\",\\"value\\":\\"3\\"},{\\"counterName\\":\\"SomeCounterName2\\",\\"value\\":\\"4\\"},{\\"counterName\\":\\"SomeCounterName3\\",\\"value\\":\\"5\\"},{\\"counterName\\":\\"SomeCounterName1\\",\\"value\\":\\"6\\"},{\\"counterName\\":\\"SomeCounterName1\\",\\"value\\":\\"7\\"},{\\"counterName\\":\\"SomeCounterName2\\",\\"value\\":\\"8\\"},{\\"counterName\\":\\"SomeCounterName3\\",\\"value\\":\\"9\\"},{\\"counterName\\":\\"SomeCounterName1\\",\\"value\\":\\"10\\"},{\\"counterName\\":\\"SomeCounterName2\\",\\"value\\":\\"11\\"}]}]", json )
assertTrue ( exp. contains ( "class Bck2BrwsrToolkit" ) )
Assert. assertTrue ( readable )
assertThat ( messageIdLocalPart, is ( "<W[20]" ) )
assertTrue ( broker. isPresent ( ) )
assertEquals ( 404, response. getStatus ( ) )
assertEquals ( "(SOURCEFIELD1 =='sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD1 =='sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD2 == 'enrichValue2')", transformed )
assertTrue ( false )
assertFalse ( ca. getLegend ( ). getLegend ( ) instanceof UniqueSymbolPoint )
assertEquals ( 0, bpt. getEpochCount ( ) )
assertNotNull ( processesList )
context. assertIsSatisfied ( )
assertEquals ( response. asString ( ), CANCELLED, response. get ( OUTCOME ). asString ( ) )
assertThat ( editor. getValue ( ), is ( ( Object ) ReadPreference. preferSecondary ( Collections. singletonList ( ( Object ) 1 ) ) ) )
assertOut ( "var /** @type {number} */ a = 0, /** @type {number} */ b = 0, /** @type {number} */ c = 0" )
assertArrayEquals ( expected, set. toArray ( ) )
assertEquals ( 6, services. size ( ) )
Assert. assertFalse ( verifyTest ( builder ) )
assertPlanMatches ( sort )
assertEquals ( ImmutableList. of ( new IntWritable ( 1 ), new Text ( "foot" ), new Text ( "ball" ), new LongWritable ( 3 ) ), Lists. newArrayList ( out. materialize ( ) ) )
Assert. fail ( "build listing failure" )
Assert. assertEquals ( testDN, actual. getUserDN ( ) )
assertThat ( "ORACLE", is ( ( String ) rootNode. getProperty ( StandardDdlLexicon. PARSER_ID ) ) )
assertNull ( count )
Assert. assertTrue ( marshalled. contains ( Namespace. CURRENT. getUriString ( ) ) )
assertEquals ( expectedCsr, sr. getCsr ( ) )
assertFalse ( alive )
assertEquals ( content, result )
assertEquals ( "Should get a 404 response", HttpStatus. NOT_FOUND, mongodbFeedSource. getFeed ( getFeedRequest ). getResponseStatus ( ) )
assertEquals ( Optional. of ( mockNodes ), transaction. flowRpcAddMultiple ( Collections. singletonList ( flowRpcAddMultipleInput ) ) )
assertEquals ( expectedResult, result )
Assert. fail ( "ProtocolException should have been thrown" )
Assert. assertNull ( "Should be null, as it is also null in the original process instance list in the query.", returnedProcessInstanceId )
assertEquals ( "Expected 0 results!", 0, n )
assertions. isNotEqualTo ( expected )
assertThat ( result, is ( parse ( "[1, 2, 3, \\"foo\\", [\\"bar\\", 42]]" ) ) )
assertThat ( subject. toFilterExpression ( ), is ( "(osgi.os=macosx,arch=macosx)" ) )
assertNotNull ( "Configuration for todo request didn't be null.", configuration )
assertTrue ( cause. getMessage ( ). contains ( "readLock() method is not static" ) )
assertEquals ( contextPath, actual )
assertTrue ( list. size ( ) == 10 )
rule. assertScenarioEnded ( )
Assert. assertFalse ( ldap. authenticate ( "user", "password" ) )
assertEquals ( expected, actual )
assertThat ( NamespaceManager. get ( ), is ( "aaa" ) )
assertEquals ( "PT15M", microdata. getFirstProperty ( "cookTimeValue" ) )
assertEquals ( expected, producer. produce ( testSet ) )
assertEquals ( ONT2, shortForm )
assertEquals ( "Successfully registered applications: [foo, sink]", result )
Assert. assertEquals ( "did not get expected XML from PI", expected, copy. getParsedTagsCheckXML ( ) )
Assert. assertEquals ( root. getRelativePath ( child ), "/a" )
assertEquals ( now. getValue ( ), then. getValue ( ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Leave/>", elem. toXml ( ) )
assertPotentialOwnerIsNotPresent ( )
assertThat ( actionUrl, is ( equalTo ( "/context/context/spring/faces/render/anything" ) ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertEquals ( 1, r )
assertThat ( request, instanceOf ( VaadinWebRequest. class ) )
assertTrue ( examples. mkdirs ( ) )
assertEquals ( documento, documentoModificado )
assertEquals ( CHARGING_STATION_ID, unlockConnectorArgument. getValue ( ). getId ( ) )
assertEquals ( Sets. newHashSet ( Role. SYS_ADMIN, Role. MODEL_CREATOR ), user. getRoles ( ) )
assertEquals ( 4, resources. size ( ) )
assertEquals ( "1. Enter button pressed", getLogRow ( 0 ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert. assertEquals ( "answer=42", actual )
assertEquals ( 90, ( ( Service ) vrp. getJobs ( ). get ( "2" ) ). getServiceDuration ( ), 0.1 )
assertEquals ( newArrayList ( "bar" ), response. getStringHeaders ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( elements. size ( ), dto. getElements ( ). size ( ) )
assertEquals ( Integer. valueOf ( HttpServletResponse. SC_OK ), status. get ( ) )
assertThat ( newerBundleInfo. isVersionNewerThan ( olderBundleInfo ), is ( true ) )
Assert. assertEquals ( 1, lines. length )
Assert. assertTrue ( response. getStatus ( ) == NO_CONTENT. getStatusCode ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( filename, sourceFolder + "cmp_" + file, destinationFolder, "diff_" ) )
Assert. assertEquals ( 2, list. size ( ) )
Assert. assertEquals ( "", result )
assertEquals ( 1, testMap. size ( ) )
assertThat ( result, is ( "/mode:something/jcr:else" ) )
assertEquals ( HttpStatus. SC_OK, response. getStatusLine ( ). getStatusCode ( ) )
assertThat ( conf. get ( CircusTrainCopyListing. CONF_ROOT_PATH ), is ( path ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true,\\"nullable\\":true,\\"columnByNames\\":[{\\"name\\":\\"column 1\\",\\"type\\":\\"convertedType\\",\\"nullable\\":true,\\"defaultValue\\":\\"default\\"}]}]}]", content )
assertEquals ( "Announcement message is incorrect!", newMessage, announcementMessage )
assertEquals ( MessageController. ERROR, MessageController. get ( cell, "3" ) )
assertThat ( "default provider", sut. getDefaultProvider ( ), is ( sameInstance ( this. defaultProvider ) ) )
assertValid ( wsdls )
assertEquals ( FieldType. FIELD, f. getFieldType ( ) )
assertEquals ( expected, actual )
assertFalse ( strategy. isReloadingRequired ( ) )
assertTrue ( pages. contains ( mockedPage ( GwtCommandPage. class ) ) )
assertFalse ( set. contains ( invalidUrl ) )
assertEquals ( "UPDATE person SET first_name =?, favourite_number =? WHERE last_name =? AND first_name!=? AND first_name LIKE?", sql. trim ( ) )
assertEquals ( 100L, frame. getLong ( ) )
Assert. assertEquals ( input, HtmlSanitizerUtil. sanitize ( input ) )
assertNotNull ( result )
assertThat ( renderer. getShortForm ( entity ), is ( "rdfs:definedBy" ) )
assertEquals ( 2, keys. length )
ModelTestBase. assertIsoModels ( expected, y )
assertTrue ( a. getAsText ( "/OSC:Observation/@OBSERVEDPROPERTY" ). equals ( "temperature,windspeed" ) )
assertTrue ( fieldDefinitionName. isUnique ( ) )
assertDateEquals ( new DateTime ( 2013, 5, 20, 15, 30, 20, 999 ), date )
assertOut ( "public interface IA extends IB, IC, ID {\\n}" )
assertEquals ( "abc\\n", found )
assertNotSame ( oldManager, appender. getManager ( ) )
$ ( "#text" ). assertThat ( )
assertTrue ( comparePomFiles ( reactorProjects ) )
rule. assertScenarioEnded ( )
assertEquals ( 2, Solutions. bestOf ( solutions ). getRoutes ( ). size ( ) )
Assert. assertTrue ( "did not get expected error", gotError )
assertEquals ( 0, runtimeService. createEventSubscriptionQuery ( ). count ( ) )
assertEquals ( "1,2,3", decoder. encode ( BigDecimal. valueOf ( 2, 3 ), DOT_POINT_SEPARATOR ) )
assertEquals ( "_cat/allocation/testNode", cat. getURI ( ElasticsearchVersion. UNKNOWN ) )
assertThat ( output. getValue ( ), equalTo ( "This is a test!" ) )
assertThat ( "Output should contains the expected value", stringFromStdout, containsString ( "echoed" ) )
assertArrayEquals ( expectedMasterSecret, result )
Assert. assertEquals ( 1, result )
assertEquals ( bytesString, bodyString )
assertFalse ( firstConfig. equals ( secondConfig ) )
Assert. assertFalse ( "no translated query", translatedQuery. toString ( ). isEmpty ( ) )
Assert. assertTrue ( "We should have a complete header", bufPos!= - 1 )
Assert. assertEquals ( - 1L, ( long ) response. getBodySize ( ) )
assertEquals ( witness, node )
Assert. assertEquals ( expectedPath, normalizedPath )
assertTestSuiteResults ( unpack, child )
assertEquals ( snapshot, bufferB. snapshot ( ) )
assertThat ( condition. isSatisfied ( ), is ( true ) )
assertEquals ( mockHexBinaryValue, result )
assertTrue ( "Must be OK", testResult. getStatus ( ) == Response. Status. SUCCESS. getStatusCode ( ) )
assertEquals ( 14, metrics. size ( ) )
assertThat ( value, equalTo ( "VALUE" ) )
assertThat ( $. url ( ), endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertThat ( data. getMessage ( ), is ( "Some other message" ) )
assertEquals ( hsr1, hsr2 )
arrays. assertDoesNotContain ( description, actual, values )
assertEquals ( "select length(entity_0.code) from Entity entity_0", select. getQuery ( ) )
assertEquals ( fieldDefinition, res )
Assert. assertEquals ( 0.0, FastMath. sqrt ( sample. length ), 0.01 )
assertEquals ( projectName, newName )
Assert. assertEquals ( generatedStrPath, expectedStrPath )
assertTrue ( impl. isApiToken ( ) )
assertEquals ( "test", echo. echo ( "test" ) )
assertNull ( array )
assertTrue ( rt. getEventType ( ). equals ( EventType. FSERVER_ZK_ENTITYGROUP_CLOSED ) )
assertTrue ( nullCap == null )
assertDelete ( )
assertThat ( PlainTime. axis ( ). getBaseUnit ( DIGITAL_HOUR_OF_DAY ), is ( unit ) )
assertEquals ( expectedValue, this. fsParser. extractFlowspec ( entry. build ( ) ) )
assertImageEquals ( imageA, imageB, sum )
assertEquals ( "[~,*,:]", new Expression ( loop ). toString ( ) )
assertThat ( command. accept ( state ), is ( true ) )
assertTrue ( actual. isEmpty ( ) )
assertLog ( Log. DEBUG, "test debug" )
assertTrue ( "Data was not removed", appDataTestInstanceRemoved. getValues ( ). containsKey ( "viewcount" ) )
assertThat ( ints. length, is ( greaterThan ( 0 ) ) )
assertThat ( parameters, is ( "?searchView=own&offset=5&limit=10&orderBy=leastTimeLeft&show=running&minSupportCount=50" ) )
assertEquals ( sa, result )
assertEquals ( Lists. newArrayList ( v1, v2, v4 ), path )
Assert. assertTrue ( intersect instanceof EmptyRange )
Assert. assertEquals ( schedulerLatch. getCount ( ), 0 )
assertTrue ( page. asXml ( ). contains ( "{}" ) )
assertThat ( ctrl. createMock ( MocksControl. class ), is ( MocksControl. class ) )
assertEquals ( MAX_ROUNDS, incrementalReasoner. getWalkCount ( ) )
assertThat ( properties. size ( ), is ( 0 ) )
assertEquals ( 1.0, m, 1e-3 )
Assert. assertNotNull ( httpStack )
assertTrue ( i1. contains ( new DiscreteInterval ( 2, 7 ) ) )
Assert. assertEquals ( new URI ( url + "/" + suffix ), UriUtils. buildNewURI ( new URI ( url ), suffix ) )
assertEquals ( result, range. exclude ( other ) )
assertEquals ( 4, BufferTools. indexOfTerminator ( buffer, 0, 1 ) )
assertEquals ( expectedReference, summary. getReference ( ) )
assertNotNull ( result )
assertTrue ( p. matcher ( tags ). matches ( ) )
assertEquals ( JobStatus. ACCEPTED, jobResult. getStatus ( ) )
assertNotNull ( result )
assertThat ( tupleComparator. compare ( new Tuple ( - 1, 1 ), new Tuple ( 1, 2 ) ), is ( 1 ) )
assertEquals ( BuilderFactory. start ( ). addMinKey ( "a" ). build ( ), doc )
assertObjectEquals ( "[null,null,{f:'a'},{f:'b'},{f:'c'}]", p. run ( bs, in, sa ) )
assertThat ( caughtException ( ), instanceOf ( TaxServiceUnavailableException. class ) )
assertTrue ( provided instanceof HTableFactory. HTableFactoryImpl )
assertEquals ( expected, built )
runner. assertNotValid ( serviceImpl )
assertNotNull ( op )
assertNotNull ( injector )
Assert. assertEquals ( "URI match and exception was not thrown.", true, exThrown )
assertEquals ( HttpStatus. SC_NOT_ACCEPTABLE, statusCaptor. getValue ( ). getCode ( ) )
assertInState ( STATE. STOPPED, services )
assertEquals ( expResult, result )
assertTrue ( lastRefLog. getComment ( ). startsWith ( "branch: Created from branch" ) )
Assert. assertEquals ( 50000280834672L, orders. get ( 0 ). getId ( ) )
assertEquals ( "(1,2,3,4,5)", asSequenceStr ( result ) )
Assert. assertTrue ( dataModelLoadBalancer. getHalfClosed ( ) )
assertFalse ( satisfiesPrecondition ( cu ) )
assertThat ( domain. getValidationFailures ( resourceLookup ), empty ( ) )
assertTrue ( i + ", " + file. getAbsolutePath ( ), file. delete ( ) )
assertEquals ( 1, count )
assertFalse ( mdxBaseComponent. prepareQuery ( "select * from table" ) )
Assert. fail ( "IllegalArgumentException expected" )
quote. assertIsSatisfied ( )
assertThat ( target, is ( notNullValue ( ) ) )
Assert. assertTrue ( "Queue name not encoded correctly into job history file", jobHistoryFile. contains ( QUEUE_NAME_WITH_DELIMITER_ESCAPE ) )
assertThat ( picoContainer, sameInstance ( builderAnnotated. picoContainer ( ) ) )
Assert. assertEquals ( expected, actual )
assertNotNull ( result )
assertThat ( info. getServerService ( SERVER ), nullValue ( ) )
assertEquals ( 0, findings. size ( ) )
assertEquals ( "Option value does not contain equal sign", "-Dhttp.port=80", commandLine. getOption ( "simpleOption" ) )
Assert. assertEquals ( expectedCarIds, actualCarIds )
assertEquals ( "������������������������������������������������������������������������������������
assertOut ( "var /** @type {Object} */ a = function(foo, bar) {\\n\\tbar = typeof bar!== 'undefined'? bar : 'goo';\\n\\treturn -1;\\n}" )
Assert. assertEquals ( parentFirstStepPosition + 1, runEnv. getParentFlowStack ( ). getNextPosition ( ) )
assertContains ( indels, 100, "G", "GGAT" )
assertFalse ( problem )
assertEquals ( sayHi, dr. getName ( ) )
Assert. assertNotNull ( is )
Assert. assertEquals ( SetFromVarargs. create ( 1, 2, 3, 4, 5, 6 ), intersection )
assertArrayEquals ( expected, AnnotationUtils. getAnnotatedAnnotations ( testElement, IGNOREED ) )
assertEquals ( Set2Answers. EXERCISE_10, set2. decryptAES128ECB ( EX_10_CIPHERS ) )
assertThat ( afterStartAction, instanceOf ( CustomAfterStartActionInstantiator. class ) )
assertArrayEquals ( expectedFileModes, fileModesFromString )
assertEquals ( "Removelation asociation", obj. getAdresses ( ). get ( 0 ). getStreet ( ), model. getAdres ( ). getStreet ( ) )
assertVersionAndValue ( ref, initialVersion, initialValue )
assertDirectories ( "directories", "foo", "bar" )
assertNull ( fieldName )
assertFalse ( proxyHttpHeader. isValid ( ) )
assertEquals ( "Invalid session id", e. getMessage ( ) )
Assert. assertEquals ( xmlEsperado, medicamento. toString ( ) )
assertEquals ( "local1:local", le. getMessage ( ) )
assertThat ( result, is ( lines ( new String [ ] [ ] { { "\\\\t" } } ) ) )
Assert. assertEquals ( 201, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertEquals ( ( UndoableEditor ) textEditor, defaultEditorAdapter. getTextEditor ( ) )
assertEquals ( LOG4J_INF_INF_FILE, value )
Assert. assertEquals ( 1, subscriptions. get ( ) )
assertEquals ( "3", result )
assertEquals ( object, result )
assertArrayEquals ( sourceData, destination. get ( ), DELTA )
resp. assertContentEquals ( "Exception thrown!" )
assertNull ( epp. getTransport ( ) )
assertNotNull ( "Unread messages are not null", messages )
Assert. assertEquals ( size * 2, deerletRedisClient. get ( "testKey" ) )
assertNotNull ( projectId )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Refer>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Refer>", elem. toXml ( ) )
assertEquals ( 1, image. getWidth ( ) )
assertEquals ( "SQL query does not match", result, test )
Assert. assertEquals ( LocationExtended. class, sky. getClass ( ) )
assertNotNull ( firstTask )
assertThrows ( IndexOutOfBoundsException. class, ( ) -> strings. set ( 2, null ) )
Assert. assertEquals ( copy. get ( Calendar. HOUR_OF_DAY ), 1 )
assertEquals ( 1, rules )
assertTrue ( "Component should be focused", isFocused ( ) )
Assert. assertEquals ( "12 啶�啶苦え啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 12 ) ) )
assertThat ( Functions. blobstoreUrl ( url ), is ( notNullValue ( ) ) )
assertTrue ( wc. post ( "s", Boolean. class ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertNotNull ( "No child configuration", config. getConfiguration ( "testName" ) )
assertEquals ( "a comment", testSet. getPlan ( ). getComment ( ). getText ( ) )
assertEquals ( "HZG-1042", group20. getId ( ) )
Assert. assertEquals ( notes. get ( 0 ). getIdentifier ( ), resultNotes. get ( 0 ). getIdentifier ( ) )
Assert. assertNotNull ( expr )
assertFalse ( peek. hasNext ( ) )
assertParseResult ( result, testResult )
assertEquals ( expectedSplits, new TreeSet < > ( createdSplits ) )
assertEquals ( expecteds, actuals )
assertSame ( exIn, exOut )
Assert. assertEquals ( "Double decode brackets not correct", out, WebUtilities. doubleDecodeBrackets ( in ) )
assertSame ( results, uriTools. resolveUri ( HELLOWORLD_URI. resolve ( "out/results" ), wfBundle ) )
assertTrue ( m. nextShort ( ) > - 1 )
assertEquals ( "SQL query does not match", result, test )
assertEquals ( out. get ( ), LARGE_NUM )
assertNotEquals ( "ec2.amazonaws.com.cn", awsClient. getHost ( ) )
Assert. assertEquals ( false, errors. hasErrors ( ) )
assertEquals ( Arrays. asList ( "testurl" ), doc. getContentField ( "url" ) )
assertThat ( equal, equalTo ( true ) )
assertArrayEquals ( expected, actual )
assertFalse ( result )
assertEquals ( "http://java.example.com:8080/foo/bar/qux/quux", got. toString ( ) )
assertThat ( columns, is ( expected ) )
assertEquals ( newName, instrument. getFriendlyName ( ) )
assertEquals ( "Wrong external id returned for " + test. getId ( ), test. getImdb ( ), result. getImdbId ( ) )
Assert. assertEquals ( 1, factory. getNumCarvedTestCases ( ) )
assertEquals ( "SELECT * WHERE {?s?p?o}", s. history. toString ( ) )
assertEquals ( foo1, foo2 )
assertEquals ( "OK", reply )
assertTrue ( converter. canConvert ( IndexQuote. class ) )
assertEquals ( result, one )
assertEquals ( "SELECT Contacts.Name FROM Contacts WHERE Contacts.Name IN ('x', 'y')", visitor. getQuery ( ). toString ( ). trim ( ) )
assertEquals ( 4, instance. getFeatures ( ). size ( ) )
Assert. assertNotNull ( str )
assertArrayEquals ( expectedCreateSchemaStmts, statements. getLockCreateSchemaStatements ( 2 ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) LIKE $literal" ) )
assertThat ( ff. parse ( "[01]March 1917" ), is ( PlainDate. of ( 2014, 10, 4 ) ) )
Assert. assertFalse ( exclusion1. equals ( exclusion2 ) )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( "button value", element. getCssValue ( "display" ) )
assertions. doesNotContain ( false )
assertEquals ( CloseReason. NO_ACCEPTABLE_VERSION, pair. clientRecorder. q. take ( ) )
assertEquals ( 6. * 3600. + 12. * 3600., sec, 0.01 )
Assert. assertEquals ( "John Doe", nameOfCustomer1 )
assertThat ( metricsInString, equalTo ( gson. fromJson ( virtualMachineMetrics. getVirtualMachineMetrics ( ), Metric. class ). toJson ( ) ) )
Assert. assertTrue ( readable )
assertEquals ( out, frame2 )
assertEquals ( 0, runtimeService. createProcessInstanceQuery ( ). processInstanceId ( processInstance. getId ( ) ). count ( ) )
assertEquals ( "C", letterGrade )
assertTrue ( attributeDesc. isVersion ( ) )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5 ) ) )
assertEqualsIgnoreWhitespace ( expectedRuleModelDrl, actualRuleModelDrl )
Assert. assertEquals ( "SELECT * FROM " + tableName ( TestSetBasedEntity. class ) + " WHERE " + tableName ( "testset_basic_entity" ) + " AND " + tableName ( "testset_basic_set_2" ) + " AND " + tableName ( "testset_basic_set_3" ), sql )
assertEquals ( expResult, result )
assertEquals ( newValue, wrapped. get ( key ) )
assertEquals ( 0, paths. size ( ) )
assertThat ( mt. minus ( 999999999, SI. NANOSECONDS ), is ( MachineTime. ofSIUnits ( - 1, 1 ) ) )
Assert. assertEquals ( 183, mapper. updateByPrimaryKeyAll ( new Country ( ) ) )
assertThat ( filter. getIdResultName ( ), is ( "id" ) )
Assert. assertEquals ( "CumulativeLoss", loss_adareg, loss, 1e-5 )
assertFalse ( selected )
assertEquals ( parse ( "2*a^2+2*a^3+a^2*b+a^3*c+a^4", domain, LEX, vars ), r )
assertThat ( this. state. getSortColumn ( ), is ( equalTo ( sortColumn ) ) )
Assert. assertEquals ( result, expected )
assertFalse ( evaluator. shouldProxyHost ( "0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000:0000" ) )
assertThat ( restored. get ( ), is ( option. get ( ) ) )
Assert. assertEquals ( 5, gt. count ( ). next ( ). intValue ( ) )
assertThat ( PlainDate. of ( 2000, 12, 2 ). with ( model. weekOfMonth ( ). incremented ( ) ), is ( PlainDate. of ( 2000, 12, 3 ) ) )
assertEquals ( "id", new Function9 ( ). execute ( strategy ) )
assertEquals ( "Conversion did not match", value, to )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithMergeRegion_expected.xls" ) )
assertEquals ( "com.hortonworks.streamline.Floor.floor(x, 100.5) > 2.5", stormSqlExpression. createFunction ( "FLOOR", "com.hortonworks.streamline.Floor", ImmutableList. of ( "x", 100 ) ) )
Assert. assertNull ( RequesterContextHolder. getContext ( ). getClientId ( ) )
Assert. assertEquals ( "��浜��", result. toStringUtf8 ( ) )
assertEquals ( 2, post. getComments ( ). size ( ) )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThrows ( ( ) -> instance. matcherFor ( matcher ) )
assertEquals ( expected, actual )
Assert. assertTrue ( this. userService. getObject ( )!= null )
assertEquals ( tropo. text ( ), "{\\"tropo\\":[{\\"ask\\":{\\"choices\\":{\\"value\\":\\"[1 DIGIT]\\"},\\"say\\":[{\\"value\\":\\"Please say a digit\\"}],\\"bargein\\":true,\\"timeout\\":30.0,\\"required\\":true}}]}" )
Assert. assertEquals ( 5, orders. size ( ) )
assertSame ( val, ConfigUtils. getMap ( config, val, "no-value" ) )
assertEquals ( rule. toString ( ), event. getHeaders ( ). get ( "host" ) )
assertEquals ( expected, ColumnRanges. rangeAtNode ( compare ) )
assertThat ( byValue. getSingleResult ( ). getF ( ), equalTo ( f1 ) )
assertThat ( id, greaterThan ( 0 ) )
assertEquals ( "(| [= foo] [= bar] [= baz])", m. toString ( ) )
editor. assertHoverContains ( "@PutMapping(\\"/greetings\\")", "[https://cfapps.io:999/greetings](https://cfapps.io:999/greetings)  \\n" + "Process [PID=76543, name=`test-request-mapping-live-hover`]" )
assertEquals ( null, classUnderTest. isNullable ( ) )
Assert. assertEquals ( "Injection points are equal", dronePoint, dronePoint1 )
assertEquals ( CambriaConstants. kBasePath + "topic/cg/cid?timeout=100", url )
assertEquals ( Syntax. HTML, doc. outputSettings ( ). syntax ( ) )
assertThat ( comment, equalTo ( "Parameter comment on class C" ) )
assertThat ( modified, is ( expectedResult ) )
assertNull ( cursor. next ( ) )
Assert. assertEquals ( 2, message. getContent ( ). size ( ) )
assertEquals ( "-- delete ", sort. getOrder ( ) )
assertTestSuiteResults ( unpack, child )
Assert. assertEquals ( "this is the first line\\nthis is the second line", lines. get ( 0 ) )
Assert. assertEquals ( jsonString, JsonUtil. toJsonString ( aclStatusBuilder. build ( ) ) )
assertEquals ( false, result )
Assert. assertEquals ( 2.2, correlation. calcSampleVariance ( x ), 1e-5 )
assertThat ( thing, notNullValue ( ) )
assertEquals ( count, insert ( survey ). select ( param ). from ( survey2 ). select ( param ). fetch ( ). size ( ) )
assertEquals ( request. getRequestHeaders ( ), headers )
Assert. assertEquals ( - 1.0, correlation. correlation ( xArray, yArray ), Double. MIN_VALUE )
Assert. assertEquals ( "...(2)", result )
Assert. assertTrue ( p. matches ( new PatchMatcher ( "brown fox jumps" ) ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
assertEquals ( "Update car should return OK", OK, updateResponse. getStatusCode ( ) )
assertSame ( copied, obj )
assertTrue ( exportedFile. exists ( ) )
Assert. assertEquals ( option1, option2 )
assertEquals ( "3 啶膏う啶�啶むぞ啶� 啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
Assert. assertEquals ( result, cohort )
assertTrue ( String. format ( "[%s] should be valid.", coord ), validator. isValid ( coord, null ) )
Assert. assertEquals ( endereco, retorno. getEndereco ( ) )
assertEquals ( 2, context. getTableCount ( ) )
assertThat ( builder. getMessageId ( ), equalTo ( id ) )
assertTrue ( page. asText ( ). contains ( "MESSAGE 1 TEXT 2" ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 07" ) )
assertEquals ( res. getStatus ( ), Response. Status. CONFLICT. getStatusCode ( ) )
assertEquals ( resource, mockHttpRequestBuilder. get ( ). resource ( ) )
assertThat ( readBytes ( testee, 4 ), is ( "Hello|World|!" ) )
assertEquals ( 7, count )
Assert. assertSame ( managerFactory, AbstractDecorator. getOriginalDecoratedObject ( victim. getManagerFactory ( ) ) )
Assert. assertEquals ( 42., analyser. getServiceTime ( route ), 0.01 )
Assert. assertTrue ( dao. insert ( person ) )
assertXmlEquals ( control, response. getContentAsString ( ) )
assertEquals ( resolvedClassPaths, Collections. singletonList ( classpathDirectory. getAbsolutePath ( ) ) )
assertTrue ( sph. tryAcquire ( 1000, TimeUnit. MILLISECONDS ) )
assertFalse ( result. passedValidation ( ) )
assertEquals ( masterRoot, rootDir )
assertTriggered ( messageCountAlertCondition, result )
Assert. fail ( "should have thrown SQLFeatureNotSupportedException" )
assertAnnotations ( 1, Quantity. class, new TestQuantity ( 0, "4.3 million tonnes", 4.3, "million", 4.3 * uk. gov. dstl. baleen. annotators. regex. Weight. POUNDS_TO_KG, "kg", WEIGHT ) )
assertEquals ( 5, tokens. size ( ) )
Assert. assertEquals ( expResult, result )
assertEquals ( "Unassigned static field _staticAssVal is equal to 3", 3, unAssVar )
assertions. isNotEqualTo ( actual )
assertEquals ( chaincodeCollectionConfiguration. getName ( ), chaincodeCollectionConfigurationFromProto. getName ( ) )
assertEquals ( 6, dep. getForms ( ). size ( ) )
Assert. assertEquals ( "Delete_rows_v1", actual )
Assert. assertEquals ( expected, rows. next ( ). toString ( ) )
editor. assertProblems ( "sts4|Duplicate resource name", "utils|Duplicate resource name", "sts4|Duplicate resource name" )
Assert. assertFalse ( this. mocker. getComponentUnderTest ( ). hasAccess ( this. user, this. right, this. documentReference ) )
assertEquals ( found. size ( ), 4 )
Assert. assertEquals ( 0, ( int ) Iterables. next ( results, "test" ) )
Assert. assertEquals ( "Test this string", stringConstant. evaluate ( null ) )
Assert. assertFalse ( json. has ( DATA_NAME ) )
longs. assertLessThan ( description, actual, expected )
assertEquals ( 0x77777777, frame. getInt ( ) )
Assert. assertTrue ( "Incorrect renderer supplied", getWebXmlRenderer ( dropdown ) instanceof WMultiDropdownRenderer )
assertThat ( sut. getIndexOfCode ( 30 ), is ( 1 ) )
Assert. assertTrue ( ShareUserSearchPage. checkSearchResultsWithRetry ( drone, ADV_FOLDER_SEARCH, searchText, "House my 1", true ) )
assertEquals ( 5, content. split ( "\\n" ). length )
Assert. assertEquals ( - 1, i )
Assert. assertEquals ( scorer. scoreSplit ( a, b ), 0.0, 1E-7 )
assertTrue ( d. isUsingStatisticsManager ( ) )
assertEquals ( commit, gfs. getStatusProvider ( ). commit ( ) )
assertTrue ( hv > 0.65 )
assertThat ( xoManager. find ( D. class, "1" ). getSingleResult ( ), equalTo ( a1 ) )
assertOut ( "public final class A extends B implements IA, IB, IC {\\n}" )
assertTrue ( peerAcceptanceUtil. isConsumerInterestedOnRemoteWorker ( consumer1ID. getServiceID ( ) ) )
assertTrue ( componentSet. size ( ) == componentList. size ( ) )
assertEquals ( encoded1, encoded2 )
assertEquals ( "{\\"number\\":null,\\"string\\":null,\\"raw\\":null}", writer. toString ( ) )
assertEquals ( "Failed to generate do while loop with chained lhs", DOWHILE_CHAINED_RHS, s )
assertEquals ( "Base value is not properly parsed", "f1a2b3", parsed )
Assert. assertEquals ( 1, violations. size ( ) )
assertThat ( tags, contains ( TAG1, TAG2 ) )
Assert. assertEquals ( 2, testv. size ( ) )
assertEquals ( true, bm. isBitSet ( bitNumber ) )
Assert. assertEquals ( "{\\"foo\\":\\"bar\\",\\"xyz\\":[{\\"sub1\\":\\"sub2\\"},{\\"sub1a\\":\\"avalue\\"}]}", JsonUtil. toJson ( node ) )
assertTrue ( params. hasValue ( "a" ) )
assertTrue ( String. format ( "[%s] should be valid.", coord ), validator. isValid ( coord, null ) )
assertEquals ( 0, file. getReplica ( 1 ). getOsdUuids ( 0 ). size ( ) )
Assert. fail ( "Connection succeeded, but impersonation should be disabled." )
assertEquals ( "GS", child. getName ( ) )
assertEquals ( "Hello Spring MVC", response. getContent ( ) )
Assert. assertEquals ( sorted, sortedRules )
assertOut ( "width=\\"1.5\\"" )
assertInvocations ( invocations, "prepare", "commit" )
assertEquals ( expectForbid, newForbid )
assertTrue ( "time1!= time2", time1 > time2 )
Assert. assertEquals ( "SHOW GLOBAL STATUS LIKE 'Key%';", text )
assertSame ( camundaDatasourceMock, getDataSourceFromConfiguration ( ) )
assertEquals ( NOWHERE, dest. getAddress ( ) )
assertEquals ( MessageOut. TYPE_UNKNOWN, messageOut. getType ( ) )
assertThat ( vi. getValue ( ), is ( interval ) )
assertEquals ( sanitized, rewrite ( gadget, markup, set ( "img" ), set ( ) ) )
assertEquals ( "Value change provider should be fired", "null", getValue ( ) )
assertThat ( values, containsInAnyOrder ( "example.test1", "example.test2" ) )
assertEquals ( 250 + MOVE_COUNT * NUMBER, scores. getScore ( ) )
runner. assertValid ( service )
assertEquals ( button. getText ( ), "Save" )
assertEquals ( "<TimePosition/>", xmlWriter. getOutput ( ) )
Assert. assertNull ( reified )
assertThat ( conversionService. getConvertedType ( this. sourceType, targetType ), is ( equalTo ( ( Object ) this. sourceType ) ) )
assertMsg ( )
assertTrue ( "Expected the report to be generated", report. exists ( ) )
assertTrue ( cause. getMessage ( ). contains ( "No key found in key store" ) )
assertEquals ( "aTestString", classUnderTest. getVersion ( ) )
assertEquals ( expected, buf )
assertEquals ( VALUE, secondVictim. getValue ( KEY ) )
assertEquals ( value, maxByColumns [ 0 ], LARGEST_MIN_MAX_ERROR )
assertEquals ( getUuid ( ), service. getOrderByUuid ( getUuid ( ) ) )
assertThat ( Util. isNotEmpty ( message ), is ( false ) )
assertEquals ( "Wrong number of saved configurations", 1, checkConfig. getNumberOfConfigurationAt ( "element2" ) )
assertEquals ( 15, atAct1. get ( 0 ) )
assertEquals ( 0, distincted. size ( ) )
assertNotNull ( user )
Assert. assertEquals ( 0, trimmed. size ( ) )
assertEquals ( hashCode1, hashCode2 )
assertNull ( metadata. getPatientBirthDate ( ) )
assertNotEquals ( 0, tokenLists. size ( ) )
Assert. assertTrue ( "The XML are not similar " + xml, xml. equals ( expected ) )
AssertAnnotations. assertLemma ( lemmas, select ( jcas, Lemma. class ) )
assertTrue ( metaUncle. isAssignableFrom ( metaChild ) )
assertThat ( description. toString ( ), is ( "SomeClass {\\n" + "  baz(): SomeClass {\\n" + "    foo(): was <42>\\n" + "  }\\n" + "}" ) )
assertEquals ( entry. getValue ( ), DBValue )
assertions. containsSequence ( sequence )
assertEquals ( testPlatform. getId ( ), pValue. getId ( ) )
Assert. assertEquals ( "wrong message", "rubbish", test. getMessage ( ) )
Assert. assertEquals ( sampleSize, result. size ( ) )
Assert. assertEquals ( "abc", html )
assertTrue ( ns. isAnyUpdate ( ) )
assertThat ( target, is ( notNullValue ( ) ) )
assertEquals ( renderWithConflictShowingVersionResult ( ), result )
assertTrue ( detector. isKnsEnabled ( ) )
assertNotNull ( taskTO )
assertEquals ( "Line1 Line2 Line3", stringBuilder. toString ( ) )
assertEquals ( createUrl ( healthInfoInstances. get ( 0 ). Service. Address ), targetProvider. getTarget ( ) )
Assert. assertEquals ( 404, status )
assertEquals ( "A1=a, A2=b", selectionValue )
assertEquals ( exp, res. getDouble ( i ), 1e-5 )
Assert. assertEquals ( new URI ( "http://stuff@localhost:80/stuff?param=stuff#fragment" ), result )
assertNotNull ( order )
assertArrayEquals ( new char [ ] { 'a', 'b', 'c', 'n', 't' }, results )
assertEquals ( "Hello", ( ( BizExceptionNoDefaultConstructor ) read ). getMessage ( ) )
assertEquals ( 200, resp. statusCode ( ) )
assertEquals ( storageClass, options. getStorageClass ( ) )
assertEquals ( headers, newHeaders )
assertXpathExists ( "Absent certificate element", "/SOAP-ENV:Envelope/SOAP-ENV:Header/wsse:Security/ds:Certificate", document )
assertEquals ( false, result )
assertEquals ( 0, tasks. size ( ) )
Assert. assertNull ( ejbJarMetaData. getDistinctName ( ) )
assertNotNull ( runTest ( true ) )
assertNotNull ( in )
assertTrue ( easyCriteria. count ( ) > 0 )
Assert. assertNull ( "No se deber�a haber encontrado la aplicaci�n", aplicacion )
assertThat ( subjectOf ( axiom ), isOptionalOf ( individual ) )
Assert. assertEquals ( "xxx", name )
Assert. assertEquals ( "Date " + date + " was not correctly truncated to hours", dateTruncExpected, dateTruncActual )
Assert. assertNull ( job )
assertOut ( "a(false)" )
assertFalse ( listener. hasCalled ( TIMEOUT_MS ) )
Assert. assertNotNull ( newCfg )
assertEquals ( 1, parsers. size ( ) )
Assert. assertEquals ( ";;;text;stuff;heading1;heading2;;", writer. toString ( ) )
assertEquals ( o1, o2 )
Assert. assertTrue ( provider. getKeywords ( ). size ( ) > 0 )
assertEquals ( 587, result )
assertTrue ( result1 == result2 )
assertTrue ( expectedDirection. equals ( reflectedDirection ) )
assertNotNull ( actual )
assertEquals ( MAX_FETCH_I_EXCEPTION_COUNT, videoCapture. getiExceptionCount ( ) )
assertThat ( content, containsString ( "1 + 1 = 2" ) )
assertEquals ( "true", actual )
assertEquals ( Order. sellAt ( 1, NaN, NaN ), newTrade. getExit ( ) )
Assert. assertTrue ( testConfig. getPartitionWeightMap ( ). equals ( Collections. emptyMap ( ) ) )
assertNotNull ( ontology )
assertNotNull ( writer )
assertThat ( testUriStr, is ( expectedUriStr ) )
assertTrue ( rec_cnt == 1 )
org. junit. Assert. assertEquals ( expected, actual )
assertThat ( model. get ( "k" ), is ( "v" ) )
assertEquals ( "Wrong # of users found", 1, users. size ( ) )
assertEquals ( "Null reference count", 0, referenceCount. get ( ) )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
assertEquals ( 0, result. size ( ) )
assertEquals ( actualType, stepType )
Assert. assertNull ( to )
assertEquals ( 400, clientResponse. getStatus ( ) )
assertEquals ( "Input time zone not set when parsing as null", tz, pid. getInputTimeZone ( ) )
assertFalse ( SpriteUtils. isAliasSprite ( sprite1, sprite2 ) )
assertThat ( builder. getPatches ( ), hasItemsInOrder ( "REMOVE /status/conditions", "ADD /status/conditions/- {'message':'hello','status':'true'}", "ADD /status/conditions/- {'message':'hello','status':'true','reason':'because','reason':'because','status':'true'}", "ADD /status/conditions/- {'message':'hello','status':'true','reason':'trying','status':'true'}" ) )
assertTrue ( Arrays. equals ( s, singleEntry ) )
Assert. assertTrue ( str. contains ( "浣��块�璁㈠��" ) )
softly. assertAll ( )
assertThat ( driver. findElement ( By. id ( "item1" ) ). getText ( ), is ( "Item 1" ) )
assertEquals ( expectedMap, iteratedMap )
assertTrue ( stems. isEmpty ( ) )
BufferedImageAssert. assertMatches ( result, new float [ ] { 1, 1, 1, 1, 1, 1, 1, 0, 0 } )
assertEquals ( "dist job res is not 0:", 0, res )
assertThat ( optionsByType. get ( Timeout. class ), is ( sameInstance ( fiveMinutes ) ) )
assertFalse ( result )
assertEquals ( ids. getExternalIdentifier ( ). get ( 0 ). getNormalized ( ), "common-3.0" )
Assert. assertNotNull ( "Camel Context from classpath", camelctx )
assertEquals ( true, outcome. isFound ( ) )
assertEquals ( expectedQuery, actualQuery )
assertFalse ( property. toStringValues ( ). isEmpty ( ) )
Assert. assertEquals ( 3, result. intValue ( ) )
assertEquals ( result, "John,Jane,Adam,Tom" )
assertEquals ( "Expected another stopwords", TurkishAnalyzer. getDefaultStopSet ( ), stopwords )
assertEquals ( "foo", row. getItemProperty ( "TEXT" ). getValue ( ) )
assertThat ( ex, not ( nullValue ( ) ) )
Assert. assertNotSame ( account1. toString ( ), account2. toString ( ) )
assertEquals ( "application/octet-stream", contentType )
Assert. assertEquals ( "Delete_rows_v1", actual )
assertArrayEquals ( evenNumberOfFloatBandValues, strategy. getValues ( 0.0f, 1, 2, 3 ) )
Assert. assertFalse ( result )
assertThat ( status. getStoragePolicy ( ), is ( LAZY_PERSIST_POLICY_ID ) )
assertThat ( i, is ( 10 ) )
Assert. assertTrue ( attemptRulesByActionName. containsKey ( "test action name" ) )
mini. assertReadFile ( mini. getLocalFs ( ), fileSpec, "1;one", "2;two" )
assertions. doesNotContain ( values )
assertSkipped ( myTasks, 2, 3 )
Assert. assertEquals ( "Not null string", expectedBinaryString, bitmaskInBinaryString )
assertEquals ( 1, results. getMessages ( ). size ( ) )
assertThat ( info. getServerService ( SERVER ), sameInstance ( currentService ) )
assertEquals ( Integer. of ( 3 ), result )
assertNotNull ( response. getAccessToken ( ) )
assertTokens ( new IdentifierToken ( "x" ), Tokens. LP_CALL, Tokens. RP, comment ( "test" ) )
assertEquals ( "testing", removeSentenceDecorator. toDisplay ( ) )
assertEquals ( false, result )
assertFalse ( isEnabled )
Assert. assertEquals ( exp, TokenProvider. DEFAULT_EXPIRATION )
Assert. assertArrayEquals ( cmpAlignAndMeet, outAlignAndMeet )
assertFalse ( subject. isForceAll ( ). isPresent ( ) )
assertThat ( new String ( baos. toByteArray ( ) ), is ( data ) )
assertThat ( tuple. getCollection ( "field" ), equalTo ( value ) )
assertThat ( response, containsString ( expected ) )
assertTrue ( "Identity realm should be created", ops. exists ( TEST_IDENTITY_REALM_ADDRESS ) )
Assert. assertFalse ( "Ids should not be the same: ", deterministicId. equals ( deterministicId2 ) )
assertEquals ( expected, baseString )
assertThat ( emailAddress, matchesRegularExpression ( "^[0-9]{1,2}$" ) )
Assert. fail ( "Missing required input" )
Assert. assertEquals ( "select p.user_id from UserEntity p where p.user_name = :userId", ctx. getSqlStatement ( ) )
assertThat ( "abs-1.2.3", equalTo ( ( r ) ) )
assertNotNull ( target )
assertEquals ( state, actualState )
assertEquals ( "8 ��� ��", t. format ( new Date ( 0 ) ) )
assertThat ( client. getScope ( ). contains ( SystemScopeService. OFFLINE_ACCESS ), is ( equalTo ( true ) ) )
Assert. assertEquals ( router. getXQueryExecutor ( ). getResultType ( ), Router. ResultType. STRING )
assertEquals ( null, CollectionUtils. getByPath ( input, "-1" ) )
assertTrue ( isPersistent )
Assert. fail ( "should have failed" )
assertTrue ( closed. await ( 2, SECONDS ) )
assertEquals ( 3, service. getCustomFormatters ( ). size ( ) )
assertEquals ( Type. High, filterResult. getValue ( ) )
assertEquals ( AbstractPanel. class, renderer. getComponentClass ( ) )
assertEquals ( - 6, values. get ( new MultivectorComponent ( "out", 0 ) ), 10E-3 )
assertEquals ( LocalDate. of ( 1971, Month. JANUARY, 30 ), firstDayOfMonth )
assertNotNull ( result )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4 ) ) )
log. assertContent ( "" )
assertEquals ( 1L, query ( ). from ( employee ). where ( where ). fetchCount ( ) )
assertTrue ( op. quiet )
Assertion. assertEquals ( loadedDataSet, actualDataSet )
assertFalse ( v1. isCompatible ( v2 ) )
assertThat ( cls, is ( nullValue ( ) ) )
assertTrue ( startsWithHttp )
assertEquals ( "(& [* fo.*] [*.*oo] [= foo])", m. toString ( ) )
assertEquals ( 0L, volumeStates. documentCount. longValue ( ) )
assertTrue ( connection instanceof TransactionAwareConnection )
Assert. assertEquals ( revisions. size ( ), 2 )
assertTrue ( "Got an event listener", listener. isRemoved ( ) )
Assert. assertFalse ( accept )
Assert. assertEquals ( message, 0.0, error, 1E-10 )
assertEquals ( "Both filters should be invoked", 3, sizeWithUnfilteredQuery ( ) )
assertThat ( client. getHost ( ), equalTo ( "2375" ) )
assertEquals ( "http://localhost/", client. getBasePath ( ) )
assertEquals ( 265463 & 342, executeTestMethod ( test, Integer. class, null, 265463 ). intValue ( ) )
assertThat ( deleteCount, is ( 1L ) )
assertEquals ( "<r><i><v>&lt;p /&gt;\\n&lt;p /&gt;</v></i></r>", writer. toString ( ) )
assertScoreAndParse ( content, null, 1 )
assertTrue ( squaresCache. containsKey ( 6 ) )
assertEquals ( 0, list. size ( ) )
assertThat ( f. apply ( good_uris ), equalTo ( asList ( new URL ( "http://example.com/example_a" ), new URL ( "http://example.com/example_b" ), new URL ( "http://example.com/example_c" ) ) ) )
comparator. assertSelfLinesMatch ( )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
Assert. assertEquals ( want, sql )
assertEquals ( "ext", sub. getExtension ( ) )
assertThat ( result, is ( notNullValue ( ) ) )
assertEquals ( ImmutableList. of ( category1, category2 ), categories. getCategories ( ) )
assertThat ( results. length, is ( 4 ) )
assertEquals ( 2, tasks. size ( ) )
assertTrue ( dtoProductTypeAttr. getId ( ) > 0 )
Assert. assertEquals ( "Some Privilege", privilege. getName ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 03" ) )
assertEquals ( "fra 1 hores", t. format ( new Date ( 1000 * 60 * 60 * 1 ) ) )
assertThat ( headlineOf ( view ), is ( "1 build has failed since Ben, Connor and Daniel committed their changes" ) )
assertEquals ( read ( pom ), "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<project>\\n" + "    <!-- Repositories --> \\n" + "    <repositories>\\n" + "        <repository>\\n" + "            <id>other-id</id>\\n" + "            <name>other-name</name>\\n" + "            <url>http://repo.maven.apache.org/maven2</url>\\n" + "            <layout>default</layout>\\n" + "            <releases>\\n" + "                <updatePolicy>daily</updatePolicy>\\n" + "                <checksumPolicy>warn</checksumPolicy>\\n" + "            </releases>\\n" + "        </repository>\\n" + "    </repositories>\\n" + "</project>" )
assertNull ( value )
editor. assertProblems ( "red|Duplicate", "red|Duplicate", "green|Duplicate" )
assertEquals ( 2, context. getTableCount ( ) )
Assert. assertThat ( commercialFeaturesArgument, is ( nullValue ( ) ) )
Assert. assertEquals ( 65., tdCosts. getBackwardTransportTime ( loc ( "from" ), loc ( "to" ), 100., null, null ), 0.01 )
assertEquals ( expectedTimeout, clientOptions. getServerSelectionTimeout ( ) )
assertTrue ( valid )
assertEquals ( BuildState. SUCCESS, state )
assertThat ( result. toString ( ), is ( equalTo ( "HELLO" ) ) )
Assert. assertEquals ( 200, resp. getStatus ( ) )
assertEquals ( result, expecting )
assertTrue ( "permission was not granted.", updateUserPermission. isAllowed ( auth, 1L ) )
assertSame ( "Same object twice", m, m. with ( key, "val1" ) )
assertTrue ( mainServices. isSuccessfulBoot ( ) )
assertTrue ( "Hash is invalid", Arrays. equals ( SHA256_DIGEST. getBytes ( ), result. getBytes ( ) ) )
assertEquals ( "[(AppNode:test:0>4)>(file:test:6>11)]", sn. stringify ( true ) )
assertEquals ( 1.0, perims [ 0 ], 0.1 )
assertEquals ( 404, response. getStatus ( ) )
assertEquals ( 1, results. length )
Assert. assertNotNull ( "null objStat from retrieveCollectionAndDataObjectList", objStat )
assertEquals ( model, collection. getFirst ( ) )
Assert. assertEquals ( validator. validate ( EntityNames. STUDENT, studentIds ). size ( ), studentIds. size ( ) )
assertEquals ( 1, map. size ( ) )
assertEquals ( "ReadEntry", 0, recb. s. size ( ) )
Assert. assertEquals ( 4, network. getInputsCount ( ) )
assertDegenerate ( scan )
assertEquals ( exp, array1 )
Assert. assertEquals ( "{\\"stringValue\\":\\"\\"}", result )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( "Unexpected size observed", 1, fail. value )
assertEquals ( TEST_DATETIME. getUTCDateTime ( ), DateTimeUtil. getUTCDateTime ( datum ) )
assertEquals ( expectedValue, value. getValue ( 101L ) )
assertEquals ( 37.5, calc. getInsertionData ( route, job, nVehicle, 0.0, null, Double. MAX_VALUE ). getInsertionCost ( ), 0.01 )
assertFalse ( "Who has " + predicate + " in " + nameCollection, testee. whoHaveEInYourName ( nameCollection, predicate ) )
assertFalse ( aNumber. equals ( bNumber ) )
assertFalse ( proxy. isClosed ( ) )
Assert. assertEquals ( 1, countNumberOfOccurence ( fullyQualifiedName, "code" ) )
Assert. assertEquals ( reply, receivedReply )
assertEquals ( nodeName, node. getName ( ) )
assertNull ( val )
assertThat ( configuration. getColumnMappings ( ). size ( ), is ( 2 ) )
assertEquals ( "\\t\\t// e.g. : EasyMock.expect(mocked.called()).andReturn(1);\\r\\n		mocks.replay();\\r\\n", buf. toString ( ) )
assertEquals ( service. getSize ( new String [ ] { "", "", "" } ), 3 )
Assert. assertEquals ( 8, index )
assertEquals ( COMPONENT_LOCALE, locale )
assertThat ( banco. getAgenciaECodigoBeneficiario ( beneficiario ), is ( "1234/1234/12345678/9" ) )
Assert. assertEquals ( "DUMMY?x=y", PageWithParameterizedURL. class. getMethod ( "get" ). invoke ( Browser. get ( PageWithParameterizedURL. class ) ) )
assertEquals ( expected, actual )
Assert. assertEquals ( 6, size )
assertThat ( result. size ( ), is ( 0 ) )
assertEquals ( 5, paragraphElement. getElementCount ( ) )
assertThat ( cursor. asListRemaining ( ), hasItems ( "actors/Keanu", "actors/Hugo", "actors/Laurence", "actors/Carrie", "actors/Carrie", "actors/Carrie", "actors/Laurence", "actors/Carrie", "actors/Charlize", "actors/Carrie", "actors/Charlize" ) )
assertEquals ( "Value not set", VALUE, config. getString ( testKey ) )
Assert. fail ( "TimeoutException should have been thrown" )
assertThat ( Datastore. stringToKey ( encodedKey ), is ( key ) )
assertTrue ( renderEngine instanceof TcpRenderEngine )
assertTrue ( "marker is replaceable when it when timestamp after expiry", marker. isReplaceableBy ( 101L, null, null ) )
assertEquals ( HttpStatus. BAD_REQUEST, result. getStatusCode ( ) )
assertEquals ( "[1, 2, 3, 4, 5, 6, 7, 1, 5]", TreeNodeHelper. inorderTraversal ( root ). toString ( ) )
Assert. assertEquals ( "should have gotten the same user", addedUser. getName ( ), actualUser. getName ( ) )
assertPermanentCount ( playerA, "Eternalize " + anthem, 1 )
assertCheckScopesFailForOtherScopes ( ScopePathType. READ_PUBLIC, ScopePathType. PEER_REVIEW_READ_LIMITED )
assertArrayEquals ( data, value. getData ( ) )
assertTrue ( file. exists ( ) )
assertEquals ( count. longValue ( ), 1 )
assertEquals ( cfProvider. getConfiguredProperties ( ), ImmutableMap. of ( "connectionNameList", MULTIPLE_ACTIVEMQ_BROKERS ) )
assertEquals ( defaultIsolationLevel, IsolationLevel. TRANSACTION )
Assert. assertEquals ( BarcodeDataMatrix. DM_ERROR_INVALID_SQUARE, result )
assertOut ( "var /** @type {*} */ a = (a + b)" )
assertNull ( fetcher. getCredentials ( ) )
assertEquals ( "name1", id )
assertEquals ( new ExtendedPanId ( "123456789abcdef" ), dongle. getZigBeeExtendedPanId ( ) )
assertTrue ( result instanceof V8Function )
assertNotNull ( account )
assertIntersect ( ranges, "a:j:m:z", "j:m:z" )
assertEquals ( "[true,1.0,1.0,1.0,1,1.0,1.0,1,1,123,{\\"abc\\":123},{\\"value\\":1,\\"nul\\":[1,2,3],\\"a\\":null}]}", a. toString ( ) )
assertTrue ( list instanceof ArrayList )
assertNotNull ( att )
assertEquals ( "test", empty. getMessageType ( ) )
Assert. assertEquals ( 0, a. getCbo ( ) )
assertEquals ( "1", idCaptor. getValue ( ). getIdPart ( ) )
assertTrue ( validation. isSuccessful ( ) )
assertEquals ( geo, expResult )
Assert. assertEquals ( monitor1, monitor2 )
assertEquals ( "TextReader Should End of Text", 't', _textReader. read ( ) )
assertTrue ( runtimeTestComparator. compare ( runtimeTest1, runtimeTest2 ) < 0 )
assertEquals ( expected, actual )
AssertionUtils. multiAssertEquals ( createAsDocument10, response6. getResponseObject ( ) )
Assert. assertFalse ( matcher. acceptAll ( ) )
assertEquals ( "id", portResult. getComponent ( ). getId ( ) )
Assert. assertEquals ( "password/change/expired", view )
assertThat ( table. asString ( ), equalTo ( tableAsString ) )
assertTrue ( future. get ( ) )
assertEquals ( o, mockUser )
assertThat ( numbers, arrayContainingInAnyOrder ( 10, 15, 20 ) )
assertEquals ( toString ( expected ), toString ( actual ) )
Assert. assertTrue ( runner. contains ( task ) )
assertThat ( renderedProjectName, startsWith ( "test_prefix_test_projectname" ) )
assertThat ( result, is ( Arrays. asList ( "a", "b" ) ) )
assertPaths ( executionPaths, executionPath ( JCSwitch. class, JCBlock. class, JCExpressionStatement. class, JCExpressionStatement. class, JCExpressionStatement. class, JCReturn. class ), executionPath ( JCSwitch. class, JCTry. class, JCExpressionStatement. class, JCExpressionStatement. class, JCExpressionStatement. class, JCExpressionStatement. class, JCExpressionStatement. class, JCExpressionStatement. class, JCExpressionStatement. class, JCReturn. class ) )
paths. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE )
assertEquals ( "slaveName_1", helper. nextFreeIdentifierForResourceEditRelations ( relations, 21, StringUtils. EMPTY ) )
assertFalse ( service. publish ( "message" ) )
assertNotFound ( client. executePost ( "/foo", "{\\"key_a\\":\\"incorrect\\", \\"b\\":\\"incorrect\\"}", ContentType. APPLICATION_JSON ) )
assertEquals ( "tableName", database. escapeTableName ( null, null, "tableName" ) )
context. assertTrue ( result. isEmpty ( ) )
Assert. assertEquals ( Connection. TRANSACTION_READ_COMMITTED, connection. getTransactionIsolation ( ) )
Assert. assertEquals ( Integer. valueOf ( 10 ), value )
runner. assertAllFlowFilesTransferred ( SplitText. REL_FAILURE, 1 )
assertOut ( "var a:String = escape('http://whatever.com')" )
assertThat ( option, is ( new IntOption ( 100 ) ) )
assertEquals ( 98.765, empty. getHeadingToDestionation ( ), 0.1 )
assertThat ( errors, not ( hasFieldErrors ( "middleName" ) ) )
assertEquals ( version + 1, jobExecution. getVersion ( ) )
assertEquals ( 2, Solutions. bestOf ( solutions ). getRoutes ( ). size ( ) )
assertEquals ( 1, result )
assertThat ( cb. getForwardCallback ( ), sameInstance ( mockReplyCallback1 ) )
assertNull ( context )
Assert. assertEquals ( "The response status should be 403(Forbidden), if the file exists", 403, response. getStatusLine ( ). getStatusCode ( ) )
Assert. assertSame ( this. edit, this. mocker. getComponentUnderTest ( ). resolveAccessLevel ( "edit" ) )
assertThat ( method. getName ( ), is ( "isATestMethod" ) )
Assert. assertEquals ( 0.0d, singletest, 0 )
assertEquals ( j. error ( ), HawkError. EXPIRED. toString ( ) )
Assert. assertEquals ( 50, falsePositiveCount )
assertEquals ( 90, rotation )
Assert. assertTrue ( al. get ( j ). equals ( ft. get ( j ) ) )
assertEquals ( "modifystreamstream", output )
assertEquals ( true, out. firstElement ( ). get ( ) )
assertNotNull ( entity. getId ( ) )
assertEquals ( expected, elements )
assertTrue ( ARQ. isTrueOrUndef ( ARQ. optTopNSorting ) )
assertEquals ( expectedUsernamePasswordString, LdapUtils. getUsernamePasswordString ( username, password, domain ) )
Assert. assertEquals ( "abc_3 || abc_4 || abc_5 || abc_6 || abc_7 || abc_8 || abc_9 || abc_10 || abc_11 || abc_12 || abc_13 || abc_14 || abc_15 || abc_16 || abc_32 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_32 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_33 || abc_
assertThat ( NF. booleanNode ( true ), is ( sut ) )
assertThat ( results. hasNext ( ), equalTo ( false ) )
assertSuccess ( errors, wait, TimeUnit. SECONDS )
assertNull ( sut. execute ( new HashMap ( ) ) )
assertTrue ( rf. supportsMultiSpop ( ) )
Assert. assertEquals ( "{\\"@odata.context\\":\\"../$metadata#ESAllPrim(4242)/PropertyString\\"," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":null," + "\\"@odata.metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"TEST 1\\"}", resultString )
assertTrue ( p. isReadable ( InputStream. class, null, null, MediaType. valueOf ( "text/custom" ) ) )
Assert. assertEquals ( tree. getSize ( ), 1 )
assertEquals ( LazyInitRegistration. APPLICATION_CONTEXT, applicationContextMock )
Assert. assertTrue ( new JSONObject ( PEDIGREE_2_MIGRATED_DATA ). similar ( new JSONObject ( captured ) ) )
assertTrue ( entry. getValue ( ) == expectedResults. get ( future ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
assertEquals ( 1, list. size ( ) )
assertEquals ( 1, bankTagsPlugin. getTagValue ( ABYSSAL_WHIP ) )
assertEquals ( "123451234512345", entity. getId ( ) )
Assert. assertEquals ( "select pet_id_0 from t_pet pet_id_0", sql )
assertTrue ( server. canConnectToOtherServer ( now + 1000 ) )
assertNotNull ( notebook )
assertTrue ( FastMath. abs ( y. get ( InsideOutsideDepParse. ROOT_IDX, 0, 0 ) - 1.0 ) < 1e-8 )
Assert. assertEquals ( utf8, bos. toString ( ) )
assertNotNull ( foundVarArgsMethod )
assertThat ( writer. get ( ), is ( 2d ) )
assertTrue ( output. startsWith ( "<!DOCTYPE html>" ) )
assertEquals ( expected, actual )
assertTrue ( "Challenges with different id should be equal", challenge1. equals ( challenge2 ) )
assertEquals ( 2, result. size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 7, results. size ( ) )
Assert. assertEquals ( driver ( ). getTitle ( ), "We Arrive Here" )
Assert. assertEquals ( id, infoEventoManifestacaoDestinatario. getId ( ) )
assertEquals ( "Message: Tim", ResponseBodyInterpolator. interpolate ( "Message: [request.body]", req ) )
assertArrayEquals ( new char [ ] { '?', '?', '?', '?', '?', '?', '?' }, builder. getMask ( ) )
Assert. assertTrue ( false )
assertEquals ( DATE_VAL_b, p. getDate ( ) )
assertEquals ( DatabaseType. OTHER, type )
assertResultSet ( res, "testDistinctAggregation_case3.result" )
assertThat ( converter. toJavaObject ( new IntWritable ( 1 ) ), is ( ( Object ) 1 ) )
assertEquals ( dto, dto2 )
assertEquals ( "Base for strings is wrong", Integer. valueOf ( 3 ), parsed )
assertStoreDoesNotContain ( entities )
assertEquals ( expectedStringRepresentation, ind. toString ( ) )
arrays. assertIsSubsetOf ( someInfo ( ), actual, newArrayList ( "Yoda", "Yoda" ) )
Assert. assertFalse ( matcher. match ( rule, null, testNode ) )
assertEquals ( "Hello World Type! Sam", response )
assertEquals ( expResult, result )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3 ) ) )
assertEquals ( value, propertiesConfigurationProperties. getString ( key ) )
assertNull ( HtmlSanitizerUtil. sanitize ( html ) )
assertFalse ( dss. hasJs ( ) )
Assert. assertEquals ( "1", result )
assertSamples ( )
assertObjectEquals ( "{f1:'x1'}", p. run ( bs, in, sa ) )
Assert. assertEquals ( 2, result. size ( ) )
assertEquals ( expected, actual )
assertThat ( className, is ( "org.ebayopensource.junit.multilinestring.MultilineProcessor" ) )
assertEquals ( expected, actual )
assertThat ( unix ( instance, strategy ), equalTo ( "0.0.0.0" ) )
Assert. fail ( "an exception should have been thrown" )
assertEquals ( "<h1>one</h1><div>two</div><ul><li>three</li><li>four</li><li>five</li><li>six</li></ul>", actualResult )
assertEquals ( messagePage. getTotalPages ( ), pageCount, "Incorrect count of pages." )
assertEquals ( value, client. get ( KEY1 ). toCompletableFuture ( ). get ( ) )
assertEquals ( "1/m", u. toString ( ) )
assertEquals ( "https://sentilo.domain.org:80/mockResource?id=1", finalRedirectUrl )
assertEquals ( "{\\"some\\":\\"data\\"}", playerGames. get ( "player" ). getGame ( ). getSave ( ). toString ( ) )
Assert. assertEquals ( ContainerEntity. F1, n. getF1 ( ) )
assertEquals ( BatchStatus. FAILED, jobExecution. getBatchStatus ( ) )
assertEquals ( partitioner. getPartition ( partitioner, key1, key2 ), partitioner. getPartition ( partitioner, key2 ) )
assertTrue ( conn. isConnected ( ) )
assertEquals ( testValue + ".", actual )
Assert. assertEquals ( expected, actual )
assertThat ( vdl, is ( nullValue ( ) ) )
assertArrayEquals ( all, sm. getAll ( ) )
assertThat ( result, contains ( v_11 ) )
assertThat ( user. getPassword ( ), is ( "admin123" ) )
assertEquals ( expectedBody, consulResponse. getResponse ( ). getBody ( ) )
assertNull ( MultiParts. getContentType ( param ) )
assertEquals ( "Incorrect number of reservation in state", 0, info. size ( ) )
assertEquals ( Arrays. asList ( new Category ( ) ), mockResult. included ( "categories" ) )
assertThat ( page. getFooter ( ). getText ( ), containsString ( withBadCharacter ) )
Assert. assertEquals ( widgetSize + 1, jq ( ".zswidget" ). length ( ) )
assertEquals ( expected, actualQuery )
assertEquals ( gfs. getRootPath ( ) + "/some_file.txt", path. toString ( ) )
assertEquals ( 200, response. getStatus ( ) )
assertEquals ( expected, actual )
assertEquals ( - ROOK_PAWN_HANDICAP - ROOK_PAWN_HANDICAP, score )
assertEquals ( Type. CHAR, d. type ( ) )
assertNotEquals ( insertAction, retractAction )
Assert. assertNotNull ( response )
assertNotNull ( solver )
assertTrue ( resultMessage ( result, POST ), result. passedValidation ( ) )
assertThat ( target. parse ( ), is ( false ) )
assertEquals ( VerifyFailType. SORT, pluginParameters. verifyFailType )
assertThat ( jsonGeneratorParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/SentryStackTrace.json" ) ) )
assertEquals ( 30000, simulation. getLongestTotalSleepSequence ( ) )
assertTrue ( Pattern. matches ( "(?s).*START.*11-member 1.*11-member 2.*END.*", page. asXml ( ) ) )
assertNotNull ( resolved )
Assert. assertEquals ( 8, es. size ( ) )
assertEquals ( "{0}' hi", instance. formatMessage ( record ) )
assertEquals ( 0.0, result. getOccurrenceRatio ( ), 0.0 )
assertTrue ( syncWorker. isCold ( ) )
assertEquals ( ShardConsumerState. PROCESSING. consumerState ( ). state ( ), consumer. currentState ( ). state ( ) )
Assert. assertEquals ( "some [b]italic[/b] text", formatter. format ( "some [b]italic[/b] text", defaultOptions ( ) ) )
assertThat ( target. addLink ( link ), is ( true ) )
assertEquals ( "January [month]", translation )
assertSynchAll ( picker, date )
Assert. assertFalse ( validator. isValid ( "1234567890", context ) )
assertEquals ( expect, pred )
assertEquals ( expectedRestriction, restriction )
assertEquals ( "XML Equals", jdkXml, javolutionXml )
assertThat ( image, containsString ( "data:image/png" ) )
assertEquals ( expected, ld. getContentField ( "date" ) )
Assert. assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ ='me' GROUP BY `foo.bar`", sql )
assertFalse ( niciraActionDeserializerKey. equals ( obj ) )
assertEquals ( "Should return CREATED response with mementoDateTime header", CREATED. getStatusCode ( ), getStatus ( post ) )
assertEquals ( 0, registry. size ( ) )
assertEquals ( "9f4c8a7d3e0c84a4e0f9c7a7f0f9e9c7a0f9a7c7a", computeTMTextUnitMD5 )
assertEquals ( expected, actual )
assertEquals ( expectedResult, result )
assertThat ( parsed. hasQuery ( ), is ( false ) )
assertEquals ( 6, count )
assertEquals ( "((key!='stringgoodbye') OR (hello!='stringgoodbye'))", jexl )
Assert. assertTrue ( scriptFile. exists ( ) )
assertThat ( subject. supports ( update ), is ( true ) )
assertThat ( job. getDuedate ( ), is ( removalTime ) )
assertNotNull ( response )
assertEquals ( getMessage ( MessageKeys. E_TR_INVALID_INPUT_VALUE ), driver. findElement ( By. id ( "messages" ) ). getText ( ) )
Assert. assertEquals ( THIRTEEN_INTEGER, pi. getThirteenInteger ( ) )
assertThat ( backend. copyToMap ( ), hasKey ( TraceeConstants. INVOCATION_ID_KEY ) )
assertThat ( address2. equalsContent ( address1 ), is ( false ) )
assertEquals ( "randomSHA512Crypt() did not call the thread local random string.", SHA512_CIPHER_SHA512_STRING, new RandomSha512Crypt ( threadLocalRandom. getBytes ( ) ). call ( ) )
Assert. assertTrue ( matches )
assertEquals ( expected, actual )
Assert. assertEquals ( "failure - expected to be OK", 404, status )
assertNotNull ( service )
XmlAssert. assertEquals ( EXPECTED_XML_RESPONSE, xmlResponse )
assertEquals ( 0, builder. getProcessInstance ( ). getEntry ( ). size ( ) )
Assert. assertEquals ( tuple, deserializedTuple )
assertEquals ( "1 & 2 & 3", generate )
Assert. assertNotEquals ( date, entity. getLastModified ( ) )
assertFalse ( lock. lock ( ) )
assertEquals ( hasNextField. get ( reader ), true, "hasNext field should be set to TRUE" )
assertEquals ( "my-very-first-param and second_param_123 or something", result )
assertRequest ( "DELETE", "Conference/%s/", conferenceId )
Assert. assertEquals ( 0, t1. compareTo ( t2 ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService.", result )
assertThat ( restored. get ( ), is ( option. get ( ) ) )
assertThat ( axioms. isEmpty ( ), is ( true ) )
assertTrue ( result. isSuccess ( ) )
assertIsSemver ( semver, version, 1, 2, null, new String [ ] { "beta", "11" }, "sha.0nsfgkjkjsdf" )
Assert. assertTrue ( offsetwaiter. tryWaitfor ( new HostPort ( host, port ), masterInfo, executionLog ) )
assertEquals ( multicron, cron. asString ( ) )
Assert. assertEquals ( 1, result. getEntities ( ). size ( ) )
assertEquals ( 86399., Time. parseTimeToSeconds ( time ), 0.01 )
assertTrue ( a. compareTo ( b, fieldComparators ) == 0 )
Assert. assertEquals ( config. getHashAlgorithm ( ), newVal )
Assert. assertEquals ( new DoubleMatrix ( SOL_33_EXPECTED ), SOL_33_ACTUAL_ABS )
assertFalse ( result )
assertEquals ( childProject1. getCombinationFilterChildValue ( ), childCombinationFilter )
Assert. assertNotNull ( pojo. testManager )
Assert. assertSame ( TableTestUtils. ACTUAL_2, actual )
assertEquals ( "Hello ^^there", ResponseBodyInterpolator. interpolate ( "Hello ^^there", req ) )
assertTrue ( selector. isCountable ( MockWebContext. create ( ) ) )
assertEquals ( 2, spec. getModulePrefs ( ). getMessages ( ). size ( ) )
assertEquals ( "", encryption )
Assert. assertEquals ( "Incorrect heading set", heading, group. getHeading ( ) )
assertEquals ( "Expected 4 results!", 4, n )
assertEquals ( Quantity. KG, u. get ( ) )
assertEquals ( 0, impl. getArgumentIndex ( ) )
assertEquals ( result. size ( ), 1 )
assertEquals ( 0, empty. getCategoryCount ( ) )
assertFalse ( result )
assertEquals ( 2, hitCount )
assertEquals ( "x.contains('name')", c. toString ( ) )
assertArrayEquals ( plaintext, result )
assertTrue ( result. isLeft ( ) )
assertFalse ( tQuery. containsRowWithKey ( 0 ) )
assertEquals ( wrappedTemplate + " LIKE?", test. build ( ) )
Assert. assertEquals ( actualMav, null )
assertEquals ( 2, list. size ( ) )
assertEquals ( LOGIN_URL, response. getRedirectedUrl ( ) )
assertEquals ( 10, reportsCount. get ( ) )
assertEquals ( new int [ ] { 1, 1, 1, 1, 1, 1, 0, 0, 0 }, figure. getRowCodes ( ) )
assertEquals ( EntityNameCharType. BOUNDARY, type )
Assert. assertEquals ( customParams, an. getCustomParam ( ) )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertEquals ( "CONCATENATE(${0}, ${1}, ${2}, ${3})", ExpressionFieldAction. process ( action, Arrays. asList ( "1", "2", "3" ) ) )
mockery. assertIsSatisfied ( )
assertEquals ( "01880100DC880B", address. toString ( ) )
assertTrue ( clientv2. isResultSet ( res ) )
assertEquals ( "thumbnail.filename.middle.jpg", filename )
assertTrue ( report. getReportLines ( ). isEmpty ( ) )
Assert. assertEquals ( xmlEsperado, icmsst. toString ( ) )
assertEquals ( expected, returnedStatement )
assertEquals ( "Wrong content", CONTENT, content. getContent ( ) )
Assert. assertNotNull ( jis. getManifest ( ) )
assertSame ( expr. accept ( visitor ), visitResult )
assertEquals ( asList ( new File ( "/opt" ), new File ( "/var" ) ), nonOptions. values ( options ) )
assertThat ( Visitors. readable ( query ), is ( "SELECT selector1.* FROM nt:unstructured WHERE selector1.[jcr:uuid] IS NOT NULL ORDER BY NAME(selector1) ASC NULLS LAST" ) )
assertEquals ( 100.0, g. getLength ( ), 0.001 )
Assert. assertTrue ( output. contains ( "type Person<number>" ) )
Assert. assertEquals ( path, ".." + File. separatorChar + ".." )
assertEquals ( NaCl. Sodium. CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE, result. length ( ) )
assertFalse ( "No Longer Contains Test1", _fastTable. contains ( "Test1" ) )
assertNotNull ( join )
assertTrue ( got. contains ( "Enabled service account:" ) )
Assert. assertTrue ( instantiatorResource. meetsQuantitativeRequirements ( request ) )
assertEquals ( "name", e. getName ( ) )
assertEquals ( 404, responseGet. getStatus ( ) )
assertThatSelectedItemIs ( 20 )
Assert. assertNotNull ( json )
assertEquals ( 41, p. getAge ( ) )
assertThat ( project. property ( "asakusafw.version" ), is ( "TESTING" ) )
assertThat ( seleniumQueryObject. toString ( ), is ( selector ) )
assertValidReplaceKind ( repositoryRoot, revision, SVNNodeKind. DIR )
Assert. assertEquals ( 1, Context. getSearchIndex ( ). getPatients ( ). size ( ) )
assertEquals ( str, str2 )
assertEquals ( "Locations should be the same even though they were not preserved", l, r )
assertContains ( "<p class=\\"slide-content\\"><b>Now</b></p>", result. xml )
mock. assertIsSatisfied ( )
assertEquals ( "http://www.eu.com/services/rest/v1/ship", asyncClient. getRequestUri ( ) )
Assert. assertEquals ( numeroNFInicial, dados. getNumeroNFInicial ( ) )
Assert. assertEquals ( 201, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertThat ( actual, containsString ( "<description>descr-custom</description>" ) )
Assert. assertEquals ( 128, iStack. size ( ) )
assertNull ( "The appender should be null.", appender )
ConcurrentTestUtil. assertConcurrent ( "Preview dialog creation failed", runnables, TEST_TIMEOUT )
assertEquals ( money ( "2.00", USD ), accountBalance. getBalance ( ) )
assertEquals ( 1, results. getMessages ( ). size ( ) )
assertArrayEquals ( expected, actual )
assertArrayEquals ( original, ArrayUtils. nullToEmpty ( original ) )
assertEquals ( Collections. emptyList ( ), dto. getUserContacts ( ) )
assertEquals ( Arrays. asList ( parent1, parent2 ), instance. getAllParents ( ) )
Assert. assertEquals ( "handle = MethodHandles.foldArguments(handle, Fold.FUNCTION_JAVA);", toJava )
Assert. assertEquals ( Time. class, provider. getConverter ( Time. class, null, null, null ). getClass ( ) )
assertEquals ( - 1, ret )
assertFalse ( milestoneService. isInSyncTestScan ( ) )
assertEquals ( sv. getString ( context. getValue ( ) ), provider. getString ( context. getValue ( ) ) )
assertEquals ( exp, matrix )
assertFalse ( action. shouldHandle ( flaggable ) )
assertTrue ( "Observation types list is empty", list. size ( ) > 0 )
assertEquals ( expResult, result )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( orginalCollection, set. getNames ( ) )
Assert. assertTrue ( evictor instanceof MaxFreeAllocator )
assertEquals ( expectedMap, map )
Assert. fail ( )
assertTrue ( lineage. isSimplest ( ) )
assertRowCount ( results, 1 )
assertEquals ( rule, rule, 1.0e-8 )
assertNotNull ( object )
assertEquals ( 1, rpt. size ( ) )
assertEquals ( "<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil. stripNewlines ( cleanHtml ) )
assertNotNull ( streamable )
assertEquals ( Arrays. asList ( "BA", "BB", "A", "C", "D" ), result )
Assert. assertEquals ( expResult, result )
assertEquals ( optionsComputed, optionsGiven )
assertEquals ( "{}", actual. getExtra ( ) )
assertEquals ( "Nummisuutarit", document. get ( "title" ) )
assertEquals ( stage, c. completable. whenFailed ( consumer ) )
Assert. assertTrue ( false )
assertThat ( options. getCredentialsProvider ( ), is ( URI. create ( "https://host:port/somepath" ) ) )
Assert. assertEquals ( 2, jobs. size ( ) )
assertThat ( mock. initialDelay, is ( 0L ) )
assertEquals ( "1", result )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.B = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.B', org.apache.royale.B);\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo1 = function() {\\n  return null;\\n  };\\n\\n\\n/**\\n * @export\\n * @param {Object} param1\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.foo2 = function() {\\n  return null;\\n};\\n\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.B.prototype.bar2 = function() {\\n  return null;\\n};\\n\\n\\n/**\\n * @
assertEquals ( AmberAlertStrip. class, alertStriper. getClass ( ) )
assertEquals ( new Integer ( 2147483647 ), result )
assertMockEndpointsSatisfied ( )
assertThat ( logger1, is ( logger2 ) )
assertEquals ( 1, container. getHandlers ( ). size ( ) )
assertTrue ( STRATEGY. shouldTerminate ( context ) )
assertSame ( entityA. getEnumProperty ( ), copy. getEnumProperty ( ) )
assertEquals ( hll. cardinality ( ), hll2. cardinality ( ) )
assertThat ( dbms. getId ( ), equalTo ( expectedId ) )
assertThat ( actualResponse, equalTo ( response ) )
assertTrue ( failedAsExpected )
assertNull ( id )
objects. assertHasAllNullFieldsOrPropertiesExcept ( INFO, jedi )
assertThat ( location, is ( nullValue ( ) ) )
assertEquals ( "IdentifierLabel", resource. getIdentifier ( ). get ( 0 ). getValueAsString ( ) )
assertThat ( read ( format, written ), contains ( true ) )
Assert. assertEquals ( expected. toString ( ), new TreeSet < String > ( policy. getAllPrivileges ( set ( "other_group" ), ActiveRoleSet. ALL ) ). toString ( ) )
assertMandatoryElements ( targetProduct, false )
assertChildrenInclude ( branches, "master" )
Assert. assertEquals ( 1, result. size ( ) )
assertTrue ( "Wrong class names were passed to the factory", classesPassedToFactory. contains ( config. getClass ( ) ) )
Assert. assertFalse ( "Invalid result [" + result + "]", result )
assertEquals ( MockHttpServletResponse. SC_OK, response. getStatus ( ) )
assertEquals ( "", "" + swct )
Assert. assertEquals ( "cde", test. getBuffer ( ) )
assertEquals ( Boolean. FALSE, e. getEnableCounting ( ) )
Assert. assertTrue ( this. manager. delete ( this. doc ) )
assertThat ( kryo, is ( notNullValue ( ) ) )
assertTrue ( res. equals ( result. toString ( ) ) )
assertThat ( nextSubscribeCaptor. getValue ( ). getSubscriptionName ( ), equalTo ( subscription ) )
assertBody ( new TestBody ( expected ) )
assertEquals ( BuilderFactory. start ( ). add ( "a", 123456789L ). build ( ), doc )
assertThat ( confirmation. getConfigurationKey ( ), equalTo ( keyValueType ) )
assertEquals ( childProject1. getTouchStoneCombinationFilter ( ), childCombinationFilter )
assertArrayEquals ( expResult, result )
assertEquals ( "Simple Content", metadata. get ( TikaCoreProperties. TITLE ) )
assertEquals ( jobTrackerPort, namedClusterBridge. getJobTrackerPort ( ) )
TestCase. assertEquals ( HttpStatus. SC_OK, response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( eDate, cDate )
Assert. assertTrue ( "Best point not reported", f. value ( sol ) <= f. value ( expected ) )
rule. assertScenarioEnded ( )
assertFalse ( order. hasSameOrderableAs ( otherOrder ) )
assertTrue ( true )
assertTrue ( resultMessage ( result, POST ), result. passedValidation ( ) )
Assert. assertEquals ( 2, set. size ( ) )
assertions. isNotLessThan ( new Float ( 10f ) )
assertTrue ( definitionService. isAValidPerspectiveDefinition ( mock ( ActivityDefinition. class ) ) )
Assert. assertEquals ( "Delete_rows_v1", actual )
assertEqualsIgnoreWhitespace ( drl, actualDrl )
assertTrue ( "Editable owner ACE for UID1 should be equal to expectedOwnerAccessControlEntry", store. isEditableOwnerAccessControlEntry ( UID1 ) )
assertEquals ( "The job failed", LauncherStatus. COMPLETED, AddOneServerTask. run ( args ) )
Assert. assertEquals ( reqTotal + 1, ratisMetricRegistry. counter ( RATIS_GRPC_METRICS_REQUESTS_TOTAL + GrpcServerMetrics. getHeartbeatSuffix ( heartbeat ) ). getCount ( ) )
assertThat ( fieldDefinition. createElement ( actual ), Is. is ( expected ) )
assertEquals ( 400, status. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( expected, msg )
assertTrue ( list. equals ( plist ) )
assertFieldValues ( new String [ ] { "id", "title" }, showView. getFieldValuesExcludingId ( ) )
assertTrue ( dependentService. getValue ( )!= null )
assertThat ( results. getTotalElements ( ), equalTo ( 1L ) )
assertThat ( matcher. matches ( list ), is ( true ) )
assertEquals ( g1, g2 )
Assert. assertEquals ( 2, i )
assertFalse ( matches )
out. assertIsSatisfied ( 2L, TimeUnit. SECONDS )
assertNotNull ( post )
assertEquals ( 80.0, r. getUpperBound ( ), 0.00001 )
arrays. assertDoesNotContain ( description, actual, value, index )
assertTrue ( sqsConnection. isClosed ( ) )
assertEquals ( 1, messages. size ( ) )
assertFalse ( set1. equals ( set2 ) )
assertNotNull ( organizacion. getId ( ) )
assertEquals ( "a<V>\\n", found )
assertNotEqualsBothWays ( one, two )
assertThat ( catalogue. allAttributes ( ). keySet ( ), hasItems ( "getA", "isB", "getC" ) )
assertThat ( PrettyTime. of ( Locale. US ). withLastListSeparator ( " + " ). withLastListSeparator ( " + " ). print ( duration, TextWidth. WIDE ), is ( "1 year 2 months" ) )
assertTrue ( "The subject should have been removed", result1 )
assertFalse ( process. isExitOnStandardFault ( ) )
assertEquals ( ExpressionFactory. dbPathExp ( "artistArray.toGallery" ), translatedExpression )
assertOut ( "var /** @type {XML} */ a = XML.conversion('@')" )
assertThat ( getCreatedPodSpecContainer ( ). getEnv ( ), allOf ( hasItem ( createConfigMapKeyRefEnvVar ( "VARIABLE1", "my-env", "VAR1" ) ), hasItem ( createSecretKeyRefEnvVar ( "VARIABLE2", "my-secret", "VAR2" ) ), hasItem ( createFieldRefEnvVar ( "MY_NODE_IP", "status.hostIP" ) ) ) )
assertTrue ( bugs. toString ( ), bugs. isEmpty ( ) )
assertEquals ( "Same reference not found", "a", report. beanId1 )
Assert. assertEquals ( expected, widgetFromService )
Assert. assertEquals ( Arrays. asList ( new String [ ] { "4" } ), b. getStrings ( ) )
assertTrue ( eq. interpret ( Version. valueOf ( "1.0.0" ) ) )
Assert. assertEquals ( expectedResponse, proxy. sayHello ( message ) )
assertTrue ( actual. isItems ( ) )
assertEquals ( expResult, result )
assertEquals ( NOT_DECODED, true, object. useNetwork ( ) )
assertEquals ( 15, atAct2. get ( 0 ) )
TestUtil. assertEquals ( exp, spans )
assertTrue ( width == 100 )
assertEquals ( HttpResponseStatus. FORBIDDEN, responseImpl. getStatus ( ) )
assertEquals ( actual, expected )
Assert. assertEquals ( 1, savedRow )
assertNull ( deliverer )
Assert. assertTrue ( cover. getBoundaries ( ). getY ( ). getMax ( ) > TEST_MODEL. getBoundaries ( ). getX ( ). getMax ( ) )
assertEquals ( "Join: {\\"node\\":{\\"id\\":\\"node1\\",\\"value\\":\\"join1\\"},\\"headers\\":{\\"value\\":\\"urn:xmpp:join:1\\"},\\"text\\":\\"test\\",\\"length\\":1000}}", text )
Assert. assertNotNull ( product )
assertFalse ( "Rules with different priority cannot be equal", r1. equals ( r2 ) )
assertEquals ( expected, result )
assertArrayEquals ( BufferUtils. getIncreasingByteArray ( ( int ) BLOCK_LENGTH ), b )
assertEquals ( age, patient. getAge ( ) )
assertTrue ( latch. await ( 3, TimeUnit. SECONDS ) )
Assert. assertEquals ( resourceContent, writer. toString ( ) )
assertThat ( "Sequence range was not invoked after the first update", invokedTimes. get ( ), is ( 0 ) )
Assert. assertTrue ( queryResult. getSize ( ) > 0 )
assertThat ( NF. textNode ( "foo" ), is ( sut ) )
assertEquals ( "GBP 1.11", test. toString ( ) )
arrays. assertIsSubsetOf ( someInfo ( ), actual, newArrayList ( "Luke", "Yoda" ) )
assertEquals ( 0, bpt. getOutputError ( ). getTotalNetworkError ( ), 0.1 )
assertMessages ( "read", 3, "readCbuf" )
assertEquals ( "at 5/6\\n" + "at 5/6\\n" + "at 7/8\\n" + "at 9/2 10/2 2017", descriptor. describe ( cron ) )
assertEquals ( SchemaFromInd2AndSubfield2. class, field. getDefinition ( ). getFieldIndexer ( ). getClass ( ) )
assertThat ( crawlRules. getWaitAfterReload ( ), is ( 123L ) )
Assert. assertEquals ( 1, response. getTotalHits ( ). value )
assertEquals ( "Expected 1 result!", 1, count )
assertEqualsWithoutWhiteSpaces ( "asd(1,0,1)", testSubject )
assertEquals ( expected, replaceAclEntries ( existing, aclSpec ) )
assertEquals ( OP_PROP_VALUE, parsed. getOperationName ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( 0., analyser. getWaitingTime ( route ), 0.01 )
assertEquals ( p1, p2 )
Assert. assertEquals ( "Mismatch between start and end dates", 1.0, daycountFractionICMA, DELTA )
assertEquals ( "test", profileProperties. getProperty ( "test" ) )
assertFalse ( alive )
assertEquals ( 5, commission, 0 )
assertInstanceOf ( SwapMoveSelector. class, moveSelector )
assertEquals ( asList ( error ( mdcValues, marker, throwable, message ) ), testLogger. getLoggingEvents ( ) )
assertThat ( content. getTitle ( ), notNullValue ( ) )
Assert. assertNotNull ( controllerResponse )
Assert. assertEquals ( state, updates. getSyncState ( userName, folderId ) )
assertThat ( backtrace, hasItem ( "at airbrake.Exceptions.newException(java.lang.Throwable: newException())" ) )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
Assert. assertEquals ( true, agent. detectIpod ( ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
Assert. assertEquals ( count, ctr. getCount ( ) )
assertFalse ( output, output. contains ( uuid ) )
assertEquals ( expected, ex. getMessage ( ) )
assertEquals ( new org. apache. http. client. utils. URIBuilder ( SERVICE_ROOT + "/Products(5)" ). addParameter ( "$expand", "ProductDetails(ProductInfo(ProductInfo(Price))" ). addParameter ( "$select", "Price" ). build ( ), uri )
Assert. assertEquals ( 1, ( int ) reporter. getProblemCounters ( ). get ( Code. FIELD_NO_LONGER_STATIC. code ( ) ) )
assertEquals ( 1, events. size ( ) )
throwables. assertHasMessageMatching ( info, actual, REGEX )
Assert. assertEquals ( 24, concept. getId ( ). intValue ( ) )
assertEquals ( 2, tdefsRes. getBody ( ). length )
assertTrue ( page. asText ( ). indexOf ( "This is coming from a composite component." )!= - 1 )
assertEquals ( expResult, result )
assertEquals ( value, result )
Assert. assertTrue ( true )
assertEquals ( expectedAst, ast. dump ( "" ) + "\\n" )
assertEquals ( "Find by UoM label not returning a list with one reading", 1, readings. size ( ) )
assertOut ( "/**\\n * @fileoverview\\n */\\n" + "RoyaleTest_A.prototype.foo = function() {\\n" + "  RoyaleTest_A.base(this, 'foo');\\n" + "  RoyaleTest_A.base(this, 'foo');\\n" + "  RoyaleTest_A.base(this, 'foo');\\n" + "  RoyaleTest_A.base(this, 'foo');\\n" + "};\\n" + "\\n" + "\\n" + "/**\\n" + " * Prevent renaming of class. Needed for reflection.\\n" + " */\\n" + "RoyaleTest_A.prototype.foo = function() {\\n" + "  RoyaleTest_A.base(this, 'foo');\\n" + "  RoyaleTest_A.base(this, 'foo');\\n" + "};\\n" + "\\n" + "\\n" + "/**\\n" + " * Prevent renaming of class. Needed for reflection.\\n" + " */
assertNotNull ( stream )
assertThat ( qualityResult. getMeasurement ( ), is ( coverageMeasure ) )
assertEquals ( "fail", thrown. getMessage ( ) )
assertEquals ( propMatch, properties )
assertEquals ( "image/gif", httpResponse. getHeader ( "Content-Type" ) )
Assert. assertEquals ( "subsystem=test/resource=name", s )
assertEquals ( expectedForceObject, tree. getFirst ( ) )
Assert. assertEquals ( setOf ( sA, sB ), fromDependencies )
assertEquals ( 29, result. size ( ) )
assertEquals ( functionImportList. size ( ), VARIANT )
assertEquals ( "@|bold Hello|@", str )
assertTrue ( s. isSentToRawPubKey ( ) )
assertNotNull ( Deencapsulation. getField ( jobsResponseParser, "updateTwin" ) )
assertThat ( ( TraceeBackend ) FieldAccessUtil. getFieldVal ( interceptor, "backend" ), is ( Tracee. getBackend ( ) ) )
assertEquals ( expected, actual )
Assert. assertTrue ( handle )
assertEquals ( 1, tableDesc. getPrimaryKeyDescList ( ). size ( ) )
assertTrue ( voter. voteMatch ( affiliation, organization ) )
assertEquals ( - 1., activityState, 0.01 )
Assert. assertEquals ( expectedString, resultString )
Assert. assertEquals ( "sub-class-name", created. get ( "name" ) )
assertNotNull ( reportExecTO )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
assertLinkWithPoolgroupsOk ( poolgroups )
assertEquals ( id3v1Tag, wrapper. getId3v1 ( ) )
assertNull ( classUnderTest. getStatusBarFontInfo ( ) )
assertNotNull ( bar )
assertThat ( issue. toString ( ), is ( "foo.js:1:1:you broke it" ) )
assertThat ( result, is ( nullValue ( ) ) )
Assert. assertEquals ( "�驻�� 3 砖注�转", t. format ( new Date ( 0 ) ) )
assertEqualsSet ( "DataOneOf.rdf", ax, Declaration ( DP ) )
assertFalse ( result )
assertEquals ( "!ys111\\n", sWriter. toString ( ) )
Assert. assertNotNull ( factory. create ( ) )
assertEquals ( Status. DEADLINE_EXCEEDED. getCode ( ), status. getCode ( ) )
assertNotNull ( result )
assertNotNull ( "WorkersCompensationRate is null", entity )
assertNotNull ( Mobile. reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertTrue ( d_pm. getCriterionEnabledModel ( ExampleData. buildEndpointHamd ( ) ). getValue ( ) )
assertThat ( result, is ( nullValue ( ) ) )
assertEquals ( expecteds, actuals )
assertEquals ( AuthorizationResult. Decision. PERMIT, result. getDecision ( ) )
assertions. isNotLessThan ( expected )
assertEquals ( 0, tasks. size ( ) )
assertSerializedEquals ( c )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert. assertEquals ( "", result )
assertEquals ( s_expected_1, Hex. toHexString ( item1. getData ( ) ). toUpperCase ( ) )
Assert. assertEquals ( "result", testBean. getResult ( new MockObject ( true ) ) )
assertEquals ( exp, act )
assertions. isNotEqualTo ( actual )
assertNotNull ( AvailableAddOnExtension. reader ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertEquals ( componentName, "${componentNameClass}" )
assertTrue ( e. getMessage ( ). contains ( badCell ) )
assertThat ( isValid, is ( true ) )
assertTrue ( mutationsOccurred. get ( ) )
assertTrue ( check ( path, namespace, files ) )
assertEquals ( expected, result )
assertEquals ( HttpStatus. SC_NOT_FOUND, response. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( expected, actual )
assertEquals ( Status. ERROR, status )
assertEquals ( subsection, section. getConfigurationSection ( key ) )
assertTrue ( result. size ( ) >= 1 )
assertEquals ( statisticsController. getPlayer1winnings ( ), 1 )
assertEquals ( "", result )
assertEquals ( out. readableBytes ( ), 0 )
Assert. assertEquals ( 174, readValue )
assertThat ( sampleEntity1, is ( equalTo ( sampleEntity ) ) )
assertCharsets ( JodaBeanSer. PRETTY, json, bean, Address. class )
assertEquals ( "Good Morning!", hello. sayHello ( ) )
assertEquals ( - 1, testApp. executeApplication ( args ) )
assertTrue ( places. hasNext ( ) )
assertEquals ( "No errors", 0, errors. size ( ) )
Assert. assertEquals ( TEST_BLOCK_COUNT, number )
assertTrue ( global. equals ( v8. executeObjectScript ( "global" ) ) )
assertFalse ( cassandraService. isRunning ( ) )
assertEquals ( "璁＄����璇�", 1, rs )
assertEquals ( 255, buffer. getInt ( 0 ) )
assertEquals ( 2, instance. getFeatures ( ). size ( ) )
assertEquals ( expResults, results )
assertEquals ( expected, test )
assertEquals ( expected, actual )
assertEquals ( "S3A_OL_1_EFR____20181001T022958_20181001T023258_20181002T090807_0179_036_203_1980_MAR_O_NT_002.SEN3", name )
Assert. assertTrue ( errors. hasFieldErrors ( "name" ) )
SqlScriptDescriptorAssert. assertThat ( scriptDescriptors )
assertFalse ( "Failed to find DOI in metadata.", foundDOI )
assertEquals ( propertyValue, resultMap. get ( "Name" ) )
Assert. assertEquals ( 2, encounters. size ( ) )
assertEquals ( expecting, found )
assertThat ( references. size ( ), is ( 0 ) )
assertTrue ( "Hash is invalid", Arrays. equals ( horseBytes, addr ) )
visitor. assertSatisfiedTransition ( "checking state contains two branches", _rootComposite, transition )
assertEquals ( numMessagesFirstPass + 2, numMessagesSecondPass )
assertTrue ( "size must be more than 0, but it is - " + queryModel. size ( ), queryModel. size ( ) > 0 )
Assert. assertEquals ( i, normalized, 0.0 )
assertNull ( lijst. getLast ( ) )
Assert. assertNotEquals ( first, second )
assertPayloadEquals ( sourceFile, result. getPayload ( ) )
assertEquals ( "x", x )
assertThat ( resultSet, hasSize ( 1 ) )
assertEquals ( "EPSG:4326", pj. getStringValue ( ) )
assertModelHasProperty ( "serviceInstances", newArrayList ( ) )
assertEquals ( ( limit + 1 ) * ( limit / 2 ), total. sum ( ) )
assertParseTree ( rootNode ( "12", node ( "digits", Arrays. asList ( "1", "2" ), "12", stringNode ( "d", "1" ), stringNode ( "d", "2" ) ) ), tree )
assertEquals ( expResult, result, 0.0001 )
assertMessage ( ":1 You haven't specified the command output.", response )
assertEquals ( 1, findings. size ( ) )
assertNull ( reader. overflowAtoms ( ) )
Assert. assertEquals ( "Hash is invalid", TestVectors. SHA256_DIGEST_EMPTY_STRING, result )
assertEquals ( 400, cr. getStatus ( ) )
assertTrue ( findAll. iterator ( ). hasNext ( ) )
assertMockEndpointsSatisfied ( )
assertFalse ( result )
assertThat ( result, is ( "OrderServiceImpl: function(): RuntimeException: Static RuntimeException" ) )
assertTrue ( service. findPermissionGroupByName ( "test pg" ). getId ( ) > 0 )
assertThat ( commands [ 0 ], is ( "echo \\"hello\\"" ) )
assertEquals ( "(void foo ;)\\n", found )
assertThat ( configuration, is ( CsvConfiguration. builder ( ). hasHeader ( true ). setQuoteChar ( 'E' ). setSeparator ( 'S' ). skipSpaces ( true ). build ( ) ) )
assertTrue ( baos. size ( ) > 0 )
assertNotNull ( mockMailer. getInstance ( ) )
assertThat ( patientResource. getProfile ( ). getReference ( ), containsString ( PATIENT_SUB ) )
Assert. assertThat ( actual, CoreMatchers. is ( expected ) )
assertNotNull ( "invalid workflow", iridaWorkflowLoaderService. loadIridaWorkflow ( workflowId ) )
assertTrue ( contentType. toString ( ). equals ( contentTypeString ) )
Assert. assertNotNull ( "Expected to be able to get MeteredClassInterface by interface and not by class.", mi )
assertEquals ( "Message not found", "Please enter a value", driver. findElement ( By. cssSelector ( ".error" ) ). getText ( ) )
assertThat ( result, is ( false ) )
assertEquals ( expectedSplits, new TreeSet < > ( createdSplits ) )
assertEquals ( MinaTransporter. class, ExtensionLoader. getExtensionLoader ( Transporter. class ). getExtension ( name ). getClass ( ) )
assertThat ( result. size ( ), is ( 0 ) )
assertEquals ( false, rm. incomingServerRequestMatchesMethod ( withResourceAndParams ( "Patient", RequestTypeEnum. GET, inputParams ) ) )
assertThat ( imageName, is ( defaultImages. defaultBaseImage ( ) ) )
assertThat ( underTest. isSatisfied ( ), is ( false ) )
assertEquals ( "h-na-alice-wa-suki-desu-ka-do-you-like-alice-when_321609", ripper. getGID ( url ) )
assertEquals ( ( short ) 8, ( short ) result. getShortWrapperValue ( ) )
assertEquals ( "um mil e um reais", words )
mock. assertIsSatisfied ( )
assertThat ( found, equalTo ( expected ) )
assertEquals ( member, returnedMember )
context. assertIsSatisfied ( )
assertIsErrorWithoutStacktrace ( "Method 'notTheMethod' does not exist in class 'com.fnproject.fn.one.method.ErrorMessages.OneMethodClass'. Available methods are: []" )
assertCity ( docs, "Erlangen" )
assertTrue ( "http://foo.bar.com/fubar?e=f&a=d". equals ( newEu ) || "http://foo.bar.com/fubar?e=f&a=d". equals ( newEu ) )
Assert. assertTrue ( "Expected aKRB5 cipher suites, got null", resolved!= null && resolved. size ( )!= 0 )
assertThat ( integerProperty, is ( equalTo ( 42 ) ) )
assertEquals ( "V2 GenreDescription", wrapper. getGenreDescription ( ) )
assertEquals ( response. getStatus ( ), HttpServletResponse. SC_NOT_MODIFIED )
assertThat ( screenshotDirectory, endsWith ( "screenshots" + File. separator + anyFileName + ".png" ) )
assertEquals ( "null", encoded )
assertEquals ( "Destriction", entity. getDescription ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( skillConstraint. fulfilled ( insertionContext ) )
Assert. assertTrue ( this. bean. resourceExistence ( ) )
assertTrue ( WIOPFactories. isTransportInUse ( ) )
assertEquals ( expected, TypeDefinition. getInstance ( Qux. class ). getAllGetters ( ) )
Assert. assertEquals ( numero, importacaoAdicao. getNumero ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, testName + "_diff" ) )
assertNotSame ( result, one )
assertTrue ( true )
assertEquals ( "Count(stringData)", service. prepare ( query ). toString ( ) )
assertEquals ( expResult, result )
assertNull ( RenderKitUtils. decodeBehaviors ( facesContext, component ) )
Assert. assertTrue ( "should be fired", notify. matches ( 60, TimeUnit. SECONDS ) )
assertEquals ( read, str )
assertEquals ( HttpStatusCodes. OK. getStatusCode ( ), response. getStatusLine ( ). getStatusCode ( ) )
Assert. assertEquals ( 2, instance. list. size ( ) )
assertEquals ( MD5HashStrategy. class, actual. getClass ( ) )
assertEquals ( "Incorrect Short Reason", "Platform Down leela.local Baseline (baseline threshold) ", alertManager. getShortReason ( testPlatformAlert ) )
Assert. assertEquals ( numeroPedidoItemCliente, produto. getNumeroPedidoItemCliente ( ) )
Assert. assertEquals ( "apk.version", "1.0", apk. getVersion ( ) )
assertSame ( s, StringDistances. create ( s ) )
assertEquals ( poly, parsed )
assertFalse ( containsAll )
assertEquals ( c1, c2 )
assertThat ( mergedExplicitSchema, IsIterableContainingInAnyOrder. containsInAnyOrder ( expectedMergedSchema ) )
assertNotNull ( array )
assertEquals ( "3 写薪� �邪蟹�邪蟹", t. format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( "defaultTag", configuration. evaluateToString ( "defaultTag" ) )
assertThat ( highAvailabilitySupportChecker. isSupported ( FORMAT_NAME ), is ( true ) )
assertTrue ( brokenSchemaEx. getMessage ( )!= null )
assertEquals ( Arrays. asList ( 1, 2, 3, 4 ), probe. values )
assertNotNull ( request. getSession ( ). getAttribute ( Constants. PREFERRED_LOCALE_KEY ) )
assertEquals ( "Wrong ID URL", expResult, result. toString ( ) )
assertEquals ( false, bm. isBitSet ( bitNumber ) )
assertNotNull ( cert )
Assert. assertTrue ( message. contains ( "AccessDeniedException was not logged" ) )
assertNotNull ( result )
Assert. assertEquals ( false, actual )
assertArrayEquals ( new int [ ] { 0x00, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF }, key. getKeyBytes ( ) )
assertEquals ( "user@codenvy.com", user. getValue ( ). getEmail ( ) )
assertEquals ( 0, errors. size ( ) )
assertThat ( actual, is ( object ) )
assertNotNull ( portal. getPage ( new PageId ( "get-page" ) ) )
assertSententences ( expected, service. predict ( text, suggestions ), text, suggestions )
Assert. assertEquals ( IOUtil. toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-alpha-20.xml" ). getAbsoluteFile ( ) ), "UTF-8" ), IOUtil. toString ( os. toByteArray ( ), "UTF-8" ) )
assertArrayEquals ( new int [ ] { 2, 2 }, readLayout. getGridColumns ( ) )
Assert. assertEquals ( CONTENT_TYPE, licenseContent. trim ( ) )
assertNotNull ( user )
assertPerms ( perms )
Assert. fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( result >= 2000 )
assertThat ( feature. getName ( ), is ( "test.feature" ) )
assertSame ( tt2, tt )
assertFieldIsMapped ( )
Assert. assertNull ( future. get ( ) )
assertEquals ( model, RdfTestHelpers. parseRdf ( RdfTestHelpers. getResourceFromFile ( "QuantityValue.rdf" ) ) )
Assert. assertEquals ( 2, bitmap. size ( ) )
assertEquals ( ret, projectItem )
Assert. assertEquals ( p4, p3 )
assertTrue ( iotHubServiceClient. getNames ( ). contains ( iotHubName ) )
Assert. assertEquals ( "\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\",\\"\\"\\"", encoder. encode ( context, createTestData ( ) ) )
Assert. assertEquals ( "{\\"name\\":\\"test bean\\",\\"email\\":\\"test@email.com\\",\\"birthday\\":\\"2012-11-23 00:00:00\\"}", json )
assertFalse ( "Value should not be equal", equals )
assertThat ( actual, is ( expected ) )
assertEquals ( "abc", key. getId ( ). getValue ( ) )
assertEquals ( null, result )
assertEquals ( out, builder. build ( ). toString ( ) )
assertTrue ( "Should not be allowed", query1. hasAccess ( user, AccessType. VIEW ) )
assertEquals ( "GET_some_path_testOperationIdResolver", serviceId )
context. assertEquals ( Arrays. asList ( "a", "b", "c" ), list )
assertEquals ( "Conversion did not match", value, to )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20170810</date>" + "<item><id>222</id><amount>1</amount></itemn></order>", xml )
assertEquals ( 0, dbHandler. getGPSTrackCount ( ) )
Assert. assertTrue ( check. equals ( o ) )
assertThat ( factory. getObjectInstance ( ref, DataSource. class ), is ( notNullValue ( ) ) )
assertThat ( comparator. compare ( projectChange1, projectChange2 ), is ( lessThan ( 0 ) ) )
Assert. assertEquals ( 4, result. getTotalHits ( ) )
assertEquals ( expectedArg, parsedArg )
assertTrue ( getExpectedErrorMsg ( ), result )
assertEquals ( "GBP 2.34", test. toString ( ) )
assertEquals ( expected, result )
assertOnResponseAttachment ( f3gbClient, MAX_SIZE2, response )
Assert. assertNotNull ( obj )
Assert. assertTrue ( dsDao. getDSInfo ( localDSServiceID. toString ( ) ). isUp ( ) )
assertNotNull ( UserChannel. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertTrue ( sWriter. toString ( ). contains ( "!yro1\\n" ) )
assertFrameHex ( "Lax Text Frame with RSV3", expected, actual )
assertEquals ( "isolatedLeaderCheckTwoFollowers", false, newBehavior. isIsolatedLeaderCheck ( ) )
assertThat ( expectedQueryFilterSpec, new ReflectionEquals ( unmarshalledQFS ) )
assertThat ( results, samePaths ( new File ( b, "f.txt" ) ) )
assertEquals ( 1, ksession1. fireAllRules ( ) )
Assert. assertEquals ( 0, events. size ( ) )
Assert. assertFalse ( duplicateWorkComparator. isDuplicate ( doc1, doc2, null ) )
assertEquals ( "Wrong description property value (path=" + path + ")", "Assignment 1 description", property. getRealValue ( ) )
assertEquals ( "SELECT * WHERE {?user?_c2?_c3 ;?_c4?user_name. FILTER(?user_name =?_c6 ||?user_name =?_c7) }" )
assertNull ( in )
assertTestRunFails ( testPlan )
assertEquals ( expectedSize, event. size ( ) )
Assert. assertEquals ( httpResponse. getResponse ( ), "OK" )
assertEquals ( null, e. d )
assertOut ( "/**\\n * @param {string=} bar\\n * @return {number}\\n */\\nRoyaleTest_A.prototype.foo = function(bar) {\\n  bar = typeof bar!== 'undefined'? bar : \\"baz\\";\\n  return -1;\\n}" )
assertThat ( formatter. isStrict ( ), is ( true ) )
assertEquals ( expResult, result )
assertEquals ( "https://sun9-41.userapi.com/album45506334_0.jpg", ripper. getBestSourceUrl ( json ) )
assertNotNull ( dao )
assertTrue ( instanceConstraintViolationsList. toString ( ), instanceConstraintViolationsList. size ( ) == 1 )
assertThat ( result, is ( new String [ ] [ ] { { "this", "is", "a", "test" } } ) )
assertEquals ( "EUR", accountMap. get ( "EUR" ) )
Assert. assertEquals ( "[1,2,3,4]", toJson )
AssertionUtils. multiAssertEquals ( createAsDocument9, response5. getResponseObject ( ) )
assertObjectEquals ( "{type:'object',properties:{f1:{type:'string'}},'x-example':{f1:'foobar'}}", s. getSchema ( SimpleBean. class ) )
assertEquals ( JsonValue. NULL, activeThreadCount )
assertExpectedPreprocessingResult ( expectedResultLocation, includeReader )
assertTrue ( smileys. isEmpty ( ) )
assertEquals ( mojo. getConfigPojo ( ). getParameter ( ), "from config pojo" )
assertTrue ( response. getNumberOfFeatures ( ). intValue ( ) == 7 )
assertTrue ( hasImage ( IMAGE_TAG ) )
assertEquals ( DEFAULT_CHAR_ENCODING, request. getCharacterEncoding ( ) )
assertEquals ( DOMAIN, bareJID )
Assert. assertEquals ( "password", codec. encode ( "password" ) )
assertThat ( jsonAsMap. get ( "enumProperty" ), is ( "A" ) )
assertThat ( impl. getRemovedOntologies ( ), contains ( ontology ) )
assertNull ( s )
assertEquals ( "Test2", gbpNetworkServicePolicy. getName ( ) )
assertTrue ( suffix1. equals ( suffix2 ) )
assertArrayEquals ( expected, fileArray )
assertThat ( result, is ( CodePoints. NOT_FOUND ) )
assertTrue ( actualStopPoint. equals ( mockStopPoint ) )
assertEquals ( uploadLocation + FileUtils. toDir ( stateToken ) + filename + pngExtension, absFile )
assertEquals ( ( float ) 8, result. getFloatValue ( ), 0.0 )
Assert. assertEquals ( "", actual )
assertEquals ( expResult, result )
assertEquals ( "concrete", s )
assertThat ( roundtrippedRecord, equalTo ( record ) )
assertEquals ( "hello", result )
assertEquals ( HttpStatus. SC_INTERNAL_SERVER_ERROR, resp. getStatus ( ) )
assertEquals ( "Invalid version extracted", expVersion, result. getParentVersion ( ) )
excelApplicationManager. assertContent ( new File ( getClass ( ). getResource ( "expected_ok.xls" ). toURI ( ) ), "A", EMPTY_LIST )
Assert. assertNotNull ( artifact )
Assert. assertTrue ( os. toString ( "UTF-8" ). contains ( "Unknown target" ) )
assertEquals ( expResult, result )
assertThat ( extractMonitorables ( adapter ). get ( MEAN ). get ( ), Matchers. < Object > is ( newMean ) )
assertThat ( runs, empty ( ) )
Assert. assertEquals ( new BigDecimal ( "0.00000000" ), TikaUtils. mapCompleteBalanceResultForCurrency ( currencyType, completeBalanceResults ) )
Assert. assertTrue ( dbf2. contains ( key ) )
assertThat ( representation. getInteger ( "size" ), is ( 20 ) )
assertEquals ( null, avg )
assertTrue ( "The server is not running", myTestServer. waitForClient ( 10, TimeUnit. SECONDS ) )
assertEquals ( "<img alt=\\"hey\\" test=\\"hey\\">foo</img>", rendered )
Assert. assertEquals ( 10, result. getEntities ( ). size ( ) )
assertEquals ( "Check principal has correct FQAN string", TEST_FQAN_STRING, principal. getFqanString ( ) )
Assert. assertEquals ( "Wrong toString()", "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.common.instruction.rev130731.instructions.grouping.Instruction msgType: 11" + " experimenterID: null", key1. toString ( ) )
Assert. assertEquals ( expected, MutableList. mutable. with ( PrimitiveTuples. pair ( DonutType. BOSTON_CREAM, 15 ), PrimitiveTuples. pair ( DonutType. GLAZED, 11 ) ) )
assertEquals ( 1, listener. getNumberOfTimesInvoked ( ) )
assertThat ( caughtException ( ), instanceOf ( CustomException. class ) )
Assert. assertEquals ( actual, expected, "Returned an invalid property value." )
assertEquals ( unused, h. getUnused ( ) )
assertEquals ( "(* (* (a 34) b 9) c)\\n", found )
assertServerAncestry ( trace )
assertFalse ( "The getChanges() method reported a change", hasChange )
Assert. assertEquals ( 12, tools. size ( ) )
assertFalse ( authorizer. isAuthorized ( context, profiles ) )
assertEquals ( expected, new WritablesToNDArrayFunction ( ). call ( l ) )
assertNumEquals ( 1, profit. calculate ( series, new BaseTradingRecord ( ) ) )
assertEquals ( new ArrayList < PostReport > ( ), mockResult. included ( "reports" ) )
Assert. assertEquals ( result. getResultSize ( ), 10 )
Assert. assertTrue ( count > 0 )
assertFalse ( "The configuration should not have been cleared", config. has ( "test.dir" ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( actual, expected, "Method with zero parameters does not match expected" )
Assert. fail ( "Should have thrown SQLFeatureNotSupportedException" )
Assert. assertTrue ( "Wrong canonicalization using external mapping file", TestFileUtils. compareFileToResource ( out, base ) )
assertEquals ( 60000L, testLong )
assertEquals ( expected, ColumnRanges. rangeAtNode ( nodeOfMatchingType ) )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoItemImpostoPISOutrasOperacoes ( ). toString ( ) )
Assert. assertEquals ( extractor. generateKey ( host, req1 ), extractor. generateKey ( host, req2 ) )
assertArrayEquals ( new byte [ ] { 0, 0, 1, 1, string. getBytes ( ) }, ByteUtil. inputStream2Bytes ( new ByteArrayInputStream ( string. getBytes ( ) ) ) )
Assert. assertEquals ( 0, zero. getReal ( ), 0 )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER _IDX_T ['me','me', 'a'] - ['me', 'a'] - ['me', 'a']\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "    SERVER FILTER BY FIRST KEY ONLY\\n" + "CLIENT MERGE SORT", QueryUtil. getExplainPlan ( rs ) )
assertFalse ( episode. getEpisodeName ( ). isEmpty ( ) )
assertEquals ( "Simple,world!", trans. transform ( data ) )
assertThat ( result ( ), is ( equalTo ( expectedResult ) ) )
assertEquals ( "{\\"someString\\":\\"string\\",\\"someStringValue\\":\\"someStringValue\\"}", encoded )
Assert. fail ( "Expecting MathIllegalStateException" )
assertModelIsSerialized ( )
assertEquals ( parseCalendar ( "20131028-00:00:00", TimeZone. getTimeZone ( "Europe/Amsterdam" ) ), dh. getCalendarAfter ( testingClock. getCurrentCalendar ( ) ) )
assertArrayEquals ( expectedBytes, serializer. serialize ( ) )
responseAsserter. assertRegisterResponse ( )
assertEquals ( ImmutableMap. of ( "a", "" ), parameters )
assertEquals ( "Expected list of property names to be used.", EXPECTED_LIST_PROPERTY_NAMES, keys. toArray ( ) )
assertNotNull ( "precondition was supposed to fail", result )
assertTrue ( survey. isStarted ( ) )
assertNull ( s )
Assert. assertNull ( "should not be a description", actualDescription )
assertEquals ( 1, wlsDomainConfig. getServerConfigs ( ). size ( ) )
assertEquals ( g1, g2 )
assertEquals ( "123", content )
assertEquals ( getLoggingEvent ( ). getFormattedMessage ( ), expected )
assertThat ( result, is ( "hello world" ) )
Assert. fail ( "NullPointerException should have been thrown" )
assertThat ( values. getWeblogicOperatorImage ( ), equalTo ( stringValue ) )
assertNull ( found )
assertTrue ( Arrays. equals ( new int [ ] { 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, command. serialize ( ) ) )
assertEquals ( "User", result )
assertEquals ( "Expected " + expected1 + " but got " + mapping, expected1, mapping )
assertThat ( target. getEthType ( ), is ( new Integer ( OFPFlowActionPopMpls. MPLS_MULTICAST ) ) )
assertThat ( createdOrUpdated. getStatusInfo ( ). getFamily ( ), is ( Response. Status. OK. getStatusCode ( ) ) )
assertThat ( reply ( ), is ( anAppendReply ( ). withResult ( true ) ) )
assertThat ( text ( contents ), is ( "^1A\\t2B\\n" ) )
assertEquals ( FEEDBACK_MESSAGE, feedbackMessage )
assertEquals ( productActivity. getId ( ), huMovementBL. getPackingMaterialCActivity ( product ). getId ( ) )
assertEquals ( 1, availablePackages. size ( ) )
assertSpecialServletWasInvokedWith ( entity )
assertMockEndpointsSatisfied ( )
assertEquals ( expResult, result )
assertEquals ( OffsetDate. of ( LocalDate. of ( 2007, 7, 15 ), OFFSET_PONE ), t )
assertEquals ( "00 120.9", df. format ( blackFridayTVDeal ) )
assertNotNull ( "Could not find common schema", commonSchema )
Assert. fail ( )
Assert. assertEquals ( stId. compareTo ( otherServiceTemplate. getId ( ) ), - 1 )
assertResultSet ( res )
assertEquals ( "foo ", returnData )
assertEquals ( ValidationResult. OK, r. iterator ( ). next ( ). getError ( ) )
assertEquals ( TestUtil. LOCAL_TEST_PROXY, result. get ( 0 ) )
Assert. assertFalse ( iterator. hasNext ( ) )
assertEquals ( "24:00:00", v. getStringValue ( ) )
Assert. assertFalse ( tt. isPrematureBreak ( null ) )
assertEquals ( "Main class name", "org.apache.felix.main.Main", new FelixPlatformBuilderF160 ( m_bundleContext, "version" ). getMainClassName ( ) )
assertThat ( sampledValue. getMeasurand ( ), equalTo ( measurand ) )
assertTrue ( tbce. compareScreen ( "foo" ) )
assertThat ( result, is ( "\\"" + USER_NAME + "\\"" ) )
assertTrue ( game3. isGameOver ( ) )
assertTrue ( true )
assertThat ( log, instanceOf ( JaxRsLogger. class ) )
assertEquals ( aCredentials. getApiKey ( ), unit. authenticate ( aCredentials ). getApiKey ( ) )
assertEquals ( 18, result )
Assert. assertNull ( changed. getDataType ( ) )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertThat ( result, equalTo ( v + ".0.7" ) )
assertTrue ( exceptionCaught )
assertEquals ( a1, a2 )
assertEquals ( 28, term. evalI ( env ) )
assertEquals ( "Herbert", vcard. getName ( ) )
assertThat ( tags, hasItem ( "abc" ) )
assertTrue ( glass. isEmpty ( ) )
assertEquals ( 2, servers. size ( ) )
assertFalse ( fileDescriptorChecker. isDetected ( ) )
Assert. assertTrue ( time < randomQueryTimeLimitInMillis )
assertEqualsIgnoreWhitespace ( "yeah yeah minsert( xxx ) this is a long() thing Person (name=='drools') modify a thing", result )
assertEquals ( "DROOLS2286", new DROOLS2286 ( context ). getName ( ) )
assertThat ( secondPage. getUrl ( ). toString ( ), endsWith ( "/view-hardcoded-params" ) )
assertEquals ( 201, status. getStatusLine ( ). getStatusCode ( ) )
Assert. assertTrue ( queriedEntities. size ( ) > 0 )
assertRowsEqual ( expected, primaryData )
assertNull ( v. get ( ) )
Assert. fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertFalse ( Pattern. matches ( Pattern. compile ( "(?s).*1.2.*" ), s ) )
Assert. assertEquals ( "1970-01-01", writer. toString ( ) )
assertException ( "FEEL-01015", "''", "< ''", "'camunda'", "< 'camunda'", "false", "< true", "'12'", "< '12'", "\\"12\\"", "< \\"12\\"" )
assertEquals ( arr, arr2 )
assertEquals ( expectedJson, actualJson )
assertEquals ( "Base value is not properly parsed", "true", parsed )
assertEquals ( "HTTP/1.1 417 Expectation Failed", sb. toString ( ). trim ( ) )
assertEquals ( "Project_Default(Field(0))\\n" + "  Insert_Returning(INTO c)\\n" + "    Project_Default(NULL, NULL, NULL)\\n" + "      ValuesScan_Default([])", getExplain ( insert, table. getSchemaName ( ) ) )
assertArrayEquals ( new Class <? > [ ] { Long. class }, c. getParameterTypes ( ) )
assertThat ( result2. getNodes ( ). size ( ), is ( not ( result. getNodes ( ). size ( ) ) ) )
assertTrue ( ws. isClosed ( ) )
assertEquals ( 42, tf. getConvertedValue ( ) )
assertEquals ( sp. getClass ( ), sp2. getClass ( ) )
assertMockEndpointsSatisfied ( )
assertNull ( bidService. getBid ( 1L ) )
assertEquals ( SUPPRESSABLE_WITH_SHORT_MESSAGE, strategyName )
assertTrue ( headings. get ( 1 ). text ( ). equals ( "1" ) )
assertEquals ( "void dest8(@A @B @C int, @B @C @D int)", toString ( dest ) )
assertThat ( c. compute ( ), is ( 6 ) )
assertNotNull ( readUrlContents )
assertEquals ( 0, PartitionUtils. getRecommendedPartitions ( pcollection ) )
assertTrue ( failListener. isFailed ( ) )
assertEquals ( 1, regionInfoList. size ( ) )
assertFalse ( peerAcceptanceUtil. isPeerInterestedOnRemoteWorker ( clientID. getServiceID ( ) ) )
assertArrayEquals ( tag_orig, new byte [ 16 ] )
assertNotNull ( op )
Assert. assertEquals ( expectedProjectionBean, computedProjectionBean )
Assert. assertEquals ( currentYear - birthYear, AgeUtils. getFullAge ( birthDate ) )
assertEquals ( prettyPrintXml ( readContent ( EXPECTED_ABSTRACT_COMPLEX_TYPE_LIST_PATH ) ), prettyPrintXml ( xml ) )
assertListTEquals ( listT, 12, 13, 14 )
assertThat ( currentBuildsOf ( view ). get ( 0 ). url ( ), is ( "job/project-name/22" ) )
assertEquals ( "^/protected/content$", pattern )
Assert. assertEquals ( json. getAsInt ( "status" ), 204 )
assertEquals ( expectedHashCode, is. readInt ( ) )
assertEquals ( "Wrong value", " [test@cmd ~]$ \\" ; a comment", config. getString ( "CmdPrompt" ) )
assertEquals ( range1, range2 )
assertEquals ( Rational. valueOf ( - 1 ), result )
assertEquals ( "Task ran", 1, ran )
assertEquals ( id, embedding. getIdOfProjectionEntry ( id ) )
assertEquals ( expecting, found )
assertEquals ( expResult, result )
assertEquals ( DefaultScheduledReporter. class, reporterFactory. getClass ( ) )
assertThat ( result, equalTo ( true ) )
assertThat ( result, is ( expected ) )
assertEquals ( unused, h. getUnused ( ) )
assertThat ( rowsModified, is ( 1 ) )
assertEquals ( "a", mock. get ( 1 ) )
assertNotNull ( foo. field )
assertEquals ( testKeySize, tlsToolkitStandaloneCommandLine. getKeySize ( ) )
assertArrayEquals ( d. asDouble ( ), d2. asDouble ( ), 0.001 )
assertThat ( result, is ( true ) )
assertThat ( ontology, is ( equalTo ( ontologyC ) ) )
assertTrue ( true )
Assert. assertNull ( job. getTaskDefinitionKey ( ) )
assertThat ( result, is ( nullValue ( ) ) )
Assert. assertEquals ( expected, testIndex. findConc ( " 'May' 'be' " ) )
assertEquals ( model, actual )
assertThat ( StubWatchFactory. getReceivedEvents ( NAMESPACE, INITIAL_RESOURCE_VERSION ), containsInAnyOrder ( createAddResponse ( object1 ), createModifyResponse ( object2 ) ) )
assertTrue ( definedInContext )
assertTrue ( exp. contains ( "this is test" ) )
assertTrue ( "Got parameters", params. isEmpty ( ) )
assertThat ( thrown, instanceOf ( ShardConfigStaleException. class ) )
assertNotNull ( UserChannel. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertEquals ( "Assert.assertFalse(\\"link=my_link\\",isElementPresent(By.linkName(\\"my_link\\")));", result )
assertEquals ( t1, t2 )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4, 5, 6 ) ) )
assertEquals ( DistCpCopier. class, copier. getClass ( ) )
expect. assertObservation ( )
assertResult ( 15 )
assertTrue ( config. isPresent ( ) )
assertSame ( Integer. class, value. getValue ( ) )
assertEquals ( this. multipleExtCom, result. getAttributes ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import java.util.LinkedList;\\n" + "import java.util.List;\\n" + "public class ClazzName {\\n" + "  public void doSomething(  Name values){\\n" + "     count = null;\\n" + "     list = new LinkedList<>();\\n" + "  }\\n" + "}", cu. toString ( ). trim ( ) )
assertEquals ( "registration was not valid", violations. iterator ( ). next ( ). getMessage ( ) )
Assert. assertEquals ( "[1, 3]", s. toString ( ) )
assertNotNull ( db. prepareCall ( "select count(*) from callable api" ) )
assertNotNull ( df )
assertThat ( formatter. parse ( "4 1582 (D)" ), is ( PlainDate. of ( 1582, 10, 4 ) ) )
assertEquals ( expected, actual )
assertIdentical ( "/simple_filter.owl", filtered )
assertEquals ( Arrays. asList ( 2, 4 ), twice. apply ( test ). toList ( ) )
assertTrue ( connectFuture. isConnected ( ) )
Assert. assertEquals ( 1, result. getFailedJobs ( ) )
assertEquals ( origWriteSet, reorderSet )
assertThatStepsInstancesAre ( builderAnnotated. buildCandidateSteps ( configuration ), WeldStepBean. class )
assertEquals ( expected, actual )
assertEquals ( "incorrect value", aNumber. hashCode ( ), bNumber. hashCode ( ) )
assertEquals ( "List is not empty", 0, list. size ( ) )
assertTrue ( "Install failed", destinationJar. exists ( ) )
assertNotNull ( permissionService. getPermissionsMapFor ( component ) )
SelendroidAssert. assertResponseIsResourceNotFound ( response )
assertEquals ( serializedYaml, yaml )
assertSame ( result, this. logger )
assertFalse ( user1. equals ( user2 ) )
assertEquals ( "(DUH a (DUH 1)) (DUH b (DUH 2))\\n", found )
assertEquals ( 1, count )
assertTrue ( currentValue > prevValue )
assertTrue ( rootNode. isNodeType ( JcrConstants. REFERENCEABLE_NODE ) )
assertArrayEquals ( new byte [ ] { 42 }, Files. readAllBytes ( withDot ) )
AssertAnnotations. assertPOS ( posMapped, posOriginal, select ( jcas, POS. class ) )
Assert. assertFalse ( compoundWrite. apply ( new EmptyNode ( ) ) )
assertNodesIn ( expected, y1Fun, Optional. of ( y1Fun ) )
assertThat ( hijri. with ( CommonElements. weekOfMonth ( HijriCalendar. family ( ), model ). incremented ( ) ), is ( hijri. with ( HijriCalendar. DAY_OF_MONTH, 4 ) ) )
assertEquals ( true, bm. isBitSet ( bitNumber ) )
assertEquals ( TestModel. class, field. getType ( ) )
assertEquals ( "0: CPU CPU\\n" + "1: CPU\\n" + "0: CPU\\n" + "1: CPU\\n", actual )
assertEquals ( 5, searchEngineMarketShareArray. length )
assertions. contains ( 'd' )
assertEquals ( rendered, expected )
assertThat ( scc, is ( toPartition ( expect ) ) )
assertEquals ( result. get ( RETURN_RESULT ), String. format ( EXCEPTION_UNAUTHORIZED, "Wrong user %s", USER ) )
assertThat ( quantity, is ( existingItem. getQuantity ( ) ) )
assertEquals ( Optional. of ( "Z" ), r )
assertEquals ( this. sg. getNetworkElementId ( ), this. neListCaptor. getValue ( ). getNetworkElementId ( ) )
assertEquals ( "should have found 3 tokens", 3, tokens )
assertSpringStepsFound ( steps )
assertNotNull ( create )
assertFalse ( hive2DatabaseMeta. runQuery ( null ) )
assertEquals ( 0, result. size ( ) )
assertTrue ( of ( "AAAAA" ). toString ( ). equalsIgnoreCase ( "AAAAA" ) )
context. assertIsSatisfied ( )
assertThat ( sorted, is ( empty ( ) ) )
assertNotNull ( result )
assertNotSame ( "Different event bus instances", eventBus, eventBus2 )
assertEquals ( CREATED. getStatusCode ( ), response. getStatus ( ) )
Assert. fail ( "exception expected" )
assertOut ( "<script><![CDATA[]]></script>" )
Assert. assertEquals ( "29418/MyProject", connectionString )
Assert. assertTrue ( TestUtils. attributeEquals ( expectedResults, exactResults, attributeNames ) )
assertEquals ( 1234.56, empty. getRPM ( ), 0.1 )
assertEquals ( expected, json )
Assert. assertEquals ( cnpj, dados. getCnpj ( ) )
assertNoErrorNotifications ( )
Assert. assertNotNull ( result )
assertTrue ( matcher. match ( actual, kmfSamples. getProviderA ( ) ) )
Assert. assertEquals ( 3, tools. size ( ) )
assertThat ( itemTypeDAO. getTypes ( TENANT_ID ), is ( expectedTypes ) )
Assert. assertNull ( noBean )
Assert. assertEquals ( "Bean list property not dereferenced when overriding bean list property override", expected, testComponent. getBeanList ( ) )
assertThrows ( InvalidMethodSignatureException. class, ( ) -> new JavaDataTableTypeDefinition ( method, lookup, new String [ 0 ] ) )
assertFalse ( filter. getExpr ( ) instanceof ExprInfo )
assertEquals ( "test/me", provider. getRelativePath ( projectBasedir, repoRoot ) )
XMLAssert. assertXMLEqual ( new InputStreamReader ( getClass ( ). getResourceAsStream ( "csv-expected-03.xml" ) ), new StringReader ( modelWriter. toString ( ) ) )
assertEquals ( "The ttl should be 50", 50, iSpec. getTTL ( ) )
Assert. assertEquals ( "bob", token. getUserName ( ) )
assertThat ( match, is ( BestTypeMatch. T2 ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPath, cmpPath, destinationFolder, diff ) )
assertThat ( dest. bbb, is ( nullValue ( ) ) )
assertThat ( manager. getRandomStrategy ( ), is ( mockedStrat1 ) )
assertFalse ( theGhost ( ). isFood ( ) )
assertEquals ( "Expected 5 results!", 5, n )
assertEquals ( Nd4j. create ( new double [ ] { 1, 2 } ), matrix )
assertEquals ( "192.168.0.123/24", ip )
Assert. assertEquals ( XMLStreamConstants. PROCESSING_INSTRUCTION, reader. getEventType ( ) )
assertPermanentCount ( playerA, bear1G, 1 )
assertEquals ( "select constant\\nfrom test1", 0, query. size ( ) )
assertArrayEquals ( expected, actual )
Assert. assertTrue ( bean. getMap ( )!= null &&! bean. getMap ( ). isEmpty ( ) )
assertFalse ( iter. hasNext ( ) )
Assert. assertEquals ( slice. toString ( ), 2, SlicerUtil. countNormals ( slice ) )
Assert. assertEquals ( 40, analyser. getLoadAtBeginning ( route ). get ( 0 ), 0.01 )
assertEquals ( expecteds, actuals )
assertEquals ( Version. valueOf ( "1.0.0-alpha" ), builder. build ( ) )
Assert. assertEquals ( 200, response. getStatus ( ) )
assertValuesEqualsResultSet ( rs, expectedResults )
assertEquals ( "5", stringWriter. toString ( ) )
assertContainsPlot ( 0, 0, Elements. BLUE, plots )
assertEquals ( "resultxx", aspect. aroundFlippableMethods ( pjp, flipAnnotation ) )
assertEquals ( 0, processEngineConfiguration. getHistoryService ( ). getNumOfCleanupCalls ( ) )
assertEquals ( "remote", fs. getUri ( ). getScheme ( ) )
Assert. fail ( "expected exception for bad query." )
assertUpdateRecord ( "*.c1.addresses.second.number", objId, obj, updateObj, PATCH, expected )
Assert. assertTrue ( "Capabilities should match due to override", matcher. matches ( nodeCapability, testCapability ) )
assertEquals ( "OK", qp. evaluate ( ) )
Assert. assertEquals ( "We expect a null response", responseResult. getText ( ) )
assertNull ( event. getField ( "foo" ) )
assertEquals ( expectedEventTypesInOrder, actualEventTypesInOrder )
assertEquals ( 0, ( int ) captured. getValue ( ) )
assertTrue ( "Should have received message with seqNum of 101, but it is too high", responder. hasReceivedMessage ( ) )
Assert. assertNotNull ( "Dropdown should have removed button", dropdown. findElement ( By. className ( "w-remove-button" ) ) )
assertThat ( mapper, is ( TokenFunctions. authTokenToAppTokenMapper ( ) ) )
assertCount ( testQuery ( "select e from test1 order by e.position >= e.end" ), 1 )
assertArrayEquals ( jceResult, utilsResult )
assertTrue ( helper. shouldBeStored ( new HTTPResponse ( Status. OK, headers ) ) )
assertThat ( operatorValues. createMap ( ), hasEntry ( "internalDebugHttpPort", intValue ) )
assertTrue ( criteria. equals ( criteria2 ) )
Assert. assertEquals ( "foo.txt", sng. generateShortName ( "foo.txt" ). asSimpleString ( Locale. ROOT ) )
assertEquals ( 1, this. chartChangeEvents. size ( ) )
assertEquals ( expected, actual )
assertThat ( bindings. get ( Key. get ( "hibernateConfiguration" ) ), is ( module. getConfiguration ( ) ) )
assertInvocations ( client. getBusinessActivityInvocations ( ), "complete", "confirmCompleted", "close" )
assertEquals ( "<chart><background-color><radial-gradient x1=\\"0.5\\" y1=\\"0.3\\" color=\\"black\\"></radial-gradient><stops position=\\"0\\">0.5</stops></background-color></chart>", removeWhitespacesBetweenTags ( parent. child ( 0 ). toString ( ) ) )
assertEquals ( 42, config. integerValue ( ) )
assertEquals ( components. size ( ), 1 )
Assert. assertEquals ( unidadeFederativa, servicoConsulta. getUf ( ) )
assertEquals ( 100, v )
assertEquals ( 1000, value, 0 )
assertEquals ( LIST_VAL_a, p. getList ( ) )
Assert. assertNotNull ( license )
assertEquals ( response. getStatus ( ), STATUS200 )
assertEquals ( true, out. firstElement ( ). get ( ) )
Assert. assertEquals ( "--- a/" + projectSourcePath + "/Bar.java\\n" + "+++ b/" + projectSourcePath + "/Bar.java\\n" + "@@ -5,4 +5,4 @@\\n" + " \\tpublic void m() {\\n" + "-\\t\\tif (true) {\\n" + "+\\t\\tif (false) {\\n" + "+\\t\\t\\tif (true) {\\n" + "+\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\
assertEquals ( 200, action. getCode ( ) )
assertEquals ( PermitSupplier. Acquisition. FAILURE, acq. getStatus ( ) )
assertTrue ( Iterables. all ( evenNumbers, acceptOddNumber ) )
testRunner. assertAllFlowFilesTransferred ( PutCassandraQL. REL_SUCCESS, 1 )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.apache.royale.A', org.apache.royale.A);\\n\\n\\n/**\\n * @export\\n * @type {Object}\\n */\\norg.apache.royale.A.prototype.foo1;\\n\\n\\n/**\\n * @export\\n * @type {Object}\\n */\\norg.apache.royale.A.prototype.set_foo1;\\n\\n/**\\n * @protected\\n * @type {Object}\\n */\\norg.apache.royale.A.prototype.foo2;\\n\\n/**\\n * @export\\n * @return {Object}\\n */\\norg.apache.royale.A.prototype.foo3;\\n\\n/**\\n * @export\\n * @type {Object}\\n */\\
assertSame ( expected, actual )
assertThat ( PlainDate. of ( 2000, 12, 2 ). with ( model. weekOfYear ( ). minimized ( ) ), is ( PlainDate. of ( 2000, 12, 2 ) ) )
assertCollectionCanNotBeSerialised ( collection, TreSource. ExtendedHeaderData )
Assert. assertEquals ( 5, analyser. getLoadRightAfterActivity ( route. getEnd ( ), route ). get ( 0 ) )
assertEqualHQL ( "allen AND love", sb. toString ( ) )
VertxAssert. assertEquals ( "The graph operation resulted in an error: " + response. getString ( "message" ), "ok", response. getString ( "status" ) )
assertNotNull ( extractElementDataModifier. getElementId ( ) )
assertEquals ( "<ServiceParameter xmlns=\\"http://hl7.org/fhir\\"/>", xml )
assertEquals ( 0, got. size ( ) )
assertTrue ( Files. exists ( dest. resolve ( "file" ) ) )
Assert. assertNotNull ( connection )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED, status )
assertThat ( terminalStep. wasRun ( ), is ( true ) )
assertEquals ( VALUE, victim. getValue ( KEY ) )
assertTrue ( s. endsWith ( "Portlet.jar" ) )
Boundaries3dTest. assertBoundariesEquals ( new Boundaries3d ( new Coords3d ( - 5, - 5, - 5 ), new Coords3d ( 5, 5, 5 ) ), testSubject. toScad ( Angle. ofDegree ( 20 ) ) )
assertEquals ( required, iterateBFS )
assertEquals ( 42, x )
assertNull ( "Focus should not be focused", focused )
assertTrue ( results. toString ( ), results. indexOf ( "Responses invalid: 0 out of " + ( cycles * tracks ) ) >= 0 )
assertTrue ( deviceIO. isClosed ( ) )
Assert. assertEquals ( null, type )
assertTokensEqual ( of ( integer ( 10 ), integer ( 5 ), string ( "text 1" ), string ( "text 2" ) ), tokens )
assertEquals ( html, sanitized )
assertNoViolations ( constraintViolations )
assertEquals ( TimeUtil. parseTime ( time ), "2014-11-11 10:11:11" )
assertEquals ( averageDegree, 1.5 )
assertThat ( client, notNullValue ( ) )
Assert. assertEquals ( set. iterator ( ). next ( ), "c" )
Assert. assertEquals ( "URI is not built correctly", path, uri. toString ( ) )
Assert. assertNull ( actual )
assertThat ( ret, is ( "RETURNING myprocedure" ) )
assertEquals ( "<div id=\\"1\\"></div><div id=\\"2\\"><img /><img /></div><a id=\\"3\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertTrue ( doc. getContentField ( "extracted_text" ). toString ( ). equalsIgnoreCase ( "min fina komemr h�陇r. Den har en l�陇nk i ocks�楼" ) )
assertEquals ( expected, actual )
assertParams ( captured. getValue ( ), E_PARAM_NAMES, true, true )
assertEquals ( expected, actual. materializeToMap ( ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
assertEquals ( Collections. singletonMap ( "y.C{v=1, other=y.C{v=2, others=[x.A], i=3, b=true, c=x}}", TestUtils. findMetadata ( clz ) )
assertTrue ( PropUtil. getBooleanProperty ( props, "test", false ) )
Assert. assertEquals ( "4 juillet 2001 12:08:56 EEST", dateTime. toString ( ) )
assertTrue ( "Better cost solution (2.1 > 2.0) should not be accepted since the better cost is still below the threshold", schrimpfAcceptance. acceptSolution ( memory, createSolutionWithCost ( 2.1 ) ) )
assertEquals ( new Long ( 2 ), response )
assertEquals ( "thrown", result )
Assert. assertEquals ( Short. valueOf ( ( short ) 11 ), res )
assertThat ( params. isMonochrome ( ), equalTo ( false ) )
assertThat ( operations. find ( query ( byExample ( example ) ), Person. class ), hasItems ( walter, white ) )
assertNullOrEquals ( "��NAD83��", crs. getAxioms ( ). get ( 0 ). getAxiom ( ) )
assertEquals ( "Sample Linker Functionality should be Linker Functionality", LinkerFunctionality. LINKER_FUNCTIONAL, page. getLinkerFunctionality ( ) )
assertThat ( runtimeClassName, equalTo ( "org.talend.components.${componentNameLowerCase}.runtime.${componentNameClass}OutputTopology" ) )
assertThat ( target. getDoG ( ), IsEqual. equalTo ( new Image ( new float [ ] [ ] { { 1 } } ), 1E-6f ) )
assertTrue ( book. getIsbn ( ). startsWith ( "13" ) )
assertTrue ( c. size ( ) > 0 )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
Assert. assertNotNull ( dataBinding )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( "GitHub from https://github.com", ghlogout. getGitHubText ( ) )
assertNull ( ExpressionUtil. getCondition ( cachedAnnoConfig, null ) )
arrays. assertContainsOnlyOnce ( someInfo ( ), actual, emptyArray ( ) )
Assert. assertEquals ( "12345.6789", getCell ( 0, 10 ). getPureText ( ) )
assertNotNull ( nameIdData )
assertDegenerate ( scan )
Assert. assertEquals ( expect_sql, sql )
assertNull ( readS )
assertEquals ( "Hello World!", d. doCheckExample ( "Hello World!" ) )
assertEquals ( "No exception thrown!", true, result )
assertThat ( request. getPath ( ), is ( "/aaa" ) )
assertEquals ( "Wrong number of violations.", 1, violations. size ( ) )
assertEquals ( "Field-Name: value\\n" + "value\\n", field. formatMultilineValue ( "value" ) )
assertEquals ( expectedText. replace ( "\\n", "" ). replace ( "\\r", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\r", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ). replace ( "\\n", "" ) )
Assert. assertEquals ( "3 乇�夭 15 爻丕毓鬲 38 丿�� 丿�诏乇", t. format ( durations ) )
assertEquals ( "abc", output. toString ( ) )
assertEquals ( expected, actual )
Assert. assertEquals ( "Hello me", call. getOutput ( ) )
assertEquals ( 17, instance. evaluations )
assertEquals ( arr, resultArr )
assertEquals ( dataflowInputPort, edit. getSubject ( ) )
assertEquals ( expectedQuery, actualQuery )
assertSpanChunk ( spanChunkBo )
assertImage ( srcImg, destImg, e )
assertThat ( subject. supports ( update ), is ( false ) )
assertEquals ( expected, actual )
assertSame ( node, transform ( node ) )
Assert. assertEquals ( "Wrong toString()", "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.BarrierInput msgType: 4 msgType2: 8 msgType3: null", key1. toString ( ) )
assertThat ( TestLoggerFactory. getAllLoggingEvents ( ), is ( empty ( ) ) )
assertEquals ( 3, queries. size ( ) )
assertEquals ( expectedClass, actualResult. getCompilationUnit ( ) )
assertEquals ( expected, cluster )
assertEquals ( expected, actual )
assertNull ( result )
assertSorted ( )
assertNotNull ( pageEntity. getContent ( ) )
Assert. assertTrue ( result. getUserID ( ). containsAll ( childSet ) )
assertEquals ( 1, process. getLoggingCounters ( ). get ( Level. SLF4J_INFO ) )
assertArrayEquals ( gbids, newGbids )
Assert. assertEquals ( 7, ( ( VersionMessageWrapper ) list. get ( 0 ) ). getMessageBuffer ( ). readableBytes ( ) )
assertThat ( http. getStatusLine ( ). getStatusCode ( ), is ( 409 ) )
assertEquals ( expectedMap, map )
assertThat ( dao. getLongId ( id ), equalTo ( user. getId ( ) ) )
assertions. containsSequence ( sequence )
assertTrue ( vRoute. getStart ( ). getLocation ( ). getId ( ). equals ( "start" ) )
assertThat ( output, containsString ( "FHIR store deleted:" ) )
assertNotNull ( s )
assertSame ( expected, actual )
assertTrue ( "Type of decision is not valid", xacmlStatement. getDecision ( ). getStatements ( ). size ( ) > 0 )
assertTrue ( solrCounter > 0 )
assertEquals ( ValidationResult. OK. getStatus ( ), validationResult. getStatus ( ) )
assertEquals ( name, ship. getName ( ) )
assertFalse ( types. isEmpty ( ) )
Assert. assertEquals ( 1, mainTag. size ( ) )
Assert. assertEquals ( thirdSetMember, thirdConceptSet. getConcept ( ) )
assertTrue ( localFileSys. mkdirs ( dir ) )
assertEquals ( createdTopic. getTopicId ( ), dto. getTopicId ( ) )
assertEquals ( jsonMessage, "[{\\"callId\\":\\"#\\",\\"payload\\":\\"ThisIsThePayload\\"}]" )
assertEquals ( Lists. newArrayList ( "-o", projectPath. append ( outputPath ). toOSString ( ), "-listener", "-no-visitor", "-encoding", "UTF-8" ), options. command ( file ) )
Assert. assertTrue ( "canonicalizing the test file " + filename + " gives a different result than canonicalizing the xtm export of " + filename + ".", TestFileUtils. compareFileToResource ( out, baseline ) )
assertEquals ( Arrays. asList ( "a", "b" ), lists )
assertTrue ( new File ( folder. getRoot ( ), "test/DateTest-minimal.java" ). exists ( ) )
assertEquals ( new Json ( "{\\"b\\": 2}" ), dbr. query ( "SELECT * FROM CC_TEST WHERE ID = 2", List. of ( new Json ( "{\\"b\\": 2}" ) ) ). at ( 0 ). json )
assertTrue ( testMojo. shouldSkip ( ) )
assertFalse ( new DefaultSecurityContext ( p, s ). isUserInRole ( "friend" ) )
assertFalse ( measure. isDetected ( ) )
assertTrue ( "Error during memory check: " + percentageMemory, percentageMemory < 1 )
org. junit. Assert. assertEquals ( 0, fxForm. getElements ( ). size ( ) )
assertEquals ( 204, response. getStatus ( ) )
assertThrows ( ( ) -> instance. matcherFor ( matcher ) )
assertEquals ( expected, actual )
assertThat ( productResultUrls. size ( ), equalTo ( 0 ) )
assertEquals ( "Wrong property list", list, conf2. getStringList ( prop ) )
assertEquals ( 401, r. getStatus ( ) )
assertEquals ( x, v )
assertFalse ( client. exists ( methodName, "/testApp/" + methodName ) )
assertSame ( Writables. records ( TestWritable. class ), wt )
this. assertGet ( "artifacttemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fartifacttemplates%252Ffruits/baobab_artifacttemplates/MyTinyTest/files/", "entitytemplates/artifacttemplates/MyTinyTest_files.zip" )
assertEquals ( "20110105205442147801000000", d. getId ( ) )
assertEquals ( "3", redis. brpop ( "two", 1 ) )
assertFalse ( "Unexpected message is present.", page. isElementPresent ( By. id ( "message" ) ) )
assertEquals ( 1, map. size ( ) )
assertNotNull ( strategy )
assertPermanentCount ( playerA, "Panharmonicon", 0 )
assertThat ( jsonOutputStreamParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testMessage.json" ) ) )
Assert. assertTrue ( new LogAdapter ( "logger.name.here", mockConfigThreadLong ( ) ). isDebugEnabled ( ) )
assertEqual ( "1", query. execute ( ) )
assertEquals ( "GBP -0.94", test. toString ( ) )
assertThat ( getCreatedPod ( ). getEnv ( ), hasEnvVar ( "item1", itemRawValue ) )
Assert. assertEquals ( expected, resultOut )
assertThat ( result, is ( notNullValue ( ) ) )
assertEquals ( ONE_TWO_THREE, buf. readableBytes ( ) )
assertNotNull ( result )
assertThat ( testPath, is ( expectedPath ) )
Assert. fail ( "an exception should have been thrown" )
assertEquals ( "The user name was incorrect", "RNO_MCLWEB", changeset. getUserName ( ) )
assertEquals ( false, modifiedAction. isPropagatingConfiguration ( ) )
assertThat ( info. getClusterService ( CLUSTER ), sameInstance ( newService ) )
assertEquals ( service. getPresentableDistance ( distances ), "approaching" )
assertThat ( collect, not ( hasItem ( IS_CLEAN_HANDLER. getKey ( ) ) ) )
assertEquals ( "GBP 2.34", test. toString ( ) )
assertTrue ( originalMap. isEmpty ( ) )
assertTrue ( "Agent-based allocation should have failed", plan. getAllReservations ( ). size ( ) == numJobsInScenario )
assertArrayEquals ( data, Files. readAllBytes ( file ) )
JSONAssert. assertEquals ( expected, json, false )
Assert. assertTrue ( contentAsString. contains ( "archive.zip" ) )
assertEquals ( HttpServletResponse. SC_UNAUTHORIZED, response. getStatus ( ) )
assertOutput ( hbs. benchmark ( Stock. class ) )
Assert. assertTrue ( single. isPresent ( ) )
assertEquals ( fr. getFeedRightsProperties ( ). size ( ), properties. length )
Assert. assertTrue ( testApiVerticleFile. exists ( ) )
assertThat ( hBaseConfiguration. getConfiguration ( ), is ( configuration ) )
assertThat ( testUriStr, is ( expectedUriStr ) )
assertTrue ( session. has ( SESSION_KEY ) )
assertThat ( duration. plus ( 4, ClockUnit. NANOS ), is ( Duration. ofClockUnits ( 1, 0, 3 ) ) )
assertTrue ( stringStringMap. isEmpty ( ) )
Assert. assertEquals ( AccessMode. GROUPED, sr. getSerializableAccess ( ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}},'x-example':[[[{f1:'foobar'}]]]}", s. getSchema ( BeanList [ ] [ ]. class ) )
assertThat ( rendered, is ( equalTo ( secondPass ) ) )
assertEquals ( expected3, actual3 )
assertEquals ( 2, result. length )
assertEquals ( amendedCommit, getHeadCommit ( TEST_BRANCH, repo ) )
assertTrue ( Script. matchNamed ( MatchType. EQUALS, "res", null, "[1, 2, 3]", ctx ). pass )
assertSseResponse ( sseResponse, "event:eventName", "data:payload" )
assertTrue ( ex. isPrime ( 37 ) )
Assert. assertEquals ( 1, files. length )
assertEquals ( "collection1", coll. getName ( ) )
assertEquals ( 1000, this. con. connect ( "foo" ) )
assertEquals ( 200, response. getStatus ( ) )
assertEquals ( expectedBill, bill. doubleValue ( ), 0.01 )
assertOut ( "this.b = 10 + 'px'" )
assertEquals ( "failed sequence:\\n" + presentFieldList, presentFieldList, actual )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pay/>", elem. toXml ( ) )
authRule. assertScenario ( scenario )
assertEquals ( expected, result. getArr ( ) )
assertTrue ( "bar". equals ( c. getValue ( ) ) && "foo". equals ( c. getName ( ) ) && 1 == c. getVersion ( ) && "path". equals ( c. getPath ( ) ) && "domain". equals ( c. getDomain ( ) ) && 10 == c. getMaxAge ( ) )
assertParser ( twig )
assertThat ( versionData1. toString ( ), equalTo ( expectedVersionString ) )
assertThat ( time, equalTo ( now - 2000L ) )
assertEquals ( expected, actual )
assertEquals ( expecting, found )
assertTrue ( resultComparator. compare ( cucc1, cucc2 ) < 0 )
assertEquals ( "The value is not correct.", date, value )
assertTrue ( Arrays. stream ( itia. getValues ( ) ). allMatch ( v -> key == v / 2 ) )
assertEquals ( "1. Escape button pressed", driver. findElement ( By. cssSelector ( ".v-window-contents.v-scrollable" ) ). getText ( ) )
assertThat ( result. statusCode, is ( Response. OK ) )
assertEquals ( Hours. of ( - 15 ), test5. multipliedBy ( - 3 ) )
assertFalse ( validator. validate ( EntityNames. GRADE, grades ). equals ( grades ) )
assertEquals ( "foo:bar", uri. getLabel ( ) )
assertEquals ( "Ebcdic values are incorrect", "123:64:94:64:096:64:096:64:096:64:096:64:096:64:096:47:47:47", result )
assertEquals ( "org.eclipse.vorto/1.0.0/Location.zip", modelId. getFileName ( ) )
assertNotNull ( "importer service is null", importer )
Assert. assertEquals ( IntNode. valueOf ( 0 ), result )
assertThat ( getSelectedItems ( ), is ( empty ( ) ) )
Assert. fail ( )
assertEquals ( 0, queryFactory3. delete ( "id" ) )
assertEquals ( expecting, t. toStringTree ( ) )
assertTrue ( entity. getId ( )!= null &&! entity. getGreetings ( ). equals ( null ) && entity. getGreetings ( ). equals ( null ) )
assertEquals ( new BigDecimal ( 123 ), arrayFirst )
assertTrue ( wflows. size ( ) == 0 )
assertTrue ( providerAInvoked )
assertEquals ( "invoice.toJson('fetchPlan:customer:1,orders:2')", p. toString ( ) )
assertThat ( issues, is ( empty ( ) ) )
Assert. assertTrue ( "Authenticated", authenticated )
assertEquals ( OK, response. getStatus ( ) )
assertEquals ( 0, scores. getScore ( ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( query, expectedQuery ) )
assertTrue ( sim )
assertEquals ( DOUBLE, v8Object. getType ( "key" ) )
Assert. assertEquals ( "importer_name,currentFileName,currentLine,totalLineToProcess,totalLineProcessed,statusMessage,processing", CSV )
assertEquals ( 1, this. chartChangeEvents. size ( ) )
assertEquals ( "2015-02-18T09:54:36.366Z", aiResponse. getTimestamp ( ). getTime ( ) )
assertThat ( options. isStrict ( ), equalTo ( false ) )
org. junit. Assert. assertEquals ( expected, actual )
assertPermanentCount ( playerA, "Silvercoat Lion", 1 )
assertPaths ( e, a, b )
assertTrue ( urls. size ( ) > 0 )
Assert. assertEquals ( "queueInfo decoded correctly", returned. getQueueChildren ( ). size ( ), 1 )
assertNotNull ( simpleComponent )
assertThat ( fieldsCaptor. getValue ( ). getRequired ( "x" ), is ( equalTo ( "x" ) ) )
assertEquals ( 4, acc. get ( ) )
assertEquals ( "1234567", sb. toString ( ) )
assertArrayEquals ( result, CompactEncoder. packNibbles ( test ) )
assertNotNull ( processInstance. getId ( ) )
assertEquals ( "Privacy policy retrieved but it should not be.", null, errorException )
assertEquals ( filename, instance. getFilename ( ) )
assertNotNull ( securityContext )
assertEquals ( "SELECT * FROM Class", q. toString ( ) )
Assert. assertEquals ( driver ( ). getTitle ( ), "We Arrive Here" )
assertNotEquals ( frameData1, frameData2 )
assertEquals ( 0, auctionService. getAuctionData ( ). size ( ) )
assertEquals ( "/a/b={c}", resolved. toString ( ) )
assertTrue ( hand. getClassifier ( ) == HandClassifier. TWO_PAIR )
assertEquals ( "callback-example", model. getCallbackUrl ( ) )
assertThat ( description. toString ( ), is ( "a list whose elements elements are ANYTHING" ) )
assertEquals ( 200, resp. getStatus ( ) )
assertEquals ( expected, actual )
assertTrue ( Pattern. matches ( "(?s).*/dtablecolumnclasses.jsp PASSED.*", page. asXml ( ) ) )
assertEquals ( mock, prepare )
assertNotNull ( result )
assertTrue ( point. equals ( point ) )
assertEquals ( expResult, result )
assertSame ( toTest, toTest. setType ( ParamType. getDefault ( ) ) )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
assertThat ( getterMethod. getReturnType ( ). getName ( ), is ( "java.lang.Object" ) )
assertThat ( inputStream, notNullValue ( ) )
Assert. assertTrue ( signatureValid )
AssertJUnit. assertFalse ( "filter matches object, but it should not", match )
assertEquals ( header, fixture. getHeader ( ) )
assertEquals ( expect, pred )
assertEquals ( Color. blue. getRGB ( ), thumbnail. getRGB ( 49, 99 ) )
assertEquals ( 0.0d, mock. doubleReturningMethod ( 12 ), 0.0d )
assertEquals ( "alt2\\n", found )
assertThat ( result, is ( expct ) )
assertEquals ( "The arguments were not added", Arrays. asList ( "-server:https://tfs02.codeplex.com" ), builder. build ( ). getArguments ( ) )
assertEquals ( EmailRecipientUtils. BCC, analyser. getType ( new InternetAddress ( "mickey@disney.com" ) ) )
assertDurationEquals ( dv3, dv1. minus ( dv2 ) )
assertTrue ( milli1. equals ( milli2 ) )
assertThat ( impl. getAxioms ( ontologyId ). isEmpty ( ), is ( true ) )
assertOut ( "/**\\n * @const\\n * @type {*}\\n */\\nRoyaleTest_A.foo" )
Assert. fail ( "Test should not go here - invalid deployment (invalid value of resteasy.scan.resources)!" )
assertThat ( result, nullValue ( ) )
assertEquals ( 0.5d, config. deactivateDouble ( ), 0.01d )
assertNotNull ( instance )
assertNotNull ( wsdl1 )
assertFalse ( lock2. tryLock ( 10, TimeUnit. MILLISECONDS ) )
Assert. assertFalse ( sampling )
assertEquals ( tree. getChildCount ( tree. getRoot ( ). getChildren ( ). get ( 0 ) ), 1 )
assertEquals ( "Unexpected state class", FormLayoutState. class, state. getClass ( ) )
assertEquals ( buf. toString ( ), result )
observer. assertObservations ( "1", PhaseId. APPLY_REQUEST_VALUES, PhaseId. APPLY_REQUEST_VALUES, PhaseId. RESTORE_VIEW, PhaseId. RESTORE_VIEW, PhaseId. UPDATE_MODEL_VALUES )
assertEquals ( 12, groups. size ( ) )
assertEquals ( actAr, actAa )
Assert. assertEquals ( pn. getFullName ( ), "Sr. Taylor Bob Wilson Mark" )
assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 0 ) ) )
assertThat ( results, is ( Collections. emptyList ( ) ) )
assertSame ( config, result )
assertEquals ( "Double-It not doubling positive numbers", 20, resp )
assertEquals ( "http://serial-jssc?port=COM3&name+with+spaces", uri. toString ( ) )
N4CliHelper. assertExpectedOutput ( expectedString, out )
Assert. assertTrue ( lastElementIsSame ( store, new WeightedObservedPoint ( w, x, y ) ) )
assertEquals ( "root.user1group.user1", user1Leaf. getName ( ) )
assertTrue ( gw. lines. isEmpty ( ) )
assertEquals ( 400, fail )
assertEquals ( 100, ( ( Number ) proxy ). longValue ( ) )
assertNotNull ( model )
assertEquals ( true, parsedTypes. get ( 0 ) instanceof RedditSubreddit )
assertTrue ( expectedDirection. equals ( reflectedDirection ) )
assertEquals ( expected, value )
assertEquals ( "try", result )
assertNotNull ( response )
assertEquals ( isLeapYear ( year ), test. isLeapYear ( ) )
Assert. assertTrue ( Precision. equals ( 7.0, MathArrays. distance1 ( p1, p2 ), 1 ) )
assertTrue ( xml. contains ( "LinkedVerses" ) )
assertEquals ( expectedApiVersion, Deencapsulation. getField ( httpHsmSignatureProvider, "apiVersion" ) )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertTrue ( mse. getTotalError ( ) < maxError )
assertEquals ( "{\\"key\\":null,\\"key2\\":\\"value\\"}", writer. toString ( ) )
assertEquals ( "/%C3%8D", encoded. decode ( ) )
assertFalse ( auth. authenticate ( USERNAME, PASSWORD, mockServerSession ) )
assertEquals ( expected, output )
assertEquals ( "Expected 4 results!", 4, n )
Assert. assertTrue ( protectedPage. getBody ( ). asText ( ). contains ( "You are logged in as " ) )
assertThat ( test. getFunctionName ( ), is ( "columnNumber" ) )
Assert. assertEquals ( date, scheduling. getStartupTime ( ) )
assertAnnotations ( 2, Coordinate. class, new TestCoordinate ( 0, "125,51.507", "dd", TYPE_POINT_COORDINATES_0_125_51_507 ), new TestCoordinate ( 1, "-3.188,55.953", "dd", TYPE_POINT_COORDINATES_55_953_51_507 ) )
assertEquals ( "<html><head><noscript></noscript></head><body><img src=\\"foo\\" /><p>Hello</p></body></html>", TextUtil. stripNewlines ( doc. html ( ) ) )
assertEquals ( result, expecting )
assertMissing ( "list", 1L )
assertEquals ( "foo", s )
assertEquals ( 1, patient. getCustomId ( ). getUndeclaredExtensions ( ). size ( ) )
Assert. assertEquals ( "normalize=foo", normalizer. normalize ( "foo" ) )
assertThat ( chain, is ( sameInstance ( builder ) ) )
assertEquals ( "ID3v2ChapterTOCFrameData [id=null, startTime=0, endTime=0, subframes=[]]", frameData. toString ( ) )
assertEquals ( "test", ( ( Br ) obj ). getId ( ) )
assertNotNull ( cfid2 )
assertEquals ( "bcse", e1, e2 )
assertEquals ( "(abc 34)\\n", found )
assertTrue ( runtime instanceof MockIndirectBaseClass )
assertThat ( byValue. getSingleResult ( ). getF ( ), equalTo ( f1 ) )
testRunner. assertAllFlowFilesTransferred ( PutORC. REL_FAILURE, 1 )
assertThat ( this. capistranoCommandBuilder. build ( ), hasItem ( "--verbose" ) )
assertEquals ( "icecream", res. get ( "foo" ) )
Assert. assertFalse ( nodes. isEmpty ( ) )
assertEquals ( 0, Files. readAllBytes ( link ). length )
assertTrue ( desc. isEmpty ( ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( expectedResult, result )
assertThat ( result, is ( jsonArrayOfStrings ( "Alice", "Bob", "Alice" ) ) )
assertEquals ( "3 写薪� �邪蟹��", t. format ( new Date ( 2629743830L * 12L * 3L ) ) )
runner. assertNotValid ( credentialsService )
assertEquals ( "Test if value red from file equals value stored", mlArray, mlArrayRetrieved )
assertEquals ( "Testing Course", courses. get ( 0 ). getName ( ) )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( transform instanceof Modifier. Defaultr )
assertTrue ( "Expected non-null victim in rollback",! ex1. victim ( ) )
assertEquals ( R. style. Image_Dialog_Icon_Default, shadowDialog. getIcon ( ). getIconId ( ) )
assertEquals ( "SELECT a AS A1, b AS A2, c AS A3 FROM test", select. toString ( ) )
assertEquals ( instance, AbstractEntity. load ( MyEntity. class, 3L ) )
assertEquals ( "", result )
assertNull ( task )
assertEquals ( getLabel ( ), 0.0, eye. minus ( m3 ). getEuklideanValue ( ), TOLERANCE )
assertEquals ( 2, results. size ( ) )
assertEquals ( 0.5, result. getUniquenessRatio ( ), 0.0 )
assertSame ( value, bound. value ( ) )
Assert. assertEquals ( 1.0, DoubleArrays. sum ( props ), 1e-5 )
Assert. assertNull ( caixa )
assertEquals ( "1.2\\t2.3\\t3.4\\n" + "4.5\\t5.6\\t6.7\\n", out. toString ( ) )
assertEquals ( "<a href=\\"?titi=456\\">link</a>", result )
assertEquals ( "The message is not the same the one passed into the constructor!", message, this. tag. getMessage ( ) )
assertTrue ( ping )
assertEquals ( inc. get ( ). get ( ), outRA. get ( ). get ( ) )
assertArrayEquals ( data, getInputStream ( ). readPackedFloats ( data. length / 3, 3 ), 0.001f )
assertEquals ( new Double ( 123 ), arrayFirst )
assertEquals ( "admin", nodeName )
runner. assertAllFlowFilesTransferred ( SelectHiveQL. REL_FAILURE, 1 )
assertEquals ( true, endpoint. session. authorized )
assertEquals ( 0.3, values. get ( new MultivectorComponent ( "out", 0 ) ), 10E-3 )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertEquals ( 1, x. size ( ) )
Assert. assertEquals ( 1, inserted. intValue ( ) )
assertFalse ( hasAttachmentType )
assertEquals ( doc. getContent ( ), FileUtils. read ( new File ( "src/test/resources/doc/doc2.txt" ), System. getProperty ( "file.encoding" ) ) )
assertSQLException ( ( ) -> metadata. getParameterClassName ( 2 ) )
assertThat ( xmlResult, CompareMatcher. isSimilarTo ( out. toString ( ) ). ignoreWhitespace ( ). withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors. byNameAndText ) ) )
assertEquals ( 0, constraintViolations. size ( ) )
assertNotNull ( method. toString ( ), m )
Assert. assertEquals ( result, byteArrayInputStream )
assertTrue ( "The output file is not correct.", checkOutputFileExists ( "in_newCustomElement.uxf" ) )
assertNotNull ( result )
assertEquals ( "getter value", ObjectUtils. getValue ( object, "item" ) )
assertNotNull ( service )
assertEquals ( "Row should have empty row", 0, rowMeta. getRowMeta ( ). getFields ( ). size ( ) )
assertThat ( isExpectedData, is ( true ) )
assertEquals ( original, newone )
assertEquals ( 5, d, 0 )
Assert. assertTrue ( data. hasChanged ( "com.examples.test.ClassAnalyzerTest.JavaProject" ) )
assertEquals ( manager, instance. getManager ( ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Record/>", elem. toXml ( ) )
assertFalse ( incorrect. isValid ( ) )
assertEquals ( new InetSocketAddress ( "1.2.3.4", Constants. DEFAULT_LOCAL_ADDRESS ), arguments. getLocalAddress ( ) )
assertEquals ( expected, javaSource. getEscapedSourceCode ( ) )
assertEquals ( radius, 0.0 )
assertEquals ( MULTIPLE_INPUT_RESULTS. size ( ), resultsFound. size ( ) )
assertTrue ( result instanceof Date )
assertEquals ( "null is this-is-null-value", newText )
assertThat ( results, contains ( ( Matcher ) hasEntry ( "name", "John Doe" ) ) )
assertThat ( response. getStatus ( ), equalTo ( Status. NOT_FOUND. getStatusCode ( ) ) )
assertEquals ( MediaType. APPLICATION_XML_TYPE, response. getType ( ) )
Assert. assertTrue ( e. toString ( ). contains ( "Not found: Table" ) )
assertThat ( greetings, contains ( "Peter, Paul, Mary" ) )
assertTrue ( cygnusGroupingRules. getFields ( ). isEmpty ( ) )
assertTrue ( "The RMS relative error per bucket, " + RMSRelativeError + ", exceeds the maximum of " + maximumRelativeError, RMSRelativeError <= maximumRelativeError )
Assert. assertTrue ( testStr. equals ( new String ( result ) ) )
assertEquals ( Constants. ACCESS_TOKEN_ENDPOINT, result )
assertNotNull ( Deencapsulation. getField ( jobsResponseParser, "cloudToDeviceMethod" ) )
assertEquals ( false, start )
context. assertEquals ( 500, res. statusCode ( ) )
assertTrue ( type. isArray ( ) )
assertEquals ( "1234.5", result )
Assert. assertTrue ( optimizer. getRootMeanSquaredError ( ) < 1E-10 )
mockery. assertIsSatisfied ( )
Assert. assertEquals ( "Hello World", outStream. toString ( ) )
assertTrue ( landsatMetadata instanceof Landsat8Metadata )
assertPut ( contentBytes )
assertFalse ( GitFileUtils. isFile ( "/test_file.sh", commit. getName ( ), repo ) )
assertEquals ( 2, appClient. getAllRegistrationNames ( ). size ( ) )
assertThat ( result, is ( expectedCharset ) )
assertEquals ( "<text>", label )
Assert. assertTrue ( ( afterDate. getTime ( ) - baseDate. getTime ( ) ) < 1000 )
context. assertEquals ( "Squid", handler. body ( ) )
assertEquals ( "value 1", sel. getValue ( ) )
assertEquals ( "HELLO", buffer. toString ( ) )
assertEquals ( filterView, filterEditor. view )
Assert. assertNull ( spanCache. getSourceInfo ( null, null ) )
assertTrue ( "Should get the same string as str11", se. toString ( ). equals ( str11 ) )
Assert. assertNotSame ( primaryPrin1, primaryPrin2 )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
Assert. assertEquals ( 4, p. f ( 4 ) )
assertEquals ( 0, result )
Assert. assertNotNull ( dataBinding )
assertTrue ( b )
assertThat ( scope, equalTo ( new SciTokenScope ( QUEUE, "/" ) ) )
assertValueEqualsResultSet ( rs, Arrays. < Object > asList ( ROW7, ROW8, ROW9 ) )
assertFalse ( replaced )
assertEquals ( "Clusterid should match with the existing one", "currentcid", storage. getClusterID ( ) )
assertTrue ( CertificateUtilExtended. isSelfSignedCertificate ( certPem ) )
assertEquals ( expectedTransportCosts + expectedActivityCosts, iCosts, 0.01 )
assertSame ( ThreadNameCachingStrategy. UNCACHED_STRATEGY, tns )
assertTrue ( p. getStatusSimple ( ). toString ( ). equals ( "active" ) )
assertEquals ( windowWidth, reservoir. getWindowWidth ( ) )
assertTrue ( ex. isPrime ( 37 ) )
assertThat ( result, is ( true ) )
assertEquals ( deleteTemplate1, deleteTemplate1Duplicate )
assertNull ( s )
assertXMLEqual ( "Invalid message", expected, message )
assertTrue ( "a should be less than b", compare < 0 )
assertThat ( "Wrong type of myTestFactory.", myTestFactory. getDelegate ( ), CoreMatchers. instanceOf ( SocketConnectionFactory. class ) )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertEquals ( "Should return failure", "failure", jsonObj. get ( "status" ). getAsString ( ) )
assertEquals ( timestamp, buttonFunctionblockData. getStatusProperty ( "sensor_value" ). get ( ). getValue ( ) )
assertTrue ( "sin() had errors in excess of " + MAX_ERROR_ULP + " ULP", maxerrulp < MAX_ERROR_ULP )
assertEquals ( "aTestString", classUnderTest. getFieldLength ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertEquals ( lastValue, "EndNode8" )
assertThat ( pageable, is ( instanceOf ( NoSpringData. class ) ) )
assertEquals ( "http://somens.org/type1:316", type. getName ( ) )
assertArrayEquals ( refar, d. getResult ( ) )
assertEquals ( lots, SpanListMarshaller. get ( ). parseList ( response. getContent ( ) ) )
assertEquals ( RequestResult. FAILURE, requestResult )
assertEquals ( 0, Context. countActive ( ) )
assertThat ( formatterOutput, containsString ( "" + "  Given first step      # path/step_definitions.java:3\\n" + "\\n" + "      the stack trace\\n" ) )
assertEquals ( args. getVar1 ( ), "val0" )
Assert. assertTrue ( connected )
login. assertIsConnectedAs ( "nouser" )
assertEquals ( p. format ( new Date ( 1 ) ), "Jetzt" )
assertTrue ( filter. matches ( operation, poolInfoMap ) )
assertEquals ( dialect. getURL ( conn ), "jdbc:jndi://127.0.0.1:12354/table?accessType=JNDI&column=name&nullable=true" )
assertThat ( getPodSpec ( jobSpec ). getRuntimeClassName ( ), nullValue ( ) )
testTwo. assertIsSatisfied ( )
Assert. assertNull ( busca )
Assert. assertEquals ( "should have found two resources", 2, resources. size ( ) )
Assert. assertEquals ( 5, operation. operations. size )
assertThat ( ts. toEpochMilli ( ), is ( 0 ) )
assertEquals ( columns. size ( ), 4 )
Assert. assertTrue ( Arrays. equals ( data, xdata ) )
assertThat ( jsonViewAnnotation. value ( ), equalTo ( 2 ) )
Assert. assertEquals ( IrodsRuleInvocationTypeEnum. IRODS, actual )
AssertionUtils. multiAssertEquals ( createAsDocument11, response6. getResponseObject ( ) )
assertEquals ( mockedContractState, invoke ( testResponseData, "getContractState" ) )
assertLine ( "dessicated dog droppingsItasty ", b, false )
assertEquals ( 401, r. getStatus ( ) )
assertEquals ( expectedQuery, actualQuery )
assertTrue ( thrown )
assertEquals ( expected, actual )
assertEquals ( - 123456789012L, ConfigUtils. getLong ( config, 0, "some-long" ) )
Assert. assertEquals ( expected, actual )
assertEquals ( result, event )
assertEquals ( 204, r. getStatus ( ) )
assertEquals ( "Hi", template. get ( "doesnotexist" ) )
Assert. assertTrue ( "Incorrect renderer supplied", getWebXmlRenderer ( component ) instanceof WStyledTextRenderer )
Assert. assertNotNull ( file )
Assert. assertNull ( spec. extractTimestamp ( mockTable, null, "a" ) )
assertNotEquals ( insertPerson, insertSamePerson )
assertEquals ( true, classUnderTest. getSQLShareHistory ( ) )
assertEquals ( "randomUser", UserGroupInformation. getLoginUser ( ). getName ( ) )
Assert. assertArrayEquals ( correctStringSet, randomPurmutationSet )
assertTrue ( "1.2.0.0 <= 1.2.0", ruleEvaluator. evaluateBooleanRule ( rule, values ) )
Assert. assertTrue ( instance. getOverLaps ( source, target ). isEmpty ( ) )
assertTrue ( BufferedImageComparer. isSame ( originalImage, copyImage ) )
assertPermanentCount ( playerA, "Smuggler's Copter", 1 )
assertFalse ( sameElts ( x1, x2 ) )
assertThat ( getCreatedPodSpecContainer ( ). getVolumes ( ), allOf ( hasVolume ( "volume1", "/domain-path1" ), hasVolume ( "volume2", "/server-path" ) ) )
Assert. fail ( )
assertEquals ( "Hello world", result [ 0 ] )
Assert. assertEquals ( "moduleA", foundModule )
assertEquals ( "inv2", m. getPayload ( ) )
assertThat ( encryptor. checkPassword ( testPassword, null ), is ( false ) )
assertSame ( bfi, interceptor. getBindingFaultInfo ( message, ex ) )
Assert. assertEquals ( "Key\\tVal", firstLine )
assertNotNull ( result )
assertArrayEquals ( NOT_DECODED, data, object. getData ( ) )
assertNotNull ( accessToken )
Assert. assertTrue ( "Fail find by First Name", list. size ( ) == 1 )
assertions. isNotGreaterThan ( null )
assertTrue ( theInstance. getClassInformation ( ) instanceof GameObjectClassInformation )
Assert. assertTrue ( foundChars )
assertFalse ( etlKeyA. equals ( etlKeyB ) )
assertEquals ( arrayBuffer. getV8ArrayBuffer ( ). getV8ArrayBuffer ( ). getV8ArrayBuffer ( ), v8ArrayBuffer )
assertThat ( generatedReportText, isSimilarTo ( expectedReport, "timestamp" ) )
assertEquals ( expectedDependencies, dependencies )
assertThat ( outputDirectory. getPath ( ), is ( "custom-reports-directory" ) )
assertEquals ( 0, result. size ( ) )
assertEquals ( "T_DefaultValueTest", id )
assertNull ( responseRemove )
assertThat ( thrown, instanceOf ( QueryFailedException. class ) )
assertFalse ( skillConstraint. fulfilled ( insertionContext ) )
assertTrue ( processedResponse )
assertEquals ( expected, sql [ 0 ]. toSql ( ) )
assertThat ( newShare. getHours ( ), equalTo ( 15 ) )
Assert. assertEquals ( tree. getQuery ( ). getJoins ( ). get ( 0 ). toString ( ), "a.firstName" )
assertTrue ( s. isSentToRawPubKey ( ) )
assertNotNull ( "Social Profile (JSON):\\n", profile )
assertMappedFieldValueIs ( "/content/resource/child" )
assertNumberOfViolations ( constraintViolations, 0 )
assertEquals ( "Multiple simple parameters: 0 and 1 and also 2", f. format ( ) )
assertEquals ( m1, m2 )
assertEquals ( DiscordianDate. of ( 2012, 2, 25 ), test )
assertEquals ( expectedSource, instrumentedSource )
Assert. assertEquals ( 100, counter. getCount ( ) )
assertTrue ( "Selection changed", "First row should be selected", "First row should be selected". equals ( row. getText ( ) ) )
assertFalse ( wrapper. hasReceivedMessage ( ) )
Assert. assertEquals ( "No port specified", portError. getCode ( ) )
assertThat ( rescaled, equalTo ( ( ListDouble ) new double [ ] { 0, 1, 2, 3, 4, 5 } ) )
assertSkipped ( myTasks, 2, 3 )
assertTrue ( candidates. contains ( new Candidate ( "kouril", "yourile" ) ) )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>,</6/0/6>", strLinks )
assertEquals ( HardActivityConstraint. ConstraintsStatus. NOT_FULFILLED_BREAK, status )
assertEquals ( adminProperties. getRefresh ( ), commandArgumentCaptor. getValue ( ) )
Assert. assertEquals ( Integer. valueOf ( 1 ), result )
Assert. assertEquals ( 1, loggerCount. getWarningCount ( ) )
assertEquals ( 1, conflicts. size ( ) )
assertFalse ( out1 instanceof Cloneable )
assertNull ( content )
assertTarget ( "[['a'], ['  ', 'b', 'c']]" )
assertTrue ( latch. await ( 4, SECONDS ) )
assertNotEquals ( searchScroll1, searchScroll2 )
assertThat ( students. size ( ), greaterThan ( 3 ) )
assertEquals ( "123", mockResult. included ( "hash" ) )
assertEquals ( "1", result. getXdmValue ( ). intValue ( ) )
assertContentSame ( rs, rc, columnParam1 )
Assert. assertFalse ( isAdmin )
Verify. assertSize ( 2, dogLovers )
assertTrue ( "No exception thrown", ex )
assertTrue ( result. contains ( threadsSchedule ) )
assertEquals ( 6 + 60, max )
assertThat ( result, is ( outbound ) )
assertEquals ( "Invalid type", Schema. Type. NULL, schema. getType ( ) )
Assert. assertTrue ( returnedLevels. isEmpty ( ) )
Assert. assertEquals ( "5f4e8c8d8e7b9f2c8e0a7b9f2c8e0a7b9f2c8e0a7b9f2c8e0a7b9f2c8e0a7b9f2c8e0a7b9f2c8e0a7b9f2c8e0a7b9f", Hex. encodeHexString ( hashed ) )
Assert. assertEquals ( 1, violations. size ( ) )
assertEquals ( "Variable not set", 0.0, res. getMinLevel ( ) )
ImgLib2Assert. assertIntervalEquals ( expected, result )
assertEquals ( 0, v8. getObjectReferenceCount ( ) )
Assert. assertEquals ( "test", e. tag ( ) )
Assert. assertEquals ( expected, FileUtils. readFileToString ( new File ( FileConstants. LOGODOWNLOADSERVLET ) ) )
assertEquals ( 100, results. size ( ) )
assertNotNull ( nn1 )
context. assertIsSatisfied ( )
Assert. assertFalse ( secure )
assertTrue ( CompilationUtil. memberMatchesMethodID ( member, "821", parseDictionary ) )
assertDefaultContactPoints ( "hello" )
assertThat ( report, is ( not ( nullValue ( ) ) ) )
assertThat ( BondBasedDBStereoTest. hasBond ( g, N, "N" ), is ( true ) )
assertNotNull ( member )
objectsWithCustomComparisonStrategy. assertIsIn ( info, "Luke", values )
Assert. assertEquals ( 1, TestHelpers. getOkCount ( cnx ) )
assertNull ( "Listener should not have been called", getGridElement ( ). getCellAt ( 0, 0 ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertEquals ( argumentCaptor. getValue ( ). getLabels ( ), expectedLabels )
assertArrayEquals ( expectedPq, pq, delta )
assertSame ( result, registry. getDerivingMetrics ( DerivingMeter. class, filter ) )
assertThat ( partitionKeyValue. toJson ( ), equalTo ( mapper. writeValueAsString ( Collections. singletonList ( data. city ) ) ) )
assertFalse ( "Column width should not be increased.", isColumnWidthAdjusted ( ) )
assertSame ( fn. getClass ( ), ClassHelper. getRealClassFromClass ( fn. getClass ( ) ) )
assertNotNull ( result )
Assert. assertEquals ( driver ( ). getTitle ( ), "We Arrive Here" )
assertEquals ( config. getReceiveBufferSize ( ), acceptedConfig. getReceiveBufferSize ( ) )
assertEquals ( "XML", xs. getDocType ( ) )
assertEquals ( 30112L, person. get ( "id" ) )
assertNotNull ( action )
Assert. assertEquals ( xmlEsperado, FabricaDeObjetosFake. getNFNotaInfoICMSTotal ( ). toString ( ) )
Assert. assertThat ( "ReponseList.size", responseList. size ( ), lessThanOrEqualTo ( 2 ) )
Assert. fail ( "IllegalArgumentException should be thrown." )
Assert. assertFalse ( fastqBuilder. sequenceQualityLengthsMatch ( null ) )
Asserts. check ( headerKeySize > 0 && headerKeySize <= 200, " Fail to extract http header" )
assertTrue ( g. toText ( ). equals ( wkt ) )
assertTrue ( ferp. isReadable ( Form. class, null, null, MediaType. valueOf ( "text/custom" ) ) )
assertTrue ( "Only two sets of metrics should be visible.", httpOutput. getResults ( ). size ( ) > 0 )
assertNoSpans ( )
assertEquals ( "Wrong number of accounts", 17, accounts. size ( ) )
assertEquals ( expResult, result )
assertEquals ( "(a = 1) and (b = 2) and (c = \\"C\\")", e. toString ( ) )
assertEquals ( NOT_DECODED, true, object. useNetwork ( ) )
assertTrue ( ExceptionTestUtility. sameMembers ( expectedRep, Collections. EMPTY_SET, s. validate ( ) ) )
assertEquals ( false, result )
assertEquals ( false, result )
assertEquals ( 0.669, value, EPSILON )
assertEquals ( "Unexpected allocation time.", new Long ( 1L ), allocation. getAllocationTime ( ) )
assertEquals ( 99.0, series. getY ( 4 ) )
assertEquals ( lineSeparator + "hello" + lineSeparator, new String ( data ) )
assertEquals ( 2, names. size ( ) )
assertFeatureValues ( expected, testQuery, testText, getChain ( ) )
assertSame ( test, base )
assertThat ( result. toString ( ), is ( "test.ripe.net" ) )
iterables. assertContainsSequence ( info, actual, sequence )
assertTrue ( called [ 0 ] )
Assert. assertEquals ( "--simple-boundary\\r\\n" + "\\r\\n" + "It does NOT end with a linebreak.\\r\\n" + "It does end with a \\\\r linebreak.\\r\\n" + "It does end with a \\\\n linebreak.\\r\\n" + "The last one" + "\\r\\n", sb. toString ( ) )
assertEquals ( 1L, result )
assertThat ( result, is ( true ) )
assertThat ( result. getResultCode ( ), is ( ResetPasswordResultCode. INVALID_EMAIL_ADDRESS ) )
assertThatXmlIsReadable ( writeIn )
this. assertVerification ( )
Assert. assertEquals ( "einganzlangeswort", result )
assertEquals ( result, Boolean. TRUE )
assertTrue ( target1. toString ( ). equals ( target2. toString ( ) ) )
assertThat ( selectRandomly. selectSolution ( Arrays. asList ( sol1, sol2 ) ), is ( sol1 ) )
Assert. assertNull ( actual )
assertEquals ( 2, cnt )
assertFalse ( consumerPrefetch. running )
assertNotNull ( Transcription. fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( true, isGood )
assertEquals ( "0001FEF", HexDump. readCompact ( "0001FEF" ) )
assertNotNull ( authRequest )
assertEquals ( 200, connection. getResponseCode ( ) )
Assert. assertFalse ( HasTopLevelNegationVisitor. hasTopLevelNegation ( script ) )
assertSame ( result, this. logger )
Assert. assertEquals ( expectedIds, actual )
assertFalse ( volume. equivalentFileSystems ( other ) )
assertEquals ( "Unexpected primary style name", "v-table", state. primaryStyleName )
assertSame ( child, container. child. get ( ) )
assertEquals ( outputFile, sink. getSink ( ) )
assertThat ( g. toSmiles ( ), is ( "C=[C@@]=CC" ) )
Assert. assertEquals ( "did not get expected xml", expected, collInp. getParsedTags ( ) )
assertEquals ( expectedMap, map )
assertEquals ( HttpStatus. UNAUTHORIZED_401, resp. getStatus ( ) )
assertEquals ( "2 workflow has multiple workflows", 2, workflowBundle. getWorkflows ( ). size ( ) )
assertEquals ( expectedValue, result )
assertEquals ( expected, uri )
Assert. assertTrue ( valid )
assertTrue ( result. length ( ) > 0 )
Assert. assertEquals ( statusCode, 302 )
assertThat ( result, is ( page ) )
assertTrue ( publications. size ( ) > 0 )
assertThat ( outputDirectory. getPath ( ), is ( "thucydides-reports" ) )
assertEquals ( "12345678901234567890123456789012", request. getAuthToken ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType. READ_PUBLIC, ScopePathType. AFFILIATIONS_UPDATE )
assertTrue ( "Oh no! No mapped object! ", store. size ( ) > 0 )
Assert. assertEquals ( "Not leader", participant2, currentLeader )
assertEquals ( STATIC, CorrectEquals. staticValue )
Assert. assertEquals ( "SELECT 'A' LIKE CONVERT(blob_col USING latin1)\\nFROM tbl_name;", text )
Assert. assertTrue ( errors. hasGlobalErrors ( ) && errors. getGlobalError ( ). getCode ( ). equals ( TenantPermissionValidator. ERROR_CODE_EMPTY_SELECTED_IDS ) )
assertThat ( responseHandler. getMessages ( ), hasSize ( 0 ) )
assertEquals ( key. getTenantIdField ( ), "test.id.key.field" )
assertArrayEquals ( new byte [ ] { 0, 1, 2, 3, 4, 5, 6, 7 }, id )
Assert. assertTrue ( resultado )
assertThat ( mfp. getProperty ( ), equalTo ( "production" ) )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
Assert. assertEquals ( "[\\"a\\",\\"b\\",\\"c\\",\\"d\\"]", jsonArray2. toString ( ) )
assertEquals ( 1, jobExecutor. getJobsAdded ( ) )
assertThat ( parameters, is ( "?searchView=own&orderBy=createdNewest&show=omAll&minSupportCount=0" ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
JSONAssert. assertEquals ( "Message", "{id:12346}", actual, LENIENT )
assertEquals ( Integer. of ( 2 ), result )
assertEquals ( rootSchemaJson, actual )
assertThat ( interval, is ( ser ) )
assertEquals ( expected, json )
Assert. assertEquals ( expected [ key ], actual. get ( key ) )
assertTrue ( service. artifactExists ( "org/dl.bukkit.org/package-test-1.0-SNAPSHOT" ) )
Assert. assertEquals ( 2, counter. get ( ) )
assertFalse ( "No supportet type '" + type + "' for " + toTest + "' conventions should not be considered as IMAPP.", ModisDaacUtils. isShitty ( toTest ) )
assertFalse ( obs. isDirty ( ) )
assertViewName ( mav, "editProfile" )
Assert. assertEquals ( Response. Status. INTERNAL_SERVER_ERROR. getStatusCode ( ), response. getStatus ( ) )
assertNull ( result )
assertThat ( runtime. exitStatus ( ), is ( equalTo ( ( byte ) 0x0 ) ) )
assertEquals ( ByteString. decodeHex ( "746573741824" ), data. readByteString ( ) )
assertThat ( definition. tableEntryByTypeTransformer ( ). transform ( toEntry ( "key", String. class, "value" ), toEntry ( "key", String. class, "value" ), cellTransformer ), is ( "key=value" ) )
assertThat ( result, is ( false ) )
Assert. assertFalse ( policy. canRetry ( context ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 02" ) )
Assert. assertEquals ( expResult, result )
assertEquals ( 0, lines. size ( ) )
Assert. assertEquals ( "Hello ", output )
Assert. assertNotNull ( a )
assertEqualToResource ( file, newBinaryVersion )
Assert. assertTrue ( MF4JUtils. validateManifest ( file ) )
assertNull ( result )
assertOut ( "/**\\n * @interface\\n */\\nIA = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('IA', IA);\\n/**\\n * @type {Object}\\n */IA.prototype.foo1;" )
assertThat ( result, equalTo ( 31 ) )
Assert. assertTrue ( isSuccess )
assertMockEndpointsSatisfied ( )
assertTrue ( mdg. checkForHeroesCollection ( heroesCollectionNode ) )
Assert. fail ( "Shouldn't be able to get a 404 response" )
assertTrue ( DateTimeUtils. isTime ( userDateTime ) )
assertTrue ( proxy. isStopped ( ), "Listener didn't exit" )
assertEquals ( 0, elements. size ( ) )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1, ScopePathType. READ_PUBLIC, ScopePathType. PEER_REVIEW_READ_LIMITED )
Assert. assertEquals ( "aMO2w7bDtj8=", event. getMessage ( ) )
assertEquals ( 4, BufferTools. indexOfTerminator ( buffer, 0, 2 ) )
assertEquals ( "Got wrong result", false, actual )
assertObjectEquals ( "[{}]", p. run ( bs, in, sa ) )
assertEquals ( readConcernString, parsedReadConcern )
Assert. assertNotNull ( blogEntry )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( optimizedQuery, expectedQuery ) )
assertTrue ( ret )
assertEquals ( ComponentElementGetValue. clearPasswordField. getValue ( ), null )
assertOut ( "/**\\n * @private\\n * @const\\n * @type {number}\\n */\\nRoyaleTest_A.foo = 420" )
context. assertTrue ( storage. getMockData ( ). containsKey ( resourceURI ) )
Assert. assertTrue ( item. matches ( divNode ) )
assertEquals ( 18, file. length ( ) )
assertNull ( type )
assertEquals ( "abcde", Tinify. getClient ( ). getKey ( ) )
assertTrue ( "Can't find statement", m. contains ( expectedStatement ( SSH_BASE ) ) )
assertTrue ( p. toFile ( ). exists ( ) )
assertEquals ( 1, correlatedExecutions. size ( ) )
Assert. assertEquals ( expected, actual )
assertThat ( result, is ( false ) )
assertEquals ( "bc\\n", found )
assertEquals ( liveSearchDropDown, liveSearchDropDown. init ( ) )
assertThat ( source. getName ( ), is ( nullValue ( ) ) )
assertThat ( converter, is ( instanceOf ( MySecondConverter. class ) ) )
assertThat ( recs2, contains ( min ) )
assertEquals ( page, victim. get ( 1 ) )
assertEquals ( "{\\"estadual\\":{\\"email\\":\\"s@inscricao.com\\",\\"status\\":\\"ok\\"}}", writer. toString ( ) )
assertEquals ( Response. Status. OK. getStatusCode ( ), target. request ( MediaType. APPLICATION_XML ). get ( ). getStatus ( ) )
assertTrue ( "Didn't see new properties", page1. asdf ( ). contains ( "asdf" ) )
Assert. assertEquals ( "3 啶膏う啶�啶灌げ啷�", t. format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertNotNull ( reporter )
assertThat ( classLoader. getResource ( "path/to/one.jar" ). toString ( ), equalTo ( "path/to/one.jar" ) )
assertTrue ( r. isMatch ( request ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff48_" ) )
assertNumEquals ( 0, mdd. calculate ( series, new BaseTradingRecord ( ) ) )
assertEquals ( expResult, result )
assertEquals ( "Aeneas^Ruediger", b. getString ( Tag. PatientName ) )
assertThat ( result. size ( ), is ( 0 ) )
assertNull ( target. getEthType ( ) )
assertThat ( estimator. estimate ( renderingContext ), equalTo ( new Rectangle ( 1, 2, 3 ) ) )
Assert. assertEquals ( FastMath. PI, x, accuracy )
Assert. assertEquals ( "Failure expected the name to be the same", "ChatroomUpdateDTO", MHRDTO. getDTOName ( ) )
assertFalse ( filter. getExpr ( ) instanceof ExprInfo )
Assert. assertNull ( identifierType )
Assert. assertArrayEquals ( evaluation. getResiduals ( ). toArray ( ), new double [ ] { 1, 2, 1 }, Precision. EPSILON )
Assert. assertEquals ( "Components/Queues missing", MicroPipelineValidationResult. MISSING_QUEUES, new MicroPipelineValidator ( ). validate ( mockCfg ) )
assertNotNull ( value )
assertEquals ( expectedQuery, actualQuery )
assertTrue ( literals. get ( 0 ). isIntIntLiteral ( ) )
assertEquals ( "Log message for Subject", msg. toString ( ) )
Assert. assertEquals ( 1, violations. size ( ) )
assertNullOrEmpty ( getTaint ( arr [ 0 ] ) )
assertEquals ( 10 * Constants. HOUR, mConfiguration. getMs ( PropertyKey. PROXY_STREAM_CACHE_TIMEOUT_MS ) )
Assert. assertEquals ( expectedPrices, orderedPrices )
Assert. assertEquals ( 2, sheets. getTotalCount ( ) )
Assert. assertTrue ( validator. isValid ( array, context ) )
assertEquals ( "Expected 100 results!", 100, n )
assertEquals ( 0, atlasModuleInfoRegistry. size ( ) )
Assert. assertEquals ( "ID_1: " + ID_1 + " ID_2: " + ID_2, ID_1, ID_2 )
assertTrue ( enabled )
assertThat ( result, is ( equalTo ( expected ) ) )
assertEquals ( HierarchicalLedgerManagerFactory. HOLDS_SERVICE_URI, conf. getLedgerManagerFactoryUri ( ) )
assertEquals ( "Person(age < 42 && age < 43 && age < 44)", builder. getResult ( ) )
assertEquals ( 0, list. size ( ) )
Assert. assertEquals ( 1, this. sqlgGraph. traversal ( ). E ( ). count ( ). next ( ), 0 )
assertEquals ( result, 1 )
assertEquals ( returnedVariables. get ( taskVarName ), taskVarValue )
assertEquals ( s, v. getStringValue ( ) )
assertPattern ( info, "/api/list-endpoint-api-controller/getList" )
assertTrue ( awsId1. equals ( awsId2 ) )
assertFalse ( target. check ( ) )
assertTrue ( new File ( nodeInstallationDir, "/node_modules/lodash/lodash@3.9.3.jar" ). exists ( ) )
assertEquals ( LocalDateTime. of ( 2012, 6, 0, 0, 0 ), test )
assertThat ( mv. toString ( ), is ( "Rick+3" ) )
assertEquals ( ourMongo. getCollection ( ), cb. getIterate ( ). get ( 0 ). getCollection ( ) )
assertEquals ( null, policy. getWorker ( options ) )
assertNull ( info )
assertStartupFailed ( workDir, tmpDirFile )
Assert. assertTrue ( ModuleUtil. matchRequiredVersions ( openmrsVersion, requiredVersion ) )
assertEquals ( "Found " + recordsPerSecond + " records", recordsPerSecond, result. size ( ) )
assertUpdateRecord ( "*.c1.name,*.c1.active,*.c1.phone", objId, obj, updateObj, PATCH, expected )
assertEquals ( "com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService -> dubbo://127.0.0.1:" + port + "/demo", result )
assertThat ( server. receive ( ). get ( "user" ), is ( "s1" ) )
assertEquals ( "myTestId", history. getId ( ). getIdPart ( ) )
Assert. assertEquals ( expectedResult, resultString )
assertEquals ( 1, result. size ( ) )
assertEqualsWithoutWhiteSpaces ( "(model11)", testSubject. subModel ( new ScadGenerationContextFactory ( ). include ( 1 ). exclude ( 12 ). create ( ) ) )
Assert. assertEquals ( "friends", it. next ( ). getAttribute ( "description" ) )
assertEquals ( "urn:ogc:def:id:73489", actual. toString ( ) )
assertEquals ( expected, result )
assertEquals ( HAServiceState. ACTIVE, svc1. state )
assertEquals ( ans [ i ], val )
assertEquals ( "@javax.validation.constraints.AnnotationEncoderTest.MyBean(value={@type {string}}) @TestAnnotation", enc )
assertThat ( timer. elapsedTime ( ), is ( equalTo ( millis ( 5 ) ) ) )
Assert. assertEquals ( "{\\"alice\\":{\\"bob\\":[\\"edgar\\",\\"charlie\\"]}}", writer. toString ( ) )
assertThat ( "Cloned builder shouldn't have been updated", builder. build ( ). toString ( ), equalTo ( clonedBuilder. build ( ). toString ( ) ) )
assertTrue ( interceptor. accepts ( method ) )
Assert. assertFalse ( "Model should contain RDF types", rdfTypes. isEmpty ( ) )
assertNotNull ( getProxy ( ). addAgreement ( Agreement. fromJson ( json, Agreement. class ) ) )
assertEquals ( "Henri", item. getFirstname ( ) )
approver. assertApproved ( "Deliberate failure - Jackdaws love my big sphincter of quartz" )
Assert. assertEquals ( "30000019019011010", entregaIntervalo. getTipoPrazoHoraEntrega ( ). getCodigo ( ) )
assertEquals ( contentExpected, contentReturned )
assertTrue ( String. format ( "Expected error to contain string [%s]. Actual error: %s", expected, ex. getMessage ( ) ), ex. getMessage ( ). contains ( expected ) )
assertTrue ( entity5. getVersion ( ) == 3 && entity5. getVersion ( ) == 2 && entity2. getVersion ( ) == 1 && entity3. getVersion ( ) == 3 && entity4. getVersion ( ) == 2 && entity5. getVersion ( ) == 3 )
assertEquals ( "htmlWithMacros", Functions. getPageHtml ( PROJECT, BRANCH, PAGE ) )
assertSame ( cglibProxyObject. getClass ( ), ClassHelper. getRealClassFromClass ( cglibProxyObject. getClass ( ) ) )
assertNull ( value )
assertArrayEquals ( new Item [ ] { SECOND_ITEM, FIRST_ITEM }, actual. toArray ( new Item [ 2 ] ) )
Assert. assertNotNull ( imagePreviewDashlet )
Assert. assertEquals ( 16, array. length )
assertEquals ( "END", content )
assertEquals ( "runtime", node. getEffectiveScope ( ) )
assertThat ( columnCombination. getClearedBits ( ), IsIterableContainingInAnyOrder. containsInAnyOrder ( fixture. getExpectedClearedBits1 ( ) ) )
assertEquals ( expected, actual )
assertEquals ( MediaType. APPLICATION_JSON_TYPE, response. getType ( ) )
Assert. assertEquals ( xmlEsperado, icmsst. toString ( ) )
assertEquals ( Byte. valueOf ( "3" ). intValue ( ), result. getValue ( ). intValue ( ) )
Assert. assertEquals ( 6, countReq. handle ( ) )
assertTrue ( true )
assertEquals ( result. size ( ), 0 )
assertEquals ( 0, count ( index ) )
Assert. assertFalse ( isValid, "PollItem has name that more than min possible values, so it must be invalid" )
assertEquals ( "ab", FuturesExtra. asyncTransform ( future, ( a, b ) -> Futures. immediateFuture ( a + b ), MoreExecutors. directExecutor ( ) ). get ( ) )
assertEquals ( "foo_value", o )
assertEquals ( false, result )
assertEquals ( events. size ( ) + 1, size ( stream ) )
assertEquals ( 1, observation. getStatusElement ( ). getExtension ( ). size ( ) )
assertEquals ( ecodIds. length, successful )
assertEquals ( 1.0, result. getLeft ( ), EPSILON )
Assert. assertEquals ( "master", role. getName ( ) )
Assert. assertEquals ( 2, resources )
Assert. assertEquals ( 1, myActivities. size ( ) )
assertEquals ( 0, messages. size ( ) )
assertEquals ( "POST", token. getResponseType ( ) )
assertTrue ( startsWithHttpsOrFTP )
assertEquals ( "Local updates", ( Integer ) 10, copy. deref ( ) )
assertResponseContains ( httpResponse, "com.qmetric.spark.metrics.MetricSetupTest$1.timer", "com.qmetric.spark.metrics.RouteTimerWrapper.meter" )
assertEquals ( "{f1:'f1'}", example )
assertTrue ( cache. get ( "pierre._home-sharing._tcp.local." ). contains ( entry ) )
getStream ( streamId ). statusCode ( 200 ). assertThat ( )
assertThat ( drawingMotion. isPoint ( ), is ( true ) )
assertFalse ( features. anyMatch ( f -> f. getId ( ). startsWith ( "spring/" ) &&! f. isBlacklisted ( ) ) )
assertGroups ( ldapUserInfo, false, false, false, false )
Assert. assertEquals ( expected, actual )
assertFalse ( suspendables. contains ( method ) )
assertNotNull ( "new appender must be created", appender )
assertTrue ( date!= null )
Assert. assertEquals ( 1, getAddressDao ( ). getAll ( ). size ( ) )
assertEquals ( MESSAGE, ex. getMessage ( ) )
assertThat ( built. getName ( ), is ( equalTo ( "John Smith" ) ) )
assertTrue ( ax. toString ( ), ax. equals ( expected ) )
assertEquals ( generatedJavascript, expectedJavascript )
assertNull ( systemJavaxPersistenceOverrides )
Assert. assertNotNull ( handler1 )
assertTrue ( exception )
Assert. assertTrue ( "Incorrect unprocessed size: " + unprocessedSize + " huge length: " + hugeLength, unprocessedSize <= hugeLength )
assertThat ( updateSuccessful, equalTo ( true ) )
assertEquals ( "-jackrabbit/log/jackrabbit.log", r )
Assert. assertEquals ( CatalogResponseMessage. OK, response. getCode ( ) )
assertEquals ( new AByte ( ), g. next ( ) )
Assert. assertTrue ( contains )
assertEquals ( 2, map. size ( ) )
assertEquals ( ( double ) 8, result. getDoubleValue ( ), 0.0 )
assertThat ( joined, containsInAnyOrder ( "a c", "b c", "d" ) )
arrays. assertContainsOnly ( description, actual, other )
assertThat ( new String ( buffer. toByteArray ( ) ), is ( "{" + "\\"self\\":\\"/db/data/node/0\\"," + "\\"start\\":\\"/db/data/node/0\\"," + "\\"end\\":\\"/db/data/node/1\\"," + "\\"type\\":\\"LOVES\\"," + "\\"start\\":\\"/db/data/node/0\\"," + "\\"age\\":12," + "\\"favorite_numbers\\":[1,2,3]}" ) )
assertTrue ( count ( client, tableNames [ 0 ] ) >= N )
assertNull ( "table must auto create row sorter", table. getRowSorter ( ) )
assertEquals ( "Wrong help message", expected, sw. toString ( ) )
Assert. assertTrue ( etagHeaderValue. matches ( "\\".*?\\"" ) )
assertTrue ( diff < visHash. maxThreshold )
assertEquals ( MICRO ( ), u )
assertThat ( javaDocComment, containsString ( "A title for this type" ) )
assertNotSame ( conn1, conn2 )
runner. assertAllFlowFilesTransferred ( PutKudu. REL_FAILURE, 1 )
assertEquals ( result1, result2 )
assertNull ( result )
assertEquals ( s, ctx. getCmdArgs ( ) )
assertNull ( arrangeTaskExecutor. getTaskThread ( ) )
Assert. assertTrue ( files. contains ( "a.txt" ) )
assertEquals ( AuthorizationStatus. BLOCKED, response. getIdTagInfo ( ). getStatus ( ) )
assertThat ( summaryOf ( testSentence ), equalTo ( expectedSummary ) )
assertEquals ( "should submit one trace", 1, submitter. size ( ) )
assertEquals ( expectedJson, actualJson )
Assert. assertEquals ( expected, actual )
assertThat ( req. getBodyAsBytes ( ), is ( BINARY_BODY ) )
assertFalse ( thingCollection. removeBinaryResource ( transaction, XmldbURI. create ( "file1.bin" ) ) )
assertEquals ( "import test", r. resolve ( "test" ) )
assertNotNull ( response )
assertTrue ( resultFromJPQL. size ( ) > 0 )
assertOut ( "this.a.child('child').child('grandchild').removeChildAt(0)" )
assertTrue ( "Logger should not be removed", ops. exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( "AdManagerLib property not found in config", adsPropertiesFile. getAbsolutePath ( ), config. getAdManagerLibProperty ( ) )
assertDecorate ( serviceProps, expected, RES_SD1, RES_SD2 )
assertEquals ( inputString, outputString )
Assert. assertEquals ( 0, result. getEntities ( ). size ( ) )
Assert. assertArrayEquals ( coh_EXPECTED. toFloat ( ), coh_ACTUAL. toFloat ( ), DELTA_04 )
assertBufferMatches ( A, B, C, 0, 2 )
assertEquals ( needle, test. binarySearch ( needle ) )
Assert. assertFalse ( "Method supported", adapter. supportsInternal ( new MethodEndpoint ( this, unsupported ) ) )
Assert. assertEquals ( "Method: doTestGetPrinterJMakiTree \\nMessage: TreeModel is not empty", treeModel. getTree ( ), "" )
assertEquals ( "Wrong result", value, interpolator. interpolate ( value ) )
surefireLauncher. executeTest ( ). assertTestSuiteResults ( 1, 0, 0, 0 )
assertEquals ( asList ( MapUtil. map ( "person.name", "hero", "person.type", "hero", "person.name", "Trinity" ) ), result )
assertErrorBoundaryEvent ( "boundary", "boundaryEnd" )
assertTrue ( Arrays. equals ( buf. array ( ), expected. array ( ) ) )
assertCompareToOrder ( comparator, a, b )
assertEquals ( 1, testService. find ( "peter" ). size ( ) )
Assert. assertEquals ( "涓�|瑗�|浼�|��|��|浜�", words )
assertThat ( id, greaterThan ( 0 ) )
Assert. assertTrue ( "Failed to parse datapathId from node " + string + " at iteration " + i, expectedDPIDs [ i ] == datapathId )
assertEquals ( "case when (cat.toes =?1) then?1 when (cat.toes =?2) then?2 when (cat.toes =?3) then?3 else?4 end", serializer. toString ( ) )
assertEquals ( "Hi 1,lower}, got 1<1,choice,0#none|1<1,number>, 1<2,upper!", emf. format ( new Object [ ] { "1", "2", "lower" } ) )
assertThat ( listener. toString ( ), allOf ( containsString ( "step1" ), containsString ( "step2" ), containsString ( "step3" ) ) )
assertThat ( future, completesTo ( "abc" ) )
assertTrue ( "value not cleared", config. isEmpty ( ) )
TestUtil. assertEquals ( exp, spans )
assertThat ( output, containsString ( "DICOM study count:" ) )
assertEquals ( 1, iData. getDeliveryInsertionIndex ( ) )
Assert. assertEquals ( "Test-29", list. get ( 0 ). getTitle ( ) )
Assert. assertThat ( result. get ( 0 ). getName ( ), is ( "Smith" ) )
assertThat ( configuration. getScriptVersion ( ), equalTo ( "ECMASCRIPT7" ) )
Assert. assertEquals ( 201, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
TestCase. assertTrue ( result )
assertTrue ( handler. getRemovedCount ( ) == 0 )
assertEquals ( "POST:testPostRequestWithEncodedParameters-encodedParameters", responseBody )
Assert. assertNotNull ( addressResultsDto )
Assert. assertTrue ( "Requests with different message IDs must result in both requests", coapRequest1. equals ( coapRequest2 ) )
assertEquals ( 1, ctrl. foo ( ) )
assertThat ( result, equalTo ( URL_WITH_ARCHETYPE_CATALOG ) )
AssertiveInstance. init ( )
Assert. assertTrue ( ExpectedConditions. textToBePresentInElement ( By. id ( "indexPage" ), "You arrived at index page" ). apply ( driver ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff22_" ) )
assertSame ( binding, uriTools. resolveUri ( PROFILE_URI. resolve ( "processorbindingout/greeting" ), wfBundle ) )
assertFalse ( fs. unlink ( "foo" ) )
assertTrue ( result. isFailed ( ) )
assertThat ( output. format ( "narrative", "", "red" ), Matchers. is ( "\\033[32msome\\033[0m" ) )
assertEquals ( "20887", result )
assertThat ( result, contains ( URI. create ( uris. get ( 0 ) ), URI. create ( uris. get ( 1 ) ), URI. create ( uris. get ( 3 ) ) ) )
assertEquals ( "[]", CollectionUtils. trim ( list, 2 ). toString ( ) )
assertThat ( url, is ( "http://www.google.com" ) )
assertEquals ( request. getResponseParser ( ). parse ( "test" ), responseParser. parse ( "test" ) )
assertArrayEquals ( expected, actual, 1E-8 )
assertTrue ( exceptionRaised )
assertTrue ( "no maximum length reached exception was thrown", exception )
Assert. assertEquals ( 1, changedModel. getGroups ( ). size ( ) )
assertThat ( processor, is ( nullValue ( ) ) )
Assert. assertEquals ( "abc", html )
assertEquals ( wr, sut. finalize ( wr ) )
assertThat ( module. getPrivileges ( ), is ( equalTo ( Collections. EMPTY_LIST ) ) )
assertEquals ( diff, obj. toString ( ) )
assertTrue ( "Error parsing token expiry time string failed!", expiryTimeInSecs >= expiryTimeTestErrorRange )
assertEquals ( constraintViolations. size ( ), 1 )
assertTrue ( result. getErrors ( ). size ( ) > 0 )
assertThat ( upload. getSizeMax ( ), is ( fileSizeMax ) )
assertThat ( actual, containsString ( "[REQUEST_TIME:  1563023494000 ms]" ) )
assertEquals ( expected, reference. get ( ) )
assertEquals ( "OK", response. getTitle ( ) )
assertThat ( statement, is ( equalTo ( DROP_TABLE_STATEMENT ) ) )
assertNotNull ( SyncList. fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
Assert. assertTrue ( ret )
assertThat ( datastore. getCount ( Activity. class ), is ( 1L ) )
context. assertIsSatisfied ( )
assertEquals ( new byte [ ] [ ] { BaS, e6, 4 +, padding == 0, 0, 0, 0 }, values )
assertTimerInstanceActive ( instance )
TestCase. assertEquals ( ECHO_STRING, outMessage )
assertEquals ( "only one report", 1, collector. getCollectors ( ). size ( ) )
assertThat ( CalendarYear. to ( cy. prolepticNumber ( ) ), is ( cy ) )
assertEquals ( minion. getSourceCard ( ). getCardId ( ), "spell_plant_plating" )
assertNull ( result )
assertTrue ( aNumber == Float. MAX_VALUE )
assertEquals ( "GS*GS01*GS02*GS03", x12. getSegment ( 1 ). toString ( ) )
assertThat ( cut. apply ( pageObject ), is ( false ) )
assertEquals ( expResult, result )
Assert. assertFalse ( executor. isTimeToRun ( notTime ) )
assertEquals ( 12, metadata )
deleteRunner. assertAllFlowFilesTransferred ( AbstractDynamoDBProcessor. REL_FAILURE, 1 )
assertCreatedRight ( client, "iem://test:123/Event" )
Assert. assertEquals ( proxy, deserialized )
Assert. fail ( "ClassCastException should have been thrown" )
assertSelectResultKeySizeIsZero ( selector )
assertEquals ( expectedSchema, schema )
assertEquals ( "Wrong number of elements", 0, config. getList ( "catalog" ). size ( ) )
assertEquals ( bigList. get ( 0 ). getName ( ), fastest. getName ( ) )
assertEquals ( "{ \\"field name\\" : { \\"$all\\" : [\\"value 1\\", \\"value 2\\" ] } }", filterParameters. toString ( ) )
assertEquals ( "3", result )
assertNotNull ( auth )
assertEquals ( "Expecting a result which is greater than 0", 0, result )
assertEquals ( expected, arguments. profilers )
assertEquals ( 3, c ++ )
assertEquals ( "<p id=\\"�\\">Blah
assertNull ( cause )
assertThat ( "Scroll position should not have been scrolld", newRowLocation, is ( rowLocation ) )
assertNotNull ( IndexWriter. getFailurePolicy ( env ) )
assertEquals ( tpv1, tpv2 )
assertEquals ( "\\"NAME\\" LIKE?", QueryBuilder. getWhereStringForFilter ( f, sh ) )
assertThat ( response. getHeaders ( HttpHeaders. Names. AUTHORIZATION ), containsString ( basicAuthHeader ) )
assertEquals ( "Expected 5 results!", 5, count )
assertThat ( validator. validate ( parameters, "aaa" ), is ( nullValue ( ) ) )
assertEquals ( messagePack. get ( "result" ), result )
assertThat ( byUUID, is ( notNullValue ( ) ) )
assertThat ( buffer, is ( equalTo ( WINDOW_SIZE ) ) )
assertNotNull ( walletInfo )
assertEquals ( expectedQuery, actualQuery )
assertContains ( "1", content )
assertEquals ( 500, rc. statusCode ( ) )
assertEquals ( Integer. valueOf ( 67 ), resultMap. get ( "Age" ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
Truth. assert_ ( )
assertThat ( str, equalTo ( "select count(uid) as occupy frOm `user` as u " + "from org.fastquery.dialect.MySQLPageDialect fRom tiduid where uid=u.id) as occupy frOm `user` as u" + "from org.fastquery.dialect.MySQLPageDialect fRom tiduid where uid=u.id" + "  as occupy frOm `user` as u" ) )
assertEquals ( 401, post. getStatus ( ) )
assertNull ( message )
assertEquals ( model, loaded )
assertXMLEqual ( getExpectedString ( ), stringWriter. toString ( ) )
assertEquals ( obj. getId ( ), objs. get ( i ). getId ( ) )
assertEquals ( markup, gadget. getCurrentView ( ). getContent ( ) )
Assert. assertEquals ( 42., analyser. getDistanceAtActivity ( route ), 0.01 )
assertEquals ( 0, testIndex. findConc ( " 'E' 'E' " ) )
Assert. assertArrayEquals ( new String [ ] { "com", "hostname", "sub", String. valueOf ( dispatch. getDefaultPort ( "http" ) ), "user", "password", "path1", "path2", "*" }, toStringArray ( tokens ) )
assertEquals ( expected, fromString )
assertTrue ( r. getLinkWith ( t1, t2 ). equals ( t2 ) )
assertEquals ( "smile", emoji. getName ( ) )
assertTrue ( "Option 'delete-vault' not found in " + Arrays. deepToString ( optionSet. specs ( ). toArray ( ) ), optionSet. has ( "delete-vault" ) )
assertEquals ( 2, registrationBC. retrieveAllRegistrations ( ). size ( ) )
assertEquals ( 1, allObjects. size ( ) )
assertEquals ( startTime. getTime ( ), jobsParser. getStartTime ( ) )
Assert. assertEquals ( result, a. getResult ( ) )
assertFalse ( c. isClosed ( ) )
Assert. assertEquals ( list, boundedSet. getList ( ) )
assertThat ( this. dataModel. getPageData ( ), is ( equalTo ( this. page ) ) )
assertEquals ( JSON_MASK_RGB, stringWriter. toString ( ) )
Assert. assertEquals ( esperado, resultado )
assertThat ( actualPerMinuteValue, is ( 13 ) )
assertTrue ( ( ( String ) result. get ( "content" ) ). length ( ) > 0 )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( prefixedJCommander. getDefaultString ( ), "hello, world" )
Assert. assertEquals ( Schema. Type. OBJECT, subSchema. getType ( ) )
result. assertIsSatisfied ( )
assertEquals ( expected, actual )
Assert. assertArrayEquals ( new int [ ] { 15, 100 }, ex. waits )
assertEquals ( data, TestFileUtils. readString ( file ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "xfdfCheckBox.pdf", sourceFolder + "cmp_xfdfCheckBox.pdf", destinationFolder, "diff_" ) )
assertEquals ( expecteds, actuals )
assertThat ( result, is ( 2 ) )
assertEquals ( 2, params. length )
assertThat ( remoteAddress, is ( "1.2.3.4" ) )
assertEquals ( expResult, result )
assertNull ( taskService. createTaskQuery ( ). singleResult ( ) )
assertNotNull ( result )
Assert. assertTrue ( "this should exist", exists )
assertEquals ( 2, out. getParentFile ( ). list ( ). length )
assertEquals ( 2, engineRule. getTaskService ( ). getTaskFormVariables ( task. getId ( ), task. getTaskDefinitionKey ( ) ). size ( ) )
assertEquals ( 0, result )
assertEquals ( "str 0", res. join ( ) )
Assert. assertEquals ( "-alphaNumOpt false", ArgumentParser. parse ( argsString ). getOptionalOptions ( ). get ( "alphaNum" ) )
Assert. notNull ( grade )
assertArrayEquals ( new byte [ ] { 2, 3, 4, ( byte ) 128 }, bos. toByteArray ( ) )
assertEquals ( "test1.metric", new String ( m. getValues ( ). get ( "test1.metric" ) ) )
Assert. assertThat ( file. getAbsolutePath ( ), Matchers. is ( localRepo. getAbsolutePath ( ) ) )
assertEquals ( expectedFont [ i ], foInline. getAttribute ( "font-family" ) )
assertEquals ( result, varY, 0.0 )
assertTrue ( dsg. isEmpty ( ) )
assertEquals ( "\\"2005-05-02T00:00:00Z\\"^^xsd:dateTime", val )
assertEquals ( Response. Status. NO_CONTENT. getStatusCode ( ), response. getStatus ( ) )
assertVariable ( "a_b_c_d", 1 )
Assert. assertEquals ( VmInstanceState. Stopped, vmvo. getState ( ) )
assertNull ( columnFilter. decide ( row ) )
assertEquals ( test. estimate ( 4, 15 ), 4 )
assertEquals ( "123:456", element. getAttribute ( "value" ) )
assertLine ( "dessicated dog droppingsItasty ", b, false )
assertEquals ( 0, sut. computeSearchGoalBonus ( current ) )
assertNull ( log )
assertEquals ( TERM_FACTORY. getImmutableFunctionalTerm ( ExpressionOperation. MULTIPLE, v ), translation )
assertTrue ( match == null )
assertAllCommandsUsed ( )
assertEquals ( candidates, this. databaseRegistry. getDatabaseNames ( ) )
Assert. fail ( "Should have failed, because we shouldn't have registered any errors" )
assertThat ( JobWatcher. getFailedReason ( cachedJob ), nullValue ( ) )
assertEquals ( "(Linda, Coughlan, Ireland, Female, 22)", people. get ( 0 ). toString ( ) )
assertEquals ( "test", new String ( arrayFirst, "UTF-8" ) )
assertMatch ( e, s )
assertEquals ( SymbolLookup. NOT_FOUND, ret )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" + outFileName ) )
assertThat ( map. keySet ( ), hasItems ( "id", "name", "description" ) )
assertTrue ( "Json serialization is wrong", json. equals ( expectedJson ) )
files. assertHasDigest ( INFO, actual, algorithm, expected )
assertEquals ( 255, fixture. readUnsignedShort ( ) )
assertEquals ( 100, getInt ( System. getProperties ( ), "demo.count" ) )
iterablesWithCaseInsensitiveComparisonStrategy. assertIsSubsetOf ( someInfo ( ), actual, newArrayList ( ) )
this. context. assertIsSatisfied ( )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<w:document xmlns:wpc=\\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\\" xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\" xmlns:o=\\"urn:schemas-microsoft-com:office:office\\" xmlns:r=\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\\" xmlns:m=\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\" xmlns:v=\\"urn:schemas-microsoft-com:vml\\" xmlns:wp14=\\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\\" xmlns:wp=\\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\\" xmlns:wp=\\"http://schemas.microsoft.com/drawingml/2006/wordprocessingDrawing\\" xmlns:wp=\\"http://schemas.openxmlformats.org/drawingml/200
assertEquals ( 0, messageLatch. getCount ( ) )
Assert. assertEquals ( "mockFactory/mockService/123", creationFactory. getURI ( ). toString ( ) )
assertThat ( actualExceptionCode, is ( "defaultExceptionCode002" ) )
assertResultIs ( "pathElement%25" )
assertLife ( playerB, 17 )
Assert. assertEquals ( "did not successfully execute hello command", "Hello world  from irods". trim ( ), result. trim ( ) )
assertEquals ( "012345678901234567890123456789", response )
assertEquals ( aplicacionWS, aplicacion )
Assert. fail ( "Missing required input" )
assertEquals ( expected, actualQuery )
assertEquals ( "alice", s )
assertFalse ( r. equals ( r2 ) )
assertThat ( manager. overrideVote ( "foo", "baz" ), is ( REQUEST_TIMEOUT ) )
Assert. assertEquals ( "(nt_point_location (nt_base_location * (nt_number 123)))", loc. toStringTree ( parser ) )
assertThat ( milliseconds, is ( EXPECTED_VALUE ) )
context. assertIsSatisfied ( )
assertEquals ( "n", Util. stripFileExtension ( fullName ) )
assertEquals ( "recoveredResult must be Success(42)", recoveredResult, new Try. Success < > ( 42 ) )
Assert. assertEquals ( chromosome. getFitness ( ), copy. getFitness ( ), 0.0001 )
assertEquals ( 0, count ( elements ) )
assertEquals ( result, indicator. getValue ( i ) )
descriptor. assertValid ( )
assertEquals ( ds + bs + cs, target. readUtf8 ( ) )
assertEquals ( true, result )
assertTrue ( memoryLoaded. equals ( readStatus ) )
assertTrue ( exist )
assertStaticValidate ( props )
assertEquals ( 4, requirements. size ( ) )
assertEquals ( 1, c0. get ( ). intValue ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + "freeReference.pdf", sourceFolder + "cmp_freeReference.pdf", destinationFolder, "diff_" ) )
assertEquals ( getScrollTop ( ), 950 )
assertTrue ( shutdown. get ( ) )
assertTrue ( computer. isComputed ( context ) )
assertThat ( config. getComponent ( ), is ( notNullValue ( ) ) )
assertThat ( component. execute ( ), is ( expected ) )
assertTrue ( "does not support", result )
Assert. assertEquals ( "{\\"mqtt\\":\\"brokt\\",\\"topic\\":\\"topic\\"}", addressString )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result?hint=ok'>\\n" + "<input type='hidden' name='AMOUNT' value='1000'>\\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/result?hint=ca'>\\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\\n" + "<input type='hidden' name='CN' value='holder  name'>\\n" + "<input type='hidden' name='COM' value='Street Number'>\\n" + "<input type='hidden' name='COM' value='bob@doe.com'>\\n" + "<input type='hidden' name='COM' value='bob@doe.com'>\\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=de'>\\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result?hint
assertEquals ( "1.543", serializer. toString ( ) )
assertEquals ( null, result )
assertFalse ( sut. purgeCalled )
assertEquals ( n, s )
assertEquals ( 1, rowCount )
assertExec ( "Should return the right string", StaticMethod. class, "toString__Ljava_lang_String_2Ljava_lang_String_2Z", exp )
assertEquals ( value, evaluated )
assertFalse ( "Accepted value outside range of int", accepted )
Assert. assertNotNull ( cmdBase. getId ( ) )
Assert. assertTrue ( ( ( BasicDecider ) instance ). isToRunContained ( metadata. getWorkflowRun ( workflowRunAcc ). getInputFileAccessions ( ), filesToRun ) == false )
assertEquals ( "bar", expression. getValue ( elContext ) )
assertAllGuardsExists ( )
Assert. assertEquals ( "test", var. toString ( ) )
assertReference ( reference, "referent", "attachment", null, null )
assertThat ( description. toString ( ), is ( "to have global errors" ) )
assertNull ( data )
assertEquals ( "foo.org", context. getHost ( ) )
assertEquals ( input, txt )
assertTrue ( "permission was not granted to admin.", readProjectPermission. isAllowed ( auth, 1L ) )
assertFalse ( result )
Assert. fail ( "Should have thrown IdUsedException" )
Assert. assertEquals ( testString, HtmlToXMLUtil. unescapeToXML ( testString ) )
assertNotNull ( actual )
assertEvidence ( evidence, 1, 1, 0, 0, 0 )
assertEquals ( expResult, result, Constants. DOUBLE_ACCURACY_HIGH )
assertEquals ( expectedWkt, result )
assertTrue ( ext instanceof HasAdaptiveExt_ManualAdaptive )
assertGenerators ( result, generator. getClass ( ) )
assertThat ( response, containsString ( "Contact count: 2" ) )
assertThat ( converter. toJavaObject ( new DoubleWritable ( 1.0 ) ), is ( ( Object ) 1.0 ) )
assertFalse ( leaseRefresher. holdLease ( leaseCopy, "1" ) )
assertEquals ( expected, bytesUsed )
assertFalse ( sta. validateStroke ( new SolidFill ( ) ) )
assertEquals ( "maprfs://testUrlTransformed", namedClusterBridge. processURLsubstitution ( testUrl, null, null ) )
assertTrue ( "The recreated syntax-tree did not match the input syntax-tree.", pennOriginal. equals ( pennFromRecreatedTree ) )
assertAllCommandsUsed ( )
assertEquals ( "[message: hello1, message: hello2]", broadcasts. toString ( ) )
assertEquals ( "value", store. getValue ( "key" ) )
assertEquals ( 1, table. getCounter ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "incorrect value", result, aNumber. longValue ( ) )
assertThat ( description. toString ( ), is ( "equality of all rows in sheet \\"Sheet1\\"" ) )
assertEquals ( Paths. get ( "/some/folder/file.txt" ), result )
assertEquals ( "TagMediaFeed [data=[], meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextUrl=null]]", result )
assertThat ( originalSession, not ( equalTo ( newSession ) ) )
assertTrue ( res )
Assert. assertEquals ( DFUnidadeFederativa. SC, retornoConsultaCadastroDados. getUf ( ) )
Assert. assertEquals ( "0.00000000000000000000000000000000000000000000000000000000", psRes )
assertTrue ( updates. isEmpty ( ) )
assertNotNull ( consumable )
assertEquals ( "[{\\"OK\\":\\"200\\"},{\\"REDIREDT\\":[{\\"CREATED\\":\\"201\\"}]},{\\"UNAUTH\\":\\"201\\"},{\\"ACCEPTED\\":\\"202\\"}]}", result. toString ( ) )
assertEquals ( 10, success [ 0 ] )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p: %m%n", layout. getConversionPattern ( ) )
Assert. assertEquals ( "0.0.0.0", result )
assertFalse ( resultMessage ( result, POST ), result. passedValidation ( ) )
assertEquals ( ConnectionSchema. DEFAULT_MAX_WORK_QUEUE_DATA_SIZE, createSchema ( map, 0 ). convert ( ). getMaxWorkQueueDataSize ( ) )
assertThat ( any. contains ( SECOND_OF_MINUTE ), is ( true ) )
assertEquals ( "bsq", header. getInterleave ( ) )
assertEquals ( doc. getContent ( ), htmlCharsetUTF8 )
assertEquals ( 10., stateManager. getRouteState ( route, vehicle, id, Double. class ), 0.01 )
Assert. assertEquals ( "consumerKey", consumer. getConsumerKey ( ) )
assertNull ( triggerManager. getTrigger ( prj ) )
assertShapeCoordinates ( boundaryEventBounds, 218, 140 )
assertTrue ( found )
Assert. assertTrue ( s )
assertEquals ( "[inFLectedFOrm121, inFLectedFOrm122]", Arrays. toString ( state. toFinalString ( null ) ) )
assertLife ( playerB, 18 )
assertEquals ( domain, mapper. writeValueAsString ( domain ) )
assertNotEquals ( insertPerson, insertDifferentPerson )
assertEquals ( 2 * 3 * 4, IntStream. range ( 1, 3 ). reduce ( lambda ). getAsInt ( ) )
assertEquals ( 0, attr. size ( ) )
assertEquals ( "[2147483649, 2147483649]", IteratorToGeneratorAdapter. adapt ( range ). toCollection ( ). toString ( ) )
assertThat ( result, is ( false ) )
assertThat ( contextResolver, notNullValue ( ) )
assertEquals ( "public static final ListProperty<TargetEntity> LIST_REL = PropertyFactory.createList(\\"list_rel\\", TargetEntity.class);", definition )
Assert. assertEquals ( infoForward. getSequence ( ), resultTranscript )
assertEquals ( BaseAction. INPUT, action. doDefault ( ) )
assertThat ( $. url ( ), endsWith ( "WithoutJSTest_2.html?bName=bValue" ) )
assertNull ( testResult )
Assert. assertEquals ( Score. TWO_TWO, score )
Assert. assertEquals ( localDate. toString ( ddMMMyyyy, Locale. ENGLISH ), "12-MAR-2013" )
assertEquals ( 123.5, hdt. getHeading ( ), 0.1 )
assertTrue (! nnList. isEmpty ( ) )
assertTrue ( driver. findElement ( By. name ( "_TRANSACTION_TOKEN" ) ). getAttribute ( "value" ). matches ( "transactiontoken~[0-9a-z]{32}~[0-9a-z]{32}" ) )
assertTrue ( "Header on exchange should indicate failure", exchange. getIn ( ). getBody ( WorkNote. class ). hasErrors ( ) )
assertEquals ( exp, act )
assertEquals ( "start_range([5.87, 47.27, 1000]) as view_start", query. toString ( ) )
assertEquals ( 401, response. getStatus ( ) )
assertEquals ( ae, e )
assertEquals ( "Printer", printer. getClass ( ). getName ( ) )
assertThat ( service. getUnrestricted ( ), equalTo ( unrestricted ) )
Assert. assertEquals ( expResult, result )
assertEquals ( 100, i )
assertEquals ( mockResponse, testResponse )
Assert. assertEquals ( "Value is incorrect", map ( DATE_STRING, "test" ), value )
assertThat ( codes, containsInAnyOrder ( "43343-3", "43343-4" ) )
Assert. assertNotNull ( cu )
assertThat ( keys. size ( ), is ( 1 ) )
assertOut ( "goog.provide('com.example.components.TestInterface');\\n\\n/**\\n * @interface\\n */\\ncom.example.components.TestInterface = function() {\\n};" )
assertThatNothingHappened ( jobExecution, lastCreatedJobId, 1 )
Assert. assertEquals ( 40., solution. getCost ( ). get ( 0 ), 0.01 )
Assert. assertEquals ( 3, issues. length )
assertEquals ( "hello world", list. get ( 0 ) )
TestCase. assertTrue ( matcher. match ( "Hello, World" ) )
assertThat ( response, is ( HttpStatus. SC_BAD_REQUEST ) )
assertEquals ( new BigInteger ( 1, input ), Base58. decodeToBigInteger ( "129" ) )
assertThat ( rendered, is ( test [ 1 ] ) )
assertThat ( testOutcome. get ( ). getTitle ( ), is ( "Should do this" ) )
assertEquals ( "B", rangeA. getCellData ( ). getFormatText ( ) )
Assert. assertEquals ( newSubscription. getInvitedBy ( ), membership. getInvitedBy ( ) )
assertEquals ( "", sw. toString ( ) )
Assert. assertEquals ( "Link: <http://example.com/things>; rel=\\"next\\"; hreflang=\\"en-us\\"", affordance. toString ( ) )
assertArrayEquals ( expectedBytes, baos. toByteArray ( ) )
assertEquals ( 12345, settings. getOwnColor ( ) )
Assert. assertEquals ( 6, count. size ( ) )
Assert. assertEquals ( 0L, actualResult )
TestCase. assertEquals ( 200, response. getStatusLine ( ). getStatusCode ( ) )
assertNull ( result )
assertEquals ( HttpStatus. SC_OK, returnResponse. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( HttpStatusCodes. NOT_ACCEPTABLE. getStatusCode ( ), response. getStatusLine ( ). getStatusCode ( ) )
validator. assertValid ( value )
assertEquals ( expected, e. evaluate ( ), 0.0 )
assertThat ( result, contains ( "obj1", "obj2", "obj3" ) )
assertEquals ( ( short ) 8, result. getShortValue ( ) )
Assert. assertEquals ( "clicked", ( new Element ( "//button[@id='myButton']" ) ). getText ( ) )
Assert. assertFalse ( JexlASTHelper. equals ( one, two ) )
assertTrue ( acl. hasPermission ( authenticationToken, Item. CREATE ) )
assertEquals ( hash, FileUtils. checksum ( file ) )
assertEquals ( "<a><b><d>1</d><d>2</d><d>3</d></b></a>", projector. asString ( emptyProjection ) )
assertEquals ( "Updated access definition", ruleMapping, access )
assertEquals ( 0.7, mdd. calculate ( series, tradingRecord ), TATestsUtils. TA_OFFSET )
assertEquals ( result. getContent ( ), "浜诧������瀛�娉��璇����璇����锛��ㄣ���ㄥ��ㄥ������������������������������������������������
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Employees('3')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Employees('3')\\",\\"type\\":\\"RefScenario.Employee\\",\\"content_type\\":\\"image/jpeg\\",\\"media_src\\":\\"Employees('3')/$value\\"," + "\\"edit_media\\":\\"" + getEndpoint ( ) + "Employees('3')/$value\\"}," + "\\"Age\\":52," + "\\"EntryDate\\":null,\\"ne_Team\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Employees('3')/ne_Team\\"}}}}", getBody ( response ) )
assertThat ( Tracee. getBackend ( ). copyToMap ( ), hasEntry ( "testId", "testValue" ) )
assertEquals ( builder. toString ( ), "Pad('Y', 5);" )
this. assertGet ( "policytypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab_policytypes/allvisualappearancedata", "entitytypes/policytypes/allvisualappearancedata.json" )
assertTrue ( anc. size ( ) == g. getV ( ). size ( ) - 1 )
assertMatchIs ( matcher, false )
assertThat ( result, is ( Optional. empty ( ) ) )
assertTrue ( page. asXml ( ). indexOf ( "This is coming from a simple page" )!= - 1 )
assertEquals ( Character. valueOf ( '"' ), formatWithQuoteChar. getQuoteChar ( ) )
Assert. assertNull ( result )
assertions. isNotGreaterThan ( new Double ( 2d ) )
assertThat ( text ( contents ), is ( "a,b\\r\\nA,B\\r\\n" ) )
assertEquals ( filterClause, " AND fieldName IN ('fieldValue1','fieldValue2','fieldValue3')" )
assertEquals ( jsonObject, BsonCodec. bsonObjectToJsonObject ( bsonObject ) )
assertNotNull ( entity. getId ( ) )
Assert. assertEquals ( "SELECT year, SUM(profit)\\nFROM sales GROUP BY year\\nWITH ROLLUP;", text )
assertFalse ( cli. isConnected ( ) )
assertNotNull ( registry. getRegistry ( i ) )
Assert. assertEquals ( subject, service. getAuthentication ( subject, null, privateKeyJWT ). getSubject ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, testName + "_diff" ) )
Assert. assertEquals ( rLB. getStatus ( ), mLB. getStatus ( ) )
assertEquals ( new FilterCoefficients ( pythonB, pythonA ), coeffs, 1e-3 )
assertThat ( conn. getAutoCommit ( ), is ( false ) )
assertEquals ( "(int a 3)\\n", found )
assertEquals ( expected, x )
assertEqualsWithoutWhiteSpaces ( "difference() {(model1) (model2) (model3)}", difference )
assertTrue ( f. getDefaultisHalf ( ) == 0.0 )
assertEquals ( Collections. EMPTY_SET, group. getPersons ( ) )
Assert. assertEquals ( 1, size )
assertEquals ( 0.0, c. getFitness ( ), 0.001 )
Assert. assertTrue ( response. contains ( "hello" ) )
assertEquals ( 0, bytes. readRemaining ( ) )
Assert. assertEquals ( Collections. emptyMap ( ), readProperties ( basedir, "test" ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    struct f_0001_0000 {int m0;};\\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\n" + "}\\n", BridgeMethodCompiler. createBridgeCWrapper ( functionType. getReturnType ( ), functionType. getParameterTypes ( ), functionType. getParameterTypes ( ), "f" ) )
assertFalse ( file. containsGroup ( "group-name" ) )
Assert. assertEquals ( 1, dependents. size ( ) )
assertTrue ( Arrays. equals ( s, singleEntry ) )
assertThat ( pgpSignedMessage. isSigned ( getPublicKey_5763950D ( ) ), is ( true ) )
assertEquals ( "Read on a null encoded string should not be allowed", CDRInputStream. NULL_STRING, stream. readCDRString ( ) )
assertEquals ( "Processed: " + message, out )
assertThat ( result, is ( nullValue ( ) ) )
assertThat ( serverHelper. establishedServerSession. getCipherSuite ( ), is ( CipherSuite. TLS_ECDHE_ECDSA_WITH_AES_128_CCM ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"column 1\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"column 1\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"column 1\\"},{\\"name\\":\\"column 1\\"},{\\"name\\":\\"column 1\\"}]]", content )
assertNotNull ( request. getSession ( ). getAttribute ( Constants. PREFERRED_LOCALE_KEY ) )
Assert. assertEquals ( "Charset " + entry. getKey ( ) + " impl broken", expectedString, sb. toString ( ) )
assertEquals ( expectedMessage, actualMessage )
assertTrue ( pointSymbolizer. getGraphic ( ). graphicalSymbols ( ). isEmpty ( ) )
assertArrayEquals ( new int [ ] { 0, 1, 2 }, ArraysUtil. quickSortP ( target, "0" ) )
assertTrue ( isValid )
assertNotNull ( result )
paths. assertIsDirectoryNotContaining ( INFO, actual, JAVA_SOURCE_PATTERN )
assertThat ( total, is ( 12 ) )
assertThat ( axioms. isEmpty ( ), is ( true ) )
assertThat ( connection. getConnectTimeout ( ), is ( 456 ) )
assertThat ( decorated, is ( object ) )
assertEquals ( 200, c. getResponseCode ( ) )
Assert. assertNotNull ( cookie. getExpiryDate ( ) )
assertEquals ( expected, query. n1ql ( ) )
assertEquals ( "String", decl. getType ( ) )
connection. assertBufferEndsWith ( "Happens when there is no handler for the command" + Config. getLineSeparator ( ) )
assertTrue ( validator. isValid ( ) )
assertTrue ( capacity. allowsWorking ( ) )
Assert. assertEquals ( d2, d, 0 )
assertEquals ( expectedValue, expression. evaluate ( record ) )
assertEquals ( lastValue, "EndNode11" )
assertTrue ( connection. createChannel ( 2 ). isOpen ( ) )
assertTrue ( crateTemplate. delete ( entity. getId ( ) ) )
assertThat ( frankResponse, is ( endpointResponseBody ) )
assertNull ( gaz. getAdditionalData ( ) )
assertEquals ( "", x )
assertEquals ( TranspositionTableStatus. sufficientTerminalNode, eval. status )
assertEquals ( 10, money. getAmount ( ) )
assertThat ( eventTriggered [ 0 ], is ( true ) )
assertTrue ( "Cassandra ordering is not preserved", compare < 0 )
assertGallery ( gallery )
Assert. assertEquals ( ImportConfirmAction. SUCCESS_VIEW, action. execute ( ) )
assertTrue ( IQSyntacticEquivalenceChecker. areEquivalent ( optimizedQuery, expectedQuery ) )
assertThat ( caveat, is ( "uid=2;gid=3;username=paul" ) )
assertThat ( "response contains a non-empty fullName", StringUtils. isNotBlank ( response. getFullName ( ) ) )
assertEquals ( 1, matchingIndexes )
assertThat ( target. parse ( ), is ( false ) )
assertThatSql ( query, is ( "SELECT nodes.col1, nodes.col2 FROM table1 AS nodes INTERSECT ALL SELECT edges.col3, edges.col4 FROM table2 AS edges" ) )
Assert. assertEquals ( value, 1.0e-9 )
Assert. assertEquals ( "id", sw3. get ( "id" ). getAsString ( ) )
Assert. assertEquals ( new Long ( Long. MIN_VALUE ), _c. convert ( "-9223372036854775808" ) )
assertEquals ( expected, actual )
assertThat ( fetchedUuid, is ( equalTo ( uuid ) ) )
assertNotNull ( handler. getSchemaLocation ( "http://cxf.apache.org/blueprint/simple" ) )
assertOut ( "do\\n  a++;\\nwhile (a > b);" )
assertFalse ( valid )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 08" ) )
assertThat ( userServiceLink. getLinkText ( ), is ( "User Service" ) )
assertOut ( "var /** @type {Array.<string>} */ a = org.apache.royale.utils.Language.synthVector('String'))['coerce'](['Hello', 'World'])" )
assertEquals ( 2, fileCtr )
assertEquals ( expected, sendAndCaptureBatch ( batch ). getPoints ( ). get ( 0 ) )
Assert. assertEquals ( "SELECT CEILING(1.23);", text )
assertEquals ( expected, actual )
Assert. assertTrue ( "Incorrect renderer supplied", getWebXmlRenderer ( component ) instanceof WAjaxControlRenderer )
assertEquals ( "Message: [Tim]", ResponseBodyInterpolator. interpolate ( "Message: [Hello] [Route] [Session]", req ) )
Assert. assertEquals ( protocolo, consultaRetorno. getProtocolo ( ) )
assertTrue ( project. equals ( new Project ( "bla" ) ) )
assertTrue ( result. length ( ) > 0 )
assertThat ( repr, is ( "k1=v1|k2=v2" ) )
assertEquals ( "Generated inclusion term should match '" + term + "'", inclusionTerms. get ( 0 ), "term" )
assertNotNull ( "Node not null", node )
Assert. assertFalse ( validator. validSequence ( 1, inputSequence, outcomesSequence, outcome ) )
assertEquals ( "02f912f98xa93419", EncoderUtil. hexEncode ( data ) )
assertRoundtrip ( document )
assertThat ( subStr. contains ( testString, testSubString ), is ( true ) )
assertFalse ( equal )
assertTrue ( subject. isExportForcedSubtitlesOnly ( ). get ( ) )
assertEquals ( 4, ksession. fireAllRules ( ) )
assertThat ( "cron is not null", cron!= null )
assertThat ( result, contains ( v_14 ) )
arrays. assertStartsWith ( description, actual, null )
scope. assertMetricsLevel ( MetricsLevel. SUMMARY, null )
assertEquals ( NoProcessorsWroManagerFactory. class, actual. getClass ( ) )
assertThat ( Util. inputStreamToString ( new ByteArrayInputStream ( bytes ) ), is ( data ) )
assertEquals ( 204, response. getStatus ( ) )
assertTrue ( isEqual )
assertEquals ( "Hello", ( ( BizExceptionNoDefaultConstructor ) read ). getMessage ( ) )
assertEquals ( 3.14, result, 0.00001 )
assertThat ( b. getValue ( ), equalTo ( "Value" ) )
Assert. assertEquals ( 0, analyser. getTimeWindowViolationAtActivity ( route. getStart ( ), route ), 0.01 )
assertEquals ( start, cache. drainStatus )
assertDefaultPorts ( DEFAULT_COMMAND_API_PORT + offset, DEFAULT_INTERNAL_API_PORT + offset, DEFAULT_MONITORING_API_PORT + offset )
Assert. assertFalse ( ret. isEmpty ( ) )
Assert. assertFalse ( "Authenticated", authenticated )
assertEquals ( message, request. getToken ( ), receivedMessage. getToken ( ) )
Assert. assertEquals ( Event. class, eventClass )
assertEquals ( 4, count )
assertThat ( errors. toString ( ), is ( "[ERROR: client.name: [not null] expected <null> but not empty>" ) )
assertSame ( expected, config. merge ( map ) )
assertThat ( fsRootPath, is ( new File ( fsRootPath, "remoting" ) ) )
assertEqualHQL ( "allen AND MARRIED OR AGE OR tree", sb. toString ( ) )
assertEquals ( 1, entriesBeforeRemove. size ( ) )
assertNotNull ( result )
Assert. assertEquals ( msg, fmt. toString ( e ) )
assertEquals ( displayer. isRefreshOn ( ), false )
assertTrue ( "Translation failed", pelopsException instanceof ProtocolException )
assertEquals ( 500, page. getWebResponse ( ). getStatusCode ( ) )
assertTrue ( voter. voteMatch ( affiliation, organization ) )
assertArrayEquals ( generatedPublickey, secretKeySpec. getEncoded ( ) )
assertEquals ( "dois decilh玫es de inteiros", actual )
assertIsOnlyOneElementWithDetails ( elements, "div", "div", "div" )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertTrue ( commandFuture. isSuccess ( ) )
assertNull ( internalResultSet. getString ( 1 ) )
context. assertEquals ( ERROR, replyBody. getString ( STATUS ) )
Assert. assertEquals ( 3, actionConf. get ( MRJobConfig. JOB_NAMENODES. toString ( ) ). size ( ) )
assertEquals ( service. getLocationReport ( ). getVehiclePowerState ( ), 1 )
assertSame ( copy, copier. execute ( copy ) )
assertNonNullTaint ( taintedInt )
Assert. assertFalse ( booster. isEmpty ( ) )
assertEquals ( "hostname", getLoggingContextHostnameProperty ( ) )
assertEquals ( "Hello Camel Rocks", response )
assertFalse ( fixture. hasSubscriptionId ( ) )
assertFalse ( matcher. match ( msg, rule ) )
assertEquals ( expecting, found )
assertEquals ( "geo point mapper serialization is wrong", expected, actual )
assertArrayEquals ( in, out )
assertTrue ( v instanceof PactInteger )
Assert. assertEquals ( 5, doc. get ( new Path ( "arr.5" ) ). intValue ( ) )
assertNotNull ( object )
assertThat ( filled, is ( "/clients/my/path/to/file" ) )
Assert. assertEquals ( word, d_dict. numberToWordTransCard ( i ) )
assertEquals ( 0, historyService. createHistoricProcessInstanceQuery ( ). count ( ) )
assertThat ( markdown, containsString ( tableEntry ( "`myList`", "array of strings", "string" ) ) )
assertThat ( cut. apply ( pageObject ), is ( false ) )
assertEquals ( Status. PASSED, result. getStatus ( ) )
assertThat ( result, equalTo ( true ) )
Assert. assertTrue ( FileUtils. isSymbolicLink ( target ) )
Assert. assertEquals ( CheckResult. TIMEOUT, checkResult )
assertEquals ( "limit=10", query. toQueryString ( ) )
Assert. assertEquals ( expectedPeriod, period )
assertEquals ( expirationSec, relExp )
assertTrue ( TypeUtils. isTypeOf ( expected, inferred ) )
assertNotNull ( cl )
assertEquals ( "[INFLECTEDFORM121, INFLECTEDFORM122]", Arrays. toString ( state. toFinalString ( null ) ) )
assertThat ( calvalusProcessor. getName ( ), equalTo ( "Idepix.Water" ) )
assertFalse ( hasPermission )
Assert. assertNotNull ( result )
context. assertNotNull ( ip )
assertFalse ( loader. load ( "scrypt", true ) )
assertEquals ( 200, response. getStatusLine ( ). getStatusCode ( ) )
assertTrue ( down. getChecksums ( ). isEmpty ( ) )
assertEquals ( "Wrong serialized delta", deltaBefore, deltaAfter )
Assert. assertFalse ( dataVersion. equals ( other ) )
assertAnnotationCompletions ( "@Value(\\"#{<*>}\\")", "@Value(\\"#{<*>}\\")", "@Value(\\"#{<*>}\\")", "@Value(\\"#{<*>}\\")", "@Value(\\"#{<*>}\\")" )
assertThat ( postConstructInvoker. wasPostConstructInvoked, is ( true ) )
assertEquals ( expResult, result )
assertEquals ( 1, filteredTables. size ( ) )
assertThat ( digits, matchesRegularExpression ( "[0-9]" ) )
assertNull ( result )
assertEquals ( "tcp", acceptor. getTransportName ( ) )
assertTrue ( drl. indexOf ( "rule R2\\n" ) > 0 )
assertThat ( arguments. getResources ( ), contains ( FIRST_RESOURCE_URI ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
Assert. assertEquals ( 0, this. sqlgGraph. traversal ( ). E ( ). count ( ). next ( ), 0 )
Assert. assertNull ( userId )
Assert. assertTrue ( "Expected one of the branches to be configured, got: " + branches, branches. iterator ( ). hasNext ( ) )
assertThat ( errors, hasFieldErrors ( "givenName" ) )
assertEquals ( translation, result )
assertTrue ( p. sameAs ( pLoc ) )
assertEquals ( Arrays. asList ( "ok" ), list )
assertTrue ( response. getGeneratedKeys ( ). size ( ) == 5 )
assertEquals ( 5, saga. getState ( ). get ( "123123" ) )
assertFalse ( server. isStarted ( ) )
assertNotNull ( cf )
arrays. assertStartsWith ( description, actual, sequence )
assertThat ( "pattern=" + pattern + " matches string=" + string, pattern. matches ( string ), is ( false ) )
assertEquals ( "Unexpected error message", "ERROR: 3", getCell ( 3, 2 ). getText ( ) )
assertions. doesNotContainNull ( )
assertEquals ( combinationsExpected, result )
Assert. assertNotNull ( testBean )
assertNotNull ( Deencapsulation. getField ( fileUploadTask, "blobURI" ) )
Assert. assertEquals ( now, n )
assertEquals ( text, repository. findOne ( male. getText ( ) ). getText ( ) )
Assert. assertNotNull ( list )
assertEquals ( getTest1String ( ), parser. getString ( TEST1_STRING ) )
TestUtils. assertEquals ( anexo, anexoModificado )
Assert. assertEquals ( Integer. class, clazz )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED, 3, warnings. size ( ) )
assertEquals ( 0, tasks. size ( ) )
assertThat ( checkpoint. get ( "2.2.0-SNAPSHOT" ), is ( "2.2.0-SNAPSHOT" ) )
assertThat ( "event is not null", event, nullValue ( ) )
Assert. assertFalse ( errors. hasErrors ( ) )
assertThat ( transformed, equalTo ( unformattedTableAsString ) )
assertEquals ( expected, actual )
assertOutput ( "ab" )
assertEquals ( value, returned )
assertTrue ( matcher. matches ( context ) )
assertEquals ( "fast", object. parsedTo ( String. class ) )
compiler. assertErrorsOnLines ( "example/Test.java", diagnostics, 7 )
assertEquals ( expected, actual )
assertEquals ( message1, setCommands. pop ( NAMESPACE1, key1 ) )
Assert. assertTrue ( responses. size ( ) == services. size ( ) )
Assert. assertEquals ( null, bean. get ( ) )
assertEquals ( input, output )
assertEquals ( "浣�濂�", firstStatus. getText ( ) )
assertTrue ( drl. contains ( "constraint org.test.lhs.Integer(this > 10) constraint org.test.lhs.Integer(this > 11) constraint org.test.lhs.Integer(this > 12) constraint org.test.lhs.Integer(this > 13)" ) )
assertThat ( xmlResult, CompareMatcher. isSimilarTo ( out. toString ( ) ). ignoreWhitespace ( ). withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors. byNameAndText ) ) )
assertTrue ( "Failed to match both compatible IPv6 addresses", match )
assertEquals ( submissionSet. getAuthors ( ), Collections. singletonList ( author3 ) )
assertNotNull ( info )
assertEquals ( withLabel. getLabel ( ). getLanguage ( ), "fr" )
assertNotEquals ( 0, Files. readAttributes ( other, BasicFileAttributes. class ). length )
assertEquals ( expected, result )
assertThat ( duration. toMillis ( ), is ( 1L ) )
Assert. assertTrue ( "Incorrect focus", driver. switchTo ( true ). hasFocus ( ) )
assertNotEquals ( b3a, b3b )
assertThat ( tags, hasSize ( 0 ) )
assertEquals ( brandsIterative, brands )
assertEquals ( DataStatus. VOID, empty. getSternGroundSpeedStatus ( ) )
assertTrue ( visitor. matching )
assertEquals ( "following commands are available to use:", Arrays. asList ( "a        - desc", "b          - desc" ), output. toString ( ). trim ( ) )
assertEquals ( 0, binary. getValue ( ) )
assertTrue ( hrip. compareTo ( hric ) > 0 )
assertEquals ( PHRASE_REVERSE, reversedString )
assertNotNull ( "Transcript id should not be null", transcript )
assertThat ( result, is ( "123" ) )
assertSame ( row, rowSet. getRowWait ( 1, TimeUnit. SECONDS ) )
assertEquals ( 1, repositoryService. createProcessDefinitionQuery ( ). count ( ) )
assertSame ( url2, url1 )
assertEquals ( "00000014000", this. banco. geraCodigoDeBarrasPara ( this. boleto ). substring ( 19, 44 ) )
runner. assertValid ( service )
assertEquals ( "04", formatted )
Assert. assertEquals ( 0, cliFlags. apply ( bkFlags, new String [ ] { "-l", "1" } ) )
assertNotNull ( containerDetail )
assertEquals ( factor - sum, 0 )
assertObjectEquals ( "{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}", s. getSchema ( BeanList2d. class ) )
assertSame ( fieldVar, result )
assertEquals ( true, result )
assertEquals ( "6 爻丕卅�鬲 卅��诏�乇�", t. format ( new Date ( 0 ) ) )
Assert. assertNotNull ( asiento )
assertThat ( products. size ( ), is ( equalTo ( 1 ) ) )
assertTrue ( tasks. size ( ) == 5 && tasks. get ( 0 ). getId ( ) == 10 && tasks. get ( tasks. size ( ) - 1 ). getId ( ) == 50 )
Assert. assertEquals ( "did not read back the expected value", writtenInt, readBackInt )
Assert. assertEquals ( "Unexpected return value from service", "hello", result )
assertEquals ( mockedIotHubListener, listener )
assertEquals ( ValidationBatchSummaryImpl. DEFAULT, defaultInstance )
assertTrue ( model. getGroups ( ). isEmpty ( ) )
assertFalse ( BindingUtils. equals ( Simple1. class, Simple2. class ) )
assertEquals ( expectedEntropy. get ( date ), value, 0.01 )
assertEquals ( path, "/Users/anyang/Desktop/jacoco/sum/jboss-5.0.1.GA\\\\rasp\\\\..\\\\bin\\\\run.bat" )
assertNotNull ( solver )
assertEquals ( p. get ( i ), 1.0 )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter name=\\"name\\" value=\\"value\\"/>", elem. toXml ( ) )
assertTrue ( response. getPersonInformationStructure ( ). isEmpty ( ) )
Assert. assertEquals ( "��绉�", sum, 0 )
assertEquals ( "The response is not correct", thrownException. getResponse ( ), result )
Assert. assertEquals ( "Assert.assertTrue(\\"xpath=//div[@id='header-login']\\",Pattern.compile(\\".*SARL TOTO \\\\[ Mr Integration Test \\\\].*\\");", result )
assertEquals ( "[]", numbers. toString ( ) )
Assert. assertEquals ( base64_md5, hash )
assertThat ( testOutcome. isPending ( ), is ( true ) )
assertEquals ( new HashSet < String > ( Arrays. asList ( "foo", "bar" ) ), actual. getPropertyNames ( ) )
assertEquals ( svgImage, defaultEditorAdapter. decorateIcon ( inputSvgImage ) )
assertEquals ( false, getMoveDownAction ( ). isEnabled ( ) )
assertEquals ( pc, chip8. getPC ( ) )
assertEquals ( expected, uri. toString ( ) )
assertEquals ( repoDir, repo. getDirectory ( ) )
assertions. isNotLessThan ( expected )
assertEquals ( expectedScript, observedScript )
assertNotNull ( taskService. createTaskQuery ( ). taskDefinitionKey ( "userTask2" ). singleResult ( ) )
assertThat ( share. hasPropertyToRetrieveHours ( ), equalTo ( true ) )
assertThat ( testee. getBeanValue ( ), is ( "testing with stress : 09" ) )
assertEquals ( 28, cal. get ( Calendar. DATE ) )
assertEquals ( user, user )
assertEquals ( 1000.0, vRoute. getDepartureTime ( ), 0.01 )
assertThat ( violations. size ( ), is ( 1 ) )
Assert. assertEquals ( mysqlAffectRow, andorAffectRow )
Assert. assertEquals ( Boolean. TRUE, JsfUtils. isNewMessage ( existingFacesMessage, messageToCheck ) )
Assert. assertEquals ( "[City: [city=Greg, country=Greg], Country: [country=Greg, city=Greg]]", resultList. toString ( ) )
assertEquals ( goldenResponse, responseObserver. firstValue ( ). get ( ) )
assertEquals ( null, actual. getDisplayName ( ) )
assertEquals ( "0", r )
context. assertIsSatisfied ( )
Assert. assertTrue ( FastMath. abs ( error ) > 0.0 )
assertEquals ( NOT_DECODED, object, new CoordTransform ( decoder ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numSlices, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertEquals ( expected, actual )
assertEquals ( expected, key. toString ( ) )
assertInRange ( b, BigInteger. ZERO, limit )
assertEquals ( "incorrect bitLength", 0, aNumber. bitLength ( ) )
assertThat ( restService. getSearchHandler ( "v1/concept", parameters ), is ( nullValue ( ) ) )
assertMessages ( "println", 1, "print_printf_locale" )
assertTrue ( key. getModulus ( ) > 0 )
assertEquals ( "test/folder.gz", subject. getFileExtension ( ) )
assertEquals ( "remoteAPI:name", connectToAPI )
Assert. assertNotNull ( savedSearchDashlet )
assertEquals ( 1, results. size ( ) )
assertDatasetOk ( ds )
assertEquals ( ex. toString ( ), ex2. toString ( ) )
assertTrue ( "basicInterval1 should be less than basicInterval2.", bstc. compare ( basicInterval1, basicInterval2 ) < 0 )
assertEquals ( 200, response. getStatus ( ) )
Assert. assertEquals ( ECHO_STRING, outMessage )
assertArrayEquals ( objects, recordList. toArray ( ) )
assertEquals ( expected, result,.000001 )
assertTrue ( requestOk )
assertTrue ( v8. getBoolean ( "caught" ) )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/job/events/jobstatustrace" ), is ( "1<job name='testJob1' status='WAITING'>\\n" + "  <trace><type>JOB_STATUS</type><args>foo</args><values>bar</values></trace>" ) )
assertEquals ( 0, mongoConnectorResource. committingDocuments ( mongoQuery ) )
Assert. assertEquals ( "Value is incorrect", map ( TIME_1_STRING, "test" ), value )
Assert. assertEquals ( "SELECT ACOS(1.0001);", text )
assertions. isNotEqualTo ( actual )
assertEquals ( 0, findings. size ( ) )
assertSame ( "Different file locator", locator, locator2 )
assertEquals ( "Insert with explicit fields", expectedSql, testDialect. convertStatementToSQL ( insert ) )
assertSerializable ( copy )
assertEquals ( expectedJavaCommand, actualJavaCommand )
assertOneSpan ( )
assertEquals ( tail. getMissing ( 3 ), new HashSet < Long > ( Arrays. asList ( 3l, 2l ) ) )
assertEquals ( 0, app. executeApplication ( args ) )
assertEquals ( "deleteById should return the document id passed into the join point.", documentId, actualReturnValue )
assertEquals ( new BigDecimal ( "1.0" ), obj. getString ( "numberDefault" ) )
assertEquals ( msg. getDeviceOperationType ( ), DeviceOperations. DEVICE_OPERATION_TWIN_UPDATE_REPORTED_PROPERTIES_RESPONSE )
assertEquals ( "select cat_\\n" + "from Cat cat_\\n" + "inner join cat_.mate on cat_.mate.alive", serializer. toString ( ) )
assertNotEquals ( getSettings1, getSettings2 )
assertEquals ( System. getProperty ( "java.class.path" ), locator. locate ( "com/example/A.java" ) )
Assert. assertEquals ( resultExpected, result )
Assert. assertEquals ( 10, result. size ( ) )
arrays. assertContainsExactlyInAnyOrder ( info, actual, arrayOf ( 6, 10, 8 ) )
assertResultSet ( res )
assertSame ( expected, actual )
assertThat ( representation. getString ( "contentType" ), is ( "text/plain" ) )
Assert. assertEquals ( "select STUDENT.ID,STUDENT.NAME,STUDENT.SCHOOL from student", getSql0 ( node ) )
assertEquals ( "", result )
assertThat ( PrettyTime. of ( Locale. US ). print ( dur, TextWidth. WIDE, true, 6 ), is ( "3 years, 1 days, 4 minutes, 0 seconds, and 123 microseconds" ) )
assertEquals ( p. parse ( "1/2" ), new Rational < > ( 1, 2, 2 ) )
assertEquals ( "\\"\\\\t\\\\r value \\\\\\foo\\b￿벭\\n\\"", builder. toString ( ) )
assertTrue ( UrlUtils. isMatch ( consumerUrl, providerUrl ) )
Assert. assertEquals ( 4, i )
assertThat ( result, is ( jsonBoolean ( false ) ) )
assertEquals ( DummyDrawHandler. drawCircleToString ( 1, 2, 3, null, null, null, null, null ), drawHandler. getLastDrawCall ( ) )
assertFalse ( fileResource. usersOrRolesExist ( acl ) )
assertEquals ( events, storedEvents )
assertEquals ( 1, externalTasks. size ( ) )
assertEquals ( "at 16:00:00pm, on the 15th day in March, May and December", descriptor. describe ( cron ) )
assertEquals ( "", settings. getBaseDirectory ( ) )
assertThat ( retrieveSize, is ( numberOfPipelines ) )
Assert. assertEquals ( "stuff and some more stuff", result )
assertTrue ( actual. isEmpty ( ) )
assertEquals ( "Failed to generate if-else-if-block using no rhs", IF_ELSEIF_ELSE_BLOCK_NO_RHS, s )
Assert. assertEquals ( "No exception was expected", false, exceptionCaught )
Assert. assertNull ( sliName )
assertEquals ( expected, actual )
assertMockEndpointsSatisfied ( )
assertEquals ( "#{pass}", evaluatedPassword )
assertEquals ( expectedResult, result )
mock. assertIsSatisfied ( )
assertEquals ( "Test if value red from file equals value stored", mlDouble, content. get ( name2 ) )
assertEquals ( "Exception handler: foo", val )
assertThat ( bundle. getResources ( ), contains ( ingredientMedication ) )
Assert. assertTrue ( isEqual ( d1, d2 ) )
assertNull ( object )
assertEquals ( "ACCEPT", getter. getFilterReply ( ) )
assertEquals ( testCase. mExpected, o )
assertOut ( "/**\\n * @param {number} p1\\n * @param {number} p2\\n * @param {number=} p3\\n * @param {number=} p4\\n * @return {number}\\n */\\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(p1, p2, p3, p4) {\\n" + "\\tp3 = typeof p3!== 'undefined'? p3 : 3;\\n" + "\\tp4 = typeof p4!== 'undefined'? p4 : 4;\\n" + "\\n" + "/**\\n" + " * @export\\n * @return {number}\\n" + " */\\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(p1, p2, p3, p4) {\\n" + "  p3 = typeof p3!== 'undefined'? p3 : 4;\\n" + "}" )
assertThat ( db1, not ( sameInstance ( db2 ) ) )
assertTrue ( res. isEmpty ( ) )
assertions. containsSequence ( sequence )
assertPresent ( session, label )
assertEquals ( "param1=", encodedParams )
assertEquals ( Boolean. TRUE, result )
Assert. assertEquals ( "2008|骞�|搴�|浜�|璧��|��", words )
assertTrue ( rule. matches ( new MockRewrite ( ), new MockEvaluationContext ( ) ) )
assertThat ( found, equalTo ( expected ) )
assertEquals ( "http://foo.com/Patient/123/_history/2333", capt. getValue ( ). getURI ( ). toString ( ) )
assertEquals ( 0, Owner. count ( ) )
assertEquals ( 0, shootist. responses. size ( ) )
assertThat ( ( Long ) ms. get ( "aaa" ), is ( 1L ) )
Assert. assertTrue ( lastElementIsSame ( store, new WeightedObservedPoint ( w, x, y ) ) )
assertEquals ( password, user. getPassword ( ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Enqueue>" + "<Task priority=\\"1\\" timeout=\\"1\\">body</Task>" + "</Enqueue>", elem. toXml ( ) )
assertEquals ( db. build ( ), e )
Assert. assertEquals ( "The spanish fox", shell. expandVariableSubstitutes ( "The ${hiveconf:origin} fox" ) )
JSONAssert. assertEquals ( expected, result. getResponse ( ). getContentAsString ( ), false )
Assert. assertEquals ( expected, udf. evaluate ( args ) )
Assert. assertEquals ( gen. generateInchi ( ac ). getInChI ( ), "InChI=1S/Li1S/Li2" )
Assert. assertEquals ( "OK", returnT. getReturnVal ( ) )
Assert. assertNotNull ( trainer. train ( eventStream ) )
assertThat ( book, is ( equalTo ( otherBook ) ) )
Assert. assertNotNull ( registerResponse )
Assert. assertEquals ( 0, selector. getProductCount ( ) )
assertPathMatchForExpected ( expected )
assertNotNull ( resultMap )
Assert. fail ( "GMException expected" )
assertAccessorsCorrect ( collapsible, "headingLevel", 0, 1 )
assertThat ( defaultName, is ( "Zuid-Holland (region, Netherlands)" ) )
assertEditorClosed ( )
assertTrue ( Arrays. equals ( protocols, configurable. getEnabledProtocols ( ) ) )
assertEqualDoubleArrays ( pyplus, plus, epsilon )
assertEquals ( "straks", t. format ( date ) )
assertTrue ( bucketContent. isEmpty ( ) )
assertThat ( output, CoreMatchers. containsString ( "Created template:" ) )
assertEquals ( "xxx", roleField. getCode ( ) )
Assert. assertEquals ( job, RandomUtils. nextItem ( jobs, RandomNumberGeneration. getRandom ( ) ) )
assertEquals ( "", result )
assertEquals ( 1, books. size ( ) )
assertTrue ( true )
assertMediaFolderEquals ( mediaFolder, newMediaFolder )
assertEqualsWithoutWhiteSpaces ( "(model12)", testSubject. subModel ( new ScadGenerationContextFactory ( ). exclude ( 1 ). create ( ) ) )
assertThat ( converter. toWritableObject ( "foo" ), is ( ( Object ) new DoubleWritable ( "bar" ) ) )
assertTrue ( assignedClientId > 0 )
assertSame ( GBP_2_34, test )
assertEquals ( "filterDisplayName", parameterName )
assertEquals ( "annotation:hello", hello )
assertEquals ( "Hello", soapBindingManager. getBinding ( ep ) )
assertTrue ( onCloseLatch. await ( 1, TimeUnit. SECONDS ) )
assertNotNull ( colegio. getId ( ) )
assertOut ( "return true" )
assertEquals ( httpRequestMethod. getFacebookRedirects ( ). length, 0 )
assertIsAborted ( tx )
assertResultsEqual ( results, 20 )
assertXMLEqual ( new ResourceUtil ( UNSTAR ). getContent ( ), sw. getBuffer ( ). toString ( ) )
Assert. assertNull ( result )
assertThat ( countRowsInTable ( "PERSON" ), is ( before + 1 ) )
assertEquals ( 255, mask [ indY ] [ indX ] )
assertEquals ( "registry:4711/foo/bar@sha256:12345", sut. getImage ( ) )
assertEquals ( 0, indexEntries. size ( ) )
assertThat ( lastEntry. isAlarm ( ), is ( true ) )
assertNull ( principal )
Assert. assertEquals ( "�戒�灞�", words )
assertThat ( testContext, response, is ( not ( nullValue ( ) ) ) )
assertEquals ( WRONG_NUMBER_OF_ANNOTATIONS_PARSED, 1, annotations. size ( ) )
assertThat ( qualifier, is ( "Joe" ) )
assertThat ( time. getTimeRelativeTo ( timeRelativeTo ), equalTo ( dateFormat. parse ( "2013-Jan-18 4:55:12.22" ). getTime ( ) ) )
Assert. assertEquals ( SIMPLE_RETURN_CODE. SUCCESS, check. getErrorType ( ) )
assertDateEquals ( r, t. plus ( d ) )
assertThat ( result, contains ( "Hel", "lo", "wor" ) )
assertFalse ( validator. validate ( EntityNames. STUDENT_TEAM_TRIAL, idsToValidate ). containsAll ( idsToValidate ) )
assertSame ( belongsToEntity, returnedEntity )
assertEquals ( "user", model. getProperty ( "name" ) )
assertEquals ( 2, nativeDependencies. size ( ) )
Assert. isTrue ( true )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  var /** @type {Function} */ f = foo.bar.B.prototype.http_$$ns_apache_org$2017$custom$namespace__b;\\n  c(f);\\n}" )
Assert. assertEquals ( 27. * 2., analyser. getVariableTransportCostsAtActivity ( route. getActivities ( ). get ( 1 ), route ), 0.01 )
assertEquals ( 401, resGetAll. getStatus ( ) )
assertEquals ( expected, result )
assertEquals ( 1, testParseJsonObject. getValue ( context ) )
assertTrue ( m. matches ( ) )
assertEquals ( "[VALUE1, VALUE2, VALUE3, VALUE4]", values. toString ( ) )
assertEquals ( 1, results. length )
assertTrue ( true )
assertThat ( slider. getValue ( ), is ( 1.2345 ) )
assertTrue ( "Button text should be the first component of the split panel", buttonText. equals ( "Button" ) )
Assert. assertEquals ( "[{\\"name\\":\\"name1\\",\\"age\\":1},{\\"name\\":\\"name2\\",\\"age\\":2}]", str )
assertArrayEquals ( expected, encoder. getEncoded ( ) )
assertEquals ( expResult, result )
assertTrue ( "subtree-root child is visitable", _guide. isVisitable ( child ) )
assertNotNull ( underTest. validate ( "repositoryName", config ) )
assertTrue ( "Entries found: " + entries, entries. size ( ) > 0 )
assertThat ( toUnqualifiedVersionlessIds ( myAppointmentDao. search ( params ) ), containsInAnyOrder ( patId, apptId ) )
assertEquals ( "doc", result. getMessage ( ) )
assertRequest ( "POST", "Conference/%s/Member/%s/Play/", confId, memberId )
assertExcludedImplicitly ( node )
assertEquals ( mailboxSize, testResults. highest. get ( ) )
assertThat ( PrettyTime. of ( Locale. US ). print ( dur, TextWidth. WIDE ), is ( "1 centuries, 2 week-based years" ) )
assertEquals ( "anonymous", con. getHeaderField ( "User-Agent" ) )
assertTrue ( voter. voteMatch ( affiliation, organization ) )
assertThat ( actual, is ( "1" ) )
assertFalse ( SpriteUtils. isAliasSprite ( sprite1, sprite2 ) )
assertEquals ( "<a href=\\"http://localhost\\" rel=\\"linked\\">" + "http://localhost" + "</a>", cell. body ( ) )
assertEquals ( 3, position )
Assert. assertTrue ( pss. toString ( ). contains ( "<http://example>" ) )
assertEquals ( true, dt. booleanValue ( ) )
assertEquals ( result. getName ( ), "newValue", "After updating the topic attribute it should be updated by cascade" )
runner. assertAllFlowFilesTransferred ( PutHBaseJSON. REL_FAILURE, 1 )
Assert. assertEquals ( dim. getNumDimensions ( ), 2 )
Assert. assertEquals ( OBJECT, clone )
assertThat ( sampledValue. getMeasurand ( ), equalTo ( measurand ) )
assertEquals ( true, actual )
assertEquals ( patch. toString ( ), "[patch=version:1, patch=version:1, added=added, updated=added, removed=deleted]" )
assertEquals ( testData, result )
assertFalse ( violation )
assertTrue ( message. contains ( TEST_MESSAGE_2 ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + fileName, sourceFolder + "cmp_" + fileName, destinationFolder, "diff_" ) )
assertEquals ( "The template should not exist.", null, output )
assertNotNull ( result )
assertOut ( "var /** @type {boolean} */ a = false" )
assertThat ( target. matchExactly ( flow ), is ( true ) )
assertEquals ( 10, pageService. findMaxApiPageOrderByApi ( API_ID ) )
assertNull ( MultiParts. getFileName ( param ) )
assertNotNull ( result )
assertEquals ( 0.0, Capacity. divide ( cap1, cap2 ), 0.001 )
testRunner. assertAllFlowFilesTransferred ( PutParquet. REL_RETRY, 1 )
assertEquals ( 1, ksession. fireAllRules ( ) )
assertThat ( response. toString ( ), is ( "" + "inet6num:        ::0\\n" ) )
assertEquals ( 0.0, p, 0.001 )
assertTrue ( result. getErrorMessage ( ), result. isSucceeded ( ) )
assertSame ( authenticated, helperSpy. getAuthObj ( ) )
assertEquals ( "ATS03F=0\\r\\n", intArrayToString ( command. serialize ( ) ) )
assertPermanentCount ( playerA, "One with the Machine", 1 )
assertEquals ( Arrays. asList ( "A", "B", "C", "D" ), results )
assertEquals ( "/cas/login", result )
assertNotNull ( result )
assertTrue ( Arrays. equals ( expected, actual ) )
assertEquals ( tableQueryConfig. getExecutionHints ( ). get ( "priority" ), actualConfig. getExecutionHints ( ). get ( "priority" ) )
Assert. fail ( "Xfdf files are not equal" )
assertThat ( bar. isPresent ( ), is ( true ) )
assertNotFired ( watch )
Assert. assertTrue ( "canonicalizing the test file " + filename + " gives a different result than canonicalizing the tmxml export of " + out + " " + baseline, TestFileUtils. compareFileToResource ( out, baseline ) )
assertThat ( query. encodedFilter ( ), is ( encodedFilter ) )
assertSanctionMatched ( match )
Assert. assertNotNull ( chf1 )
assertArrayEquals ( expected, new TelnetEngineConfiguration ( ). encryptBytes ( new byte [ ] { } ) )
assertRepositoryAndObjectCompare ( )
assertNotNull ( result )
assertNotNull ( result )
Helpers. assertJson ( json. toString ( ), "{\\"key1\\":\\"value1\\",\\"key2\\":[],\\"key3\\":\\"value3\\"}" )
Assert. assertTrue ( fileInfoResult == verQueryVal )
Assert. assertTrue ( "XML are similar " + myDetailedDiff, myDetailedDiff. similar ( ) )
assertFalse ( user. isPresent ( ) )
assertEquals ( "xindex", output )
assertEquals ( tenantsForPreloading, service. getAutoLoadFiles ( "tenant" ) )
assertDtoAndMapConstructorAreSame ( 1 )
assertSame ( t. toLocalTime ( ), LocalTime. NOON )
assertEquals ( "https://api.test.com/myapi/customer?issue_id=1337&location=LUND%2FB&enterprise=false", expanded. toString ( ) )
assertEquals ( "test", echo. echo ( "test" ) )
Assert. assertEquals ( CatalogResponseMessage. OK, response. getCode ( ) )
Assert. assertEquals ( String. format ( DEFAULT_MESSAGE, numThreads, numRows, numCols ) + ", rmse = " + rmse, 0.0, rmse, EPS )
assertNull ( result )
assertNull ( "Consent still present in Newsletter", consent. getConsent ( ) )
assertThat ( classes. size ( ), is ( greaterThan ( 0 ) ) )
assertEquals ( 12, jpegBitsPerSample ( "MR2_UNC-J2KR.dcm" ) )
assertThat ( new PullRequestApproval ( Config. builder ( ). requiredReviewers ( newArrayList ( "user1", "user2" ) ). requiredReviews ( 2 ). build ( ), utils ). isPullRequestApproved ( pr ), is ( false ) )
assertEquals ( "Agents Rebooted", result )
assertThat ( domain. endsWithDomain ( ciString ( "n.s.200.193.193.in-addr.arpa" ) ), is ( false ) )
assertThat ( converter, instanceOf ( EnumConverter. class ) )
assertTrue ( ex. isPrime ( 81 ) )
assertEquals ( MenuStore. CONTENT, menuStore. getContent ( ) )
assertEquals ( CALLS, names. size ( ) )
Assert. assertNotNull ( antennae )
assertEquals ( expecting, found )
assertEquals ( prettyPrintJson ( readContent ( EXPECTED_ERROR_RESPONSE_PATH ) ), prettyPrintJson ( json ) )
assertTrue ( organizationResponse. object. getName ( ). equals ( name ) )
Assert. assertEquals ( 1, dashboardHistories. size ( ) )
assertNotNull ( connection )
assertFalse ( userCanBuildProject )
assertThat ( randomProxy, instanceOf ( ProxyObject. class ) )
assertEquals ( false, bm. isBitSet ( bitNumber ) )
assertTrue ( tchh. value. isWriteable ( ) )
assertTrue ( "Stop Run should have been called", pcClient. stopRun ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFileName, cmpFileName, destinationFolder, "diff" ) )
assertEquals ( assertion, test )
assertThat ( subject. shouldProcess ( message ), is ( false ) )
assertEquals ( "(12 (abc 34))\\n", found )
assertEquals ( "The grid should have updated with new data", PERSON, grid. getModel ( ). getModel ( ). get ( 0 ). getCell ( ). getValue ( ) )
assertFalse ( filter. shouldInclude ( source, "some.property" ) )
assertEquals ( expected, mergeAclEntries ( existing, aclSpec ) )
ctx. assertEquals ( "Invalid database", conn. getMessage ( ) )
assertNull ( descriptor. getConstraintsForClass ( "UnknownMethod" ) )
assertNotNullOrEmpty ( "Questions should never be null.", questions )
assertEquals ( Response. Status. NO_CONTENT. getStatusCode ( ), resource. deleteConnection ( "Name" ). getStatus ( ) )
Assert. assertTrue ( iface. isWindowLoaded ( ) )
assertEquals ( "{\\"resourceType\\":\\"Patient\\",\\"meta\\":{\\"tag\\":[{\\"system\\":\\"scheme\\",\\"code\\":\\"term\\",\\"display\\":\\"display\\"}]},\\"identifier\\":[{\\"system\\":\\"sys\\",\\"value\\":\\"val\\"}]}", enc )
assertThat ( nbrOfStores, is ( 4 ) )
Assert. assertThat ( "response.statusCode", response. getStatusCode ( ), is ( 200 ) )
assertTrue ( "Should be an Element", something instanceof Element )
assertFalse ( topic. getSubscribers ( ). contains ( user ) )
assertTrue ( existentFile. exists ( ) )
assertFalse ( filter. getExpr ( ) instanceof ExprInfo )
assertEquals ( Types. INTEGER, cInfo. getType ( ) )
assertThat ( cut. getItems ( ), contains ( item1, item2 ) )
assertThat ( instance. matches ( message, matchers ), is ( false ) )
assertThat ( other, LocalTimeMatchers. sameMinuteOfHour ( date ) )
Truth. assert_ ( )
assertNotNull ( polygonSymbolizer. getFill ( ) )
assertThat ( output ( outputDirectory, outputPath ), equalTo ( resource ( outputPath ) ) )
assertEquals ( 4, size )
Assert. assertEquals ( 0L, actual )
assertEquals ( expected, actual )
assertThat ( getterMethod. getReturnType ( ). getName ( ), is ( "java.lang.Integer" ) )
assertEquals ( 98, dataCharacter. getValue ( ) )
assertSame ( name + " - mismatched enum values", expected, actual )
assertEquals ( "(table(binding)))", x )
assertEquals ( direct. length ( ), proxied. length ( ) )
Assert. assertTrue ( person. getPersonDateVoided ( ) == null )
assertNotNull ( httpStack )
assertThat ( webServer. getAddress ( ). getHostName ( ), equalTo ( "localhost" ) )
assertFalse ( capabilityMatcher. matches ( nodeCapabilities, requestedCapabilities ) )
assertEquals ( text, reply )
assertEquals ( 0, permissions. length )
assertEquals ( "<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil. stripNewlines ( cleanHtml ) )
assertSingleEmptyLink ( linkNames )
assertEquals ( "Not same integer: ", v1. getInt ( ), v2. getInt ( ) )
assertEquals ( node, r. get ( "node" ) )
assertEquals ( "Norbert,Europe/Paris", mustache. render ( Json. createReader ( new StringReader ( "[]" ). read ( "Norbert" ) ) ) )
assertEquals ( OutputChangeEvent. OUTPUT_EVENT. OUTPUT_ADDED, outputEvent [ 0 ]. getEvent ( ) )
ctx. assertTrue ( ex instanceof ConsumerException )
assertSame ( springRenderKit, renderKitCaptor. getValue ( ) )
assertCorrectness ( sparkModel, rowDataset )
Assert. assertNull ( testSubject. subModel ( new ScadGenerationContextFactory ( ). exclude ( 12 ). create ( ) ) )
assertThat ( "should call extension for all issues", subscriber. lastEvent ( ), instanceOf ( GHEvent. ISSUES ) )
assertTrue ( "Project Name was supposed to be invalid.", jiraTracker. isValidProjectName ( ) )
assertNotNull ( MessagingConfiguration. fetcher ( "VAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). fetch ( ) )
assertEquals ( response. getStatus ( ), STATUS200 )
assertSame ( element, node. getElement ( ) )
assertEquals ( "Expected 0 results!", 0, count )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destFilename, sourceFolder + "cmp_copyFields06.pdf", destinationFolder, "diff_" ) )
assertSingleGruxAlbum ( spec )
assertNotNull ( PhoneNumber. reader ( "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
Assert. assertTrue ( response. getAttachments ( ). hasNext ( ) )
Assert. assertFalse ( isElementConsented )
Assert. assertTrue ( res. isLeft ( ) )
assertEquals ( "src/test/resources/existing-readable.file", result. getPath ( ) )
assertEquals ( "1", id. toString ( ) )
Assert. fail ( )
assertThat ( fetchCount ( ), is ( 1L ) )
assertThat ( response. getPayload ( ), is ( not ( instanceOf ( NullPayload. class ) ) ) )
assertThat ( rendered, is ( "ab\\r\\n..c" ) )
assertTrue ( errMsgs. get ( 0 ). equals ( coreBundle. getString ( "error.unexpected.syntax" ) ) )
assertEquals ( route, routingTable. findRoute ( "cell-A", Optional. empty ( ), true ) )
assertThat ( plugin. arg, is ( equalTo ( "hello" ) ) )
assertFalse ( "Reloading should not be performed for non existing file", detector. isReloadingRequired ( ) )
Assert. assertFalse ( InstanceValidationUtil. hasValidConfig ( mock. dataAccessor, TEST_CLUSTER, TEST_VALUE ) )
assertTrue ( diskInfo. isPresent ( ) )
assertEquals ( Status. OK, result )
inputStreams. assertHasContent ( someInfo ( ), actual, expected )
assertEquals ( "Testing rho: ", expectedRhoTwoStep, rho, 1e-3 )
assertThat ( pickupTruck1, not ( equalTo ( pickupTruck2 ) ) )
assertThat ( read ( stream ), is ( empty ( ) ) )
assertThat ( actual, is ( expected ) )
assertEquals ( CarType. AUDI, carType )
assertEquals ( 0, repositoryReader. readAll ( ). size ( ) )
assertFalse ( isModifiable )
assertNull ( schemaManager. getPropertyDefinition ( ElementType. VERTEX, "property" ) )
assertEquals ( "Output order: " + outputOrder, exp, out )
assertEquals ( expectedAddress, gotAddress )
assertTrue ( Bytes. compareTo ( bytes1, bytes2 ) < 0 )
assertEquals ( SampleLocations. UNKNOWN, cargo. getLastKnownLocation ( ) )
assertThat ( actual. get ( "latest" ), containsString ( "1.0.0" ) )
assertTrue ( 5.0f == d. asFloat4 ( ) )
assertEquals ( "", result )
assertEquals ( "SQL92", rootNode. getProperty ( StandardDdlLexicon. PARSER_ID ) )
assertFalse ( validator. validate ( certificateMapping, PUT ). passedValidation ( ) )
assertEquals ( "Wrong node key", "parent", engine. nodeKey ( root, "parent", handler ) )
assertResultSet ( res )
assertEquals ( template + " ", test. build ( ) )
assertThat ( persons, equalTo ( expectedPersons ) )
assertTrue ( otherSet. contains ( "hei" ) )
assertTrue ( job. waitForCompletion ( true ) )
assertThat ( examplesTable. asString ( ), equalTo ( TABLE_AS_STRING ) )
assertEquals ( klass, ObjectNode. class )
assertFalse ( UrlUtils. isMatch ( consumerUrl, providerUrl ) )
assertEquals ( fact. getValidators ( fooset ). size ( ), 1 )
Assert. assertEquals ( 2, maxSize )
Assert. assertNotNull ( jdbcStore2 )
assertThat ( result. replaceAll ( "\\\\s+", "" ), equalTo ( expectedOutput. replaceAll ( "\\\\s+", "" ) ) )
assertEquals ( "Parsing of double option does not match expected result.", PROPERTY_DOUBLE_VALUE, parseResult, 0 )
ReaderAssert. assertThat ( Conll2006Reader. class, Conll2006Reader. PARAM_SOURCE_LOCATION, "src/test/resources/conll/2006/fi-ref.conll", Conll2006Reader. PARAM_PATTERNS, new String [ ] { "[+]*.conll" } )
assertEquals ( 3, missingNumber. missingNumber ( array ) )
assertEquals ( expected, actual )
assertThat ( auth, is ( not ( nullValue ( ) ) ) )
assertThat ( whoisObject. getAttributes ( ), hasItems ( new Attribute ( "auth", "MD5-PW $1$s7bGFzdKGsZhL4sDcJTGsZhBhZS4=" ), new Attribute ( "source", "TEST" ), new Attribute ( "source_id", "OWNER-MNT" ), new Attribute ( "auth", "MD5-PW $1$s7bGsZhBhZQk" ), new Attribute ( "source_id", "OWNER-MNT" ), new Attribute ( "auth", "MD5-PW $1$s7bGsZWydKGsZWydKGsZWydKGsZWydKGsZWydKGsZWydKGsZWydKGsZWydKGsZWyDcJTGsZWyDcjTGsZWydKGsZWydKGsZWydKGsZWy
assertFalse ( processor. process ( entry ) )
assertFalse ( activity. isFinishing ( ) )
assertEquals ( nativeToAscii ( UNENCODED ), nativeToAscii ( nvDecoded ) )
assertEquals ( documentId, options. documentId ( ) )
assertEquals ( expectedFeatures, tokens. get ( 0 ). getAllFeatures ( ) )
Assert. assertEquals ( hash, 0 )
assertTrue ( "should receive message", handler. isCalledOnce ( ) )
assertThat ( testCallback, is ( expectedCallback ) )
assertEquals ( "x, y goo x", result )
Assert. assertEquals ( "{\\"PropertyInt16\\":111,\\"PropertyString\\":\\"TEST A\\"}", resultString )
assertEquals ( 5, test. sum ( 5, 9 ) )
Assert. fail ( "Cannot create metablocks with the same name." )
assertEquals ( "Wrong number of values added", 2, values. size ( ) )
Assert. assertEquals ( count + 1, conectores. size ( ) )
assertTrue ( kbuilder. hasErrors ( ) )
assertEquals ( query1, query2 )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
Assert. assertArrayEquals ( new int [ ] { 2, 3, 4, 5 }, result )
assertEquals ( "Incorrect number of classes.", 2, dao. countClasses ( ) )
assertEquals ( columnInfoActualValue. toString ( ), columnInfo. toString ( ) )
assertThat ( Visitors. readable ( query ), is ( "SELECT * FROM A EXCEPT ALL SELECT * FROM B" ) )
assertEquals ( "Base value is not properly parsed", 365L, parsed )
Assert. fail ( )
assertResultSet ( expectedNumRows, expectedNumBytes, expectedReadBytes )
assertFalse ( rule. isVersionValid ( null ) )
assertEquals ( entry, result )
assertThat ( rs, equalTo ( expected ) )
assertOkAndNotNullResult ( resp )
assertTrue ( b )
assertLayerRefinedObjectClass ( objectClass, RESOURCE_DUMMY_PRIVILEGE_OBJECTCLASS_QNAME, ShadowKindType. ENTITLEMENT, "privilege", LayerType. MODEL )
assertEquals ( ReportFormat. PDF, result. getFormat ( ) )
assertFalse ( androidImpl. isSDCardEnoughSpace ( device, 5120L ) )
validator. assertTestSuiteResults ( 2, 0, 0 )
assertThat ( CountingJob. ourCount, lessThan ( 1 ) )
assertHelpLines ( "Option         Description", "------         -----------", "-a <String>              ", EMPTY )
assertResultIs ( 1L )
assertTrue ( "Path for removed property is wrong: actual=" + listener. getEvents ( ). get ( 0 ). getPath ( ) + ", expected=" + propPath, containsPath ( listener, propPath ) )
assertEquals ( "public void call(String arg0, String arg1, String arg2)", signature )
assertThat ( clause. toString ( ), is ( "(person)<-[:members]-(group)" ) )
Assert. assertTrue ( "Stub exception was not forwarded.", stubFailed )
Assert. assertTrue ( result. next ( ) )
Assert. assertEquals ( 1, count )
assertThat ( found, hasSize ( 0 ) )
assertNull ( factIdentifier. getPackageWithoutClassName ( ) )
assertThat ( path. getString ( NO_OP_ENCODER ), is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../{}d/./{http://www.modeshape.org/1.0}e/../.." ) )
assertEquals ( count + 2, session. from ( restriction ). list ( restriction ). size ( ) )
assertThat ( tokens, equalTo ( Arrays. < Object > asList ( "1", "2", "3", "4" ) ) )
assertArrayEquals ( data, bb )
assertRejectedExecutionHandler ( ref. get ( ) )
assertNotNull ( t )
assertOut ( "var a:Object = Object(\\"1\\")" )
assertTrue ( serializedDevice. contains ( symmetricKeySecuredDeviceAuthenticationJson ) )
assertEquals ( caption, widget. getText ( ) )
assertEquals ( "The rollup serialization is wrong", rollupGroup, Serializer. deserialize ( bb. array ( ) ) )
assertThat ( NF. nullNode ( ), is ( sut ) )
assertEquals ( BUNDLE_URI + "profile/tavernaWorkbench/" + "configurations/Hello/", uri. toASCIIString ( ) )
assertEquals ( resolvedAlerts. size ( ), 1 )
Assert. assertEquals ( "Jack", lambda. getString ( ) )
assertEquals ( expected, requestBody )
assertEquals ( 1, template. getNodes ( ). size ( ) )
assertThat ( yamlSource. toString ( ), containsString ( testUrl ) )
Assert. assertEquals ( count, countStructure. get ( ) )
assertResult ( session )
assertFalse ( returnedValue )
assertTrue ( container. children. isEmpty ( ) )
assertTrue ( pa. getOptions ( ). size ( ) == 2 )
assertEquals ( assertion, log )
assertEquals ( 190, sum )
assertFalse ( iterator. hasNext ( ) )
assertTrue ( contentString. contains ( "HUMAN" ) )
assertEquals ( "hadoop/_HOST@EXAMPLE.COM", configMap. get ( "hdfs.client.failover.proxy.provider.sandbox-nn-ha" ) )
assertThat ( underTest. passwordsMatch ( password, shiro1Hash ), is ( true ) )
assertEquals ( encoded. length, fixture. prepareToEncode ( context ) )
assertEquals ( expected, actual )
assertSame ( dataSource, factory. getDataSource ( descriptor ) )
assertEquals ( "1.23", rp. toNumberParam ( ourCtx ). getValue ( ) )
assertTrue ( p. getContent ( ). size ( ) > 0 )
assertTrue ( getNoErrorMsg ( ), result )
assertEquals ( "true", new BbCodeReviewProcessor ( ). postProcess ( "<pre>int good=2;[-code]</pre>" ) )
assertEquals ( multiEncodedKVFilter ( columnComparison ( CompareOp. EQUAL, A_STRING, B_STRING ) ), filter )
Assert. assertEquals ( "result", 1, result )
Assert. assertTrue ( "did not get correct time", timeVal > 0 )
assertThat ( "Lorem Ipsum", nodeData. getValue ( TermColor. class, "background" ), is ( tf. createColor ( 0, 0, 0 ) ) )
assertEquals ( 5, cleanedOffset. length )
assertIndexedRecord ( typeDesc, indexedRecord )
assertEquals ( "Lorem ipsum (2 paragraphs)\\n\\n", paragraphs )
Assert. assertFalse ( clientBoList. isEmpty ( ) )
Assert. assertTrue ( childRenderer instanceof Root )
assertNull ( new DefaultPushServer ( projectA, projectB ). get ( ) )
assertThat ( verifyModelVersionsSaved ( ), is ( ImmutableMap. of ( "foo", "1.2", "bar", "1.1", "wibble", "2.0" ) ) )
assertEquals ( "", result )
assertEquals ( expected, e. evaluate ( ), 0.0 )
assertThat ( out. toString ( ), equalTo ( "|one|two|\\n|11|12|21|22|\\n" ) )
assertEquals ( inputString, outputString )
assertEquals ( "1.133.0", clone. getVersionLabel ( ) )
assertEquals ( expResults, results )
assertTrue ( result. length ( ) == 0 )
Assert. assertEquals ( 0, norm, 1.0e-15 )
assertEquals ( 10, content. split ( "\\n" ). length )
Assert. assertNotNull ( addressResultsDto )
Assert. assertEquals ( Arrays. asList ( new IntegerToken ( - 15 ), new IntegerToken ( 3 ) ), res )
assertEquals ( "The strings should be equal", "English Sentence", diacriticsString )
Assert. assertEquals ( 1.2D, res )
assertEquals ( 0, byteBufResultCaptor. getResult ( ). refCnt ( ) )
assertThat ( runs, contains ( asList ( 1, 1 ), asList ( 2, 2 ), asList ( 3, 4 ), asList ( 4, 5 ) ) )
assertThat ( objectMapper. fromJson ( objectMapper. toJson ( map ) ), is ( objectMapper. fromJson ( "{\\"typeName\\":\\"Processes\\",\\"fields\\":[{\\"name\\":\\"process\\",\\"type\\":\\"ConversionRateProcess[]\\",\\"properties\\":[\\"REQUIRED\\"]}]}" ) ) )
Assert. assertEquals ( 1, commandLine. hasOption ( "numargs" ) )
assertThat ( result, equalTo ( false ) )
assertEquals ( "Q3NlMnYXNzdW5vbW0vcXhbW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0X0X0X0X0YXNzdW5vbW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0vcXNzdW0XNzdW0X", buffer. toString ( ) )
assertEquals ( controllerName, "io.swagger.oas.sample.controllers.MyTag" )
Assert. assertEquals ( 204, res. getStatus ( ) )
assertEquals ( timeInstant. getIntervalType ( ), DateIntervalType. MINUTE )
Assert. assertEquals ( message, String. valueOf ( eventBus. consume ( ) ) )
assertTrue ( resource + " is not valid", result. isValid ( ) )
assertThat ( person. name ( ), is ( "rekord" ) )
assertTrue ( jarRuntimeInfo. isClassLoaderReusable ( ) )
assertEquals ( "B", cell. text ( ). get ( ) )
assertEquals ( "<script>\\n" + "  <!--\\n" + "    document.write('</scr' + 'ipt>');\\n" + "  // -->\\n" + "</script>", node. body ( ). html ( ) )
assertEquals ( Permission. Type. MENU, entity. getType ( ) )
Assert. assertFalse ( matcher. match ( rule, testNode2, parent ) )
assertEquals ( 0, appNodes. size ( ) )
FixtureAsserts. assertStringMatchesJsonFixture ( "DeleteUser by admin response render to HAL+JSON", actualResponse, "/fixtures/hal/user/expected-admin-delete-user.json" )
assertFalse ( "BloomFilter#not should have inverted all bits", bf. bits. intersects ( origBitSet ) )
assertEquals ( 1, betweenTwoSets. solution ( A, B ) )
assertTrue ( start. isSuccessful ( ) )
assertIAEWhenAccessingResult ( service. prepare ( query ) )
assertEquals ( 200, response. getStatus ( ) )
assertEquals ( stringLine, sut )
assertVersions ( ctx, "9" )
assertEquals ( 69, result )
assertEquals ( "Conversion did not match", value, to )
assertThat ( component. getLastUpdated ( ), is ( expected ) )
Assert. assertNotNull ( outStream )
longs. assertNotGreaterThan ( description, null, 6l )
assertEquals ( "", result )
assertTrue ( o. containsAxiom ( i ) )
assertEquals ( "Should only have one neuron", 1, lst. size ( ) )
Assert. assertEquals ( rtpPacket. getTimestamp ( ), 0xFFFFFFFF, "Timestamp should be 0xFFFFFFFF." )
assertThat ( iconCaptor. getValue ( ), is ( ":ghost:" ) )
assertArrayEquals ( new double [ ] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, result,.01 )
assertThat ( limbo. getWalkSpeed ( ), equalTo ( LimboPlayer. DEFAULT_WALK_SPEED ) )
assertEquals ( "default-value", a. getValue ( ) )
assertThat ( uris, is ( asList ( new URI ( "http://baseurl/static/rapture/baseapp-debug.js" ), new URI ( "http://baseurl/static/rapture/extdirect-debug.js" ), new URI ( "http://baseurl/static/rapture/d3.v4.min.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://baseurl/extjs-debug.js" ), new URI ( "http://base
Assert. assertNotNull ( addressResultsDto )
assertEquals ( expected, actual )
assertThat ( period, equalTo ( new TimePeriod ( 61.0, 0, 0 ) ) )
assertions. doesNotContainValue ( value, index )
assertEquals ( a, aDeserialized )
assertEquals ( "", html )
assertArrayEquals ( a. toArray ( ), A. toArray ( ), DELTA )
assertTrue ( "Table " + tableName + " does not contain the 'TABLE_CAT' prefix", tableName. contains ( "TABLE_CAT" ) )
assertThat ( supported, is ( true ) )
assertEquals ( forumObject. getForumUuid ( ), forumUuid )
assertEquals ( request. getUri ( ), expectedURI )
assertThat ( certificateService. getInternalCertificate ( ), nullValue ( ) )
assertEquals ( "Supplier should get content", CONTENT, content )
assertNull ( props. toString ( ) )
assertTrue ( "Unexpected data", buffer. readableBytes ( ) == 0 )
Assert. assertTrue ( _c. canConvertTo ( Float. class ) )
assertThat ( references. size ( ), is ( 0 ) )
assertEquals ( "Test Get Title", "Test Get Title", classUnderTest. getTitle ( ) )
assertEquals ( 2, retDepartments. size ( ) )
assertThat ( zhong, not ( hasKey ( city ) ) )
assertEquals ( TestClass1. class. getName ( ), service. injectedLogger. getName ( ) )
Assert. assertEquals ( testexpect, JsonbProvider. provider ( ). combineBindValues ( test, testparam ) )
assertThat ( clock. startAt ( date ), is ( date ) )
assertThat ( match, matchesTo ( "lite-1.5.0.0-SNAPSHOT.jar" ) )
assertTrue ( actualStopPoint. equals ( mockStopPoint ) )
assertThat ( address, hasKey ( countryCode ) )
assertEquals ( Status. NOT_FOUND, response. getClientResponseStatus ( ) )
Asserts. check ( targetHosts. size ( ) > 1, "fail test" )
Assert. assertEquals ( 2, map. size ( ) )
Assert. fail ( "createDNASequenceWithQualityScores(null) expected IllegalArgumentException" )
Assert. assertNotNull ( "No se ha generado el CSV", infoDocumento )
assertEquals ( frameData1, frameData2 )
assertEquals ( R. style. Theme_Default_Dialog, themeResId )
Assert. assertEquals ( "SELECT INTERVAL '123-2' YEAR(3) TO MONTH\\nFROM DUAL;\\n", text )
assertThat ( truncated, contains ( nullValue ( ) ) )
assertEquals ( 5, maxProductOfThree. solution ( array ) )
assertTrue ( expectedFilteredRecommendedItems. containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( asList ( trace ( mdcValues, message, args ) ), testLogger. getLoggingEvents ( ) )
assertEquals ( 0, parameters. size ( ) )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter/>", elem. toXml ( ) )
assertFalse ( SUT. isQuiescent ( ) )
assertEquals ( Result. FAIL, type. apply ( item ) )
assertTrue ( params == null )
assertSame ( value, bound. value ( ) )
assertThat ( jsonGeneratorParser. value ( ), is ( jsonResource ( "/io/sentry/marshaller/json/Exception2.json" ) ) )
assertEquals ( model, RdfTestHelpers. parseRdf ( RdfSerializer. TASK_SIMPLE_STATEMENTS ) )
this. assertTokenizesTo ( _t, json, jsonGen. tokenizer. tokenize ( json ), jsonGen. tokenizer. tokenize ( json ), jsonGen. tokenizer. tokenize ( json ), jsonGen. tokenizer. tokenize ( json ) )
assertEquals ( response. getContentAsByteArray ( ), validImage )
assertArrayEquals ( new Item [ ] { FOURTH_ITEM, THIRD_ITEM }, actual. toArray ( new Item [ 2 ] ) )
assertEquals ( 0, polyline. getPathCount ( ) )
Assert. assertEquals ( "file is not in new resource", testingProperties. getProperty ( TestingPropertiesHelper. IRODS_SECONDARY_RESOURCE_KEY ), actual. getResourceName ( ) )
assertThat ( ids, containsInAnyOrder ( patId, medId, moId ) )
this. assertAnalyzesTo ( _a, "<http://dbpedia.org/resource/their_Kingston_Trio>", new String [ ] { "dbpedia", "resource", "kingston_trio", "trio", "http://dbpedia.org/resource/their_kingston_trio" }, new String [ ] { "word", "word", "word", "word" }, new int [ ] { 1, 1, 1, 1, 1, 0 } )
assertNull ( selector. getProxy ( repo ) )
assertThat ( driver. findElement ( By. id ( "item8" ) ). getText ( ), is ( "Item 8: Test" ) )
assertArrayEquals ( getPixels ( expected, 0, 0, expected. getWidth ( ), expected. getHeight ( ), null ), getPixels ( actual, 0, 0, actual. getWidth ( ), actual. getHeight ( ), null ) )
assertThat ( status, is ( 204 ) )
assertThat ( XMLAdapter. XML_TIME. translate ( cal ), is ( expected ) )
assertTrue ( stack2. isEmpty ( ) )
assertEquals ( MinaTransporter. class, ExtensionLoader. getExtensionLoader ( Transporter. class ). getExtension ( name ). getClass ( ) )
assertEquals ( notifier. getName ( ), result. getName ( ) )
assertThat ( copy. getEntityAProperty ( ), sameInstance ( anotherEntity ) )
assertNotNull ( result )
assertEquals ( playerProperties. getNext ( ), stringArgumentCaptor. getValue ( ) )
Assert. fail ( "AllocateRequest should fail because AM was not registered" )
assertEquals ( np. getNumberOfRoutes ( lowerLayer ), 0 )
assertThat ( text, notNullValue ( ) )
Assert. assertEquals ( newMaster, currentMaster )
assertEquals ( PROJECT_ID, options. projectId ( ) )
assertEquals ( listSize, result. size ( ) )
assertTrue ( f. flag ( ) )
assertEquals ( 0, noException )
assertThat ( name. getSegments ( ), contains ( "lower" ) )
assertThat ( javaDocComment, not ( containsString ( "(Required)" ) ) )
Assert. assertEquals ( 2, result. size ( ) )
assertThat ( graphQlSchemaBuilder. build ( ), is ( instanceOf ( AssertException. class ) ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPdf, cmpPdf, destinationFolder, "diff" ) )
assertTrue ( "Metric value should be equal.", Objects. equals ( basicMetric, victim. getMetric ( ) ) )
assertTrue ( organizationalUnitController. canDeleteOrgUnit ( mock ( OrganizationalUnit. class ) ) )
Assert. assertEquals ( 0, sync ( cache. size ( ) ). intValue ( ) )
Assert. assertEquals ( ColorConstants. RED, p. getStyle ( ). getFontColor ( ) )
assertEquals ( "Wrong result", Result. FAILURE, incompleteActivationRule. getResult ( ) )
Assert. assertTrue ( fsView. getFileStatus ( new Path ( "/" ) ). isDirectory ( ) )
assertEquals ( uriString, uriRecord. getUri ( ) )
assertEquals ( 1, countValue )
assertions. containsSequence ( sequence )
assertThat ( text, is ( "label" ) )
assertOut ( "x=100" )
assertParseTree ( rootNode ( "", node ( "digits", Arrays. < String > asList ( ), "" ) ), tree )
assertEquals ( nParquetRecords, nAvroRecord )
assertThat ( "when not allowed", withUserRestriction ( tlRule. getListener ( ), uRestr ). apply ( new GHPullRequest ( ) ), is ( false ) )
Assert. assertNotNull ( doc )
assertEquals ( expResult, result )
assertSame ( locale, response. getLanguage ( ) )
assertLookup ( breaks, values, srcImg, DataBuffer. TYPE_DOUBLE )
assertTrue ( zk. getData ( wi ). size ( ) > 0 )
assertEquals ( new BigDecimal ( "10.78" ), ( BigDecimal ) doc. field ( "firstNumber" ) )
outputValidator. assertTestSuiteResults ( 1, 0, 0, 0 )
assertPersonProfile ( person )
assertThat ( changeScript. getContent ( ), is ( "Hello\\nThere!\\n" ) )
assertEquals ( expectedFiles, files )
assertNull ( tuple. getField ( "field" ) )
Assert. fail ( "Service1 was not generated" )
assertTrue ( query. getIndex ( ) instanceof TemporalIndex )
assertThat ( results, contains ( ( Matcher ) hasEntry ( "code", "WGT234" ) ) )
assertTrue ( stmt instanceof DropTableNode )
assertTrue ( rewrittenXml. contains ( "<wsa:EndpointAddress>http://127.0.0.1:2000/wsa/test</wsa:EndpointAddress>" ) )
assertAplicacion ( aplicacion )
assertEquals ( ARGS_1_ARG_TO_STRING, sink. result ( ) )
assertXmlEquals ( "<PrimeMeridian xmlns=\\"http://www.w3.org/2001/XMLSchema\\"><root><first>GREENWICH</first></root>", marshal ( pm ) )
assertThat ( target. parse ( ), is ( false ) )
Assert. assertEquals ( "Hi test1", result )
assertThat ( result, is ( "abc" ) )
assertThat ( the ( name, be ( equalTo ( "Alex" ) ). or ( the ( name, be ( startsWith ( "A" ) ) ) ) ), is ( false ) )
assertThat ( partition, is ( newPartition ( ) ) )
assertEquals ( "This is a root node", map. get ( "a" ) )
assertEquals ( Observing. Status. OK, response. getStatus ( ) )
Assert. assertEquals ( 1, s, Math. ulp ( 1d ) )
assertThrows ( ( ) -> instance. matcherFor ( matcher ) )
assertThat ( ( double ) stopwatch. getMinimumDuration ( ). getDuration ( TimeUnit. MILLISECONDS ), is ( closeTo ( 50, 50 ) ) )
Assert. assertTrue ( tempFontFile. exists ( ) )
assertTrue ( Modifier. isPrivate ( constructor. getModifiers ( ) ) )
Assert. assertEquals ( "TEST3", text )
Assert. assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Enqueue>" + "<genericTag>" + "Some text" + "</genericTag>" + "</Enqueue>", elem. toXml ( ) )
assertEquals ( 2, measurementHistory. getUpdatesCount ( ) )
assertEquals ( 3, list. size ( ) )
assertNotNull ( "State is null", entity )
assertTrue ( "there are scenario failures", results. getFailCount ( ) == 0 )
assertTrue ( processor. isValid ( new Matrix2D ( ), null ) )
assertOut ( "var /** @type {Array} */ a = org.apache.royale.utils.Language.arrayAsVector(['Hello', 'World'], 'String')" )
assertThat ( client. getTotalFunds ( ), equalTo ( FUND_A_VALUE + FUND_B_VALUE ) )
assertTrue ( map. isEmpty ( ) )
assertEquals ( false, result )
assertArrayEquals ( EXPECTED_REGISTER_RESPONSE, encodedBytes )
assertThat ( isExpectedData, is ( true ) )
assertEquals ( io. motown. domain. api. chargingstation. ReservationStatus. UNAVAILABLE, reservationStatus )
assertTrue ( stringBuffer. toString ( ). equals ( "SLI-MIB-0.1.0" ) )
assertEquals ( 1234567723442, executeTestMethod ( test, Integer. class, null, 1234567723442 ). longValue ( ) )
assertTrue ( copy. getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( count_addresses, results. size ( ) )
assertTrue ( connection. createChannel ( 1 ). isOpen ( ) )
assertEquals ( z, instance. value )
assertEquals ( "Expected 2 results!", 2, n )
assertSame ( DUMMY, SegmentRegistry. get ( ID ) )
assertEquals ( 2, post. getComments ( ). size ( ) )
Assert. assertEquals ( 4.0, a. manhattanNorm ( ), Matrices. EPS )
assertTrue ( future. isDone ( ) )
Assert. assertEquals ( configuration. getIntField ( ), result. getIntField ( ) )
assertEquals ( data, new String ( decryptedBytes. get ( ), "UTF-8" ) )
assertNull ( results )
assertNull ( resolved )
assertTrue ( "The sip sip sip sip sip sip sip sip sip sip sip:sender@127.0.0.1:5080;transport=tcp;lr". equals ( requestURI. toString ( ) ) )
assertArrayEquals ( data, ( double [ ] ) deserialize. readObject ( double [ ]. class ), 0.0001 )
assertThat ( Arrays. asList ( keys ), hasItem ( "REQUEST_ID" ) )
assertions. isNotLessThan ( expected )
assertNotNull ( result )
Assert. assertTrue ( myRecordList. size ( ) == 0 )
Assert. assertTrue ( subscriber. checkUpdates ( expectUpdates ) )
assertEquals ( 13, buffer. get ( ) )
Assert. assertFalse ( ModuleUtil. matchRequiredVersions ( openmrsVersion, requiredOpenmrsVersion ) )
assertEquals ( 0, eventRealPaths. size ( ) )
assertEquals ( expectedName, generated )
assertEquals ( TaxonomyPrinter. getElkTaxonomy ( taxonomy1, taxonomy2 ). size ( ), 1 )
assertThat ( repository, notNullValue ( ) )
assertThat ( getValues ( query ( "q", "mntner", "source" ), "key" ), contains ( "test-mnt" ) )
assertEquals ( "value", value )
assertThat ( eventCaptor. getValue ( ). getRemoteNodeId ( ), is ( "remote-node-id" ) )
assertEquals ( accountListToPersist. size ( ), accountFromDatastoreList. size ( ) )
Assert. assertEquals ( 1, statementList. size ( ) )
assertThat ( replication, is ( instanceOf ( PartitionedTableReplication. class ) ) )
assertNull ( options. objectFactory ( ) )
assertEquals ( 5, value. asInt ( 10 ) )
assertEquals ( body. toString ( ), "operation _timeout" )
assertThat ( readPoint. getId ( ), is ( 3000L ) )
assertTrue ( "An exception should have been thrown", observer. isCanceled ( ) )
assertEquals ( 200, response. getStatus ( ) )
assertSame ( personDemographics. getDemographics ( ), demo )
assertNull ( "Did not create DatagramSocket", socket )
assertEquals ( 2, postComments. size ( ) )
assertEquals ( "hbase2772.getMaxResults() did not return the correct number of rows. ", 0, results. length )
assertEquals ( String. valueOf ( ReturnCode. DIGIT_PATTERN_NOT_MATCHED. code ( ) ), eventCaptor. getValue ( ). getParameter ( "rc" ) )
assertThat ( errors. toString ( ), containsString ( "No issues" ) )
assertions. doesNotContain ( false )
assertNotNull ( inputStream )
assertTrue ( ca. getFallbackParameters ( ). equals ( ap2 ) )
assertEquals ( 1, branch_conditions. size ( ) )
assertNotNull ( session )
assertThat ( info. getServerPod ( SERVER ), sameInstance ( pod ) )
Assert. assertTrue ( "world,peace". equals ( join ) )
Assert. assertEquals ( JSONNegativeInfinity, result )
assertTrue ( d1 instanceof PublicCloneable )
assertionErrorCreator. multipleAssertionsError ( description, errors )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {}}", bson. toJson ( writerSettings ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\n" + "}\\n", BridgeMethodCompiler. createBridgeCWrapper ( functionType. getReturnType ( ), functionType. getParameterTypes ( ), functionType. getParameterTypes ( ), "f" ) )
assertThat ( "Output model created", testResources_. readJson ( outFile ), is ( notNullValue ( ) ) )
assertEquals ( 6, encounters. size ( ) )
Assert. assertEquals ( json, writer. toString ( ) )
assertTrue ( "Unexpected exception. Expected: " + expectedDetail, e. getMessage ( ). contains ( expectedDetail ) )
assertFalse ( question. isSolvedBy ( author ) )
assertFalse ( c. isValidForSqlQuery ( ) )
Assert. fail ( "Failed to build sink" )
assertEquals ( 1, entity. getJavaCode ( ) )
assertNotNull ( exception )
Assert. assertEquals ( "OK", result )
assertThat ( testStatus, is ( expectedStatus ) )
assertNotNull ( jmxServer )
assertFalse ( cnpjValidator. isEligible ( null ) )
assertNotNull ( Aws. reader ( ). read ( ) )
Assert. assertNull ( actual )
assertEquals ( Arrays. asList ( "A", "B", "C", "D" ), results )
assertNotNull ( entity. getId ( ) )
Assert. assertEquals ( ServerParse. ROLLBACK, sqlType )
Assert. assertTrue ( "Unexpected acquired read lock", readLockAcquired )
assertEquals ( object2, actualObjects. get ( 0 ) )
assertEquals ( expected, actualQuery )
assertThat ( module, is ( notNullValue ( ) ) )
Assert. assertEquals ( "Hello Kermit!", response. getOut ( String. class ) )
assertEquals ( subscription. getExpirationTime ( ), System. currentTimeMillis ( ) + 500 )
assertThat ( formatter. format ( PlainDate. of ( 1752, 9, 13 ) ), is ( "AD 1752 n. Chr." ) )
assertEquals ( 0, response. getBody ( ). getEntities ( ). size ( ) )
assertThat ( flights, hasSize ( 0 ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPath, cmpPath, destinationFolder, diff ) )
assertSame ( userCheckState, nextState )
Assert. assertEquals ( expected, actual )
Assert. assertEquals ( expectedNode. toString ( ), pdoc. toString ( ) )
assertEquals ( "{\\"data\\":{}}", gson. toJson ( aiEvent ) )
assertEquals ( valorTest, valor )
assertTrue ( "Trust manager should be created", ops. exists ( TRUST_MNGR_ADDRESS ) )
assertResultSet ( res )
assertEquals ( "unexpected number of expected problems", 0, equeue. size ( ) )
assertResult ( session )
assertEquals ( "425116925", orderId )
Assert. assertEquals ( "[(0,10), (1,-10), (0,0), (2,-10), (0,0)]", list. toString ( ) )
assertThat ( result. size ( ), is ( 0 ) )
observer. assertObservations ( "@Initialized HttpSession", session )
Assert. assertEquals ( "collaborator:edit", c. toString ( ) )
assertEquals ( A, lq. factor ( new DenseMatrix ( A ) ) )
assertEquals ( expecteds, actuals )
assertEquals ( 80, toTest )
assertTrue ( allPlanets. size ( ) > 0 )
assertEquals ( expResult, result )
assertTrue ( result. isResultOK ( ) )
context. assertTrue ( res. failed ( ) )
assertEquals ( setOf ( "ashlux@gmail.com", "mickeymouse@disney.com" ), internetAddresses )
assertEquals ( required, field. isRequired ( ) )
assertEquals ( NOT_DECODED, map, object. getObjects ( ) )
assertEquals ( "foo", field. getValue ( ) )
assertFailureLogPresent ( instance, "failingTask" )
assertEquals ( expectedPolicy, builtPolicy )
assertEquals ( 3, owlOntology. axiomCount ( ) )
assertNull ( primaryKey )
Assert. assertEquals ( 403, response. getStatus ( ) )
testHelper. assertTaskListenerTimerJobMigrated ( "userTask", "userTask" )
assertEquals ( "/component=myComp/version=1", dispatchCriteria )
Assert. assertEquals ( "Non-optimal coverage: ", 1d, best. getCoverage ( ), 0.001 )
Assert. assertEquals ( "select t0.company, t0.departmentE, t0.name from Company t0 inner join t0.departments t0", template. createQuery ( ). toString ( ) )
assertEquals ( "http://apache.org/example", uri. toString ( ) )
assertContentSame ( rs, rc, columnParam1 )
assertThat ( result, is ( nullValue ( ) ) )
assertSame ( expected, actual )
assertEquals ( documento, documentoCreado )
assertTrue ( result instanceof String [ ] )
assertEquals ( 0, p. getStart ( ) )
assertThat ( future, is ( DisabledFuture. INSTANCE ) )
assertEquals ( expectedQuery, actualQuery )
assertEquals ( s, new ToStringBuilder ( s ). append ( "foo" ). append ( "is" ). toString ( ) )
assertThat ( FileUtils. readFileToString ( new File ( tempCopyFile ) ), CoreMatchers. is ( cp_file. asText ( ) ) )
assertNotNull ( id )
assertEquals ( "rdf:resource", rdfNod. getURI ( ). toString ( ) )
Assert. assertEquals ( ScoreLangConstants. SUCCESS_RESULT, result )
Assert. assertNotNull ( forest )
assertEquals ( "abc, 34\\n", found )
Assert. assertEquals ( "Invalid HUs retrieved", Collections. emptyList ( ), huSelectModel. createHUQueryBuilder ( ). list ( ) )
assertThat ( inDelta ( matrix, new int [ ] { 1, 2, 3 } ), Matchers. is ( 2 ) )
assertEquals ( "http://example.com/srid", rs. getString ( 1 ) )
assertThat ( build, is ( notNullValue ( ) ) )
assertEqualsIgnoreLineEnding ( output, "{\\n" + "  \\"id\\" : \\"user\\",\\n" + "  \\"name\\" : \\"Arthur Dent\\"\\n" + "}" )
assertEquals ( "void foo ;\\n", found )
assertEquals ( 204, response. getStatus ( ) )
Assert. assertTrue ( results. isEmpty ( ) )
assertTrue ( isSuccess )
assertNotNull ( fields )
assertFalse ( iri. equals ( null ) )
assertThat ( dispatcher. getListeners ( ), is ( empty ( ) ) )
assertEquals ( "LOCAL: \\nName1\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany", bpartnerBL. mkFullAddress ( bPartner, bpLocation, user, null ) )
Assert. assertEquals ( 43, a. getCalculatedAge ( ) )
assertEquals ( 1, sink. getTotalGroups ( ) )
mockEndpoint. assertIsSatisfied ( )
assertEquals ( "urn:cxf", action )
assertEquals ( 1, urls. length )
assertNotNull ( netrc )
Assert. assertEquals ( StatusCodes. OK, result. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( webSocketHandler. calculateHeaderSize ( ), WebSocketHeader. ZERO_PAYLOAD_LENGTH_MASKED )
assertNotNull ( geomConverter )
assertFalse ( s instanceof Cloneable )
assertEquals ( "Strategy decision not expected", NodeProvisioner. StrategyDecision. PROVISIONING_STRATEGIES, decision )
assertThat ( nextRTCEventListener, sameInstance ( object ) )
assertThat ( service. getDate ( ). format ( new Date ( ) ), is ( DATE ) )
Assert. assertEquals ( false, handler. getAcceptAnonymous ( ) )
assertThat ( actual, is ( expected ) )
Assert. assertEquals ( "1.1.1", builder. toString ( ) )
assertTrue ( index. exists ( ) )
Assert. assertEquals ( "value of one", one, value )
assertThat ( DateInterval. parseISO ( "P775D/2012-01-01" ), is ( expected ) )
assertThat ( irsApplicable, equalTo ( true ) )
assertTrue ( payload. needsBuild ( getProject ( ) ) )
assertEquals ( HttpStatus. OK, responseEntity. getStatusCode ( ) )
assertEquals ( 500, status )
assertEquals ( query, query2 )
assertEquals ( "product_1", response. metadata ( ). get ( "product_id" ) )
assertBundleState ( Bundle. ACTIVE, bundleA )
assertThat ( I18nUtil. getLocale ( ), is ( nullValue ( ) ) )
Assert. assertNull ( sqsMessage )
assertTrue ( multiMap. get ( new Person ( "Bob", "John Doe" ) ). getNames ( ). contains ( nameMatcher. getName ( ) ) )
assertEquals ( "String[]", param. getRuntimeType ( ) )
Assert. assertEquals ( 2, dao. getLocationsHavingAllTags ( list1 ). size ( ) )
assertEquals ( 0, result. length )
assertThat ( infos. length, is ( 0 ) )
arrays. assertDoesNotHaveDuplicates ( description, actual )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( output, output. contains ( "JMX Batch File" ) )
Assert. assertEquals ( childrenCountBefore, Integer. valueOf ( result. child ( 0 ). child ( childrenCountBefore - 1 ). intValue ( ) ) )
assertSame ( result1, result )
assertEquals ( results. size ( ), 3 )
assertNull ( primaryKeyDesc )
assertArrayEquals ( "The view paths aren't correct", new String [ ] { "branchone", "branchtwo" }, scm. getViewPaths ( null, null, launcher ) )
assertTrue ( TypeUtils. shouldCreateNewClass ( property, null ) )
assertEquals ( BPResultType. PASS, testResult. getResultType ( ) )
assertNotNull ( version )
assertEquals ( expResult, result )
Assert. assertTrue ( handler. disconnectCount > 0 )
assertEquals ( null, room. get ( "etag" ) )
tester. assertRenderedPage ( TestFile. class )
assertDefault ( property. getValue ( ) )
assertThat ( actual, is ( expected ) )
assertEquals ( arr, resultArr )
builderUnderTest. recorder. assertInvocation ( "removePropertyFilters", Arrays. asList ( testFilter1, testFilter2 ) )
assertTrue ( "Testing SerializedDocumentForm in SessionDocumentService", Arrays. equals ( dummyByte, dummySessionDocument. getSerializedDocumentForm ( ) ) )
assertNotNull ( m )
Assert. assertTrue ( isValid )
assertNotNull ( target )
assertEquals ( NL + "  Pre[1] xmlns=\\"A\\"" + NL + "    Pre[2] xmlns=\\"F\\"" + NL + "    Pre[3] xmlns=\\"D\\"" + NL + "    Pre[4] xmlns=\\"F\\"" + NL + "    Pre[5] xmlns=\\"D\\"" + NL + "    Pre[6] xmlns=\\"F\\"" + NL + "    Pre[7] xmlns=\\"F\\"" + NL + "    Pre[8] xmlns=\\"D\\"", context. data ( ). nspaces. toString ( ) )
assertTrue ( expectedOutput. compare ( output, TOLERANCE ) )
assertEquals ( "{f1:'b'}", x. getExample ( ) )
Assert. assertEquals ( "A \\nB \\nC \\nD", text )
assertTrue ( "Obfuscated location", originalData. equals ( obfuscatedData ) )
assertParseTree ( rootNode ( "hello", node ( "hi", null ) ), tree )
assertEquals ( "ab��猫������������������������������������������盲枚眉�cdEf", returnValue )
assertMatch ( e, s )
Assert. assertEquals ( CREDENTIALS [ 0 ] + SEPARATOR, actual )
assertEquals ( "Should be a 409 Conflict!", CONFLICT. getStatusCode ( ), getStatus ( method ) )
assertEquals ( ld1, withLanguage )
Assert. assertEquals ( ManagedCloudSdk. newManagedSdk ( ). getSdkId ( ), sdk. getSdkId ( ) )
Assert. assertEquals ( Boolean. TRUE, deleted. isEnabled ( ) )
assertEquals ( e, r )
assertThat ( result, hasSize ( 1 ) )
assertThat ( cd1. getType ( ), is ( "string" ) )
assertEquals ( map1, map2 )
assertThat ( this. converter. convert ( this. source, this. sourceType, targetType ), is ( equalTo ( this. converted ) ) )
assertTrue ( result. size ( ) > 0 )
assertEquals ( true, passedWaitForStartCall. await ( 10, TimeUnit. SECONDS ) )
assertEquals ( "publicFieldOne", loadedClass. getFields ( ). get ( 0 ). getName ( ) )
assertThat ( emptyIntermediate. getSize ( ), is ( 0L ) )
assertEquals ( 0, definitions. size ( ) )
assertEquals ( "Expected null, but it is not.", expected, actual )
assertEquals ( pp. getValue ( ), new Payload < > ( "error 4 test error" ). getValue ( ) )
assertThat ( encryptor. checkPassword ( testPassword, null ), is ( false ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE DEPTH(nodes) <= CAST('3' AS LONG)" ) )
assertEquals ( true, result )
assertEquals ( getLoggingEvent ( ). getFormattedMessage ( ), "test; key=\\"value\\"; otherKey=\\"V8\\"" )
Assert. assertEquals ( expectedStringLast, resultString )
assertTrue ( validator. validate ( EntityNames. STUDENT, idsToValidate ). containsAll ( idsToValidate ) )
assertThat ( event. isCancelled ( ), equalTo ( true ) )
assertEquals ( "Invalid argument passed", value, returnValueHandler. getArgument ( "returnValue" ) )
assertEquals ( expected, appendable. toString ( ) )
TestCase. assertTrue ( matcher. match ( new C ( 1, 2, 3, 4 ) ) )
assertNotNull ( result )
Assert. fail ( "It succeeded while an Exception is expected" )
Assert. assertEquals ( vXLong. getValue ( ), vXLong1. getValue ( ) )
assertEquals ( Timestamp. valueOf ( "1970-01-01 00:00:00" ), ts )
assertEquals ( "Base for strings is wrong", "3", parsed )
assertTrue ( negativeIdleTimeReturned. get ( ) )
assertEquals ( "Base for longs is wrong", "3", parsed )
assertEquals ( "findPopupMenu must be set for recent searches save key", pm, searchField. getFindPopupMenu ( ) )
assertThatSql ( query, is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) > $literal" ) )
assertEquals ( "Select with exists statement", expectedSql, testDialect. convertStatementToSQL ( stmt ) )
assertTrue ( true )
Assert. assertEquals ( "SELECT s1\\nFROM t1\\nWHERE s1 > ALL (SELECT s1\\n\\tFROM t2);", text )
assertThat ( instance. getCreationDate ( ), is ( dateTime. getMillis ( ) ) )
classes. assertIsInterface ( someInfo ( ), actual )
assertEquals ( "value", entity. getProperty ( "staticField" ) )
Assert. assertArrayEquals ( new String [ ] { "*", "*" }, toStringArray ( tokens ) )
assertTrue ( rs. next ( ) )
assertThat ( parse ( contents ), contains ( map ( "a", "'HELLO'", "b", "'hello'" ) ) )
Assert. assertEquals ( 1, arrays. size ( ) )
assertEquals ( resultCount, userService. getUsernames ( usernamePattern, asList ( "user1", "uSer", "user3" ) ). size ( ) )
assertEquals ( Response. Status. OK. getStatusCode ( ), target. request ( MediaType. TEXT_PLAIN ). get ( ). getStatus ( ) )
Assert. assertTrue ( contains )
assertEquals ( uri, new URI ( "http://127.0.0.1:8088" ) )
Assert. assertEquals ( 0, l. size ( ) )
assertThat ( value, is ( "value1value2" ) )
Assert. assertTrue ( foundToCharArray )
Assert. assertEquals ( Response. Status. SUCCESS. getStatusCode ( ), stringResponse. getStatus ( ) )
assertListTEquals ( listOneTwo, 1, 2, 3, 4, 5 )
Assert. assertEquals ( "3 乇�夭 15 爻丕毓鬲 38 丿�� 丿�诏乇", t. format ( durations ) )
assertSame ( o, result. getValue ( ) )
assertTokensEqual ( of ( PLUS, integer ( 2 ) ), tokens )
assertEquals ( eAdded, eRetrieved )
assertThat ( factory. create ( value ), is ( Long. valueOf ( value. getTimeInMillis ( ) ) ) )
assertTrue ( h. getNewURL ( ). equals ( "/NewSimpleUrl" ) )
assertEquals ( 0, cut. getAttributes ( ). size ( ) )
assertTrue ( schema!= null )
assertEquals ( bestIndividual. toString ( ), bicf. getChromosome ( ). toString ( ) )
assertEquals ( 0, ebXML. getSlots ( ). size ( ) )
assertTrue ( validator. isValid ( s, t ) )
assertEquals ( "1080::0:0:0:8:800:200c:417a:80", StringUtils. formatSocketAddress ( inetSocketAddress ) )
assertFalse ( wc. isAServiceComplete ( ) )
assertEquals ( "Series 1", d1. getSeriesKey ( 1 ) )
assertThat ( pauseLength, is ( greaterThan ( 150L ) ) )
assertTrue ( "i=" + i + " d=" + d,! nnList. isEmpty ( ) )
assertEquals ( 1, x. size ( ) )
Assert. assertTrue ( pss. toString ( ). contains ( "123" ) )
assertEquals ( expectedBindingString, relativizedVolumeString )
assertThat ( authorizationRequest1, is ( authorizationRequest2 ) )
Assert. assertEquals ( ( 5 - 1 ) / ( double ) 6, correlation. correlation ( xArray, yArray ), Double. MIN_VALUE )
_mock. assertIsSatisfied ( )
Assert. assertEquals ( "Connect to http://localhost [/1.2.3.4] timed out", ctx. getMessage ( ) )
assertEquals ( "unexpected number of expected problems", 0, equeue. size ( ) )
Assert. assertThat ( list, Is. is ( Arrays. asList ( "1", "1_1", "1_2", "1_3", "1_4", "2_1", "2_2", "2_3", "2_4", "3", "4", "5", "6", "7" ) ) )
assertAlias ( sql, columnParam, "nor", param )
Assert. assertEquals ( expectedMap, filtered )
assertEquals ( "output", objects. get ( 0 ) )
assertThat ( builder, notNullValue ( ) )
assertArrayEquals ( expected, coeffs )
assertEquals ( builder. bipartitionThreshold, 0.3243 )
this. assertIndices ( im ( 0, 0 ), im ( 1, - 1 ), im ( 2, 1 ), im ( 3, 2 ), im ( 4, 3 ), im ( 5, 3 ) )
Assert. assertEquals ( 4, result. getTotalHits ( ) )
assertThat ( spec, is ( greaterThan ( 0 ) ) )
assertOut ( "for each (var p:String in a)\\n\\tvar /** @type {number} */ i = a.property('p').length;" )
Assert. assertNull ( new CompareTool ( ). compareByContent ( destinationFolder + filename, sourceFolder + "cmp_" + filename, destinationFolder, "diff_" ) )
assertFalse ( "Session factory is not connected", connected )
assertTrue ( outerQuery. toString ( ). equals ( sql ) )
assertEquals ( "mmoayyed.example.net", entity. getId ( ) )
assertThat ( event, is ( expected ) )
assertThat ( url1. toFullString ( ), anyOf ( equalTo ( "dubbo://10.20.130.230:20880/context/path?version=1.0.0&application=morgan" ), equalTo ( "dubbo://10.20.130.230:20880/context/path?application=morgan&version=1.0.0" ) ) )
Assert. assertTrue ( checked. get ( ) )
assertEquals ( "Hello there world", doc. select ( "div > *" ). text ( ) )
assertEquals ( 9.0060123, ceosReader. readFn ( 16 ), 1E-10 )
assertTrue ( start_query. isSuccessful ( ) )
assertThat ( seessionAuthoritys, is ( authorities ) )
assertHelpLines ( "Option                   Description        ", "------                   -----------        ", "-a <Integer: numerical>  some value you need", EMPTY )
assertSame ( config, uriTools. resolveUri ( PROFILE_URI. resolve ( "configurations/Hello/" ), wfBundle ) )
assertEquals ( encoded. length, fixture. prepareToEncode ( context ) )
assertEquals ( field, testExpressionUpdate. field )
assertEquals ( reduce, pipes. getReduce ( ) )
Assert. fail ( "Unterminated value accepted" )
assertProjectFromTemplate ( templateFile, remoteUrl, null, null, null, null )
assertEquals ( VALUE, jwt2. getJWTClaimsSet ( ). getSubject ( ) )
assertEquals ( hash, token. getHash ( ) )
assertThat ( isValid, is ( false ) )
assertThat ( existing, CoreMatchers. nullValue ( ) )
assertEquals ( "Test message {}a b", result )
assertEquals ( 0, tasks. size ( ) )
Assert. assertEquals ( Status. NOT_FOUND. getStatusCode ( ), resp. getStatus ( ) )
Assert. assertFalse ( "this should be a file, it does not exist", isDir )
Assert. fail ( e. getMessage ( ) )
assertTrue ( EqualsBuilder. reflectionEquals ( config, config2, "keyStore", "ourCertificate" ) )
assertEquals ( 123L, book. getId ( ) )
Assert. assertEquals ( "type should be VERTICAL", WTree. Type. VERTICAL, tree. getType ( ) )
assertUsers ( ldapUserInfo, false, false, false, false )
assertTrue ( page. asText ( ). contains ( "CONVERT" ) )
Assert. assertFalse ( policy. isResponseCacheable ( request, response ) )
assertThat ( building. isPresent ( ), is ( false ) )
Assert. assertEquals ( range. getQualifyingPageNums ( 5 ), Arrays. asList ( 2, 12, 13 ) )
TestUtils. assertInvalidParameters ( victim )
assertEquals ( "getDriverType() returns astyanax", IOContainer. DriverType. ASTYANAX, driver )
Assert. assertFalse ( result )
assertEquals ( shexc. getOutput ( ). size ( ), 1 )
assertEquals ( "VOID", verifyType )
mock. assertIsSatisfied ( )
assertEquals ( "dogzzzzzdogzzz", mat. replaceAll ( ) )
assertArrayEquals ( TEObjectUtil. TE_LSP_BANDWIDTH_2, ByteArray. getAllBytes ( output ) )
assertThat ( new PullRequestApproval ( Config. builder ( ). requiredReviewers ( newArrayList ( "user1", "user2" ) ). requiredReviews ( 2 ). build ( ), utils ). isPullRequestApproved ( pr ), is ( true ) )
assertThat ( object, is ( value ) )
assertNotNull ( Command. reader ( ). read ( ) )
assertTrue ( result. passedValidation ( ) )
assertThat ( sessionManager. getValue ( ), notNullValue ( ) )
Assert. assertEquals ( expected, result )
assertEquals ( Preconditions. class, type )
assertThat ( list. iterator ( ). hasNext ( ), is ( false ) )
Assert. assertEquals ( "Incorrect file types returned", Arrays. asList ( types1 ), widget. getFileTypes ( ) )
MatcherAssert. assertThat ( keyword, CoreMatchers. hasToString ( "newKeyword()" ) )
assertEquals ( expected, reference. get ( ) )
assertFalse ( extr. extract ( attrDetail, null, document ). isEmpty ( ) )
assertEquals ( ( short ) 8, result. getShortValue ( ) )
assertTrue ( "Main Organization Instance not found", test )
assertTrue ( e instanceof E_LangMatches )
assertEquals ( "No rules have been calculated", 0, ss. size ( ) )
assertThat ( results, is ( new String [ ] [ ] { { "A", "B" } } ) )
assertThat ( JobWatcher. getOrCreateFor ( domain ), sameInstance ( oldWatcher ) )
assertEquals ( "Incorrect status", sampleStatus, syncService. getLastSyncStatus ( ) )
assertNotNull ( Service. reader ( ). read ( ) )
assertEquals ( new TypeTag ( String. class ), actual )
assertThat ( threadCount, is ( AVAILABLE_PROCESSORS * 2 ) )
assertEquals ( HASH_ERR, Blake2_DIGEST_EMPTY_STRING, result )
assertEquals ( "Incorrect count ones", count, bitseq. countOnes ( ) )
assertEquals ( 1, reportResults. size ( ) )
assertEquals ( 1, taskQuery. count ( ) )
assertThatReassembledMessageEqualsOriginalMessage ( result )
Assert. assertEquals ( adImpressionStream. size ( ), collector. actualResults. size ( ) )
assertEquals ( pausedExecutionId, flowService. getPausedFlows ( ). get ( 0 ) )
Assert. assertTrue ( queueResponse. isOk ( ) )
Assert. assertEquals ( ( Integer ) employee4. getId ( ), q. getSingleResult ( ) )
assertEquals ( vutUserId, fromBearer. getUserId ( ) )
assertEquals ( createdState. eventLogId, retrievedState. eventLogId )
assertEquals ( 3, counter. getBeforeFileTreeWalkCount ( ) )
assertTrue ( notifyThread. isAlive ( ) )
assertArrayEquals ( new EventType [ ] { EMPTY_EVENT_TYPE, _offeredTypes }, offers )
assertEquals ( "sampleLib1Description", functionLibrary. getDescription ( ) )
assertEquals ( var1, "test" )
assertEquals ( "User should be able to extract roles from the response", 5, roles. size ( ) )
Assert. assertEquals ( "(3=2,3=4,2=3)", tree. toString ( ) )
assertEquals ( "Exp. the expireDate passed into the constructor not the one passed into the constructor!", expireDate, sut. getExpirationDate ( ) )
Assert. assertEquals ( 0, deviceGroupRegistry. getAllGroupIds ( ). size ( ) )
assertEquals ( "a c 3 + c y * 2 []", this. codeGenerator. getPostFixExpression ( ) )
Assert. assertTrue ( "base name was not removed after variant removal", bn. getVariants ( ). size ( ) == 1 )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( - 1, decoder. read ( ) )
assertEquals ( - 7, values. get ( new MultivectorComponent ( "out", 0 ) ), 10E-3 )
assertEquals ( "Input value json should match output value json", objectMapper. readTree ( inputJson ), objectMapper. readTree ( outputJson ) )
assertNotNull ( processInstance. getId ( ) )
assertEquals ( 987543210L, x. value )
Assert. assertEquals ( options. getFilter ( ), new Filter ( ) )
assertTrue ( "Expected that the preferred JCE crypto provider was not found.", true )
assertTrue ( issues. size ( ) > 0 )
assertEquals ( expResult, result, 0.001 )
assertFalse ( faceted. install ( ) )
assertThat ( backingMap. size ( ), is ( 2 ) )
Assert. assertArrayEquals ( REDIRECT_IPV6, output. array ( ) )
assertEquals ( "Hello ÿþü\\n" + "H
ITUtils. assertReceivingDifferentRows ( proxy, key, ROW_COUNT + 4 )
assertEquals ( BPResultType. FAIL, testResult. getResultType ( ) )
assertEquals ( "SELECT XMLCAST(XMLQUERY('/a/b' passing convert('<a><b>1</b></a>', xml)) AS integer FROM xmlquery('/a/b' passing convert('<a><b>1</b></a>', xml)) AS integer", QueryParser. getQueryParser ( ). parseCommand ( sql ). toString ( ) )
assertEquals ( CambriaConstants. kBasePath + "bar/group/id", result )
assertTrue ( result [ 0 ] == result [ 1 ] )
assertThat ( eventsFired, hasSize ( 2 ) )
assertEquals ( StatusCode. STREAM_NOT_FOUND, response. getCode ( ) )
assertFalse ( indexFilterHook. indexIsApplicable ( indexRecordFilter, Table. RECORD. name, null, newRecord ) )
assertThat ( result. toString ( ), is ( equalTo ( "H W" ) ) )
Assert. fail ( e. getMessage ( ) )
assertEquals ( 12, this. wrapper. size ( ) )
assertEquals ( 1, chain. getCommands ( ). size ( ) )
assertEquals ( DEFAULT_GRAPHITE_IPPORT, backendAlarm. getGraphiteBaseUrl ( ) )
assertEquals ( 0, this. runtimeService. createProcessInstanceQuery ( ). count ( ) )
assertEquals ( "none condition serialization is wrong", expected, actual )
assertEquals ( Integer. of ( 10 ), result )
Assert. assertEquals ( 10, groupManager. resolveGroupMembers ( "a" ). size ( ) )
assertEquals ( annotations, annotationsOnMethod )
assertTrue ( result. isEmpty ( ) )
assertEquals ( results, linkedLists )
Assert. assertNotNull ( imagePart )
assertTrue ( resultComparator. compare ( fd1, fd2 ) > 0 )
Assert. fail ( "create bucket under non existing mount point should fail" )
Assert. assertTrue ( bean. testStateless ( ) )
assertEquals ( newMap, putMap )
assertEquals ( "Inputstream to string", fileContent. toString ( ) )
Assert. assertEquals ( obj, o )
Assert. assertEquals ( pendingEvents, result. getPendingEvents ( ) )
assertEquals ( expResult, stringBuilder. toString ( ) )
assertTrue ( TargetClass. isDoubleRegistrationCalled ( ) )
assertNotNull ( feather. instance ( Plain. class ) )
assertSame ( properties. definitionRegistry, registry. getDefinitionRegistry ( ) )
assertEquals ( AuthorizationResult. denied ( ). getResult ( ), result. getResult ( ) )
assertEquals ( 3, res [ 0 ] )
assertTrue ( getExpectedErrorMsg ( ), result )
Assert. fail ( message )
assertArrayEquals ( resultAddress, address )
assertEquals ( expectedQuery, query )
assertEquals ( new BigDecimal ( "0.0" ), customer. getRate ( ) )
assertThat ( converted, is ( notNullValue ( ) ) )
assertEquals ( expResult, result )
assertThat ( initiativeInfo. isVotingStarted ( TODAY ), is ( true ) )
Assert. assertEquals ( XMLStreamConstants. COMMENT, reader. getEventType ( ) )
assertNotNull ( result )
assertEquals ( "test1", mt. getName ( ) )
assertNotNull ( test )
assertThat ( results. get ( 0 ), is ( additional ) )
assertEquals ( "In July, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia, I am a Wikipedia
assertThat ( basicDBObject. get ( "creationDate" ), is ( ( Object ) now. toDateTime ( ) ) )
arrays. assertContainsOnlyOnce ( someInfo ( ), actual, emptyArray ( ) )
Assert. assertEquals ( "if else-block", html )
assertThat ( props. getProperty ( propertyKey ), is ( propertyValue ) )
Assert. fail ( "exception expected" )
assertNotNull ( api )
assertNull ( x. f1 )
assertThat ( mentions, hasItem ( mentionedIssue ( 0, 3, 33 ) ) )
assertTrue ( "Result XML does not match expected", monitoring. matches ( "(?s).*<SituationExchangeDelivery><Situations><PtSituationElement><SituationNumber>1</SituationNumber><Summary xml:lang=\\"EN\\">summary</Summary><Description xml:lang=\\"EN\\">description</Description><Affects><VehicleJourneys><AffectedVehicleJourney><LineRef>MTA NYCT_S51</LineRef><DirectionRef>0</DirectionRef></AffectedVehicleJourney><AffectedVehicleJourney><LineRef>MTA NYCT_1</LineRef><DirectionRef>1</DirectionRef></AffectedVehicleJourney><AffectedVehicleJourney><LineRef>1</LineRef><DirectionRef>0</DirectionRef></AffectedVehicleJourney></VehicleJourneys></PtSituationElement></Situations></Situations></Situations></Situations></Situations></Situations>" ) )
assertTrue ( inputService. accept ( message ) )
assertEquals ( "Expected 4 results!", 4, n )
assertNotNull ( e )
assertEquals ( "<span>Hello <div>there</div> <span>now</span></span>", TextUtil. stripNewlines ( doc. body ( ). html ( ) ) )
assertEquals ( expectedConnection, actualConnection )
assertNotNull ( SyncStream. reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ). read ( ) )
assertThat ( dummyConfigurationConfigLoader. getConfig ( ). isPresent ( ), equalTo ( true ) )
assertTrue ( firstResult + "!= " + lastResult, lastResult > firstResult )
assertTrue ( "Should have thrown a warning if the feed late fails", cutOff. after ( new Date ( ) ) )
assertEquals ( expected, cls )
assertFalse ( isOpened )
assertThat ( result. statusCode, is ( Response. OK ) )
assertThat ( cndFactory. getNodeTypes ( ). size ( ), is ( 2 ) )
assertNotNull ( Revision. fetcher ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", 1 ). fetch ( ) )
assertThat ( called, is ( equalTo ( Arrays. asList ( "ExecuteTestSuite1", "ExecuteTestCase1", "DoCommand1", "DoCommand2", "ExecuteTestSuite2" ) ) ) )
assertThat ( start. until ( end, Duration. in ( MONTHS ) ), is ( Duration. ofCalendarUnits ( 0, 0, 0 ) ) )
Assert. assertNull ( session, "No session should have been created when proxy set is empty" )
assertPermissionPresent ( currentUser, token, permissionsLookup )
assertFalse ( dtoService. exists ( dto. getId ( ) ) )
assertEquals ( 2, rs. getInt ( 1 ) )
Assert. assertEquals ( SEX_FEMALE, json. get ( DATA_NAME ) )
assertEquals ( Integer. valueOf ( 2 ), result )
Assert. assertTrue ( endpoint1. equals ( endpoint2 ) )
assertEquals ( "foo", adapter. classify ( "Foo" ) )
assertTrue ( "Sample file doesn't contain extension.", SamplesParser. fileMatchesExtension ( sampleFile, "java" ) )
Assert. assertEquals ( expected, actual )
Assert. assertNotNull ( r )
assertEquals ( classesToImport, generator. getClassesToImport ( ) )
Assert. assertSame ( elem, mergeElem )
assertThat ( Latin1Conversion. convertString ( control ), is ( "a" ) )
assertTrue ( acl. hasPermission ( ANONYMOUS_USER, Item. READ ) )
assertEquals ( "No errors should be registered", 0, errors. getErrorCount ( ) )
assertTrue ( resultList. size ( ) == 2 )
Assert. assertTrue ( "Did not take effect in 2000 millis", duration > 2000 )
assertEquals ( 0, found. size ( ) )
assertEquals ( set, files )
assertNotNull ( annotations )
assertEquals ( "x in (\\"artistName\\", \\"a\\", \\"b\\", \\"c\\")", ejbql )
org. junit. Assert. assertEquals ( 200, response. getStatus ( ) )
assertEquals ( custom, ( ( VerticalLayout ) container. getLayout ( ) ). getGap ( ) )
assertThat ( tz. isDaylightSavingSTD ( utc ), is ( true ) )
assertEquals ( initialHashCode, pm. getHash ( ) )
assertEquals ( expected, cow. getId ( ) )
assertNull ( parsedArg )
assertEquals ( "������������������������������������������������������������������������������������
assertEquals ( "post request", saveRoute. getRouteHandler ( ). request ( ). path ( ) )
assertEquals ( 2, accounts. size ( ) )
assertTrue ( s. isRequired ( ) )
Assert. assertEquals ( expResult, result )
assertEquals ( expected, out )
assertEquals ( "\\"NAME\\" LIKE?", QueryBuilder. getWhereStringForFilter ( f, sh ) )
assertArrayEquals ( expected, service. getDomainsForServer ( handle ) )
assertEquals ( DataTypeManager. DefaultDataClasses. SHORT, command. getProjectedSymbols ( ). get ( 0 ). getType ( ) )
assertEquals ( "Wrong result", "(x)", interpolator. getString ( SUB_KEY ) )
Assert. assertEquals ( 2, count )
assertEquals ( 5., start. getTheoreticalLatestOperationStartTime ( ), 0.01 )
getResponseOfGet ( GET, "Collector/" ). then ( ). assertThat ( )
assertTrue ( inverseCheck. getOwners ( ). contains ( owner ) )
assertSame ( expectedOS, resultingOS )
Assert. assertEquals ( "Two files", testMeta. storageManager. load ( new HashMap < Integer, String > ( ) ). get ( 2 ) )
assertEquals ( "foo", nameField. getValue ( ) )
assertEquals ( expectedContentRange, uploader. constructContentRangeHeaderValue ( requestLength, false, status ) )
assertNotNull ( info )
Assert. assertTrue ( res instanceof ResultSet )
Assert. assertEquals ( result, record )
assertThat ( result, equalTo ( Result. NEUTRAL ) )
assertTrue ( sink. getInvalidConfiguration ( ) )
assertThat ( "no issues shall be detected on a valid provider", validation. pass ( Report. WITHOUT_WARNING ) )
assertFalse ( "addr.toString() should not be empty", saddr. isEmpty ( ) )
assertTrue ( field. isRequiredIndicatorVisible ( ) )
assertEquals ( child. getAggRootVertex ( ), aggRootVertex )
assertEquals ( "No test cases should fail", 0, runTestsResults. getFailedTests ( ). size ( ) )
assertThat ( actual. matches ( "y" ), is ( true ) )
assertTrue ( revisions. isEmpty ( ) )
assertThat ( TimestampInterval. between ( start, end ). contains ( PlainTimestamp. of ( 2014, 3, 1, 14, 45 ) ), is ( false ) )
assertEquals ( expResult. trim ( ), result. trim ( ) )
assertNotSame ( fixture, copy )
assertEquals ( "a b\\n", found )
assertThat ( cache. get ( "key1" ), is ( nullValue ( ) ) )
assertEquals ( "10", groupId )
assertEquals ( HttpStatusCode. NO_CONTENT. code, response. getStatus ( ) )
assertTrue ( calledExceptionHandler. isProtectedHandlerCalled ( ) )
assertEquals ( expectedDate, formatDate ( "yyyy-MM-dd HH:mm", result ) )
assertFalse ( "Does not accept a method that returns a ResourceClass", interceptor. accepts ( resourceMethodThatReturnsObject ) )
assertEquals ( "Cloned instance", Shutdown. INSTANCE, cloned )
assertEquals ( expected, actual )
Assert. areEqual ( NestedSQLException. class, ex. getClass ( ), "全部异常" )
Assert. assertNotNull ( pi )
assertThat ( read ( format, written ), contains ( "123", "456" ) )
assertEquals ( statisticsService. getPostsOnForumCount ( ), expectedCount )
assertEquals ( "<foo><bar><b>1</b></bar></foo>", t. toString ( ) )
assertNumEquals ( numOf ( Math. log ( 99d / 100 ) ), varCriterion. calculate ( series, trade ) )
assertEquals ( asList ( new ErrorNotification ( "foo" ) ), clientEvents. collect ( ) )
Assert. fail ( "Should not have succeeded" )
assertEquals ( expected, gb )
assertTrue ( "Task is not successfully assigned to a user", taskService. assign ( beforeAssign, 2L ) )
assertEquals ( "CAT:Fluffy", new PetFilter ( ). filter ( payload ) )
Assert. assertTrue ( reflect. isSuperClass ( genericType ) )
assertEquals ( "12 �����������������������������������������������������������������������������������
Assert. assertTrue ( deviceFlowRegistry. getAllFlows ( ). isEmpty ( ) )
assertThat ( provider. getSubject ( axiom ), is ( absent ) )
Assert. assertTrue ( "The cache size should be > 0", datasource. getCacheSize ( ) > 0 )
assertions. isNotEqualTo ( expected )
assertEquals ( empList. size ( ), employees. size ( ) )
assertEquals ( listOfTodos, retList )
assertEquals ( numbers, this. mocker. getComponentUnderTest ( ). getNumbers ( ) )
assertEquals ( joining, branching )
assertEquals ( "HTTPMESSAGE OVER", ret )
assertQuery ( true, query )
assertThatWritableIs ( true )
Assert. assertEquals ( expected, compoundWrite. apply ( baseNode ) )
assertEquals ( 2, bb. getInt ( ) )
assertEquals ( expected, actual )
assertEquals ( 200, status. getStatusLine ( ). getStatusCode ( ) )
assertEquals ( true, classUnderTest. getWarnForUnsavedFileEdits ( ) )
Assert. assertEquals ( "Hello World", helloWorld. helloWorld ( ) )
assertThat ( actual, is ( equalTo ( expected ) ) )
assertFalse ( "Next release should be false because bucket size is less than requested", bucket. nextRelease ( limit ) )
assertThat ( extractedLines. size ( ), equalTo ( 0 ) )
assertFalse ( mojo. getAttribute ( "line-separator" ). isEmpty ( ) )
Assert. fail ( "ClientProtocolException expected" )
assertTrue ( stats. getReceiveMessageGaps ( ). isEmpty ( ) )
Assert. assertEquals ( 10, e. getE ( ), 0 )
assertEquals ( "jdbc:hive://null:null/null", dialect. getURL ( conn ) )
assertEquals ( expResult, result )
assertThat ( request. getLocalAuthorizationList ( ), equalTo ( list ) )
assertThat ( testColor. name + " on " + serialized, base, is ( deserialized. getColor ( "color" ) ) )
Assert. assertTrue ( "target file not found", getIRODSFile. exists ( ) )
assertThat ( isValid, is ( false ) )
assertEquals ( false, log. hasEvents ( ) )
assertEquals ( "<<font size=\\"12\\" font=\\"Arial\\" />\\n", rep. toHtml ( ) )
Assert. assertTrue ( errors. hasFieldErrors ( "retireReason" ) )
assertEquals ( "index not present", 1, countIndexes ( SCHEMA, T1_NAME ) )
assertEquals ( "void f(void* target, void* ret) {\\n" + "    return ((void (*)(void)) target)();\\n" + "}\\n", BridgeMethodCompiler. createBridgeCWrapper ( functionType. getReturnType ( ), functionType. getParameterTypes ( ), functionType. getParameterTypes ( ), "f" ) )
assertEquals ( "message", exception. getMessage ( ) )
assertThat ( responseStep. callResponse. getResult ( ). getActions ( ), contains ( s1, s2, s3, s4, s5, s6 ) )
assertXpathExists ( "//h1[not(@id)][text() = 'My Title']", html )
assertThat ( converter. convert ( value, Integer. class ), is ( nullValue ( ) ) )
assertBatchMixed ( new FailingWorkerListener ( ), WorkerEvent. values ( ) )
assertNotNull ( data. getString ( 0, data. length ( ) ) )
assertNotNull ( request. getSession ( ). getAttribute ( Constants. PREFERRED_LOCALE_KEY ) )
assertNotNull ( read )
assertTrue ( getNoErrorMsg ( ), result )
assertThat ( IntraDayDate. toList ( days ), contains ( start, end ) )
Assert. assertEquals ( 100., time, 0.01 )
assertEquals ( "The override branch name isn't correct", "override-branch", scm. getOverrideBranchName ( ) )
assertEquals ( true, result )
assertEquals ( read ( pom ), "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<project>\\n" + "    <modelVersion>4.0.0</modelVersion>\\n" + "    <artifactId>artifact-id</artifactId>\\n" + "    <groupId>group-id</groupId>\\n" + "    <version>x.x.x</version>\\n" + "</project>" )
assertEquals ( test. convertToBase7 ( ), "0123" )
Assert. assertEquals ( FastMath. PI, solver. solve ( f, 3.0, 3.0, 3.0 ), solver. getAbsoluteAccuracy ( ) )
assertTrue ( quota. check ( blobStore ). isViolation ( ) )
assertEquals ( expected, expression. toString ( ) )
Assert. assertEquals ( "John,Doe", result. get ( "name" ) )
assertThat ( domain. getServer ( "server1", "cluster1" ). shouldStart ( 0 ), is ( true ) )
assertNotNull ( version )
assertEquals ( formatted, "87.55100 seconds" )
assertNull ( entity. getExtension ( ) )
assertDegenerate ( scan )
assertEquals ( "Expected 10 results!", 10, n )
assertEquals ( true, txaction. isTransfer ( ) )
Assert. assertEquals ( 10L, this. sqlgGraph. traversal ( ). E ( ). count ( ). next ( ), 0 )
assertFalse ( strings. hasNext ( ) )
assertThat ( found, hasSize ( 0 ) )
assertTrue ( voter. voteMatch ( affiliation, organization ) )
assertNull ( MoreFuncs. MJD. symbol ( mjd ) )
Assert. assertEquals ( 0.9, pValue, 0.001 )
assertEquals ( expected, getString ( TestOrderByImpl. example ( ) ) )
assertNull ( object2. getPaintingTitle ( ) )
assertEquals ( "TestGetFilterQueryForKey 0", "value", entityTypeToFilterQueryService. getFilterQueryForKey ( "key" ) )
assertTrue ( urlWithPathAndParam. equals ( urlString ) || urlWithPathAndParam2. equals ( urlString ) )
assertEquals ( "Result", tuple, collector. get ( sourcePortIndex1 ) )
assertEquals ( vars ( "Value", "Joseph", "Joe", "Smith" ), getNonPseudoVars ( csv, true ) )
assertTrue ( rank <= 3 )
assertMockEndpointsSatisfied ( )
assertEquals ( "Wrong # of requestable roles", 0, requestableRoles. size ( ) )
assertVisitorSatisfied ( )
assertTrue ( initSuccessful )
assertEquals ( "date must not have been copied", copy, today )
assertThat ( exitValue, is ( 0 ) )
Assert. assertNotNull ( addressResultsDto )
assertEquals ( 5, testDescriptor. getChildren ( ). size ( ) )
assertEquals ( "test", new DefaultWrapper ( ). getWrapped ( ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( false, retval )
assertEquals ( expResult, result )
assertThat ( sql, equalTo ( "update UserInfo set name = case id when 77 then '����' when 88 then name when 99 then '姊�' else name end,age = case id when 77 then '18' when 88 then age when 99 then '16' else age end where id in(77,88,99)" ) )
Assert. fail ( "NullPointerException should have been thrown" )
assertFalse ( controller. isLoggedOn ( ) )
Assert. assertEquals ( response, responseBuilder. build ( ) )
arrays. assertDoesNotContain ( description, null, newArray ( true ) )
Assert. assertTrue ( content. contains ( "unknownAction" ) )
assertEquals ( 0, mockResult. included ( "totalPostReports" ) )
assertMockEndpointsSatisfied ( )
context. assertIsSatisfied ( )
assertTrue ( resultMessage ( result, PUT ), result. passedValidation ( ) )
assertEquals ( expResult, result )
assertEquals ( "(a + b) = case-insensitive(a,b)", str )
assertEquals ( expectedDoc, modifiedDoc )
assertEquals ( "Clob contents", result )
assertEquals ( 1, rpt. size ( ) )
Assert. fail ( "get non-existent object metadata should fail" )
assertNotNull ( "refClass should not be null", cm. ref ( "java.lang.Object" ) )
assertEquals ( "LIMIT 5 RETURNING foo", statement. toString ( ) )
Assert. assertEquals ( 1, jobs. size ( ) )
Assert. assertArrayEquals ( ENCODED_VALUE, byteOutputStream. toByteArray ( ) )
assertEquals ( "aaa", cell. text ( ). get ( ) )
assertTrue ( repository. getFeatureState ( DummyFeature. TEST ). isEnabled ( ) )
assertThat ( currentTimeString, equalTo ( LocalDateTime. now ( ). format ( CURRENT_DATE_STRING_FORMATTER ) ) )
Assert. assertFalse ( context. getResult ( ) )
assertNotNull ( generator )
assertMockEndpointsSatisfied ( )
assertEquals ( original, restored )
Assert. assertTrue ( "Exception should have been thrown", isFailed ( ) )
assertTrue ( names. contains ( "test-name" ) )
assertEquals ( expectedDate, formatDate ( "yyyy-MM-dd HH:mm", result ) )
assertEquals ( ( long ) 8, result. getLongValue ( ) )
assertTrue ( cygnusGroupingRules. getGroupingRules ( ). size ( ) == 0 )
assertOutMXMLPostProcess ( outTemplate. replaceAll ( "AppName", appName ), true )
assertThat ( calvalusDataInputs. getMinimalRawMap ( ), equalTo ( ImmutableMap. of ( "calvalusBundleVersion", "1.2", "calvalusBundleVersion", "1.3", "calvalusFacadeVersion", "SNAPSHOT", "2.3", "calvalusBundleVersion", "1.4", "calvalusBundleName", "calvalusBundleVersion", "2.3", "calvalusFacadeVersion", "2.3", "calvalusBundleName", "calvalusBundleVersion", "2.4", "calvalusFacadeVersion", "2.3", "calvalusBundleName", "calvalusFacadeVersion", "2.3", "calvalusBundleName", "calvalusBundleVersion", "2.4", "calvalusBundleName", "3.4", "calvalusFacadeVersion", "2.3", "calvalusBundleName", "calvalusBundleVersion", "2.4", "calvalus
Assert. assertEquals ( 0, resultList. size ( ) )
assertFalse ( registryService. doesKeyExist ( "HKLM", "" ) )
assertThat ( fe, notNullValue ( ) )
Assert. assertEquals ( 1, visitor. getBindVarConditions ( ). size ( ) )
Assert. assertTrue ( jsonEqual ( expResult, EntityFormatter. writeEntity ( entity ) ) )
assertEquals ( "TextBuilder String Is 1", _textBuilder. toString ( ), "1" )
assertEquals ( 2, cache. listPrivileges ( null, null, null, null ). size ( ) )
Assert. assertEquals ( SpringContainer. class, container. context. getBean ( "container" ). getClass ( ) )
assertTrue ( passed )
assertThat ( collection. documentExists ( externalDoc. getKey ( ), BaseDocument. class, new DocumentReadOptions ( ). streamTransactionId ( tx. getId ( ) ) ), is ( false ) )
assertThat ( sentRequest ( "http://127.0.0.1:19000/api/job/trigger", "POST", CloudJsonConstants. getJobJson ( ) ), is ( 500 ) )
AssertAnnotations. assertToken ( expectedTokens, select ( jcas, Token. class ) )
assertEquals ( "No tests ran.", content )
assertThat ( evaluator. evaluate ( corc ), is ( TruthValue. YES ) )
Assert. assertEquals ( expected, actual )
assertEquals ( 0, maxConsequetiveOnes. findMaxConsecutiveOnes ( numbers ) )
assertEquals ( 4, context. performQuery ( q1 ). size ( ) )
assertEquals ( 190, res. cause ( ). getCode ( ) )
assertEquals ( "[common, msg, user, password, datagram, user2, unix_path, unix_path]", possibleFields. toString ( ) )
assertEquals ( expectedString, fqanWithGroup. getGroup ( ) )
assertSet ( queryReturns ( kate, ashley ), whenFilteringBy ( IN, Arrays. asList ( "Kate", "Ashley" ) ) )
assertEquals ( t, new LeadActivityRecord ( ). toString ( ) )
assertThat ( isEqual, is ( true ) )
assertNotNull ( response )
assertThat ( "bob[5:5].fred[2:10].george", equalTo ( m. m_fieldPath ) )
assertEquals ( 7, aggregate. getTotalHours ( ) )
assertEquals ( "975X", agencia. toString ( ) )
Assert. assertEquals ( input, output )
assertNull ( System. getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertThat ( resultIds, containsInAnyOrder ( "DiagnosticReport/DR", "Observation/parentObs", "Observation/childObs" ) )
Assert. assertEquals ( MessageFormatUtil. format ( com. itextpdf. io. IOException. __toString__ ( "FontProgramFactoryTest.g1Font[A] is not a valid AFM1 font name, must be one of [A, B, C]" ), message )
assertEquals ( 2., Solutions. bestOf ( solutions ). getCost ( ), 0.01 )
assertNoErrorNotifications ( )
assertNotNull ( cascadingStyleSheet )
assertTrue ( "Logger should be created", ops. exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( list, actual )
assertEquals ( "{\\"d\\":{\\"EntryDate\\":\\"\\\\/Date(-42)\\\\/\\"}}", StringHelper. inputStreamToString ( ( InputStream ) response. getEntity ( ) ) )
assertEquals ( ":5:10000000000:1.5:3.5:zzz:true", res. join ( ) )
assertTrue ( "Oh no! No mapped object! ", store. size ( ) > 0 )
Assert. assertTrue ( isEqual ( distance, 1.0 ) )
assertThat ( chksumChannel. getChecksums ( ), contains ( expectedChecksum ) )
assertThat ( waggleDanceConfiguration. getThriftServerRequestTimeout ( ), is ( timeout ) )
Assert. fail ( )
assertThat ( schema, containsString ( "input TypeCreateInput {\\n" + "  creations: TypeCreationsInput\\n" + "}\\n\\n" ) )
assertNotNull ( clz )
assertThat ( iterationState. getAssertions ( ), hasSize ( 0 ) )
assertThat ( result. getPayload ( ), is ( equalTo ( JSON_STRING_RECORD ) ) )
assertEquals ( 2, list. size ( ) )
assertEquals ( "High", filterResult. getValue ( ) )
Assert. assertEquals ( ecohImpl. authenticateData ( echoInfo ). getMessage ( ), response. getMessage ( ) )
assertThat ( extract ( userDAO. find ( user1. getId ( ) ). toString ( ) ), contains ( user1. getName ( ) ) )
Assert. assertEquals ( record. toString ( ), String. valueOf ( wl. record. toString ( ) ) )
assertEquals ( expected, actual )
assertNotEquals ( firstId, secondId )
assertTrue ( v1. getVehicleTypeIdentifier ( ). equals ( v2. getVehicleTypeIdentifier ( ) ) )
assertEquals ( "<!--?xml encoding='UTF-8'?--> <html> <head></head> <body> One </body> </html>", TextUtil. stripNewlines ( doc. html ( ) ) )
assertEquals ( "no gain", storage. read ( "no pain" ) )
assertFalse ( problem )
Assert. assertNotNull ( retr )
Assert. assertEquals ( "content", result. getBody ( ) )
Assert. assertEquals ( annotation. name ( ), "test" )
Assert. assertEquals ( expected, testIndex. findConc ( " 'The' " ) )
assertEquals ( 10, all. size ( ) )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outPath, cmpPath, destinationFolder, diff ) )
assertEquals ( err, "File, 'EasyMock for class java.io.File' cannot be written to." )
assertTrue ( "Failed authentication was not logged", loggedFailedAuth ( AUDIT_LOG_FILE, UNKNOWN_USER ) )
assertEquals ( result. getResult ( ). getResult ( ), result. getResult ( ) )
assertEquals ( "Redo", shortDescription )
assertContains ( e. getMessage ( ), "'first'" )
assertThat ( kvStore. getCollectionOrDefault ( "field", Collections. emptyList ( ) ), equalTo ( value ) )
assertThat ( dog. name, equalTo ( "Brutus" ) )
Assert. assertEquals ( 2, termMap. getTermB ( ). getConceptReferenceCount ( ) )
assertThat ( isValid, is ( true ) )
assertEquals ( r, groundTruthRA. get ( ). get ( ) )
assertEquals ( "<div class=\\"matcherPosition\\"><!-- My comment -->$PAYLOADATTR$$'</div><!-- My comment -->$18</div><!-- My comment -->$33</div>", matcherPosition. createContent ( ) )
assertTrue ( result. equals ( expected ) )
assertEquals ( "yahya and friends etc. went to the park and to play.", this. realiser. realise ( completeSen ). getRealisation ( ) )
assertEqualsWithoutWhiteSpaces ( "square(r=1.5,center=true);", actual )
assertNotNull ( appInitializer. getServletConfigClasses ( ) )
assertThat ( arguments. resolve ( null, null ), contains ( "1" ) )
assertEquals ( expected, transformed )
assertThat ( chksumChannel. checkDigest ( buffers [ 2 ], 0 ), is ( nullValue ( ) ) )
assertThat ( PlainDate. of ( 2000, 12, 2 ). with ( model. weekOfMonth ( ). incremented ( ) ), is ( PlainDate. of ( 2000, 12, 2 ) ) )
assertTrue ( component. getText ( ). contains ( "Widgetset default is not loaded" ) )
assertThat ( tester. count ( "Hoge" ), is ( 1L ) )
Assert. assertEquals ( "Hello World!", response )
assertEquals ( "http://foo.org/fhir/Profile/PatientWithFullProfile", def. getResourceProfile ( "http://foo.org/fhir" ) )
assertEquals ( "cfquery", parserTag. getName ( ) )
assertThat ( hijri. with ( CommonElements. weekOfMonth ( HijriCalendar. family ( ), model ). decremented ( ) ), is ( HijriCalendar. of ( HijriAlgorithm. WEST_ISLAMIC_ASTRO, 1438, 1, 9 ) ) )
assertThat ( userPermissions, hasItem ( permission ) )
assertThat ( a0, is ( a1 ) )
this. assertGet ( "policytypes?grouped=yes&grouped=false", "entitytypes/policytypes/all-policy-types.json" )
assertEquals ( 0, imports. size ( ) )
assertAnnotations ( 1, Quantity. class, new TestQuantity ( 0, "3.8 million litres", 3.8, "m^2", "area" ), new TestQuantity ( 1, "water", 3.8, "m^2", "area" ) )
assertEquals ( 7, classUnderTest. getNumDiagonalSquaresAvailable ( Position. d5 ) )
assertEquals ( PRICE, b. getPrice ( ) )
Assert. assertEquals ( dataset. getName ( ) + ", parameter #" + i, expected [ i ], actual, 1e-11 * expected [ i ] )
assertThat ( readBytes ( testee, 4 ), is ( "" ) )
assertEquals ( "png", sink. preferredOutputFormatName ( ) )
assertFalse ( resolved )
assertEquals ( "12.3", converter. getAsString ( facesContext, new UIPanel ( ), "12.3" ) )
Assert. assertEquals ( "mockdrone", configuration. getBrowserCapabilities ( ). toString ( ) )
Assert. assertFalse ( handler. authenticationFailed ( request, response ) )
Assert. assertEquals ( 3, result. intValue ( ) )
assertErrorBoundaryEvent ( "boundary", "boundaryEnd" )
Assert. assertEquals ( 0, an. analyze ( new CandidateNode ( new CandidateRule ( "test", rule ), nnode ), results ). size ( ) )
assertFalse ( wouldFire )
assertUnusedTagInSetTaggingRequest ( setTaggingRequest, String. valueOf ( true ) )
assertThat ( creditCard, matchesRegularExpression ( "[0-9]{4}" ) )
assertNull ( resource )
assertThat ( supplier. authForImage ( IMAGE_ID ), is ( nullValue ( ) ) )
assertThat ( actual, is ( expected ) )
assertThat ( filter. include ( meta ), is ( false ) )
Assert. assertEquals ( "Failure expected the name to be the same", "ChatroomDeleteDTO", MHRDTO. getDTOName ( ) )
assertEquals ( Arrays. asList ( "*", "1", "2", "3", "a", "b" ), list )
Assert. assertEquals ( pullRequest, parsedPullRequest )
assertionHelper. assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile, returnLocalFile )
assertTrue ( getDocument ( ). getDocumentId ( )!= null )
assertThat ( parameters. getOntologyId ( ), is ( projectId. getOntologyId ( ) ) )
assertEquals ( organizationResponse. object. get ( ). getId ( ), teamId )
Assert. assertEquals ( "Images are not similar enough for " + name + " (" + base + ").", 1.0, sim, 0.01 )
assertThat ( result. statusCode, is ( Response. OK ) )
assertEquals ( sqlEx, first )
assertArrayEquals ( array1. toArray ( ), array2. toArray ( ) )
assertEquals ( density, 1.0 )
Assert. assertNull ( new CompareTool ( ). compareByContent ( outFile, cmpFileName, destinationFolder, "diff27_" ) )
assertEquals ( "Expected at least 1 rule", 1, rules. size ( ) )
Assert. assertEquals ( expected, actual )
assertEquals ( value, ( Double ) subject. value ( ), 0.01 )
assertions. doesNotContainValue ( value, index )
assertThat ( command. getMaximumTimeMilliseconds ( ), is ( value ) )
assertThat ( component. execute ( ), is ( expected ) )
arrays. assertContains ( description, new byte [ 1 ], new byte [ 0 ] )
assertEquals ( expectedCsvSchema, schema )
Assert. fail ( "Xfdf files are not equal" )
assertThat ( CalendarWeek. from ( cw. toProlepticNumber ( ) ), is ( cw ) )
assertEquals ( table, metadata. getTable ( ) )
assertEquals ( ius, st )
assertNotEquals ( circle1. radius ( ), circle2. radius ( ) )
Assert. assertEquals ( expResult, result )
assertEquals ( "http://localhost:8080/api/v1/key/123456/agency/1/command/predictions/?rs=16E&rs=52&rs=53&rs=54&rs=D4&format=json", Utils. makeCall ( preEncodedPredictionsUrl, "POST" ) )
assertTrue ( taxonomy. getNode ( A )!= null && taxonomy. getNode ( F )!= null )
Assert. assertSame ( PUBLIC_VISIBILITY, this. component. getVisibility ( this. entity1 ) )
assertFalse ( thrown )
Assert. assertEquals ( 999, spanEvent. getSequence ( ) )
assertEquals ( e. getFreeVars ( ), "i" )
assertEquals ( expected, contentSummary. toString ( false, true ) )
Assert. assertNull ( "Entity should be null", result )
assertEquals ( Result. STOP. combine ( Result. PASS ), and. apply ( pathData, - 1 ) )
assertTrue ( "Wrong number of messages sent.", userInbox. size ( ) == 1 )
assertResultSet ( res )
assertThat ( prop. satisfiesConstraints ( value, session ), is ( false ) )
assertNotNull ( info )
Assert. assertEquals ( "1-2", FreeMarkerUtils. format ( tpl, args ) )
assertNotNull ( resource )
Assert. assertTrue ( result )
assertEquals ( found, xa )
assertNotNull ( exception )
assertThat ( formatter. format ( PlainDate. of ( 2015, 10, 1 ) ), is ( "Saturday, 2007-10-01" ) )
assertArrayEquals ( exp, r )
Assert. assertFalse ( pg1. intersects ( pg2 ) )
Assert. assertEquals ( "Delete_rows_v1", actual )
assertEquals ( 0, content. refCnt ( ) )
assertMockEndpointsSatisfied ( )
Assert. assertEquals ( expectedCssString, rewriteCssString )
assertTrue ( msg, dynAny. equal ( dynAny2 ) )
Assert. assertEquals ( "SELECT SECOND('10:05:03');", text )
assertEquals ( 1, val, 1e-5 )
Assert. assertNull ( concept )
Assert. fail ( "NullPointerException should have been thrown" )
assertEquals ( 0, arr. length )
assertEquals ( 0, r1. compareTo ( r2 ) )
Assert. isTrue ( true )
assertThat ( getConfigurationOfDmnEngine ( ). getScriptEngineResolver ( ), is ( scriptEngineResolver ) )
assertFalse ( matches )
assertThat ( response, containsString ( "% Abuse contact for 'abuse@ripe.net' is 'abuse@ripe.net'\\n" + "\\n" + "query:   ����������������������������������������������������������������������
assertThat ( scope1, is ( not ( equalTo ( scope1 ) ) ) )
assertEquals ( found. size ( ), 4 )
assertEquals ( g1, g2 )
Assert. assertTrue ( true )
assertNotNull ( result )
Assert. assertEquals ( "000003", sb. toString ( ) )
assertTrue ( n1. equals ( n2 ) )
assertEquals ( clazz. getName ( ), orderType. getJavaClassObject ( ) )
assertEquals ( expectedFeatures, tokens. get ( 0 ). getAllFeatures ( ) )
assertEquals ( "Jersey/7.0", response )
Assert. assertEquals ( "number emitted tuples", numtuples, itemSink. count )
assertEquals ( expected, actual )
assertTrue ( "Accumulating failed", counter. get ( ) > 0 )
arrays. assertNotEmpty ( description, null )
assertNotNull ( kieModule )
assertPlanMatches ( expected )
assertThat ( result, is ( instanceOf ( Success. class ) ) )
assertEquals ( 2, provider. getFilters ( ). length )
Assert. assertEquals ( 201, action. getResponse ( ). getStatusLine ( ). getStatusCode ( ) )
assertThat ( result, is ( nullValue ( ) ) )
Assert. assertEquals ( gen. generateInchi ( ac ). getInChI ( ), "InChI=1S/Cl/InChI=1S/InChI=1S/Cl/InChI=1S" )
assertEquals ( expResult, result )
Assert. assertNull ( value )
assertEquals ( "@org.junit.test.AnnotationBuilderTest.Mult(a=1, b=mark)", builder. build ( ). toString ( ) )
assertFalse ( or. isDefined ( ) )
assertions. containsSequence ( 16, 16, 18 )
assertEquals ( Lists. newArrayList ( DefaultDistance. of ( 100, DistanceUnit. METERS ), DefaultDistance. of ( 1000, DistanceUnit. METERS ) ), Lists. newArrayList ( Distances. distanceIterator ( upto ) ) )
assertThat ( tuple. getIntegerOrDefault ( "field", 2 ), equalTo ( 1 ) )
assertEquals ( NON_ASCII_UTF8_STRING, result )
assertThat ( databaseFixer. getFailedRelations ( ), contains ( likeVertex ( ). withTim_id ( "id1" ) ) )
assertTrue ( "Focus should be in the Grid", getFocusedElement ( ). getAttribute ( "class" ). contains ( "v-grid" ) )
assertEquals ( userId, action. getUserId ( ) )
assertThat ( applied, is ( RuntimeContext. DEFAULT ) )
assertEquals ( "Yaml", yamlParsers. get ( "JYaml" ) )
assertNull ( result )
Assert. assertNull ( result )
assertEquals ( getLoggingEvent ( ). getFormattedMessage ( ), "CONFIG:\\n" + String. format ( "main:\\n%s", sep ) )
assertEquals ( newArrayList ( "bar1", "bar2" ), response. getMultipleHeadersAsString ( ) )
Assert. assertFalse ( isOk )
assertFalse ( service. hasProperty ( "test" ) )
assertThat ( codes, containsInAnyOrder ( "That", "I have a system with regex donor" ) )
assertThat ( msg. data ( ), is ( new byte [ ] { 10, 11 } ) )
assertFalse ( valid )
Assert. assertEquals ( HttpStatus. SC_UNAUTHORIZED, response. getCode ( ) )
assertThat ( restored. get ( ), is ( option. get ( ) ) )
assertEquals ( "http://www.leveluplunch.com/clearcache?bloom=true&fieldData=false", clearCache. getURI ( ElasticsearchVersion. UNKNOWN ) )
Assert. assertEquals ( state. IDLE, state )
assertEquals ( sizeBeforeAdding + 1, list. size ( ) )
Assert. assertTrue ( diff < 5 )
assertEquals ( withLabel, pd1 )
assertEquals ( actionDetailsArray, actionOut. getData ( ) )
assertNull ( x1 )
assertEquals ( "The first state on third page is not correct", FIRST_STATE_THIRD_PAGE, actual )
assertEquals ( expected, result )
assertThat ( rollup. isFreshEnough ( ), is ( false ) )
assertEquals ( p1, p2 )
Assert. assertEquals ( "true", p. getProperty ( PseudoAuthenticationHandler. ANONYMOUS_ALLOWED ) )
assertThat ( mentions, hasItem ( mentionedEntity ( 0, mention. length ( ), EntityType. ANNOTATION_PROPERTY, iri ) ) )
assertObject ( list, gtype )
assertEquals ( "Salt value not too long", "This Salt Is Too Long And Will Be Truncated", service. getSalt ( ) )
assertEquals ( "Junit error", normalize ( expectedString ), normalize ( chart. toURLString ( ) ) )
assertEquals ( 404, response. getStatus ( ) )
assertNull ( parsedArg )
assertTrue ( s. getName ( ). equals ( "cleaning" ) )
assertTrue ( delegate. getPointFormats ( ). equals ( supportedPointFormats ) )
assertTrue ( value. isReplaceableBy ( 99L, 9, ComparableComparator. INSTANCE ) )
assertThat ( testRunnables. isEmpty ( ), is ( true ) )
assertEquals ( "Hello", new AttributedText ( sb ). foreground ( 254 ). toString ( ) )
assertOut ( "a += b" )
assertThat ( s, is ( "1970-01-01 00:00:00" ) )
assertTrue ( "Streams should be equal", Arrays. equals ( expected, actual ) )
this. assertScriptReturnsTrue ( "" + "String s = \\"g\\";\\n" + "\\n" + "switch (s) {\\n" + "case \\"a\\": case \\"b\\": case \\"c\\":\\n" + "    return false;\\n" + "case \\"d\\": case \\"e\\": case \\"f\\":\\n" + "    return false;\\n" + "default:\\n" + "    return true;" + "}\\n" )
assertEquals ( expected, actual )
assertTrue ( verifyProps ( a, LIST_A ) )
assertThat ( xPath, is ( "(.//*[@id ='myID']//*[self::text()]" ) )
assertThat ( e, instanceOf ( MyException. class ) )
assertEquals ( "No such service test", result )
assertEquals ( expected, result )
assertEquals ( 0, errors. size ( ) )
assertEquals ( 0, out. size ( ) )
assertEquals ( "subName", expr. exec ( new PmExprExecCtxt ( pmConversation ) ) )
Assert. assertEquals ( "Missing component id", MicroPipelineValidationResult. MISSING_COMPONENT_ID, new MicroPipelineValidator ( ). validateComponent ( cfg, queues, Collections. < String > emptySet ( ) ) )
Assert. assertEquals ( result. getResultSize ( ), 0 )
assertThat ( matcher. matches ( "<some xml=\\"true\\" />" ), is ( true ) )
assertTrue ( "No keyword movies found",! result. isEmpty ( ) )
assertEquals ( testEntry. f1, encoding. name ( ) )
assertTrue ( keeper. exists ( pth, false )!= null )
Assert. assertEquals ( "Delete_rows_v1", actual )
assertEquals ( SwitchingProtocols. MESSAGE, ri. getDescription ( ) )
assertEquals ( "2h2m2s", s )
assertEquals ( DOMAIN + "@" + RESOURCE, bareJID )
Assert. assertTrue ( "Document contains key'receipt'", sw. toString ( ). contains ( "key 'Oz-Ware Purchase Invoice'" ) )
Assert. assertTrue ( provider. isValidField ( content, contentId ) )
assertEquals ( "1. Status: OK", line )
assertTrue ( changes. isEmpty ( ) )
assertFalse ( CommitUtils. isMergedInto ( "test_branch", masterFirst, repo ) )
assertDestinationFileContentIsMultiPartContent ( )
assertEquals ( 2, callCnt. get ( ) )
assertEquals ( "INSERT INTO mycatalog.myschema.my_table (col3) VALUES (nextval('myschema.my_seq' AS BIGINT)", theSql )
Assert. assertTrue ( "No metrics should be registered", this. metricRegistry. getNames ( ). isEmpty ( ) )
Assert. assertEquals ( aString, sut. getInstance ( ) )
Assert. assertNotNull ( tasks )
Assert. assertEquals ( 16 * iterations, lockedCounter. get ( ) )
assertEquals ( "bar", json. toJSON ( ). get ( "foo" ) )
assertNull ( factory. getBaseSkin ( facesContext ). getParameter ( facesContext, Skin. GENERAL_BACKGROUND_COLOR ) )
assertEquals ( map1, map2 )
Assert. assertFalse ( fastMergerDecisionMaker. isFastMergePossible ( fileMetadata ) )
assertEquals ( "id", e. getSubject ( ) )
assertTrue ( "Sun implementation took " + sunGap + " millisseconds and default implemetation took " + defaultGap + " millisseconds.", sunGap < defaultGap )
assertThat ( rowsAffected, is ( 1 ) )
Assert. assertTrue ( "Should have 0 event", events. size ( ) == 0 )
assertEquals ( "INSERT INTO streaming_keyspace_name (\\"streaming_keyspaces\\",\\"timestamp\\") VALUES (?,?)", insert. toString ( ) )
assertEquals ( "Faire action sur \\\\*([a-zA-Z_0-9\\\\-.]+):(.*)$", descriptor. getRegex ( ) )
assertEquals ( "{a1:'v1',a2:'123',a4:'',b1:'true',b2:'123',b3:'null',c1:'v1',c2:'123',c4:''}", r )
